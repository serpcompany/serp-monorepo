[
  {
    "owner": "plotly",
    "repo": "graphing-library-docs",
    "content": "TITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plotly Scatter Plot in Python\nDESCRIPTION: Creates a basic scatter plot using Plotly's graph objects with custom markers, lines and text labels. Demonstrates setting up trace data and layout configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(x=[1,2,3], y=[4,5,6], marker={'color': 'red', 'symbol': 104, 'size': 10}, \n                    mode=\"markers+lines\",  text=[\"one\",\"two\",\"three\"], name='1st Trace')\n                                               \ndata=go.Data([trace1])\nlayout=go.Layout(title=\"First Plot\", xaxis={'title':'x1'}, yaxis={'title':'x2'})\nfigure=go.Figure(data=data,layout=layout)\npy.iplot(figure, filename='pyguide_1')\n```\n\n----------------------------------------\n\nTITLE: Importing and Checking Plotly Version\nDESCRIPTION: Basic setup code to import plotly package and check its installed version\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import plotly package\nimport plotly\n\n# Check plolty version (if not latest, please upgrade)\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Series with Rangeslider in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a time series plot with an interactive rangeslider and range selector buttons. It visualizes Apple stock high and low prices over time and allows users to zoom in on specific time periods using the rangeslider and preset time range buttons.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n\ntrace_high = go.Scatter(\n    x=df.Date,\n    y=df['AAPL.High'],\n    name = \"AAPL High\",\n    line = dict(color = '#17BECF'),\n    opacity = 0.8)\n\ntrace_low = go.Scatter(\n    x=df.Date,\n    y=df['AAPL.Low'],\n    name = \"AAPL Low\",\n    line = dict(color = '#7F7F7F'),\n    opacity = 0.8)\n\ndata = [trace_high,trace_low]\n\nlayout = dict(\n    title='Time Series with Rangeslider',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename = \"Time Series with Rangeslider\")\n```\n\n----------------------------------------\n\nTITLE: Creating Violin Plot with Plotly\nDESCRIPTION: Generates a violin plot visualization of the alcohol consumption data distribution using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ny = data['alcohol'].values.tolist()\n\nfig = FF.create_violin(y, title='Violin Plot', colors='#604d9e')\npy.iplot(fig, filename='alcohol-violin-visual')\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Text to Bar Chart with Plotly in Python\nDESCRIPTION: This snippet shows how to add hover text to a bar chart using Plotly in Python. It displays market share information when hovering over each bar.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Bar(\n    x=['Product A', 'Product B', 'Product C'],\n    y=[20, 14, 23],\n    text=['27% market share', '24% market share', '19% market share'],\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\ndata = [trace0]\nlayout = go.Layout(\n    title='January 2013 Sales Report',\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='text-hover-bar')\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Line and Scatter Plots in Plotly\nDESCRIPTION: This snippet demonstrates how to add text labels to data points in line and scatter plots with different positioning options. The example shows three different modes: lines+markers+text, markers+text, and lines+text.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    mode='lines+markers+text',\n    name='Lines, Markers and Text',\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top center'\n)\n\ntrace2 = go.Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    mode='markers+text',\n    name='Markers and Text',\n    text=['Text D', 'Text E', 'Text F'],\n    textposition='bottom center'\n)\n\ntrace3 = go.Scatter(\n    x=[0, 1, 2],\n    y=[3, 3, 3],\n    mode='lines+text',\n    name='Lines and Text',\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom center'\n)\n\ndata = [trace1, trace2, trace3]\n\nlayout = go.Layout(\n    showlegend=False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='text-chart-basic')\n```\n\n----------------------------------------\n\nTITLE: Creating Line and Bar Chart in Plotly with Python\nDESCRIPTION: This snippet demonstrates how to create a mixed chart with both line and bar elements using Plotly's Python library. It creates separate trace objects for the line and bar components, then combines them into a single plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/mixed/mixed.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n)\ntrace2 = go.Bar(\n    x=[0, 1, 2, 3, 4, 5],\n    y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='bar-line')\n```\n\n----------------------------------------\n\nTITLE: Adding Play and Pause Buttons to Plotly Animated Bubble Chart\nDESCRIPTION: This snippet adds play and pause buttons to control the animation of the bubble chart. It also defines custom colors for different continents.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\ncustom_colors = {\n    'Asia': 'rgb(171, 99, 250)',\n    'Europe': 'rgb(230, 99, 250)',\n    'Africa': 'rgb(99, 110, 250)',\n    'Americas': 'rgb(25, 211, 243)',\n    'Oceania': 'rgb(50, 170, 255)'\n}\n```\n\n----------------------------------------\n\nTITLE: North American Precipitation Map with Plotly\nDESCRIPTION: Creates an interactive precipitation map for North America using Plotly's Scattergeo. The visualization shows precipitation levels with color-coded points and includes detailed geographic projections.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/scatter-plot-on-maps/scatter-plot-on-map.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv')\n\nscl = [0,\"rgb(150,0,90)\"],[0.125,\"rgb(0, 0, 200)\"],[0.25,\"rgb(0, 25, 255)\"],\\\n[0.375,\"rgb(0, 152, 255)\"],[0.5,\"rgb(44, 255, 150)\"],[0.625,\"rgb(151, 255, 0)\"],\\\n[0.75,\"rgb(255, 234, 0)\"],[0.875,\"rgb(255, 111, 0)\"],[1,\"rgb(255, 0, 0)\"]\n\ndata = [go.Scattergeo(\n    lat = df['Lat'],\n    lon = df['Lon'],\n    text = df['Globvalue'].astype(str) + ' inches',\n    marker = dict(\n        color = df['Globvalue'],\n        colorscale = scl,\n        reversescale = True,\n        opacity = 0.7,\n        size = 2,        \n        colorbar = dict(\n            thickness = 10,\n            titleside = \"right\",\n            outlinecolor = \"rgba(68, 68, 68, 0)\",\n            ticks = \"outside\",\n            ticklen = 3,\n            showticksuffix = \"last\",\n            ticksuffix = \" inches\",\n            dtick = 0.1\n        )                \n    )\n)]\n\nlayout = dict(\n    geo = dict(\n        scope = 'north america',\n        showland = True,\n        landcolor = \"rgb(212, 212, 212)\",\n        subunitcolor = \"rgb(255, 255, 255)\",\n        countrycolor = \"rgb(255, 255, 255)\",\n        showlakes = True,\n        lakecolor = \"rgb(255, 255, 255)\",\n        showsubunits = True,\n        showcountries = True,\n        resolution = 50,\n        projection = dict(\n            type = 'conic conformal',\n            rotation = dict(\n                lon = -100\n            )\n        ),\n        lonaxis = dict(\n            showgrid = True,\n            gridwidth = 0.5,\n            range= [ -140.0, -55.0 ],\n            dtick = 5\n        ),\n        lataxis = dict (\n            showgrid = True,\n            gridwidth = 0.5,\n            range= [ 20.0, 60.0 ],\n            dtick = 5\n        )\n    ),\n    title = 'US Precipitation 06-30-2015<br>Source: <a href=\"http://water.weather.gov/precip/\">NOAA</a>',\n)\n\nfig = go.Figure(data=data, layout=layout )\npy.iplot(fig, filename='precipitation')\n```\n\n----------------------------------------\n\nTITLE: Plotting Soil Types Ternary Plot in Python\nDESCRIPTION: This code uses Plotly's iplot function to display the soil types ternary plot in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\niplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Privacy Settings\nDESCRIPTION: Set default privacy configuration for Plotly plots to private mode.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.tools.set_config_file(world_readable=False,\n                             sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Basic Sunburst Chart Implementation\nDESCRIPTION: Creates a basic sunburst chart with family tree data showing relationships between parents and children. Uses labels, parents, and values to define the hierarchy and size of segments.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Sunburst(\n    labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n    outsidetextfont = {\"size\": 20, \"color\": \"#377eb8\"},\n    marker = {\"line\": {\"width\": 2}},\n)\n\nlayout = go.Layout(\n    margin = go.layout.Margin(t=0, l=0, r=0, b=0)\n)\n\npy.iplot(go.Figure([trace], layout), filename='basic_sunburst_chart')\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Cone Vortex Visualization in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a 3D cone vortex visualization using Plotly. It loads data from a CSV file and plots cones representing a vortex flow field.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv\")\n\ndata = [{\n    \"type\": \"cone\",\n    \"x\": df['x'],\n    \"y\": df['y'],\n    \"z\": df['z'],\n    \"u\": df['u'],\n    \"v\": df['v'],\n    \"w\": df['w'],\n    \"colorscale\": 'Blues',\n    \"sizemode\": \"absolute\",\n    \"sizeref\": 40\n}]\n\nlayout = {\n    \"scene\": {\n        \"aspectratio\": {\"x\": 1, \"y\": 1, \"z\": 0.8},\n        \"camera\": {\n            \"eye\": {\"x\": 1.2, \"y\": 1.2, \"z\": 0.6}\n        }\n    }\n}\n\nfig = {\"data\": data, \"layout\": layout}\npy.iplot(fig, filename=\"cone-vortex\", validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plot with Underlying Data in Plotly Python\nDESCRIPTION: This snippet shows how to create a box plot that displays the underlying data points. It uses the 'boxpoints' parameter to show all data points with jitter and adjusted position.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Box(\n        y=[0, 1, 1, 2, 3, 5, 8, 13, 21],\n        boxpoints='all',\n        jitter=0.3,\n        pointpos=-1.8\n    )\n]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ambient Lighting on Surface Plots\nDESCRIPTION: Creates two surface plots with different ambient lighting values. Ambient lighting controls the default light in the scene, ranging from 0 to 1.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig = tls.make_subplots(rows=1, cols=2,specs=[[{'is_3d': True},{'is_3d': True} ]])\n\n\ntrace1 = go.Surface(z=Z1, colorscale='Viridis', lighting=dict(ambient=0.2))\ntrace2 = go.Surface(z=Z2, colorscale='Viridis',showscale=False, lighting=dict(ambient=0.9))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Legend in Plotly with Python\nDESCRIPTION: This snippet demonstrates how to create a horizontal legend in a Plotly chart. It uses the 'orientation' parameter in the legend layout to set the legend orientation to horizontal.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    legend=dict(orientation=\"h\")\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='horizontal-legend')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple OHLC Chart with Pandas in Python\nDESCRIPTION: This code demonstrates how to create a basic OHLC (Open-High-Low-Close) chart using pandas for data handling and Plotly for visualization. It loads Apple stock data from a CSV file and plots it as an OHLC chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\ndata = [trace]\npy.iplot(data, filename='simple_ohlc')\n```\n\n----------------------------------------\n\nTITLE: Isosurface with Additional Slices in Python\nDESCRIPTION: Implements a more complex isosurface plot with custom mathematical function and additional z-axis slices. Includes camera positioning and surface customization options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/iso-surface/isosurfaces.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nf = lambda x, y, z:  81*(x**3 + y**3 + z**3) - 189*(x**2*y + x**2*z + y**2*x +y**2*z + z**2*x + z**2*y) +\\\n                     54*(x*y*z) + 126*(x*y + x*z + y*z) - 9*(x**2 + y**2 + z**2) - 9*(x + y + z) + 1\n\na = 1\nX, Y, Z = np.mgrid[-a:a:25j, -a:a:25j, -a:a:25j]\n\ndata = [go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=f(X, Y, Z).flatten(),\n    isomin=-100,\n    isomax=100,\n    surface=dict(show=True,count=1, fill=0.8),\n    slices=go.isosurface.Slices(\n        z=go.isosurface.slices.Z(\n            show = True,\n            locations=[-0.3, 0.5])\n    ),\n    caps=go.isosurface.Caps(\n        z=dict(show=False),\n        x=dict(show=False),\n        y=dict(show=False)\n    ),\n)]\n\nlayout = go.Layout(\n    margin=dict(t=0, l=0, b=0),\n    scene=dict(\n        camera=dict(\n            eye=dict(\n                x=1.86,\n                y=0.61,\n                z=0.98\n            )\n        )\n    )\n)\n\nfig = go.Figure(data, layout)\n\npy.iplot(fig, config=dict(showSendToCloud=True), filename='isosurface-with-slices')\n```\n\n----------------------------------------\n\nTITLE: Combining Dendrogram with Heatmap in Plotly\nDESCRIPTION: This complex example shows how to create a dendrogram combined with a heatmap. It involves creating separate dendrograms for rows and columns, generating a heatmap, and combining them into a single figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nfrom scipy.spatial.distance import pdist, squareform\n\n\n# get data\ndata = np.genfromtxt(\"http://files.figshare.com/2133304/ExpRawData_E_TABM_84_A_AFFY_44.tab\",\n                     names=True,usecols=tuple(range(1,30)),dtype=float, delimiter=\"\\t\")\ndata_array = data.view((np.float, len(data.dtype.names)))\ndata_array = data_array.transpose()\nlabels = data.dtype.names\n\n# Initialize figure by creating upper dendrogram\nfigure = ff.create_dendrogram(data_array, orientation='bottom', labels=labels)\nfor i in range(len(figure['data'])):\n    figure['data'][i]['yaxis'] = 'y2'\n\n# Create Side Dendrogram\ndendro_side = ff.create_dendrogram(data_array, orientation='right')\nfor i in range(len(dendro_side['data'])):\n    dendro_side['data'][i]['xaxis'] = 'x2'\n\n# Add Side Dendrogram Data to Figure\nfor data in dendro_side['data']:\n    figure.add_trace(data)\n\n# Create Heatmap\ndendro_leaves = dendro_side['layout']['yaxis']['ticktext']\ndendro_leaves = list(map(int, dendro_leaves))\ndata_dist = pdist(data_array)\nheat_data = squareform(data_dist)\nheat_data = heat_data[dendro_leaves,:]\nheat_data = heat_data[:,dendro_leaves]\n\nheatmap = [\n    go.Heatmap(\n        x = dendro_leaves, \n        y = dendro_leaves,\n        z = heat_data,    \n        colorscale = 'Blues'\n    )\n]\n\nheatmap[0]['x'] = figure['layout']['xaxis']['tickvals']\nheatmap[0]['y'] = dendro_side['layout']['yaxis']['tickvals']\n\n# Add Heatmap Data to Figure\nfor data in heatmap:\n    figure.add_trace(data)\n\n# Edit Layout\nfigure['layout'].update({'width':800, 'height':800,\n                         'showlegend':False, 'hovermode': 'closest',\n                         })\n# Edit xaxis\nfigure['layout']['xaxis'].update({'domain': [.15, 1],\n                                  'mirror': False,\n                                  'showgrid': False,\n                                  'showline': False,\n                                  'zeroline': False,\n                                  'ticks':''})\n# Edit xaxis2\nfigure['layout'].update({'xaxis2': {'domain': [0, .15],\n                                   'mirror': False,\n                                   'showgrid': False,\n                                   'showline': False,\n                                   'zeroline': False,\n                                   'showticklabels': False,\n                                   'ticks':''}})\n\n# Edit yaxis\nfigure['layout']['yaxis'].update({'domain': [0, .85],\n                                  'mirror': False,\n                                  'showgrid': False,\n                                  'showline': False,\n                                  'zeroline': False,\n                                  'showticklabels': False,\n                                  'ticks': ''})\n# Edit yaxis2\nfigure['layout'].update({'yaxis2':{'domain':[.825, .975],\n                                   'mirror': False,\n                                   'showgrid': False,\n                                   'showline': False,\n                                   'zeroline': False,\n                                   'showticklabels': False,\n                                   'ticks':''}})\n\n# Plot!\npy.iplot(figure, filename='dendrogram_with_heatmap')\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Series Plot with Date Strings in Python using Plotly\nDESCRIPTION: This example shows how to create a time series plot using date strings. It loads Apple stock data and plots the 'Close' price values. The function automatically handles the conversion of date strings to datetime objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n\ndata = [go.Scatter(\n          x=df.Date,\n          y=df['AAPL.Close'])]\n\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot Traces\nDESCRIPTION: Demonstrates creating scatter plot traces with different modes and markers for multiple datasets\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Make scatter trace object with data for China\ntrace_china = Scatter(\n    Quartz7_data['data'][0],  # (!) 'name', 'x' and 'y' as in original figure\n    mode='markers+lines'      # marker pts and lines (the default here)\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Make instance of Scatter object with data for the USA\ntrace_usa = Scatter(\n    Quartz7_data['data'][1],  # (!) 'name', 'x' and 'y' as in original figure\n    mode='markers',           # show marker pts only\n    marker=Marker(\n        symbol='square'       # show square marker pts\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Animated Plot with Slider and Buttons using Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a complex animated plot with a slider and buttons using Plotly and the Gapminder dataset. It creates a bubble chart showing the change in GDP per Capita against Life Expectancy for various countries over time, with animation controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\n\nimport pandas as pd\n\ninit_notebook_mode(connected=True)\n\nurl = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'\ndataset = pd.read_csv(url)\n\nyears = ['1952', '1962', '1967', '1972', '1977', '1982', '1987', '1992', '1997', '2002', '2007']\n# make list of continents\ncontinents = []\nfor continent in dataset['continent']:\n    if continent not in continents:\n        continents.append(continent)\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\n# fill in most of layout\nfigure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy'}\nfigure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log'}\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1952',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1952\nfor continent in continents:\n    dataset_by_year = dataset[dataset['year'] == year]\n    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]\n\n    data_dict = {\n        'x': list(dataset_by_year_and_cont['lifeExp']),\n        'y': list(dataset_by_year_and_cont['gdpPercap']),\n        'mode': 'markers',\n        'text': list(dataset_by_year_and_cont['country']),\n        'marker': {\n            'sizemode': 'area',\n            'sizeref': 200000,\n            'size': list(dataset_by_year_and_cont['pop'])\n        },\n        'name': continent\n    }\n    figure['data'].append(data_dict)\n    \n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for continent in continents:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]\n\n        data_dict = {\n            'x': list(dataset_by_year_and_cont['lifeExp']),\n            'y': list(dataset_by_year_and_cont['gdpPercap']),\n            'mode': 'markers',\n            'text': list(dataset_by_year_and_cont['country']),\n            'marker': {\n                'sizemode': 'area',\n                'sizeref': 200000,\n                'size': list(dataset_by_year_and_cont['pop'])\n            },\n            'name': continent\n        }\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n    \nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)\n```\n\n----------------------------------------\n\nTITLE: Customizing Candlestick Colors in Plotly\nDESCRIPTION: Shows how to customize the colors of increasing and decreasing candlesticks. This example changes the default green/red colors to custom colors (#17BECF and #7F7F7F) for increasing and decreasing price movements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Candlestick(\n    x=df['Date'],\n    open=df['AAPL.Open'],\n    high=df['AAPL.High'],\n    low=df['AAPL.Low'],\n    close=df['AAPL.Close'],\n    increasing=dict(line=dict(color= '#17BECF')),\n    decreasing=dict(line=dict(color= '#7F7F7F'))\n)\ndata = [trace]\npy.iplot(data, filename='styled_candlestick')\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Color Parallel Categories Diagram with Titanic Dataset\nDESCRIPTION: Visualizes Titanic passenger survival data using a color-coded parallel categories diagram with customized hovering, arrangement, and font settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntitanic_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv\")\n\n# Create dimensions\nclass_dim = go.parcats.Dimension(\n    values=titanic_df.Pclass,\n    categoryorder='category ascending',\n    label=\"Class\"\n)\n\ngender_dim = go.parcats.Dimension(\n    values=titanic_df.Sex,\n    label=\"Gender\"\n)\n\nsurvival_dim = go.parcats.Dimension(\n  values=titanic_df.Survived,\n  label=\"Outcome\",\n  categoryarray=[0, 1],\n  ticktext=['perished', 'survived'],\n)\n\n# Create parcats trace\ncolor = titanic_df.Survived;\ncolorscale = [[0, 'lightsteelblue'], [1, 'mediumseagreen']];\n\ndata = [\n    go.Parcats(\n        dimensions=[class_dim, gender_dim, survival_dim],\n        line={'color': color,\n              'colorscale': colorscale},\n        hoveron='color',\n        hoverinfo='count+probability',\n        labelfont={'size': 18, 'family': 'Times'},\n        tickfont={'size': 16, 'family': 'Times'},\n        arrangement='freeform'\n    )\n]\n\n# Display figure\niplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Large Data Set Scatter Plots with WebGL in Plotly Python\nDESCRIPTION: This example demonstrates how to use Scattergl() instead of Scatter() for increased speed and improved interactivity when plotting large data sets. It creates a scatter plot with 100,000 points using WebGL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\nN = 100000\ntrace = go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode = 'markers',\n    marker = dict(\n        color = '#FFBAD2',\n        line = dict(width = 1)\n    )\n)\ndata = [trace]\npy.iplot(data, filename='compare_webgl')\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Category Waterfall Chart with Plotly in Python\nDESCRIPTION: This example demonstrates how to create a multi-category waterfall chart using Plotly. It uses the waterfallgroupgap attribute to set gaps between bars and shows data across multiple years and quarters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = False)\n\ntrace1 = go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]],\n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n    y = [1, 2, 3, -1, None, 1, 2, -4, None],\n    base = 1000\n)\ntrace2 = go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]],\n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n    y = [1.1, 2.2, 3.3, -1.1, None, 1.1, 2.2, -4.4, None],\n    base = 1000\n)\n\nlayout = go.Layout(\n    waterfallgroupgap = 0.5,\n    xaxis = {\"title\":\"MULTI-CATEGORY\",\"tickfont\":{\"size\":16},\"ticks\":\"outside\"}\n)\n\ndata = [trace1,trace2]\nfig = go.Figure(data, layout)\npy.iplot(fig,filename = \"mutli_category_waterfall\")\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Text to Scatter Plots in Plotly\nDESCRIPTION: This example shows how to add hover text to data points in a scatter plot. When users hover over each point, the corresponding text will be displayed, providing additional context or information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[0, 1, 2],\n        y=[1, 3, 2],\n        mode='markers',\n        text=['Text A', 'Text B', 'Text C']\n    )\n]\n\nlayout = go.Layout(\n    title='Hover over the points to see the text'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='hover-chart-basic')\n```\n\n----------------------------------------\n\nTITLE: Connecting Data Gaps in Line Plots with Plotly in Python\nDESCRIPTION: This example shows how to handle data gaps in line plots. It demonstrates the use of the 'connectgaps' parameter to connect or leave gaps in the plot where data is missing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5, \n       6, 7, 8, 9, 10,\n       11, 12, 13, 14, 15],\n    y=[10, 20, None, 15, 10,\n       5, 15, None, 20, 10,\n       10, 15, 25, 20, 10],\n    name = '<b>No</b> Gaps', # Style name/legend entry with html tags\n    connectgaps=True\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4, 5,\n       6, 7, 8, 9, 10,\n       11, 12, 13, 14, 15],\n    y=[5, 15, None, 10, 5,\n       0, 10, None, 15, 5,\n       5, 10, 20, 15, 5],\n    name = 'Gaps',\n)\n\ndata = [trace1, trace2]\n\nfig = dict(data=data)\npy.iplot(fig, filename='simple-connectgaps')\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Final Figure\nDESCRIPTION: Shows how to combine traces into a data object, create layout, and generate the final figure\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Make data object containing two traces\ndata = Data([trace_china, trace_usa])\n\n# Make a layout object\nlayout = Layout(title='Fig 1: Number of university graduates [in millions]')\n\n# Make a figure object\nfig = Figure(data=data, layout=layout)\n\n# (@) Send figure object to Plotly and show result in notebook \npy.iplot(fig, filename='s1_grad-china-usa')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Contour Plot in Plotly Python\nDESCRIPTION: Demonstrates how to create a simple contour plot using Plotly's graph objects with a basic z-matrix of values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/contour/contour.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]]\n    )\n]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple 3D Cones in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a plot with multiple 3D cones using Plotly. It sets up cones at different positions with varying directions and configures the scene layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [{\n    \"type\": \"cone\",\n    \"x\": [1, 2, 3],\n    \"y\": [1, 2, 3],\n    \"z\": [1, 2, 3],\n    \"u\": [1, 0, 0],\n    \"v\": [0, 3, 0],\n    \"w\": [0, 0, 2],\n    \"sizemode\": \"absolute\",\n    \"sizeref\": 2,\n    \"anchor\": \"tip\",\n    \"colorbar\": {\n    \"x\": 0,\n    \"xanchor\": \"right\",\n    \"side\": \"left\"\n    }\n}]\n\nlayout = {\n    \"scene\": {\n      \"domain\": {\"x\": [0, 1]},\n      \"camera\": {\n        \"eye\": {\"x\": -1.57, \"y\": 1.36, \"z\": 0.58}\n      }\n    }\n}\n\nfig = {\"data\": data, \"layout\": layout}\npy.iplot(fig, filename=\"cone-mulitple\", validate=False)\n```\n\n----------------------------------------\n\nTITLE: Styling Line Plots with Plotly in Python\nDESCRIPTION: This example demonstrates advanced styling of line plots, including color customization, line dash styles, width adjustment, and adding titles. It uses temperature data to create multiple traces with different styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Add data\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n         'August', 'September', 'October', 'November', 'December']\nhigh_2000 = [32.5, 37.6, 49.9, 53.0, 69.1, 75.4, 76.5, 76.6, 70.7, 60.6, 45.1, 29.3]\nlow_2000 = [13.8, 22.3, 32.5, 37.2, 49.9, 56.1, 57.7, 58.3, 51.2, 42.8, 31.6, 15.9]\nhigh_2007 = [36.5, 26.6, 43.6, 52.3, 71.5, 81.4, 80.5, 82.2, 76.0, 67.3, 46.1, 35.0]\nlow_2007 = [23.6, 14.0, 27.0, 36.8, 47.6, 57.7, 58.9, 61.2, 53.3, 48.5, 31.0, 23.6]\nhigh_2014 = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\nlow_2014 = [12.7, 14.3, 18.6, 35.5, 49.9, 58.0, 60.0, 58.6, 51.7, 45.2, 32.2, 29.1]\n\n# Create and style traces\ntrace0 = go.Scatter(\n    x = month,\n    y = high_2014,\n    name = 'High 2014',\n    line = dict(\n        color = ('rgb(205, 12, 24)'),\n        width = 4)\n)\ntrace1 = go.Scatter(\n    x = month,\n    y = low_2014,\n    name = 'Low 2014',\n    line = dict(\n        color = ('rgb(22, 96, 167)'),\n        width = 4,)\n)\ntrace2 = go.Scatter(\n    x = month,\n    y = high_2007,\n    name = 'High 2007',\n    line = dict(\n        color = ('rgb(205, 12, 24)'),\n        width = 4,\n        dash = 'dash') # dash options include 'dash', 'dot', and 'dashdot'\n)\ntrace3 = go.Scatter(\n    x = month,\n    y = low_2007,\n    name = 'Low 2007',\n    line = dict(\n        color = ('rgb(22, 96, 167)'),\n        width = 4,\n        dash = 'dash')\n)\ntrace4 = go.Scatter(\n    x = month,\n    y = high_2000,\n    name = 'High 2000',\n    line = dict(\n        color = ('rgb(205, 12, 24)'),\n        width = 4,\n        dash = 'dot')\n)\ntrace5 = go.Scatter(\n    x = month,\n    y = low_2000,\n    name = 'Low 2000',\n    line = dict(\n        color = ('rgb(22, 96, 167)'),\n        width = 4,\n        dash = 'dot')\n)\ndata = [trace0, trace1, trace2, trace3, trace4, trace5]\n\n# Edit the layout\nlayout = dict(title = 'Average High and Low Temperatures in New York',\n              xaxis = dict(title = 'Month'),\n              yaxis = dict(title = 'Temperature (degrees F)'),\n              )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='styled-line')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet demonstrates how to publish Plotly documentation with custom styling and metadata. It includes font loading, CSS styling, and uses the publisher library to set various attributes for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'pie-charts.ipynb', 'python/pie-charts/', 'Pie Charts',\n    'How to make Pie Charts.',\n    title= 'Pie Charts in Python | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/pie-chart.jpg', \n    language='python', page_type='example_index', \n    display_as='basic', order=6,\n    ipynb='~notebook_demo/7/')\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Annotations to Plotly Charts\nDESCRIPTION: This example demonstrates how to add multiple annotations to a Plotly chart. Each annotation can be configured independently with custom text, position, and arrow styling to highlight different points of interest.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\n\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    showlegend=False,\n    annotations=[\n        dict(\n            x=2,\n            y=5,\n            xref='x',\n            yref='y',\n            text='dict Text',\n            showarrow=True,\n            arrowhead=7,\n            ax=0,\n            ay=-40\n        ),\n        dict(\n            x=4,\n            y=4,\n            xref='x',\n            yref='y',\n            text='dict Text 2',\n            showarrow=True,\n            arrowhead=7,\n            ax=0,\n            ay=-40\n        )\n    ]\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='multiple-annotation')\n```\n\n----------------------------------------\n\nTITLE: Generating a Stock Price Scatter Matrix with Kernel Density Estimates\nDESCRIPTION: This complex snippet creates a scatter matrix of stock prices with kernel density estimation plots on the diagonal. It compares all pairs of stocks in the dataset and formats the matrix with appropriate labels and styling. The result is a comprehensive visualization of relationships between different stocks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef kde_scipy(x, x_grid, bandwidth=0.4, **kwargs):\n    \"\"\"Kernel Density Estimation with Scipy\"\"\"\n    # From https://jakevdp.github.io/blog/2013/12/01/kernel-density-estimation/\n    # Note that scipy weights its bandwidth by the covariance of the\n    # input data.  To make the results comparable to the other methods,\n    # we divide the bandwidth by the sample standard deviation here.\n    kde = gaussian_kde(x, bw_method=bandwidth / x.std(ddof=1), **kwargs)\n    return kde.evaluate(x_grid)\n\nsubplots = range(1,37)\nsp_index = 0\ndata = []\nfor i in range(1,7):\n    x_ticker = df.columns[i-1]\n    for j in range(1,7):\n        y_ticker = df.columns[j-1]\n        if i==j: \n            x = df[x_ticker]\n            x_grid = np.linspace(x.min(), x.max(), 100)\n            sp = [ go.Histogram( x=x, histnorm='probability density' ), \\\n                  go.Scatter( x=x_grid, y=kde_scipy( x.as_matrix(), x_grid ), \\\n                          line=dict(width=2,color='red',opacity='0.5') ) ]\n        else:\n            sp = [ go.Scatter( x=df[x_ticker], y=df[y_ticker], mode='markers', marker=dict(size=3) ) ]\n        \n        for ea in sp:\n            ea.update( name='{0} vs {1}'.format(x_ticker,y_ticker),\\\n                      xaxis='x{}'.format(subplots[sp_index]),\\\n                      yaxis='y{}'.format(subplots[sp_index])\n            )\n        sp_index+=1\n        data += sp\n\n# Add x and y labels\nleft_index = 1\nbottom_index = 1\nfor tk in tickers:\n    fig['layout']['xaxis{}'.format(left_index)].update( title=tk )\n    fig['layout']['yaxis{}'.format(bottom_index)].update( title=tk )\n    left_index=left_index+1\n    bottom_index=bottom_index+6\n    \n# Remove legend by updating 'layout' key\nfig['layout'].update(showlegend=False,height=1000,width=1000, title='Major technology and CPG stock prices in 2014')\nfig['data'] = data\npy.iplot(fig, height=1000, width=1000, filename='Major technology and CPG stock prices in 2014 - scatter matrix')\n```\n\n----------------------------------------\n\nTITLE: Implementing Logarithmic Axes in Plotly Python\nDESCRIPTION: Creates a scatter plot using logarithmic scales for both x and y axes with automatic range determination. This example demonstrates how to transform your data visualization using logarithmic scaling to better display data that spans multiple orders of magnitude.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        type='log',\n        autorange=True\n    ),\n    yaxis=dict(\n        type='log',\n        autorange=True\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-range-type')\n```\n\n----------------------------------------\n\nTITLE: Large Scale Sunburst Chart with Multiple Subplots\nDESCRIPTION: Demonstrates how to create multiple sunburst charts using grid layouts and external data sources. Includes color customization and depth control features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf1 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')\ndf2 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')\n\ntrace1 = go.Sunburst(\n    ids=df1.ids,\n    labels=df1.labels,\n    parents=df1.parents,\n    domain=dict(column=0)\n)\n\ntrace2 = go.Sunburst(\n    ids=df2.ids,\n    labels=df2.labels,\n    parents=df2.parents,\n    domain=dict(column=1),\n    maxdepth=2\n)\n\nlayout = go.Layout(\n    grid=go.layout.Grid(columns=2, rows=1),\n    margin = go.layout.Margin(t=0, l=0, r=0, b=0),\n    sunburstcolorway=[\n    \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n    \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\"\n  ],\n    extendsunburstcolors=True\n)\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data, layout)\n\npy.iplot(fig, filename='large_number_of_slices')\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Parametric Plot with Colorscale using Plotly in Python\nDESCRIPTION: This snippet shows how to create a 3D parametric plot with a colorscale using Plotly's Python library. It uses a more complex parametric equation and applies the Viridis colorscale to the surface plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-parametric/3d-parametric.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ndphi, dtheta = np.pi / 250.0, np.pi / 250.0\n[phi, theta] = np.mgrid[0:np.pi + dphi * 1.5:dphi, 0:2 * np.pi +\n                        dtheta * 1.5:dtheta]\nm0 = 4; m1 = 3; m2 = 2; m3 = 3; m4 = 6; m5 = 2; m6 = 6; m7 = 4;\n\n# Applying the parametric equation..\nr = (np.sin(m0 * phi) ** m1 + np.cos(m2 * phi) ** m3 +\n     np.sin(m4 * theta) ** m5 + np.cos(m6 * theta) ** m7)\nx = r * np.sin(phi) * np.cos(theta)\ny = r * np.cos(phi)\nz = r * np.sin(phi) * np.sin(theta)\n\n\nsurface = go.Surface(x=x, y=y, z=z, colorscale='Viridis')\ndata = [surface]\nlayout = go.Layout(\n    title='Another Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='parametric-plot-viridis')\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Bases with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to customize individual bar bases in a bar chart using Plotly in Python. It shows how to create bars that extend both above and below the x-axis to represent positive and negative values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Bar(\n        x = ['2016','2017','2018'],\n        y = [500,600,700],\n        base = [-500,-600,-700],\n        marker = dict(\n          color = 'red'\n        ),\n        name = 'expenses'\n    ),\n    go.Bar(\n        x = ['2016','2017','2018'],\n        y = [300,400,700],\n        base = 0,\n        marker = dict(\n          color = 'blue'\n        ),\n        name = 'revenue'\n    )\n]\n\n\nfig = go.Figure(data=data)\npy.iplot(fig, filename='base-bar')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Heatmap Colorscale\nDESCRIPTION: Creates a heatmap with custom colorscale using data from an external JSON source.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport six.moves.urllib\nimport json\n\nresponse = six.moves.urllib.request.urlopen('https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json')\ndataset = json.load(response)\n\ndata = [\n    go.Heatmap(\n        z=dataset['z'],\n        colorscale=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'], [0.2222222222222222, 'rgb(244,109,67)'], [0.3333333333333333, 'rgb(253,174,97)'], [0.4444444444444444, 'rgb(254,224,144)'], [0.5555555555555556, 'rgb(224,243,248)'], [0.6666666666666666, 'rgb(171,217,233)'], [0.7777777777777778, 'rgb(116,173,209)'], [0.8888888888888888, 'rgb(69,117,180)'], [1.0, 'rgb(49,54,149)']]\n    )\n]\npy.iplot(data, filename='custom-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Axis Ranges in Plotly Python\nDESCRIPTION: Creates a scatter plot with manually defined axis ranges, limiting the visible data to a specific region (between 2 and 5 on both axes). This example demonstrates how to control the visible portion of a plot by setting explicit axis range values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        range=[2, 5]\n    ),\n    yaxis=dict(\n        range=[2, 5]\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-range-manual')\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Box Plot with Plotly in Python\nDESCRIPTION: This example shows how to create a horizontal box plot using Plotly. It generates random data for two box plots and displays them horizontally.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.randn(50)\nx1 = np.random.randn(50) + 2\n\ntrace0 = go.Box(x=x0)\ntrace1 = go.Box(x=x1)\ndata = [trace0, trace1]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram Contour Subplot in Python\nDESCRIPTION: This complex example shows how to create a subplot combining a 2D histogram contour with scatter points and marginal histograms. It uses multiple trace types and custom layout settings to create an informative visualization of data distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nt = np.linspace(-1, 1.2, 2000)\nx = (t**3) + (0.3 * np.random.randn(2000))\ny = (t**6) + (0.3 * np.random.randn(2000))\n\ndata = [\n    go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Blues',\n        reversescale = True,\n        xaxis = 'x',\n        yaxis = 'y'\n    ),\n    go.Scatter(\n        x = x,\n        y = y,\n        xaxis = 'x',\n        yaxis = 'y',\n        mode = 'markers',\n        marker = dict(\n            color = 'rgba(0,0,0,0.3)',\n            size = 3\n        )\n    ),\n    go.Histogram(\n        y = y,\n        xaxis = 'x2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    ),\n    go.Histogram(\n        x = x,\n        yaxis = 'y2',\n        marker = dict(\n            color = 'rgba(0,0,0,1)'\n        )\n    )\n]\n\nlayout = go.Layout(\n    autosize = False,\n    xaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    yaxis = dict(\n        zeroline = False,\n        domain = [0,0.85],\n        showgrid = False\n    ),\n    xaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    yaxis2 = dict(\n        zeroline = False,\n        domain = [0.85,1],\n        showgrid = False\n    ),\n    height = 600,\n    width = 600,\n    bargap = 0,\n    hovermode = 'closest',\n    showlegend = False\n)\n\n\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename='Histogram2dContour Subplot')\n```\n\n----------------------------------------\n\nTITLE: Basic Overlaid Area Chart Implementation\nDESCRIPTION: Creates a basic overlaid area chart with two traces using fill='tozeroy' and 'tonexty' properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy'\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty'\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='basic-area')\n```\n\n----------------------------------------\n\nTITLE: Creating Line and Scatter Plots with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create multiple traces with different modes (markers, lines+markers, and lines) to create a combination of line and scatter plots using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Create random data with numpy\nimport numpy as np\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N)+5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N)-5\n\n# Create traces\ntrace0 = go.Scatter(\n    x = random_x,\n    y = random_y0,\n    mode = 'markers',\n    name = 'markers'\n)\ntrace1 = go.Scatter(\n    x = random_x,\n    y = random_y1,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = random_x,\n    y = random_y2,\n    mode = 'lines',\n    name = 'lines'\n)\n\ndata = [trace0, trace1, trace2]\npy.iplot(data, filename='scatter-mode')\n```\n\n----------------------------------------\n\nTITLE: Creating Cheater Plot Layout in Carpet Plot with Plotly Python\nDESCRIPTION: This code demonstrates how to create a cheater plot layout for a carpet plot using Plotly in Python. It uses cheaterslope and cheatertype parameters to define the layout of the axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4.5, 5, 6],\n    b = [1, 2, 3],\n    y = [[2, 3, 5.5, 8],\n         [3.5, 4.5, 6.5, 8.5],\n         [4, 5, 7.5, 10]],\n    cheaterslope = -5,\n    aaxis = dict(cheatertype = 'index'),\n    baxis = dict(cheatertype = 'value')\n)\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"carpet/cheater-layout\")\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots - Plotly Python\nDESCRIPTION: This code snippet shows how to generate box plots using random data values to represent distributions visually.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ny0 = np.random.randn(50)\n    y1 = np.random.randn(50)+1\n    box_1 = go.Box(\n        y=y0\n    )\n    box_2 = go.Box(\n        y=y1\n    )\n    data = [heatmap, box_1, box_2]\n```\n\n----------------------------------------\n\nTITLE: Nuclear Waste Sites Visualization\nDESCRIPTION: Creates a complex scatter plot showing nuclear waste sites on American campuses. Uses pandas for data loading and demonstrates advanced marker styling with multiple layers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox/mapbox.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# mapbox_access_token = 'ADD_YOUR_TOKEN_HERE'\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites%20on%20American%20Campuses.csv')\nsite_lat = df.lat\nsite_lon = df.lon\nlocations_name = df.text\n\ndata = [\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=17,\n            color='rgb(255, 0, 0)',\n            opacity=0.7\n        ),\n        text=locations_name,\n        hoverinfo='text'\n    ),\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=8,\n            color='rgb(242, 177, 172)',\n            opacity=0.7\n        ),\n        hoverinfo='none'\n    )]\n        \nlayout = go.Layout(\n    title='Nuclear Waste Sites on Campus',\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    mapbox=go.layout.Mapbox(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='light'\n    ),\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Nuclear Waste Sites on American Campuses')\n```\n\n----------------------------------------\n\nTITLE: Displaying Fresnel Lighting Effects\nDESCRIPTION: Renders the surface plots with fresnel lighting effects using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Converting Plotly Figure to Static Image\nDESCRIPTION: Shows how to convert a Plotly figure to a static image bytes string.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\n\nstatic_image_bytes = pio.to_image(fig, format='png')\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Hover Text to Plotly Scatter Plot\nDESCRIPTION: Demonstrates how to add custom hover text to a basic scatter plot using the text parameter and hoverinfo property.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x = [1,2,3,4,5],\n        y = [2,1,6,4,4],\n        text = [\"Text A\", \"Text B\", \"Text C\", \"Text D\", \"Text E\"],\n        hoverinfo = 'text',\n        marker = dict(\n            color = 'green'\n        ),\n        showlegend = False\n    )\n]\n\npy.iplot(data, filename = \"add-hover-text\")\n```\n\n----------------------------------------\n\nTITLE: Creating Surface Plot with Contours in Plotly\nDESCRIPTION: Generates a 3D surface plot with custom contours using the contours attribute. Includes camera angle positioning and enhanced visualization with color mapping.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface/3d-surface.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\ndata = [\n    go.Surface(\n        z=z_data.as_matrix(),\n        contours=go.surface.Contours(\n            z=go.surface.contours.Z(\n              show=True,\n              usecolormap=True,\n              highlightcolor=\"#42f462\",\n              project=dict(z=True)\n            )\n        )\n    )\n]\nlayout = go.Layout(\n    title='Mt Bruno Elevation',\n    autosize=False,\n    scene=dict(camera=dict(eye=dict(x=1.87, y=0.88, z=-0.64))),\n    width=500,\n    height=500,\n    margin=dict(\n        l=65,\n        r=50,\n        b=65,\n        t=90\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='elevations-3d-surface-contours')\n```\n\n----------------------------------------\n\nTITLE: Creating an Exponential Fit Visualization with Plotly\nDESCRIPTION: This snippet demonstrates how to create an exponential regression fit on scatter plot data using SciPy's curve_fit function and Plotly for visualization. It includes data point plotting, curve fitting, and equation annotation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/exponential-fit/Exponential-Fits.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Scientific libraries\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\n\nx = np.array([399.75, 989.25, 1578.75, 2168.25, 2757.75, 3347.25, 3936.75, 4526.25, 5115.75, 5705.25])\ny = np.array([109,62,39,13,10,4,2,0,1,2])\n\ndef exponenial_func(x, a, b, c):\n    return a*np.exp(-b*x)+c\n\n\npopt, pcov = curve_fit(exponenial_func, x, y, p0=(1, 1e-6, 1))\n\nxx = np.linspace(300, 6000, 1000)\nyy = exponenial_func(xx, *popt)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n                  x=x, \n                  y=y, \n                  mode='markers',\n                  marker=go.Marker(color='rgb(255, 127, 14)'),\n                  name='Data'\n                  )\n\ntrace2 = go.Scatter(\n                  x=xx, \n                  y=yy, \n                  mode='lines',\n                  marker=go.Marker(color='rgb(31, 119, 180)'),\n                  name='Fit'\n                  )\n\nannotation = go.Annotation(\n                  x=2000,\n                  y=100,\n                  text='$\\\\textbf{Fit}: 163.56e^{-0.00097x} - 1.16$',\n                  showarrow=False\n                  )\nlayout = go.Layout(\n                title='Exponential Fit in Python',\n                plot_bgcolor='rgb(229, 229, 229)',\n                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  annotations=[annotation]\n                )\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.plot(fig, filename='Exponential-Fit-in-python')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Carpet Plot with Plotly in Python\nDESCRIPTION: This code creates a basic carpet plot using Plotly's graph_objs module. It defines a single carpet trace with custom axis settings and plots it using plotly.plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-scatter/scattercarpet.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n    )\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"scattercarpet/basic\")\n```\n\n----------------------------------------\n\nTITLE: Creating Contour and Scatter Plot for Steepest Descent in Plotly with Python\nDESCRIPTION: This code creates a mixed chart combining a contour plot and a scatter plot to visualize the method of steepest descent. It fetches data from a JSON file, creates separate trace objects for contour and scatter components, then combines them into a single plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/mixed/mixed.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport json\nimport six.moves.urllib\n\nresponse = six.moves.urllib.request.urlopen('https://raw.githubusercontent.com/plotly/datasets/master/steepest.json')\ndata = json.load(response)\n\ntrace1 = go.Contour(\n    z=data['contour_z'][0],\n    y=data['contour_y'][0],\n    x=data['contour_x'][0],\n    ncontours=30,\n    showscale=False\n)\ntrace2 = go.Scatter(\n    x=data['trace_x'],\n    y=data['trace_y'],\n    mode='markers+lines',\n    name='steepest',\n    line=dict(\n        color='black'\n    )\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='contour-scatter')\n```\n\n----------------------------------------\n\nTITLE: Preparing Node and Edge Coordinates for Plotly 3D Visualization in Python\nDESCRIPTION: Extracts and formats the x, y, and z coordinates for both nodes and edges from the layout data, preparing them for visualization in Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nXn=[layt[k][0] for k in range(N)]# x-coordinates of nodes\nYn=[layt[k][1] for k in range(N)]# y-coordinates\nZn=[layt[k][2] for k in range(N)]# z-coordinates\nXe=[]\nYe=[]\nZe=[]\nfor e in Edges:\n    Xe+=[layt[e[0]][0],layt[e[1]][0], None]# x-coordinates of edge ends\n    Ye+=[layt[e[0]][1],layt[e[1]][1], None]  \n    Ze+=[layt[e[0]][2],layt[e[1]][2], None]  \n```\n\n----------------------------------------\n\nTITLE: Styling and Coloring Axes and Zero-Lines in Plotly Python\nDESCRIPTION: Creates a scatter plot with customized axis styling, including grid lines, zero lines, and axis lines. This example demonstrates how to control the visibility, color, and width of every axis element to create a visually distinct chart with custom styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=True,\n        zeroline=True,\n        showline=True,\n        mirror='ticks',\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        linecolor='#636363',\n        linewidth=6\n    ),\n    yaxis=dict(\n        showgrid=True,\n        zeroline=True,\n        showline=True,\n        mirror='ticks',\n        gridcolor='#bdbdbd',\n        gridwidth=2,\n        zerolinecolor='#969696',\n        zerolinewidth=4,\n        linecolor='#636363',\n        linewidth=6\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-lines')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Display and Publishing a Plotly Notebook Example\nDESCRIPTION: This code sets up custom display styles for a Jupyter notebook and publishes the notebook as a Plotly documentation example. It installs the publisher package, applies custom CSS, and sets metadata like title, description, and thumbnail for the published example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'time-series.ipynb', 'python/time-series/', 'Python Time Series | Examples | Plotly',\n    'How to plot date and time in python. ',\n    title= 'Time Series Plots | plotly',\n    name = 'Time Series',\n    has_thumbnail='true', thumbnail='thumbnail/time-series.jpg', \n    language='python', page_type='example_index', \n    display_as='financial', order=0,\n    ipynb='~notebook_demo/213')\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Line Plot of Brownian Motion with Plotly\nDESCRIPTION: This snippet demonstrates how to generate a 3D line plot using simulated Brownian motion data. It creates a geometric Brownian motion simulation for two time series, then visualizes them in a 3D scatter plot with dates on the x-axis and the two series on y and z axes. The visualization includes customized scene layout with specific camera angles and aspect ratios.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-line/3d-line.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv')\ndf.head()\n\ndef brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):\n    dt = float(T)/N\n    t = np.linspace(0, T, N)\n    W = np.random.standard_normal(size = N)\n    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion\n    X = (mu-0.5*sigma**2)*t + sigma*W\n    S = S0*np.exp(X) # geometric brownian motion\n    return S\n\ndates = pd.date_range('2012-01-01', '2013-02-22')\nT = (dates.max()-dates.min()).days / 365\nN = dates.size\nstart_price = 100\ny = pd.Series(\n    brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)\nz = pd.Series(\n    brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)\n\ntrace = go.Scatter3d(\n    x=list(dates), y=y, z=z,\n    marker=dict(\n        size=4,\n        color=z,\n        colorscale='Viridis',\n    ),\n    line=dict(\n        color='#1f77b4',\n        width=1\n    )\n)\n\ndata = [trace]\n\nlayout = dict(\n    width=800,\n    height=700,\n    autosize=False,\n    title='Iris dataset',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        camera=dict(\n            up=dict(\n                x=0,\n                y=0,\n                z=1\n            ),\n            eye=dict(\n                x=-1.7428,\n                y=1.0707,\n                z=0.7100,\n            )\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'\n    ),\n)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='pandas-brownian-motion-3d', height=700)\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data by Category and Date from Redshift\nDESCRIPTION: SQL query executed via pandas that retrieves sales quantity data broken down by event category and date. The query joins sales, date, event, and category tables to provide a detailed view of sales trends by category over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(sales.qtysold) as quantity_sold, date.caldate, category.catname as category_name  \nFROM sales, date, event, category\nWHERE sales.dateid = date.dateid \nAND sales.eventid = event.eventid\nAND event.catid = category.catid\nGROUP BY date.caldate, category_name\nORDER BY date.caldate asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Performing Signal Convolution with Stock Data in Python\nDESCRIPTION: Demonstrates how to perform convolution between a sawtooth wave and stock price data using SciPy's signal module. The results are visualized with Plotly, showing the original signals and the convolution output.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/convolution/python-Convolution.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsample = range(15)\nsaw = signal.sawtooth(t=sample)\n\ndata_sample = list(stock_data['SBUX'][0:100])\ndata_sample2 = list(stock_data['AAPL'][0:100])\nx = list(range(len(data_sample)))\ny_convolve = signal.convolve(saw, data_sample2)\nx_convolve = list(range(len(y_convolve)))\n\ntrace1 = go.Scatter(\n    x = x,\n    y = data_sample,\n    mode = 'lines',\n    name = 'SBUX'\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = data_sample2,\n    mode = 'lines',\n    name = 'AAPL'\n)\n\ntrace3 = go.Scatter(\n    x = x_convolve,\n    y = y_convolve,\n    mode = 'lines',\n    name = 'Convolution'\n)\n\ndata = [trace1, trace2, trace3]\npy.iplot(data, filename='convolution-of-two-signals')\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Chart of Planets Sized by Planet Diameter in Python\nDESCRIPTION: This code creates a 3D bubble chart visualizing planets in our solar system. It plots distance from sun, density, and gravity with bubble sizes representing planet diameters and custom colors for each planet.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-bubble/3dbubble.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']\nplanet_colors = ['rgb(135, 135, 125)', 'rgb(210, 50, 0)', 'rgb(50, 90, 255)',\n                 'rgb(178, 0, 0)', 'rgb(235, 235, 210)', 'rgb(235, 205, 130)',\n                 'rgb(55, 255, 217)', 'rgb(38, 0, 171)', 'rgb(255, 255, 255)']\ndistance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]\ndensity = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]\ngravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]\nplanet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]\n\n# Create trace, sizing bubbles by planet diameter\ntrace1 = go.Scatter3d(\n    x = distance_from_sun,\n    y = density,\n    z = gravity,\n    text = planets,\n    mode = 'markers',\n    marker = dict(\n        sizemode = 'diameter',\n        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/#scatter-marker-sizeref\n        size = planet_diameter,\n        color = planet_colors,\n        )  \n)\ndata=[trace1]\n\nlayout=go.Layout(width=800, height=800, title = 'Planets!',\n              scene = dict(xaxis=dict(title='Distance from Sun',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='Density',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Gravity',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='solar_system_planet_size')\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Dendrogram with Custom Orientation in Plotly\nDESCRIPTION: This code demonstrates how to create a dendrogram with custom labels and orientation. It uses the orientation and labels parameters in the create_dendrogram function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nX = np.random.rand(10, 10)\nnames = ['Jack', 'Oxana', 'John', 'Chelsea', 'Mark', 'Alice', 'Charlie', 'Rob', 'Lisa', 'Lily']\nfig = ff.create_dendrogram(X, orientation='left', labels=names)\nfig['layout'].update({'width':800, 'height':800})\npy.iplot(fig, filename='dendrogram_with_labels')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dendrogram with Plotly in Python\nDESCRIPTION: This code creates a simple dendrogram using random data. It demonstrates the basic usage of Plotly's figure_factory to generate a dendrogram plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nX = np.random.rand(15, 15)\ndendro = ff.create_dendrogram(X)\ndendro['layout'].update({'width':800, 'height':500})\npy.iplot(dendro, filename='simple_dendrogram')\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Data Filtering with Plotly and IPython Widgets\nDESCRIPTION: Creates an interactive dashboard that filters borough-specific complaint data using IPython widgets and Plotly graphs. The code reads a CSV file of service requests and allows users to filter data by borough name through a text input widget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/filter_example.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\nfrom IPython.html import widgets \nfrom IPython.display import display, clear_output\nfrom plotly.widgets import GraphWidget\n\ndf = pd.read_csv('https://raw.githubusercontent.com/jvns/pandas-cookbook/master/data/311-service-requests.csv')\n\n# Note: These are possible values for `borough`\n# array(['QUEENS', 'MANHATTAN', 'BROOKLYN', 'BRONX', 'STATEN ISLAND',\n#       'Unspecified'], dtype=object)\n\n# we will define functions to deal with the output we get from our widgets\n\ndef isTextValid(text):\n    if text_input.value.upper() in borough_list:\n        valid.value=True\n        borough_df = df[df['Borough'] == text_input.value.upper()]\n        \n        temp = borough_df.groupby([df['Agency']]).count()['Agency']\n        g2.plot({'data': [{'x': temp.index, 'y': temp }]})\n        g2.relayout({'title': 'Complaints Dealt by Agencies in {}'.format(text_input.value.upper())})\n        message.value = \"\"\n    else: \n        valid.value=False\n        message.value = \"<font color=\\\"red\\\">Can't find that borough</font>\"\n    \n# we will no define and display the widgets in our app\ng2 = GraphWidget('https://plotly.com/~kevintest/1178/')\n\nbutton = widgets.Button(description=\"Submit\")\n\ntext_input = widgets.Text(\n    description='Borough:',\n    value='MANHATTAN',\n)\n\nmessage = widgets.HTML(\n    value=\"\",\n)\n\nvalid = widgets.Valid(\n    value=True,\n)\n\n# this will be initalize our listener\nbutton.on_click(isTextValid)\n\n\ncontainer = widgets.HBox(children=[text_input, button, valid, message])\ndisplay(container)\ndisplay(g2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Plot with Plotly in Python\nDESCRIPTION: This code creates a basic line plot using random data generated with numpy. It demonstrates how to create a trace and plot it using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Create random data with numpy\nimport numpy as np\n\nN = 500\nrandom_x = np.linspace(0, 1, N)\nrandom_y = np.random.randn(N)\n\n# Create a trace\ntrace = go.Scatter(\n    x = random_x,\n    y = random_y\n)\n\ndata = [trace]\n\npy.iplot(data, filename='basic-line')\n```\n\n----------------------------------------\n\nTITLE: Creating a WebGL Heatmap with Plotly in Python\nDESCRIPTION: Creates a WebGL-based heatmap using the processed image data. The heatmapgl type provides better performance for large datasets compared to regular heatmaps, and uses the 'Picnic' colorscale for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrace = dict(type='heatmapgl', z=z_data, colorscale='Picnic')\ndata = [trace]\n\nlayout = dict(width=700, height=700)\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='basic heatmapgl')\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Visualizations for 2D Alpha Shapes\nDESCRIPTION: Functions for generating Plotly traces from the 2D alpha complex data. These helper functions handle the conversion of complex simplicial data into a format suitable for Plotly visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef Plotly_data(points, complex_s):\n    #points are the given data points, \n    #complex_s is the list of indices in the array of points defining 2-simplexes(triangles) \n    #in the simplicial complex to be plotted\n    X=[]\n    Y=[]\n    for s in complex_s:\n        X+=[points[s[k]][0] for k in [0,1,2,0]]+[None]\n        Y+=[points[s[k]][1] for k in [0,1,2,0]]+[None]\n    return X,Y    \n```\n\nLANGUAGE: python\nCODE:\n```\ndef make_trace(x, y,  point_color=colors[0], line_color=colors[1]):# define the trace\n                                                                   #for an alpha complex\n    return go.Scatter(mode='markers+lines', #set vertices and \n                                         #edges of the alpha-complex\n                   name='',\n                   x=x,\n                   y=y,\n                   marker=dict(size=6.5, color=point_color),\n                   line=dict(width=1.25, color=line_color),\n                   \n                  )\n```\n\nLANGUAGE: python\nCODE:\n```\ndef make_XAxis(axis_style):\n    return dict(axis_style)\n    \ndef make_YAxis(axis_style):\n    return dict(axis_style)  \n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Heatmap with Custom Colorscale in Plotly\nDESCRIPTION: Demonstrates how to create an annotated heatmap with a custom colorscale and font colors to precisely control the visual appearance of the heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5, .7],  \n     [1.0, .8, .6, .4],\n     [.6, .4, .2, 0.0],  \n     [.9, .7, .5, .3]] \n\ncolorscale = [[0, '#66475e'], [1, '#ecbfe0']]\nfont_colors = ['#efecee', '#3c3636']\nfig = ff.create_annotated_heatmap(z, colorscale=colorscale, font_colors=font_colors)\npy.iplot(fig, filename='annotated_heatmap_custom_color')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sankey Diagram with Plotly in Python\nDESCRIPTION: This code creates a basic Sankey diagram using Plotly. It defines nodes and links, sets up the layout, and plots the diagram using the iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\ndata = dict(\n    type='sankey',\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(\n        color = \"black\",\n        width = 0.5\n      ),\n      label = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n      color = [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"]\n    ),\n    link = dict(\n      source = [0,1,0,2,3,3],\n      target = [2,3,3,4,4,5],\n      value = [8,4,2,8,4,2]\n  ))\n\nlayout =  dict(\n    title = \"Basic Sankey Diagram\",\n    font = dict(\n      size = 10\n    )\n)\n\nfig = dict(data=[data], layout=layout)\npy.iplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Transforms (Filter, GroupBy, Aggregate) in Plotly Python\nDESCRIPTION: Demonstrates how to apply multiple transforms in sequence to create a comprehensive visualization. This example filters data for 2007, groups by continent with different colors, and aggregates data points with calculations for averages and sums.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/multiple-transforms/multiple-transforms.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv\")\n\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\n\nopt = []\nopts = []\nfor i in range(0, len(colors)):\n    opt = dict(\n        target = df['continent'][[i]].unique(), value = dict(marker = dict(color = colors[i]))\n    )\n    opts.append(opt)\n\ndata = [dict(\n  type = 'scatter',\n  mode = 'markers',\n  x = df['lifeExp'],\n  y = df['gdpPercap'],\n  text = df['continent'],\n  hoverinfo = 'text',\n  opacity = 0.8,\n  marker = dict(\n      size = df['pop'],\n      sizemode = 'area',\n      sizeref = 200000\n  ),\n  transforms = [\n      dict(\n        type = 'filter',\n        target = df['year'],\n        orientation = '=',\n        value = 2007\n      ),\n      dict(\n        type = 'groupby',\n        groups = df['continent'],\n        styles = opts\n      ),\n      dict(\n        type = 'aggregate',\n        groups = df['continent'],\n        aggregations = [\n            dict(target = 'x', func = 'avg'),\n            dict(target = 'y', func = 'avg'),\n            dict(target = 'marker.size', func = 'sum')\n        ]\n      )]\n)]\n\nlayout = dict(\n    title = '<b>Gapminder</b><br>2007 Average GDP Per Cap & Life Exp. by Continent',\n    yaxis = dict(\n        type = 'log'\n    )\n)\n\n\noff.iplot({'data': data, 'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Setting and Styling Axes Title Labels and Ticks in Plotly Python\nDESCRIPTION: Creates a scatter plot with customized axis titles, title font styling, tick label rotation, tick font styling, and exponent formatting. This example demonstrates how to create professional-looking axis labels with complete control over typography and formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        title='AXIS TITLE',\n        titlefont=dict(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        showticklabels=True,\n        tickangle=45,\n        tickfont=dict(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        ),\n        exponentformat='e',\n        showexponent='all'\n    ),\n    yaxis=dict(\n        title='AXIS TITLE',\n        titlefont=dict(\n            family='Arial, sans-serif',\n            size=18,\n            color='lightgrey'\n        ),\n        showticklabels=True,\n        tickangle=45,\n        tickfont=dict(\n            family='Old Standard TT, serif',\n            size=14,\n            color='black'\n        ),\n        exponentformat='e',\n        showexponent='all'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-labels')\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Notebook from Virtualenv\nDESCRIPTION: Command to start the Jupyter Notebook server from within the activated virtual environment, providing access to the specific Plotly version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n(plotly3.3) $ jupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 2D Histogram Contour in Python\nDESCRIPTION: This snippet demonstrates how to create a basic 2D histogram contour plot with randomly generated data. It uses the Histogram2dContour trace type from Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\ntrace = [go.Histogram2dContour(\n        x = x,\n        y = y\n)]\n\npy.iplot(trace, filename = \"Basic Histogram2dContour\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Roughness Lighting on Surface Plots\nDESCRIPTION: Creates two surface plots with different roughness values. Roughness controls the amount of light scattered, ranging from a smooth surface (0) to a rough surface (1).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig = tls.make_subplots(rows=1, cols=2,specs=[[{'is_3d': True},{'is_3d': True} ]])\ntrace1 = go.Surface(z=Z1, colorscale='Viridis', lighting=dict(roughness=0.1))\ntrace2 = go.Surface(z=Z2, colorscale='Viridis',showscale=False, lighting=dict(roughness=0.9))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Topographical 3D Surface Plot with Plotly\nDESCRIPTION: Creates a 3D surface plot of Mt Bruno elevation data using Plotly. Reads CSV data and configures plot layout with custom dimensions and margins.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface/3d-surface.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\ndata = [\n    go.Surface(\n        z=z_data.as_matrix()\n    )\n]\nlayout = go.Layout(\n    title='Mt Bruno Elevation',\n    autosize=False,\n    width=500,\n    height=500,\n    margin=dict(\n        l=65,\n        r=50,\n        b=65,\n        t=90\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='elevations-3d-surface')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OHLC Colors in Python\nDESCRIPTION: This example shows how to customize the colors of increasing and decreasing OHLC bars. By default, increasing bars are green and decreasing are red, but this can be changed to any color using the increasing and decreasing properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'],\n                increasing=dict(line=dict(color= '#17BECF')),\n                decreasing=dict(line=dict(color= '#7F7F7F')))\ndata = [trace]\npy.iplot(data, filename='styled_ohlc')\n```\n\n----------------------------------------\n\nTITLE: Adding Customized Text and Annotations to Candlestick Charts in Plotly\nDESCRIPTION: Demonstrates how to add a title, axis labels, vertical line shapes, and text annotations to a candlestick chart. This example highlights a specific date with a vertical line and explanatory text.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\ndata = [trace]\nlayout = {\n    'title': 'The Great Recession',\n    'yaxis': {'title': 'AAPL Stock'},\n    'shapes': [{\n        'x0': '2016-12-09', 'x1': '2016-12-09',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2016-12-09', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': 'Increase Period Begins'\n    }]\n}\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='aapl-recession-candlestick')\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Violin Plots with Custom Styling\nDESCRIPTION: This code creates advanced violin plots with custom styling options, including point positioning, jitter, coloring, and scaling. It displays total bill distributions by day and gender with detailed customization and shows individual data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\n\npointposMale = [-0.9,-1.1,-0.6,-0.3]\npointposFemale = [0.45,0.55,1,0.4]\nshowLegend = [True,False,False,False]\n\ndata = []\nfor i in range(0,len(pd.unique(df['day']))):\n    male = {\n            \"type\": 'violin',\n            \"x\": df['day'][ (df['sex'] == 'Male') & (df['day'] == pd.unique(df['day'])[i]) ],\n            \"y\": df['total_bill'][ (df['sex'] == 'Male') & (df['day'] == pd.unique(df['day'])[i]) ],\n            \"legendgroup\": 'M',\n            \"scalegroup\": 'M',\n            \"name\": 'M',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"points\": 'all',\n            \"pointpos\": pointposMale[i],\n            \"jitter\": 0,\n            \"scalemode\": 'count',\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": '#8dd3c7'\n            },\n            \"marker\": {\n                \"line\": {\n                    \"width\": 2,\n                    \"color\": '#8dd3c7'\n                }\n            },\n            \"span\": [\n                0\n            ],\n            \"showlegend\": showLegend[i]\n        }\n    data.append(male)\n    female = {\n            \"type\": 'violin',\n            \"x\": df['day'] [ (df['sex'] == 'Female') & (df['day'] == pd.unique(df['day'])[i]) ],\n            \"y\": df['total_bill'] [ (df['sex'] == 'Female') & (df['day'] == pd.unique(df['day'])[i]) ],\n            \"legendgroup\": 'F',\n            \"scalegroup\": 'F',\n            \"name\": 'F',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"points\": 'all',\n            \"pointpos\": pointposFemale[i],\n            \"jitter\": 0,\n            \"scalemode\": 'count',\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": '#bebada'\n            },\n            \"marker\": {\n                \"line\": {\n                    \"width\": 2,\n                    \"color\": '#bebada'\n                }\n            },\n            \"span\": [\n                0\n            ],\n            \"showlegend\": showLegend[i]\n        }\n    data.append(female)\n        \n\nfig = {\n    \"data\": data,\n    \"layout\" : {\n        \"title\": \"Total bill distribution<br><i>scaled by number of bills per gender\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violingroupgap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename='violin/advanced', validate = False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ternary Plot with Markers in Plotly Python\nDESCRIPTION: This code creates a basic ternary plot with markers using Plotly in Python. It defines raw data points, creates axis settings, and sets up the plot layout. The plot represents the distribution of skills (journalist, developer, designer) for different data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\ninit_notebook_mode()\n\nrawData = [\n    {'journalist':75,'developer':25,'designer':0,'label':'point 1'},\n    {'journalist':70,'developer':10,'designer':20,'label':'point 2'},\n    {'journalist':75,'developer':20,'designer':5,'label':'point 3'},\n    {'journalist':5,'developer':60,'designer':35,'label':'point 4'},\n    {'journalist':10,'developer':80,'designer':10,'label':'point 5'},\n    {'journalist':10,'developer':90,'designer':0,'label':'point 6'},\n    {'journalist':20,'developer':70,'designer':10,'label':'point 7'},\n    {'journalist':10,'developer':20,'designer':70,'label':'point 8'},\n    {'journalist':15,'developer':5,'designer':80,'label':'point 9'},\n    {'journalist':10,'developer':10,'designer':80,'label':'point 10'},\n    {'journalist':20,'developer':10,'designer':70,'label':'point 11'},\n];\n\ndef makeAxis(title, tickangle): \n    return {\n      'title': title,\n      'titlefont': { 'size': 20 },\n      'tickangle': tickangle,\n      'tickfont': { 'size': 15 },\n      'tickcolor': 'rgba(0,0,0,0)',\n      'ticklen': 5,\n      'showline': True,\n      'showgrid': True\n    }\n\ndata = [{ \n    'type': 'scatterternary',\n    'mode': 'markers',\n    'a': [i for i in map(lambda x: x['journalist'], rawData)],\n    'b': [i for i in map(lambda x: x['developer'], rawData)],\n    'c': [i for i in map(lambda x: x['designer'], rawData)],\n    'text': [i for i in map(lambda x: x['label'], rawData)],\n    'marker': {\n        'symbol': 100,\n        'color': '#DB7365',\n        'size': 14,\n        'line': { 'width': 2 }\n    },\n    }]\n\nlayout = {\n    'ternary': {\n        'sum': 100,\n        'aaxis': makeAxis('Journalist', 0),\n        'baxis': makeAxis('<br>Developer', 45),\n        'caxis': makeAxis('<br>Designer', -45)\n    },\n    'annotations': [{\n      'showarrow': False,\n      'text': 'Simple Ternary Plot with Markers',\n        'x': 0.5,\n        'y': 1.3,\n        'font': {'size': 15}\n    }]\n}\n\nfig = {'data': data, 'layout': layout}\niplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sankey Diagram Canvas in Plotly Python\nDESCRIPTION: This snippet sets up the basic structure for a Sankey diagram, including the data type, domain, orientation, and value formatting. It also defines a layout with a title and font size.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\ndata = dict(\n    type='sankey',\n    domain = dict(\n      x =  [0,1],\n      y =  [0,1]\n    ),\n    orientation = \"h\",\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\"   \n  )\n\nlayout =  dict(\n    title = \"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\",\n    font = dict(\n      size = 10\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting 1D Random Walk with Plotly in Python\nDESCRIPTION: This code generates a 1D random walk and creates a scatter plot using Plotly. It includes jitter along both axes to show the tendency of the walk and uses a color scale to represent the time sequence.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/random-walk/python-Random-Walk.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = [0]\n\nfor j in range(100):\n    step_x = random.randint(0,1)\n    if step_x == 1:\n        x.append(x[j] + 1 + 0.05*np.random.normal())\n    else:\n        x.append(x[j] - 1 + 0.05*np.random.normal())\n        \ny = [0.05*np.random.normal() for j in range(len(x))]\n        \ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Random Walk in 1D',\n    marker=dict(\n        color=[i for i in range(len(x))],\n        size=7,\n        colorscale=[[0, 'rgb(178,10,28)'], [0.50, 'rgb(245,160,105)'],\n                    [0.66, 'rgb(245,195,157)'], [1, 'rgb(220,220,220)']],\n        showscale=True,\n    )\n)\n\nlayout = go.Layout(\n    yaxis=dict(\n        range=[-1, 1]\n    )\n)\n\ndata = [trace1]\nfig= go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='random-walk-1d')\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Lines on Globe with Plotly in Python\nDESCRIPTION: This code creates a globe visualization with contour lines using Plotly. It loads contour data, creates line plots for each contour, and applies custom styling to the globe projection. The result is an interactive 3D globe with colored contour lines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/lines-on-maps/lines_on_maps.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\ntry:\n    from itertools import izip# Python 2\nexcept ImportError:\n    izip = zip# Python 3\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv')\ndf.head()\n\ncontours = []\n\nscl = ['rgb(213,62,79)', 'rgb(244,109,67)', 'rgb(253,174,97)', \\\n    'rgb(254,224,139)', 'rgb(255,255,191)', 'rgb(230,245,152)', \\\n    'rgb(171,221,164)', 'rgb(102,194,165)', 'rgb(50,136,189)'\n]\n\ndef pairwise(iterable):\n    a = iter(iterable)\n    return izip(a, a)\n\ni = 0\nfor lat, lon in pairwise(df.columns):\n    contours.append(go.Scattergeo(\n        lon = df[lon],\n        lat = df[lat],\n        mode = 'lines',\n        line = go.scattergeo.Line(\n            width = 2,\n            color = scl[i]\n        )))\n    i = 0 if i + 1 >= len(df.columns) / 4 else i + 1\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Contour lines over globe<br>(Click and drag to rotate)'\n    ),\n    showlegend = False,\n    geo = go.layout.Geo(\n        showland = True,\n        showlakes = True,\n        showcountries = True,\n        showocean = True,\n        countrywidth = 0.5,\n        landcolor = 'rgb(230, 145, 56)',\n        lakecolor = 'rgb(0, 255, 255)',\n        oceancolor = 'rgb(0, 255, 255)',\n        projection = go.layout.geo.Projection(\n            type = 'orthographic',\n            rotation = go.layout.geo.projection.Rotation(\n                lon = -100,\n                lat = 40,\n                roll = 0\n            )\n        ),\n        lonaxis = go.layout.geo.Lonaxis(\n            showgrid = True,\n            gridcolor = 'rgb(102, 102, 102)',\n            gridwidth = 0.5\n        ),\n        lataxis = go.layout.geo.Lataxis(\n            showgrid = True,\n            gridcolor = 'rgb(102, 102, 102)',\n            gridwidth = 0.5\n        )\n    )\n)\n\nfig = go.Figure(data = contours, layout = layout)\npy.iplot(fig, filename = 'd3-globe')\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting a Box Plot with Plotly in Python\nDESCRIPTION: This snippet creates a Figure object from a Data object containing 15 Box traces, then plots it using Plotly's iplot function. The plot is sent to Plotly's servers and displayed in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Make Data object made up of 15 Box object \ndata = Data(traces)\n\n# Make figure object\nfig = Figure(data=data)\n\n# (@) Send to Plotly and show plot in notebook\npy.iplot(fig, filename='s0_quick-boxes')\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack Funnel Plot with Multiple Datasets in Plotly\nDESCRIPTION: Example showing how to create a stack funnel plot with multiple traces representing different data series (Montreal, Toronto, Vancouver) with different orientations and text information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\n\ntrace1 = go.Funnel(\n    name = 'Montreal',\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\"], \n    x = [120, 60, 30, 20],\n    textinfo = \"value+percent initial\")\n\ntrace2 = go.Funnel(\n    name = 'Toronto',\n    orientation = \"h\", \n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"],\n    x = [100, 60, 40, 30, 20],\n    textposition = \"inside\",\n    textinfo = \"value+percent previous\")\n\ntrace3 = go.Funnel(\n    name = 'Vancouver',\n    orientation = \"h\", \n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\", \"Finalized\"],\n    x = [90, 70, 50, 30, 10, 5],\n    textposition = \"outside\",\n    textinfo = \"value+percent total\")\n            \nlayout = go.Layout(margin = {\"l\": 200 , \"r\": 200}, funnelmode = \"stack\", showlegend = True)\n\n\npy.iplot(go.Figure([trace1, trace2, trace3], layout), filename = \"funnel_stack\")\n\n```\n\n----------------------------------------\n\nTITLE: Solving Matrix Equation AX=B\nDESCRIPTION: Demonstrates solving a matrix equation using NumPy's linear algebra solver and visualizes the solution with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nA = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nB = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nX = np.linalg.solve(A, B)\n\ncolorscale = [[0, '#497285'], [1, '#DFEBED']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(X.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-eq')\n```\n\n----------------------------------------\n\nTITLE: Implement Widget Callback Functions\nDESCRIPTION: Functions to handle widget interactions and update the visualization\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef validate():\n    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():\n        return True\n    else:\n        return False\n\n\ndef response(change):\n    if validate():\n        if use_date.value:\n            filter_list = [i and j and k for i, j, k in\n                           zip(df['month'] == month.value, df['carrier'] == textbox.value,\n                               df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n\n        else:\n            filter_list = [i and j for i, j in\n                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n        x1 = temp_df['arr_delay']\n        x2 = temp_df['dep_delay']\n        with g.batch_update():\n            g.data[0].x = x1\n            g.data[1].x = x2\n            g.layout.barmode = 'overlay'\n            g.layout.xaxis.title = 'Delay in Minutes'\n            g.layout.yaxis.title = 'Number of Delays'\n\n\norigin.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")\nmonth.observe(response, names=\"value\")\nuse_date.observe(response, names=\"value\")\n```\n\n----------------------------------------\n\nTITLE: Single Dropdown Menu for Chart Type Selection\nDESCRIPTION: Creates a 3D surface plot with a dropdown menu to switch between surface and heatmap visualizations using the restyle method. Includes configuration for layout, axes, and menu positioning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport json\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')\n\ndata = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]\n\nlayout = go.Layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230, 230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict(x=1, y=1, z=0.7),\n        aspectmode = 'manual'\n    )\n)\n\nupdatemenus=list([\n    dict(\n        buttons=list([   \n            dict(\n                args=['type', 'surface'],\n                label='3D Surface',\n                method='restyle'\n            ),\n            dict(\n                args=['type', 'heatmap'],\n                label='Heatmap',\n                method='restyle'\n            )             \n        ]),\n        direction = 'down',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        x = 0.1,\n        xanchor = 'left',\n        y = 1.1,\n        yanchor = 'top' \n    ),\n])\n\nannotations = list([\n    dict(text='Trace type:', x=0, y=1.085, yref='paper', align='left', showarrow=False)\n])\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='cmocean-picker-one-dropdown')\n```\n\n----------------------------------------\n\nTITLE: Defining Root Locus Plotting Function in Python\nDESCRIPTION: This function creates a plot of the root locus for a closed-loop system with varying gains using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef plot_root_locus(gains, roots):\n    \"\"\"Plots the root locus of the closed loop system given the provided gains.\"\"\"\n    \n    real_vals = np.real(roots)\n    imag_vals = np.imag(roots)\n    \n    xaxis = gr.XAxis(title='Re')\n    yaxis = gr.YAxis(title='Im')\n    layout = gr.Layout(title='Root Locus', showlegend=False,\n                       xaxis=xaxis, yaxis=yaxis)\n    \n    # plots a blue \"x\" for the first roots\n    open_loop_poles = gr.Scatter(x=real_vals[0, :],\n                                 y=imag_vals[0, :],\n                                 marker=gr.Marker(symbol='x', color='blue'),\n                                 mode='markers')\n    \n    # plots a red \"o\" for the last roots\n    last_poles = gr.Scatter(x=real_vals[-1, :],\n                            y=imag_vals[-1, :],\n                            marker=gr.Marker(symbol='o', color='red'),\n                            mode='markers')\n    data = []\n    \n    gain_text = ['k = {:1.2f}'.format(k) for k in gains]\n    \n    for r, i in zip(real_vals.T, imag_vals.T):\n        data.append(gr.Scatter(x=r, y=i, text=gain_text,\n                               marker=gr.Marker(color='black'), mode=\"markers\"))\n                \n    data.append(open_loop_poles)\n    data.append(last_poles)\n    \n    return gr.Figure(data=gr.Data(data), layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Restyle Buttons for Surface Plot\nDESCRIPTION: Implements multiple button controls to modify colorscale, chart type, and line display using the restyle method. Includes cmocean color scales and options for 3D surface, heatmap, and contour visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport cmocean\nimport json\nimport numpy as np\nimport pandas as pd\n\ndef cmocean_to_plotly(cmap, pl_entries=100):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n    \n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n        \n    return pl_colorscale\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')\n\ndata = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]\n\nbutton_layer_1_height = 1.12\nbutton_layer_2_height = 1.065\n\nlayout = go.Layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict(x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'\n    )\n)\n\nupdatemenus=list([\n    dict(\n        buttons=list([\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.haline)) ],\n                label='Haline',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.turbid))],\n                label='Turbid',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.speed))],\n                label='Speed',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.haline)) ],\n                label='Tempo',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.gray))],\n                label='Gray',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.phase))],\n                label='Phase',\n                method='restyle'\n            ),  \n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.balance)) ],\n                label='Balance',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.delta))],\n                label='Delta',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.curl))],\n                label='Curl',\n                method='restyle'\n            ),                       \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = button_layer_1_height,\n        yanchor = 'top'            \n    ),\n    dict(\n        buttons=list([   \n            dict(\n                args=['reversescale', True],\n                label='Reverse',\n                method='restyle'\n            ),\n            dict(\n                args=['reversescale', False],\n                label='Undo',\n                method='restyle'\n            )                    \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.45,\n        xanchor = 'left',\n        y = button_layer_2_height,\n        yanchor = 'top'            \n    ),\n    dict(\n        buttons=list([   \n            dict(\n                args=[{'contours.showlines':False, 'type':'contour'}],\n                label='Hide lines',\n                method='restyle'\n            ),\n            dict(\n                args=[{'contours.showlines':True, 'type':'contour'}],\n                label='Show lines',\n                method='restyle'\n            ),                    \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.65,\n        xanchor = 'left',\n        y = button_layer_2_height,\n        yanchor = 'top'            \n    ),        \n    dict(\n        buttons=list([   \n            dict(\n                args=['type', 'surface'],\n                label='3d Surface',\n                method='restyle'\n            ),\n            dict(\n                args=['type', 'heatmap'],\n                label='Heatmap',\n                method='restyle'\n            ),  \n            dict(\n                args=['type', 'contour'],\n                label='Contour',\n                method='restyle'\n            )                     \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = button_layer_2_height,\n        yanchor = 'top' \n    ),\n])\n\nannotations = list([\n    dict(text='cmocean<br>scale', x=0, y=1.11, yref='paper', align='left', showarrow=False ),\n    dict(text='Trace type', x=0, y=1.05, yref='paper', showarrow=False )\n])\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='cmocean-picker')\n```\n\n----------------------------------------\n\nTITLE: Creating a Full County Choropleth Map with Plotly in Python\nDESCRIPTION: This code creates a full county-level choropleth map of the USA showing unemployment rates. It uses Plotly's Figure Factory to simplify the creation of complex choropleth maps.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/choropleth-maps/Choropleth_maps.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv')\ndf_sample['State FIPS Code'] = df_sample['State FIPS Code'].apply(lambda x: str(x).zfill(2))\ndf_sample['County FIPS Code'] = df_sample['County FIPS Code'].apply(lambda x: str(x).zfill(3))\ndf_sample['FIPS'] = df_sample['State FIPS Code'] + df_sample['County FIPS Code']\n\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\nendpts = list(np.linspace(1, 12, len(colorscale) - 1))\nfips = df_sample['FIPS'].tolist()\nvalues = df_sample['Unemployment Rate (%)'].tolist()\n\nfig = ff.create_choropleth(\n    fips = fips, values = values, scope = ['usa'],\n    binning_endpoints = endpts, colorscale = colorscale,\n    show_state_data = False,\n    show_hover = True, centroid_marker = {\n        'opacity': 0\n    },\n    asp = 2.9,\n    title = 'USA by Unemployment %',\n    legend_title = '% unemployed'\n)\npy.iplot(fig, filename = 'choropleth_full_usa')\n```\n\n----------------------------------------\n\nTITLE: Generating Heatmap for Gene Expression - Python\nDESCRIPTION: This snippet generates a heatmap visualization of gene expression data while ensuring unique labels by modifying sample names. It utilizes Plotly's heatmap capabilities and requires the SciPy library for distance calculations. Key parameters include the input DataFrame 'df' and the defined color scale 'YIGnBu'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.spatial.distance import pdist, squareform\n\ncols = [col for col in df.columns if col not in ['breadth', 'uniprot_id', 'avg']]\nshort_cols = [col[0:20] for col in cols]\nshort_cols = [short_cols[i] + str(i) for i in range(1,len(short_cols),1)]\ndata_dist = pdist(df[cols].as_matrix().transpose())\n\ndata = Data([\n    Heatmap(\n        z=squareform(data_dist), colorscale='YIGnBu',\n        x=short_cols,\n        y=short_cols,     # y-axis labels\n    )\n])\n\nlayout = Layout(\n    title='Transcription profiling of human brain samples',\n    autosize=False,\n    margin=Margin(\n        l=200,\n        b=200,\n        pad=4\n    ),\n    xaxis=XAxis(\n        showgrid=False, # remove grid\n        autotick=False, # custom ticks\n        dtick=1,        # show 1 tick per day\n    ),\n    yaxis=YAxis(\n        showgrid=False,   # remove grid\n        autotick=False,   # custom ticks\n        dtick=1           # show 1 tick per day\n    )\n)\nfig = Figure(data=data, layout=layout)\npy.iplot(fig, width=900, height=900)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Quiver Plot with Plotly\nDESCRIPTION: Creates a basic quiver plot using numpy meshgrid and trigonometric functions. The plot shows vector field visualization using arrows.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/quiver/quiver.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\nu = np.cos(x)*y\nv = np.sin(x)*y\n\nfig = ff.create_quiver(x, y, u, v)\npy.iplot(fig, filename='Quiver Plot Example')\n```\n\n----------------------------------------\n\nTITLE: Creating a Plot with Multiple Y Axes in Python using Plotly\nDESCRIPTION: This code snippet shows how to create a plot with multiple y-axes using Plotly in Python. It creates four scatter traces and a layout with four y-axes, positioned on both sides of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6],\n    name='yaxis1 data'\n)\ntrace2 = go.Scatter(\n    x=[2, 3, 4],\n    y=[40, 50, 60],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ntrace3 = go.Scatter(\n    x=[4, 5, 6],\n    y=[40000, 50000, 60000],\n    name='yaxis3 data',\n    yaxis='y3'\n)\ntrace4 = go.Scatter(\n    x=[5, 6, 7],\n    y=[400000, 500000, 600000],\n    name='yaxis4 data',\n    yaxis='y4'\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title='multiple y-axes example',\n    width=800,\n    xaxis=dict(\n        domain=[0.3, 0.7]\n    ),\n    yaxis=dict(\n        title='yaxis title',\n        titlefont=dict(\n            color='#1f77b4'\n        ),\n        tickfont=dict(\n            color='#1f77b4'\n        )\n    ),\n    yaxis2=dict(\n        title='yaxis2 title',\n        titlefont=dict(\n            color='#ff7f0e'\n        ),\n        tickfont=dict(\n            color='#ff7f0e'\n        ),\n        anchor='free',\n        overlaying='y',\n        side='left',\n        position=0.15\n    ),\n    yaxis3=dict(\n        title='yaxis4 title',\n        titlefont=dict(\n            color='#d62728'\n        ),\n        tickfont=dict(\n            color='#d62728'\n        ),\n        anchor='x',\n        overlaying='y',\n        side='right'\n    ),\n    yaxis4=dict(\n        title='yaxis5 title',\n        titlefont=dict(\n            color='#9467bd'\n        ),\n        tickfont=dict(\n            color='#9467bd'\n        ),\n        anchor='free',\n        overlaying='y',\n        side='right',\n        position=0.85\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='multiple-axes-multiple')\n```\n\n----------------------------------------\n\nTITLE: Creating a United States Choropleth Map with Plotly in Python\nDESCRIPTION: This code creates a choropleth map of US agriculture exports by state using Plotly. It loads data from a CSV file, processes it, and creates an interactive map with hover information and a color scale.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/choropleth-maps/Choropleth_maps.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv')\n\nfor col in df.columns:\n    df[col] = df[col].astype(str)\n\nscl = [\n    [0.0, 'rgb(242,240,247)'],\n    [0.2, 'rgb(218,218,235)'],\n    [0.4, 'rgb(188,189,220)'],\n    [0.6, 'rgb(158,154,200)'],\n    [0.8, 'rgb(117,107,177)'],\n    [1.0, 'rgb(84,39,143)']\n]\n\ndf['text'] = df['state'] + '<br>' + \\\n    'Beef ' + df['beef'] + ' Dairy ' + df['dairy'] + '<br>' + \\\n    'Fruits ' + df['total fruits'] + ' Veggies ' + df['total veggies'] + '<br>' + \\\n    'Wheat ' + df['wheat'] + ' Corn ' + df['corn']\n\ndata = [go.Choropleth(\n    colorscale = scl,\n    autocolorscale = False,\n    locations = df['code'],\n    z = df['total exports'].astype(float),\n    locationmode = 'USA-states',\n    text = df['text'],\n    marker = go.choropleth.Marker(\n        line = go.choropleth.marker.Line(\n            color = 'rgb(255,255,255)',\n            width = 2\n        )),\n    colorbar = go.choropleth.ColorBar(\n        title = \"Millions USD\")\n)]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'\n    ),\n    geo = go.layout.Geo(\n        scope = 'usa',\n        projection = go.layout.geo.Projection(type = 'albers usa'),\n        showlakes = True,\n        lakecolor = 'rgb(255, 255, 255)'),\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = 'd3-cloropleth-map')\n```\n\n----------------------------------------\n\nTITLE: Generating Ribbon Information and Shapes for Chord Diagram in Python\nDESCRIPTION: This code creates ribbon information and shapes for the chord diagram. It handles both self-relations and relations between different entities, setting up hover information and ribbon colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nribbon_info=[]\nfor k in range(L):\n    \n    sigma=idx_sort[k]\n    sigma_inv=invPerm(sigma)\n    for j in range(k, L):\n        if matrix[k][j]==0 and matrix[j][k]==0: continue\n        eta=idx_sort[j]\n        eta_inv=invPerm(eta)\n        l=ribbon_ends[k][sigma_inv[j]]  \n        \n        if j==k:\n            layout['shapes'].append(make_self_rel(l, 'rgb(175,175,175)' ,\n                                    ideo_colors[k], radius=radii_sribb[k])) \n            z=0.9*np.exp(1j*(l[0]+l[1])/2)\n            #the text below will be displayed when hovering the mouse over the ribbon\n            text=labels[k]+' commented on '+ '{:d}'.format(matrix[k][k])+' of '+ 'herself Fb posts',\n            ribbon_info.append(go.Scatter(x=[z.real],\n                                       y=[z.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ideo_colors[k]),\n                                       text=text,\n                                       hoverinfo='text'\n                                       )\n                              )\n        else:\n            r=ribbon_ends[j][eta_inv[k]]\n            zi=0.9*np.exp(1j*(l[0]+l[1])/2)\n            zf=0.9*np.exp(1j*(r[0]+r[1])/2)\n            #texti and textf are the strings that will be displayed when hovering the mouse \n            #over the two ribbon ends\n            texti=labels[k]+' commented on '+ '{:d}'.format(matrix[k][j])+' of '+\\\n                  labels[j]+ ' Fb posts',\n            \n            textf=labels[j]+' commented on '+ '{:d}'.format(matrix[j][k])+' of '+\\\n            labels[k]+ ' Fb posts',\n            ribbon_info.append(go.Scatter(x=[zi.real],\n                                       y=[zi.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ribbon_color[k][j]),\n                                       text=texti,\n                                       hoverinfo='text'\n                                       )\n                              ),\n            ribbon_info.append(go.Scatter(x=[zf.real],\n                                       y=[zf.imag],\n                                       mode='markers',\n                                       marker=dict(size=0.5, color=ribbon_color[k][j]),\n                                       text=textf,\n                                       hoverinfo='text'\n                                       )\n                              )\n            r=(r[1], r[0])#IMPORTANT!!!  Reverse these arc ends because otherwise you get\n                          # a twisted ribbon\n            #append the ribbon shape\n            layout['shapes'].append(make_ribbon(l, r, 'rgb(175,175,175)' , ribbon_color[k][j]))\n```\n\n----------------------------------------\n\nTITLE: Creating Life Expectancy vs GDP Scatter Plot\nDESCRIPTION: Creates a more complex scatter plot comparing life expectancy and GDP data between continents using pandas dataframes and custom styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndf = pd.read_csv('https://raw.githubusercontent.com/yankev/test/master/life-expectancy-per-GDP-2007.csv')\n\namericas = df[(df.continent=='Americas')]\neurope = df[(df.continent=='Europe')]\n\ntrace_comp0 = go.Scatter(\n    x=americas.gdp_percap,\n    y=americas.life_exp,\n    mode='markers',\n    marker=dict(size=12,\n                line=dict(width=1),\n                color=\"navy\"\n               ),\n    name='Americas',\n    text=americas.country,\n    )\n\ntrace_comp1 = go.Scatter(\n    x=europe.gdp_percap,\n    y=europe.life_exp,\n    mode='markers',\n    marker=dict(size=12,\n                line=dict(width=1),\n                color=\"red\"\n               ),\n    name='Europe',\n    text=europe.country,\n        )\n\ndata_comp = [trace_comp0, trace_comp1]\nlayout_comp = go.Layout(\n    title='Life Expectancy v. Per Capita GDP, 2007',\n    hovermode='closest',\n    xaxis=dict(\n        title='GDP per capita (2000 dollars)',\n        ticklen=5,\n        zeroline=False,\n        gridwidth=2,\n    ),\n    yaxis=dict(\n        title='Life Expectancy (years)',\n        ticklen=5,\n        gridwidth=2,\n    ),\n)\nfig_comp = go.Figure(data=data_comp, layout=layout_comp)\npy.iplot(fig_comp, filename='life-expectancy-per-GDP-2007')\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Table and Graph Subplot\nDESCRIPTION: Demonstrates how to create a vertical layout with a table at the top and three scatter plots stacked below it.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/table-subplots/table-subplots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntable_trace2 = go.Table(\n    domain=dict(x=[0, 1],\n                y=[0.7, 1.0]),  \n    columnwidth=[1, 2, 2, 2],\n    columnorder=[0, 1, 2, 3, 4],\n    header = dict(height = 50,\n                  values = [['<b>Date</b>'],['<b>Hash Rate, TH/sec</b>'], \n                            ['<b>Mining revenue</b>'], ['<b>Transaction fees</b>']], \n                  line = dict(color='rgb(50, 50, 50)'),\n                  align = ['left'] * 5,\n                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                  fill = dict(color='#d562be')),\n    cells = dict(values = [df[k].tolist() for k in ['Date', 'Hash-rate', 'Mining-revenue-USD', 'Transaction-fees-BTC']],\n                 line = dict(color='#506784'),\n                 align = ['left'] * 5,\n                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),\n                 format = [None] + [\", .2f\"] * 2 + [',.4f'],  \n                 prefix = [None] * 2 + ['$', u'\\u20BF'],\n                 suffix=[None] * 4,\n                 height = 27,\n                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))\n)\n\ntrace4=go.Scatter(\n    x=df['Date'],\n    y=df['Hash-rate'],\n    xaxis='x1',\n    yaxis='y1',\n    mode='lines',\n    line=dict(width=2, color='#9748a1'),\n    name='hash-rate-TH/s'\n)\n\ntrace5=go.Scatter(\n    x=df['Date'],\n    y=df['Mining-revenue-USD'],\n    xaxis='x2',\n    yaxis='y2',\n    mode='lines',\n    line=dict(width=2, color='#b04553'),\n    name='mining revenue'\n)\n\ntrace6=go.Scatter(\n    x=df['Date'],\n    y=df['Transaction-fees-BTC'],\n    xaxis='x3',\n    yaxis='y3',\n    mode='lines',\n    line=dict(width=2, color='#af7bbd'),\n    name='transact-fee'\n)\n\naxis=dict(\n    showline=True,\n    zeroline=False,\n    showgrid=True,\n    mirror=True, \n    ticklen=4, \n    gridcolor='#ffffff',\n    tickfont=dict(size=10)\n)\n\nlayout2 = dict(\n    width=950,\n    height=800,\n    autosize=False,\n    title='Bitcoin mining stats for 180 days',\n    margin = dict(t=100),\n    showlegend=False,          \n    xaxis1=dict(axis, **dict(domain=[0, 1], anchor='y1', showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0, 1], anchor='y2', showticklabels=False)),          \n    xaxis3=dict(axis, **dict(domain=[0, 1], anchor='y3')), \n    yaxis1=dict(axis, **dict(domain=[2 * 0.21 + 0.02 + 0.02, 0.68], anchor='x1', hoverformat='.2f')),  \n    yaxis2=dict(axis, **dict(domain=[0.21 + 0.02, 2 * 0.21 + 0.02], anchor='x2', tickprefix='$', hoverformat='.2f')),\n    yaxis3=dict(axis, **dict(domain=[0.0, 0.21], anchor='x3', tickprefix=u'\\u20BF', hoverformat='.2f')),\n    plot_bgcolor='rgba(228, 222, 249, 0.65)'\n)\n\nfig2 = dict(data=[table_trace2, trace4, trace5, trace6], layout=layout2)\npy.iplot(fig2, filename='vertical-stacked-subplot-tables')\n```\n\n----------------------------------------\n\nTITLE: Plotting Step Response for Heading vs Roll Command\nDESCRIPTION: Creates an interactive plot showing the heading angle response to a step input in commanded roll angle, demonstrating the initial countersteering effect.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_siso_response(time, np.rad2deg(thetac), np.rad2deg(psi),\n                            title=\"Step Response\", output_y_lab='Heading Angle [deg]',\n                            input_y_lab='Commanded Roll Angle [deg]'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Histogram in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a horizontal histogram by plotting random data along the y-axis instead of the x-axis. It uses 500 random data points from a normal distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ny = np.random.randn(500)\ndata = [go.Histogram(y=y)]\n\npy.iplot(data, filename='horizontal histogram')\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Plotly Streaming Plot in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Plotly figure object and send a single data point through a stream. It shows the basic workflow of creating a scatter plot with streaming capability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import plotly.plotly as py\n>>> from plotly.graph_objs import *\n>>> # auto sign-in with credentials or use py.sign_in()\n>>> trace1 = Scatter(\n        x=[],\n        y=[], \n        stream=dict(token='my_stream_id')\n    )\n>>> data = Data([trace1])\n>>> py.plot(data)\n>>> s = py.Stream('my_stream_id')\n>>> s.open()\n>>> s.write(dict(x=1, y=2))\n>>> s.close()\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing 3D Alpha Shapes with Plotly\nDESCRIPTION: Demonstrates how to load point data and create a 3D alpha shape visualization using Plotly's Mesh3d. This snippet shows the complete workflow from data loading to creating the 3D visualization with proper styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n```\n\nLANGUAGE: python\nCODE:\n```\npts=np.loadtxt('data-file.txt')\nx,y,z=zip(*pts)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools as tls\n```\n\nLANGUAGE: python\nCODE:\n```\npoints=go.Scatter3d(mode = 'markers',\n                 name = '',\n                 x =x,\n                 y= y, \n                 z= z,\n                 marker = dict( size=2, color='#458B00' )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nsimplexes = go.Mesh3d(alphahull =10.0,    \n                   name = '',\n                   x =x,\n                   y= y, \n                   z= z,\n                   color='90EE90', #set the color of simplexes in alpha shape\n                   opacity=0.15   \n)\n```\n\nLANGUAGE: python\nCODE:\n```\nx_style = dict( zeroline=False, range=[-2.85, 4.25], tickvals=np.linspace(-2.85, 4.25, 5)[1:].round(1))\ny_style = dict( zeroline=False, range=[-2.65, 1.32], tickvals=np.linspace(-2.65, 1.32, 4)[1:].round(1))\nz_style = dict( zeroline=False, range=[-3.67,1.4], tickvals=np.linspace(-3.67, 1.4, 5).round(1))\n```\n\nLANGUAGE: python\nCODE:\n```\nlayout=go.Layout(title='Alpha shape of a set of 3D points. Alpha=0.1',\n              width=500,\n              height=500,\n              scene = dict(\n              xaxis = x_style, \n              yaxis = y_style, \n              zaxis = z_style\n             )\n             )\n```\n\nLANGUAGE: python\nCODE:\n```\nfig=go.Figure(data=[points, simplexes], layout=layout)\npy.iplot(fig, filename='3D-AlphaS-ex')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Y-Axes Subplots in Python using Plotly\nDESCRIPTION: This code snippet demonstrates how to create multiple y-axes subplots using Plotly in Python. It creates eight scatter traces and a complex layout with four subplots, each having two y-axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Top left\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 32, 62],\n    name='yaxis data',\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis2 data',\n    yaxis='y2'\n)\n\n# Top right\ntrace3 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 32, 62],\n    name='yaxis3 data',\n    xaxis='x2',\n    yaxis='y3'\n)\ntrace4 = go.Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis4 data',\n    xaxis='x2',\n    yaxis='y4'\n)\n\n# Bottom left\ntrace5 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 32, 62],\n    name='yaxis5 data',\n    xaxis='x3',\n    yaxis='y5'\n)\ntrace6 = go.Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis6 data',\n    xaxis='x3',\n    yaxis='y6'\n)\n\n# Bottom right\ntrace7 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 32, 62],\n    name='yaxis7 data',\n    xaxis='x4',\n    yaxis='y7'\n)\ntrace8 = go.Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis8 data',\n    xaxis='x4',\n    yaxis='y8'\n)\n\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8]\nlayout = go.Layout(\n    title='Double Y Axis Example',\n    legend={'x': 1.1},\n    width=1000,\n    height=500,\n    # Top left\n    xaxis=dict(\n        title='xaxis title',\n        domain=[0, 0.4]\n    ),\n    yaxis=dict(\n        title='yaxis title',\n        type='log',\n        domain=[0.6, 1.0],\n        anchor='x'\n    ),\n    yaxis2=dict(\n        title='yaxis2 title',\n        overlaying='y',\n        side='right'\n    ),\n    \n    # Top right\n    xaxis2=dict(\n        title='xaxis2 title',\n        domain=[0.6, 1.0],\n        anchor='y3'\n    ),\n    yaxis3=dict(\n        type='log',\n        title='yaxis3 title',\n        domain=[0.6, 1.0],\n        anchor='x2'\n    ),\n    yaxis4=dict(\n        title='yaxis4 title',\n        domain=[0.6, 1.0],\n        overlaying='y3',\n        side='right',\n        anchor='x2'\n    ),\n    \n    # Bottom left\n    xaxis3=dict(\n        title='xaxis3 title',\n        domain=[0, 0.4],\n        anchor='y5'\n    ),\n    yaxis5=dict(\n        type='log',\n        title='yaxis5 title',\n        domain=[0, 0.4],\n        anchor='x3'\n    ),\n    yaxis6=dict(\n        title='yaxis6 title',\n        domain=[0, 0.4],\n        overlaying='y5',\n        side='right',\n        anchor='x3'\n    ),\n    \n    # Bottom right\n    xaxis4=dict(\n        title='xaxis4, title',\n        domain=[0.6, 1.0],\n        anchor='y7'\n    ),\n    yaxis7=dict(\n        type='log',\n        title='yaxis7 title',\n        domain=[0, 0.4],\n        anchor='x4'\n    ),\n    yaxis8=dict(\n        title='yaxis8 title',\n        domain=[0, 0.4],\n        overlaying='y7',\n        side='right',\n        anchor='x4'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='multiple-y-axes-subplots')\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Tree Visualization\nDESCRIPTION: This snippet defines two Plotly traces: one for the edges (lines) and one for the nodes (dots) of the tree structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlines = go.Scatter(x=Xe,\n                   y=Ye,\n                   mode='lines',\n                   line=dict(color='rgb(210,210,210)', width=1),\n                   hoverinfo='none'\n                   )\ndots = go.Scatter(x=Xn,\n                  y=Yn,\n                  mode='markers',\n                  name='',\n                  marker=dict(symbol='dot',\n                                size=18, \n                                color='#6175c1',    #'#DB4551', \n                                line=dict(color='rgb(50,50,50)', width=1)\n                                ),\n                  text=labels,\n                  hoverinfo='text',\n                  opacity=0.8\n                  )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scatter Plot with Plotly\nDESCRIPTION: Creates a simple scatter plot showing the relationship between GNP and life expectancy using Plotly. The plot includes country names as hover text and uses a logarithmic scale for the x-axis (GNP).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=df['GNP'],\n    y=df['LifeExpectancy'],\n    text=country_names,\n    mode='markers'\n)\nlayout = go.Layout(\n    title='Life expectancy vs GNP from MySQL world database',\n    xaxis=dict( type='log', title='GNP' ),\n    yaxis=dict( title='Life expectancy' )\n)\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='world GNP vs life expectancy')\n```\n\n----------------------------------------\n\nTITLE: Styling 2D Histogram Contour in Python\nDESCRIPTION: This example demonstrates advanced styling options for 2D histogram contour plots, including customizing the contour labels and hover labels. It applies the 'Jet' colorscale and configures font properties for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\ntrace = [go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Jet',\n        contours = dict(\n            showlabels = True,\n            labelfont = dict(\n                family = 'Raleway',\n                color = 'white'\n            )\n        ),\n        hoverlabel = dict(\n            bgcolor = 'white',\n            bordercolor = 'black',\n            font = dict(\n                family = 'Raleway',\n                color = 'black'\n            )\n        )\n        \n)]\n\npy.iplot(trace, filename = \"Histogram2dContour Styled\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Carpet Plot Tutorial with Plotly Publisher\nDESCRIPTION: This code snippet uses the Plotly publisher to publish the carpet plot tutorial. It sets various metadata for the tutorial including title, description, and display options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'carpet_plot.ipynb', 'python/carpet-plot/', 'Carpet Plots',\n    'How to make carpet plots in Python with Plotly.',\n    title = 'Carpet Plots | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/carpet.jpg', \n    language='python', \n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='scientific', order=26,\n    ipynb= '~notebook_demo/144')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Plot Modes with Plotly in Python\nDESCRIPTION: This snippet shows how to create line plots with different modes: lines, lines+markers, and markers. It uses random data to create three traces with different visualization styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Create random data with numpy\nimport numpy as np\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N)+5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N)-5\n\n# Create traces\ntrace0 = go.Scatter(\n    x = random_x,\n    y = random_y0,\n    mode = 'lines',\n    name = 'lines'\n)\ntrace1 = go.Scatter(\n    x = random_x,\n    y = random_y1,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\ntrace2 = go.Scatter(\n    x = random_x,\n    y = random_y2,\n    mode = 'markers',\n    name = 'markers'\n)\ndata = [trace0, trace1, trace2]\n\npy.iplot(data, filename='line-mode')\n```\n\n----------------------------------------\n\nTITLE: Plotting Heading Tracking Performance\nDESCRIPTION: Creates an interactive plot showing how well the controlled system tracks the commanded heading angle of 10 degrees over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_siso_response(time, np.rad2deg(psic), np.rad2deg(psi),\n                            input_y_lab=\"Commanded Heading [deg]\",\n                            output_y_lab=\"Heading [deg]\",\n                            subplots=False))\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Population Pyramid Chart in Python with Plotly\nDESCRIPTION: This snippet shows how to create a stacked population pyramid chart using Plotly's go.Bar trace. It includes additional data for men and women with dogs, creating a more complex visualization with overlaid bars.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pyramid/pyramid-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nwomen_bins = np.array([-600, -623, -653, -650, -670, -578, -541, -411, -322, -230])\nmen_bins = np.array([600, 623, 653, 650, 670, 578, 541, 360, 312, 170])\nwomen_with_dogs_bins = np.array([-0, -3, -308, -281, -245, -231, -212, -132, -74, -76])\nmen_with_dogs_bins = np.array([0, 1, 300, 273, 256, 211, 201, 170, 145, 43])\n\ny = list(range(0, 100, 10))\n\nlayout = go.Layout(yaxis=go.layout.YAxis(title='Age'),\n                   xaxis=go.layout.XAxis(\n                       range=[-1200, 1200],\n                       tickvals=[-1000, -700, -300, 0, 300, 700, 1000],\n                       ticktext=[1000, 700, 300, 0, 300, 700, 1000],\n                       title='Number'),\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               ),\n        go.Bar(y=y,\n               x=men_with_dogs_bins,\n               orientation='h',\n               hoverinfo='x',\n               showlegend=False,\n               opacity=0.5,\n               marker=dict(color='teal')\n               ),\n        go.Bar(y=y,\n               x=women_with_dogs_bins,\n               orientation='h',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               showlegend=False,\n               opacity=0.5,\n               marker=dict(color='darkgreen')\n               )]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/stacked_bar_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Horizontal Legend in Plotly\nDESCRIPTION: This code snippet demonstrates how to create a scatter plot with three traces and a horizontal legend using Plotly in Python. It uses random data and customizes marker sizes and colors for each trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/horizontal-legend/horizontal-legends.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\ntrace1 = go.Scatter(\n                x=np.random.randn(75),\n                mode='markers',\n                name=\"Plot1\",\n                marker=dict(\n                size=16,\n                color='rgba(152, 0, 0, .8)'\n                ))\ntrace2 = go.Scatter(\n                x=np.random.randn(75), \n                mode='markers',\n                name=\"Plot2\",\n                marker=dict(\n                size=16,\n                color='rgba(0, 152, 0, .8)'\n                ))\ntrace3 = go.Scatter(\n                x=np.random.randn(75), \n                mode='markers',\n                name=\"Plot3\",\n                marker=dict(\n                size=16,\n                color='rgba(0, 0, 152, .8)'\n                ))\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n                legend=dict(\n                orientation=\"h\")\n                )\nfigure=go.Figure(data=data, layout=layout)\n\npy.iplot(figure)\n```\n\n----------------------------------------\n\nTITLE: Creating a Normalized Histogram in Python with Plotly\nDESCRIPTION: This snippet shows how to create a normalized histogram where values are displayed as probabilities rather than counts. It uses 500 random data points from a normal distribution with the 'histnorm' parameter set to 'probability'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ndata = [go.Histogram(x=x,\n                     histnorm='probability')]\n\npy.iplot(data, filename='normalized histogram')\n```\n\n----------------------------------------\n\nTITLE: Multiple Dropdown Menus for Advanced Chart Customization\nDESCRIPTION: Implements multiple dropdown menus to control various aspects of the visualization including colorscale selection, chart type, and line display. Uses cmocean package for additional color schemes and demonstrates complex menu positioning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport cmocean\nimport json\nimport numpy as np\nimport pandas as pd\n\ndef cmocean_to_plotly(cmap, pl_entries=100):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n    \n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n        \n    return pl_colorscale\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')\n\ndata = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]\n\nbutton_layer_1_height = 1.12\nbutton_layer_2_height = 1.065\n\nlayout = go.Layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict(x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'\n    )\n)\n\nupdatemenus=list([\n    dict(\n        buttons=list([\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.haline)) ],\n                label='Haline',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.turbid))],\n                label='Turbid',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.speed))],\n                label='Speed',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.haline)) ],\n                label='Tempo',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.gray))],\n                label='Gray',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.phase))],\n                label='Phase',\n                method='restyle'\n            ),  \n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.balance)) ],\n                label='Balance',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.delta))],\n                label='Delta',\n                method='restyle'\n            ),\n            dict(\n                args=['colorscale', json.dumps(cmocean_to_plotly(cmocean.cm.curl))],\n                label='Curl',\n                method='restyle'\n            ),                       \n        ]),\n        direction = 'down',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        x = 0.1,\n        xanchor = 'left',\n        y = button_layer_1_height,\n        yanchor = 'top'            \n    ),\n    dict(\n        buttons=list([   \n            dict(\n                args=['reversescale', True],\n                label='Reverse',\n                method='restyle'\n            ),\n            dict(\n                args=['reversescale', False],\n                label='Undo',\n                method='restyle'\n            )                    \n        ]),\n        direction = 'down',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        x = 0.55,\n        xanchor = 'left',\n        y = button_layer_1_height,\n        yanchor = 'top'            \n    ),\n    dict(\n        buttons=list([   \n            dict(\n                args=[{'contours.showlines':False, 'type':'contour'}],\n                label='Hide lines',\n                method='restyle'\n            ),\n            dict(\n                args=[{'contours.showlines':True, 'type':'contour'}],\n                label='Show lines',\n                method='restyle'\n            ),                    \n        ]),\n        direction = 'down',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        x = 0.775,\n        xanchor = 'left',\n        y = button_layer_1_height,\n        yanchor = 'top'            \n    ),        \n    dict(\n        buttons=list([   \n            dict(\n                args=['type', 'surface'],\n                label='3d Surface',\n                method='restyle'\n            ),\n            dict(\n                args=['type', 'heatmap'],\n                label='Heatmap',\n                method='restyle'\n            ),  \n            dict(\n                args=['type', 'contour'],\n                label='Contour',\n                method='restyle'\n            )                     \n        ]),\n        direction = 'down',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        x = 0.3,\n        xanchor = 'left',\n        y = button_layer_1_height,\n        yanchor = 'top' \n    ),\n])\n\nannotations = list([\n    dict(text='cmocean<br>scale', x=0, y=1.11, yref='paper', align='left', showarrow=False ),\n    dict(text='Trace<br>type', x=0.25, y=1.11, yref='paper', showarrow=False ),\n    dict(text=\"Colorscale\", x=0.5, y=1.10, yref='paper', showarrow=False),\n    dict(text=\"Lines\", x=0.75, y=1.10, yref='paper', showarrow=False)\n])\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='cmocean-picker-dropdown')\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Trace Radar Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a radar chart with multiple traces using Plotly. It defines two Scatterpolar traces and combines them in a single figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/radar/radar.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatterpolar(\n      r = [39, 28, 8, 7, 28, 39],\n      theta = ['A','B','C', 'D', 'E', 'A'],\n      fill = 'toself',\n      name = 'Group A'\n    ),\n    go.Scatterpolar(\n      r = [1.5, 10, 39, 31, 15, 1.5],\n      theta = ['A','B','C', 'D', 'E', 'A'],\n      fill = 'toself',\n      name = 'Group B'\n    )\n]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 50]\n    )\n  ),\n  showlegend = False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = \"radar/multiple\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic 3D Wireframe Plot in Python using Plotly\nDESCRIPTION: Creates a 3D wireframe plot using Plotly and NumPy. Generates a mesh grid, calculates z-values using a sine function of the radius, and creates a 3D scatter plot with line segments. Includes custom styling for axes and background.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-wireframe/3d-wireframe.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\n# Creating the data\nx = np.linspace(-5, 5, 50)\ny = np.linspace(-5, 5, 50)\nxGrid, yGrid = np.meshgrid(y, x)\nR = np.sqrt(xGrid ** 2 + yGrid ** 2)\nz = np.sin(R)\n\n# Creating the plot\nlines = []\nline_marker = dict(color='#0066FF', width=2)\nfor i, j, k in zip(xGrid, yGrid, z):\n    lines.append(go.Scatter3d(x=i, y=j, z=k, mode='lines', line=line_marker))\n\nlayout = go.Layout(\n    title='Wireframe Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    ),\n    showlegend=False,\n)\nfig = go.Figure(data=lines, layout=layout)\npy.iplot(fig, filename='wireframe_plot')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Inset Graph with Plotly in Python\nDESCRIPTION: This code snippet demonstrates how to create a simple inset graph using Plotly's Python library. It creates a main scatter plot and a secondary scatter plot positioned as an inset using custom axis domains.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/insets/inset.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 3, 2]\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[30, 40, 50],\n    xaxis='x2',\n    yaxis='y2'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2'\n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='simple-inset')\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Histograms in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create stacked histograms by setting the 'barmode' parameter to 'stack' in the layout. It plots two histograms with random data on top of each other.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)\n\ntrace0 = go.Histogram(\n    x=x0\n)\ntrace1 = go.Histogram(\n    x=x1\n)\ndata = [trace0, trace1]\nlayout = go.Layout(barmode='stack')\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='stacked histogram')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sized Subplot with Subplot Titles in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a custom-sized subplot with titles using Plotly's tools.make_subplots function. It creates a 2x2 grid with three subplots, each containing scatter plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2],\n    y=[1, 2]\n)\ntrace1 = go.Scatter(\n    x=[1, 2],\n    y=[1, 2]\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3],\n    y=[2, 1, 2]\n)\nfig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=False, title='Specs with Subplot Title')\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Chart Subplots with Plotly in Python\nDESCRIPTION: This example shows how to create multiple pie charts as subplots using Plotly. It uses the 'domain' attribute to position each chart and customizes colors and hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = {\n    'data': [\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [38, 27, 18, 10, 7],\n            'type': 'pie',\n            'name': 'Starry Night',\n            'marker': {'colors': ['rgb(56, 75, 126)',\n                                  'rgb(18, 36, 37)',\n                                  'rgb(34, 53, 101)',\n                                  'rgb(36, 55, 57)',\n                                  'rgb(6, 4, 4)']},\n            'domain': {'x': [0, .48],\n                       'y': [0, .49]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [28, 26, 21, 15, 10],\n            'marker': {'colors': ['rgb(177, 127, 38)',\n                                  'rgb(205, 152, 36)',\n                                  'rgb(99, 79, 37)',\n                                  'rgb(129, 180, 179)',\n                                  'rgb(124, 103, 37)']},\n            'type': 'pie',\n            'name': 'Sunflowers',\n            'domain': {'x': [.52, 1],\n                       'y': [0, .49]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [38, 19, 16, 14, 13],\n            'marker': {'colors': ['rgb(33, 75, 99)',\n                                  'rgb(79, 129, 102)',\n                                  'rgb(151, 179, 100)',\n                                  'rgb(175, 49, 35)',\n                                  'rgb(36, 73, 147)']},\n            'type': 'pie',\n            'name': 'Irises',\n            'domain': {'x': [0, .48],\n                       'y': [.51, 1]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        },\n        {\n            'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n            'values': [31, 24, 19, 18, 8],\n            'marker': {'colors': ['rgb(146, 123, 21)',\n                                  'rgb(177, 180, 34)',\n                                  'rgb(206, 206, 40)',\n                                  'rgb(175, 51, 21)',\n                                  'rgb(35, 36, 21)']},\n            'type': 'pie',\n            'name':'The Night Café',\n            'domain': {'x': [.52, 1],\n                       'y': [.51, 1]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        }\n    ],\n    'layout': {'title': 'Van Gogh: 5 Most Prominent Colors Shown Proportionally',\n               'showlegend': False}\n}\n\npy.iplot(fig, filename='pie_chart_subplots')\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Relationship Ribbons in Chord Diagram\nDESCRIPTION: Function that generates Plotly shape dictionaries for ribbons connecting an ideogram to itself, representing self-directed relationships. These are special cases where the ribbon forms a loop.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef make_self_rel(l, line_color, fill_color, radius):\n    #radius is the radius of Bezier control point b_1\n    b=control_pts([l[0], (l[0]+l[1])/2, l[1]], radius) \n    return  dict(\n                line=dict(\n                color=line_color, width=0.5\n            ),\n            path=  make_q_bezier(b)+make_ribbon_arc(l[1], l[0]),\n            type='path',\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap with WebGL Text Annotations in Plotly Python\nDESCRIPTION: Creates an interactive heatmap visualization with text annotations using Plotly's Python library and WebGL rendering. The code generates a 12xn heatmap with random values, overlays text annotations using scattergl, and implements a slider for x-axis range control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/annotations/webgl-text-and-annotations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.figure_factory import create_annotated_heatmap\n\nn=250\n\ny = [[i]*n for i in range(12)]\ny = [item for sublist in y for item in sublist]\n\ntrace = dict(type='heatmap', z=np.random.randint(1, 10,(12, n)), colorscale = 'Viridis')\ndata=[trace]\n\n# Here's the key part - Scattergl text! \n\ndata.append({'type': 'scattergl', \n                    'mode': 'text', \n                    'x': list(range(n))*12,\n                    'y': y, \n                    'text': np.random.choice(list('ATGC'), 12*250),\n                    'textfont': {\n                        'size': 20\n                    }})\n\nsteps = [{'args': ['xaxis', {'range': [-0.5 + e, 30.5 + e]}], 'method': 'relayout'} for e in range(n-30)]\n\nsliders = [dict(\n    active = 0,\n    steps = steps\n)]\n\nlayout = dict(sliders=sliders)\nlayout['xaxis'] = {'range': [-0.5, 30.5]}\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Dropdown for Financial Data Visualization in Plotly\nDESCRIPTION: Creates an interactive financial chart with a dropdown menu to toggle between high and low stock prices. Uses pandas for data manipulation and implements the update method to modify both data and layout attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go \n\nfrom datetime import datetime\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\ndf.columns = [col.replace('AAPL.', '') for col in df.columns]\n\ntrace_high = go.Scatter(x=list(df.index),\n                        y=list(df.High),\n                        name='High',\n                        line=dict(color='#33CFA5'))\n\ntrace_high_avg = go.Scatter(x=list(df.index),\n                            y=[df.High.mean()]*len(df.index),\n                            name='High Average',\n                            visible=False,\n                            line=dict(color='#33CFA5', dash='dash'))\n\ntrace_low = go.Scatter(x=list(df.index),\n                       y=list(df.Low),\n                       name='Low',\n                       line=dict(color='#F06A6A'))\n\ntrace_low_avg = go.Scatter(x=list(df.index),\n                           y=[df.Low.mean()]*len(df.index),\n                           name='Low Average',\n                           visible=False,\n                           line=dict(color='#F06A6A', dash='dash'))\n\ndata = [trace_high, trace_high_avg, trace_low, trace_low_avg]\n\nhigh_annotations=[dict(x='2016-03-01',\n                       y=df.High.mean(),\n                       xref='x', yref='y',\n                       text='High Average:<br>'+str(df.High.mean()),\n                       ax=0, ay=-40),\n                  dict(x=df.High.idxmax(),\n                       y=df.High.max(),\n                       xref='x', yref='y',\n                       text='High Max:<br>'+str(df.High.max()),\n                       ax=0, ay=-40)]\nlow_annotations=[dict(x='2015-05-01',\n                      y=df.Low.mean(),\n                      xref='x', yref='y',\n                      text='Low Average:<br>'+str(df.Low.mean()),\n                      ax=0, ay=40),\n                 dict(x=df.High.idxmin(),\n                      y=df.Low.min(),\n                      xref='x', yref='y',\n                      text='Low Min:<br>'+str(df.Low.min()),\n                      ax=0, ay=40)]\n\nupdatemenus = list([\n    dict(active=-1,\n         buttons=list([   \n            dict(label = 'High',\n                 method = 'update',\n                 args = [{'visible': [True, True, False, False]},\n                         {'title': 'Yahoo High',\n                          'annotations': high_annotations}]),\n            dict(label = 'Low',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, True]},\n                         {'title': 'Yahoo Low',\n                          'annotations': low_annotations}]),\n            dict(label = 'Both',\n                 method = 'update',\n                 args = [{'visible': [True, True, True, True]},\n                         {'title': 'Yahoo',\n                          'annotations': high_annotations+low_annotations}]),\n            dict(label = 'Reset',\n                 method = 'update',\n                 args = [{'visible': [True, False, True, False]},\n                         {'title': 'Yahoo',\n                          'annotations': []}])\n        ]),\n    )\n])\n\nlayout = dict(title='Yahoo', showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='update_dropdown')\n```\n\n----------------------------------------\n\nTITLE: Creating Ribbon Shapes for Chord Connections in Plotly\nDESCRIPTION: Function that generates Plotly shape dictionaries for ribbons connecting two ideograms. It combines Bézier curves and arcs to create a smooth connection with proper coloring.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef make_ribbon(l, r, line_color, fill_color, radius=0.2):\n    #l=[l[0], l[1]], r=[r[0], r[1]]  represent the opposite arcs in the ribbon \n    #line_color is the color of the shape boundary\n    #fill_color is the fill color for the ribbon shape\n    poligon=ctrl_rib_chords(l,r, radius)\n    b,c =poligon  \n           \n    return  dict(\n                line=dict(\n                color=line_color, width=0.5\n            ),\n            path=  make_q_bezier(b)+make_ribbon_arc(r[0], r[1])+\n                   make_q_bezier(c[::-1])+make_ribbon_arc(l[1], l[0]),\n            type='path',\n            fillcolor=fill_color,\n            layer='below'\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Legend in Plotly with Python\nDESCRIPTION: This example shows how to create a grouped legend in Plotly. It uses the 'legendgroup' parameter to group related traces together in the legend, allowing for better organization of complex charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\ndata = [\n    {\n        'x': [1, 2, 3],\n        'y': [2, 1, 3],\n        'legendgroup': 'group', # this can be any string, not just \"group\"\n        'name': 'first legend group',\n        'mode': 'markers',\n        'marker': {\n            'color': 'rgb(164, 194, 244)'\n        }\n    },\n    {\n        'x': [1, 2, 3],\n        'y': [2, 2, 2],\n        'legendgroup': 'group',\n        'name': 'first legend group - average',\n        'mode': 'lines',\n        'line': {\n            'color': 'rgb(164, 194, 244)'\n        }\n    },   \n    {\n        'x': [1, 2, 3],\n        'y': [4, 9, 2],\n        'legendgroup': 'group2', \n        'name': 'second legend group',\n        'mode': 'markers',\n        'marker': {\n            'color': 'rgb(142, 124, 195)'\n        }\n    },        \n    {\n        'x': [1, 2, 3],\n        'y': [5, 5, 5],\n        'legendgroup': 'group2',\n        'name': 'second legend group - average',\n        'mode': 'lines',\n        'line': {\n            'color': 'rgb(142, 124, 195)'\n        }\n    }\n]\n\npy.iplot(data, filename='basic-legend-grouping')\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Bin Sizes in Distribution Plots\nDESCRIPTION: Shows how to create a distribution plot with different bin sizes for each dataset. This is useful when datasets have different scales or when you want to emphasize different aspects of each distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\n# Add histogram data\nx1 = np.random.randn(200)-2  \nx2 = np.random.randn(200)  \nx3 = np.random.randn(200)+2  \nx4 = np.random.randn(200)+4  \n\n# Group data together\nhist_data = [x1, x2, x3, x4]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3', 'Group 4']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=[.1, .25, .5, 1])\n\n# Plot!\npy.iplot(fig, filename='Distplot with Multiple Bin Sizes')\n```\n\n----------------------------------------\n\nTITLE: Basic Parallel Coordinates Plot with Iris Dataset\nDESCRIPTION: Creates a parallel coordinates plot using the iris dataset. Demonstrates color scaling and dimension configuration for multiple variables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/parcoords/parcoords.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd \n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv\")\n\ndata = [\n    go.Parcoords(\n        line = dict(color = df['species_id'],\n                   colorscale = [[0,'#D7C16B'],[0.5,'#23D8C3'],[1,'#F3F10F']]),\n        dimensions = list([\n            dict(range = [0,8],\n                constraintrange = [4,8],\n                label = 'Sepal Length', values = df['sepal_length']),\n            dict(range = [0,8],\n                label = 'Sepal Width', values = df['sepal_width']),\n            dict(range = [0,8],\n                label = 'Petal Length', values = df['petal_length']),\n            dict(range = [0,8],\n                label = 'Petal Width', values = df['petal_width'])\n        ])\n    )\n]\n\nlayout = go.Layout(\n    plot_bgcolor = '#E5E5E5',\n    paper_bgcolor = '#E5E5E5'\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = 'parcoords-basic')\n```\n\n----------------------------------------\n\nTITLE: Creating Base Chart for Gauge Meter in Python with Plotly\nDESCRIPTION: This snippet initializes the base chart for a gauge meter using Plotly. It creates a donut chart with 6 sections, rotated to align the range marks with the edges of the meter's sections. The chart uses custom colors and settings to create the foundation for the gauge meter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/semicircular-gauge.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nbase_chart = {\n    \"values\": [40, 10, 10, 10, 10, 10, 10],\n    \"labels\": [\"-\", \"0\", \"20\", \"40\", \"60\", \"80\", \"100\"],\n    \"domain\": {\"x\": [0, .48]},\n    \"marker\": {\n        \"colors\": [\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)',\n            'rgb(255, 255, 255)'\n        ],\n        \"line\": {\n            \"width\": 1\n        }\n    },\n    \"name\": \"Gauge\",\n    \"hole\": .4,\n    \"type\": \"pie\",\n    \"direction\": \"clockwise\",\n    \"rotation\": 108,\n    \"showlegend\": False,\n    \"hoverinfo\": \"none\",\n    \"textinfo\": \"label\",\n    \"textposition\": \"outside\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Python Publisher Package\nDESCRIPTION: This code sets up the environment for Plotly documentation by loading custom fonts and CSS, then uses the publisher package to publish a chord diagram tutorial to the Plotly documentation site. It includes metadata such as title, description, thumbnail path, and display settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'chord.ipynb', 'python/chord-diagram/', 'Python Chord Diagram',\n    'How to make an interactive chord diagram in Python with Plotly and iGraph. ',\n    title = 'Chord Diagram | Plotly',\n    thumbnail='thumbnail/chord.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=24,\n    ipynb= '~notebook_demo/225')\n```\n\n----------------------------------------\n\nTITLE: Setting Bézier Control Point Radii for Chord Diagram in Python\nDESCRIPTION: This snippet defines the radii of Bézier control points for ribbons associated with diagonal data entries in the chord diagram. These values are determined through trial and error.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nradii_sribb=[0.4, 0.30, 0.35, 0.39, 0.12]# these value are set after a few trials\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Scatter Plot with Plotly in Python\nDESCRIPTION: This code creates a basic scatter plot using random data generated with NumPy. It demonstrates how to create a trace and plot it using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Create random data with numpy\nimport numpy as np\n\nN = 1000\nrandom_x = np.random.randn(N)\nrandom_y = np.random.randn(N)\n\n# Create a trace\ntrace = go.Scatter(\n    x = random_x,\n    y = random_y,\n    mode = 'markers'\n)\n\ndata = [trace]\n\n# Plot and embed in ipython notebook!\npy.iplot(data, filename='basic-scatter')\n\n# or plot with: plot_url = py.plot(data, filename='basic-line')\n```\n\n----------------------------------------\n\nTITLE: Creating a Single State Choropleth for Florida in Python\nDESCRIPTION: This example shows how to create a detailed choropleth map for a single state (Florida) with custom color scaling and binning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'] == 'Florida']\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\nendpts = list(np.mgrid[min(values):max(values):4j])\ncolorscale = [\"#030512\",\"#1d1d3b\",\"#323268\",\"#3d4b94\",\"#3e6ab0\",\n              \"#4989bc\",\"#60a7c7\",\"#85c5d3\",\"#b7e0e4\",\"#eafcfd\"]\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['Florida'], show_state_data=True,\n    colorscale=colorscale, binning_endpoints=endpts, round_legend_values=True,\n    plot_bgcolor='rgb(229,229,229)',\n    paper_bgcolor='rgb(229,229,229)',\n    legend_title='Population by County',\n    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},\n    exponent_format=True,\n)\npy.iplot(fig, filename='choropleth_florida')\n```\n\n----------------------------------------\n\nTITLE: Adding a Scatter Trace to a Carpet Plot with Plotly in Python\nDESCRIPTION: This example shows how to add a scatter trace to an existing carpet plot. It creates a carpet plot and then adds a Scattercarpet trace with a spline line.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-scatter/scattercarpet.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n      tickprefix = 'a = ',\n      ticksuffix = 'm',\n      smoothing = 1,\n      minorgridcount = 9\n      ),\n    baxis = dict(\n      tickprefix = 'b = ',\n      ticksuffix = 'Pa',\n      smoothing = 1,\n      minorgridcount = 9\n      )\n    )\n\ntrace2 = go.Scattercarpet(\n    a = [4, 4.5, 5, 6],\n    b = [2.5, 2.5, 2.5, 2.5],\n    line = dict(\n      shape = 'spline',\n      smoothing = 1,\n      color = 'blue'\n    )\n  )\n\ndata = [trace1,trace2]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"scattercarpet/add-scattercarpet\")\n```\n\n----------------------------------------\n\nTITLE: Generating Ideogram Arcs (Python)\nDESCRIPTION: This function creates points along an ideogram arc, which will be used to draw the arc in the final visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef make_ideogram_arc(R, phi, a=50):\n    # R is the circle radius\n    # phi is the list of ends angle coordinates of an arc\n    # a is a parameter that controls the number of points to be evaluated on an arc\n    if not test_2PI(phi[0]) or not test_2PI(phi[1]):\n        phi=[moduloAB(t, 0, 2*PI) for t in phi]\n    length=(phi[1]-phi[0])% 2*PI \n    nr=5 if length<=PI/4 else int(a*length/PI)\n\n    if phi[0] < phi[1]:   \n        theta=np.linspace(phi[0], phi[1], nr)\n    else:\n        phi=[moduloAB(t, -PI, PI) for t in phi]\n        theta=np.linspace(phi[0], phi[1], nr)\n    return R*np.exp(1j*theta)   \n\nz=make_ideogram_arc(1.3, [11*PI/6, PI/17])\nprint z\n```\n\n----------------------------------------\n\nTITLE: Customizing 3D Spikelines on Hover\nDESCRIPTION: Demonstrates how to customize spikeline appearance in 3D scatter plots, including color, thickness, and visibility settings for each axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-hover/3d-hover-options.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ndata = [go.Scatter3d(\n    x=np.random.randn(50),\n    y=np.random.randn(50),\n    z=np.random.randn(50),\n)]\n\nlayout = go.Layout(\n    scene=go.layout.Scene(\n        xaxis=go.layout.scene.XAxis(\n            spikecolor='#1fe5bd',\n            spikesides=False,\n            spikethickness=6,\n        ),\n        yaxis=go.layout.scene.YAxis(\n            spikecolor='#1fe5bd',\n            spikesides=False,\n            spikethickness=6,\n        ),\n        zaxis=go.layout.scene.ZAxis(\n            spikecolor='#1fe5bd',\n            spikethickness=6,\n        ),\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='hover-spikelines')\n```\n\n----------------------------------------\n\nTITLE: 2D Histogram Combined with Scatter Plot\nDESCRIPTION: Creates a complex visualization combining a 2D histogram with scatter plot overlay, featuring custom styling and layout options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.randn(100)/5. + 0.5  # 5. enforces float division\ny0 = np.random.randn(100)/5. + 0.5\nx1 = np.random.rand(50)\ny1 = np.random.rand(50) + 1.0\n\nx = np.concatenate([x0, x1])\ny = np.concatenate([y0, y1])\n\ntrace1 = go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='x',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n)\ntrace2 = go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    showlegend=False,\n    marker=dict(\n        symbol='circle',\n        opacity=0.7,\n        color='white',\n        size=8,\n        line=dict(width=1),\n    )\n)\ntrace3 = go.Histogram2d(\n    x=x,\n    y=y,\n    colorscale='YlGnBu',\n    zmax=10,\n    nbinsx=14,\n    nbinsy=14,\n    zauto=False,\n)\n\nlayout = go.Layout(\n    xaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    yaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),\n    autosize=False,\n    height=550,\n    width=550,\n    hovermode='closest',\n\n)\ndata = [trace1, trace2, trace3]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Numerical Differentiation of Sine Function using NumPy and Plotly in Python\nDESCRIPTION: This code snippet demonstrates how to numerically differentiate the sine function using NumPy, and then plot both the original function and its derivative using Plotly. It calculates the derivative using finite differences and creates scatter plots for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-differentiation/python_Numerical_Differentiation.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\ndy = np.zeros(y.shape,np.float)\ndy[0:-1] = np.diff(y)/np.diff(x)\ndy[-1] = (y[-1] - y[-2])/(x[-1] - x[-2])\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    name='sin(x)'\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=dy,\n    mode='lines',\n    name='numerical derivative of sin(x)'\n)\n\ntrace_data = [trace1, trace2]\npy.iplot(trace_data, filename='numerical-differentiation')\n```\n\n----------------------------------------\n\nTITLE: Adding Contours to a Carpet Plot in Python with Plotly\nDESCRIPTION: This example demonstrates how to add contours to a carpet plot. It creates both a carpet trace and a contourcarpet trace with custom contour properties, colorbars, and line settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-contour/contourcarpet.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Contourcarpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    z = [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],\n    autocontour = False,\n    contours = dict(\n    \tstart = 1,\n        end = 14,\n        size = 1\n    ),\n    line = dict(\n    \twidth = 2,\n    \tsmoothing = 0\n    ),\n    colorbar = dict(\n    \tlen = 0.4,\n        y = 0.25\n    )\n)\n\ntrace2 = go.Carpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    )\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    margin = dict(\n    \tt = 40,\n        r = 30,\n        b = 30,\n        l = 30\n    ),\n    yaxis = dict(\n        range = [0.388,4.361]\n    ),\n    xaxis = dict(\n    \trange = [0.667,5.932]\t\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = \"contourcarpet/add-contours\")\n```\n\n----------------------------------------\n\nTITLE: Creating US Flight Paths Map with Plotly in Python\nDESCRIPTION: This code creates a map of US flight paths using Plotly. It loads airport and flight path data, creates scatter plots for airports, and line plots for flight paths. The map includes hover information and custom styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/lines-on-maps/lines_on_maps.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf_airports = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf_airports.head()\n\ndf_flight_paths = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')\ndf_flight_paths.head()\n\nairports = [go.Scattergeo(\n    locationmode = 'USA-states',\n    lon = df_airports['long'],\n    lat = df_airports['lat'],\n    hoverinfo = 'text',\n    text = df_airports['airport'],\n    mode = 'markers',\n    marker = go.scattergeo.Marker(\n        size = 2,\n        color = 'rgb(255, 0, 0)',\n        line = go.scattergeo.marker.Line(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    ))]\n\nflight_paths = []\nfor i in range(len(df_flight_paths)):\n    flight_paths.append(\n        go.Scattergeo(\n            locationmode = 'USA-states',\n            lon = [df_flight_paths['start_lon'][i], df_flight_paths['end_lon'][i]],\n            lat = [df_flight_paths['start_lat'][i], df_flight_paths['end_lat'][i]],\n            mode = 'lines',\n            line = go.scattergeo.Line(\n                width = 1,\n                color = 'red',\n            ),\n            opacity = float(df_flight_paths['cnt'][i]) / float(df_flight_paths['cnt'].max()),\n        )\n    )\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)'\n    ),\n    showlegend = False,\n    geo = go.layout.Geo(\n        scope = 'north america',\n        projection = go.layout.geo.Projection(type = 'azimuthal equal area'),\n        showland = True,\n        landcolor = 'rgb(243, 243, 243)',\n        countrycolor = 'rgb(204, 204, 204)',\n    ),\n)\n\nfig = go.Figure(data = flight_paths + airports, layout = layout)\npy.iplot(fig, filename = 'd3-flight-paths')\n```\n\n----------------------------------------\n\nTITLE: Creating Edge and Node Traces for Network Graph in Plotly\nDESCRIPTION: Sets up edge and node traces for a network graph visualization. Edges are represented as disconnected lines in a single trace, while nodes are represented as a scatter trace. Node positions are extracted from the graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nedge_trace = go.Scatter(\n    x=[],\n    y=[],\n    line=dict(width=0.5,color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\nfor edge in G.edges():\n    x0, y0 = G.node[edge[0]]['pos']\n    x1, y1 = G.node[edge[1]]['pos']\n    edge_trace['x'] += tuple([x0, x1, None])\n    edge_trace['y'] += tuple([y0, y1, None])\n\nnode_trace = go.Scatter(\n    x=[],\n    y=[],\n    text=[],\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        # colorscale options\n        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n        colorscale='YlGnBu',\n        reversescale=True,\n        color=[],\n        size=10,\n        colorbar=dict(\n            thickness=15,\n            title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line=dict(width=2)))\n\nfor node in G.nodes():\n    x, y = G.node[node]['pos']\n    node_trace['x'] += tuple([x])\n    node_trace['y'] += tuple([y])\n```\n\n----------------------------------------\n\nTITLE: Basic Symmetric Error Bars in Plotly\nDESCRIPTION: Creates a scatter plot with symmetric error bars using fixed values. The error bars are defined using a data array that specifies the size of errors for each point.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=dict(\n            type='data',\n            array=[1, 2, 3],\n            visible=True\n        )\n    )\n]\n\npy.iplot(data, filename='basic-error-bar')\n```\n\n----------------------------------------\n\nTITLE: Implementing Savitzky-Golay Filter for Data Smoothing with Plotly\nDESCRIPTION: Creates a visualization comparing original sine wave data, noisy sine wave data, and smoothed data using the Savitzky-Golay filter from SciPy's signal module. The plot demonstrates how the filter effectively reduces noise while preserving the underlying signal structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/smoothing/python-Smoothing.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\ny_noise = [y_item + np.random.choice([-1, 1])*np.random.random() for y_item in y]\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    marker=dict(\n        size=2,\n        color='rgb(0, 0, 0)',\n    ),\n    name='Sine'\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=y_noise,\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#5E88FC',\n        symbol='circle-open'\n    ),\n    name='Noisy Sine'\n)\n\ntrace3 = go.Scatter(\n    x=x,\n    y=signal.savgol_filter(y, 53, 3),\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#C190F0',\n        symbol='triangle-up'\n    ),\n    name='Savitzky-Golay'\n)\n\nlayout = go.Layout(\n    showlegend=True\n)\n\ndata = [trace1, trace2, trace3]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='smoothing-savitzky-golay-filter')\n```\n\n----------------------------------------\n\nTITLE: Creating Quiver Plot with Additional Points\nDESCRIPTION: Creates a more complex quiver plot that includes scatter points overlaid on the vector field. Uses gradient calculations and custom styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/quiver/quiver.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx,y = np.meshgrid(np.arange(-2, 2, .2),\n                  np.arange(-2, 2, .25))\nz = x*np.exp(-x**2 - y**2)\nv, u = np.gradient(z, .2, .2)\n\n# Create quiver figure\nfig = ff.create_quiver(x, y, u, v,\n                       scale=.25,\n                       arrow_scale=.4,\n                       name='quiver',\n                       line=dict(width=1))\n\n# Create points\npoints = go.Scatter(x=[-.7, .75], y=[0,0],\n                    mode='markers',\n                    marker=dict(size=12),\n                    name='points')\n\n# Add points to figure\nfig['data'].append(points)\n\npy.iplot(fig, filename='Quiver with Points')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Custom Sized Subplots in Python using Plotly\nDESCRIPTION: This snippet shows how to create multiple custom-sized subplots using Plotly's tools.make_subplots function. It creates a 5x2 grid with various subplot sizes and configurations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(x=[1, 2], y=[1, 2], name='(1,1)')\ntrace2 = go.Scatter(x=[1, 2], y=[1, 2], name='(1,2)')\ntrace3 = go.Scatter(x=[1, 2], y=[1, 2], name='(2,1)')\ntrace4 = go.Scatter(x=[1, 2], y=[1, 2], name='(3,1)')\ntrace5 = go.Scatter(x=[1, 2], y=[1, 2], name='(5,1)')\ntrace6 = go.Scatter(x=[1, 2], y=[1, 2], name='(5,2)')\n\nfig = tools.make_subplots(rows=5, cols=2,\n                          specs=[[{}, {'rowspan': 2}],\n                                 [{}, None],\n                                 [{'rowspan': 2, 'colspan': 2}, None],\n                                 [None, None],\n                                 [{}, {}]],\n                          print_grid=True)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 3, 1)\nfig.append_trace(trace5, 5, 1)\nfig.append_trace(trace6, 5, 2)\n\nfig['layout'].update(height=600, width=600, title='specs examples')\npy.iplot(fig, filename='multiple-custom-sized-subplots')\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Vox Logo in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a horizontal bar chart showing income percentile changes and add the Vox logo as an image. It uses Plotly's graph objects to define the chart data and layout, including image positioning and sizing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Bar(\n        x=['-35.3', '-15.9', '-15.8', '-15.6', '-11.1',\n           '-9.6', '-9.2', '-3.5', '-1.9', '-0.9',\n           '1.0', '1.4', '1.7', '2.0', '2.8', '6.2',\n           '8.1', '8.5', '8.5', '8.6', '11.4', '12.5',\n           '13.3', '13.7', '14.4', '17.5', '17.7',\n           '18.9', '25.1', '28.9', '41.4'],\n        y=['Designers, musicians, artists, etc.',\n           'Secretaries and administrative assistants',\n           'Waiters and servers', 'Archivists, curators, and librarians',\n           'Sales and related', 'Childcare workers, home car workers, etc.',\n           'Food preparation occupations', 'Janitors, maids, etc.',\n           'Healthcare technicians, assistants. and aides',\n           'Counselors, social and religious workers',\n           'Physical, life and social scientists', 'Construction',\n           'Factory assembly workers', 'Machinists, repairmen, etc.',\n           'Media and communications workers', 'Teachers',\n           'Mechanics, repairmen, etc.', 'Financial analysts and advisers',\n           'Farming, fishing and forestry workers',\n           'Truck drivers, heavy equipment operator, etc.','Accountants and auditors',\n           'Human resources, management analysts, etc.', 'Managers',\n           'Lawyers and judges', 'Engineers, architects and surveyors',\n           'Nurses', 'Legal support workers',\n           'Computer programmers and system admin.', 'Police officers and firefighters',\n           'Chief executives', 'Doctors, dentists and surgeons'],\n        marker=dict(\n            color='rgb(253, 240, 54)',\n            line=dict(color='rgb(0, 0, 0)',\n                      width=2)\n        ),\n        orientation='h',\n    )\n]\n\nlayout = go.Layout(\n    images=[dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=1, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n      )],\n    autosize=False, height=800, width=700,\n    bargap=0.15, bargroupgap=0.1,\n    barmode='stack', hovermode='x',\n    margin=dict(r=20, l=300,\n                  b=75, t=125),\n    title='Moving Up, Moving Down<br><i>Percentile change in income between childhood and adulthood</i>',\n    xaxis=dict(\n        dtick=10, nticks=0,\n        gridcolor='rgba(102, 102, 102, 0.4)',\n        linecolor='#000', linewidth=1,\n        mirror=True,\n        showticklabels=True, tick0=0, tickwidth=1,\n        title='<i>Change in percentile</i>',\n    ),\n    yaxis=dict(\n        anchor='x',\n        gridcolor='rgba(102, 102, 102, 0.4)', gridwidth=1,\n        linecolor='#000', linewidth=1,\n        mirror=True, showgrid=False,\n        showline=True, zeroline=False,\n        showticklabels=True, tick0=0,\n        type='category',\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Controls with @interact Decorator for Plotly\nDESCRIPTION: Creates an update function decorated with ipywidgets' @interact to generate interactive controls. The function updates a sine wave plot based on sliders for frequency (a), phase (b), and a dropdown for color selection. The batch_update context manager prevents multiple redraws during updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/Interact.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxs=np.linspace(0, 6, 100)\n\n@interact(a=(1.0, 4.0, 0.01), b=(0, 10.0, 0.01), color=['red', 'green', 'blue'])\ndef update(a=3.6, b=4.3, color='blue'):\n    with fig.batch_update():\n        scatt.x=xs\n        scatt.y=np.sin(a*xs-b)\n        scatt.line.color=color\n```\n\n----------------------------------------\n\nTITLE: Fitting a Gaussian Curve to a Peak in Stock Data using Python\nDESCRIPTION: This snippet defines a Gaussian function, fits it to a selected peak in the stock data, and plots the original data, detected peaks, and the fitted Gaussian curve using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef gaussian(x, mu, sig):\n    return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.)))\n\nfirst_index = indices[6]\nleft_gauss_bound = 1894\nright_gauss_bound = 1910\n\nx_values_1 = np.asarray(x[left_gauss_bound-left_endpt:right_gauss_bound-left_endpt])\ny_values_1 = np.asarray(y[left_gauss_bound-left_endpt:right_gauss_bound-left_endpt])\n\ngaussian_params_1 = peakutils.gaussian_fit(x_values_1, y_values_1, center_only=False)\ngaussian_y_1 = [gaussian(x_dummy, gaussian_params_1[1], 1.5) for x_dummy in x_values_1]\n\ntrace = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    marker=dict(\n        color='rgb(0,56,210)'\n    ),\n    name='Highlighted Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices + left_endpt,\n    y=[y[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ntrace3 = go.Scatter(\n    #x=x_values_1,\n    x=[item_x + 1.5 for item_x in x_values_1],\n    y=[item_y + 38.2 for item_y in gaussian_y_1],\n    mode='lines',\n    marker=dict(\n        size=2,\n        color='rgb(200,0,250)',\n    ),\n    name='Gaussian Fit'\n)\n\ndata = [trace, trace2, trace3]\npy.iplot(data, filename='stock-data-with-peaks-and-fit')\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Ranges in 3D Plotly Plot\nDESCRIPTION: Creates a 3D mesh plot with custom axis ranges using Plotly. Sets specific ranges for x, y, and z axes while configuring the number of ticks and plot dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-axes/3d-axes.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\nN = 70\ntrace1 = go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(244,22,100,0.6)'\n                  )\n\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        nticks=4, range = [-100,100],),\n                    yaxis = dict(\n                        nticks=4, range = [-50,100],),\n                    zaxis = dict(\n                        nticks=4, range = [-100,100],),),\n                    width=700,\n                    margin=dict(\n                    r=20, l=10,\n                    b=10, t=10)\n                  )\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig, filename='3d-axis-range')\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Rotated Labels using Plotly in Python\nDESCRIPTION: This code shows how to create a bar chart with rotated x-axis labels using Plotly in Python. It displays monthly data for two products with angled labels for better readability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Bar(\n    x=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    y=[20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],\n    name='Primary Product',\n    marker=dict(\n        color='rgb(49,130,189)'\n    )\n)\ntrace1 = go.Bar(\n    x=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    y=[19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],\n    name='Secondary Product',\n    marker=dict(\n        color='rgb(204,204,204)',\n    )\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    xaxis=dict(tickangle=-45),\n    barmode='group',\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='angled-text-bar')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Time Series Plot with Datetime Objects in Python using Plotly\nDESCRIPTION: This code demonstrates how to create a basic time series plot using pandas and datetime objects. It loads Apple stock data from a CSV file and plots the 'High' price values over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ndata = [go.Scatter(x=df.Date, y=df['AAPL.High'])]\n\npy.iplot(data, filename = 'time-series-simple')\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Area of a Polygon using Plotly\nDESCRIPTION: This snippet reuses the PolygonSort and PolygonArea functions to calculate and visualize the area of a more complex polygon using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/polygon-area/python_Polygon_Area.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef PolygonSort(corners):\n    n = len(corners)\n    cx = float(sum(x for x, y in corners)) / n\n    cy = float(sum(y for x, y in corners)) / n\n    cornersWithAngles = []\n    for x, y in corners:\n        an = (np.arctan2(y - cy, x - cx) + 2.0 * np.pi) % (2.0 * np.pi)\n        cornersWithAngles.append((x, y, an))\n    cornersWithAngles.sort(key = lambda tup: tup[2])\n    return map(lambda (x, y, an): (x, y), cornersWithAngles)\n\ndef PolygonArea(corners):\n    n = len(corners)\n    area = 0.0\n    for i in range(n):\n        j = (i + 1) % n\n        area += corners[i][0] * corners[j][1]\n        area -= corners[j][0] * corners[i][1]\n    area = abs(area) / 2.0\n    return area\n\ncorners = [(0, 0), (3, 0), (2, 10), (3, 4), (1, 5.5)]\ncorners_sorted = PolygonSort(corners)\narea = PolygonArea(corners_sorted)\n\nx = [corner[0] for corner in corners_sorted]\ny = [corner[1] for corner in corners_sorted]\n\nannotation = go.Annotation(\n    x=5.5,\n    y=8.0,\n    text='The area of the polygon is approximately %s' % (area),\n    showarrow=False\n)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    fill='tozeroy',\n)\n\nlayout = go.Layout(\n    annotations=[annotation],\n    xaxis=dict(\n        range=[-1, 9]\n    ),\n    yaxis=dict(\n        range=[-1, 12]\n    )\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='polygon-area')\n```\n\n----------------------------------------\n\nTITLE: Advanced Range Slider with Multiple Subplots\nDESCRIPTION: Creates a complex visualization with multiple vertically stacked subplots, each with its own y-axis and styling. Includes range slider and custom annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/range-slider/range-slider.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n     x = [\"2013-01-15\", \"2013-01-29\", \"2013-02-26\", \"2013-04-19\", \"2013-07-02\", \"2013-08-27\",\n         \"2013-10-22\", \"2014-01-20\", \"2014-05-05\", \"2014-07-01\", \"2015-02-09\", \"2015-04-13\",\n         \"2015-05-13\", \"2015-06-08\", \"2015-08-05\", \"2016-02-25\"], \n    y = [\"8\", \"3\", \"2\", \"10\", \"5\", \"5\", \"6\", \"8\", \"3\", \"3\", \"7\", \"5\", \"10\", \"10\", \"9\", \"14\"], \n    name = \"var0\", \n    text = [\"8\", \"3\", \"2\", \"10\", \"5\", \"5\", \"6\", \"8\", \"3\", \"3\", \"7\", \"5\", \"10\", \"10\", \"9\", \"14\"], \n    yaxis = \"y\", \n)\n\n# [Additional traces and layout code omitted for brevity]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Customizing 3D Axis Ticks\nDESCRIPTION: Demonstrates advanced tick formatting including custom tick labels, colors, fonts, and positioning for 3D plot axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-axes/3d-axes.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\nN = 50\ntrace1 = go.Mesh3d(x=(60*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(100,22,200,0.5)'\n                  )\n\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        ticktext= ['TICKS','MESH','PLOTLY','PYTHON'],\n                        tickvals= [0,50,75,-50]),\n                    yaxis = dict(\n                        nticks=5, tickfont=dict(\n                            color='green',\n                            size=12,\n                            family='Old Standard TT, serif',),\n                        ticksuffix='#'),\n                    zaxis = dict(\n                        nticks=4, ticks='outside',\n                        tick0=0, tickwidth=4),),\n                    width=700,\n                    margin=dict(\n                    r=10, l=10,\n                    b=10, t=10)\n                  )\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig, filename='3d-axis-tick-formatting')\n```\n\n----------------------------------------\n\nTITLE: Computing Eigendecomposition using Correlation Matrix with Standardized Data\nDESCRIPTION: Performs eigendecomposition on the correlation matrix of standardized data using NumPy. Calculates eigenvectors and eigenvalues to determine principal components.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncor_mat1 = np.corrcoef(X_std.T)\n\neig_vals, eig_vecs = np.linalg.eig(cor_mat1)\n\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)\n```\n\n----------------------------------------\n\nTITLE: Creating a Möbius Band Trisurf Plot with Plotly\nDESCRIPTION: Generates a 3D triangular surface representation of a Möbius band using parametric equations and Delaunay triangulation. The plot uses the Portland colormap to enhance visualization of the single-sided surface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as FF\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 24)\nv = np.linspace(-1, 1, 8)\nu,v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\ntp = 1 + 0.5*v*np.cos(u/2.)\nx = tp*np.cos(u)\ny = tp*np.sin(u)\nz = 0.5*v*np.sin(u/2.)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig1 = FF.create_trisurf(x=x, y=y, z=z,\n                         colormap=\"Portland\",\n                         simplices=simplices,\n                         title=\"Mobius Band\")\npy.iplot(fig1, filename=\"Mobius-Band\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Direct Labels using Plotly in Python\nDESCRIPTION: This code creates a bar chart with direct labels on the bars using Plotly in Python. It displays product sales data with labels showing the exact values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\n\ndata = [go.Bar(\n            x=x,\n            y=y,\n            text=y,\n            textposition = 'auto',\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )]\n\npy.iplot(data, filename='bar-direct-labels')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Cone Plot in Python using Plotly\nDESCRIPTION: This code creates a basic 3D cone plot using Plotly. It sets up a single cone with specified position and direction, and configures the camera angle for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [{\n    'type': 'cone',\n    'x': [1], 'y': [1], 'z': [1],\n    'u': [1], 'v': [1], 'w': [0]\n}]\n\nlayout = {\n    'scene': {\n      'camera': {\n        'eye': {'x': -0.76, 'y': 1.8, 'z': 0.92}\n      }\n    }\n}\n\nfig = {\"data\": data, \"layout\": layout}\npy.iplot(fig, filename='cone-basic', validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Streamline Plot in Python with Plotly\nDESCRIPTION: Creates a basic streamline plot using Plotly's figure_factory. The example generates a vector field from mathematical functions and visualizes it as streamlines with arrows indicating flow direction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/streamline/streamline.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nY, X = np.meshgrid(x, y)\nu = -1 - X**2 + Y\nv = 1 + X - Y**2\n\n# Create streamline figure\nfig = ff.create_streamline(x, y, u, v, arrow_scale=.1)\npy.iplot(fig, filename='Streamline Plot Example')\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Plot Tooltips in Plotly\nDESCRIPTION: Sets the ID column as tooltip text and configures the hoverinfo property to display this text on hover.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nscatter.text = cars_df['ID']\nscatter.hoverinfo = 'text'\n```\n\n----------------------------------------\n\nTITLE: Basic 2D Histogram with Bivariate Normal Distribution\nDESCRIPTION: Creates a basic 2D histogram using random data from a bivariate normal distribution using Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\n\ndata = [\n    go.Histogram2d(\n        x=x,\n        y=y\n    )\n]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Trisurf Plots with Custom Colorscales in Python using Plotly\nDESCRIPTION: This code generates a 3D surface plot using triangulation (trisurf) with custom colorscales. It demonstrates the use of Magma, Viridis, and Parula colorscales for visualizing a parametric surface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/matplotlib_colorscales/matplotlib-colorscales.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.tools import FigureFactory as FF\nimport plotly.graph_objs as go\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 24)\nv = np.linspace(-1, 1, 8)\nu,v = np.meshgrid(u, v)\nu = u.flatten()\nv = v.flatten()\n\ntp = 1 + 0.5*v*np.cos(u/2.)\nx = tp*np.cos(u)\ny = tp*np.sin(u)\nz = 0.5*v*np.sin(u/2.)\n\npoints2D = np.vstack([u, v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\ntrace1 = FF.create_trisurf(x=x, y=y, z=z,\n                           simplices=simplices, colormap=magma_rgb, plot_edges=False,\n                           title='Magma Colorscale for Trisurf Plot')\npy.iplot(trace1)\n```\n\nLANGUAGE: python\nCODE:\n```\ntrace2 = FF.create_trisurf(x=x, y=y, z=z,\n                           simplices=simplices, colormap=viridis_rgb, plot_edges=False,\n                           title='Viridis Colorscale for Trisurf Plot')\npy.iplot(trace2)\n```\n\nLANGUAGE: python\nCODE:\n```\ntrace3 = FF.create_trisurf(x=x, y=y, z=z,\n                          simplices=simplices, colormap=parula_rgb, plot_edges=False,\n                          title='Parula Colorscale for Trisurf Plot')\npy.iplot(trace3)\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data and Creating Basic Table\nDESCRIPTION: Demonstrates importing Bitcoin mining data from CSV, processing dates, and creating a formatted table with custom styling using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/table-subplots/table-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nimport re\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv')\n\n# remove min:sec:millisec from dates \nfor i, row in enumerate(df['Date']):\n    p = re.compile(' 00:00:00')\n    datetime = p.split(df['Date'][i])[0]\n    df.iloc[i, 1] = datetime\n\ntable = go.Table(\n    columnwidth=[0.4, 0.47, 0.48, 0.4, 0.4, 0.45, 0.5, 0.6],\n    header=dict(\n        values=['Date', 'Number<br>Transactions', 'Output<br>Volume (BTC)',\n                'Market<br>Price', 'Hash<br>Rate', 'Cost per<br>trans-USD',\n                'Mining<br>Revenue-USD', 'Trasaction<br>fees-BTC'],\n        font=dict(size=10),\n        line = dict(color='rgb(50, 50, 50)'),\n        align = 'left',\n        fill = dict(color='#d562be'),\n    ),\n    cells=dict(\n        values=[df[k].tolist() for k in df.columns[1:]],\n        line = dict(color='rgb(50, 50, 50)'),\n        align = 'left',\n        fill = dict(color='#f5f5fa')\n    )\n)\npy.iplot([table], filename='table-of-mining-data')\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Surface Plots with Custom Color Variable in Python using Plotly\nDESCRIPTION: This code demonstrates how to create a 3D surface plot colored by a variable other than z. It loads ring cyclide data, calculates distance from origin, and creates a side-by-side comparison of two coloring approaches using subplots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-coloring/3d_surface_coloring.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import tools\n\nimport copy\nimport json\nimport math\nimport urllib2\n\n# load ring cyclide data\nresponse = urllib2.urlopen('https://plotly.com/~empet/2381.json')\ndata_file = response.read()\nfig = json.loads(data_file)\n\ndata_original = fig['data'][0]        # trace0\ndata = copy.deepcopy(fig['data'])[0]  # trace1\n\nlx = len(data['z'])\nly = len(data['z'][0])\nout = []\n\ndef dist_origin(x, y, z):\n    return math.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)\n\nfor i in xrange(lx):\n    temp = []\n    for j in xrange(ly):\n        temp.append(\n            dist_origin(data['x'][i][j], data['y'][i][j], data['z'][i][j]))\n    out.append(temp)\n\ndata['surfacecolor'] = out     # sets surface-color to distance from the origin\n\nscene = dict(\n    xaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    yaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    zaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    cameraposition=[[0.2, 0.5, 0.5, 0.2], [0, 0, 0], 4.8]\n)\n\nfig = tools.make_subplots(rows=1, cols=2,\n                          specs=[[{'is_3d': True}, {'is_3d': True}]])\n\n# adding surfaces to subplots.\ndata_original['scene'] = 'scene1'\ndata_original['colorbar'] = dict(x=-0.07)\n\ndata['scene'] = 'scene2'\nfig.append_trace(data_original, 1, 1)\nfig.append_trace(data, 1, 2)\n\nfig['layout'].update(title='Ring Cyclide',\n                     height=800, width=950)\nfig['layout']['scene1'].update(scene)\nfig['layout']['scene2'].update(scene)\nfig['layout']['annotations'] = [\n    dict(x=0.1859205, y=0.95,     \n         xref='x', yref='y',\n         text='4th Dim Prop. to z',\n         showarrow=False),\n    dict(x=0.858, y=0.95,\n         xref='x', yref='y',\n         text='4th Dim Prop. to Distance from Origin',\n         showarrow=False)\n]\n\npy.iplot(fig, filename='surface-coloring')\n```\n\n----------------------------------------\n\nTITLE: Toggling Axes Lines, Ticks, Labels, and Autorange in Plotly Python\nDESCRIPTION: Creates a scatter plot with two traces and customizes the x and y axes by hiding grid lines, zero lines, tick marks, and tick labels while maintaining autorange. This example demonstrates how to create a clean plotting area by disabling various axis elements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    ),\n    yaxis=dict(\n        autorange=True,\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        ticks='',\n        showticklabels=False\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-booleans')\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout with IPython Widgets\nDESCRIPTION: Uses HBox and VBox containers to arrange the figure, sliders, image, and details widgets into a simple dashboard layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HBox, VBox\nVBox([fig,\n      opacity_slider,\n      HBox([image_widget, details])])\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Animation\nDESCRIPTION: Function call to create the animation with a unique timestamp-based identifier.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npy.icreate_animations(figure, 'gapminder_example'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Dropdown for Wind Farm Data Visualization in Plotly\nDESCRIPTION: Creates an interactive map visualization of wind farms with a styled dropdown menu for location selection. Uses pandas for data processing and implements custom styling for the dropdown menu.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf_wind = pd.read_csv('https://plotly.com/~datasets/2805.csv')\n\ndf_known_capacity = df_wind[ df_wind['total_cpcy'] != -99999.000 ]\ndf_sum = df_known_capacity.groupby('manufac')['total_cpcy'].sum().sort_values(ascending=False).to_frame()\n\ndf_farms = pd.read_csv('https://plotly.com/~jackp/17256.csv')\ndf_farms.set_index('Wind Farm', inplace=True)\n\nwind_farms=list([\n    dict(\n        args=[ { \n            'mapbox.center.lat':38,\n            'mapbox.center.lon':-94,\n            'mapbox.zoom':3,\n            'annotations[0].text':'All US wind turbines (scroll to zoom)'\n        } ],\n        label='USA',\n        method='relayout'\n    )\n])\n\nfor farm, row in df_farms.iterrows():\n    desc = []\n    for col in df_farms.columns:\n        if col not in ['DegMinSec','Latitude','Longitude']:\n            if str(row[col]) not in ['None','nan','']: \n                desc.append( col + ': ' + str(row[col]).strip(\"'\") )\n    desc.insert(0, farm)\n    wind_farms.append( \n        dict(\n            args=[ { \n                'mapbox.center.lat':row['Latitude'], \n                'mapbox.center.lon':float(str(row['Longitude']).strip(\"'\")), \n                'mapbox.zoom':9,\n                'annotations[0].text': '<br>'.join(desc)\n            } ],\n            label=' '.join(farm.split(' ')[0:2]),\n            method='relayout'\n        )\n    )\n\ndata = []\nfor mfr in list(df_sum.index):\n    if mfr != 'unknown':\n        trace = dict(\n            lat = df_wind[ df_wind['manufac'] == mfr ]['lat_DD'],\n            lon = df_wind[ df_wind['manufac'] == mfr ]['long_DD'],\n            name = mfr,\n            marker = dict(size = 4),\n            type = 'scattermapbox'\n        )\n    data.append(trace)\n```\n\n----------------------------------------\n\nTITLE: Creating Node Scatter Plot for Eurovision Graph in Python\nDESCRIPTION: Defines a scatter plot for visualizing graph nodes with appropriate styling and hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntrace2=go.Scatter(x=Xn,\n           y=Yn,\n           mode='markers',\n           name='',\n           marker=dict(symbol='circle',\n                         size=15,\n                         color=node_color,\n                         line=dict(color=line_color, width=0.5)\n                         ),\n           text=labels,\n           hoverinfo='text',\n           )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ternary Plot with Markers in Python using Plotly\nDESCRIPTION: Demonstrates how to create a basic ternary plot with markers using Plotly. The example visualizes data points with three components (journalist, developer, designer) and includes custom axis formatting and annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nrawData = [\n    {'journalist':75,'developer':25,'designer':0,'label':'point 1'},\n    {'journalist':70,'developer':10,'designer':20,'label':'point 2'},\n    {'journalist':75,'developer':20,'designer':5,'label':'point 3'},\n    {'journalist':5,'developer':60,'designer':35,'label':'point 4'},\n    {'journalist':10,'developer':80,'designer':10,'label':'point 5'},\n    {'journalist':10,'developer':90,'designer':0,'label':'point 6'},\n    {'journalist':20,'developer':70,'designer':10,'label':'point 7'},\n    {'journalist':10,'developer':20,'designer':70,'label':'point 8'},\n    {'journalist':15,'developer':5,'designer':80,'label':'point 9'},\n    {'journalist':10,'developer':10,'designer':80,'label':'point 10'},\n    {'journalist':20,'developer':10,'designer':70,'label':'point 11'},\n];\n\ndef makeAxis(title, tickangle): \n    return {\n      'title': title,\n      'titlefont': { 'size': 20 },\n      'tickangle': tickangle,\n      'tickfont': { 'size': 15 },\n      'tickcolor': 'rgba(0,0,0,0)',\n      'ticklen': 5,\n      'showline': True,\n      'showgrid': True\n    }\n\ndata = [{ \n    'type': 'scatterternary',\n    'mode': 'markers',\n    'a': [i for i in map(lambda x: x['journalist'], rawData)],\n    'b': [i for i in map(lambda x: x['developer'], rawData)],\n    'c': [i for i in map(lambda x: x['designer'], rawData)],\n    'text': [i for i in map(lambda x: x['label'], rawData)],\n    'marker': {\n        'symbol': 100,\n        'color': '#DB7365',\n        'size': 14,\n        'line': { 'width': 2 }\n    },\n    }]\n\nlayout = {\n    'ternary': {\n        'sum': 100,\n        'aaxis': makeAxis('Journalist', 0),\n        'baxis': makeAxis('<br>Developer', 45),\n        'caxis': makeAxis('<br>Designer', -45)\n    },\n    'annotations': [{\n      'showarrow': False,\n      'text': 'Simple Ternary Plot with Markers',\n        'x': 0.5,\n        'y': 1.3,\n        'font': { 'size': 15 }\n    }]\n}\n\nfig = {'data': data, 'layout': layout}\npy.iplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Horizontal Box Plots with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create grouped horizontal box plots using Plotly. It creates three horizontal box plots for different categories (kale, radishes, carrots) grouped by day, with custom colors for each category.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    {\n        'x': [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n        'y': ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2'],\n        'name':'kale',\n        'marker': {\n            'color': '#3D9970'\n        },\n        'boxmean': False,\n        'orientation': 'h',\n        \"type\": \"box\",\n    },\n    {\n        'x': [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n        'y': ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2'],\n        'name': 'radishes',\n        'marker':{\n            'color': '#FF4136',\n        },\n        'boxmean': False,\n        'orientation': 'h',\n        \"type\": \"box\",\n    },\n    {\n        'x': [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n        'y': ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2'],\n        'name':'carrots',\n        'marker': {\n            'color': '#FF851B',\n        },\n        'boxmean': False,\n        'orientation': 'h',\n        \"type\": \"box\",\n    }\n]\nlayout = {\n    'xaxis': {\n        'title': 'normalized moisture',\n        'zeroline': False,\n    },\n    'boxmode': 'group',\n}\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Customizing Streamtube Starting Position and Segments in Plotly\nDESCRIPTION: This example demonstrates how to create a more advanced streamtube plot with custom starting positions and maximum displayed segments. It visualizes wind data and customizes the aspect ratio and margins of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-streamtube/streamtube.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv').drop(['Unnamed: 0'],axis=1)\n\ndata = [go.Streamtube(\n    x = df['x'],\n    y = df['y'],\n    z = df['z'],\n    u = df['u'],\n    v = df['v'],\n    w = df['w'],\n    starts = dict(\n        x = [80] * 16,\n        y = [20,30,40,50] * 4,\n        z = [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]\n    ),\n    sizeref = 0.3,\n    colorscale = 'Portland',\n    showscale = False,\n    maxdisplayed = 3000\n)]\n\nlayout = go.Layout(\n    scene = dict(\n        aspectratio = dict(\n            x = 2,\n            y = 1,\n            z = 0.3\n        )\n    ),\n    margin = dict(\n        t = 20,\n        b = 20,\n        l = 20,\n        r = 20\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"streamtube wind\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Parametric Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic 3D parametric plot using Plotly's Python library. It uses numpy to generate the data and Plotly's graph objects to create the surface plot with customized layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-parametric/3d-parametric.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ns = np.linspace(0, 2 * np.pi, 240)\nt = np.linspace(0, np.pi, 240)\ntGrid, sGrid = np.meshgrid(s, t)\n\nr = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)\nx = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)\ny = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)\nz = r * np.cos(tGrid)                  # z = r*cos(t)\n\nsurface = go.Surface(x=x, y=y, z=z)\ndata = [surface]\n\nlayout = go.Layout(\n    title='Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Parametric_plot')\n```\n\n----------------------------------------\n\nTITLE: Animating Frenet Frame on Planar Curve with Plotly in Python\nDESCRIPTION: This snippet creates an animation of a moving Frenet frame along a planar curve using Plotly. It calculates the tangent and normal vectors, sets up the layout with a play button, and creates frames for the animation of the moving frame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\nimport numpy as np\n\ninit_notebook_mode(connected=True)\n\nN=50\ns=np.linspace(-1,1,N)\nvx=1+2*s\nvy=1-2*s #v=(vx, vy) is the velocity\nspeed=np.sqrt(vx**2+vy**2)\nux=vx/speed #(ux, uy) unit tangent vector, (-uy, ux) unit normal vector\nuy=vy/speed\n\nxend=xx+ux #end coordinates for the unit tangent vector at (xx, yy)\nyend=yy+uy\n\nxnoe=xx-uy #end coordinates for the unit normal vector at (xx,yy)\nynoe=yy+ux\n\n\ndata=[dict(x=x, y=y,\n           name='frame',\n           mode='lines', \n           line=dict(width=2, color='blue')),\n      dict(x=x, y=y,\n           name='curve',\n           mode='lines', \n           line=dict(width=2, color='blue'))\n    ]\n\nlayout=dict(width=600, height=600,\n            xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),\n            yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),\n            title='Moving Frenet Frame Along a Planar Curve', hovermode='closest',\n            updatemenus= [{'type': 'buttons',\n                           'buttons': [{'label': 'Play',\n                                        'method': 'animate',\n                                        'args': [None]}]}])\n\nframes=[dict(data=[dict(x=[xx[k], xend[k], None, xx[k], xnoe[k]], \n                        y=[yy[k], yend[k], None, yy[k], ynoe[k]], \n                        mode='lines', \n                        line=dict(color='red', width=2))\n                  ]) for k in range(N)]    \n          \nfigure2=dict(data=data, layout=layout, frames=frames)          \niplot(figure2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-Pass FFT Filter in Python\nDESCRIPTION: This code implements a low-pass FFT filter on the wind speed data. It defines the cutoff frequency, transition band, and applies the filter using NumPy functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfc = 0.1\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1\nn = np.arange(N)\n \nsinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))\nwindow = 0.42 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) + 0.08 * np.cos(4 * np.pi * n / (N - 1))\nsinc_func = sinc_func * window\nsinc_func = sinc_func / np.sum(sinc_func)\n\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, sinc_func)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='Low-Pass Filter',\n    marker=dict(\n        color='#C54C82'\n    )\n)\n\nlayout = go.Layout(\n    title='Low-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-low-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Continuous Error Bars with Shaded Areas in Plotly\nDESCRIPTION: This code creates a line chart with continuous error bars represented as shaded areas for three different data series. It demonstrates how to use the fill='tozerox' parameter to create shaded regions and how to combine multiple traces for both the error regions and the main lines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/continuous-error-bars/cont-error-bars.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx_rev = x[::-1]\n\n# Line 1\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ny1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1_lower = y1_lower[::-1]\n\n# Line 2\ny2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]\ny2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]\ny2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]\ny2_lower = y2_lower[::-1]\n\n# Line 3\ny3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]\ny3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]\ny3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]\ny3_lower = y3_lower[::-1]\n\ntrace1 = go.Scatter(\n    x=x+x_rev,\n    y=y1_upper+y1_lower,\n    fill='tozerox',\n    fillcolor='rgba(0,100,80,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    showlegend=False,\n    name='Fair',\n)\ntrace2 = go.Scatter(\n    x=x+x_rev,\n    y=y2_upper+y2_lower,\n    fill='tozerox',\n    fillcolor='rgba(0,176,246,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    name='Premium',\n    showlegend=False,\n)\ntrace3 = go.Scatter(\n    x=x+x_rev,\n    y=y3_upper+y3_lower,\n    fill='tozerox',\n    fillcolor='rgba(231,107,243,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    showlegend=False,\n    name='Ideal',\n)\ntrace4 = go.Scatter(\n    x=x,\n    y=y1,\n    line=dict(color='rgb(0,100,80)'),\n    mode='lines',\n    name='Fair',\n)\ntrace5 = go.Scatter(\n    x=x,\n    y=y2,\n    line=dict(color='rgb(0,176,246)'),\n    mode='lines',\n    name='Premium',\n)\ntrace6 = go.Scatter(\n    x=x,\n    y=y3,\n    line=dict(color='rgb(231,107,243)'),\n    mode='lines',\n    name='Ideal',\n)\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\n\nlayout = go.Layout(\n    paper_bgcolor='rgb(255,255,255)',\n    plot_bgcolor='rgb(229,229,229)',\n    xaxis=dict(\n        gridcolor='rgb(255,255,255)',\n        range=[1,10],\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        tickcolor='rgb(127,127,127)',\n        ticks='outside',\n        zeroline=False\n    ),\n    yaxis=dict(\n        gridcolor='rgb(255,255,255)',\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        tickcolor='rgb(127,127,127)',\n        ticks='outside',\n        zeroline=False\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename= 'shaded_lines')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with Plotly in Python\nDESCRIPTION: This code creates a simple bar chart using Plotly in Python. It displays the population of three animal species using bars.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Bar(\n            x=['giraffes', 'orangutans', 'monkeys'],\n            y=[20, 14, 23]\n    )]\n\npy.iplot(data, filename='basic-bar')\n```\n\n----------------------------------------\n\nTITLE: Generating a Grouped Bar Chart with Direct Labels using Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a grouped bar chart with direct labels using Plotly in Python. It compares two sets of product data with labels on each bar.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = ['Product A', 'Product B', 'Product C']\ny = [20, 14, 23]\ny2 = [16,12,27]\n\ntrace1 = go.Bar(\n    x=x,\n    y=y,\n    text=y,\n    textposition = 'auto',\n    marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\n\ntrace2 = go.Bar(\n    x=x,\n    y=y2,\n    text=y2,\n    textposition = 'auto',\n    marker=dict(\n        color='rgb(58,200,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5),\n        ),\n    opacity=0.6\n)\n\ndata = [trace1,trace2]\n\npy.iplot(data, filename='grouped-bar-direct-labels')\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Heatmap with NumPy Random Data in Plotly\nDESCRIPTION: Demonstrates how to create an annotated heatmap using NumPy to generate random data, with rounded values as annotations and smaller font size for better readability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport numpy as np\n\nz = np.random.randn(20, 20)\nz_text = np.around(z, decimals=2) # Only show rounded value (full value on hover)\n\nfig = ff.create_annotated_heatmap(z, annotation_text=z_text, colorscale='Greys', hoverinfo='z')\n\n# Make text size smaller\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 8\n    \npy.iplot(fig, filename='annotated_heatmap_numpy')\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Modebar Buttons in Plotly\nDESCRIPTION: Demonstrates how to remove specific buttons from the mode bar using the modeBarButtonsToRemove configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {\n    'modeBarButtonsToRemove': ['sendDataToCloud','hoverCompareCartesian']\n}\n\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Subcategory Axes with Box Plots in Plotly Python\nDESCRIPTION: Creates a complex layout with horizontal box plots organized by subcategories with custom annotations, shapes, and axis settings. This example demonstrates how to implement grouped categorical data visualization with advanced layout customization for hierarchical data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Box(\n  x = [2, 3, 1, 5],\n  y = [\"A\", \"A\", \"A\", \"A\"],\n  line = dict(color = 'gray'),\n  name = \"A\",\n  orientation = \"h\"\n)\n\ntrace2 = go.Box(\n  x = [8, 3, 6, 5],\n  y = [\"B\", \"B\", \"B\", \"B\"],\n  line = dict(color = 'gray'),\n  name = \"B\",\n  orientation = \"h\"\n)\n\ntrace3 = go.Box(\n  x = [2, 3, 2, 5],\n  y = [\"C\", \"C\", \"C\", \"C\"],\n  line = dict(color = 'gray'),\n  name = \"C\",\n  orientation = \"h\"\n)\n\ntrace4 = go.Box(\n  x = [7.5, 3, 6, 4],\n  y = [\"D\", \"D\", \"D\", \"D\"],\n  line = dict(color = 'gray'),\n  name = \"D\",\n  orientation = \"h\"\n)\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n  annotations = [\n    dict(\n      x = -0.0951769406393,\n      y = 1.06972670892,\n      showarrow = False,\n      text = \"Subgroup\",\n      xref = \"paper\",\n      yref = \"paper\"\n    ),\n    dict(\n      x = -0.235516552511,\n      y = 1.07060587474,\n      showarrow = False,\n      text = \"Group\",\n      xref = \"paper\",\n      yref = \"paper\"\n    ),\n    dict(\n      x = -0.235516552511,\n      y = 0.922906017856,\n      showarrow = False,\n      text = \"One\",\n      xref = \"paper\",\n      yref = \"paper\"\n    ),\n    dict(\n      x = -0.235516552511,\n      y = 0.375,\n      showarrow = False,\n      text = \"Two\",\n      xref = \"paper\",\n      yref = \"paper\"\n    )\n  ],\n  height = 400,\n  hovermode = \"closest\",\n  legend = dict(\n    x = 0.986145833333,\n    y = 0.936263886049\n  ),\n  margin = dict(\n    r = 10,\n    t = 25,\n    b = 40,\n    l = 110\n  ),\n  shapes = [\n    dict(\n      line = dict(\n        color = \"rgba(68, 68, 68, 0.5)\",\n        width = 1\n      ),\n      type = \"line\",\n      x0 = -0.3,\n      x1 = 1.2,\n      xref = \"paper\",\n      y0 = 0.5,\n      y1 = 0.5,\n      yref = \"paper\"\n    ),\n    dict(\n      line = dict(\n        color = \"rgba(68, 68, 68, 0.63)\",\n        width = 1\n      ),\n      type = \"line\",\n      x0 = -0.3,\n      x1 = 1.2,\n      xref = \"paper\",\n      y0 = 1,\n      y1 = 1,\n      yref = \"paper\"\n    )\n  ],\n  showlegend = True,\n  title = \"\",\n  width = 600,\n  xaxis = dict(\n    domain = [0, 1]\n  ),\n  yaxis = dict(\n    autorange = True,\n    categoryorder = \"category descending\",\n    domain = [0, 1],\n    range = [-0.5, 3.5],\n    showline = True,\n    title = \"\",\n    type = \"category\"\n  )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = 'subcategory-axes')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Facial Recognition Overlays with Plotly and dlib in Python\nDESCRIPTION: This code snippet demonstrates how to create interactive facial recognition overlays using Plotly and dlib. It detects human and dog faces in an image, then creates a Plotly visualization with bounding boxes around the detected faces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport dlib\n\n\n#load dlib's pretrained face detector\ncnn_human_detector = dlib.cnn_face_detection_model_v1('mmod_human_face_detector.dat')\n\n#choose a file in your current directory or download https://raw.githubusercontent.com/michaelbabyn/plot_data/master/beethoven.jpg\nf = 'beethoven.jpg'\nimg = dlib.load_rgb_image(f)\n\nhuman_dets = cnn_human_detector(img,1)\n\n#load dlib's pretrained dog-face detector\ncnn_dog_detector = dlib.cnn_face_detection_model_v1('mmod_dog_hipsterizer.dat')\n\ndog_dets = cnn_dog_detector(img, 1)\n\nlayout= go.Layout(\n    xaxis = go.layout.XAxis(\n        showticklabels = False,\n        showgrid=False,\n        zeroline=False,\n        range = [0, img.shape[1]]\n    ),\n    yaxis = go.layout.YAxis(\n        showticklabels = False,\n        showgrid=False,\n        zeroline=False,\n        range = [0, img.shape[0]],\n        scaleanchor = 'x'\n        ),\n    autosize=False,\n    height=img.shape[0], \n    width=img.shape[1],\n    margin = {'l': 0, 'r': 0, 't': 0, 'b': 0},\n    images= [dict(\n        source= \"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/beethoven.jpg\",\n        x=0,\n        sizex=img.shape[1],\n        y=img.shape[0],\n        sizey=img.shape[0],\n        xref=\"x\",\n        yref=\"y\",\n        opacity=1.0,\n        layer=\"below\",\n        sizing=\"stretch\"\n     )]\n)\n\nhumans=[\n    go.Scatter(\n        x=[d.rect.left(), d.rect.right(), d.rect.right(), d.rect.left(), d.rect.left()],\n        y=[img.shape[0] - d.rect.top(),img.shape[0] - d.rect.top(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.top()],\n        hoveron = 'fills',\n        name = 'Human #{0}'.format(i+1),\n        text = 'confidence: {:.2f}'.format(d.confidence),\n        mode='lines',\n        line = dict(width=4,color='red'),\n        showlegend = False\n        ) \n    for i,d in enumerate(human_dets)]\n\ndogs = [\n    go.Scatter(\n        x=[d.rect.left(),d.rect.right(),d.rect.right(),d.rect.left(),d.rect.left()],\n        y=[img.shape[0] - d.rect.top(),img.shape[0] - d.rect.top(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.top()],\n        hoveron = 'fills',\n        name = 'Dog #{0}'.format(i+1),\n        text = 'confidence: {:.2f}'.format(d.confidence),\n        mode='lines',\n        line = dict(width=4,color='blue'),\n        showlegend = False\n        ) \n    for i,d in enumerate(dog_dets)]\n\npy.iplot(dict(data=humans+dogs,layout=layout),filename='EXAMPLES/facial_rec')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Streamtube Plot with Plotly in Python\nDESCRIPTION: This code creates a basic 3D streamtube visualization using Plotly's graph objects. It loads data from a CSV file and configures the streamtube properties including size reference, color scale, and camera position.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-streamtube/streamtube.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv')\n\ndata = [go.Streamtube(\n    x = df['x'],\n    y = df['y'],\n    z = df['z'],\n    u = df['u'],\n    v = df['v'],\n    w = df['w'],\n    sizeref = 0.5,\n    colorscale = 'Blues', \n    cmin = 0,\n    cmax = 3\n    )\n]\n\nlayout = go.Layout(\n    scene = dict(\n      camera = dict(\n        eye = dict(\n          x = -0.7243612458865182,\n          y = 1.9269804254717962,\n          z = 0.6704828299861716\n        )\n      )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='streamtube-basic')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Alcohol Consumption Dataset\nDESCRIPTION: Imports a CSV dataset containing alcohol consumption by country in 2010 and creates a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='alcohol-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Implementing Diffuse Lighting on Surface Plots\nDESCRIPTION: Creates two surface plots with different diffuse lighting values. Diffuse lighting controls how light is reflected at multiple angles, ranging from 0 to 1.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig = tls.make_subplots(rows=1, cols=2,specs=[[{'is_3d': True},{'is_3d': True} ]])\ntrace1 = go.Surface(z=Z1, colorscale='Viridis', lighting=dict(diffuse=0.1))\ntrace2 = go.Surface(z=Z2, colorscale='Viridis',showscale=False,lighting=dict(diffuse=0.9))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Ribbon Colors in Chord Diagram\nDESCRIPTION: Example of customizing colors for specific ribbons by overriding the default color assignment with the color of the destination ideogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nribbon_color[0][4]=ideo_colors[4]\nribbon_color[1][2]=ideo_colors[2]\nribbon_color[2][3]=ideo_colors[3]\nribbon_color[2][4]=ideo_colors[4]\n```\n\n----------------------------------------\n\nTITLE: Implementing Reversed Axes in Plotly Python\nDESCRIPTION: Creates a simple scatter plot with a reversed x-axis, where values increase from right to left rather than the conventional left to right. This example demonstrates how to invert an axis direction using the autorange property.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2],\n        y=[1, 2]\n    )\n]\nlayout = go.Layout(\n    xaxis=dict(\n        autorange='reversed'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-reversed')\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Subplot in Plotly Python\nDESCRIPTION: Demonstrates how to create a basic subplot with two scatter plots side by side using Plotly's tools.make_subplots() function. Each plot contains markers with text annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6],\n    mode='markers+text',\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='bottom center'\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    mode='markers+text',\n    text=['Text D', 'Text E', 'Text F'],\n    textposition='bottom center'\n)\n\nfig = tools.make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout'].update(height=600, width=800, title='i <3 annotations and subplots')\npy.iplot(fig, filename='simple-subplot-with-annotations')\n```\n\n----------------------------------------\n\nTITLE: Plotting the Interactive Tree Diagram\nDESCRIPTION: This final snippet combines all the previous elements to create and display the interactive tree plot using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata=go.Data([lines, dots])\nfig=dict(data=data, layout=layout)\nfig['layout'].update(annotations=make_annotations(position, v_label))\npy.iplot(fig, filename='Tree-Reingold-Tilf')\n```\n\n----------------------------------------\n\nTITLE: Styling Outliers in Box Plots with Plotly Python\nDESCRIPTION: This example demonstrates various ways to style outliers in box plots. It creates four different box plots with different outlier styling options, including showing all points, only whiskers, suspected outliers, and whiskers with outliers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Box(\n    y = [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, \n       8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name = \"All Points\",\n    jitter = 0.3,\n    pointpos = -1.8,\n    boxpoints = 'all',\n    marker = dict(\n        color = 'rgb(7,40,89)'),\n    line = dict(\n        color = 'rgb(7,40,89)')\n)\n\ntrace1 = go.Box(\n    y = [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, \n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name = \"Only Whiskers\",\n    boxpoints = False,\n    marker = dict(\n        color = 'rgb(9,56,125)'),\n    line = dict(\n        color = 'rgb(9,56,125)')\n)\n\ntrace2 = go.Box(\n    y = [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, \n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name = \"Suspected Outliers\",\n    boxpoints = 'suspectedoutliers',\n    marker = dict(\n        color = 'rgb(8,81,156)',\n        outliercolor = 'rgba(219, 64, 82, 0.6)',\n        line = dict(\n            outliercolor = 'rgba(219, 64, 82, 0.6)',\n            outlierwidth = 2)),\n    line = dict(\n        color = 'rgb(8,81,156)')\n)\n\ntrace3 = go.Box(\n    y = [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, \n        8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n    name = \"Whiskers and Outliers\",\n    boxpoints = 'outliers',\n    marker = dict(\n        color = 'rgb(107,174,214)'),\n    line = dict(\n        color = 'rgb(107,174,214)')\n)\n\ndata = [trace0,trace1,trace2,trace3]\n\nlayout = go.Layout(\n    title = \"Box Plot Styling Outliers\"\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"Box Plot Styling Outliers\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple 3D Surface Plots in Plotly\nDESCRIPTION: Demonstrates how to create and display multiple 3D surface plots with different z-values and opacity settings in a single visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface/3d-surface.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nz1 = [\n    [8.83,8.89,8.81,8.87,8.9,8.87],\n    [8.89,8.94,8.85,8.94,8.96,8.92],\n    [8.84,8.9,8.82,8.92,8.93,8.91],\n    [8.79,8.85,8.79,8.9,8.94,8.92],\n    [8.79,8.88,8.81,8.9,8.95,8.92],\n    [8.8,8.82,8.78,8.91,8.94,8.92],\n    [8.75,8.78,8.77,8.91,8.95,8.92],\n    [8.8,8.8,8.77,8.91,8.95,8.94],\n    [8.74,8.81,8.76,8.93,8.98,8.99],\n    [8.89,8.99,8.92,9.1,9.13,9.11],\n    [8.97,8.97,8.91,9.09,9.11,9.11],\n    [9.04,9.08,9.05,9.25,9.28,9.27],\n    [9,9.01,9,9.2,9.23,9.2],\n    [8.99,8.99,8.98,9.18,9.2,9.19],\n    [8.93,8.97,8.97,9.18,9.2,9.18]\n]\n\nz2 = [[zij+1 for zij in zi] for zi in z1]\nz3 = [[zij-1 for zij in zi] for zi in z1]\n\ndata = [\n    go.Surface(z=z1),\n    go.Surface(z=z2, showscale=False, opacity=0.9),\n    go.Surface(z=z3, showscale=False, opacity=0.9)\n\n]\n\npy.iplot(data,filename='python-docs/multiple-surfaces')\n```\n\n----------------------------------------\n\nTITLE: Creating a Colored and Styled Bar Chart with Plotly in Python\nDESCRIPTION: This code creates a more advanced, colored, and styled bar chart using Plotly in Python. It demonstrates various styling options including colors, fonts, and layout customizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    x=[1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n       2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n    y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,\n       350, 430, 474, 526, 488, 537, 500, 439],\n    name='Rest of world',\n    marker=dict(\n        color='rgb(55, 83, 109)'\n    )\n)\ntrace2 = go.Bar(\n    x=[1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n       2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n    y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n       299, 340, 403, 549, 499],\n    name='China',\n    marker=dict(\n        color='rgb(26, 118, 255)'\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title='US Export of Plastic Scrap',\n    xaxis=dict(\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='USD (millions)',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15,\n    bargroupgap=0.1\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='style-bar')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Diabetes Dataset with Plotly\nDESCRIPTION: Loads the diabetes dataset from a CSV file and creates a table to display the first few rows using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndfd = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv')\n\ndf_table = ff.create_table(dfd.head())\npy.iplot(df_table, filename='diabetes-head')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Histogram in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic histogram visualization using Plotly and NumPy. It generates 500 random data points from a normal distribution and displays them as a histogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ndata = [go.Histogram(x=x)]\n\npy.iplot(data, filename='basic histogram')\n```\n\n----------------------------------------\n\nTITLE: Histogram Binning with Plotly in Python\nDESCRIPTION: This example shows how to create a histogram with customizable binning using Plotly in Python. It includes a dropdown menu to change the bin size and demonstrates date-based binning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\nimport pandas as pd\n\noff.init_notebook_mode(connected=False)\n\ndf = pd.read_csv(\"https://plotly.com/~public.health/17.csv\")\n\ndata = [dict(\n  x = df['date'],\n  autobinx = False,\n  autobiny = True,\n  marker = dict(color = 'rgb(68, 68, 68)'),\n  name = 'date',\n  type = 'histogram',\n  xbins = dict(\n    end = '2016-12-31 12:00',\n    size = 'M1',\n    start = '1983-12-31 12:00'\n  )\n)]\n\nlayout = dict(\n  paper_bgcolor = 'rgb(240, 240, 240)',\n  plot_bgcolor = 'rgb(240, 240, 240)',\n  title = '<b>Shooting Incidents</b>',\n  xaxis = dict(\n    title = '',\n    type = 'date'\n  ),\n  yaxis = dict(\n    title = 'Shootings Incidents',\n    type = 'linear'\n  ),\n  updatemenus = [dict(\n        x = 0.1,\n        y = 1.15,\n        xref = 'paper',\n        yref = 'paper',\n        yanchor = 'top',\n        active = 1,\n        showactive = True,\n        buttons = [\n        dict(\n            args = ['xbins.size', 'D1'],\n            label = 'Day',\n            method = 'restyle',\n        ), dict(\n            args = ['xbins.size', 'M1'],\n            label = 'Month',\n            method = 'restyle',\n        ), dict(\n            args = ['xbins.size', 'M3'],\n            label = 'Quater',\n            method = 'restyle',\n        ), dict(\n            args = ['xbins.size', 'M6'],\n            label = 'Half Year',\n            method = 'restyle',\n        ), dict(\n            args = ['xbins.size', 'M12'],\n            label = 'Year',\n            method = 'restyle',\n        )]\n  )]\n)\n\noff.iplot({'data': data,'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cufflinks with Plotly and Pandas in Python\nDESCRIPTION: This snippet shows the imports and initialization steps for setting up Plotly, Cufflinks, Pandas, and NumPy. It installs necessary packages and verifies the version of Cufflinks being used. Dependencies include Plotly, Cufflinks, Pandas, and NumPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport cufflinks as cf\nimport pandas as pd\nimport numpy as np\nprint cf.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Fully Styled Box Plots with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create fully styled box plots using Plotly. It creates box plots for NBA players' scores with custom colors, jitter, whisker width, and other styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx_data = ['Carmelo Anthony', 'Dwyane Wade',\n          'Deron Williams', 'Brook Lopez',\n          'Damian Lillard', 'David West',]\n\ny0 = np.random.randn(50)-1\ny1 = np.random.randn(50)+1\ny2 = np.random.randn(50)\ny3 = np.random.randn(50)+2\ny4 = np.random.randn(50)-2\ny5 = np.random.randn(50)+3\n\ny_data = [y0,y1,y2,y3,y4,y5]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Points Scored by the Top 9 Scoring NBA Players in 2012',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Error Bars in Plotly\nDESCRIPTION: Implements a scatter plot with asymmetric error bars where upper and lower error values can differ. Uses separate arrays for upper and lower error values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=dict(\n            type='data',\n            symmetric=False,\n            array=[0.1, 0.2, 0.1, 0.1],\n            arrayminus=[0.2, 0.4, 1, 0.2]\n        )\n    )\n]\npy.iplot(data, filename='error-bar-asymmetric-array')\n```\n\n----------------------------------------\n\nTITLE: Applying Lighting Effects to 3D Cones in Python using Plotly\nDESCRIPTION: This code showcases various lighting effects applied to 3D cones using Plotly. It creates multiple cones with different lighting parameters such as ambient, diffuse, specular, roughness, and fresnel.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [{\n      \"type\": \"cone\",\n      \"name\": \"base\",\n      \"x\": [1, 1, 1],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False\n    },{\n      \"type\": \"cone\",\n      \"name\": \"opacity:0.3\",\n      \"x\": [2, 2, 2],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"opacity\": 0.3\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.ambient:0.3\",\n      \"x\": [3, 3, 3],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lighting\": {\"ambient\": 0.3}\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.diffuse:0.3\",\n      \"x\": [4, 4, 4],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lighting\": {\"diffuse\": 0.3}\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.specular:2\",\n      \"x\": [5, 5, 5],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lighting\": {\"specular\": 2}\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.roughness:1\",\n      \"x\": [6, 6, 6],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lighting\": {\"roughness\": 1}\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.fresnel:2\",\n      \"x\": [7, 7, 7],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lighting\": {\"fresnel\": 2}\n    },{\n      \"type\": \"cone\",\n      \"name\": \"lighting.position x:0,y:0,z:1e5\",\n      \"x\": [8, 8, 8],\n      \"y\": [1, 2, 3],\n      \"z\": [1, 1, 1],\n      \"u\": [1, 2, 3],\n      \"v\": [1, 1, 2],\n      \"w\": [4, 4, 1],\n      \"hoverinfo\": \"u+v+w+name\",\n      \"showscale\": False,\n      \"lightposition\": {\"x\": 0, \"y\": 0, \"z\": 1e5}\n    }\n]\n\nlayout = {\n    \"scene\": {\n      \"aspectmode\": \"data\",\n      \"camera\": {\n        \"eye\": {\"x\": 0.05, \"y\": -2.6, \"z\": 2}\n      }\n    },\n    \"margin\": {\"t\": 0, \"b\": 0, \"l\": 0, \"r\": 0}\n}\n\nfig = {\"data\": data, \"layout\": layout}\npy.iplot(fig, filename=\"cone-lighting\", validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Random Data in Plotly\nDESCRIPTION: Generates a scatter plot with 100 random points of varying color and size using Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nimport plotly.io as pio\n\nimport os\nimport numpy as np\n```\n\nLANGUAGE: python\nCODE:\n```\ninit_notebook_mode(connected=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nN = 100\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\nsz = np.random.rand(N)*30\n\nfig = go.Figure()\nfig.add_scatter(x=x,\n                y=y,\n                mode='markers',\n                marker={'size': sz,\n                        'color': colors,\n                        'opacity': 0.6,\n                        'colorscale': 'Viridis'\n                       })\niplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Circles Positioned Relative to Axes in Plotly\nDESCRIPTION: This code creates a visualization with two circles - an unfilled circle and a filled circle - positioned relative to the x and y axes. The example demonstrates how to define circle shapes with different styling options like fill color and border.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1.5, 3.5],\n    y=[0.75, 2.5],\n    text=['Unfilled Circle', \n          'Filled Circle'],\n    mode='text',\n)\ndata = [trace0]\n\nlayout = {\n    'xaxis': {\n        'range': [0, 4.5],\n        'zeroline': False,\n    },\n    'yaxis': {\n        'range': [0, 4.5]\n    },\n    'width': 800,\n    'height': 800,\n    'shapes': [\n        # unfilled circle\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'x0': 1,\n            'y0': 1,\n            'x1': 3,\n            'y1': 3,\n            'line': {\n                'color': 'rgba(50, 171, 96, 1)',\n            },\n        },\n        # filled circle\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'fillcolor': 'rgba(50, 171, 96, 0.7)',\n            'x0': 3,\n            'y0': 3,\n            'x1': 4,\n            'y1': 4,\n            'line': {\n                'color': 'rgba(50, 171, 96, 1)',\n            },\n        },\n    ]\n}\nfig = {\n    'data': data,\n    'layout': layout,\n}\npy.iplot(fig, filename='shapes-circle')\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Heatmap Figure in Python with Plotly\nDESCRIPTION: This code creates the animated heatmap figure using Plotly. It sets up the data, layout, and frames for the animation, referencing the previously created grid.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/heatmap/heatmap.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata=[dict(type='heatmap',\n           xsrc=grid.get_column_reference('x'),\n           ysrc=grid.get_column_reference('y'), \n           zsrc=grid.get_column_reference('z1'), \n           zmin=0,\n           zmax=zvmax[6],\n           zsmooth='best', \n           colorscale=colorscale, \n           colorbar=dict(thickness=20, ticklen=4))]\n\ntitle='Contour plot for bivariate normal distribution'+\\\n'<br> N(m=[0,0], sigma=[1,1], rho in (-1, 1))'\n\nlayout = dict(title=title,\n              autosize=False,\n              height=600,\n              width=600,\n              hovermode='closest',\n              xaxis=dict(range=[-3, 3], autorange=False),\n              yaxis=dict(range=[-3, 3], autorange=False),\n              showlegend=False,\n              updatemenus=[dict(type='buttons', showactive=False,\n                                y=1, x=-0.05, xanchor='right',\n                                yanchor='top', pad=dict(t=0, r=10),\n                                buttons=[dict(label='Play',\n                                              method='animate',\n                                              args=[None,\n                                                    dict(frame=dict(duration=100, \n                                                                    redraw=True),\n                                                    transition=dict(duration=0),\n                                                    fromcurrent=True,\n                                                    mode='immediate')])])])\n\nframes=[dict(data=[dict(zsrc=grid.get_column_reference('z{}'.format(k + 1)),\n                        zmax=zvmax[k])],\n                        traces=[0],\n                        name='frame{}'.format(k),\n                        ) for k in range(len(correls))]\n          \n          \nfig=dict(data=data, layout=layout, frames=frames)  \npy.icreate_animations(fig, filename='animheatmap'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Plotting Time Series with Baseline Detection using Plotly\nDESCRIPTION: This snippet calculates the baseline of the time series data using PeakUtils, then creates a Plotly scatter plot of the original data and the detected baseline.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-detection/python-Baseline-Detection.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# calculate baseline y values\nbaseline_values = peakutils.baseline(time_series)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    marker=dict(\n        color='#B292EA',\n    ),\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=baseline_values,\n    mode='markers',\n    marker=dict(\n        size=3,\n        color='#EB55BF',\n        symbol='circle-open'\n    ),\n    name='Baseline'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-baseline')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive 3D Surface Plot with Frequency Slider\nDESCRIPTION: Implements a 3D surface plot with an interactive slider to control the frequency of the sinusoidal surface pattern. Uses numpy to generate the surface data and includes camera positioning configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/slider-widget.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\nimport numpy as np\nfrom ipywidgets import interactive, HBox, VBox\n\npy.init_notebook_mode()\n\nx = y = np.arange(-5, 5, 0.1)\nyt = x[:, np.newaxis]\nz = np.cos(x * yt) + np.sin(x * yt) * 2\n\nf = go.FigureWidget(\n    data=[\n        go.Surface(z=z, x=x, y=y,\n                   colorscale='Viridis')],\n    layout=go.Layout(scene=go.layout.Scene(\n        camera=go.layout.scene.Camera(\n            up=dict(x=0, y=0, z=1),\n            center=dict(x=0, y=0, z=0),\n            eye=dict(x=1.25, y=1.25, z=1.25))\n    ))\n)\n\n\ndef update_z(frequency):\n    f.data[0].z = np.cos(x * yt * frequency / 10.0) + np.sin(x * yt * frequency / 10.0) * 2\n\n\nfreq_slider = interactive(update_z, frequency=(1, 50, 0.1))\nvb = VBox((f, freq_slider))\nvb.layout.align_items = 'center'\nvb\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Scatter Plot with Plotly\nDESCRIPTION: Creates a scatter plot with grouped data points using Plotly offline mode. The example plots scores for three subjects (Moe, Larry, Curly) with different colors for each group using the groupby transform.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/groupby/groupby.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\noff.init_notebook_mode(connected=True)\n\nsubject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']\nscore = [1,6,2,8,2,9,4,5,1,5,2,8]\n\ndata = [dict(\n  type = 'scatter',\n  x = subject,\n  y = score,\n  mode = 'markers',\n  transforms = [dict(\n    type = 'groupby',\n    groups = subject,\n    styles = [\n        dict(target = 'Moe', value = dict(marker = dict(color = 'blue'))),\n        dict(target = 'Larry', value = dict(marker = dict(color = 'red'))),\n        dict(target = 'Curly', value = dict(marker = dict(color = 'black')))\n    ]\n  )]\n)]\n\noff.iplot({'data': data}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Background Image to Plotly Scatter Plot\nDESCRIPTION: Demonstrates how to add a background image to a scatter plot using Plotly's layout.images configuration. The image is positioned using x/y coordinates and sized with stretch sizing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\ntrace1= go.Scatter(x=[0,0.5,1,2,2.2],y=[1.23,2.5,0.42,3,1])\nlayout= go.Layout(images= [dict(\n                  source= \"https://images.plot.ly/language-icons/api-home/python-logo.png\",\n                  xref= \"x\",\n                  yref= \"y\",\n                  x= 0,\n                  y= 3,\n                  sizex= 2,\n                  sizey= 2,\n                  sizing= \"stretch\",\n                  opacity= 0.5,\n                  layer= \"below\")])\nfig=go.Figure(data=[trace1],layout=layout)\npy.iplot(fig,filename='EXAMPLES/background')\n```\n\n----------------------------------------\n\nTITLE: Creating a Side-by-Side Comparison of Delaunay Triangulation and Alpha Shape\nDESCRIPTION: Sets up a Plotly subplot layout for comparing the Delaunay triangulation with the computed alpha shape. This snippet shows how to configure the layout and styling for a comparative visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfigure = tls.make_subplots(rows=1, cols=2,\n                           subplot_titles=('Delaunay triangulation',  'Alpha shape, alpha=0.15'),\n                           horizontal_spacing=0.1, \n                          )\n```\n\nLANGUAGE: python\nCODE:\n```\npl_width=800\npl_height=460\ntitle = 'Delaunay triangulation and Alpha Complex/Shape for a Set of 2D Points'\n\nfigure['layout'].update(title=title,                                 \n                        font= dict(family=\"Open Sans, sans-serif\"),\n                        showlegend=False,     \n                        hovermode='closest',  \n                        autosize=False,       \n                        width=pl_width,       \n                        height=pl_height,\n                        margin=dict(\n                            l=65,\n                            r=65,\n                            b=85,\n                            t=120\n                            ),           \n                       shapes=[]  \n                       )    \n```\n\nLANGUAGE: python\nCODE:\n```\naxis_style = dict(showline=True, \n                  mirror=True,\n                  zeroline=False,\n                  showgrid=False,\n                  showticklabels=True,\n                  range=[-0.1,1.1],\n                  tickvals=[0, 0.2, 0.4, 0.6, 0.8, 1.0],\n                  ticklen=5\n                 )\n```\n\nLANGUAGE: python\nCODE:\n```\nfor s in range(1,3):   \n    figure['layout'].update({'xaxis{}'.format(s): make_XAxis(axis_style)})# set xaxis style\n    figure['layout'].update({'yaxis{}'.format(s): make_YAxis(axis_style)})# set yaxis style\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Plot Controls with Slider\nDESCRIPTION: Creates an interactive 3D surface plot with a frequency slider control. Uses numpy to generate dynamic surface data and updates the plot based on slider input.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/slider_example.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport ipywidgets as widgets\nimport numpy as np\n\nfrom ipywidgets import interact, interactive, fixed\nfrom IPython.core.display import HTML\nfrom IPython.display import display, clear_output\nfrom plotly.widgets import GraphWidget\n\ng = GraphWidget('https://plotly.com/~DemoAccount/10147/')\nx = y = np.arange(-5,5,0.1)\nyt = x[:,np.newaxis]\n\n# define our listener class\nclass z_data:\n    \n    def __init__(self):\n        self.z = np.cos(x*yt)+np.sin(x*yt)*2\n    \n    def on_z_change(self, name):\n        new_value = name['new']\n        \n        self.z = np.cos(x*yt*(new_value+1)/100)+np.sin(x*yt*(new_value+1/100))\n        self.replot()\n        \n    def replot(self):\n        g.restyle({ 'z': [self.z], 'colorscale': 'Viridis'})\n\n# create sliders\nz_slider = widgets.FloatSlider(min=0,max=30,value=1,step=0.05, continuous_update=False)\nz_slider.description = 'Frequency'\nz_slider.value = 1\n\n# initialize listener class\nz_state = z_data()\n\n# activate listener on our slider\nz_slider.observe(z_state.on_z_change, 'value')\n\n# display our app\ndisplay(z_slider)\ndisplay(g)\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Ratio Axes in Plotly Python\nDESCRIPTION: Creates a complex multi-panel figure with fixed aspect ratio axes, demonstrating different scaling relationships between panels. This example shows how to maintain specific aspect ratios between axes, including 1:1 scaling, custom scale ratios, and logarithmic axes with shared scaling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n  x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n  y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n)\n\ntrace1 = go.Scatter(\n  x = [0,1,2,3],\n  y = [1,2,4,8],\n  yaxis = \"y2\"\n)\n\ntrace2 = go.Scatter(\n  x = [1,10,100,10,1],\n  y = [0,1,2,3,4],\n  xaxis = \"x2\",\n  yaxis =\"y3\",\n)\n\ntrace3 = go.Scatter(\n  x = [1,100,30,80,1],\n  y = [1,1.5,2,2.5,3],\n  xaxis = \"x2\",\n  yaxis = \"y4\"\n)\n\ndata = [trace0,trace1,trace2,trace3]\n\nlayout = go.Layout(\n    width = 800,\n    height = 500,\n    title = \"fixed-ratio axes\",\n    xaxis = dict(\n      nticks = 10,\n      domain = [0, 0.45],\n      title = \"shared X axis\"\n    ),\n    yaxis = dict(\n      scaleanchor = \"x\",\n      domain = [0, 0.45],\n      title = \"1:1\"\n    ),\n    yaxis2 = dict(\n      scaleanchor = \"x\",\n      scaleratio = 0.2,\n      domain = [0.55,1],\n      title = \"1:5\"\n    ),\n    xaxis2 = dict(\n      type = \"log\",\n      domain = [0.55, 1],\n      anchor = \"y3\",\n      title = \"unconstrained log X\"\n    ),\n    yaxis3 = dict(\n      domain = [0, 0.45],\n      anchor = \"x2\",\n      title = \"Scale matches ->\"\n    ),\n    yaxis4 = dict(\n      scaleanchor = \"y3\",\n      domain = [0.55, 1],\n      anchor = \"x2\",\n      title = \"Scale matches <-\"\n    ),\n    showlegend= False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = \"aspect-ratio\")\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Subplot Visualization with Plotly\nDESCRIPTION: Comprehensive example of creating a mixed subplot that combines a bar chart of volcano frequency by country, a 3D surface of a volcano, and a geographical scatterplot of volcano locations. The layout is carefully configured to control subplot positioning and appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/mixed-subplots/mixed-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# read in volcano database data\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv')\n\n# frequency of Country\nfreq = df\nfreq = freq.Country.value_counts().reset_index().rename(columns={'index': 'x'})\n\n# plot(1) top 10 countries by total volcanoes\nlocations = go.Bar(x=freq['x'][0:10],y=freq['Country'][0:10], marker=dict(color='#CF1020'))\n\n# read in 3d volcano surface data\ndf_v = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')\n\n# plot(2) 3d surface of volcano\nthreed = go.Surface(z=df_v.values.tolist(), colorscale='Reds', showscale=False)\n\n# plot(3)  scattergeo map of volcano locations\ntrace3 = {\n  \"geo\": \"geo3\", \n  \"lon\": df['Longitude'],\n  \"lat\": df['Latitude'],\n  \"hoverinfo\": 'text',\n  \"marker\": {\n    \"size\": 4,\n    \"opacity\": 0.8,\n    \"color\": '#CF1020',\n    \"colorscale\": 'Viridis'\n  }, \n  \"mode\": \"markers\", \n  \"type\": \"scattergeo\"\n}\n\ndata = [locations, threed, trace3]\n\n# control the subplot below using domain in 'geo', 'scene', and 'axis'\nlayout = {\n  \"plot_bgcolor\": 'black',\n  \"paper_bgcolor\": 'black',\n  \"titlefont\": {\n      \"size\": 20,\n      \"family\": \"Raleway\"\n  },\n  \"font\": {\n      \"color\": 'white'\n  },\n  \"dragmode\": \"zoom\", \n  \"geo3\": {\n    \"domain\": {\n      \"x\": [0, 0.55], \n      \"y\": [0, 0.9]\n    }, \n    \"lakecolor\": \"rgba(127,205,255,1)\",\n    \"oceancolor\": \"rgb(6,66,115)\",\n    \"landcolor\": 'white',\n    \"projection\": {\"type\": \"orthographic\"}, \n    \"scope\": \"world\", \n    \"showlakes\": True,\n    \"showocean\": True,\n    \"showland\": True,\n    \"bgcolor\": 'black'\n  }, \n  \"margin\": {\n    \"r\": 10, \n    \"t\": 25, \n    \"b\": 40, \n    \"l\": 60\n  }, \n  \"scene\": {\"domain\": {\n      \"x\": [0.5, 1], \n      \"y\": [0, 0.55]\n    },\n           \"xaxis\": {\"gridcolor\": 'white'},\n           \"yaxis\": {\"gridcolor\": 'white'},\n           \"zaxis\": {\"gridcolor\": 'white'}\n           }, \n  \"showlegend\": False, \n  \"title\": \"<br>Volcano Database\", \n  \"xaxis\": {\n    \"anchor\": \"y\", \n    \"domain\": [0.6, 0.95]\n  }, \n  \"yaxis\": {\n    \"anchor\": \"x\", \n    \"domain\": [0.65, 0.95],\n    \"showgrid\": False\n  }\n}\n\nannotations = { \"text\": \"Source: NOAA\",\n               \"showarrow\": False,\n               \"xref\": \"paper\",\n               \"yref\": \"paper\",\n               \"x\": 0,\n               \"y\": 0}\n\nlayout['annotations'] = [annotations]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = \"Mixed Subplots Volcano\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Trisurf Colorscale with a Distance Function in Plotly\nDESCRIPTION: Creates a torus trisurf plot with colors based on distance from the origin using a custom color function. The example demonstrates how to use a custom color_func parameter to dynamically color the surface based on calculated values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as FF\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 20)\nv = np.linspace(0, 2*np.pi, 20)\nu,v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\nx = (3 + (np.cos(v)))*np.cos(u)\ny = (3 + (np.cos(v)))*np.sin(u)\nz = np.sin(v)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\n# define a function that calculates the distance\n# from the origin to use as the color variable\ndef dist_origin(x, y, z):\n    return np.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)\n\nfig1 = FF.create_trisurf(x=x, y=y, z=z, color_func=dist_origin,\n                         colormap = [(0.4, 0.15, 0), (1, 0.65, 0.12)],\n                         show_colorbar=True,\n                         simplices=simplices, title=\"Torus - Origin Distance Coloring\",\n                         aspectratio=dict(x=1, y=1, z=0.3))\npy.iplot(fig1, filename=\"Torus - Origin Distance Coloring\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting Basic Plotly Graph to JPG\nDESCRIPTION: Example showing how to create a scatter plot with two traces and export it as a JPG image. The code demonstrates plot creation, layout configuration, and conversion to a static image with specified dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/static-image-export/2016-05-20-static-image.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar img_jpg= d3.select('#jpg-export');\n\n// Plotting the Graph\n\nvar trace={x:[3,9,8,10,4,6,5],y:[5,7,6,7,8,9,8],type:\"scatter\"};\nvar trace1={x:[3,4,1,6,8,9,5],y:[4,2,5,2,1,7,3],type:\"scatter\"};\nvar data = [trace,trace1];\nvar layout = {title : \"Simple JavaScript Graph\"};\nPlotly.newPlot(\n  'plotly_div',\n   data,\n   layout)\n\n// static image in jpg format\n\n.then(\n    function(gd)\n     {\n      Plotly.toImage(gd,{height:300,width:300})\n         .then(\n             function(url)\n         {\n             img_jpg.attr(\"src\", url);\n         }\n         )\n    });\n```\n\n----------------------------------------\n\nTITLE: Formatting Colormaps in Python using Matplotlib and Plotly\nDESCRIPTION: This snippet demonstrates how to format and convert Matplotlib colormaps (Magma, Viridis, and Parula) for use with Plotly. It includes functions to normalize color values and convert Matplotlib colormaps to Plotly-compatible format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/matplotlib_colorscales/matplotlib-colorscales.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport parula as par\nimport matplotlib\nfrom matplotlib import cm\nimport numpy as np\n\nmagma_cmap = matplotlib.cm.get_cmap('magma')\nviridis_cmap = matplotlib.cm.get_cmap('viridis')\nparula_cmap = par.parula_map\n\nviridis_rgb = []\nmagma_rgb = []\nparula_rgb = []\nnorm = matplotlib.colors.Normalize(vmin=0, vmax=255)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(magma_cmap(norm(i)))\n       magma_rgb.append(k)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(viridis_cmap(norm(i)))\n       viridis_rgb.append(k)\n\nfor i in range(0, 255):\n       k = matplotlib.colors.colorConverter.to_rgb(parula_cmap(norm(i)))\n       parula_rgb.append(k)\n    \ndef matplotlib_to_plotly(cmap, pl_entries):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n    \n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n        \n    return pl_colorscale\n\nmagma = matplotlib_to_plotly(magma_cmap, 255)\nviridis = matplotlib_to_plotly(viridis_cmap, 255)\nparula = matplotlib_to_plotly(parula_cmap, 255)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatterplot Matrix of Wind Speed Data with Plotly in Python\nDESCRIPTION: This snippet generates a scatterplot matrix using all columns of the wind speed data. It utilizes Plotly's FigureFactory to create a comprehensive visualization of relationships between variables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = FF.create_scatterplotmatrix(wind_data,\n                                  height=1000,\n                                  width=1000,\n                                  title='Wind Data - Scatterplot Matrix')\npy.iplot(fig, filename='wind-data-scatterplot-matrix')\n```\n\n----------------------------------------\n\nTITLE: Define Plotly Layout for K-means Inertia Plot\nDESCRIPTION: Defines the layout for the inertia plot using Plotly's Layout, specifying axis titles and the plot title to investigate K-means clustering.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nlayout6 = pgo.Layout(\n    title='Baltimore dataset - Investigate k-means clustering',\n    xaxis=pgo.XAxis(title='Number of clusters',\n                    range=[0, max_clusters]),\n    yaxis=pgo.YAxis(title='Inertia')\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Gantt Chart with Hours and Minutes in Plotly Python\nDESCRIPTION: This example shows how to create a detailed Gantt chart using hours and minutes for task times. It represents a daily schedule with various activities and custom colors for each resource type.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [\n    dict(Task='Morning Sleep', Start='2016-01-01', Finish='2016-01-01 6:00:00', Resource='Sleep'),\n    dict(Task='Breakfast', Start='2016-01-01 7:00:00', Finish='2016-01-01 7:30:00', Resource='Food'),\n    dict(Task='Work', Start='2016-01-01 9:00:00', Finish='2016-01-01 11:25:00', Resource='Brain'),\n    dict(Task='Break', Start='2016-01-01 11:30:00', Finish='2016-01-01 12:00:00', Resource='Rest'),\n    dict(Task='Lunch', Start='2016-01-01 12:00:00', Finish='2016-01-01 13:00:00', Resource='Food'),\n    dict(Task='Work', Start='2016-01-01 13:00:00', Finish='2016-01-01 17:00:00', Resource='Brain'),\n    dict(Task='Exercise', Start='2016-01-01 17:30:00', Finish='2016-01-01 18:30:00', Resource='Cardio'), \n    dict(Task='Post Workout Rest', Start='2016-01-01 18:30:00', Finish='2016-01-01 19:00:00', Resource='Rest'),\n    dict(Task='Dinner', Start='2016-01-01 19:00:00', Finish='2016-01-01 20:00:00', Resource='Food'),\n    dict(Task='Evening Sleep', Start='2016-01-01 21:00:00', Finish='2016-01-01 23:59:00', Resource='Sleep')\n]\n\ncolors = dict(Cardio = 'rgb(46, 137, 205)',\n              Food = 'rgb(114, 44, 121)',\n              Sleep = 'rgb(198, 47, 105)',\n              Brain = 'rgb(58, 149, 136)',\n              Rest = 'rgb(107, 127, 135)')\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', title='Daily Schedule',\n                      show_colorbar=True, bar_width=0.8, showgrid_x=True, showgrid_y=True)\npy.iplot(fig, filename='gantt-hours-minutes', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Rainbow Box Plots with Plotly in Python\nDESCRIPTION: This example shows how to create rainbow-colored box plots using Plotly. It generates a series of box plots with different colors based on the HSL color model, creating a rainbow effect.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport plotly.plotly as py\n\nfrom numpy import * \n\nN = 30     # Number of boxes\n\n# generate an array of rainbow colors by fixing the saturation and lightness of the HSL representation of colour \n# and marching around the hue. \n# Plotly accepts any CSS color format, see e.g. http://www.w3schools.com/cssref/css_colors_legal.asp.\nc = ['hsl('+str(h)+',50%'+',50%)' for h in linspace(0, 360, N)]\n\n# Each box is represented by a dict that contains the data, the type, and the colour. \n# Use list comprehension to describe N boxes, each with a different colour and with different randomly generated data:\ndata = [{\n    'y': 3.5*sin(pi * i/N) + i/N+(1.5+0.5*cos(pi*i/N))*random.rand(10), \n    'type':'box',\n    'marker':{'color': c[i]}\n    } for i in range(int(N))]\n\n# format the layout\nlayout = {'xaxis': {'showgrid':False,'zeroline':False, 'tickangle':60,'showticklabels':False},\n          'yaxis': {'zeroline':False,'gridcolor':'white'},\n          'paper_bgcolor': 'rgb(233,233,233)',\n          'plot_bgcolor': 'rgb(233,233,233)',\n          }\n\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Filled Line Plot with Gapminder Population Data\nDESCRIPTION: This code creates a 3D filled line plot showing population trends for five countries from 1957 to 2007 using data from the Gapminder dataset. It demonstrates how to create filled areas between lines in 3D space by using closed loops of coordinates with the scatter3d trace type.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-filled-line/3d-filled-line.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\n\n# The datasets' url. Thanks Jennifer Bryan!\nurl_csv = 'http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt'\n\ndf = pd.read_csv(url_csv, sep='\\t')\ndf.head()\n\ncountries = ['China', 'India', 'United States', 'Bangladesh', 'South Africa']\nfill_colors = ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854']\ngf = df.groupby('country')\n\ndata = []\n\nfor country, fill_color in zip(countries[::-1], fill_colors):\n    group = gf.get_group(country)\n    years = group['year'].tolist()\n    length = len(years)\n    country_coords = [country] * length\n    pop = group['pop'].tolist()\n    zeros = [0] * length\n    \n    data.append(dict(\n        type='scatter3d',\n        mode='lines',\n        x=years + years[::-1] + [years[0]],  # year loop: in incr. order then in decr. order then years[0]\n        y=country_coords * 2 + [country_coords[0]],\n        z=pop + zeros + [pop[0]],\n        name='',\n        surfaceaxis=1, # add a surface axis ('1' refers to axes[1] i.e. the y-axis)\n        surfacecolor=fill_color,\n        line=dict(\n            color='black',\n            width=4\n        ),\n    ))\n\nlayout = dict(\n    title='Population from 1957 to 2007 [Gapminder]',\n    showlegend=False,\n    scene=dict(\n        xaxis=dict(title=''),\n        yaxis=dict(title=''),\n        zaxis=dict(title=''),\n        camera=dict(\n            eye=dict(x=-1.7, y=-1.7, z=0.5)\n        )\n    )\n)\n\nfig = dict(data=data, layout=layout)\n\n# IPython notebook\n# py.iplot(fig, filename='filled-3d-lines')\n\npy.iplot(fig, filename='filled-3d-lines')\n```\n\n----------------------------------------\n\nTITLE: Labeling Lines with Annotations in Plotly Python\nDESCRIPTION: This example demonstrates how to create a complex line plot with custom annotations. It includes multiple traces, custom axis styling, and annotations for labeling the lines and adding a title.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntitle = 'Main Source for News'\n\nlabels = ['Television', 'Newspaper', 'Internet', 'Radio']\n\ncolors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)']\n\nmode_size = [8, 8, 12, 8]\n\nline_size = [2, 2, 4, 2]\n\nx_data = [\n    [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n    [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n    [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n    [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n]\n\ny_data = [\n    [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],\n    [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],\n    [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],\n    [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23],\n]\n\ntraces = []\n\nfor i in range(0, 4):\n    traces.append(go.Scatter(\n        x=x_data[i],\n        y=y_data[i],\n        mode='lines',\n        line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,\n    ))\n\n    traces.append(go.Scatter(\n        x=[x_data[i][0], x_data[i][11]],\n        y=[y_data[i][0], y_data[i][11]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickcolor='rgb(204, 204, 204)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False\n)\n\nannotations = []\n\n# Adding labels\nfor y_trace, label, color in zip(y_data, labels, colors):\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label + ' {}%'.format(y_trace[0]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}%'.format(y_trace[11]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Main Source for News',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n```\n\n----------------------------------------\n\nTITLE: Matrix Multiplication with Plotly Visualization\nDESCRIPTION: Shows multiplication of two 2x2 matrices using NumPy and displays the result using Plotly's annotated heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmatrix1 = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nmatrix2 = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nmatrix_prod = matrix1 * matrix2\n\ncolorscale = [[0, '#F1FFD9'], [1, '#8BDBF5']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(matrix_prod.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-prod')\n```\n\n----------------------------------------\n\nTITLE: Creating a Plot with Two Y Axes in Python using Plotly\nDESCRIPTION: This code snippet demonstrates how to create a plot with two y-axes using Plotly in Python. It creates two scatter traces and a layout with two y-axes, one on each side of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[40, 50, 60],\n    name='yaxis data'\n)\ntrace2 = go.Scatter(\n    x=[2, 3, 4],\n    y=[4, 5, 6],\n    name='yaxis2 data',\n    yaxis='y2'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title='Double Y Axis Example',\n    yaxis=dict(\n        title='yaxis title'\n    ),\n    yaxis2=dict(\n        title='yaxis2 title',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='multiple-axes-double')\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap Plots with Cmocean Colorscales in Python\nDESCRIPTION: This function creates a subplot with three heatmaps using a specified colorscale. It uses example data and the Plotly graph objects to create the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/cmocean.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef colorscale_plot(colorscale, title):    \n    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)\n    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)\n    trace3 = go.Heatmap(z=z,colorscale=colorscale, showscale=False)\n    \n    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig.append_trace(trace3, 1, 3)\n    \n    fig['layout'].update(title=title)\n    fig['layout']['xaxis2'].update(range=[0, 450])\n    fig['layout']['yaxis2'].update(range=[0, 270])\n    \n    return fig\n```\n\n----------------------------------------\n\nTITLE: Customizing Bubble Chart Colors and Opacity\nDESCRIPTION: Enhanced bubble chart with custom colors and opacity settings for each marker.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        opacity=[1, 0.8, 0.6, 0.4],\n        size=[40, 60, 80, 100],\n    )\n)\n\ndata = [trace0]\npy.iplot(data, filename='bubblechart-color')\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Plot with Customized Color Bar Ticks in Python\nDESCRIPTION: This code creates a contour plot with a customized color bar, including tick styling options such as tick count, position, length, width, font size, and orientation. The plot uses a 5x5 matrix of z-values to generate the contour data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/contour/contour.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [{\n        'type': u'contour',\n        'z': [[10, 10.625, 12.5, 15.625, 20],\n              [5.625, 6.25, 8.125, 11.25, 15.625],\n              [2.5, 3.125, 5., 8.125, 12.5],\n              [0.625, 1.25, 3.125, 6.25, 10.625],\n              [0, 0.625, 2.5, 5.625, 10]],\n        'colorbar':{\n            'nticks': 10,\n            'ticks': 'outside',\n            'ticklen': 5,\n            'tickwidth': 1,\n            'showticklabels': True,\n            'tickangle': 0,\n            'tickfont': {\n                'size': 12\n            },\n        }\n        }]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Adding Links to Sankey Diagram in Plotly Python\nDESCRIPTION: This snippet builds upon the previous one by adding links to the Sankey diagram. It includes source, target, value, and label data for the links, and plots the complete diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport urllib, json\n\nurl = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'\nresponse = urllib.urlopen(url)\ndata = json.loads(response.read())\n\ndata_trace = dict(\n    type='sankey',\n    width = 1118,\n    height = 772,\n    domain = dict(\n      x =  [0,1],\n      y =  [0,1]\n    ),\n    orientation = \"h\",\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(\n        color = \"black\",\n        width = 0.5\n      ),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    ),\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label']\n  ))\n\nlayout =  dict(\n    title = \"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\",\n    font = dict(\n      size = 10\n    )\n)\n\nfig = dict(data=[data_trace], layout=layout)\npy.iplot(fig, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Updating Scatter Plot Data in FigureWidget\nDESCRIPTION: Updates the y-values of an existing scatter plot in a FigureWidget. This shows how to modify data in a FigureWidget after it's been created.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# update scatter data\nscatter = f.data[0]\nscatter.y = [3, 1, 4, 3]\n```\n\n----------------------------------------\n\nTITLE: Implementing Relayout Button in Plotly Python\nDESCRIPTION: Demonstrates using the relayout method to modify layout attributes in a Plotly scatter plot. Creates a visualization with buttons to show/hide different cluster shapes around data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\ntrace0 = go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    marker=dict(color='#835AF1')\n)\ntrace1 = go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    marker=dict(color='#7FA6EE')\n)\ntrace2 = go.Scatter(\n    x=x2,\n    y=y2,\n    mode='markers',\n    marker=dict(color='#B8F7D4')\n)\ndata = [trace0, trace1, trace2]\n\ncluster0 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x0), y0=min(y0), \n                 x1=max(x0), y1=max(y0), \n                 opacity=.25,\n                 line=dict(color='#835AF1'),\n                 fillcolor='#835AF1')]\ncluster1 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x1), y0=min(y1), \n                 x1=max(x1), y1=max(y1), \n                 opacity=.25,\n                 line=dict(color='#7FA6EE'),\n                 fillcolor='#7FA6EE')]\ncluster2 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x2), y0=min(y2), \n                 x1=max(x2), y1=max(y2), \n                 opacity=.25,\n                 line=dict(color='#B8F7D4'),\n                 fillcolor='#B8F7D4')]\n\nupdatemenus = list([\n    dict(type=\"buttons\",\n         buttons=list([   \n            dict(label = 'None',\n                 method = 'relayout',\n                 args = ['shapes', []]),\n            dict(label = 'Cluster 0',\n                 method = 'relayout',\n                 args = ['shapes', cluster0]),\n            dict(label = 'Cluster 1',\n                 method = 'relayout',\n                 args = ['shapes', cluster1]),\n            dict(label = 'Cluster 2',\n                 method = 'relayout',\n                 args = ['shapes', cluster2]),\n            dict(label = 'All',\n                 method = 'relayout',\n                 args = ['shapes', cluster0+cluster1+cluster2])\n        ]),\n    )\n])\n\nlayout = dict(title='Highlight Clusters', showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='relayout_option')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Annotated Heatmap in Plotly\nDESCRIPTION: Demonstrates how to create a basic annotated heatmap using Plotly's figure_factory module with default settings and a predefined data matrix.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5, .7, .9],  \n     [1, .8, .6, .4, .2],\n     [.2, 0, .5, .7, .9],  \n     [.9, .8, .4, .2, 0],\n     [.3, .4, .5, .7, 1]] \n\nfig = ff.create_annotated_heatmap(z)\npy.iplot(fig, filename='annotated_heatmap')\n```\n\n----------------------------------------\n\nTITLE: Overlaying Scatter Plot on Ternary Contour Plot in Python with Plotly\nDESCRIPTION: Combines the scatter and contour plots by updating the scatter trace marker properties and appending it to the contour traces. This creates a composite visualization showing data points overlaid on the contour regions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrace1['marker']['symbol'] = 'x'\ntrace1['marker']['color'] = '#4d79ff'\ntraces.append(trace1)\n\n# update title:\nlayout['title'] = 'Scatter Plot overlaid on Ternary Contour Plot'\nfigure = dict(data=traces, layout=layout)\npy.iplot(figure)\n```\n\n----------------------------------------\n\nTITLE: Creating Single Restyle Button for Surface Plot\nDESCRIPTION: Implements a single button control to switch between 3D surface and heatmap visualizations of volcano data. Uses the restyle method to modify chart type with button controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport json\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')\n\ndata = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]\n\nlayout = go.Layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230, 230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        aspectratio = dict(x=1, y=1, z=0.7),\n        aspectmode = 'manual'\n    )\n)\n\nupdatemenus=list([\n    dict(\n        buttons=list([   \n            dict(\n                args=['type', 'surface'],\n                label='3D Surface',\n                method='restyle'\n            ),\n            dict(\n                args=['type', 'heatmap'],\n                label='Heatmap',\n                method='restyle'\n            )             \n        ]),\n        direction = 'left',\n        pad = {'r': 10, 't': 10},\n        showactive = True,\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = 1.1,\n        yanchor = 'top' \n    ),\n])\n\nannotations = list([\n    dict(text='Trace type:', x=0, y=1.085, yref='paper', align='left', showarrow=False)\n])\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='cmocean-picker-one-button')\n```\n\n----------------------------------------\n\nTITLE: Updating Bar Chart Data in FigureWidget\nDESCRIPTION: Updates the y-values of an existing bar chart in a FigureWidget. This demonstrates how to access and modify specific traces in a multi-trace figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# update bar data\nbar = f.data[1]\nbar.y = [5, 3, 2, 8]\n```\n\n----------------------------------------\n\nTITLE: Loading Large CSV into SQLite Database in Chunks\nDESCRIPTION: Processes a large CSV file in manageable chunks, performs basic data cleaning and transformation, and loads the data into a SQLite database. This approach avoids memory limitations when dealing with very large datasets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstart = dt.datetime.now()\nchunksize = 20000\nj = 0\nindex_start = 1\n\nfor df in pd.read_csv('311_100M.csv', chunksize=chunksize, iterator=True, encoding='utf-8'):\n    \n    df = df.rename(columns={c: c.replace(' ', '') for c in df.columns}) # Remove spaces from columns\n\n    df['CreatedDate'] = pd.to_datetime(df['CreatedDate']) # Convert to datetimes\n    df['ClosedDate'] = pd.to_datetime(df['ClosedDate'])\n\n    df.index += index_start\n\n    # Remove the un-interesting columns\n    columns = ['Agency', 'CreatedDate', 'ClosedDate', 'ComplaintType', 'Descriptor',\n               'CreatedDate', 'ClosedDate', 'TimeToCompletion',\n               'City']\n\n    for c in df.columns:\n        if c not in columns:\n            df = df.drop(c, axis=1)    \n\n    \n    j+=1\n    print '{} seconds: completed {} rows'.format((dt.datetime.now() - start).seconds, j*chunksize)\n\n    df.to_sql('data', disk_engine, if_exists='append')\n    index_start = df.index[-1] + 1\n```\n\n----------------------------------------\n\nTITLE: Applying Thermal Cmocean Colorscale in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to apply the 'thermal' cmocean colorscale to a heatmap plot using Plotly. It uses the previously defined functions to create and display the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/cmocean.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nthermal = cmocean_to_plotly(cmocean.cm.thermal, max_len)\npy.iplot(colorscale_plot(colorscale=thermal, title='Thermal'))\n```\n\n----------------------------------------\n\nTITLE: Creating Split Violin Plots by Smoking Status\nDESCRIPTION: This code creates split violin plots that display total bill distributions by day, divided by smoking status. The smoker and non-smoker distributions are displayed back-to-back in the same position using negative and positive sides with overlay mode.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\n\nfig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": df['day'] [ df['smoker'] == 'Yes' ],\n            \"y\": df['total_bill'] [ df['smoker'] == 'Yes' ],\n            \"legendgroup\": 'Yes',\n            \"scalegroup\": 'Yes',\n            \"name\": 'Yes',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": df['day'] [ df['smoker'] == 'No' ],\n            \"y\": df['total_bill'] [ df['smoker'] == 'No' ],\n            \"legendgroup\": 'No',\n            \"scalegroup\": 'No',\n            \"name\": 'No',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'green'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin/split', validate = False)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty FigureWidget with a Scatter Trace in Plotly\nDESCRIPTION: Initializes an empty Plotly FigureWidget and adds an empty scatter trace to it. This creates the base visualization that will be updated by the interactive controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/Interact.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfig = go.FigureWidget()\nscatt = fig.add_scatter()\nfig\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly 3D Network Graph for Les Miserables in Python\nDESCRIPTION: Configures the Plotly traces and layout for a 3D network visualization. Creates separate traces for edges and nodes, with nodes colored by character group and customized hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1=go.Scatter3d(x=Xe,\n               y=Ye,\n               z=Ze,\n               mode='lines',\n               line=dict(color='rgb(125,125,125)', width=1),\n               hoverinfo='none'\n               )\n\ntrace2=go.Scatter3d(x=Xn,\n               y=Yn,\n               z=Zn,\n               mode='markers',\n               name='actors',\n               marker=dict(symbol='circle',\n                             size=6,\n                             color=group,\n                             colorscale='Viridis',\n                             line=dict(color='rgb(50,50,50)', width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text'\n               )\n\naxis=dict(showbackground=False,\n          showline=False,\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title=''\n          )\n\nlayout = go.Layout(\n         title=\"Network of coappearances of characters in Victor Hugo's novel<br> Les Miserables (3D visualization)\",\n         width=1000,\n         height=1000,\n         showlegend=False,\n         scene=dict(\n             xaxis=dict(axis),\n             yaxis=dict(axis),\n             zaxis=dict(axis),\n        ),\n     margin=dict(\n        t=100\n    ),\n    hovermode='closest',\n    annotations=[\n           dict(\n           showarrow=False,\n            text=\"Data source: <a href='http://bost.ocks.org/mike/miserables/miserables.json'>[1] miserables.json</a>\",\n            xref='paper',\n            yref='paper',\n            x=0,\n            y=0.1,\n            xanchor='left',\n            yanchor='bottom',\n            font=dict(\n            size=14\n            )\n            )\n        ],    )\n```\n\n----------------------------------------\n\nTITLE: Creating an Ebola Cases Bubble Map for West Africa with Plotly in Python\nDESCRIPTION: This code creates a bubble map showing Ebola cases in West Africa using Plotly. It demonstrates how to create scatter geo plots with time-based data, add an inset map, and customize the layout for a more complex visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/bubble-maps/bubble-maps.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')\ndf.head()\n\ncases = []\ncolors = ['rgb(239,243,255)','rgb(189,215,231)','rgb(107,174,214)','rgb(33,113,181)']\nmonths = {6:'June',7:'July',8:'Aug',9:'Sept'}\n\nfor i in range(6,10)[::-1]:\n    cases.append(go.Scattergeo(\n            lon = df[ df['Month'] == i ]['Lon'], #-(max(range(6,10))-i),\n            lat = df[ df['Month'] == i ]['Lat'],\n            text = df[ df['Month'] == i ]['Value'],\n            name = months[i],\n            marker = go.scattergeo.Marker(\n                size = df[ df['Month'] == i ]['Value']/50,\n                color = colors[i-6],\n                line = go.scattergeo.marker.Line(width = 0)\n            )\n        )\n    )\n\ncases[0]['text'] = df[ df['Month'] == 9 ]['Value'].map('{:.0f}'.format).astype(str)+' '+\\\n    df[ df['Month'] == 9 ]['Country']\ncases[0]['mode'] = 'markers+text'\ncases[0]['textposition'] = 'bottom center'\n\ninset = [\n    go.Choropleth(\n        locationmode = 'country names',\n        locations = df[ df['Month'] == 9 ]['Country'],\n        z = df[ df['Month'] == 9 ]['Value'],\n        text = df[ df['Month'] == 9 ]['Country'],\n        colorscale = [[0,'rgb(0, 0, 0)'],[1,'rgb(0, 0, 0)']],\n        autocolorscale = False,\n        showscale = False,\n        geo = 'geo2'\n    ),\n    go.Scattergeo(\n        lon = [21.0936],\n        lat = [7.1881],\n        text = ['Africa'],\n        mode = 'text',\n        showlegend = False,\n        geo = 'geo2'\n    )\n]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Ebola cases reported by month in West Africa 2014<br> \\\nSource: <a href=\"https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases\">\\\nHDX</a>'),\n    geo = go.layout.Geo(\n        resolution = 50,\n        scope = 'africa',\n        showframe = False,\n        showcoastlines = True,\n        showland = True,\n        landcolor = \"rgb(229, 229, 229)\",\n        countrycolor = \"rgb(255, 255, 255)\" ,\n        coastlinecolor = \"rgb(255, 255, 255)\",\n        projection = go.layout.geo.Projection(\n            type = 'mercator'\n        ),\n        lonaxis = go.layout.geo.Lonaxis(\n            range= [ -15.0, -5.0 ]\n        ),\n        lataxis = go.layout.geo.Lataxis(\n            range= [ 0.0, 12.0 ]\n        ),\n        domain = go.layout.geo.Domain(\n            x = [ 0, 1 ],\n            y = [ 0, 1 ]\n        )\n    ),\n    geo2 = go.layout.Geo(\n        scope = 'africa',\n        showframe = False,\n        showland = True,\n        landcolor = \"rgb(229, 229, 229)\",\n        showcountries = False,\n        domain = go.layout.geo.Domain(\n            x = [ 0, 0.6 ],\n            y = [ 0, 0.6 ]\n        ),\n        bgcolor = 'rgba(255, 255, 255, 0.0)',\n    ),\n    legend = go.layout.Legend(\n           traceorder = 'reversed'\n    )\n)\n\nfig = go.Figure(layout=layout, data=cases+inset)\npy.iplot(fig, filename='West Africa Ebola cases 2014')\n```\n\n----------------------------------------\n\nTITLE: Building Advanced Bubble Chart with Population and Continent Data\nDESCRIPTION: Creates an advanced bubble chart where marker size represents population and color indicates continent. This visualization includes custom hover text, formatted markers with opacity and borders, and optimized bubble sizing calculations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# (!) Set 'size' values to be proportional to rendered area,\n#     instead of diameter. This makes the range of bubble sizes smaller\nsizemode='area'       \n\n# (!) Set a reference for 'size' values (i.e. a population-to-pixel scaling).\n#     Here the max bubble area will be on the order of 100 pixels\nsizeref=df['Population'].max()/1e2**2\n\ncolors = {\n    'Asia':\"rgb(255,65,54)\", \n    'Europe':\"rgb(133,20,75)\",\n    'Africa':\"rgb(0,116,217)\",\n    'North America':\"rgb(255,133,27)\",\n    'South America':\"rgb(23,190,207)\",\n    'Antarctica':\"rgb(61,153,112)\",\n    'Oceania':\"rgb(255,220,0)\",\n}\n\n# Define a hover-text generating function (returns a list of strings)\ndef make_text(X):\n    return 'Country: %s\\\n    <br>Life Expectancy: %s years\\\n    <br>Population: %s million'\\\n    % (X['Name'], X['LifeExpectancy'], X['Population']/1e6)  \n\n# Define a trace-generating function (returns a Scatter object)\ndef make_trace(X, continent, sizes, color):  \n    return go.Scatter(\n        x=X['GNP'],  # GDP on the x-xaxis\n        y=X['LifeExpectancy'],    # life Exp on th y-axis\n        name=continent,    # label continent names on hover\n        mode='markers',    # (!) point markers only on this plot\n        text=X.apply(make_text, axis=1).tolist(),\n        marker= dict(\n            color=color,           # marker color\n            size=sizes,            # (!) marker sizes (sizes is a list)\n            sizeref=sizeref,       # link sizeref\n            sizemode=sizemode,     # link sizemode\n            opacity=0.6,           # (!) partly transparent markers\n            line= dict(width=3,color=\"white\")  # marker borders\n        )\n    )\n\n# Initialize data object \ndata = []\n\n# Group data frame by continent sub-dataframe (named X), \n#   make one trace object per continent and append to data object\nfor continent, X in df.groupby('Continent'):\n    \n    sizes = X['Population']                 # get population array \n    color = colors[continent]               # get bubble color\n    \n    data.append(\n        make_trace(X, continent, sizes, color)  # append trace to data object\n    ) \n\n    # Set plot and axis titles\ntitle = \"Life expectancy vs GNP from MySQL world database (bubble chart)\"\nx_title = \"Gross National Product\"\ny_title = \"Life Expectancy [in years]\"\n\n# Define a dictionary of axis style options\naxis_style = dict(  \n    type='log',\n    zeroline=False,       # remove thick zero line\n    gridcolor='#FFFFFF',  # white grid lines\n    ticks='outside',      # draw ticks outside axes \n    ticklen=8,            # tick length\n    tickwidth=1.5         #   and width\n)\n\n# Make layout object\nlayout = go.Layout(\n    title=title,             # set plot title\n    plot_bgcolor='#EFECEA',  # set plot color to grey\n    hovermode=\"closest\",\n    xaxis=dict(\n        axis_style,      # add axis style dictionary\n        title=x_title,   # x-axis title\n        range=[2.0,7.2], # log of min and max x limits\n    ),\n    yaxis=dict(\n        axis_style,      # add axis style dictionary\n        title=y_title,   # y-axis title\n    )\n)\n\n# Make Figure object\nfig = go.Figure(data=data, layout=layout)\n\n# (@) Send to Plotly and show in notebook\npy.iplot(fig, filename='s3_life-gdp')\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing Apple Stock Data with Moving Average\nDESCRIPTION: This snippet retrieves Apple stock data for 2014 using matplotlib's finance module, then calculates a moving average using numpy's convolution function. The data is prepared for visualization by converting dates to the proper format for Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = []\ny = []\nma = []\n\ndef moving_average(interval, window_size):\n    window = np.ones(int(window_size))/float(window_size)\n    return np.convolve(interval, window, 'same')\n\ndate1 = dt_date( 2014, 1, 1 )\ndate2 = dt_date( 2014, 12, 12 )\nquotes = quotes_historical_yahoo('AAPL', date1, date2)\nif len(quotes) == 0:\n    print \"Couldn't connect to yahoo trading database\"\nelse:\n    dates = [q[0] for q in quotes]\n    y = [q[1] for q in quotes]\n    for date in dates:\n        x.append(datetime.fromordinal(int(date))\\\n                .strftime('%Y-%m-%d')) # Plotly timestamp format\n    ma = moving_average(y, 10)\n```\n\n----------------------------------------\n\nTITLE: Adding Marker Borders to Scatter Plot in Python with Plotly\nDESCRIPTION: This code creates a scatter plot with custom marker borders using Plotly. It demonstrates how to set marker color, size, and border properties for better visibility.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n  \ndata = [\n    go.Scatter(\n        mode = 'markers',\n        x = x,\n        y = y,\n        marker = dict(\n          color = 'rgb(17, 157, 255)',\n          size = 20,\n          line = dict(\n            color = 'rgb(231, 99, 250)',\n            width = 2\n          )\n        ),\n        showlegend = False\n  ),\n  go.Scatter(\n      mode = 'markers',\n      x = [2],\n      y = [4.5],\n      marker = dict(\n        color = 'rgb(17, 157, 255)',\n        size = 120,\n        line = dict(\n          color = 'rgb(231, 99, 250)',\n          width = 12\n        )\n      ),\n      showlegend = False\n  )]\n\npy.iplot(data, filename = \"style-add-border\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Parallel Coordinates Plot with Custom Dataset\nDESCRIPTION: Creates an advanced parallel coordinates plot with multiple dimensions, custom color scaling, and detailed configuration options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/parcoords/parcoords.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd \n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv\")\n\ndata = [\n    go.Parcoords(\n        line = dict(color = df['colorVal'],\n                   colorscale = 'Jet',\n                   showscale = True,\n                   reversescale = True,\n                   cmin = -4000,\n                   cmax = -100),\n        dimensions = list([\n            dict(range = [32000,227900],\n                 constraintrange = [100000,150000],\n                 label = 'Block Height', values = df['blockHeight']),\n            dict(range = [0,700000],\n                 label = 'Block Width', values = df['blockWidth']),\n            dict(tickvals = [0,0.5,1,2,3],\n                 ticktext = ['A','AB','B','Y','Z'],\n                 label = 'Cyclinder Material', values = df['cycMaterial']),\n            dict(range = [-1,4],\n                 tickvals = [0,1,2,3],\n                 label = 'Block Material', values = df['blockMaterial']),\n            dict(range = [134,3154],\n                 visible = True,\n                 label = 'Total Weight', values = df['totalWeight']),\n            dict(range = [9,19984],\n                 label = 'Assembly Penalty Weight', values = df['assemblyPW']),\n            dict(range = [49000,568000],\n                 label = 'Height st Width', values = df['HstW']),\n            dict(range = [-28000,196430],\n                 label = 'Min Height Width', values = df['minHW']),\n            dict(range = [98453,501789],\n                 label = 'Min Width Diameter', values = df['minWD']),\n            dict(range = [1417,107154],\n                 label = 'RF Block', values = df['rfBlock'])\n        ])\n    )\n]\n\npy.iplot(data, filename = 'parcoords-advanced')\n```\n\n----------------------------------------\n\nTITLE: Implementing Relayout Dropdown for Cluster Visualization in Plotly\nDESCRIPTION: Creates an interactive scatter plot with a dropdown menu to show/hide different cluster shapes. Uses numpy for random data generation and implements the relayout method to modify layout attributes dynamically.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.normal(2, 0.4, 400)\ny0 = np.random.normal(2, 0.4, 400)\nx1 = np.random.normal(3, 0.6, 600)\ny1 = np.random.normal(6, 0.4, 400)\nx2 = np.random.normal(4, 0.2, 200)\ny2 = np.random.normal(4, 0.4, 200)\n\ntrace0 = go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n    marker=dict(color='#835AF1')\n)\ntrace1 = go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers',\n    marker=dict(color='#7FA6EE')\n)\ntrace2 = go.Scatter(\n    x=x2,\n    y=y2,\n    mode='markers',\n    marker=dict(color='#B8F7D4')\n)\ndata = [trace0, trace1, trace2]\n\ncluster0 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x0), y0=min(y0), \n                 x1=max(x0), y1=max(y0), \n                 opacity=.25,\n                 line=dict(color='#835AF1'),\n                 fillcolor='#835AF1')]\ncluster1 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x1), y0=min(y1), \n                 x1=max(x1), y1=max(y1), \n                 opacity=.25,\n                 line=dict(color='#7FA6EE'),\n                 fillcolor='#7FA6EE')]\ncluster2 = [dict(type='circle',\n                 xref='x', yref='y',\n                 x0=min(x2), y0=min(y2), \n                 x1=max(x2), y1=max(y2), \n                 opacity=.25,\n                 line=dict(color='#B8F7D4'),\n                 fillcolor='#B8F7D4')]\n\nupdatemenus = list([\n    dict(buttons=list([   \n            dict(label = 'None',\n                 method = 'relayout',\n                 args = ['shapes', []]),\n            dict(label = 'Cluster 0',\n                 method = 'relayout',\n                 args = ['shapes', cluster0]),\n            dict(label = 'Cluster 1',\n                 method = 'relayout',\n                 args = ['shapes', cluster1]),\n            dict(label = 'Cluster 2',\n                 method = 'relayout',\n                 args = ['shapes', cluster2]),\n            dict(label = 'All',\n                 method = 'relayout',\n                 args = ['shapes', cluster0+cluster1+cluster2])\n        ]),\n    )\n])\n\nlayout = dict(title='Highlight Clusters', showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='relayout_option_dropdown')\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Surface Plot and Animation for MRI Visualization in Python\nDESCRIPTION: This snippet sets up the data, frames, layout, and sliders for the 3D surface plot animation. It configures the initial plot, animation frames, and interactive controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata=[\n    dict(\n        type='surface', \n        zsrc=grid.get_column_reference('z1'),\n        surfacecolorsrc=grid.get_column_reference('surfc1'),\n        colorscale=pl_bone,\n        colorbar=dict(thickness=20, ticklen=4)\n    )\n]\n\nframes=[]\nfor k in range(nr_frames):\n    frames.append(\n        dict(\n            data=[dict(zsrc=grid.get_column_reference('z{}'.format(k + 1)),\n                       surfacecolorsrc=grid.get_column_reference('surfc{}'.format(k + 1)))],\n            name='frame{}'.format(k + 1)\n        )\n    )\n\nsliders=[\n    dict(\n        steps=[dict(method='animate',\n                    args= [['frame{}'.format(k + 1)],\n                            dict(mode='immediate',\n                                 frame= dict(duration=70, redraw= False),\n                                 transition=dict(duration=0))],\n                    label='{:d}'.format(k+1)) for k in range(68)], \n        transition= dict(duration=0),\n        x=0,\n        y=0, \n        currentvalue=dict(font=dict(size=12), \n                          prefix='slice: ', \n                          visible=True, \n                          xanchor='center'\n                         ),  \n        len=1.0\n    )\n]\n\naxis3d = dict(\n    showbackground=True, \n    backgroundcolor=\"rgb(230, 230,230)\",\n    gridcolor=\"rgb(255, 255, 255)\",      \n    zerolinecolor=\"rgb(255, 255, 255)\",  \n)\n\nlayout3d = dict(\n         title='Slices in volumetric data', \n         font=dict(family='Balto'),\n         width=600,\n         height=600,\n         scene=dict(xaxis=(axis3d),\n                    yaxis=(axis3d), \n                    zaxis=dict(axis3d, **dict(range=[-0.1, 6.8], autorange=False)), \n                    aspectratio=dict(x=1, y=1, z=1),\n                    ),\n         updatemenus=[\n             dict(type='buttons',\n                  showactive=False,\n                  y=1,\n                  x=1.3,\n                  xanchor='right',\n                  yanchor='top',\n                  pad=dict(t=0, r=10),\n                  buttons=[dict(label='Play',\n                                method='animate',\n                                args=[\n                                    None, \n                                    dict(frame=dict(duration=70, redraw=False),\n                                         transition=dict(duration=0),\n                                         fromcurrent=True,\n                                         mode='immediate')\n                                ])])\n         ],\n        sliders=sliders\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Distribution Plot in Python with Plotly\nDESCRIPTION: Creates a simple distribution plot using randomly generated data from a normal distribution. The function ff.create_distplot generates a histogram with an overlaid kernel density estimate and rug plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx = np.random.randn(1000)  \nhist_data = [x]\ngroup_labels = ['distplot']\n\nfig = ff.create_distplot(hist_data, group_labels)\npy.iplot(fig, filename='Basic Distplot')\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Multi-Trace Airfoil Visualization with Carpet Plots in Python\nDESCRIPTION: This advanced example creates a visualization of flow over a Karman-Trefftz airfoil using multiple trace types. It combines carpet plots, contour carpets, and scatter plots to show pressure coefficients, streamlines, and surface features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-contour/contourcarpet.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\nimport urllib, json\n\nurl = \"https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json\"\nresponse = urllib.urlopen(url)\ndata = json.loads(response.read())\n    \ntrace1 = go.Carpet(\n    a = data[0]['a'],\n    b = data[0]['b'],\n    x = data[0]['x'],\n    y = data[0]['y'],\n    baxis = dict(\n      startline = False,\n      endline = False,\n      showticklabels = \"none\",\n      smoothing = 0,\n      showgrid = False\n    ),\n    aaxis = dict(\n      startlinewidth = 2,\n      startline = True,\n      showticklabels = \"none\",\n      endline = True,\n      showgrid = False,\n      endlinewidth = 2,\n      smoothing = 0\n    )\n)\n\ntrace2 = go.Contourcarpet(\n    z = data[1]['z'],\n    autocolorscale = False,\n    zmax = 1,\n    name = \"Pressure\",\n    colorscale = \"Viridis\",\n    zmin = -8,\n    colorbar = dict(\n      y = 0,\n      yanchor = \"bottom\",\n      titleside = \"right\",\n      len = 0.75,\n      title = \"Pressure coefficient, c<sub>p</sub>\"\n    ),\n    contours = dict(\n      start = -1,\n      size = 0.025,\n      end = 1.000,\n      showlines = False\n    ),\n    line = dict(\n      smoothing = 0\n    ),\n    autocontour = False,\n    zauto = False\n)\n\ntrace3 = go.Contourcarpet(\n    z = data[2]['z'],\n    opacity = 0.300,\n    showlegend = True,\n    name = \"Streamlines\",\n    autocontour = True,\n    ncontours = 50,\n    contours = dict(\n      coloring = \"none\"\n    ),\n    line = dict(\n      color = \"white\",\n      width = 1\n    )\n)\n\ntrace4 = go.Contourcarpet(\n    z = data[3]['z'],\n    showlegend = True,\n    name = \"Pressure<br>contours\",\n    autocontour = False,\n    line = dict(\n        color = \"rgba(0, 0, 0, 0.5)\",\n        smoothing = 1\n    ),\n    contours = dict(\n        size = 0.250,\n        start = -4,\n        coloring = \"none\",\n        end = 1.000,\n        showlines = True\n      )\n)\n\ntrace5 = go.Scatter(\n    x = data[4]['x'],\n    y = data[4]['y'],\n    legendgroup = \"g1\",\n    name = \"Surface<br>pressure\",\n    mode = \"lines\",\n    hoverinfo = \"skip\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.5)\",\n      width = 1,\n      shape = \"spline\",\n      smoothing = 1\n    ),\n    fill = \"toself\",\n    fillcolor = \"rgba(255, 0, 0, 0.2)\"\n)\n\ntrace6 = go.Scatter(\n    x = data[5]['x'],\n    y = data[5]['y'],\n    showlegend = False,\n    legendgroup = \"g1\",\n    mode = \"lines\",\n    hoverinfo = \"skip\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.3)\",\n      width = 1\n    )\n)\n\ntrace7 = go.Scatter(\n    x = data[6]['x'],\n    y = data[6]['y'],\n    showlegend = False,\n    legendgroup = \"g1\",\n    name = \"cp\",\n    text = data[6]['text'],\n    hoverinfo = \"text\",\n    mode = \"lines\",\n    line = dict(\n      color = \"rgba(255, 0, 0, 0.2)\",\n      width = 0\n    )\n)\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nlayout = go.Layout(\n    yaxis = dict(\n      zeroline = False,\n      range = [-1.800,1.800],\n      showgrid = False\n    ),\n    dragmode = \"pan\",\n    height = 700,\n    xaxis = dict(\n      zeroline = False,\n      scaleratio = 1,\n      scaleanchor = 'y',\n      range = [-3.800,3.800],\n      showgrid = False\n    ),\n    title = \"Flow over a Karman-Trefftz airfoil\",\n    hovermode = \"closest\",\n    margin = dict(\n      r = 60,\n      b = 40,\n      l = 40,\n      t = 80\n    ),\n    width = 900\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"contourcarpet/airfoil\")\n```\n\n----------------------------------------\n\nTITLE: Creating a World Choropleth Map with Plotly in Python\nDESCRIPTION: This code snippet demonstrates how to create a world choropleth map showing global GDP data using Plotly. It includes data loading, map configuration, and color scale setup.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/choropleth-maps/Choropleth_maps.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')\n\ndata = [go.Choropleth(\n    locations = df['CODE'],\n    z = df['GDP (BILLIONS)'],\n    text = df['COUNTRY'],\n    colorscale = [\n        [0, \"rgb(5, 10, 172)\"],\n        [0.35, \"rgb(40, 60, 190)\"],\n        [0.5, \"rgb(70, 100, 245)\"],\n        [0.6, \"rgb(90, 120, 245)\"],\n        [0.7, \"rgb(106, 137, 247)\"],\n        [1, \"rgb(220, 220, 220)\"]\n    ],\n    autocolorscale = False,\n    reversescale = True,\n    marker = go.choropleth.Marker(\n        line = go.choropleth.marker.Line(\n            color = 'rgb(180,180,180)',\n            width = 0.5\n        )),\n    colorbar = go.choropleth.ColorBar(\n        tickprefix = '$',\n        title = 'GDP<br>Billions US$'),\n)]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = '2014 Global GDP'\n    ),\n    geo = go.layout.Geo(\n        showframe = False,\n        showcoastlines = False,\n        projection = go.layout.geo.Projection(\n            type = 'equirectangular'\n        )\n    ),\n    annotations = [go.layout.Annotation(\n        x = 0.55,\n        y = 0.1,\n        xref = 'paper',\n        yref = 'paper',\n        text = 'Source: <a href=\"https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html\">\\            CIA World Factbook</a>',\n        showarrow = False\n    )]\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = 'd3-world-map')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Box Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic box plot using Plotly's Python library. It generates random data and creates two box plots side by side.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ny0 = np.random.randn(50)-1\ny1 = np.random.randn(50)+1\n\ntrace0 = go.Box(\n    y=y0\n)\ntrace1 = go.Box(\n    y=y1\n)\ndata = [trace0, trace1]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapbox Layout and Dropdown Menus in Python\nDESCRIPTION: This snippet sets up a Plotly layout with Mapbox integration, including dropdown menus for wind farm selection and map style changes. It defines the map's initial view, styling, and annotations for a wind turbine visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# mapbox_access_token = 'insert mapbox token here'\n\nlayout = dict(\n    height = 800,\n    margin = dict( t=0, b=0, l=0, r=0 ),\n    font = dict( color='#FFFFFF', size=11 ),\n    paper_bgcolor = '#000000',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='dark'\n    ),\n)\n\nupdatemenus=list([\n    dict(\n        buttons = wind_farms[0:10],\n        pad = {'r': 0, 't': 10},\n        x = 0.1,\n        xanchor = 'left',\n        y = 1.0,\n        yanchor = 'top',\n        bgcolor = '#AAAAAA',\n        active = 99,\n        bordercolor = '#FFFFFF',\n        font = dict(size=11, color='#000000')\n    ),\n    dict(\n        buttons=list([\n            dict(\n                args=['mapbox.style', 'dark'],\n                label='Dark',\n                method='relayout'\n            ),                    \n            dict(\n                args=['mapbox.style', 'light'],\n                label='Light',\n                method='relayout'\n            ),\n            dict(\n                args=['mapbox.style', 'satellite'],\n                label='Satellite',\n                method='relayout'\n            ),\n            dict(\n                args=['mapbox.style', 'satellite-streets'],\n                label='Satellite with Streets',\n                method='relayout'\n            )                    \n        ]),\n        direction = 'up',\n        x = 0.75,\n        xanchor = 'left',\n        y = 0.05,\n        yanchor = 'bottom',\n        bgcolor = '#000000',\n        bordercolor = '#FFFFFF',\n        font = dict(size=11)\n    ),        \n])\n\nannotations = list([\n    dict(text='All US wind turbines (scroll to zoom)', font=dict(color='magenta',size=14), borderpad=10, \n         x=0.05, y=0.05, xref='paper', yref='paper', align='left', showarrow=False, bgcolor='black'),\n    dict(text='Wind<br>Farms', x=0.01, y=0.99, yref='paper', align='left', showarrow=False,font=dict(size=14))\n])\n\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfigure = dict(data=data, layout=layout)\npy.iplot(figure, filename='wind-turbine-territory-dropdown')\n```\n\n----------------------------------------\n\nTITLE: Styling Scatter Plots with Plotly in Python\nDESCRIPTION: This code shows how to style scatter plots by customizing marker properties such as size, color, and line. It creates two scatter plots with different styles and combines them in a single figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 500\n\ntrace0 = go.Scatter(\n    x = np.random.randn(N),\n    y = np.random.randn(N)+2,\n    name = 'Above',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(152, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)'\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = np.random.randn(N),\n    y = np.random.randn(N)-2,\n    name = 'Below',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2,\n        )\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(title = 'Styled Scatter',\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False)\n             )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='styled-scatter')\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations with xref and yref as Paper in Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a Plotly scatter plot with custom annotations positioned relative to the plot area using 'paper' coordinates. It includes custom axis titles and plot formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 2, 3],\n        name='y',\n    )\n]\n\nlayout = go.Layout(\n    annotations=[\n        dict(\n            x=0.5004254919715793,\n            y=-0.16191064079952971,\n            showarrow=False,\n            text='Custom x-axis title',\n            xref='paper',\n            yref='paper'\n        ),\n        dict(\n            x=-0.04944728761514841,\n            y=0.4714285714285711,\n            showarrow=False,\n            text='Custom y-axis title',\n            textangle=-90,\n            xref='paper',\n            yref='paper'\n        )\n    ],\n    autosize=True,\n    margin=dict(\n        b=100\n    ),\n    title='Plot Title',\n    xaxis=dict(\n        autorange=False,\n        range=[-0.05674507980728292, -0.0527310420933204],\n        type='linear'\n    ),\n    yaxis=dict(\n        autorange=False,\n        range=[1.2876210047544652, 1.2977732997811402],\n        type='linear'\n    ),\n    height=550,\n    width=1137\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Displaying the Basic Surface Plot\nDESCRIPTION: Renders the basic surface plot using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npy.iplot([trace1])\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Error Bars in Plotly\nDESCRIPTION: Creates a grouped bar chart with error bars showing experimental data comparison. Includes two sets of bars with their respective error values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[3, 6, 4],\n    name='Control',\n    error_y=dict(\n        type='data',\n        array=[1, 0.5, 1.5],\n        visible=True\n    )\n)\ntrace2 = go.Bar(\n    x=['Trial 1', 'Trial 2', 'Trial 3'],\n    y=[4, 7, 3],\n    name='Experimental',\n    error_y=dict(\n        type='data',\n        array=[0.5, 1, 2],\n        visible=True\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='error-bar-bar')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Wind Turbine Map with Custom Buttons in Python\nDESCRIPTION: This code creates an interactive map of US wind turbines using Plotly. It includes custom buttons for selecting specific wind farms and changing map styles. The script loads wind turbine data, creates scatter plots on a map, and adds multiple custom button menus for interactivity.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf_wind = pd.read_csv('https://plotly.com/~datasets/2805.csv')\n\ndf_known_capacity = df_wind[ df_wind['total_cpcy'] != -99999.000 ]\ndf_sum = df_known_capacity.groupby('manufac')['total_cpcy'].sum().sort_values(ascending=False).to_frame()\n\ndf_farms = pd.read_csv('https://plotly.com/~jackp/17256.csv')\ndf_farms.set_index('Wind Farm', inplace=True)\n\nwind_farms=list([\n    dict(\n        args=[ { \n            'mapbox.center.lat':38,\n            'mapbox.center.lon':-94,\n            'mapbox.zoom':3,\n            'annotations[0].text':'All US wind turbines (scroll to zoom)'\n        } ],\n        label='USA',\n        method='relayout'\n    )\n])\n\nfor farm, row in df_farms.iterrows():\n    desc = []\n    for col in df_farms.columns:\n        if col not in ['DegMinSec','Latitude','Longitude']:\n            if str(row[col]) not in ['None','nan','']: \n                desc.append( col + ': ' + str(row[col]).strip(\"'\") )\n    desc.insert(0, farm)\n    wind_farms.append( \n        dict(\n            args=[ { \n                'mapbox.center.lat':row['Latitude'], \n                'mapbox.center.lon':float(str(row['Longitude']).strip(\"'\")), \n                'mapbox.zoom':9,\n                'annotations[0].text': '<br>'.join(desc)\n            } ],\n            label=' '.join(farm.split(' ')[0:2]),\n            method='relayout'\n        )\n    )\n\ndata = []\nfor mfr in list(df_sum.index):\n    if mfr != 'unknown':\n        trace = dict(\n            lat = df_wind[ df_wind['manufac'] == mfr ]['lat_DD'],\n            lon = df_wind[ df_wind['manufac'] == mfr ]['long_DD'],\n            name = mfr,\n            marker = dict(size = 4),\n            type = 'scattermapbox'\n        )\n    data.append(trace)\n\nmapbox_access_token = 'your access token'\n\nlayout = dict(\n    height = 800,\n    margin = dict( t=0, b=0, l=0, r=0 ),\n    font = dict( color='#FFFFFF', size=11 ),\n    paper_bgcolor = '#000000',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='dark'\n    ),\n)\n\nupdatemenus=list([\n    dict(\n        buttons = wind_farms[0:6],\n        direction = 'left',\n        pad = {'r': 0, 't': 10},\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = 1.0,\n        yanchor = 'top',\n        bgcolor = '#AAAAAA',\n        active = 99,\n        bordercolor = '#FFFFFF',\n        font = dict(size=11, color='#000000')\n    ),\n    dict(\n        buttons = wind_farms[6:10],\n        direction = 'left',\n        pad = {'r': 0, 't': 10},\n        type = 'buttons',\n        x = 0.1,\n        xanchor = 'left',\n        y = 0.95,\n        yanchor = 'top',\n        bgcolor = '#AAAAAA',\n        active = 99,\n        bordercolor = '#FFFFFF',\n        font = dict(size=11, color='#000000')\n    ),\n    dict(\n        buttons=list([\n            dict(\n                args=['mapbox.style', 'dark'],\n                label='Dark',\n                method='relayout'\n            ),                    \n            dict(\n                args=['mapbox.style', 'light'],\n                label='Light',\n                method='relayout'\n            ),\n            dict(\n                args=['mapbox.style', 'satellite'],\n                label='Satellite',\n                method='relayout'\n            ),\n            dict(\n                args=['mapbox.style', 'satellite-streets'],\n                label='Satellite with Streets',\n                method='relayout'\n            )                    \n        ]),\n        direction = 'up',\n        x = 0.75,\n        xanchor = 'left',\n        y = 0.05,\n        yanchor = 'bottom',\n        bgcolor = '#000000',\n        bordercolor = '#FFFFFF',\n        font = dict(size=11)\n    ),        \n])\n\nannotations = list([\n    dict(text='All US wind turbines (scroll to zoom)', font=dict(color='magenta',size=14), borderpad=10, \n         x=0.05, y=0.05, xref='paper', yref='paper', align='left', showarrow=False, bgcolor='black'),\n    dict(text='Wind<br>Farms', x=0.01, y=0.99, yref='paper', align='left', showarrow=False,font=dict(size=14))\n])\n\nlayout['updatemenus'] = updatemenus\nlayout['annotations'] = annotations\n\nfigure = dict(data=data, layout=layout)\npy.iplot(figure, filename='wind-turbine-territory')\n```\n\n----------------------------------------\n\nTITLE: Plotting Stock Data and Highlighting a Section with Plotly in Python\nDESCRIPTION: This snippet creates a plot of stock data, highlighting a specific section for analysis. It uses Plotly's Scatter objects to create two traces: one for the full data and another for the highlighted section.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nleft_endpt=1857\nright_endpt=1940\n\noriginal_trace = go.Scatter(\n    x = [j for j in range(len(stock_data['SBUX']))],\n    y = stock_data['SBUX'][0:left_endpt].tolist() + [None for k in range(right_endpt - left_endpt)] +\n        stock_data['SBUX'][right_endpt + 1:len(stock_data['SBUX'])].tolist(),\n    mode = 'lines',\n    name = 'Full Data',\n    marker = dict(color = 'rgb(160,200,250)')\n)\n\nhighlighted_trace = go.Scatter(\n    x = [j for j in range(left_endpt, right_endpt)],\n    y = stock_data['SBUX'][left_endpt:right_endpt],\n    mode = 'lines',\n    name = 'Highlighted Section',\n    marker = dict(color = 'rgb(0,56,210)')\n)\n\ndata = [original_trace, highlighted_trace,]\npy.iplot(data, filename='stock-data-SBUX')\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap with Categorical Axis Labels in Python\nDESCRIPTION: Shows how to create a heatmap with custom categorical labels for both x and y axes. This example uses days of the week for x-axis and times of day for y-axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n                   x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n                   y=['Morning', 'Afternoon', 'Evening'])\ndata=[trace]\npy.iplot(data, filename='labelled-heatmap')\n```\n\n----------------------------------------\n\nTITLE: Defining Ideogram Shapes for Chord Diagram in Plotly\nDESCRIPTION: Function that returns the Plotly shape dictionary for an ideogram, specifying its path, line color, fill color, and rendering layer. Ideograms represent the entities in the chord diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef make_ideo_shape(path, line_color, fill_color):\n    #line_color is the color of the shape boundary\n    #fill_collor is the color assigned to an ideogram\n    return  dict(\n                  line=dict(\n                  color=line_color, \n                  width=0.45\n                 ),\n\n            path=  path,\n            type='path',\n            fillcolor=fill_color,\n            layer='below'\n        )   \n```\n\n----------------------------------------\n\nTITLE: Creating Figure from Scatter Trace - Plotly Python\nDESCRIPTION: This snippet involves creating a Figure object that combines the scatter trace with a predefined layout, allowing for visual display in Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfigure = go.Figure(data=[scatter_trace], layout=layout)\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(figure, filename='pyguide_5')\n```\n\n----------------------------------------\n\nTITLE: Adding Dial and Layout for Gauge Chart in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to add a dial to the gauge chart using Plotly's path shape. It also sets up the layout for the chart, including the dial shape, annotations, and axis properties. The final chart is created by combining the base chart, meter chart, and layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/semicircular-gauge.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlayout = {\n    'xaxis': {\n        'showticklabels': False,\n        'showgrid': False,\n        'zeroline': False,\n    },\n    'yaxis': {\n        'showticklabels': False,\n        'showgrid': False,\n        'zeroline': False,\n    },\n    'shapes': [\n        {\n            'type': 'path',\n            'path': 'M 0.235 0.5 L 0.24 0.65 L 0.245 0.5 Z',\n            'fillcolor': 'rgba(44, 160, 101, 0.5)',\n            'line': {\n                'width': 0.5\n            },\n            'xref': 'paper',\n            'yref': 'paper'\n        }\n    ],\n    'annotations': [\n        {\n            'xref': 'paper',\n            'yref': 'paper',\n            'x': 0.23,\n            'y': 0.45,\n            'text': '50',\n            'showarrow': False\n        }\n    ]\n}\n\n# we don't want the boundary now\nbase_chart['marker']['line']['width'] = 0\n\nfig = {\"data\": [base_chart, meter_chart],\n       \"layout\": layout}\npy.iplot(fig, filename='gauge-meter-chart')\n```\n\n----------------------------------------\n\nTITLE: Customizing Surface Contours on Hover\nDESCRIPTION: Shows how to customize surface contour behavior on hover in 3D surface plots, including highlight settings and axis-specific configurations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-hover/3d-hover-options.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [10,20,30,40]\ny = [0,1,2,3]\nz = [[2,2,2,3],\n     [1,1,1,1],\n     [1,1,0,0],\n     [0,0,0,0]]\n\ndata = [go.Surface(\n    opacity=0.9,\n    x=x,\n    y=y,\n    z=z,\n    contours=go.surface.Contours(\n        x=go.surface.contours.X(\n            highlight=True,\n            highlightcolor=\"#41a7b3\",\n        ),\n        y=go.surface.contours.Y(highlight=False),\n        z=go.surface.contours.Z(highlight=False),\n    )\n)]\n\nlayout = go.Layout(\n    scene=go.layout.Scene(\n        xaxis = go.layout.scene.XAxis(showspikes=False),\n        yaxis = go.layout.scene.YAxis(showspikes=False),\n        zaxis = go.layout.scene.ZAxis(showspikes=False),\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='hover-surface-contours')\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Heatmap with Defined Colorscale in Plotly\nDESCRIPTION: Shows how to create an annotated heatmap using a predefined colorscale ('Viridis') to customize the appearance of the heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5, .7],  \n     [1, .8, .6, .4],\n     [.6, .4, .2, .0],  \n     [.9, .7, .5, .3]] \n\nfig = ff.create_annotated_heatmap(z, colorscale='Viridis')\npy.iplot(fig, filename='annotated_heatmap_color')\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Example in IPython\nDESCRIPTION: Demonstrates how to embed a Dash application example within an IPython notebook using IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/labels/labels.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-figurelabelsplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Coloring Network Nodes by Connection Count in Plotly\nDESCRIPTION: Colors node points in a network graph based on the number of connections. For each node, the code retrieves its adjacencies and adds the count to the node trace's color attribute, along with hover text showing the connection count.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n    node_info = '# of connections: '+str(len(adjacencies[1]))\n    node_trace['text']+=tuple([node_info])\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Cufflinks in Python\nDESCRIPTION: This snippet shows how to create a scatter plot using Cufflinks with a Pandas DataFrame. It uses the iplot method to generate the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='scatter', filename='cufflinks/simple-scatter-example')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple 3D Mesh Plot with External Data\nDESCRIPTION: Loads point data from an external file and creates a basic 3D mesh plot. The example uses numpy to load the data and Plotly's Mesh3d trace for visualization with a pink color and 50% opacity.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\npts=np.loadtxt('mesh_dataset.txt')\nx,y,z=zip(*pts)\n\ntrace = go.Mesh3d(x=x,y=y,z=z,color='#FFB6C1',opacity=0.50)\npy.iplot([trace])\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Plotly Graphs Using smtplib\nDESCRIPTION: Uses smtplib and email.mime modules to send an HTML email containing Plotly graphs. Creates a MIME multipart message, attaches the HTML body with the graphs, connects to the SMTP server, and sends the email.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nimport os\n\nmsg = MIMEMultipart('alternative')\nmsg['From'] = me\nmsg['To'] = recipient\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(email_body, 'html'))\n\nserver = smtplib.SMTP(email_server_host, port)\nserver.ehlo()\nserver.starttls()\nserver.login(email_username, email_password)\nserver.sendmail(me, recipient, msg.as_string())\nserver.close()\n```\n\n----------------------------------------\n\nTITLE: Plotting igraph Network with Plotly in Python\nDESCRIPTION: Creates an interactive network visualization using Plotly from an igraph graph with Kamada-Kawai layout. Defines separate scatter traces for edges and nodes with custom styling and hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/igraph_vs_networkx.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nXn=[layt[k][0] for k in range(N)]\nYn=[layt[k][1] for k in range(N)]\nXe=[]\nYe=[]\nfor e in E:\n    Xe+=[layt[e[0]][0],layt[e[1]][0], None]\n    Ye+=[layt[e[0]][1],layt[e[1]][1], None] \n    \ntrace1=Scatter(x=Xe,\n               y=Ye,\n               mode='lines',\n               line= dict(color='rgb(210,210,210)', width=1),\n               hoverinfo='none'\n               )\ntrace2=Scatter(x=Xn,\n               y=Yn,\n               mode='markers',\n               name='ntw',\n               marker=dict(symbol='circle-dot',\n                                        size=5,\n                                        color='#6959CD',\n                                        line=dict(color='rgb(50,50,50)', width=0.5)\n                                        ),\n               text=labels,\n               hoverinfo='text'\n               )\n\naxis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title='' \n          )\n\nwidth=800\nheight=800\nlayout=Layout(title= \"Coauthorship network of scientists working on network theory and experiment\"+\\\n              \"<br> Data source: <a href='https://networkdata.ics.uci.edu/data.php?id=11'> [1]</a>\",  \n    font= dict(size=12),\n    showlegend=False,\n    autosize=False,\n    width=width,\n    height=height,\n    xaxis=layout.XAxis(axis),\n    yaxis=layout.YAxis(axis),          \n    margin=layout.Margin(\n        l=40,\n        r=40,\n        b=85,\n        t=100,\n    ),\n    hovermode='closest',\n    annotations=[\n           dict(\n           showarrow=False, \n            text='This igraph.Graph has the Kamada-Kawai layout',  \n            xref='paper',     \n            yref='paper',     \n            x=0,  \n            y=-0.1,  \n            xanchor='left',   \n            yanchor='bottom',  \n            font=dict(\n            size=14 \n            )     \n            )\n        ]          \n    )\n\ndata=[trace1, trace2]\nfig=Figure(data=data, layout=layout)\npy.iplot(fig, filename='Coautorship-network-igraph')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Heatmap in Python with Plotly\nDESCRIPTION: Demonstrates how to create a simple heatmap visualization using Plotly. The example uses a 3x3 matrix of values for the z-parameter to generate the heatmap colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Heatmap(z=[[1, 20, 30],\n                      [20, 1, 60],\n                      [30, 60, 1]])\ndata=[trace]\npy.iplot(data, filename='basic-heatmap')\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Pie Chart with Plotly in Python\nDESCRIPTION: This example shows how to create a styled pie chart with custom colors, hover information, and text formatting using Plotly's go.Pie function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500,2500,1053,500]\ncolors = ['#FEBFB3', '#E1396C', '#96D38C', '#D0F9B1']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label+percent', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#000000', width=2)))\n\npy.iplot([trace], filename='styled_pie_chart')\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Flight Path Streaming Function\nDESCRIPTION: Defines a function that continuously streams flight path data between randomly selected airports, with error handling and reconnection logic.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport time\n\ndef lets_stream():\n\n    s.open()\n\n    airports = dframe.sample(4)[['lat', 'long', 'airport']]\n    depart = airports.iloc[0]\n    arrive = airports.iloc[1]\n    num_steps = 20\n\n    while True:\n\n        count = 0\n\n        lats = np.linspace(depart['lat'], arrive['lat'], num_steps)\n        lons = np.linspace(depart['long'], arrive['long'], num_steps)\n\n        for i, j in zip(lats, lons):\n\n            # added pts for the departure and arrival airports!!!\n            s.write(dict(lon=[depart['long'], j, arrive['long']],\n                         lat=[\n                             depart['lat'], i, arrive['lat']], type='scattergeo',\n                         marker={'size': [5, 7 + 0.2 * count, 5], 'sizemode': 'area',\n                                 'color': [\"green\", \"blue\", \"red\"],\n                                 'symbol': [\"circle\", \"star\", \"x-open\"]},\n                         text=[depart['airport'],\n                               '{},{}'.format(count, datetime.datetime.now()),\n                               arrive['airport']]))\n\n            count += 1\n            stall = np.random.normal(10, 3)\n            time.sleep(int((abs(stall) + 0.01) / 2.0))\n            s.heartbeat()\n            time.sleep(int((abs(stall) + 0.01) / 2.0))\n\n        depart = arrive\n        arrive = dframe.sample(1)[['lat', 'long', 'airport']].iloc[0]\n\nwhile True:\n    try:\n        lets_stream()\n    except Exception as e:\n        with open('log.txt', 'a+') as f:\n            f.write(str(e))\n        print(str(e))\n        s.close()\n```\n\n----------------------------------------\n\nTITLE: Using Array-Based Text Font Styling in Plotly\nDESCRIPTION: This example demonstrates how to style each text element individually by providing arrays of font properties. Each data point can have its own text color, font family, and size, allowing for detailed customization of text elements on geo plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = go.Figure(\n    data=[\n        go.Scattergeo(\n            lat=[45.5,43.4,49.13,51.1,53.34,45.24,44.64,48.25,49.89,50.45],\n            lon=[-73.57,-79.24,-123.06,-114.1,-113.28,-75.43,-63.57,-123.21,-97.13,-104.6],\n            marker={\n                \"color\": [\"#bebada\",\"#fdb462\",\"#fb8072\",\"#d9d9d9\",\"#bc80bd\",\"#b3de69\",\"#8dd3c7\",\"#80b1d3\",\"#fccde5\",\"#ffffb3\"],\n                \"line\": {\n                    \"width\": 1\n                },\n                \"size\": 10\n            },\n            mode=\"markers+text\",\n            name=\"\",\n            text=[\"Montreal\",\"Toronto\",\"Vancouver\",\"Calgary\",\"Edmonton\",\"Ottawa\",\"Halifax\",\"Victoria\",\"Winnepeg\",\"Regina\"],\n            textfont={\n                \"color\": [\"#bebada\",\"#fdb462\",\"#fb8072\",\"#d9d9d9\",\"#bc80bd\",\"#b3de69\",\"#8dd3c7\",\"#80b1d3\",\"#fccde5\",\"#ffffb3\"],\n                \"family\": [\"Arial, sans-serif\",\"Balto, sans-serif\",\"Courier New, monospace\",\"Droid Sans, sans-serif\",\"Droid Serif, serif\",\"Droid Sans Mono, sans-serif\",\"Gravitas One, cursive\",\"Old Standard TT, serif\",\"Open Sans, sans-serif\",\"PT Sans Narrow, sans-serif\",\"Raleway, sans-serif\",\"Times New Roman, Times, serif\"],\n                \"size\": [22,21,20,19,18,17,16,15,14,13]\n            },\n            textposition=[\"top center\",\"middle left\",\"top center\",\"bottom center\",\"top right\",\"middle left\",\"bottom right\",\"bottom left\",\"top right\",\"top right\"]\n        )\n    ],\n    layout={\n        \"title\": \"Canadian cities\",\n        \"geo\": {\n            \"lataxis\": {\n                \"range\": [40, 70]\n            },\n            \"lonaxis\": {\n                \"range\": [-130, -55]\n            },\n            \"scope\": \"north america\"\n        }\n    }\n)\n\npy.iplot(fig, filename='Canadian Cities')\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Series Plot with Custom Date Range in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a time series plot with a custom date range using datetime objects. It includes a function to convert datetime to Unix time in milliseconds and uses the layout's xaxis range parameter to restrict the visible date range.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport datetime\n\ndef to_unix_time(dt):\n    epoch =  datetime.datetime.utcfromtimestamp(0)\n    return (dt - epoch).total_seconds() * 1000\n\nx = [datetime.datetime(year=2013, month=10, day=04),\n    datetime.datetime(year=2013, month=11, day=05),\n    datetime.datetime(year=2013, month=12, day=06)]\ndata = [go.Scatter(\n            x=x,\n            y=[1, 3, 6])]\n\nlayout = go.Layout(xaxis = dict(\n                   range = [to_unix_time(datetime.datetime(2013, 10, 17)),\n                            to_unix_time(datetime.datetime(2013, 11, 20))]\n    ))\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Plotting networkx Graph with Plotly in Python\nDESCRIPTION: Creates an interactive network visualization using Plotly from a networkx graph with Fruchterman-Reingold layout. Defines scatter traces for edges and nodes with styling consistent with the igraph implementation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/igraph_vs_networkx.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nXv=[pos[k][0] for k in range(N)]\nYv=[pos[k][1] for k in range(N)]\nXed=[]\nYed=[]\nfor edge in E:\n    Xed+=[pos[edge[0]][0],pos[edge[1]][0], None]\n    Yed+=[pos[edge[0]][1],pos[edge[1]][1], None] \n    \ntrace3=Scatter(x=Xed,\n               y=Yed,\n               mode='lines',\n               line=dict(color='rgb(210,210,210)', width=1),\n               hoverinfo='none'\n               )\ntrace4=Scatter(x=Xv,\n               y=Yv,\n               mode='markers',\n               name='net',\n               marker=dict(symbol='circle-dot',\n                             size=5, \n                             color='#6959CD',\n                             line=dict(color='rgb(50,50,50)', width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text'\n               )\n\nannot=\"This networkx.Graph has the Fruchterman-Reingold layout<br>Code:\"+\\\n\"<a href='http://nbviewer.ipython.org/gist/empet/07ea33b2e4e0b84193bd'> [2]</a>\"\n\ndata1=[trace3, trace4]\nfig1=Figure(data=data1, layout=layout)\nfig1['layout']['annotations'][0]['text']=annot\npy.iplot(fig1, filename='Coautorship-network-nx')\n```\n\n----------------------------------------\n\nTITLE: Performing Shapiro-Wilk Test\nDESCRIPTION: Executes Shapiro-Wilk normality test and creates a table to display results including test statistic, p-value and interpretation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import shapiro\nstat, p = shapiro(gauss_data)\n\n# interpret\nalpha = 0.05\nif p > alpha:\n    msg = 'Sample looks Gaussian (fail to reject H0)'\nelse:\n    msg = 'Sample does not look Gaussian (reject H0)'\n\nresult_mat = [\n    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],\n    [len(gauss_data), stat, p, msg]\n]\n\nswt_table = ff.create_table(result_mat)\nswt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]\nswt_table['layout']['height']=200\nswt_table['layout']['margin']['t']=50\nswt_table['layout']['margin']['b']=50\n\npy.iplot(swt_table, filename='shapiro-wilk-table')\n```\n\n----------------------------------------\n\nTITLE: Creating Final Network Graph Figure with Plotly\nDESCRIPTION: Assembles the edge and node traces into a final Plotly figure with appropriate layout settings. The layout includes a title, hiding axis labels and grid lines, and an annotation with a link to the source code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title='<br>Network graph made with Python',\n                titlefont=dict(size=16),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Python code: <a href='https://plotly.com/ipython-notebooks/network-graphs/'> https://plotly.com/ipython-notebooks/network-graphs/</a>\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\n\npy.iplot(fig, filename='networkx')\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Controls for Sine Wave Plot\nDESCRIPTION: Creates an interactive slider that controls which sine wave is visible. Includes slider configuration and layout settings for the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/sliders/sliders.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',  \n        args = ['visible', [False] * len(data)],\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = 10,\n    currentvalue = {\"prefix\": \"Frequency: \"},\n    pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(sliders=sliders)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='Sine Wave Slider')\n```\n\n----------------------------------------\n\nTITLE: Creating a Torus Trisurf Plot with Plotly\nDESCRIPTION: Generates a 3D triangular surface representation of a torus using Delaunay triangulation and Plotly's create_trisurf function. The plot uses parametric equations to create the torus shape with customized aspect ratio.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as FF\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(0, 2*np.pi, 20)\nv = np.linspace(0, 2*np.pi, 20)\nu,v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\nx = (3 + (np.cos(v)))*np.cos(u)\ny = (3 + (np.cos(v)))*np.sin(u)\nz = np.sin(v)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig1 = FF.create_trisurf(x=x, y=y, z=z,\n                         simplices=simplices,\n                         title=\"Torus\", aspectratio=dict(x=1, y=1, z=0.3))\npy.iplot(fig1, filename=\"3dFolder/Torus\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Boy's Surface Trisurf Plot with Plotly\nDESCRIPTION: Generates a 3D triangular surface representation of Boy's Surface, a non-orientable surface with no boundary, using parametric equations and Delaunay triangulation. The plot uses a custom colormap with a color bar for enhanced visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as FF\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu=np.linspace(-np.pi/2, np.pi/2, 60)\nv=np.linspace(0, np.pi, 60)\nu,v=np.meshgrid(u,v)\nu=u.flatten()\nv=v.flatten()\n\nx = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.cos(2*u) + np.cos(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\ny = (np.sqrt(2)*(np.cos(v)*np.cos(v))*np.sin(2*u) - np.sin(u)*np.sin(2*v))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\nz = (3*(np.cos(v)*np.cos(v)))/(2 - np.sqrt(2)*np.sin(3*u)*np.sin(2*v))\n\npoints2D = np.vstack([u, v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\nfig1 = FF.create_trisurf(x=x, y=y, z=z,\n                         colormap=['rgb(50, 0, 75)', 'rgb(200, 0, 200)', '#c8dcc8'],\n                         show_colorbar=True,\n                         simplices=simplices,\n                         title=\"Boy's Surface\")\npy.iplot(fig1, filename=\"Boy's Surface\")\n```\n\n----------------------------------------\n\nTITLE: Creating Bézier Curve Edges with Voting Information in Python\nDESCRIPTION: Generates Bézier curves for edges with width proportional to vote counts and adds information labels at strategic points on each edge.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlines=[]# the list of dicts defining   edge  Plotly attributes\nedge_info=[]# the list of points on edges where  the information is placed\n\nfor j, e in enumerate(E):\n    A=np.array(layt[e[0]])\n    B=np.array(layt[e[1]])\n    d=dist(A, B)\n    K=get_idx_interv(d, Dist)\n    b=[A, A/params[K], B/params[K], B]\n    color=edge_colors[K]\n    pts=BezierCv(b, nr=5)\n    text=V[e[0]]['label']+' to '+V[e[1]]['label']+' '+str(Weights[j])+' pts'\n    mark=deCasteljau(b,0.9)\n    edge_info.append(go.Scatter(x=[mark[0]],\n                             y=[mark[1]],\n                             mode='markers',\n                             marker=dict( size=0.5,  color=edge_colors),\n                             text=text,\n                             hoverinfo='text'\n                             )\n                    )\n    lines.append(go.Scatter(x=pts[:,0],\n                         y=pts[:,1],\n                         mode='lines',\n                         line=dict(color=color,\n                                  shape='spline',\n                                  width=Weights[j]/5#The  width is proportional to the edge weight\n                                 ),\n                        hoverinfo='none'\n                       )\n                )\n```\n\n----------------------------------------\n\nTITLE: Creating and Packaging Figure Object - Python\nDESCRIPTION: This segment assembles the previously created contour trace and geographical traces into a Plotly figure, specifying layout and aesthetic options for the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndata = Data([trace1]+traces_cc)\n\ntitle = u\"Average daily surface air temperature anomalies [℃]<br> \nin July 2014 with respect to 1981-2010 climatology\"\n\nanno_text = \"Data courtesy of \\\n<a href='http://www.esrl.noaa.gov/psd/data/composites/day/'>\\\nNOAA Earth System Research Laboratory</a>\"\n\naxis_style = dict(\n    zeroline=False,\n    showline=False,\n    showgrid=False,\n    ticks='',\n    showticklabels=False,\n)\n\nlayout = Layout(\n    title=title,\n    showlegend=False,\n    hovermode=\"closest\",        # highlight closest point on hover\n    xaxis=XAxis(\n        axis_style,\n        range=[lon[0],lon[-1]]  # restrict y-axis to range of lon\n    ),\n    yaxis=YAxis(\n        axis_style,\n    ),\n    annotations=Annotations([\n        Annotation(\n            text=anno_text,\n            xref='paper',\n            yref='paper',\n            x=0,\n            y=1,\n            yanchor='bottom',\n            showarrow=False\n        )\n    ],\n    autosize=False,\n    width=1000,\n    height=500,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Coordinates from Layout in Python\nDESCRIPTION: Demonstrates how to access the 3D coordinates for a specific node (index 5) from the layout results.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayt[5]\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallel Categories Diagram with Counts\nDESCRIPTION: Creates a parallel categories diagram with explicit frequency counts for each combination of attributes using the counts property.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nparcats = go.Parcats(\n    dimensions=[\n        {'label': 'Hair',\n         'values': ['Black', 'Brown', 'Brown', 'Brown', 'Red']},\n        {'label': 'Eye',\n         'values': ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},\n        {'label': 'Sex',\n         'values': ['Female', 'Male', 'Female', 'Male', 'Male']}],\n    counts=[6, 10, 40, 23, 7]\n)\n\niplot([parcats])\n```\n\n----------------------------------------\n\nTITLE: Setting Color Threshold for Dendrogram in Plotly\nDESCRIPTION: This snippet shows how to create a dendrogram with a specific color threshold. It uses the color_threshold parameter in the create_dendrogram function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nX = np.random.rand(15, 15)\ndendro = ff.create_dendrogram(X, color_threshold=1.5)\ndendro['layout'].update({'width':800, 'height':500})\npy.iplot(dendro, filename='simple_dendrogram_with_color_threshold')\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid for Plotly Animated Bubble Chart\nDESCRIPTION: This code creates a grid for the animated chart by organizing data by year and continent. It prepares the data structure required for Plotly's v2 API animations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nyears_from_col = set(dataset['year'])\nyears_ints = sorted(list(years_from_col))\nyears = [str(year) for year in years_ints]\nyears.remove('1957')\n\n# make list of continents\ncontinents = []\nfor continent in dataset['continent']:\n    if continent not in continents: \n        continents.append(continent)\n\ncolumns = []\n# make grid\nfor year in years:\n    for continent in continents:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]\n        for col_name in dataset_by_year_and_cont:\n            # each column name is unique\n            column_name = '{year}_{continent}_{header}_gapminder_grid'.format(\n                year=year, continent=continent, header=col_name\n            )\n            a_column = Column(list(dataset_by_year_and_cont[col_name]), column_name)\n            columns.append(a_column)\n\n# upload grid\ngrid = Grid(columns)\nurl = py.grid_ops.upload(grid, 'gapminder_grid'+str(time.time()), auto_open=False)\nurl\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Sliders with Plotly Chart\nDESCRIPTION: Creates an interactive plot with two synchronized sliders controlling the x-axis range. Uses linked sliders to maintain valid range selection and updates the plot in real-time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/slider_example.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport ipywidgets as widgets\n\nfrom ipywidgets import interact, interactive, fixed\nfrom IPython.core.display import HTML\nfrom IPython.display import display, clear_output\nfrom plotly.widgets import GraphWidget\nfrom traitlets import link\n\n\nstyles = '''<style>.widget-hslider { width: 100%; }\n    .widget-hbox { width: 100% !important; }\n    .widget-slider { width: 100% !important; }</style>'''\n\nHTML(styles)\n\n#this widget will display our plotly chart\ngraph = GraphWidget(\"https://plotly.com/~jordanpeterson/889\")\nfig = py.get_figure(\"https://plotly.com/~jordanpeterson/889\")\n\n#find the range of the slider.\nxmin, xmax = fig['layout']['xaxis']['range']\n\n# let's define our listener functions that will respond to changes in the sliders\ndef on_value_change_left(change):\n    graph.relayout({'xaxis.range[0]': change['new']})\n    \ndef on_value_change_right(change):\n    graph.relayout({'xaxis.range[1]': change['new']})\n    \n# define the sliders\nleft_slider = widgets.FloatSlider(min=xmin, max=xmax, value=xmin, description=\"Left Slider\")\nright_slider = widgets.FloatSlider(min=xmin, max=xmax, value=xmax, description=\"Right Slider\")\n\n# put listeners on slider activity\nleft_slider.observe(on_value_change_left, names='value')\nright_slider.observe(on_value_change_right, names='value')\n\n# set a relationship between the left and right slider\nlink((left_slider, 'max'), (right_slider, 'value'))\nlink((left_slider, 'value'), (right_slider, 'min'))\n\n# display our app\ndisplay(left_slider)\ndisplay(right_slider)\ndisplay(graph)\n```\n\n----------------------------------------\n\nTITLE: Creating a Subplot Grid for Scatter Matrix\nDESCRIPTION: This code creates a 6x6 grid of subplots using Plotly's get_subplots() function. The grid will be used to create a scatter matrix comparing all combinations of stock tickers against each other, with minimal spacing between plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig = plotly_tools.get_subplots(rows=6, columns=6, print_grid=True, horizontal_spacing= 0.05, vertical_spacing= 0.05)\n```\n\n----------------------------------------\n\nTITLE: Implementing Triangular Moving Average Smoothing with Plotly\nDESCRIPTION: Defines a custom function to perform triangular moving average smoothing and creates a visualization comparing original data, noisy data, and smoothed data. The implementation uses a triangular window of weights to compute weighted averages across the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/smoothing/python-Smoothing.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef smoothTriangle(data, degree, dropVals=False):\n    triangle=np.array(list(range(degree)) + [degree] + list(range(degree)[::-1])) + 1\n    smoothed=[]\n\n    for i in range(degree, len(data) - degree * 2):\n        point=data[i:i + len(triangle)] * triangle\n        smoothed.append(sum(point)/sum(triangle))\n    if dropVals:\n        return smoothed\n    smoothed=[smoothed[0]]*int(degree + degree/2) + smoothed\n    while len(smoothed) < len(data):\n        smoothed.append(smoothed[-1])\n    return smoothed\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    marker=dict(\n        size=2,\n        color='rgb(0, 0, 0)',\n    ),\n    name='Sine'\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=y_noise,\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#5E88FC',\n        symbol='circle-open'\n    ),\n    name='Noisy Sine'\n)\n\ntrace3 = go.Scatter(\n    x=x,\n    y=smoothTriangle(y_noise, 10),  # setting degree to 10\n    mode='markers',\n    marker=dict(\n        size=6,\n        color='#C190F0',\n        symbol='triangle-up'\n    ),\n    name='Moving Triangle - Degree 10'\n)\n\nlayout = go.Layout(\n    showlegend=True\n)\n\ndata = [trace1, trace2, trace3]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='smoothing-triangular-moving-average-degree-10')\n```\n\n----------------------------------------\n\nTITLE: Populating Table on Plotly Scatter Selection (Python)\nDESCRIPTION: This code snippet demonstrates how to create a scatter plot using Plotly's `go.FigureWidget` and a table that updates its content based on the selected points in the scatter plot. It uses `pandas` for data handling and `ipywidgets` for interactive controls. The table displays 'ID', 'Classification', 'Driveline', and 'Hybrid' columns for selected points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/selection-events-figure-widget.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\nimport pandas as pd\nimport numpy as np\nfrom ipywidgets import interactive, HBox, VBox\n\npy.init_notebook_mode()\n\ndf = pd.read_csv('https://raw.githubusercontent.com/jonmmease/plotly_ipywidget_notebooks/master/notebooks/data/cars/cars.csv')\n\nf = go.FigureWidget([go.Scatter(y = df['City mpg'], x = df['City mpg'], mode = 'markers')])\nscatter = f.data[0]\nN = len(df)\nscatter.x = scatter.x + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())\nscatter.y = scatter.y + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())\nscatter.marker.opacity = 0.5\n\ndef update_axes(xaxis, yaxis):\n    scatter = f.data[0]\n    scatter.x = df[xaxis]\n    scatter.y = df[yaxis]\n    with f.batch_update():\n        f.layout.xaxis.title = xaxis\n        f.layout.yaxis.title = yaxis\n        scatter.x = scatter.x + np.random.rand(N)/10 *(df[xaxis].max() - df[xaxis].min())\n        scatter.y = scatter.y + np.random.rand(N)/10 *(df[yaxis].max() - df[yaxis].min())\n    \naxis_dropdowns = interactive(update_axes, yaxis = df.select_dtypes('int64').columns, xaxis = df.select_dtypes('int64').columns)\n\n# Create a table FigureWidget that updates on selection from points in the scatter plot of f\nt = go.FigureWidget([go.Table(\n    header=dict(values=['ID','Classification','Driveline','Hybrid'],\n                fill = dict(color='#C2D4FF'),\n                align = ['left'] * 5),\n    cells=dict(values=[df[col] for col in ['ID','Classification','Driveline','Hybrid']],\n               fill = dict(color='#F5F8FF'),\n               align = ['left'] * 5))])\n\ndef selection_fn(trace,points,selector):\n    t.data[0].cells.values = [df.loc[points.point_inds][col] for col in ['ID','Classification','Driveline','Hybrid']]\n\nscatter.on_selection(selection_fn)\n\n# Put everything together\nVBox((HBox(axis_dropdowns.children),f,t))\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading Plotly Grid for MRI Data in Python\nDESCRIPTION: This code creates a Plotly grid with columns for each MRI slice and uploads it to Plotly. It generates unique column names for z-values and surface colors for each frame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_columns = []\nnr_frames = 68\nfor k in range(nr_frames):\n    my_columns.extend(\n        [Column((6.7 - k * 0.1) * np.ones((r, c)), 'z{}'.format(k + 1)),\n         Column(np.flipud(volume[67 - k]), 'surfc{}'.format(k + 1))]\n    )\ngrid = Grid(my_columns)\npy.grid_ops.upload(grid, 'anim_sliceshead'+str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Ping Pong Plot\nDESCRIPTION: Implementation of an animated plot using grid references and frame definitions. Includes configuration for animation controls and layout settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfigure = {\n    'data': [\n        {\n            'xsrc': grid.get_column_reference('x'),\n            'ysrc': grid.get_column_reference('y'),\n            'mode': 'markers',\n        }\n    ],\n    'layout': {'title': 'Ping Pong Animation',\n               'xaxis': {'range': [0, 2], 'autorange': False},\n               'yaxis': {'range': [0, 2], 'autorange': False},\n               'updatemenus': [{\n                   'buttons': [\n                       {'args': [None],\n                        'label': 'Play',\n                        'method': 'animate'}\n               ],\n               'pad': {'r': 10, 't': 87},\n               'showactive': False,\n               'type': 'buttons'\n                }]},\n    'frames': [\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x2'),\n                    'ysrc': grid.get_column_reference('y2'),\n                    'mode': 'markers',\n                }\n            ]\n        },\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x'),\n                    'ysrc': grid.get_column_reference('y'),\n                    'mode': 'markers',\n                }\n            ]\n        }\n    ]\n}\n\npy.icreate_animations(figure, 'ping_pong'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Generating Q-Q Plot Data\nDESCRIPTION: Creates Q-Q plot data using statsmodels to compare sample distribution against theoretical normal distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom statsmodels.graphics.gofplots import qqplot\n\nqqplot_data = qqplot(gauss_data, line='s').gca().lines\n```\n\n----------------------------------------\n\nTITLE: Interpolation in Line Plots with Plotly in Python\nDESCRIPTION: This snippet demonstrates various interpolation methods for line plots using Plotly. It showcases different line shapes including linear, spline, vhv, hvh, vh, and hv.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 3, 2, 3, 1],\n    mode='lines+markers',\n    name=\"'linear'\",\n    hoverinfo='name',\n    line=dict(\n        shape='linear'\n    )\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[6, 8, 7, 8, 6],\n    mode='lines+markers',\n    name=\"'spline'\",\n    text=[\"tweak line smoothness<br>with 'smoothing' in line object\"],\n    hoverinfo='text+name',\n    line=dict(\n        shape='spline'\n    )\n)\ntrace3 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[11, 13, 12, 13, 11],\n    mode='lines+markers',\n    name=\"'vhv'\",\n    hoverinfo='name',\n    line=dict(\n        shape='vhv'\n    )\n)\ntrace4 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[16, 18, 17, 18, 16],\n    mode='lines+markers',\n    name=\"'hvh'\",\n    hoverinfo='name',\n    line=dict(\n        shape='hvh'\n    )\n)\ntrace5 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[21, 23, 22, 23, 21],\n    mode='lines+markers',\n    name=\"'vh'\",\n    hoverinfo='name',\n    line=dict(\n        shape='vh'\n    )\n)\ntrace6 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[26, 28, 27, 28, 26],\n    mode='lines+markers',\n    name=\"'hv'\",\n    hoverinfo='name',\n    line=dict(\n        shape='hv'\n    )\n)\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\nlayout = dict(\n    legend=dict(\n        y=0.5,\n        traceorder='reversed',\n        font=dict(\n            size=16\n        )\n    )\n)\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='line-shapes')\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram of Wind Speed Standard Deviation with Plotly in Python\nDESCRIPTION: This snippet creates a histogram of the '10 Min Std Dev' column from the wind speed data. It uses Plotly's go.Histogram object to visualize the probability distribution of the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Histogram(\n        x=wind_data['10 Min Std Dev'],\n        histnorm='probability'\n    )\n]\npy.iplot(data, filename='wind-data-histogram')\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Heatmap with Custom Text and Labels in Plotly\nDESCRIPTION: Shows how to create an annotated heatmap with custom annotation text, x-axis labels, and y-axis labels to make the heatmap more informative and contextual.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nz = [[.1, .3, .5],  \n     [1.0, .8, .6],\n     [.6, .4, .2]]\n\nx = ['Team A', 'Team B', 'Team C']\ny = ['Game Three', 'Game Two', 'Game One']\n\nz_text = [['Win', 'Lose', 'Win'],  \n          ['Lose', 'Lose', 'Win'],\n          ['Win', 'Win', 'Lose']]\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='Viridis')\npy.iplot(fig, filename='annotated_heatmap_text')\n```\n\n----------------------------------------\n\nTITLE: Creating Gene Interaction Network - Python\nDESCRIPTION: This snippet constructs a network graph of gene interactions using data from a specified URL in tab-separated format. It leverages the NetworkX and Plotly libraries to visualize interactions, providing tools for analyzing connections between genes. It requires the 'networkx' and 'plotly' libraries along with the format of the input data being maintained.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nx = np.genfromtxt('http://figshare.com/download/file/2088824', delimiter=\"\\t\", names=True, usecols=[0,1,14],\n                  dtype=['S5','S5','f8'])\nlabels = x.dtype.names\n\nG=nx.Graph()\nG.add_weighted_edges_from(x)\n\npos=nx.spring_layout(G)\n\nedge_trace = Scatter(x=[], y=[], mode='lines')\nfor edge in G.edges():\n    x0, y0 = pos[edge[0]] \n    x1, y1 = pos[edge[1]] \n    edge_trace['x'] += [x0, x1, None]\n    edge_trace['y'] += [y0, y1, None]\n\nnode_trace = Scatter(x=[], y=[], mode='markers+text',\n                     text=G.nodes(),\n                     textposition='top',\n                     marker=Marker(size=10))\nfor node in G.nodes():\n    x, y = pos[node]\n    node_trace['x'].append(x)\n    node_trace['y'].append(y)\n   \nfig = Figure(data=Data([edge_trace, node_trace]),\n             layout=Layout(title='AINX_HUMAN interaction network',\n                           showlegend=False, xaxis=XAxis(showgrid=False, zeroline=False, showticklabels=False),\n                           yaxis=YAxis(showgrid=False, zeroline=False, showticklabels=False)))\n\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart with Plotly in Python\nDESCRIPTION: This code demonstrates how to create a stacked bar chart comparing animal populations between two zoos using Plotly in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = go.Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n```\n\n----------------------------------------\n\nTITLE: Creating US Map Small Multiples with Plotly in Python\nDESCRIPTION: Code that visualizes Walmart store growth from 1962-2006 across the US using small multiple maps. It loads store location data, configures map layouts for each year, and adds sparkline visualizations showing the rate of store openings and cumulative total.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/map-subplots/map-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv')\ndf.head()\n\ndata = []\nlayout = dict(\n    title = 'New Walmart Stores per year 1962-2006<br>\\\nSource: <a href=\"http://www.econ.umn.edu/~holmes/data/WalMart/index.html\">\\\nUniversity of Minnesota</a>',\n    # showlegend = False,\n    autosize = False,\n    width = 1000,\n    height = 900,\n    hovermode = False,\n    legend = dict(\n        x=0.7,\n        y=-0.1,\n        bgcolor=\"rgba(255, 255, 255, 0)\",\n        font = dict( size=11 ),\n    )\n)\nyears = df['YEAR'].unique()\n\nfor i in range(len(years)):\n    geo_key = 'geo'+str(i+1) if i != 0 else 'geo'\n    lons = list(df[ df['YEAR'] == years[i] ]['LON'])\n    lats = list(df[ df['YEAR'] == years[i] ]['LAT'])\n    # Walmart store data\n    data.append(\n        dict(\n            type = 'scattergeo',\n            showlegend=False,\n            lon = lons,\n            lat = lats,\n            geo = geo_key,\n            name = years[i],\n            marker = dict(\n                color = \"rgb(0, 0, 255)\",\n                opacity = 0.5\n            )\n        )\n    )\n    # Year markers\n    data.append(\n        dict(\n            type = 'scattergeo',\n            showlegend = False,\n            lon = [-78],\n            lat = [47],\n            geo = geo_key,\n            text = [years[i]],\n            mode = 'text',\n        )\n    )\n    layout[geo_key] = dict(\n        scope = 'usa',\n        showland = True,\n        landcolor = 'rgb(229, 229, 229)',\n        showcountries = False,\n        domain = dict( x = [], y = [] ),\n        subunitcolor = \"rgb(255, 255, 255)\",\n    )\n\n\ndef draw_sparkline( domain, lataxis, lonaxis ):\n    ''' Returns a sparkline layout object for geo coordinates  '''\n    return dict(\n        showland = False,\n        showframe = False,\n        showcountries = False,\n        showcoastlines = False,\n        domain = domain,\n        lataxis = lataxis,\n        lonaxis = lonaxis,\n        bgcolor = 'rgba(255,200,200,0.0)'\n    )\n\n# Stores per year sparkline\nlayout['geo44'] = draw_sparkline({'x':[0.6,0.8], 'y':[0,0.15]}, \\\n                                 {'range':[-5.0, 30.0]}, {'range':[0.0, 40.0]} )\ndata.append(\n    dict(\n        type = 'scattergeo',\n        mode = 'lines',\n        lat = list(df.groupby(by=['YEAR']).count()['storenum']/1e1),\n        lon = range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1)),\n        line = dict( color = \"rgb(0, 0, 255)\" ),\n        name = \"New stores per year<br>Peak of 178 stores per year in 1990\",\n        geo = 'geo44',\n    )\n)\n\n# Cumulative sum sparkline\nlayout['geo45'] = draw_sparkline({'x':[0.8,1], 'y':[0,0.15]}, \\\n                                 {'range':[-5.0, 50.0]}, {'range':[0.0, 50.0]} )\ndata.append(\n    dict(\n        type = 'scattergeo',\n        mode = 'lines',\n        lat = list(df.groupby(by=['YEAR']).count().cumsum()['storenum']/1e2),\n        lon = range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1)),\n        line = dict( color = \"rgb(214, 39, 40)\" ),\n        name =\"Cumulative sum<br>3176 stores total in 2006\",\n        geo = 'geo45',\n    )\n)\n\nz = 0\nCOLS = 5\nROWS = 9\nfor y in reversed(range(ROWS)):\n    for x in range(COLS):\n        geo_key = 'geo'+str(z+1) if z != 0 else 'geo'\n        layout[geo_key]['domain']['x'] = [float(x)/float(COLS), float(x+1)/float(COLS)]\n        layout[geo_key]['domain']['y'] = [float(y)/float(ROWS), float(y+1)/float(ROWS)]\n        z=z+1\n        if z > 42:\n            break\n\nfig = { 'data':data, 'layout':layout }\npy.iplot( fig, filename='US Walmart growth', height=900, width=1000 )\n```\n\n----------------------------------------\n\nTITLE: Creating a Filtered Scatter Plot with Plotly in Python\nDESCRIPTION: This example shows how to create a scatter plot using Plotly's offline mode in Python. It includes data transformation to filter points based on a condition (scores > 4) and demonstrates basic plot customization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/filter/filter.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\noff.init_notebook_mode(connected=True)\n\nsubject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']\nscore = [1,6,2,8,2,9,4,5,1,5,2,8]\n\ndata = [dict(\n  type = 'scatter',\n  x = subject,\n  y = score,\n  mode = 'markers',\n  transforms = [dict(\n    type = 'filter',\n    target = 'y',\n    operation = '>',\n    value = 4\n  )]\n)]\n\nlayout = dict(\n    title = 'Scores > 4'\n)\n\noff.iplot({'data': data, 'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plotly Table\nDESCRIPTION: Creates a basic table with two columns showing A and B scores using Plotly's table trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Table(\n    header=dict(values=['A Scores', 'B Scores']),\n    cells=dict(values=[[100, 90, 80, 90],\n                       [95, 85, 75, 95]]))\n\ndata = [trace] \npy.iplot(data, filename = 'basic_table')\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Date Range in Time Series with Python and Plotly\nDESCRIPTION: This example shows how to manually set a date range for a time series plot of Apple stock data. It creates two traces for high and low prices and restricts the x-axis range to display data only from July through December 2016.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n\ntrace_high = go.Scatter(\n                x=df.Date,\n                y=df['AAPL.High'],\n                name = \"AAPL High\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ntrace_low = go.Scatter(\n                x=df.Date,\n                y=df['AAPL.Low'],\n                name = \"AAPL Low\",\n                line = dict(color = '#7F7F7F'),\n                opacity = 0.8)\n\ndata = [trace_high,trace_low]\n\nlayout = dict(\n    title = \"Manually Set Date Range\",\n    xaxis = dict(\n        range = ['2016-07-01','2016-12-31'])\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename = \"Manually Set Range\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Sine Wave Slider Control with Plotly\nDESCRIPTION: This snippet creates an interactive plot with a slider that controls the frequency of a sine wave. It demonstrates how to create multiple data traces and configure a slider that toggles visibility to create an interactive animation effect.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport numpy as np\n\ndata = [dict(\n        visible = False,\n        line=dict(color='00CED1', width=6),\n        name = '𝜈 = '+str(step),\n        x = np.arange(0,10,0.01),\n        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]\ndata[10]['visible'] = True\n\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',\n        args = ['visible', [False] * len(data)],\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = 10,\n    currentvalue = {\"prefix\": \"Frequency: \"},\n    pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(sliders=sliders)\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='Sine Wave Slider')\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Line Chart with Plotly\nDESCRIPTION: This code creates an interactive line chart using Plotly's graph objects. It plots the Apple stock price as scatter points and overlays a moving average line in red. The resulting chart is displayed in the notebook with iplot().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxy_data = go.Scatter( x=x, y=y, mode='markers', marker=dict(size=4), name='AAPL' )\n# vvv clip first and last points of convolution\nmov_avg = go.Scatter( x=x[5:-4], y=ma[5:-4], \\\n                  line=dict(width=2,color='red',opacity=0.5), name='Moving average' )\ndata = [xy_data, mov_avg]\n\npy.iplot(data, filename='apple stock moving average')\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data to [0,1] Interval\nDESCRIPTION: Shows how to normalize data to the [0,1] interval by dividing by the norm of the dataset and creates comparative histograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata_norm_to_0_1 = [number/scipy.linalg.norm(data) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data',\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_to_0_1,\n    opacity=0.75,\n    name='normalized to [0,1]',\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize to [0,1]')\npy.iplot(fig, filename='apple-data-normalize-0-1')\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Bullet Chart from Dictionary\nDESCRIPTION: Demonstrates creation of vertical bullet chart using a tuple of dictionaries as input data, with custom labels and performance metrics\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata = (\n  {\"label\": \"Revenue\", \"sublabel\": \"US$, in thousands\",\n   \"range\": [150, 225, 300], \"performance\": [220,270], \"point\": [250]},\n  {\"label\": \"Profit\", \"sublabel\": \"%\", \"range\": [20, 25, 30],\n   \"performance\": [21, 23], \"point\": [26]},\n  {\"label\": \"Order Size\", \"sublabel\":\"US$, average\",\"range\": [350, 500, 600],\n   \"performance\": [100,320],\"point\": [550]},\n  {\"label\": \"New Customers\", \"sublabel\": \"count\", \"range\": [1400, 2000, 2500],\n   \"performance\": [1000, 1650],\"point\": [2100]},\n  {\"label\": \"Satisfaction\", \"sublabel\": \"out of 5\",\"range\": [3.5, 4.25, 5],\n   \"performance\": [3.2, 4.7], \"point\": [4.4]}\n)\n\nfig = ff.create_bullet(\n    data, titles='label', subtitles='sublabel', markers='point',\n    measures='performance', ranges='range', orientation='v',\n)\npy.iplot(fig, filename='bullet chart from dict')\n```\n\n----------------------------------------\n\nTITLE: Filtering Noise Complaints by Hour with SQL and Plotly in Python\nDESCRIPTION: This code snippet filters the data for noise-related complaints, groups them by hour, and visualizes the results using a Plotly bar chart. It demonstrates how to use SQL's WHERE clause with multiple conditions and how to create a more detailed chart title.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'strftime(\\'%H\\', CreatedDate) as `hour`,  '\n                               'count(*) as `Complaints per Hour`'\n                       'FROM data '\n                       'WHERE ComplaintType IN (\"Noise\", '\n                                               '\"Noise - Street/Sidewalk\", '\n                                               '\"Noise - Commercial\", '\n                                               '\"Noise - Vehicle\", '\n                                               '\"Noise - Park\", '\n                                               '\"Noise - House of Worship\", '\n                                               '\"Noise - Helicopter\", '\n                                               '\"Collection Truck Noise\") '\n                       'GROUP BY hour', disk_engine)\n\npy.iplot({\n    'data': [go.Bar(x=df['hour'], y=df['Complaints per Hour'])],\n    'layout': go.Layout(xaxis={'title': 'Hour in Day'},\n                     yaxis={'title': 'Number of Complaints'},\n                     title='Number of Noise Complaints in NYC by Hour in Day'\n                    )}, filename='311/noise complaints per hour')\n```\n\n----------------------------------------\n\nTITLE: Positioning Legend in Plotly Chart with Python\nDESCRIPTION: This example shows how to position the legend in a Plotly chart. It uses the 'x' and 'y' parameters in the legend layout to set the legend's position relative to the plot area.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    legend=dict(x=-.1, y=1.2)\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='position-legend')\n```\n\n----------------------------------------\n\nTITLE: Reversing Axis with Min/Max in Plotly Python\nDESCRIPTION: This snippet creates a Plotly scatter plot with a reversed x-axis, specifying the minimum and maximum values for the axis range. It uses `plotly.graph_objs` to define the data and layout, including setting the `range` property within the `xaxis` dictionary to `[10, 0]` to reverse the axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.random.randint(1, 100, 100)\n\ntrace = go.Scatter(x=x, y=y, mode='markers')\ndata = [trace]\nlayout = go.Layout(title='Reversed Axis with Min/Max', xaxis=dict(range=[10, 0]))\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='example-reversed-axis-with-min-max')\n```\n\n----------------------------------------\n\nTITLE: Streaming Real-Time Data to the Plot\nDESCRIPTION: Generates and streams time-series data with random components to the plot in real-time. This code sends 200 data points at 80ms intervals, creating a smooth animation effect.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import module keep track and format current time\nimport datetime \nimport time   \n \ni = 0    # a counter\nk = 5    # some shape parameter\nN = 200  # number of points to be plotted\n\n# Delay start of stream by 5 sec (time to switch tabs)\ntime.sleep(5) \n\nwhile i<N:\n    i += 1   # add to counter\n    \n    # Current time on x-axis, random numbers on y-axis\n    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')\n    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0] \n    \n    # (-) Both x and y are numbers (i.e. not lists nor arrays)\n    \n    # (@) write to Plotly stream!\n    s.write(dict(x=x, y=y))  \n    \n    # (!) Write numbers to stream to append current data on plot,\n    #     write lists to overwrite existing data on plot (more in 7.2).\n            \n    time.sleep(0.08)  # (!) plot a point every 80 ms, for smoother plotting\n    \n# (@) Close the stream when done plotting\ns.close() \n```\n\n----------------------------------------\n\nTITLE: Percentage Tick Formatting in Plotly\nDESCRIPTION: Example of using tickformat attribute to display y-axis values as percentages.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny = [0.18, 0.38, 0.56, 0.46, 0.59, 0.4, 0.78, 0.77, 0.74, 0.42, 0.45, 0.39]\n\ntrace0 = go.Scatter(\n    x = x,\n    y = y\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    yaxis = go.layout.YAxis(\n        tickformat = '%'\n    )\n)\n\nfig = go.Figure(\n    data = data,\n    layout = layout\n)\n\npy.iplot(fig, filename='using-tickformat-attribute')\n```\n\n----------------------------------------\n\nTITLE: Creating Frequency Count Histogram\nDESCRIPTION: Creates a histogram showing raw frequency counts of the data with custom binning parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x,\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(25, 25, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Frequency Count\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-discrete-freq-count')\n```\n\n----------------------------------------\n\nTITLE: Creating Fully Opaque Markers in Scatter Plot with Plotly\nDESCRIPTION: This example shows how to create a scatter plot with fully opaque markers using Plotly. It's useful for non-overlapping markers but may not be ideal for visualizing density in overlapping points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n  \ndata = [\n    go.Scatter(\n        mode = 'markers',\n        x = x,\n        y = y,\n        marker = dict(\n          color = 'rgb(17, 157, 255)',\n          size = 20,\n          line = dict(\n            color = 'rgb(231, 99, 250)',\n            width = 2\n          )\n        ),\n        showlegend = False\n      ),\n      go.Scatter(\n          mode = 'markers',\n          x = [2,2],\n          y = [4.25,4.75],\n          marker = dict(\n            color = 'rgb(17, 157, 255)',\n            size = 80,\n            line = dict(\n              color = 'rgb(231, 99, 250)',\n              width = 8\n            )\n          ),\n          showlegend = False\n    )]\n\npy.iplot(data, filename = \"style-full-opaque\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-State Choropleth with Custom Scope in Python\nDESCRIPTION: This example demonstrates how to create a choropleth map for California and surrounding states, with custom color scaling and binning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'] == 'California']\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\n    'rgb(193, 193, 193)',\n    'rgb(239,239,239)',\n    'rgb(195, 196, 222)',\n    'rgb(144,148,194)',\n    'rgb(101,104,168)',\n    'rgb(65, 53, 132)'\n]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada', 'Oregon', ' Idaho'],\n    binning_endpoints=[14348, 63983, 134827, 426762, 2081313], colorscale=colorscale,\n    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5}, round_legend_values=True,\n    legend_title='Population by County', title='California and Nearby States'\n)\npy.iplot(fig, filename='choropleth_california_and_surr_states_outlines')\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-line Scatter Plot with Plotly in Python\nDESCRIPTION: This code creates a multi-line scatter plot using Plotly. It iterates through grouped data to create separate scatter lines for each borough, showing accident counts over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata = []\nfor g, df in date_borough_sum.reset_index().groupby('borough'):\n    data.append(Scatter(x= df.date, y=df.COUNT,name=g))\nlayout = Layout(xaxis=XAxis(title=\"Date\"), yaxis=YAxis(title=\"Accident Count\"))\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Sensor Types\nDESCRIPTION: Demonstrates how to separately select magnetometer and gradiometer channels for specialized analysis of different sensor types.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nmag_picks = mne.pick_types(raw.info, meg='mag', eog=True, exclude='bads')\ngrad_picks = mne.pick_types(raw.info, meg='grad', eog=True, exclude='bads')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Wind Rose Chart in Python with Plotly\nDESCRIPTION: Creates a wind rose chart showing wind speed distribution across different directions in Laurel, NE. The chart uses multiple barpolar traces to represent different wind speed ranges with varying colors and includes proper labeling and layout configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/wind-rose/wind-rose.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Barpolar(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='11-14 m/s',\n    marker=dict(\n        color='rgb(106,81,163)'\n    )\n)\ntrace2 = go.Barpolar(\n    r=[57.49999999999999, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.00000000000001],\n    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='8-11 m/s',\n    marker=dict(\n        color='rgb(158,154,200)'\n    )\n)\ntrace3 = go.Barpolar(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='5-8 m/s',\n    marker=dict(\n        color='rgb(203,201,226)'\n    )\n)\ntrace4 = go.Barpolar(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],\n    name='< 5 m/s',\n    marker=dict(\n        color='rgb(242,240,247)'\n    )\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    font=dict(\n        size=16\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    ),\n    radialaxis=dict(\n        ticksuffix='%'\n    ),\n    orientation=270\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-area-chart')\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Mesh Cube with Color Gradient\nDESCRIPTION: Creates a cube using Mesh3d by defining 8 vertices and manually specifying the triangular faces using i, j, k indices. The example implements a purple-green-blue color gradient based on intensity values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Mesh3d(\n        x = [0, 0, 1, 1, 0, 0, 1, 1],\n        y = [0, 1, 1, 0, 0, 1, 1, 0],\n        z = [0, 0, 0, 0, 1, 1, 1, 1],\n        colorbar = go.ColorBar(\n            title='z'\n        ),\n        colorscale = [[0, 'rgb(255, 0, 255)'],\n                    [0.5, 'rgb(0, 255, 0)'], \n                      [1, 'rgb(0, 0, 255)']],\n        intensity = [0, 0.142857142857143, 0.285714285714286, \n                     0.428571428571429, 0.571428571428571, \n                     0.714285714285714, 0.857142857142857, 1],\n        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],\n        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],\n        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],\n        name='y',\n        showscale=True\n    )\n]\nlayout = go.Layout(\n    xaxis=go.XAxis(\n        title='x'\n    ),\n    yaxis=go.YAxis(\n        title='y'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-mesh-cube-python')\n```\n\n----------------------------------------\n\nTITLE: Implementing D'Agostino's K^2 Test with Plotly Visualization in Python\nDESCRIPTION: This code implements D'Agostino's K^2 normality test using SciPy's normaltest() function and displays the results in a Plotly table. The test examines skewness and kurtosis to determine if data follows a normal distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import normaltest\n\nstat, p = normaltest(gauss_data)\n\n# interpret\nalpha = 0.05\nif p > alpha:\n    msg = 'Sample looks Gaussian (fail to reject H0)'\nelse:\n    msg = 'Sample does not look Gaussian (reject H0)'\n\nresult_mat = [\n    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],\n    [len(gauss_data), stat, p, msg]\n]\n\nnormt_table = ff.create_table(result_mat)\nnormt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]\nnormt_table['layout']['height']=200\nnormt_table['layout']['margin']['t']=50\nnormt_table['layout']['margin']['b']=50\n\npy.iplot(normt_table, filename=\"D'Agostino-test-table\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Metropolis-Hastings Algorithm in Python\nDESCRIPTION: A Python implementation of the Metropolis-Hastings algorithm with adaptive tuning of proposal variances based on acceptance rates. The algorithm decreases proposal variance by 5-10% when acceptance rates are low (<20%) and increases it by 5-10% when acceptance rates are high (>40%).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef metropolis_tuned(n_iterations, initial_values, f=calc_posterior, prop_var=1, \n                     tune_for=None, tune_interval=100):\n    \n    n_params = len(initial_values)\n            \n    # Initial proposal standard deviations\n    prop_sd = [prop_var] * n_params\n    \n    # Initialize trace for parameters\n    trace = np.empty((n_iterations+1, n_params))\n    \n    # Set initial values\n    trace[0] = initial_values\n    # Initialize acceptance counts\n    accepted = [0]*n_params\n    \n    # Calculate joint posterior for initial values\n    current_log_prob = f(*trace[0])\n    \n    if tune_for is None:\n        tune_for = n_iterations/2\n\n    for i in range(n_iterations):\n    \n        if not i%1000: print('Iteration %i' % i)\n    \n        # Grab current parameter values\n        current_params = trace[i]\n    \n        for j in range(n_params):\n    \n            # Get current value for parameter j\n            p = trace[i].copy()\n    \n            # Propose new value\n            if j==2:\n                # Ensure tau is positive\n                theta = np.exp(rnorm(np.log(current_params[j]), prop_sd[j]))\n            else:\n                theta = rnorm(current_params[j], prop_sd[j])\n            \n            # Insert new value \n            p[j] = theta\n    \n            # Calculate log posterior with proposed value\n            proposed_log_prob = f(*p)\n    \n            # Log-acceptance rate\n            alpha = proposed_log_prob - current_log_prob\n    \n            # Sample a uniform random variate\n            u = runif()\n    \n            # Test proposed value\n            if np.log(u) < alpha:\n                # Accept\n                trace[i+1,j] = theta\n                current_log_prob = proposed_log_prob\n                accepted[j] += 1\n            else:\n                # Reject\n                trace[i+1,j] = trace[i,j]\n                \n            # Tune every 100 iterations\n            if (not (i+1) % tune_interval) and (i < tune_for):\n        \n                # Calculate aceptance rate\n                acceptance_rate = (1.*accepted[j])/tune_interval\n                if acceptance_rate<0.1:\n                    prop_sd[j] *= 0.9\n                if acceptance_rate<0.2:\n                    prop_sd[j] *= 0.95\n                if acceptance_rate>0.4:\n                    prop_sd[j] *= 1.05\n                elif acceptance_rate>0.6:\n                    prop_sd[j] *= 1.1\n        \n                accepted[j] = 0\n                \n    return trace[tune_for:], accepted\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Button in Plotly Python\nDESCRIPTION: Shows how to use the update method to modify both data and layout attributes simultaneously. Creates an interactive financial chart with buttons to toggle between high and low stock prices with corresponding annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go \n\nfrom datetime import datetime\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\ndf.columns = [col.replace('AAPL.', '') for col in df.columns]\n\ntrace_high = go.Scatter(x=list(df.index),\n                        y=list(df.High),\n                        name='High',\n                        line=dict(color='#33CFA5'))\n\ntrace_high_avg = go.Scatter(x=list(df.index),\n                            y=[df.High.mean()]*len(df.index),\n                            name='High Average',\n                            visible=False,\n                            line=dict(color='#33CFA5', dash='dash'))\n\ntrace_low = go.Scatter(x=list(df.index),\n                       y=list(df.Low),\n                       name='Low',\n                       line=dict(color='#F06A6A'))\n\ntrace_low_avg = go.Scatter(x=list(df.index),\n                           y=[df.Low.mean()]*len(df.index),\n                           name='Low Average',\n                           visible=False,\n                           line=dict(color='#F06A6A', dash='dash'))\n\ndata = [trace_high, trace_high_avg, trace_low, trace_low_avg]\n\nhigh_annotations=[dict(x='2016-03-01',\n                       y=df.High.mean(),\n                       xref='x', yref='y',\n                       text='High Average:<br>'+str(df.High.mean()),\n                       ax=0, ay=-40),\n                  dict(x=df.High.idxmax(),\n                       y=df.High.max(),\n                       xref='x', yref='y',\n                       text='High Max:<br>'+str(df.High.max()),\n                       ax=0, ay=-40)]\nlow_annotations=[dict(x='2015-05-01',\n                      y=df.Low.mean(),\n                      xref='x', yref='y',\n                      text='Low Average:<br>'+str(df.Low.mean()),\n                      ax=0, ay=40),\n                 dict(x=df.High.idxmin(),\n                      y=df.Low.min(),\n                      xref='x', yref='y',\n                      text='Low Min:<br>'+str(df.Low.min()),\n                      ax=0, ay=40)]\n\nupdatemenus = list([\n    dict(type=\"buttons\",\n         active=-1,\n         buttons=list([\n            dict(label = 'High',\n                 method = 'update',\n                 args = [{'visible': [True, True, False, False]},\n                         {'title': 'Yahoo High',\n                          'annotations': high_annotations}]),\n            dict(label = 'Low',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, True]},\n                         {'title': 'Yahoo Low',\n                          'annotations': low_annotations}]),\n            dict(label = 'Both',\n                 method = 'update',\n                 args = [{'visible': [True, True, True, True]},\n                         {'title': 'Yahoo',\n                          'annotations': high_annotations+low_annotations}]),\n            dict(label = 'Reset',\n                 method = 'update',\n                 args = [{'visible': [True, False, True, False]},\n                         {'title': 'Yahoo',\n                          'annotations': []}])\n        ]),\n    )\n])\n\nlayout = dict(title='Yahoo', showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='update_button')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Carpet Plot in Python with Plotly\nDESCRIPTION: This code creates a basic carpet plot using Plotly in Python. It sets up the y-coordinates but omits x-coordinates, resulting in a cheater plot that requires additional parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n)\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\nurl = py.plot(fig, filename = \"carpet/basic\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Sales Pipeline Visualization with Scatter Bubbles\nDESCRIPTION: Creates and displays an interactive scatter plot visualization of the sales pipeline showing open opportunities by close date, amount, and probability (bubble size) grouped by owner.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndata = scatters\nlayout = go.Layout(\n    title='Open Large Deals',\n    xaxis=dict(\n        title='Close Date'\n    ),\n    yaxis=dict(\n        title='Deal Amount',\n        showgrid=False\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='salesforce/open-large-deals-scatter')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Polar Chart Subplots\nDESCRIPTION: Demonstrates how to create multiple polar chart subplots with different configurations. Includes examples of various scatter polar plots with different data types, units, and styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatterpolar(\n        r = [1, 2, 3],\n        theta = [50, 100, 200],\n        marker = dict(symbol = \"square\")\n    ), \n    go.Scatterpolar(\n        r = [1, 2, 3],\n        theta = [1, 2, 3],\n        thetaunit = \"radians\"\n    ), \n    go.Scatterpolar(\n        r = [\"a\", \"b\", \"c\", \"b\"],\n        theta = [\"D\", \"C\", \"B\", \"A\"],\n        subplot = \"polar2\"\n    ), \n    go.Scatterpolar(\n        r = [50, 300, 900],\n        theta = [0, 90, 180],\n        subplot = \"polar3\"\n    ), \n    go.Scatterpolar(\n        mode = \"lines\",\n        r = [3, 3, 4, 3],\n        theta = [0, 45, 90, 270],\n        fill = \"toself\",\n        subplot = \"polar4\"\n    )\n]\n    \nlayout = go.Layout(\n    polar = dict(\n      domain = dict(\n        x = [0, 0.46],\n        y = [0.56, 1]\n      ),\n      radialaxis = dict(\n        range = [1, 4]\n      ),\n      angularaxis = dict(\n        thetaunit = \"radians\"\n      )\n    ),\n    polar2 =dict(\n      domain = dict(\n        x = [0, 0.46],\n        y = [0, 0.42]\n      )\n    ),\n    polar3 = dict(\n      domain = dict(\n        x = [0.54, 1],\n        y = [0.56, 1]\n      ),\n      radialaxis = dict(\n        type = \"log\",\n        tickangle = 45\n      ),\n      sector = [0, 180]\n    ),\n    polar4 = dict(\n      domain = dict(\n        x = [0.54, 1],\n        y = [0, 0.44]\n      ),\n      radialaxis = dict(\n          visible = False,\n          range = [0, 6]\n      )\n    ),\n    showlegend = False\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename='polar-subplot')\n```\n\n----------------------------------------\n\nTITLE: Initializing Figure Layout for Plotly Animated Bubble Chart\nDESCRIPTION: This snippet sets up the basic layout for the animated bubble chart, including axis properties and plot background color.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': [],\n    'config': {'scrollzoom': True}\n}\n\n# fill in most of layout\nfigure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy', 'gridcolor': '#FFFFFF'}\nfigure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log', 'gridcolor': '#FFFFFF'}\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['plot_bgcolor'] = 'rgb(223, 232, 243)'\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Candlestick Chart with Pandas in Plotly\nDESCRIPTION: Demonstrates how to create a basic candlestick chart using Plotly and Pandas. The example loads Apple stock data from a CSV file and plots open, high, low, and close values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\ndata = [trace]\npy.iplot(data, filename='simple_candlestick')\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Line Chart of Sales by Category with Plotly\nDESCRIPTION: Python code that creates a single line chart with multiple series using Plotly. Each line represents sales data for a different event category over time, allowing for direct comparison between categories on the same axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndata = []\nfor name, g in df.groupby(\"category_name\"):\n    data.append(go.Scatter(\n            name=name,\n            x=g.caldate,\n            y=g.quantity_sold\n        ))\n\nfig = go.Figure()\nfig['layout'].update(title=\"Event Sales Per Day By Category\")\nfig['data'] += data\npy.iplot(fig, filename='redshift/Event Sales Per Day by Category')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Click Events in Plotly Python\nDESCRIPTION: This code creates a scatter plot using Plotly's FigureWidget and implements a click callback function to update point appearance when clicked. When a point is clicked, its color changes to light green and its size increases from 10 to 20.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-click-event.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.rand(100)\ny = np.random.rand(100)\n\nf = go.FigureWidget([go.Scatter(x=x, y=y, mode='markers')])\n\nscatter = f.data[0]\ncolors = ['#a3a7e4'] * 100\nscatter.marker.color = colors\nscatter.marker.size = [10] * 100\nf.layout.hovermode = 'closest'\n\n\n# create our callback function\ndef update_point(trace, points, selector):\n    c = list(scatter.marker.color)\n    s = list(scatter.marker.size)\n    for i in points.point_inds:\n        c[i] = '#bae2be'\n        s[i] = 20\n        scatter.marker.color = c\n        scatter.marker.size = s\n\n\nscatter.on_click(update_point)\n\nf\n```\n\n----------------------------------------\n\nTITLE: Styling A and B Axes in Carpet Plot with Plotly Python\nDESCRIPTION: This snippet shows how to style the A and B axes of a carpet plot using Plotly in Python. It customizes colors, grid properties, and tick labels for both axes, and sets a black background for the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        ticksuffix = 'm',\n        smoothing = 1,\n        minorgridcount = 9,\n        minorgridwidth = 0.6,\n        minorgridcolor = 'white',\n        gridcolor = 'white',\n        color = 'white'\n    ),\n    baxis = dict(\n        ticksuffix = 'Pa',\n        smoothing = 1,\n        minorgridcount = 9,\n        minorgridwidth = 0.6,\n        gridcolor = 'white',\n        minorgridcolor = 'white',\n        color = 'white'\n    )\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    plot_bgcolor = 'black', \n    paper_bgcolor = 'black',\n    xaxis = dict(\n        showgrid = False, \n        showticklabels = False\n    ),\n    yaxis = dict(\n        showgrid = False, \n        showticklabels = False\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = \"carpet/styled\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to WebP Format\nDESCRIPTION: Illustrates the process of exporting a Plotly figure to WebP format using the write_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.webp')\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Legend in Plotly with Python\nDESCRIPTION: This example shows how to create a basic Plotly chart with multiple traces, which automatically displays a legend. It uses the Scatter plot type to create two line plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data)\n\npy.iplot(fig, filename='default-legend')\n```\n\n----------------------------------------\n\nTITLE: Performing Singular Value Decomposition\nDESCRIPTION: Implements SVD on standardized data as an alternative to eigendecomposition for improved computational efficiency.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nu,s,v = np.linalg.svd(X_std.T)\nu\n```\n\n----------------------------------------\n\nTITLE: Plotting Opportunity Amount Histogram with Plotly\nDESCRIPTION: Visualizes the distribution of opportunity amounts using the previously created histogram object and displays it in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npy.iplot([hist1], filename='salesforce/opportunity-probability-histogram')\n```\n\n----------------------------------------\n\nTITLE: Drawing SVG Paths with Plotly Shapes\nDESCRIPTION: This snippet demonstrates how to create various SVG path shapes in Plotly, including quadratic and cubic Bezier curves, filled triangles, and filled polygons. Each shape is defined using SVG path commands and styled with different colors and fill options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[2, 1, 8, 8],\n    y=[0.25, 9, 2, 6],\n    text=['Filled Triangle',\n          'Filled Polygon',\n          'Quadratic Bezier Curves',\n          'Cubic Bezier Curves'],\n    mode='text',\n)\ndata = [trace0]\nlayout = {\n\n    'xaxis': {\n        'range': [0, 9],\n        'zeroline': False,\n    },\n    'yaxis': {\n        'range': [0, 11],\n        'showgrid': False,\n    },\n    'shapes': [\n        # Quadratic Bezier Curves\n        {\n            'type': 'path',\n            'path': 'M 4,4 Q 6,0 8,4',\n            'line': {\n                'color': 'rgb(93, 164, 214)',\n            },\n        },\n        # Cubic Bezier Curves\n        {\n            'type': 'path',\n            'path': 'M 1,4 C 2,8 6,4 8,8',\n            'line': {\n                'color': 'rgb(207, 114, 255)',\n            },\n        },\n        # filled Triangle\n        {\n            'type': 'path',\n            'path': ' M 1 1 L 1 3 L 4 1 Z',\n            'fillcolor': 'rgba(44, 160, 101, 0.5)',\n            'line': {\n                'color': 'rgb(44, 160, 101)',\n            },\n        },\n        # filled Polygon\n        {\n            'type': 'path',\n            'path': ' M 3,7 L2,8 L2,9 L3,10, L4,10 L5,9 L5,8 L4,7 Z',\n            'fillcolor': 'rgba(255, 140, 184, 0.5)',\n            'line': {\n                'color': 'rgb(255, 140, 184)',\n            },\n        },\n\n    ]\n}\nfig = {\n    'data': data,\n    'layout': layout,\n}\npy.iplot(fig, filename='shapes-path')\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting 2D Kernel Density Plot with Plotly in Python\nDESCRIPTION: This code creates a 2D kernel density plot using the previously defined functions and data from the first Excel file, then plots it using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nN=200\na,b=(5,11)\nfig=make_kdeplot(dfc['multiannual'], dfc['bachelor-th'], (a,b), (a,b), \n                 N, cubehelix_cs,'kde plot of two sets of data' )\n\npy.sign_in('empet', 'my_api_key')\npy.iplot(fig, filename='kde-2D-CSCE')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dot Plot with Plotly in Python\nDESCRIPTION: This code creates a basic dot plot showing gender earnings disparity across different schools. It uses Plotly's graph objects to define data traces and layout, then plots the figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/dot/dot.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = {\"x\": [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112], \n          \"y\": [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n                \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n                \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"], \n          \"marker\": {\"color\": \"pink\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"name\": \"Women\", \n          \"type\": \"scatter\"\n}\n\ntrace2 = {\"x\": [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165], \n          \"y\": [\"Brown\", \"NYU\", \"Notre Dame\", \"Cornell\", \"Tufts\", \"Yale\",\n                \"Dartmouth\", \"Chicago\", \"Columbia\", \"Duke\", \"Georgetown\",\n                \"Princeton\", \"U.Penn\", \"Stanford\", \"MIT\", \"Harvard\"], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"name\": \"Men\", \n          \"type\": \"scatter\", \n}\n\ndata = [trace1, trace2]\nlayout = {\"title\": \"Gender Earnings Disparity\", \n          \"xaxis\": {\"title\": \"Annual Salary (in thousands)\", }, \n          \"yaxis\": {\"title\": \"School\"}}\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filenmae='basic_dot-plot')\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Table and Chart Layout\nDESCRIPTION: This code creates a layout with a table and chart side by side. It initializes a table with hockey team statistics, creates line charts for goals metrics, configures the subplot layout with horizontal arrangement, and sets titles and margins.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0], \n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['LA Kings', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n\nfigure = ff.create_table(table_data, height_constant=60)\n\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]\n\ntrace1 = go.Scatter(x=teams, y=GFPG,\n                    marker=dict(color='#0099ff'),\n                    name='Goals For<br>Per Game',\n                    xaxis='x2', yaxis='y2')\ntrace2 = go.Scatter(x=teams, y=GAPG,\n                    marker=dict(color='#404040'),\n                    name='Goals Against<br>Per Game',\n                    xaxis='x2', yaxis='y2')\n\nfigure.add_traces([trace1, trace2])\n\n# initialize xaxis2 and yaxis2\nfigure['layout']['xaxis2'] = {}\nfigure['layout']['yaxis2'] = {}\n\n# Edit layout for subplots\nfigure.layout.xaxis.update({'domain': [0, .5]})\nfigure.layout.xaxis2.update({'domain': [0.6, 1.]})\n\n# The graph's yaxis MUST BE anchored to the graph's xaxis\nfigure.layout.yaxis2.update({'anchor': 'x2'})\nfigure.layout.yaxis2.update({'title': 'Goals'})\n\n# Update the margins to add a title and see graph x-labels. \nfigure.layout.margin.update({'t':50, 'b':100})\nfigure.layout.update({'title': '2016 Hockey Stats'})\n\npy.iplot(figure, filename='subplot_table')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Plotly Graphs Using lapply in R\nDESCRIPTION: This snippet demonstrates how to create multiple plotly graphs in R Markdown using the lapply function. It generates three histograms with random normal data and combines them into a single HTML output using htmltools::tagList.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\n\nhtmltools::tagList(lapply(1:3, function(x) { plot_ly(x = rnorm(10)) }))\n```\n\n----------------------------------------\n\nTITLE: Creating Grid for Bivariate Normal Distribution Heatmap in Python\nDESCRIPTION: This code creates a grid for an animated heatmap of bivariate normal distributions. It defines helper functions, sets up color scales, and generates data for different correlation values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/heatmap/heatmap.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nimport time\nimport numpy as np\nfrom scipy.stats import multivariate_normal as Nd\n\ncolorscale = [\n    [0.0, 'rgb(25, 23, 10)'], \n    [0.05, 'rgb(69, 48, 44)'],\n    [0.1, 'rgb(114, 52, 47)'],\n    [0.15, 'rgb(155, 58, 49)'],\n    [0.2, 'rgb(194, 70, 51)'],\n    [0.25, 'rgb(227, 91, 53)'],\n    [0.3, 'rgb(250, 120, 56)'],\n    [0.35, 'rgb(255, 152, 60)'],\n    [0.4, 'rgb(255, 188, 65)'],\n    [0.45, 'rgb(236, 220, 72)'],\n    [0.5, 'rgb(202, 243, 80)'],\n    [0.55, 'rgb(164, 252, 93)'],\n    [0.6, 'rgb(123, 245, 119)'],\n    [0.65, 'rgb(93, 225, 162)'],\n    [0.7, 'rgb(84, 196, 212)'],\n    [0.75, 'rgb(99, 168, 238)'],\n    [0.8, 'rgb(139, 146, 233)'],\n    [0.85, 'rgb(190, 139, 216)'],\n    [0.9, 'rgb(231, 152, 213)'],\n    [0.95, 'rgb(241, 180, 226)'],\n    [1.0, 'rgb(206, 221, 250)']\n]\n\n# returns V=(X,Y)~N(m, Sigma)\ndef bivariate_N(m=[0., 0.], stdev=[1.0, 1.0], rho=0):\n    cov = rho*stdev[0] * stdev[1] # covariance(X,Y)\n    Sigma = np.array([[stdev[0]**2, cov], [cov, stdev[1]**2]]) # covariance  matrix \n    return Nd(mean=m, cov=Sigma) # joint distribution of (X,Y), of mean  vector, m, and cov matrix, Sigma\n\n# returns the pdf of the bivariate normal distribution\ndef pdf_bivariate_N(m, stdev, V):\n    X = np.linspace(m[0] - 3*stdev[0], m[0] + 3*stdev[0], 100)\n    Y = np.linspace(m[1] - 3*stdev[1], m[1] + 3*stdev[1], 100)\n    x, y = np.meshgrid(X, Y)\n    pos = np.empty(x.shape + (2, ))\n    pos[:, :, 0] = x; pos[:, :, 1] = y\n    z = V.pdf(pos)\n    return X, Y, z\n\ncorrels=[-0.95, -0.85, -0.75, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.75, 0.85, 0.95]\n\nm=[0., 0.]\nstdev=[1., 1.]\nV=bivariate_N()\nx, y=pdf_bivariate_N(m, stdev,  V)[:2]\nmy_columns=[Column(x, 'x'), Column(y, 'y')]\nzvmax=[]\nfor k, rho in enumerate(correls):\n    V = bivariate_N(rho = rho)\n    z = pdf_bivariate_N(m, stdev, V)[2]\n    zvmax.append(np.max(z))\n    my_columns.append(Column(z, 'z{}'.format(k + 1)))\ngrid = Grid(my_columns)\npy.grid_ops.upload(grid, 'norm-bivariate1'+str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Cone Trisurf Plot with Diverging Colormap\nDESCRIPTION: Generates a 3D light cone visualization using trisurf with a custom colormap based on distance from the x-axis. The example demonstrates customized grid color, aspect ratio, and background settings along with a diverging colormap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as FF\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.spatial import Delaunay\n\nu = np.linspace(-np.pi, np.pi, 30)\nv = np.linspace(-np.pi, np.pi, 30)\nu, v = np.meshgrid(u,v)\nu = u.flatten()\nv = v.flatten()\n\nx = u\ny = u*np.cos(v)\nz = u*np.sin(v)\n\npoints2D = np.vstack([u,v]).T\ntri = Delaunay(points2D)\nsimplices = tri.simplices\n\n# define a function for the color assignment\ndef dist_from_x_axis(x, y, z):\n    return x\n\nfig1 = FF.create_trisurf(x=x, y=y, z=z,\n                         colormap=['rgb(255, 155, 120)', 'rgb(255, 153, 255)', ],\n                         show_colorbar=True,\n                         simplices=simplices, title=\"Light Cone\",\n                         showbackground=False, gridcolor='rgb(255, 20, 160)',\n                         plot_edges=False, aspectratio=dict(x=1, y=1, z=0.75))\npy.iplot(fig1, filename=\"Light Cone\")\n```\n\n----------------------------------------\n\nTITLE: Creating Bubble Charts with Colorscale\nDESCRIPTION: Implementation of a bubble chart using a continuous color scale for markers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    {\n        'x': [1, 3.2, 5.4, 7.6, 9.8, 12.5],\n        'y': [1, 3.2, 5.4, 7.6, 9.8, 12.5],\n        'mode': 'markers',\n        'marker': {\n            'color': [120, 125, 130, 135, 140, 145],\n            'size': [15, 30, 55, 70, 90, 110],\n            'showscale': True\n        }\n    }\n]\n\npy.iplot(data, filename='scatter-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-State Choropleth for New England in Python\nDESCRIPTION: This example demonstrates how to create a choropleth map for multiple states (New England) with custom color scaling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\nNE_states = ['Connecticut', 'Maine', 'Massachusetts', 'New Hampshire', 'Rhode Island', 'Vermont']\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')\ndf_sample_r = df_sample[df_sample['STNAME'].isin(NE_states)]\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\n    'rgb(68.0, 1.0, 84.0)',\n    'rgb(66.0, 64.0, 134.0)',\n    'rgb(38.0, 130.0, 142.0)',\n    'rgb(63.0, 188.0, 115.0)',\n    'rgb(216.0, 226.0, 25.0)'\n]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values,\n    scope=NE_states, county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},\n    legend_title='Population per county'\n   \n)\nfig['layout']['legend'].update({'x': 0})\nfig['layout']['annotations'][0].update({'x': -0.12, 'xanchor': 'left'})\npy.iplot(fig, filename='choropleth_new_england')\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Area of a Square using Plotly\nDESCRIPTION: This snippet defines functions to sort polygon corners, calculate polygon area, and then applies these to calculate and visualize the area of a square using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/polygon-area/python_Polygon_Area.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef PolygonSort(corners):\n    n = len(corners)\n    cx = float(sum(x for x, y in corners)) / n\n    cy = float(sum(y for x, y in corners)) / n\n    cornersWithAngles = []\n    for x, y in corners:\n        an = (np.arctan2(y - cy, x - cx) + 2.0 * np.pi) % (2.0 * np.pi)\n        cornersWithAngles.append((x, y, an))\n    cornersWithAngles.sort(key = lambda tup: tup[2])\n    return map(lambda (x, y, an): (x, y), cornersWithAngles)\n\ndef PolygonArea(corners):\n    n = len(corners)\n    area = 0.0\n    for i in range(n):\n        j = (i + 1) % n\n        area += corners[i][0] * corners[j][1]\n        area -= corners[j][0] * corners[i][1]\n    area = abs(area) / 2.0\n    return area\n\ncorners = [(0, 0), (1, 1), (0, 1), (1, 0)]\ncorners_sorted = PolygonSort(corners)\narea = PolygonArea(corners_sorted)\n\nx = [corner[0] for corner in corners_sorted]\ny = [corner[1] for corner in corners_sorted]\n\nannotation = go.Annotation(\n    x=1.5,\n    y=1.0,\n    text='The area of the polygon is approximately %s' % (area),\n    showarrow=False\n)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    fill='tonexty',\n)\n\nlayout = go.Layout(\n    annotations=[annotation],\n    xaxis=dict(\n        range=[-1, 2]\n    ),\n    yaxis=dict(\n        range=[-1, 2]\n    )\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='square-area')\n```\n\n----------------------------------------\n\nTITLE: Aggregating Time Series Data with SQL and Plotly in Python\nDESCRIPTION: This snippet demonstrates how to aggregate time series data into 15-minute intervals using SQL. It uses the strftime function to round timestamps and then groups the data. The results are visualized using a Plotly bar chart, showing the number of complaints per 15-minute interval.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nminutes = 15\nseconds = 15*60\n\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval '\n                       'FROM data '\n                       'LIMIT 10 '.format(seconds=seconds), disk_engine)\n\nminutes = 15\nseconds = minutes*60\n\ndf = pd.read_sql_query('SELECT datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval ,'\n                               'COUNT(*) as \"Complaints / interval\"'\n                       'FROM data '\n                       'GROUP BY interval '\n                       'ORDER BY interval '\n                       'LIMIT 500'.format(seconds=seconds), disk_engine)\n\npy.iplot(\n    {\n        'data': [{\n            'x': df.interval,\n            'y': df['Complaints / interval'],\n            'type': 'bar'\n        }],\n        'layout': {\n            'title': 'Number of 311 Complaints per 15 Minutes'\n        }\n}, filename='311/complaints per 15 minutes')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Layout and Rendering Diabetes Splom Visualization\nDESCRIPTION: Configures the layout settings for the SPLOM visualization including axes, title, dimensions, and plot styling, then creates and displays the figure with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\naxisd = dict(showline=False,\n           zeroline=False,\n           gridcolor='#fff',\n           ticklen=4,\n           titlefont=dict(size=13))\ntitle = \"Scatterplot Matrix (SPLOM) for Diabetes Dataset<br>Data source:\"+\\\n        \" <a href='https://www.kaggle.com/uciml/pima-indians-diabetes-database/data'>[1]</a>\"\n\nlayout = go.Layout(title=title,\n                   dragmode='select',\n                   width=1000,\n                   height=1000,\n                   autosize=False,\n                   hovermode='closest',\n                   plot_bgcolor='rgba(240,240,240, 0.95)',\n                   xaxis1=dict(axisd),\n                   xaxis2=dict(axisd),\n                   xaxis3=dict(axisd),\n                   xaxis4=dict(axisd),\n                   xaxis5=dict(axisd),\n                   xaxis6=dict(axisd),\n                   xaxis7=dict(axisd),\n                   xaxis8=dict(axisd),\n                   yaxis1=dict(axisd),\n                   yaxis2=dict(axisd),\n                   yaxis3=dict(axisd),\n                   yaxis4=dict(axisd),\n                   yaxis5=dict(axisd),\n                   yaxis6=dict(axisd),\n                   yaxis7=dict(axisd),\n                   yaxis8=dict(axisd))\n\nfig = dict(data=[traced], layout=layout)\npy.iplot(fig, filename='large')\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots of Sales by Category with Plotly\nDESCRIPTION: Python code that creates subplots using Plotly to display sales data for each event category over time. The code groups the data by category name and creates a separate scatter plot for each category in a 2x2 grid.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndata = []\nfor count, (name, g) in enumerate(df.groupby(\"category_name\")):\n    data.append(go.Scatter(\n            name=name,\n            x=g.caldate,\n            y=g.quantity_sold,\n            xaxis='x' + str(count + 1),\n            yaxis='y' + str(count + 1)\n        ))\n\nfig = tls.make_subplots(rows=2,cols=2)\nfig['layout'].update(title=\"Event Sales Per Day By Category\")\nfig['data'] += data\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Plotting Chord Diagram with Plotly in Python\nDESCRIPTION: This snippet initializes the Plotly notebook mode and creates the final chord diagram figure. It combines the previously generated ribbon information and ideograms into a single plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\ndata = go.Data(ribbon_info+ideograms)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='chord-diagram-Fb')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with LaTeX in Plotly\nDESCRIPTION: Shows how to integrate LaTeX mathematical equations into a Plotly table.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Name', 'Equation'],\n               ['Pythagorean Theorem', '$a^{2}+b^{2}=c^{2}$'],\n               ['Euler\\'s Formula', '$F-E+V=2$'],\n               ['The Origin of Complex Numbers', '$i^{2}=-1$'],\n               ['Einstein\\'s Theory of Relativity', '$E=m c^{2}$']]\n\ntable = ff.create_table(data_matrix)\npy.iplot(table, filename='latex_table')\n```\n\n----------------------------------------\n\nTITLE: Analyzing Most Common Complaint Types with Plotly\nDESCRIPTION: Queries for complaint types, orders by count, and creates an interactive bar chart with customized layout settings, including angled labels for better readability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, COUNT(*) as `num_complaints`, Agency '\n                       'FROM data '\n                       'GROUP BY `ComplaintType` '\n                       'ORDER BY -num_complaints', disk_engine)\n\n\nmost_common_complaints = df # used later\npy.iplot({\n    'data': [go.Bar(x=df['ComplaintType'], y=df.num_complaints)],\n    'layout': { \n        'margin': {'b': 150}, # Make the bottom margin a bit bigger to handle the long text\n        'xaxis': {'tickangle': 40}} # Angle the labels a bit\n    }, filename='311/most common complaints by complaint type')\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Trend Line using Plotly and Numpy in Python\nDESCRIPTION: Generates a scatter plot of expression breadth vs average expression level, including a polynomial trend line. Uses numpy for polynomial fitting and Plotly for interactive visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = df['breadth'][1:1000]\ny = df['avg'][1:1000]\ncoefficients = np.polyfit(x, y, 6)\npolynomial = np.poly1d(coefficients)\nr_x = np.arange(0, 72, 0.5)\nr_y = polynomial(r_x)\n\ntrace1 = Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name=\"expression levels\",\n    text=df['uniprot_id'][1:1000],\n    marker=Marker(\n        size=5,\n        line=Line(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5),\n        opacity=0.2))\n\ntrace2 = Scatter(\n    mode='lines+markers',\n    x=r_x, \n    y=r_y,\n    marker=Marker(\n        size=5,\n        line=Line(\n            color='purple',\n            width=0.5),\n        opacity=0.5),\n    name=\"breadth regression\")\n\nlayout = Layout(\n    title=\"Breadth of expression vs average expression level\",\n    xaxis=XAxis(\n        title='breadth',\n    ),\n    yaxis=YAxis(\n        title='average expression',\n    ),\n)\nfig = Figure(data=Data([trace1, trace2]), layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Loading Airport Dataset with Pandas\nDESCRIPTION: Fetches and loads a CSV dataset of US airport traffic information from GitHub using Pandas.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndframe = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\n```\n\n----------------------------------------\n\nTITLE: Detecting Peaks in Stock Data using PeakUtils in Python\nDESCRIPTION: This code uses PeakUtils to detect peaks in the highlighted section of the stock data. It then plots the original data and the detected peaks using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = [j for j in range(len(stock_data))][left_endpt:right_endpt]\ny = stock_data['SBUX'][left_endpt:right_endpt]\ny = y.tolist()\n\ncb = np.array(y)\nindices = peakutils.indexes(cb, thres=0.75, min_dist=0.1)\n\ntrace = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n    marker=dict(\n        color='rgb(0,56,210)'\n    ),\n    name='Highlighted Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices + left_endpt,\n    y=[y[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='stock-data-with-peaks')\n```\n\n----------------------------------------\n\nTITLE: Embedding a Dash Box Plot Application in IPython\nDESCRIPTION: This code embeds a Dash box plot web application within an IPython notebook using an iframe. It displays an interactive box plot dashboard hosted on Plotly's server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-boxplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Interpolation and Extrapolation of Y From X in Python using Plotly\nDESCRIPTION: This snippet shows how to interpolate and extrapolate y-values for a given set of x-values based on existing data points. It uses NumPy for polynomial fitting and Plotly to create a scatter plot comparing original and interpolated/extrapolated data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-1d/python_Interpolation_and_Extrapolation_in_1D.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\n# get x and y vectors\nx = points[:,0]\ny = points[:,1]\n\n# calculate polynomial\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\n\n# other x values\nother_x = np.array([1.2, 1.34, 1.57, 1.7, 3.6, 3.8, 3.9, 4.0, 5.4, 6.6, 7.2, 7.3, 7.7, 8, 8.9, 9.1, 9.3])\nother_y = f(other_x)\n\n# calculate new x's and y's\nx_new = np.linspace(0, 10, 50)\ny_new = f(x_new)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=other_x,\n    y=other_y,\n    name='Interpolated/Extrapolated Data',\n    mode='markers',\n    marker=dict(\n        symbol='square-open',\n        size=12\n    )\n)\n\nlayout = go.Layout(\n    title='Interpolation and Extrapolation of Y From X',\n)\n\ndata2 = [trace1, trace2]\nfig2 = go.Figure(data=data2, layout=layout)\n\npy.iplot(fig2, filename='interpolation-and-extrapolation-of-y-from-x')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple County Choropleth for California in Python\nDESCRIPTION: This example creates a basic choropleth map for a few counties in California using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nfips = ['06021', '06023', '06027',\n        '06029', '06033', '06059',\n        '06047', '06049', '06051',\n        '06055', '06061']\nvalues = range(len(fips))\n\nfig = ff.create_choropleth(fips=fips, values=values)\npy.iplot(fig, filename='choropleth of some cali counties - full usa scope')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for HDF5 and Plotly in Python\nDESCRIPTION: This snippet imports necessary Python libraries for working with HDF5 files, data manipulation, and Plotly visualization. It includes pandas for data handling, Plotly for interactive graphing, and numpy for numerical operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom IPython.display import display\nimport plotly.plotly as py # interactive graphing\nfrom plotly.graph_objs import Bar, Scatter, Marker, Layout, Data, Figure, Heatmap, XAxis, YAxis\nimport plotly.tools as tls\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Plot Route Between Tesla Stations\nDESCRIPTION: Function to plot driving routes between two Tesla supercharger stations using Google Maps Directions API and Mapbox for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef plot_route_between_tesla_stations(address_start, address_end, zoom=3, endpt_size=6):\n    start = (supercharger_locations[address_start]['latitude'], supercharger_locations[address_start]['longitude'])\n    end = (supercharger_locations[address_end]['latitude'], supercharger_locations[address_end]['longitude'])\n    \n    #start = address_start\n    #end = address_end\n    \n    directions = gmaps.directions(start, end)\n    steps = []\n    steps.append(start)  # add starting coordinate to trip\n    \n    for index in range(len(directions[0]['legs'][0]['steps'])):\n        start_coords = directions[0]['legs'][0]['steps'][index]['start_location']\n        steps.append((start_coords['lat'], start_coords['lng']))\n\n        if index == len(directions[0]['legs'][0]['steps']) - 1:\n            end_coords = directions[0]['legs'][0]['steps'][index]['end_location']\n            steps.append((end_coords['lat'], end_coords['lng']))\n\n    steps.append(end)  # add ending coordinate to trip\n\n    mapbox_access_token = \"ADD_YOUR_TOKEN_HERE\"\n\n    data = Data([\n        Scattermapbox(\n            lat=[item_x[0] for item_x in steps],\n            lon=[item_y[1] for item_y in steps],\n            mode='markers+lines',\n            marker=Marker(\n                size=[endpt_size] + [4 for j in range(len(steps) - 2)] + [endpt_size]\n            ),\n        )\n    ])\n    layout = Layout(\n        autosize=True,\n        hovermode='closest',\n        mapbox=dict(\n            accesstoken=mapbox_access_token,\n            bearing=0,\n            style='streets',\n            center=dict(\n                lat=np.mean([float(step[0]) for step in steps]),\n                lon=np.mean([float(step[1]) for step in steps]),\n            ),\n            pitch=0,\n            zoom=zoom\n        ),\n    )\n\n    fig = dict(data=data, layout=layout)\n    return fig\n\nserver_key = my_google_maps_api_key\ngmaps = googlemaps.Client(key=server_key)\naddress_start = supercharger_locations.keys()[0]\naddress_end = supercharger_locations.keys()[501] \nzoom=12.2\nendpt_size=20\n\nfig = plot_route_between_tesla_stations(address_start, address_end, zoom=10.2, endpt_size=20)\npy.iplot(fig, filename='tesla-driving-directions-between-superchargers')\n```\n\n----------------------------------------\n\nTITLE: Sampling DataFrame Records\nDESCRIPTION: Retrieves the first three records from the DataFrame to preview the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbtd.take(3)\n```\n\n----------------------------------------\n\nTITLE: Setting X-Y Coordinates in Plotly Contour Plot\nDESCRIPTION: Shows how to specify custom x and y coordinates for a contour plot instead of using default indices.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/contour/contour.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        x=[-9, -6, -5 , -3, -1],\n        y=[0, 1, 4, 5, 7]\n    )]\n\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plot with Plotly\nDESCRIPTION: Creates a box plot visualization showing the distribution of alcohol consumption data with custom styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ny = data['alcohol'].values.tolist()\n\ntrace = go.Box(\n    y=y,\n    name = 'Box Plot',\n    boxpoints='all',\n    jitter=0.3,\n    marker = dict(\n        color = 'rgb(214,12,140)',\n    ),\n)\n\nlayout = go.Layout(\n    width=500,\n    yaxis=dict(\n        title='Alcohol Consumption by Country',\n        zeroline=False\n    ),\n)\n\ndata = [trace]\nfig= go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='alcohol-box-plot')\n```\n\n----------------------------------------\n\nTITLE: US Airports Traffic Visualization with Plotly\nDESCRIPTION: Creates an interactive map showing US airport traffic data using Plotly's Scattergeo. The visualization includes airport locations with markers sized and colored by incoming flight counts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/scatter-plot-on-maps/scatter-plot-on-map.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')\ndf.head()\n\ndf['text'] = df['airport'] + '' + df['city'] + ', ' + df['state'] + '' + 'Arrivals: ' + df['cnt'].astype(str)\n\nscl = [ [0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n    [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"] ]\n\ndata = [ go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict( \n            size = 8, \n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = scl,\n            cmin = 0,\n            color = df['cnt'],\n            cmax = df['cnt'].max(),\n            colorbar=dict(\n                title=\"Incoming flights<br>February 2011\"\n            )\n        ))]\n\nlayout = dict(\n        title = 'Most trafficked US airports<br>(Hover for airport names)', \n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5        \n        ),\n    )\n\nfig = go.Figure(data=data, layout=layout )\npy.iplot(fig, filename='d3-airports' )\n```\n\n----------------------------------------\n\nTITLE: Creating a Venn Diagram with Circle Shapes in Plotly\nDESCRIPTION: This example demonstrates how to create a Venn diagram using overlapping circle shapes in Plotly. It creates two partially transparent circles with appropriate labels for sets A and B, and their intersection A+B.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 1.75, 2.5],\n    y=[1, 1, 1],\n    text=['$A$', '$A+B$', '$B$'],\n    mode='text',\n    textfont=dict(\n        color='black',\n        size=18,\n        family='Arail',\n    )\n)\n\ndata = [trace0]\n\nlayout = {\n    'xaxis': {\n        'showticklabels': False,\n        'showgrid': False,\n        'zeroline': False,\n    },\n    'yaxis': {\n        'showticklabels': False,\n        'showgrid': False,\n        'zeroline': False,\n    },\n    'shapes': [\n        {\n            'opacity': 0.3,\n            'xref': 'x',\n            'yref': 'y',\n            'fillcolor': 'blue',\n            'x0': 0,\n            'y0': 0,\n            'x1': 2,\n            'y1': 2,\n            'type': 'circle',\n            'line': {\n                'color': 'blue',\n            },\n        },\n        {\n            'opacity': 0.3,\n            'xref': 'x',\n            'yref': 'y',\n            'fillcolor': 'gray',\n            'x0': 1.5,\n            'y0': 0,\n            'x1': 3.5,\n            'y1': 2,\n            'type': 'circle',\n            'line': {\n                'color': 'gray',\n            },\n        }\n    ],\n    'margin': {\n        'l': 20,\n        'r': 20,\n        'b': 100\n    },\n    'height': 600,\n    'width': 800,\n}\nfig = {\n    'data': data,\n    'layout': layout,\n}\npy.iplot(fig, filename='venn-diagram')\n```\n\n----------------------------------------\n\nTITLE: Adding Slider to Plotly Animated Bubble Chart\nDESCRIPTION: This code adds a slider to the animated chart, allowing users to navigate through different years. It sets up the slider's appearance and behavior.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Mesh Tetrahedron with Color Gradient\nDESCRIPTION: Creates a tetrahedron using Mesh3d with custom triangulation through i, j, k indices. The example includes a color gradient based on intensity values and displays a color scale bar titled 'z'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Mesh3d(\n        x = [0, 1, 2, 0],\n        y = [0, 0, 1, 2],\n        z = [0, 2, 0, 1],\n        colorbar = go.ColorBar(\n            title='z'\n        ),\n        colorscale = [[0, 'rgb(255, 0, 0)'], \n                      [0.5, 'rgb(0, 255, 0)'], \n                      [1, 'rgb(0, 0, 255)']],\n        intensity = [0, 0.33, 0.66, 1],\n        i = [0, 0, 0, 1],\n        j = [1, 2, 3, 2],\n        k = [2, 3, 1, 3],\n        name = 'y',\n        showscale = True\n    )\n]\nlayout = go.Layout(\n    xaxis=go.XAxis(\n        title='x'\n    ),\n    yaxis=go.YAxis(\n        title='y'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-mesh-tetrahedron-python')\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Margins\nDESCRIPTION: Shows how to use the automargin feature to automatically adjust margins based on tick labels and titles. Includes custom tick text and axis title formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/sizing/sizing.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Bar(\n        x=['Apples', 'Oranges', 'Watermelon', 'Pears'],\n        y=[3, 2, 1, 4]\n    )\n]\nlayout = go.Layout(\n    autosize=False,\n    width=500,\n    height=500,\n    yaxis=go.layout.YAxis(\n        title='Y-axis Title',\n        ticktext=['Very long label','long label','3','label'],\n        tickvals=[1, 2, 3, 4],\n        tickmode='array',\n        automargin=True,\n        titlefont=dict(size=30),\n    ),\n    paper_bgcolor='#7f7f7f',\n    plot_bgcolor='#c7c7c7'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='automargin')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Geo-Scatter Plot with Stream Configuration\nDESCRIPTION: Creates a scattergeo visualization with customized layout for US map and connects it to the stream ID for real-time updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = [dict(\n        type='scattergeo',\n        lon=[],\n        lat=[],\n        mode='markers',\n        marker=dict(\n            size=8,\n            opacity=0.8,\n            reversescale=True,\n            autocolorscale=False,\n            line=dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n        ),\n        stream=stream_id,\n        name=\"Plane\")]\n\nlayout = dict(\n        title = 'Busy Airplane Streaming',\n        colorbar = False,\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False, filename='geo-streaming2', auto_open=False, fileopt='extend')\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Simplicial Complex Examples\nDESCRIPTION: Displays an interactive comparison between a valid simplicial complex and an invalid collection of k-simplexes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHTML('<iframe src=https://plotly.com/~empet/13503/ width=600 height=475></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Sunburst Chart with Total Branch Values\nDESCRIPTION: Demonstrates the use of branchvalues='total' parameter where parent values represent the total width of their wedges. Includes detailed family tree data with specific value calculations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Sunburst(\n    labels=[ \"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\",    \"Eve\",  \"Eve\",  \"Seth\", \"Seth\", \"Eve\",  \"Eve\",  \"Awan\",  \"Eve\" ],\n    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],\n    branchvalues=\"total\",\n    outsidetextfont = {\"size\": 20, \"color\": \"#377eb8\"},\n    marker = {\"line\": {\"width\": 2}},\n)\n\nlayout = go.Layout(\n    margin = go.layout.Margin(t=0, l=0, r=0, b=0)\n)\n\npy.iplot(go.Figure([trace], layout), filename='basic_sunburst_chart_total_branchvalues')\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Text to Bubble Charts\nDESCRIPTION: Adding custom hover text to bubble chart markers with HTML formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    text=['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        size=[40, 60, 80, 100],\n    )\n)\n\ndata = [trace0]\npy.iplot(data, filename='bubblechart-text')\n```\n\n----------------------------------------\n\nTITLE: Plotting Eurovision Graph with Plotly\nDESCRIPTION: Creates and displays an interactive circular graph visualization using Plotly. The code combines line traces and edge information into a Figure object and plots it with a custom layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata=Data(lines+edge_info+[trace2])\nfig=Figure(data=data, layout=layout)\npy.iplot(fig, filename='Eurovision-15')\n```\n\n----------------------------------------\n\nTITLE: Array-based Tick Formatting in Plotly\nDESCRIPTION: Shows how to use array-based tick formatting with custom tick values and labels using tickvals and ticktext properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\n\ntrace0 = go.Scatter(\n    x = x,\n    y = y\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    xaxis = go.layout.XAxis(\n        tickmode = 'array',\n        tickvals = [1, 3, 5, 7, 9, 11],\n        ticktext = ['One', 'Three', 'Five', 'Seven', 'Nine', 'Eleven']\n    )\n)\n\nfig = go.Figure(\n    data = data,\n    layout = layout\n)\n\npy.iplot(fig, filename='tickformatting-tickmode-array')\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Hovertemplate with Dynamic Data\nDESCRIPTION: Advanced implementation of hovertemplate using pandas DataFrame and complex formatting for multiple data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.io as pio\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/job-automation-probability.csv')\n\ndata = [\n    dict(\n        type = 'scatter',\n        mode = 'markers',\n        x = dff['prob'],\n        y = dff['Average annual wage'],\n        text = dff['short occupation'],\n        name = education_level,\n        marker = dict(size = dff['numbEmployed'], sizeref = 4000, sizemode = 'area'),\n        hovertemplate = \"<b>%{text}</b><br><br>\" +\n            \"%{yaxis.title.text}: %{y:$,.0f}<br>\" +\n            \"%{xaxis.title.text}: %{x:.0%}<br>\" +\n            \"Number Employed: %{marker.size:,}\" +\n            \"<extra></extra>\"\n    ) for dff, education_level in [(df[df.education == education_level], education_level) for education_level in df.education.unique()]\n]\n\nlayout = go.Layout(\n    title = \"Higher Risk of Job Automation in Lower Paying Jobs\",\n    template = pio.templates['plotly'],\n    legend = dict(orientation = 'h', y = -0.3),\n    xaxis = dict(title = 'Automation Probability'),\n    yaxis = dict(title = 'Income')\n)\n\nfig = dict(data=data,layout=layout)\npy.iplot(fig, filename = \"hovertemplate-advanced\")\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scale for 3D Surface in Python with Plotly\nDESCRIPTION: This code defines a custom color scale to be used for coloring the 3D surface. The color scale is defined as a list of RGB color values corresponding to different levels of the normalized z-values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncolorscale=[[0.0, 'rgb(20,29,67)'],\n           [0.1, 'rgb(28,76,96)'],\n           [0.2, 'rgb(16,125,121)'],\n           [0.3, 'rgb(92,166,133)'],\n           [0.4, 'rgb(182,202,175)'],\n           [0.5, 'rgb(253,245,243)'],\n           [0.6, 'rgb(230,183,162)'],\n           [0.7, 'rgb(211,118,105)'],\n           [0.8, 'rgb(174,63,95)'],\n           [0.9, 'rgb(116,25,93)'],\n           [1.0, 'rgb(51,13,53)']]\n```\n\n----------------------------------------\n\nTITLE: Matrix Addition with Plotly Visualization\nDESCRIPTION: Demonstrates addition of two 2x2 matrices using NumPy and visualizes the result using Plotly's annotated heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmatrix1 = np.matrix(\n    [[0, 4],\n     [2, 0]]\n)\n\nmatrix2 = np.matrix(\n    [[-1, 2],\n     [1, -2]]\n)\n\nmatrix_sum = matrix1 + matrix2\n\ncolorscale = [[0, '#EAEFC4'], [1, '#9BDF46']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(matrix_sum.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='matrix-sum')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Scatter Traces on a Carpet Plot with Plotly in Python\nDESCRIPTION: This code demonstrates how to create a carpet plot with multiple scatter traces. It includes various scatter traces with different styles, colors, and marker sizes, as well as custom layout settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-scatter/scattercarpet.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [0.1,0.2,0.3],\n    b = [1,2,3],\n    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],\n    cheaterslope = 1,\n    aaxis = dict(\n        title = \"a\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    ),\n    baxis = dict(\n        title = \"b\",\n        tickmode = \"linear\",\n        dtick = 0.05\n    )\n)\n\ntrace2 = go.Scattercarpet(\n    name = \"b = 1.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [1.5, 1.5, 1.5, 1.5]\n)\n\ntrace3 = go.Scattercarpet(\n    name = \"b = 2\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2, 2, 2, 2]\n)\n\ntrace4 = go.Scattercarpet(\n    name = \"b = 2.5\",\n    a = [0.05, 0.15, 0.25, 0.35],\n    b = [2.5, 2.5, 2.5, 2.5]\n)\n\ntrace5 = go.Scattercarpet(\n    name = \"a = 0.15\",\n    a = [0.15, 0.15, 0.15, 0.15],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n)\n\ntrace6 = go.Scattercarpet(\n    name = \"a = 0.2\",\n    a = [0.2, 0.2, 0.2, 0.2],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    ),\n      marker = dict(\n        size = [10, 20, 30, 40],\n        color = [\"#000\", \"#f00\", \"#ff0\", \"#fff\"]\n      )\n)\n\ntrace7 = go.Scattercarpet(\n    name = \"a = 0.25\",\n    a = [0.25, 0.25, 0.25, 0.25],\n    b = [0.5, 1.5, 2.5, 3.5],\n    line = dict(\n        smoothing = 1,\n        shape = \"spline\"\n    )\n)\n\nlayout = go.Layout(\n    title = \"scattercarpet extrapolation, clipping, and smoothing\",\n    hovermode = \"closest\"\n)\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = \"scattercarpet/multiple\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Delaunay Triangulation Example\nDESCRIPTION: Shows an interactive visualization of Delaunay triangulation for a set of ten 2D points, demonstrating empty circumcircles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHTML('<iframe src=https://plotly.com/~empet/13497/ width=550 height=550></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes and Layout for Band Diagram\nDESCRIPTION: Configures the appearance of axes and general layout for the band diagram, including titles, grid lines, tick marks, and axis range settings specific to the band structure plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbandxaxis = go.XAxis(\n    title=\"k-points\",\n    range=[0, len(bands.kpoints)],\n    showgrid=True,\n    showline=True,\n    ticks=\"\", \n    showticklabels=False,\n    mirror=True,\n    linewidth=2\n)\nbandyaxis = go.YAxis(\n    title=\"$E - E_f \\\\quad / \\\\quad \\\\text{eV}$\",\n    range=[emin, emax],\n    showgrid=True,\n    showline=True,\n    zeroline=True,\n    mirror=\"ticks\",\n    ticks=\"inside\",\n    linewidth=2,\n    tickwidth=2,\n    zerolinewidth=2\n)\nbandlayout = go.Layout(\n    title=\"Bands diagram of Silicon\",\n    xaxis=bandxaxis,\n    yaxis=bandyaxis,\n    annotations=go.Annotations(annotations)\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Markers Mapbox Plot\nDESCRIPTION: Creates a scatter plot with multiple markers showing various locations in Washington DC. Demonstrates handling multiple data points with custom text labels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox/mapbox.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# mapbox_access_token = 'ADD_YOUR_TOKEN_HERE'\n\ndata = [\n    go.Scattermapbox(\n        lat=['38.91427','38.91538','38.91458',\n             '38.92239','38.93222','38.90842',\n             '38.91931','38.93260','38.91368',\n             '38.88516','38.921894','38.93206',\n             '38.91275'],\n        lon=['-77.02827','-77.02013','-77.03155',\n             '-77.04227','-77.02854','-77.02419',\n             '-77.02518','-77.03304','-77.04509',\n             '-76.99656','-77.042438','-77.02821',\n             '-77.01239'],\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=9\n        ),\n        text=[\"The coffee bar\",\"Bistro Bohem\",\"Black Cat\",\n             \"Snap\",\"Columbia Heights Coffee\",\"Azi's Cafe\",\n             \"Blind Dog Cafe\",\"Le Caprice\",\"Filter\",\n             \"Peregrine\",\"Tryst\",\"The Coupe\",\n             \"Big Bear Cafe\"],\n    )\n]\n\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    mapbox=go.layout.Mapbox(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=38.92,\n            lon=-77.07\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Multiple Mapbox')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Peak Fitting in Python\nDESCRIPTION: This snippet imports necessary libraries for data manipulation, visualization, and peak analysis including Plotly, NumPy, Pandas, SciPy, and PeakUtils.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Configuring Density of States Plot with Plotly\nDESCRIPTION: Creates and configures a density of states plot with two subplots using Plotly. Sets up layout, axes, annotations, and legend for a band diagram and density of states visualization of Silicon.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# add the densities in the second subplot\ncolorbandfig.append_trace(trace_tdos, 1, 2)\ncolorbandfig.append_trace(trace_3s, 1, 2)\ncolorbandfig.append_trace(trace_3p, 1, 2)\n# Layout configuration\ncolorbandfig[\"layout\"].update(\n    go.Layout(\n        title=\"Bands diagram and density of states of Silicon\",\n        xaxis1=bandxaxis,\n        yaxis1=bandyaxis,\n        xaxis2=dosxaxis,\n        annotations=go.Annotations(annotations)\n    )\n)\n# adjust size of subplots\ncolorbandfig[\"layout\"][\"xaxis1\"][\"domain\"] = [0., 0.7]\ncolorbandfig[\"layout\"][\"xaxis2\"][\"domain\"] = [0.702, 1.]\n# add some specific options\ncolorbandfig[\"layout\"][\"yaxis1\"][\"mirror\"] = \"allticks\"\ncolorbandfig[\"layout\"][\"xaxis2\"][\"mirror\"] = \"allticks\"\n# add a custom legend\nlegend = go.Legend(\n    x=.98, y=.98,\n    xanchor=\"right\", yanchor=\"top\",\n    bordercolor='#333', borderwidth=1\n)\ncolorbandfig[\"layout\"][\"legend\"] = legend\n# do the plot\nplot_url = pltly.plot(colorbandfig, filename=\"DOS_bands_Si_color\", auto_open=False)\ntls.embed(plot_url)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Plot from CSV Data\nDESCRIPTION: Creating a multi-line plot using Plotly's Scatter objects with data from CSV file, showing logx, sinx, and cosx values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n                    x=df['x'], y=df['logx'], # Data\n                    mode='lines', name='logx' # Additional options\n                   )\ntrace2 = go.Scatter(x=df['x'], y=df['sinx'], mode='lines', name='sinx' )\ntrace3 = go.Scatter(x=df['x'], y=df['cosx'], mode='lines', name='cosx')\n\nlayout = go.Layout(title='Simple Plot from csv data',\n                   plot_bgcolor='rgb(230, 230,230)')\n\nfig = go.Figure(data=[trace1, trace2, trace3], layout=layout)\n\n# Plot data in the notebook\npy.iplot(fig, filename='simple-plot-from-csv')\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Density of States Plot with Plotly\nDESCRIPTION: Combines the data and layout to create a Figure object for the density of states plot, then publishes it to Plotly and embeds it in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndosfig = go.Figure(data=dosdata, layout=doslayout)\nplot_url = pltly.plot(dosfig, filename=\"DOS_Si\", auto_open=False)\ntls.embed(plot_url)\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Band Diagram with Plotly\nDESCRIPTION: Combines band traces and vertical lines to create a Figure object for the band diagram, then publishes it to Plotly and embeds it in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbandfig = go.Figure(data=bandTraces + vlines, layout=bandlayout)\nplot_url = pltly.plot(bandfig, filename=\"Bands_Si\", auto_open=False)\ntls.embed(plot_url)\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart Implementation\nDESCRIPTION: Creates a stacked area chart with three traces using stackgroup property and custom colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Add original data\nx=['Winter', 'Spring', 'Summer', 'Fall']\n\ntrace0 = dict(\n    x=x,\n    y=[40, 60, 40, 10],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(131, 90, 241)'),\n    stackgroup='one'\n)\ntrace1 = dict(\n    x=x,\n    y=[20, 10, 10, 60],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(111, 231, 219)'),\n    stackgroup='one'\n)\ntrace2 = dict(\n    x=x,\n    y=[40, 30, 50, 30],\n    hoverinfo='x+y',\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(184, 247, 212)'),\n    stackgroup='one'\n)\ndata = [trace0, trace1, trace2]\n\nfig = dict(data=data)\npy.iplot(fig, filename='stacked-area-plot-hover', validate=False)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Lighting Effects on a Surface Plot\nDESCRIPTION: Creates a surface plot with a combination of ambient, diffuse, roughness, specular, and fresnel lighting effects to demonstrate how they work together.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlighting_effects = dict(ambient=0.4, diffuse=0.5, roughness = 0.9, specular=0.6, fresnel=0.2)\ntrace = go.Surface(z=Z1, colorscale='Viridis', lighting=lighting_effects)\n\npy.iplot([trace])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Display and Publishing OHLC Charts in Python\nDESCRIPTION: This code configures the display settings for the notebook and publishes the OHLC chart examples to the Plotly documentation site. It imports custom fonts, CSS styles, and uses the Plotly publisher tool to create a documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ohlc-charts.ipynb', 'python/ohlc-charts/', 'Python OHLC Charts | plotly',\n    'How to make interactive OHLC charts in Python with Plotly. '\n    'Six examples of OHLC charts with Pandas, time series, and yahoo finance data.',\n    name = 'OHLC Charts',\n    thumbnail='thumbnail/ohlc.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='financial', order=1,\n    ipynb= '~notebook_demo/53')    \n```\n\n----------------------------------------\n\nTITLE: Loading Car Images from Files in Python\nDESCRIPTION: Reads car image files from a directory into a dictionary with model year as keys and binary image data as values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimage_data = {}\nfor img_filename in os.listdir('data/cars/images'):\n    model_year = img_filename.split('.')[0]\n    with open(f\"data/cars/images/{img_filename}\", \"rb\") as f:\n        b = f.read()\n        image_data[model_year] = b\n```\n\n----------------------------------------\n\nTITLE: Importing Essential Plotly Libraries for Streaming\nDESCRIPTION: This snippet imports the necessary Plotly modules and libraries needed for streaming functionality, including the plotly.plotly module for server communication, tools, graph objects, and numpy for data manipulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# (*) To communicate with Plotly's server, sign in with credentials file\nimport plotly.plotly as py  \n \n# (*) Useful Python/Plotly tools\nimport plotly.tools as tls   \n \n# (*) Graph objects\nfrom plotly.graph_objs import *\n \nimport numpy as np  # (*) numpy for math functions and arrays\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Connections in GML Network Graph\nDESCRIPTION: This code defines edge connections in a network graph using the GML (Graph Modeling Language) format. Each edge specifies a source node, target node, and a value representing the weight or strength of the connection between them.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_9\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 346\n    target 216\n    value 0.583333\n  ]\n  edge\n  [\n    source 346\n    target 345\n    value 0.583333\n  ]\n  edge\n  [\n    source 346\n    target 252\n    value 0.25\n  ]\n  edge\n  [\n    source 346\n    target 216\n    value 0.916667\n  ]\n  edge\n  [\n    source 347\n    target 345\n    value 0.583333\n  ]\n  edge\n  [\n    source 347\n    target 346\n    value 0.583333\n  ]\n  edge\n  [\n    source 347\n    target 252\n    value 0.25\n  ]\n  edge\n  [\n    source 347\n    target 216\n    value 0.583333\n  ]\n  edge\n  [\n    source 349\n    target 348\n    value 0.2\n  ]\n  edge\n  [\n    source 350\n    target 348\n    value 0.2\n  ]\n  edge\n  [\n    source 350\n    target 349\n    value 0.2\n  ]\n  edge\n  [\n    source 351\n    target 348\n    value 0.2\n  ]\n  edge\n  [\n    source 351\n    target 349\n    value 0.2\n  ]\n  edge\n  [\n    source 351\n    target 350\n    value 0.2\n  ]\n  edge\n  [\n    source 352\n    target 348\n    value 0.2\n  ]\n  edge\n  [\n    source 352\n    target 349\n    value 0.2\n  ]\n  edge\n  [\n    source 352\n    target 350\n    value 0.2\n  ]\n  edge\n  [\n    source 352\n    target 351\n    value 0.2\n  ]\n  edge\n  [\n    source 353\n    target 348\n    value 0.2\n  ]\n  edge\n  [\n    source 353\n    target 349\n    value 0.2\n  ]\n  edge\n  [\n    source 353\n    target 350\n    value 0.2\n  ]\n  edge\n  [\n    source 353\n    target 351\n    value 0.2\n  ]\n  edge\n  [\n    source 353\n    target 352\n    value 0.2\n  ]\n  edge\n  [\n    source 355\n    target 354\n    value 0.5\n  ]\n  edge\n  [\n    source 356\n    target 354\n    value 0.5\n  ]\n  edge\n  [\n    source 356\n    target 355\n    value 0.5\n  ]\n  edge\n  [\n    source 358\n    target 357\n    value 0.833333\n  ]\n  edge\n  [\n    source 359\n    target 357\n    value 0.5\n  ]\n  edge\n  [\n    source 359\n    target 358\n    value 0.5\n  ]\n  edge\n  [\n    source 360\n    target 357\n    value 0.333333\n  ]\n  edge\n  [\n    source 360\n    target 358\n    value 0.333333\n  ]\n  edge\n  [\n    source 361\n    target 357\n    value 0.333333\n  ]\n  edge\n  [\n    source 361\n    target 360\n    value 0.333333\n  ]\n  edge\n  [\n    source 361\n    target 358\n    value 0.333333\n  ]\n  edge\n  [\n    source 362\n    target 62\n    value 0.2\n  ]\n  edge\n  [\n    source 363\n    target 362\n    value 1\n  ]\n  edge\n  [\n    source 364\n    target 362\n    value 0.5\n  ]\n  edge\n  [\n    source 365\n    target 362\n    value 0.5\n  ]\n  edge\n  [\n    source 365\n    target 364\n    value 0.5\n  ]\n  edge\n  [\n    source 367\n    target 366\n    value 0.5\n  ]\n  edge\n  [\n    source 368\n    target 366\n    value 0.5\n  ]\n  edge\n  [\n    source 368\n    target 367\n    value 0.5\n  ]\n  edge\n  [\n    source 369\n    target 24\n    value 0.5\n  ]\n  edge\n  [\n    source 369\n    target 25\n    value 0.5\n  ]\n  edge\n  [\n    source 370\n    target 78\n    value 0.5\n  ]\n  edge\n  [\n    source 371\n    target 370\n    value 0.5\n  ]\n  edge\n  [\n    source 371\n    target 78\n    value 2.5\n  ]\n  edge\n  [\n    source 371\n    target 309\n    value 0.5\n  ]\n  edge\n  [\n    source 373\n    target 372\n    value 0.5\n  ]\n  edge\n  [\n    source 374\n    target 372\n    value 0.5\n  ]\n  edge\n  [\n    source 374\n    target 373\n    value 0.5\n  ]\n  edge\n  [\n    source 375\n    target 33\n    value 0.25\n  ]\n  edge\n  [\n    source 376\n    target 375\n    value 1.91667\n  ]\n  edge\n  [\n    source 376\n    target 33\n    value 0.25\n  ]\n  edge\n  [\n    source 377\n    target 375\n    value 2.91667\n  ]\n  edge\n  [\n    source 377\n    target 376\n    value 1.91667\n  ]\n  edge\n  [\n    source 377\n    target 33\n    value 0.25\n  ]\n  edge\n  [\n    source 378\n    target 375\n    value 0.333333\n  ]\n  edge\n  [\n    source 378\n    target 376\n    value 0.333333\n  ]\n  edge\n  [\n    source 378\n    target 377\n    value 0.333333\n  ]\n  edge\n  [\n    source 380\n    target 379\n    value 0.5\n  ]\n  edge\n  [\n    source 381\n    target 379\n    value 0.5\n  ]\n  edge\n  [\n    source 381\n    target 380\n    value 0.5\n  ]\n  edge\n  [\n    source 383\n    target 382\n    value 0.5\n  ]\n  edge\n  [\n    source 384\n    target 382\n    value 0.5\n  ]\n  edge\n  [\n    source 384\n    target 383\n    value 0.5\n  ]\n  edge\n  [\n    source 386\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 387\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 387\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 388\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 388\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 388\n    target 387\n    value 0.142857\n  ]\n  edge\n  [\n    source 389\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 389\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 389\n    target 387\n    value 0.142857\n  ]\n  edge\n  [\n    source 389\n    target 388\n    value 0.142857\n  ]\n  edge\n  [\n    source 390\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 390\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 390\n    target 387\n    value 0.142857\n  ]\n  edge\n  [\n    source 390\n    target 388\n    value 0.142857\n  ]\n  edge\n  [\n    source 390\n    target 389\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 387\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 388\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 389\n    value 0.142857\n  ]\n  edge\n  [\n    source 391\n    target 390\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 385\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 386\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 387\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 388\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 389\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 390\n    value 0.142857\n  ]\n  edge\n  [\n    source 392\n    target 391\n    value 0.142857\n  ]\n  edge\n  [\n    source 394\n    target 393\n    value 0.333333\n  ]\n  edge\n  [\n    source 395\n    target 393\n    value 0.333333\n  ]\n  edge\n  [\n    source 395\n    target 394\n    value 0.333333\n  ]\n  edge\n  [\n    source 396\n    target 393\n    value 0.333333\n  ]\n  edge\n  [\n    source 396\n    target 394\n    value 0.333333\n  ]\n  edge\n  [\n    source 396\n    target 395\n    value 0.333333\n  ]\n  edge\n  [\n    source 398\n    target 397\n    value 0.333333\n  ]\n  edge\n  [\n    source 399\n    target 397\n    value 0.333333\n  ]\n  edge\n  [\n    source 399\n    target 398\n    value 0.333333\n  ]\n  edge\n  [\n    source 400\n    target 397\n    value 0.333333\n  ]\n  edge\n  [\n    source 400\n    target 398\n    value 0.333333\n  ]\n  edge\n  [\n    source 400\n    target 399\n    value 0.333333\n  ]\n  edge\n  [\n    source 401\n    target 277\n    value 0.166667\n  ]\n  edge\n  [\n    source 401\n    target 278\n    value 0.166667\n  ]\n  edge\n  [\n    source 402\n    target 401\n    value 0.166667\n  ]\n  edge\n  [\n    source 402\n    target 277\n    value 0.166667\n  ]\n  edge\n  [\n    source 402\n    target 278\n    value 0.166667\n  ]\n  edge\n  [\n    source 402\n    target 327\n    value 2.16667\n  ]\n  edge\n  [\n    source 402\n    target 328\n    value 0.333333\n  ]\n  edge\n  [\n    source 402\n    target 30\n    value 0.333333\n  ]\n  edge\n  [\n    source 403\n    target 401\n    value 0.166667\n  ]\n  edge\n  [\n    source 403\n    target 402\n    value 0.166667\n  ]\n  edge\n  [\n    source 403\n    target 277\n    value 0.5\n  ]\n  edge\n  [\n    source 403\n    target 278\n    value 0.5\n  ]\n  edge\n  [\n    source 404\n    target 401\n    value 0.166667\n  ]\n  edge\n  [\n    source 404\n    target 402\n    value 0.166667\n  ]\n  edge\n  [\n    source 404\n    target 277\n    value 0.166667\n  ]\n  edge\n  [\n    source 404\n    target 403\n    value 0.166667\n  ]\n  edge\n  [\n    source 404\n    target 278\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 401\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 402\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 277\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 403\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 278\n    value 0.166667\n  ]\n  edge\n  [\n    source 405\n    target 404\n    value 0.166667\n  ]\n  edge\n  [\n    source 406\n    target 166\n    value 1\n  ]\n  edge\n  [\n    source 409\n    target 408\n    value 0.25\n  ]\n  edge\n  [\n    source 410\n    target 408\n    value 0.583333\n  ]\n  edge\n  [\n    source 410\n    target 409\n    value 0.25\n  ]\n  edge\n  [\n    source 411\n    target 408\n    value 0.25\n  ]\n  edge\n  [\n    source 411\n    target 409\n    value 0.25\n  ]\n  edge\n  [\n    source 411\n    target 410\n    value 0.25\n  ]\n  edge\n  [\n    source 412\n    target 408\n    value 0.583333\n  ]\n  edge\n  [\n    source 412\n    target 409\n    value 0.25\n  ]\n  edge\n  [\n    source 412\n    target 410\n    value 0.583333\n  ]\n  edge\n  [\n    source 412\n    target 411\n    value 0.25\n  ]\n  edge\n  [\n    source 413\n    target 408\n    value 0.333333\n  ]\n  edge\n  [\n    source 413\n    target 410\n    value 0.333333\n  ]\n  edge\n  [\n    source 413\n    target 412\n    value 0.333333\n  ]\n  edge\n  [\n    source 415\n    target 414\n    value 1\n  ]\n  edge\n  [\n    source 415\n    target 247\n    value 0.333333\n  ]\n  edge\n  [\n    source 416\n    target 402\n    value 0.833333\n  ]\n  edge\n  [\n    source 416\n    target 327\n    value 3.5\n  ]\n  edge\n  [\n    source 416\n    target 328\n    value 0.333333\n  ]\n  edge\n  [\n    source 417\n    target 402\n    value 1\n  ]\n  edge\n  [\n    source 417\n    target 327\n    value 1\n  ]\n  edge\n  [\n    source 419\n    target 418\n    value 1\n  ]\n  edge\n  [\n    source 421\n    target 319\n    value 1\n  ]\n  edge\n  [\n    source 423\n    target 422\n    value 0.5\n  ]\n  edge\n  [\n    source 424\n    target 422\n    value 0.5\n  ]\n  edge\n  [\n    source 424\n    target 423\n    value 0.5\n  ]\n  edge\n  [\n    source 426\n    target 425\n    value 0.5\n  ]\n  edge\n  [\n    source 427\n    target 425\n    value 0.5\n  ]\n  edge\n  [\n    source 427\n    target 426\n    value 0.5\n  ]\n  edge\n  [\n    source 428\n    target 46\n    value 1.33333\n  ]\n  edge\n  [\n    source 429\n    target 428\n    value 1\n  ]\n  edge\n  [\n    source 431\n    target 430\n    value 1\n  ]\n  edge\n  [\n    source 432\n    target 430\n    value 1\n  ]\n  edge\n  [\n    source 434\n    target 433\n```\n\n----------------------------------------\n\nTITLE: Implementing Dixon's Q-Test for Outlier Detection in Python\nDESCRIPTION: This function implements Dixon's Q-Test to determine if the smallest point in a dataset is an outlier. It assumes a significance level of 0.05 and compares the Q-statistic to a reference value.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef q_test_for_smallest_point(dataset):\n    q_ref = 0.29  # the reference Q value for a significance level of 95% and 30 data points\n    q_stat = (dataset[1] - dataset[0])/(dataset[-1] - dataset[0])\n    \n    if q_stat > q_ref:\n        print(\"Since our Q-statistic is %f and %f > %f, we have evidence that our \"\n              \"minimum point IS an outlier to the data.\") %(q_stat, q_stat, q_ref)\n    else:\n        print(\"Since our Q-statistic is %f and %f < %f, we have evidence that our \"\n              \"minimum point is NOT an outlier to the data.\") %(q_stat, q_stat, q_ref)\n```\n\n----------------------------------------\n\nTITLE: Importing and Preparing MRI Data in Python\nDESCRIPTION: This code imports necessary libraries and loads MRI volume data from a URL. It prepares the data for visualization by transposing and reshaping the volume.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nimport time\nimport numpy as np\n\nfrom skimage import io\n\nvol = io.imread(\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif\")\nvolume = vol.T\nr, c = volume[0].shape\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Offline Plotly Scatter Plot\nDESCRIPTION: Demonstrates how to create a basic scatter plot using Plotly's offline mode, which opens in a web browser.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nplot([go.Scatter(x=[1, 2, 3], y=[3, 1, 6])])\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart of Event Categories with Plotly\nDESCRIPTION: Python code that creates a bar chart visualization using Plotly to display the sum of events by category. The chart displays category names on the x-axis and the sum of category IDs on the y-axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Event Categories Sum\", yaxis=dict(title=\"Sum\"))\ndata = [go.Bar(x=df.category_name, y=df.category_sum)]\npy.iplot(go.Figure(data=data, layout=layout))\n```\n\n----------------------------------------\n\nTITLE: Creating a Full USA Choropleth for Unemployment Rates in Python\nDESCRIPTION: This example demonstrates how to create a choropleth map for the entire United States, showing unemployment rates by county.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv')\ndf_sample['State FIPS Code'] = df_sample['State FIPS Code'].apply(lambda x: str(x).zfill(2))\ndf_sample['County FIPS Code'] = df_sample['County FIPS Code'].apply(lambda x: str(x).zfill(3))\ndf_sample['FIPS'] = df_sample['State FIPS Code'] + df_sample['County FIPS Code']\n\ncolorscale = [\"#f7fbff\",\"#ebf3fb\",\"#deebf7\",\"#d2e3f3\",\"#c6dbef\",\"#b3d2e9\",\"#9ecae1\",\n              \"#85bcdb\",\"#6baed6\",\"#57a0ce\",\"#4292c6\",\"#3082be\",\"#2171b5\",\"#1361a9\",\n              \"#08519c\",\"#0b4083\",\"#08306b\"]\nendpts = list(np.linspace(1, 12, len(colorscale) - 1))\nfips = df_sample['FIPS'].tolist()\nvalues = df_sample['Unemployment Rate (%)'].tolist()\n\nfig = ff.create_choropleth(\n    fips=fips, values=values,\n    binning_endpoints=endpts,\n    colorscale=colorscale,\n    show_state_data=False,\n    show_hover=True, centroid_marker={'opacity': 0},\n    asp=2.9, title='USA by Unemployment %',\n    legend_title='% unemployed'\n)\npy.iplot(fig, filename='choropleth_full_usa')\n```\n\n----------------------------------------\n\nTITLE: Rendering the Les Miserables 3D Network Graph with Plotly in Python\nDESCRIPTION: Combines the data and layout into a figure and renders the interactive 3D network graph using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndata=[trace1, trace2]\nfig=go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='Les-Miserables')\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Documentation for Plotly Objects\nDESCRIPTION: Shows how to access the help documentation for Plotly graph objects using the help() function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhelp(Figure)  # call help()!\n```\n\nLANGUAGE: python\nCODE:\n```\nhelp(Data)  # call help()!\n```\n\nLANGUAGE: python\nCODE:\n```\nhelp(Layout)  # call help()!\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Heatmap Source Code with IFrame in Python\nDESCRIPTION: Shows how to embed the source code of a Dash heatmap application using an IFrame. This provides visibility into the implementation details of the Dash example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-heatmapplot/code\", width=\"120%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Dendrogram Creation in Plotly\nDESCRIPTION: This code snippet demonstrates how to access the help documentation for the create_dendrogram function in Plotly's figure_factory module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_dendrogram)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Point Clustering with Alpha Shapes using Plotly in Python\nDESCRIPTION: This code loads point cloud data and visualizes it as 3D clusters using Plotly's mesh3d feature with alpha shapes. It creates both a scatter plot showing individual points and a mesh showing the clustered regions with alpha hull parameter set to 7.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-clusters/3d-clusters.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/alpha_shape.csv')\ndf.head()\n\nscatter = dict(\n    mode = \"markers\",\n    name = \"y\",\n    type = \"scatter3d\",    \n    x = df['x'], y = df['y'], z = df['z'],\n    marker = dict( size=2, color=\"rgb(23, 190, 207)\" )\n)\nclusters = dict(\n    alphahull = 7,\n    name = \"y\",\n    opacity = 0.1,\n    type = \"mesh3d\",    \n    x = df['x'], y = df['y'], z = df['z']\n)\nlayout = dict(\n    title = '3d point clustering',\n    scene = dict(\n        xaxis = dict( zeroline=False ),\n        yaxis = dict( zeroline=False ),\n        zaxis = dict( zeroline=False ),\n    )\n)\nfig = dict( data=[scatter, clusters], layout=layout )\n# Use py.iplot() for IPython notebook\npy.iplot(fig, filename='3d point clustering')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import plotly and check its installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorway/colorway.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Adding Slider Configuration to Plotly Layout\nDESCRIPTION: Code showing how to attach slider configuration to the main figure layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfigure['layout']['sliders'] = [sliders_dict]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pie Chart with Plotly in Python\nDESCRIPTION: This code creates a simple pie chart using Plotly. It defines labels and values for the chart segments and uses the go.Pie function to generate the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nlabels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']\nvalues = [4500,2500,1053,500]\n\ntrace = go.Pie(labels=labels, values=values)\n\npy.iplot([trace], filename='basic_pie_chart')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Wind Speed Data with Plotly in Python\nDESCRIPTION: This code loads wind speed data from a CSV file, creates a sample table using Plotly's FigureFactory, and displays it. It demonstrates data import and basic table creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwind_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = wind_data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Layout for Plotly Subplots in Python\nDESCRIPTION: Defines a detailed layout for a Plotly figure with multiple subplots, including custom positioning, axis properties, and annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayout1 = dict(width=950, height=800, autosize=False, title='Bitcoin mining stats for 180 days',\n    margin = dict(t=100,l=0,r=0,b=100),\n    showlegend=False,          \n    xaxis1=dict(axis, **dict(domain=[0.55,0.98], anchor= 'y1', showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0.55,0.98], anchor= 'y2', showticklabels=False)),          \n    xaxis3=dict(axis, **dict(domain=[0.55,0.98], anchor= 'y3')), \n    yaxis1=dict(axis, **dict(domain=[0.68,1], anchor= 'x1', hoverformat='.2f')),  \n    yaxis2=dict(axis, **dict(domain=[0.34,0.66], anchor= 'x2', tickprefix='$', hoverformat='.2f')),\n    yaxis3=dict(axis, **dict(domain=[0.0,0.32], anchor= 'x3', tickprefix=u'\\u20BF', hoverformat='.2f')),          \n    plot_bgcolor='rgba(228, 222,249, 0.65)' ,\n    annotations=[dict(showarrow=False, \n            text='The last 20 records',  \n            xref='paper',     \n            yref='paper',     \n            x=0.2,  \n            y=1.01,  \n            xanchor='left',   \n            yanchor='bottom',  \n            font=dict(\n            size=15 ))]           \n)\n\nfig1 = dict(data=[table_trace1, trace1, trace2, trace3], layout=layout1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Colorway for Multiple Parabolas in Plotly\nDESCRIPTION: Creates multiple parabola plots with custom colors using the colorway attribute. Demonstrates generating parabola functions, plotting them with Scatter traces, and applying a custom color palette.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorway/colorway.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\n\ndef parabola_gen(a, b):\n    return lambda x: a * x ** 2 + b\n\n\nparabolas = [parabola_gen(a, b) for a, b in zip(np.linspace(1, 3, 7), np.linspace(2, 14, 7))]\nx = np.linspace(-1, 3)\ndata = [go.Scatter(x=x, y=p(x), mode='lines') for p in parabolas]\n\ncolorway = ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844']\nlayout = go.Layout(colorway=colorway)\n\npy.iplot(go.Figure(data=data, layout=layout))\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Table from Pandas DataFrame\nDESCRIPTION: Demonstrates how to create a table from a Pandas DataFrame using data from a CSV file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv')\n\ntrace = go.Table(\n    header=dict(values=list(df.columns),\n                fill = dict(color='#C2D4FF'),\n                align = ['left'] * 5),\n    cells=dict(values=[df.Rank, df.State, df.Postal, df.Population],\n               fill = dict(color='#F5F8FF'),\n               align = ['left'] * 5))\n\ndata = [trace] \npy.iplot(data, filename = 'pandas_table')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sine Wave Plot with Plotly\nDESCRIPTION: Generates multiple sine waves with different frequencies and creates a data array for plotting. Only one wave is initially visible, controlled by the 'visible' parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/sliders/sliders.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport numpy as np\n\ndata = [dict(\n        visible = False,\n        line=dict(color='#00CED1', width=6),\n        name = '𝜈 = '+str(step),\n        x = np.arange(0,10,0.01),\n        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]\ndata[10]['visible'] = True\n\npy.iplot(data, filename='Single Sine Wave')\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Callback for Image Updates\nDESCRIPTION: Defines and installs a callback function to update the DataShader image when the plot is zoomed or resized.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef update_ds_image(layout, x_range, y_range, plot_width, plot_height):\n    img = f.layout.images[0]\n    \n    # Update with batch_update so all updates happen simultaneously\n    with f.batch_update():\n        img.x = x_range[0]\n        img.y = y_range[1]\n        img.sizex = x_range[1] - x_range[0]\n        img.sizey = y_range[1] - y_range[0]\n        img.source = gen_ds_image(x_range, y_range, plot_width, plot_height)\n\n# Install callback to run exactly once if one or more of the following properties changes\n#  - xaxis range\n#  - yaxis range\n#  - figure width\n#  - figure height\nf.layout.on_change(update_ds_image, 'xaxis.range', 'yaxis.range', 'width', 'height')\n```\n\n----------------------------------------\n\nTITLE: Performing Two-Sample T-Test\nDESCRIPTION: Performs a two-sample t-test to compare means of two independent samples, creating a table to display the results.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntwosample_results = scipy.stats.ttest_ind(data1, data2)\n\nmatrix_twosample = [\n    ['', 'Test Statistic', 'p-value'],\n    ['Sample Data', twosample_results[0], twosample_results[1]]\n]\n\ntwosample_table = FF.create_table(matrix_twosample, index=True)\npy.iplot(twosample_table, filename='twosample-table')\n```\n\n----------------------------------------\n\nTITLE: Defining Axis Creation Function for Soil Types Ternary Plot in Python\nDESCRIPTION: This function creates the axis settings for the soil types ternary plot, including title, tick settings, and grid display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef makeAxis(title): \n    return {\n            'title': title,\n            'ticksuffix': '%',\n            'min': 0.01,\n            'linewidth': 2,\n            'ticks': 'outside',\n            'ticklen': 8,\n            'showgrid': True,\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Table from External CSV\nDESCRIPTION: Reading CSV data from a GitHub URL and creating a table visualization using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\n\ndf_external_source = FF.create_table(df.head())\npy.iplot(df_external_source, filename='df-external-source-table')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Histogram Bin Size with Plotly in Python\nDESCRIPTION: This code demonstrates how to create a histogram with larger bin sizes using Plotly. It uses the same Weibull distribution data but increases the bin size to 0.75.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/frequency-counts/python-Frequency-Counts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, xbins=dict(start=np.min(x), size=0.75, end=np.max(x)),\n                   marker=dict(color='rgb(0, 0, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram Frequency Counts\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-freq-counts-larger-bins')\n```\n\n----------------------------------------\n\nTITLE: Ordering SQL Results and Visualizing with Plotly\nDESCRIPTION: Orders SQL query results and creates an interactive bar chart using Plotly to visualize complaint counts by agency.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, COUNT(*) as `num_complaints`'\n                       'FROM data '\n                       'GROUP BY Agency '\n                       'ORDER BY -num_complaints', disk_engine)\n\npy.iplot([go.Bar(x=df.Agency, y=df.num_complaints)], filename='311/most common complaints by agency')\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Scatter Plot with 75,000 Points in Plotly\nDESCRIPTION: This code snippet creates a scatter plot using Plotly's Scattergl() function, which utilizes WebGL for improved performance with large datasets. It generates 75,000 random points and sets up the plot with custom marker properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/comparewebgl.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 75000\ntrace = go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode = 'markers',\n    marker = dict(\n        line = dict(\n            width = 1, \n            color = '#404040')\n    )\n)\ndata = [trace]\nlayout = dict(title = 'WEBGL')\nfig = dict(data=data, layout=layout)\npy.iplot(data, filename='webgl75')\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Bubble Chart in Plotly\nDESCRIPTION: Basic bubble chart implementation with fixed marker sizes for data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(\n        size=[40, 60, 80, 100],\n    )\n)\n\ndata = [trace0]\npy.iplot(data, filename='bubblechart-size')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for the documentation and uses a publisher tool to publish the notebook as part of the Plotly documentation. It includes custom font loading and CSS styling for the IPython notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'text-and-annotations.ipynb', 'python/text-and-annotations/', 'Text and Annotations',\n    'How to add text labels and annotations to plots in python.',\n    title = 'Text and Annotations | plotly',\n    thumbnail='thumbnail/text-and-annotations.jpg', language='python',\n    has_thumbnail='true', display_as='file_settings', order=30, \n    ipynb='~notebook_demo/204', uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Generating Plotly Graph URLs with py.plot\nDESCRIPTION: Demonstrates how to generate Plotly graph URLs programmatically using py.plot instead of using hardcoded URLs. This creates a new graph on the Plotly server and returns the URL that can be used in email templates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nurl = py.plot([{'x': [1,2,3], 'y': [3,1,6], 'type': 'bar'}], auto_open=False, filename='email-report-graph-1')\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fresnel Lighting on Surface Plots\nDESCRIPTION: Creates two surface plots with different fresnel values. Fresnel controls how light washes over the plot area, with values ranging from 0 to 5.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig = tls.make_subplots(rows=1, cols=2,specs=[[{'is_3d': True},{'is_3d': True} ]])\ntrace1 = go.Surface(z=Z1, colorscale='Viridis', lighting=dict(fresnel=0.1))\ntrace2 = go.Surface(z=Z2, colorscale='Viridis',showscale=False, lighting=dict(fresnel=4.5))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n```\n\n----------------------------------------\n\nTITLE: Attaching Metadata to a Plotly Grid\nDESCRIPTION: Demonstrates how to attach custom JSON metadata to a Plotly grid when uploading it. This feature is available in Chart Studio Enterprise.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmeta = {\n    \"Month\": \"November\",\n    \"Experiment ID\": \"d3kbd\",\n    \"Operator\": \"James Murphy\",\n    \"Initial Conditions\": {\n          \"Voltage\": 5.5\n    }\n}\n\ngrid_url = py.grid_ops.upload(grid, filename='grid_with_metadata_'+str(dt.now()), meta=meta)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Defining Network Graph Structure in Custom Format\nDESCRIPTION: This code snippet defines the structure of a network graph using a custom format. It specifies the graph as undirected and defines individual nodes with IDs and labels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_0\n\nLANGUAGE: Custom\nCODE:\n```\nCreator \"Mark Newman on Sat Jul 22 06:24:59 2006\"\ngraph\n[\n  directed 0\n  node\n  [\n    id 0\n    label \"ABRAMSON, G\"\n  ]\n  node\n  [\n    id 1\n    label \"KUPERMAN, M\"\n  ]\n  node\n  [\n    id 2\n    label \"ACEBRON, J\"\n  ]\n  // ... additional nodes ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Scatter Plot with 75,000 Points in Plotly\nDESCRIPTION: This code snippet creates a scatter plot using Plotly's Scatter() function, which uses SVG rendering. It generates 75,000 random points and sets up the plot with the same marker properties as the WebGL version for comparison.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/comparewebgl.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 75000\ntrace = go.Scatter(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode = 'markers',\n    marker = dict(\n        line = dict(\n            width = 1, \n            color = '#404040')\n    )\n)\ndata = [trace]\nlayout = dict(title = 'SVG')\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='svg75')\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimal Portfolio Weights in Python\nDESCRIPTION: Prints the calculated optimal portfolio weights that provide the best risk-return trade-off according to the Markowitz model. These weights represent the proportion of capital to allocate to each asset in the portfolio.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint weights\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plot with Random Data in Python\nDESCRIPTION: Creates a box plot with 15 traces using random normally distributed data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Make list of Box traces\ntraces = [\n    Box(\n        y=np.random.randn(40),\n        name='box{}'.format(i) \n    ) \n    for i in range(15)]\n```\n\n----------------------------------------\n\nTITLE: Displaying a Presentation with Transitions in Jupyter\nDESCRIPTION: This code renders the previously created presentation with custom slide transitions in a Jupyter notebook, enabling interactive viewing of transition effects between slides.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_6 = url_to_iframe(pres_url_6, True)\nIPython.display.HTML(iframe_6)\n```\n\n----------------------------------------\n\nTITLE: Setting Ideogram Labels and Colors (Python)\nDESCRIPTION: This snippet defines labels and colors for the ideograms in the chord diagram, using a predefined color scheme.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlabels=['Emma', 'Isabella', 'Ava', 'Olivia', 'Sophia']\nideo_colors=['rgba(244, 109, 67, 0.75)',\n             'rgba(253, 174, 97, 0.75)',\n             'rgba(254, 224, 139, 0.75)',\n             'rgba(217, 239, 139, 0.75)',\n             'rgba(166, 217, 106, 0.75)']#brewer colors with alpha set on 0.75\n```\n\n----------------------------------------\n\nTITLE: Creating Polynomial Fit and Scatter Plot with Plotly in Python\nDESCRIPTION: This code creates a polynomial fit for a set of data points and visualizes it using Plotly. It generates a scatter plot of the original data and a line plot of the polynomial fit.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/polynomial-fit/Polynomial-Fits.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Scientific libraries\nimport numpy as np\n\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\n# get x and y vectors\nx = points[:,0]\ny = points[:,1]\n\n# calculate polynomial\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\nprint f\n\n# calculate new x's and y's\nx_new = np.linspace(x[0], x[-1], 50)\ny_new = f(x_new)\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n                  x=x,\n                  y=y,\n                  mode='markers',\n                  marker=go.Marker(color='rgb(255, 127, 14)'),\n                  name='Data'\n                  )\n\ntrace2 = go.Scatter(\n                  x=x_new,\n                  y=y_new,\n                  mode='lines',\n                  marker=go.Marker(color='rgb(31, 119, 180)'),\n                  name='Fit'\n                  )\n\nannotation = go.Annotation(\n                  x=6,\n                  y=-4.5,\n                  text='$\\textbf{Fit}: 0.43X^3 - 0.56X^2 + 16.78X + 10.61$',\n                  showarrow=False\n                  )\nlayout = go.Layout(\n                title='Polynomial Fit in Python',\n                plot_bgcolor='rgb(229, 229, 229)',\n                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  annotations=[annotation]\n                )\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.plot(fig, filename='Polynomial-Fit-in-python')\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Box Plots with Plotly in Python\nDESCRIPTION: This example shows how to create grouped box plots using Plotly. It creates three box plots for different categories (kale, radishes, carrots) grouped by day, with custom colors for each category.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\ntrace0 = go.Box(\n    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n    x=x,\n    name='kale',\n    marker=dict(\n        color='#3D9970'\n    )\n)\ntrace1 = go.Box(\n    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n    x=x,\n    name='radishes',\n    marker=dict(\n        color='#FF4136'\n    )\n)\ntrace2 = go.Box(\n    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n    x=x,\n    name='carrots',\n    marker=dict(\n        color='#FF851B'\n    )\n)\ndata = [trace0, trace1, trace2]\nlayout = go.Layout(\n    yaxis=dict(\n        title='normalized moisture',\n        zeroline=False\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for create_trisurf in Plotly\nDESCRIPTION: Displays the help documentation for the create_trisurf function from Plotly's Figure Factory, showing available parameters and usage instructions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhelp(FF.create_trisurf)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Discretized Heatmap Colorscale\nDESCRIPTION: Creates a heatmap with custom discrete colorscale where colors are defined for specific value ranges using RGB values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\npy.iplot([{\n    'z': [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ],\n    'type': 'heatmap',\n    'colorscale': [\n        [0, 'rgb(0, 0, 0)'],\n        [0.1, 'rgb(0, 0, 0)'],\n        [0.1, 'rgb(20, 20, 20)'],\n        [0.2, 'rgb(20, 20, 20)'],\n        [0.2, 'rgb(40, 40, 40)'],\n        [0.3, 'rgb(40, 40, 40)'],\n        [0.3, 'rgb(60, 60, 60)'],\n        [0.4, 'rgb(60, 60, 60)'],\n        [0.4, 'rgb(80, 80, 80)'],\n        [0.5, 'rgb(80, 80, 80)'],\n        [0.5, 'rgb(100, 100, 100)'],\n        [0.6, 'rgb(100, 100, 100)'],\n        [0.6, 'rgb(120, 120, 120)'],\n        [0.7, 'rgb(120, 120, 120)'],\n        [0.7, 'rgb(140, 140, 140)'],\n        [0.8, 'rgb(140, 140, 140)'],\n        [0.8, 'rgb(160, 160, 160)'],\n        [0.9, 'rgb(160, 160, 160)'],\n        [0.9, 'rgb(180, 180, 180)'],\n        [1.0, 'rgb(180, 180, 180)']\n    ],\n    'colorbar': {\n        'tick0': 0,\n        'dtick': 1\n    }\n}], filename='heatmap-discrete-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Publishing Choropleth Map Notebook in Python\nDESCRIPTION: This code snippet sets up the environment by importing necessary libraries, installing a GitHub package, and then publishes a Jupyter notebook about creating USA county choropleth maps. It includes customization of display settings and metadata for the published content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'county_choropleth.ipynb', 'python/county-choropleth/', 'USA County Choropleth Maps',\n    'How to create colormaped representations of USA counties by FIPS values in Python.',\n    title = 'Python USA County Choropleth Maps | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/county-choropleth-usa-greybkgd.jpg', \n    language='python', page_type='example_index',\n    display_as='maps', order=0,\n    uses_plotly_offline=False,ipynb='~notebook_demo/212')\n```\n\n----------------------------------------\n\nTITLE: Plotting DataFrames with Plotly in Python\nDESCRIPTION: This code snippet describes creating and visualizing data in a DataFrame with Plotly's Python library by defining the x, y values and plotting it using the iplot method. The input involves a DataFrame created with Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = cf.datagen.lines()\n\npy.iplot([\n    {'x': df.index,\n     'y': df[col],\n     'name': col\n    }  for col in df.columns], filename='cufflinks/simple-line')\n```\n\n----------------------------------------\n\nTITLE: Embedding Streaming Demo Plot in Plotly Python\nDESCRIPTION: This snippet embeds a previously created streaming demo into the current document using Plotly's tools.embed function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('streaming-demos','124')\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Parametric Surface Plots with Plotly and NumPy\nDESCRIPTION: This code creates an interactive 3D parametric surface plot using Plotly and NumPy. It generates a complex surface using mathematical equations with customized axis styling and background colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ns = np.linspace(0, 2 * np.pi, 240)\nt = np.linspace(0, np.pi, 240)\ntGrid, sGrid = np.meshgrid(s, t)\n\nr = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)\nx = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)\ny = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)\nz = r * np.cos(tGrid)                  # z = r*cos(t)\n\nsurface = go.Surface(x=x, y=y, z=z)\ndata = [surface]\n\nlayout = go.Layout(\n    title='Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='jupyter-parametric_plot')\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple Datasets in a Distribution Plot\nDESCRIPTION: Demonstrates how to create a distribution plot with multiple datasets, each with a different mean. This example shows four groups of normally distributed random data with means shifted by 2 units.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\n# Add histogram data\nx1 = np.random.randn(200)-2  \nx2 = np.random.randn(200)  \nx3 = np.random.randn(200)+2  \nx4 = np.random.randn(200)+4  \n\n# Group data together\nhist_data = [x1, x2, x3, x4]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3', 'Group 4']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\n\n# Plot!\npy.iplot(fig, filename='Distplot with Multiple Datasets')\n```\n\n----------------------------------------\n\nTITLE: Plot Neighborhood Scatter with Cluster Colors\nDESCRIPTION: Creates a scatter plot to show neighborhoods with marker color indicating cluster membership, utilizing Plotly's Scatter and Marker.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Represent neighborhoods as in previous bubble chart, adding cluster information under color.\ntrace0 = pgo.Scatter(x=df_X_reduced[0],\n                     y=df_X_reduced[1],\n                     text=df.index,\n                     name='',\n                     mode='markers',\n                     marker=pgo.Marker(size=df['tpop10'],\n                                       sizemode='diameter',\n                                       sizeref=df['tpop10'].max()/50,\n                                       opacity=0.5,\n                                       color=Z),\n                     showlegend=False\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Binning Function in Histograms with Plotly\nDESCRIPTION: This snippet shows how to specify different binning functions for histograms. It demonstrates both 'count' and 'sum' functions on categorical data, comparing how values are aggregated across categories.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [\"Apples\",\"Apples\",\"Apples\",\"Oranges\", \"Bananas\"]\ny = [\"5\",\"10\",\"3\",\"10\",\"5\"]\n\ndata = [\n  go.Histogram(\n    histfunc = \"count\",\n    y = y,\n    x = x,\n    name = \"count\"\n  ),\n  go.Histogram(\n    histfunc = \"sum\",\n    y = y,\n    x = x,\n    name = \"sum\"\n  )\n]\n\npy.iplot(data, filename='binning function')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Baseline Detection in Python\nDESCRIPTION: This snippet imports required libraries including Plotly, NumPy, Pandas, SciPy, and PeakUtils for data manipulation and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-detection/python-Baseline-Detection.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Files for Red and Blue Counties in Python\nDESCRIPTION: This code generates JSON files for red and blue counties based on the previously categorized data. These files will be used for creating the choropleth map.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nred_data = {\"type\": \"FeatureCollection\"}\nred_data['features'] = red_counties\n\nblue_data = {\"type\": \"FeatureCollection\"}\nblue_data['features'] = blue_counties\n\nwith open('florida-red-data.json', 'w') as f:\n    f.write(json.dumps(red_data))\nwith open('florida-blue-data.json', 'w') as f:\n    f.write(json.dumps(blue_data))\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Chart with Custom Colorbar for Planet Temperatures in Python\nDESCRIPTION: This code creates a 3D bubble chart of planets with customized colorbar representing temperature. It plots distance from sun, density, and gravity with bubble sizes representing planet diameters and colors indicating temperature ranges.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-bubble/3dbubble.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']\ntemperatures = [167, 464, 15, -20, -65, -110, -140, -195, -200, -225]\ndistance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]\ndensity = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]\ngravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]\nplanet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]\n\n# Create trace, sizing bubbles by planet diameter\ntrace1 = go.Scatter3d(\n    x = distance_from_sun,\n    y = density,\n    z = gravity,\n    text = planets,\n    mode = 'markers',\n    marker = dict(\n        sizemode = 'diameter',\n        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/#scatter-marker-sizeref\n        size = planet_diameter,\n        color = temperatures,\n        colorbar = dict(title = 'Mean<br>Temperature'),\n        colorscale=[[0, 'rgb(5, 10, 172)'], [.3, 'rgb(255, 255, 255)'], [1, 'rgb(178, 10, 28)']]\n        )  \n)\ndata=[trace1]\n\nlayout=go.Layout(width=800, height=800, title = 'Planets!!',\n            scene = dict(xaxis=dict(title='Distance from Sun',\n                                    titlefont=dict(color='Orange')),\n                            yaxis=dict(title='Density',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Gravity',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='solar_system_planet_temp')\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Names in Plotly with Python\nDESCRIPTION: This example shows how to customize the names displayed in the legend of a Plotly chart. It uses the 'name' parameter for each trace to set custom legend labels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    name='Positive'\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n    name='Negative'\n)\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data)\n\npy.iplot(fig, filename='legend-names')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple snippet to import plotly and check its installed version. This is useful to ensure you have the latest version before creating visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/streamline/streamline.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Multiple Isosurfaces with Caps in Python\nDESCRIPTION: Creates multiple isosurfaces with caps enabled on all axes, using a complex mathematical function and custom styling. Includes camera positioning and template configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/iso-surface/isosurfaces.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.io as pio\n\nimport numpy as np\n\nf = lambda x, y, z:  81*(x**3 + y**3 + z**3) - 189*(x**2*y + x**2*z + y**2*x +y**2*z + z**2*x + z**2*y) +\\\n                     54*(x*y*z) + 126*(x*y + x*z + y*z) - 9*(x**2 + y**2 + z**2) - 9*(x + y + z) + 1\n\na = 1\nX, Y, Z = np.mgrid[-a:a:25j, -a:a:25j, -a:a:25j]\n\ndata = [go.Isosurface(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=f(X, Y, Z).flatten(),\n    isomin=-10,\n    isomax=10,\n    surface=dict(show=True,count=4, fill=0.8, pattern='odd'),\n    caps=go.isosurface.Caps(\n        z=dict(show=True),\n        x=dict(show=True),\n        y=dict(show=True)\n    ),\n)]\n\nlayout = go.Layout(\n    margin=dict(t=0, l=0, b=0),\n    template=pio.templates['plotly'],\n    scene=dict(\n        camera=dict(\n            eye=dict(\n                x=1.86,\n                y=0.61,\n                z=0.98\n            )\n        )\n    )\n)\n\nfig = go.Figure(data, layout)\n\npy.iplot(fig, config=dict(showSendToCloud=True), filename='multiple-isosurface-with-caps')\n```\n\n----------------------------------------\n\nTITLE: Creating a Candlestick Chart without Rangeslider in Plotly\nDESCRIPTION: Shows how to create a candlestick chart with the rangeslider disabled. This example uses a custom layout configuration to hide the default rangeslider that appears at the bottom of candlestick charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Candlestick(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\n\nlayout = go.Layout(\n    xaxis = dict(\n        rangeslider = dict(\n            visible = False\n        )\n    )\n)\n\ndata = [trace]\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename='simple_candlestick_without_range_slider')\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Inset Map with Plotly in Python\nDESCRIPTION: This code creates a choropleth inset map showing Ebola cases in West Africa. It demonstrates how to create a map with multiple layers, including scatter plots and inset maps, using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/choropleth-maps/Choropleth_maps.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')\ndf.head()\n\ncases = []\ncolors = ['rgb(239,243,255)','rgb(189,215,231)','rgb(107,174,214)','rgb(33,113,181)']\nmonths = {6:'June',7:'July',8:'Aug',9:'Sept'}\n\nfor i in range(6,10)[::-1]:\n    cases.append(go.Scattergeo(\n        lon = df[ df['Month'] == i ]['Lon'], #-(max(range(6,10))-i),\n        lat = df[ df['Month'] == i ]['Lat'],\n        text = df[ df['Month'] == i ]['Value'],\n        name = months[i],\n        marker = go.scattergeo.Marker(\n            size = df[ df['Month'] == i ]['Value']/50,\n            color = colors[i-6],\n            line = go.scattergeo.marker.Line(width = 0)\n        ),\n    ) )\n\ncases[0]['text'] = df[ df['Month'] == 9 ]['Value'].map('{:.0f}'.format).astype(str)+' '+\\\n    df[ df['Month'] == 9 ]['Country']\ncases[0]['mode'] = 'markers+text'\ncases[0]['textposition'] = 'bottom center'\n\ninset = [\n    go.Choropleth(\n        locationmode = 'country names',\n        locations = df[ df['Month'] == 9 ]['Country'],\n        z = df[ df['Month'] == 9 ]['Value'],\n        text = df[ df['Month'] == 9 ]['Country'],\n        colorscale = [[0,'rgb(0, 0, 0)'],[1,'rgb(0, 0, 0)']],\n        autocolorscale = False,\n        showscale = False,\n        geo = 'geo2'\n    ),\n    go.Scattergeo(\n        lon = [21.0936],\n        lat = [7.1881],\n        text = ['Africa'],\n        mode = 'text',\n        showlegend = False,\n        geo = 'geo2'\n    )\n]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Ebola cases reported by month in West Africa 2014<br> \\\nSource: <a href=\"https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases\">\\HDX</a>'),\n    geo = go.layout.Geo(\n        resolution = 50,\n        scope = 'africa',\n        showframe = False,\n        showcoastlines = True,\n        showland = True,\n        landcolor = \"rgb(229, 229, 229)\",\n        countrycolor = \"rgb(255, 255, 255)\" ,\n        coastlinecolor = \"rgb(255, 255, 255)\",\n        projection = go.layout.geo.Projection(\n            type = 'equirectangular'\n        ),\n        lonaxis = go.layout.geo.Lonaxis(\n            range= [ -15.0, -5.0 ]\n        ),\n        lataxis = go.layout.geo.Lataxis(\n            range= [ 0.0, 12.0 ]\n        ),\n        domain = go.layout.geo.Domain(\n            x = [ 0, 1 ],\n            y = [ 0, 1 ]\n        )\n    ),\n    geo2 = go.layout.Geo(\n        scope = 'africa',\n        showframe = False,\n        showland = True,\n        landcolor = \"rgb(229, 229, 229)\",\n        showcountries = False,\n        domain = go.layout.geo.Domain(\n            x = [ 0, 0.6 ],\n            y = [ 0, 0.6 ]\n        ),\n        bgcolor = 'rgba(255, 255, 255, 0.0)',\n    ),\n    legend = go.layout.Legend(\n           traceorder = 'reversed'\n    )\n)\n\nfig = go.Figure(layout=layout, data=cases+inset)\npy.iplot(fig, filename='West Africa Ebola cases 2014')\n```\n\n----------------------------------------\n\nTITLE: Implementing Peak Detection Visualization\nDESCRIPTION: Detects peaks in the time series using PeakUtils with a low threshold and visualizes them as red crosses on the original plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncb = np.array(time_series)\nindices = peakutils.indexes(cb, thres=0.02/max(cb), min_dist=0.1)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices,\n    y=[time_series[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-peaks')\n```\n\n----------------------------------------\n\nTITLE: Exponential Tick Formatting in Plotly\nDESCRIPTION: Shows how to format axis ticks using exponential notation with the exponentformat attribute.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny = [68000, 52000, 60000, 20000, 95000, 40000, 60000, 79000, 74000, 42000, 20000, 90000]\n\ntrace0 = go.Scatter(\n    x = x,\n    y = y\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    yaxis = go.layout.YAxis(\n        showexponent = 'all',\n        exponentformat = 'e'\n    )\n)\n\nfig = go.Figure(\n    data = data,\n    layout = layout\n)\n\npy.iplot(fig, filename='using-exponentformat')\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Plotly in R\nDESCRIPTION: This snippet demonstrates how to create a scatter plot using Plotly in R. It generates random data for x and y coordinates, color, and size, then uses plot_ly to create an interactive scatter plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/Plotly-Jupyter-Example.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# Scatter plot\nlibrary(plotly)\n\nset.seed(123)\n\nx <- rnorm(1000)\ny <- rchisq(1000, df = 1, ncp = 0)\ncolor <- sample(LETTERS[1:5], size = 1000, replace = T)\nsize <- sample(1:5, size = 1000, replace = T)\n\nds <- data.frame(x, y, color, size)\n\np <- plot_ly(ds, x = ~x, y = ~y, color = ~color, size = ~size) %>% \n  layout(title = \"Scatter plot in\")\nembed_notebook(p)\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing 3D Surface Data in Plotly\nDESCRIPTION: Imports data from a CSV file and creates a 3D surface plot. The code defines the surface plot with elevation data and configures the layout including dimensions and margins.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# Read data from a csv\nz_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')\n\ndata = [\n    go.Surface(\n        z=z_data.as_matrix()\n    )\n]\nlayout = go.Layout(\n    title='Mt Bruno Elevation',\n    autosize=False,\n    width=600,\n    height=600,\n    margin=dict(\n        l=65,\n        r=50,\n        b=65,\n        t=90\n    )\n)\nfig = go.Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Creating Percentage-based Histogram\nDESCRIPTION: Generates a histogram with percentage normalization showing the relative frequency distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, histnorm='percent',\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(50, 50, 125)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Frequency Count\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-percentage')\n```\n\n----------------------------------------\n\nTITLE: Defining Hover Function for Plotly Scatter Plot\nDESCRIPTION: This snippet defines a function `hover_fn` that is triggered when the user hovers over a data point on the scatter plot.  It retrieves the index of the hovered data point and updates the `image.value` with the corresponding image data based on the 'Model Year' from a `cars_df` DataFrame (which is not defined within the provided snippet but assumed to be in the same scope).  Then it registers the `hover_fn` function as the hover handler for the scatter plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/hover scratch.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef hover_fn(trace, points, state):\n\n    ind = points.point_inds[0]    \n    # Update image widget\n    model_year = cars_df['Model Year'][ind].replace(' ', '_')\n    image.value = image_data[model_year]\n\nscatter.on_hover(hover_fn)\n```\n\n----------------------------------------\n\nTITLE: Counting and Grouping Data with COUNT and GROUP BY\nDESCRIPTION: Demonstrates counting occurrences by group using COUNT and GROUP BY in a SQL query, creating a summary of complaints by agency.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, COUNT(*) as `num_complaints`'\n                       'FROM data '\n                       'GROUP BY Agency ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plotly Stream Tokens\nDESCRIPTION: Obtains stream tokens from credentials file and selects one for use in the streaming visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstream_tokens = tls.get_credentials_file()['stream_ids']\ntoken = stream_tokens[-2]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens\nprint token\n\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-trace WebGL Line Plot\nDESCRIPTION: Creates multiple WebGL line traces with 5000 points each. Demonstrates how to generate multiple traces in a single plot with different y-axis offsets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/webgl.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ndata = []\ntrace_num = 10\npoint_num = 5000\nfor i in range(trace_num):\n    data.append(go.Scattergl(\n        x = np.linspace(0, 1, point_num),\n        y = np.random.randn(point_num)+(i*5)\n    )\n)\nlayout = dict(showlegend=False)\nfig=dict(data=data, layout=layout)\npy.iplot(fig, filename='WebGL_line')\n```\n\n----------------------------------------\n\nTITLE: Simulating Poisson Samples Conditioned on Lambda in Python\nDESCRIPTION: This snippet simulates Poisson-distributed samples conditionally based on lambda values obtained from a gamma distribution. It serves as a step in estimating the expected value of a random variable following a negative binomial distribution. The mean of these simulated values provides an approximation of the expected value.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsim_vals = np.random.poisson(lam)\n```\n\n----------------------------------------\n\nTITLE: Enumerated Ticks with Tickvals/Ticktext in Plotly Python\nDESCRIPTION: This snippet shows how to use `tickvals` and `ticktext` to create enumerated ticks on the x-axis of a Plotly chart. It fetches Apple and Tesla stock data, filters it for 2016, and then defines custom labels (`labels`) and corresponding tick values (`tickvals`) for the x-axis, representing quarterly dates. The `go.layout.XAxis` is configured with these custom ticks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go \n\nimport pandas as pd\n\n# get and filter apple data\napple_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\napple_df_2016 = apple_df[apple_df.Date < '2017'][apple_df.Date > '2016']\n\n# get clean and filter tesla data\ntesla_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tesla-stock-price.csv')\ntesla_df.date = pd.to_datetime(tesla_df.date)\ntesla_df_2016 = tesla_df[tesla_df.date < '2017'][tesla_df.date > '2016']\n\n# set x-axis labels and their corresponding data values\nlabels = ['End of Q1', 'End of Q2', 'End of Q3', 'End of Q4']\ntickvals = ['2016-04-01', '2016-07-01', '2016-10-01', apple_df_2016.Date.max()]\n\ndata=[\n    go.Scatter(\n        x = apple_df_2016.Date, \n        y=apple_df_2016['AAPL.High'], \n        name='Apple', \n        marker=dict(color='#851e52'),\n    ),\n    go.Scatter(\n        x=tesla_df_2016.date, \n        y=tesla_df_2016.high, \n        name='Tesla', \n        yaxis='y2',\n        marker=dict(color='#d3560e'),\n    ),\n]\n\nlayout = go.Layout(\n    title='2016 Quarterly Stock Trends',\n    xaxis=go.layout.XAxis(\n        ticktext=labels,\n        tickvals=tickvals\n    ),\n    yaxis2= dict(\n        overlaying='y',\n        side='right',\n        showgrid=False,\n    )\n)\nfig = go.Figure(data, layout)\n\npy.iplot(fig, filename='tickvals-and-ticktext')\n```\n\n----------------------------------------\n\nTITLE: Finding Matrix Eigenvalues\nDESCRIPTION: Calculates eigenvalues of a 2x2 matrix using NumPy's linear algebra function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\neigvals = np.linalg.eigvals(matrix)\nprint(\"The eignevalues are %f and %f\") %(eigvals[0], eigvals[1])\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Scatter Plot with 100,000 Points\nDESCRIPTION: Demonstrates how to create a WebGL-powered scatter plot with 100,000 random data points using Plotly. Uses numpy for random data generation and configures marker styling with line properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/webgl.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 100000\ntrace = go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode = 'markers',\n    marker = dict(\n        line = dict(\n            width = 1, \n            color = '#404040')\n    )\n)\ndata = [trace]\npy.iplot(data, filename='WebGL100000')\n```\n\n----------------------------------------\n\nTITLE: Defining 3D Surface and Discretization in Python with Plotly\nDESCRIPTION: This snippet initializes the necessary libraries and defines the surface function along with its discretization using numpy. It creates the x, y, and z arrays that will be used to plot the 3D surface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nxx=np.linspace(-3.5, 3.5, 100)\nyy=np.linspace(-3.5, 3.5, 100)\nx,y=np.meshgrid(xx, yy)\nz=np.exp(-(x-1)**2-y**2)-10*(x**3+y**4-x/5)*np.exp(-(x**2+y**2))\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Slider Control for Plot Range\nDESCRIPTION: Creates an interactive plot with two separate sliders for controlling the x-axis range minimum and maximum independently. Uses interactive widgets to create separate start and end range controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/slider-widget.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly\n\nfrom ipywidgets import interactive, HBox, VBox\n\npy.init_notebook_mode()\n\n# load fig\nfig = plotly.plotly.get_figure(\"https://plotly.com/~jordanpeterson/889\")\n\n# find the range of the slider.\nxmin, xmax = fig['layout']['xaxis']['range']\n\n# create FigureWidget from fig\nf = go.FigureWidget(fig)\n\n\n# our function that will modify the xaxis range\ndef update_range(start, end):\n    f.layout.xaxis.range = [start, end]\n\n\n# display the FigureWidget and slider with center justification\nvb = VBox((f, interactive(update_range,\n                          start=(xmin, xmax, (xmax - xmin) / 1000.0),\n                          end=(xmin, xmax, (xmax - xmin) / 1000.0))))\nvb.layout.align_items = 'center'\nvb\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Mesh Plot with Alphahull Parameter\nDESCRIPTION: Demonstrates how to use the alphahull parameter to control the shape of a 3D mesh. When alphahull > 0, the alpha-shape algorithm is used instead of Delaunay triangulation (used when alphahull = -1).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\npts=np.loadtxt('mesh_dataset.txt')\nx,y,z=zip(*pts)\n\ntrace = go.Mesh3d(x=x,y=y,z=z,\n                   alphahull=5,\n                   opacity=0.4,\n                   color='#00FFFF')\npy.iplot([trace])\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Random Data in Python\nDESCRIPTION: Creates a line plot with 20 scatter traces using random data from numpy, setting black line color for each trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np                  # (*) import numpy  \nfrom plotly.graph_objs import Line  # (*) import Line \n\n# Make Data object, \n# made up 20 Scatter objects plotting 50 norm. dist. random pts\ndata = Data([\n    Scatter(\n        x=range(50), \n        y=np.random.randn(50),\n        line=Line(\n            color='black'   # set line color to black\n        )\n    ) \n    for i in range(20)   # (!) line breaks and indents are just for aesthetics\n])\n\nfig = Figure()                            # init. Figure object \nfig['data'] = data                        # add data\nfig['layout'] = Layout(showlegend=False)  # remove legend from plot\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Coordinates for Plotly Visualization in Python\nDESCRIPTION: Extracts x and y coordinates from the layout for all nodes to be used in the Plotly visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nXn=[layt[k][0] for k in range(L)]\nYn=[layt[k][1] for k in range(L)]\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Attributes in JSON Data with Python\nDESCRIPTION: Displays the structure of a node in the JSON data to show the available attributes, which include 'name' and 'group' for each character.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata['nodes'][0]\n```\n\n----------------------------------------\n\nTITLE: Converting pointcloud to scattergl in Plotly.js\nDESCRIPTION: Example showing how to convert from the deprecated pointcloud trace type to the recommended scattergl trace type in Plotly.js. Demonstrates transforming xy-interleaved data to separate x and y arrays.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPlot = document.getElementById('myDiv');\n\nvar xy = new Float32Array([1,2,3,4,5,6,0,4]);\n\n\ndata = [{ xy: xy,  type: 'pointcloud' }];\n\nlayout = { };\n\n\nPlotly.newPlot('myDiv', data, layout);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar myPlot = document.getElementById('myDiv');\n\nvar xy = new Float32Array([1,2,3,4,5,6,0,4]);\n\nvar x = [];\nvar y = [];\nfor (var i = 0; i < xy.length; i += 2) {\n    x.push(xy[i]);\n    y.push(xy[i + 1]);\n}\n\nvar data = [{\n    x: x,\n    y: y,\n    mode: 'markers',\n    type: 'scattergl',\n    marker: {\n        size: 10,\n        color: 'blue',\n        opacity: 0.8\n    }\n}];\nvar layout = {\n    title: 'Point Cloud',\n    xaxis: { title: 'X Axis' },\n    yaxis: { title: 'Y Axis' }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/choropleth-maps/Choropleth_maps.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Box Plot with Plotly in Python\nDESCRIPTION: This example demonstrates how to create colored box plots. It generates random data for two samples and assigns different colors to each box plot using the 'marker' parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\ny0 = np.random.randn(50)\ny1 = np.random.randn(50)+1\n\ntrace0 = go.Box(\n    y=y0,\n    name = 'Sample A',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=y1,\n    name = 'Sample B',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Publishing IPython Notebook as Plotly Documentation\nDESCRIPTION: This code publishes the current notebook as documentation on Plotly's website. It sets up custom styling, installs the publisher package, and calls the publish function with appropriate metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    's7_streaming.ipynb', 'python/intro_streaming//', 'Getting Started with Plotly Streaming',\n    'Getting Started with Plotly Streaming',\n    title = 'Getting Started with Plotly Streaming',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Controlling ModeBar Display in Plotly\nDESCRIPTION: Shows how to control the display of the mode bar in a Plotly graph using the displayModeBar configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {'displayModeBar': True}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Simulating Gamma Means for Negative Binomial in Python\nDESCRIPTION: This code simulates gamma means based on specified shape and scale parameters using numpy's random.gamma function. The parameters relate to a negative binomial distribution and are used as an intermediate step to generate Poisson-distributed samples. The gamma distribution here acts as mixing weights for the Poisson distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlam = np.random.gamma(r, p / (1 - p), size=100)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram and Rug Plot without Curve\nDESCRIPTION: Shows how to create a distribution plot with only the histogram and rug plot, without the kernel density estimate curve. This is accomplished by setting show_curve=False in the create_distplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(200) - 1 \nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 1 \n\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\ncolors = ['#835AF1', '#7FA6EE', '#B8F7D4']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, colors=colors, bin_size=.25, show_curve=False)\n\n# Add title\nfig['layout'].update(title='Hist and Rug Plot')\n\n# Plot!\npy.iplot(fig, filename='Hist and Rug')\n```\n\n----------------------------------------\n\nTITLE: Initializing Gibbs Sampling Parameters - Python\nDESCRIPTION: Sets up parameters and arrays for Gibbs sampling implementation including hyperpriors and iteration storage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nalpha, beta = 1., 10\n```\n\nLANGUAGE: python\nCODE:\n```\n# Specify number of iterations\nn_iterations = 1000\n\n# Initialize trace of samples\nlambda1, lambda2, tau = np.empty((3, n_iterations + 1))\n```\n\nLANGUAGE: python\nCODE:\n```\nlambda1[0] = 6\nlambda2[0] = 2\ntau[0] = 50\n```\n\n----------------------------------------\n\nTITLE: Continuously Streaming Random Data to Bar Chart\nDESCRIPTION: Implements a continuous loop that streams random integer data to the bar chart with a short delay between updates. The loop writes new y-values while keeping x-values constant.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwhile True:               \n    \n    s.write(dict(x=['one','two','three','four','five'], y=np.random.random_integers(0,100,5)))  \n\n    time.sleep(0.2)        #wait one second before plotting again\n    \ns.close()                  #close the stream\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example in IPython\nDESCRIPTION: Code to display a Dash application example within an IPython notebook using IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-hoverplot/\", width=\"100%\", height=\"920px\", frameBorder=\"0\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-hoverplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Waterfall Bar Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a waterfall bar chart using Plotly in Python. It visualizes financial data showing revenue, costs, and profit in a cascading manner.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx_data = ['Product<br>Revenue', 'Services<br>Revenue',\n          'Total<br>Revenue', 'Fixed<br>Costs',\n          'Variable<br>Costs', 'Total<br>Costs', 'Total']\ny_data = [400, 660, 660, 590, 400, 400, 340]\ntext = ['$430K', '$260K', '$690K', '$-120K', '$-200K', '$-320K', '$370K']\n\n# Base\ntrace0 = go.Bar(\n    x=x_data,\n    y=[0, 430, 0, 570, 370, 370, 0],\n    marker=dict(\n        color='rgba(1,1,1, 0.0)',\n    )\n)\n# Revenue\ntrace1 = go.Bar(\n    x=x_data,\n    y=[430, 260, 690, 0, 0, 0, 0],\n    marker=dict(\n        color='rgba(55, 128, 191, 0.7)',\n        line=dict(\n            color='rgba(55, 128, 191, 1.0)',\n            width=2,\n        )\n    )\n)\n# Costs\ntrace2 = go.Bar(\n    x=x_data,\n    y=[0, 0, 0, 120, 200, 320, 0],\n    marker=dict(\n        color='rgba(219, 64, 82, 0.7)',\n        line=dict(\n            color='rgba(219, 64, 82, 1.0)',\n            width=2,\n        )\n    )\n)\n# Profit\ntrace3 = go.Bar(\n    x=x_data,\n    y=[0, 0, 0, 0, 0, 0, 370],\n    marker=dict(\n        color='rgba(50, 171, 96, 0.7)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=2,\n        )\n    )\n)\ndata = [trace0, trace1, trace2, trace3]\nlayout = go.Layout(\n    title='Annual Profit- 2015',\n    barmode='stack',\n    paper_bgcolor='rgba(245, 246, 249, 1)',\n    plot_bgcolor='rgba(245, 246, 249, 1)',\n    showlegend=False\n)\n\nannotations = []\n\nfor i in range(0, 7):\n    annotations.append(dict(x=x_data[i], y=y_data[i], text=text[i],\n                                  font=dict(family='Arial', size=14,\n                                  color='rgba(245, 246, 249, 1)'),\n                                  showarrow=False,))\n    layout['annotations'] = annotations\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='waterfall-bar-profit')\n```\n\n----------------------------------------\n\nTITLE: Creating Quiver and Streamline Plots for Vertical Subplots\nDESCRIPTION: This code creates two separate figures (a quiver plot and a streamline plot) that will later be combined into vertical subplots. It demonstrates initialization of the data and the creation of individual visualization objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\nimport numpy as np\n\n## Create first plot\nx1,y1 = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\nu1 = np.cos(x1)*y1\nv1 = np.sin(x1)*y1\n\nfig1 = ff.create_quiver(x1, y1, u1, v1, name='Quiver')\n\n\n## Create second plot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nY, X = np.meshgrid(x, y)\nu = -1 - X**2 + Y\nv = 1 + X - Y**2\n\nfig2 = ff.create_streamline(x, y, u, v, arrow_scale=.1, name='Steamline')\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Annotations in Plotly Charts\nDESCRIPTION: This snippet demonstrates how to add a simple annotation to a Plotly chart. Annotations can be used to highlight specific areas or points of interest in a visualization with custom text and arrows.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\n\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    showlegend=False,\n    annotations=[\n        dict(\n            x=2,\n            y=5,\n            xref='x',\n            yref='y',\n            text='dict Text',\n            showarrow=True,\n            arrowhead=7,\n            ax=0,\n            ay=-40\n        )\n    ]\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='simple-annotation')\n```\n\n----------------------------------------\n\nTITLE: Embedding Real-Time Streaming Demo in Python\nDESCRIPTION: Uses Plotly's embedding tool to display a real-time streaming data visualization demo.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('streaming-demos','4')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Right Aligned Plots\nDESCRIPTION: Shows how to create a complex layout with a table on the left and three scatter plots aligned on the right using custom domains and axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/table-subplots/table-subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport pandas as pd\n\ntable_trace1 = go.Table(\n    domain=dict(x=[0, 0.5],\n                y=[0, 1.0]),\n    columnwidth = [30] + [33, 35, 33],\n    columnorder=[0, 1, 2, 3, 4],\n    header = dict(height = 50,\n                  values = [['<b>Date</b>'],['<b>Number<br>transactions</b>'],\n                            ['<b>Output<br>volume(BTC)</b>'], ['<b>Market<br>Price</b>']],\n                  line = dict(color='rgb(50, 50, 50)'),\n                  align = ['left'] * 5,\n                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                  fill = dict(color='#d562be')),\n    cells = dict(values = [df[k].tolist() for k in\n                          ['Date', 'Number-transactions', 'Output-volume(BTC)', 'Market-price']],\n                 line = dict(color='#506784'),\n                 align = ['left'] * 5,\n                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),\n                 format = [None] + [\", .2f\"] * 2 + [',.4f'],\n                 prefix = [None] * 2 + ['$', u'\\u20BF'],\n                 suffix=[None] * 4,\n                 height = 27,\n                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))\n)\n\ntrace1=go.Scatter(\n    x=df['Date'],\n    y=df['Hash-rate'],\n    xaxis='x1',\n    yaxis='y1',\n    mode='lines',\n    line=dict(width=2, color='#9748a1'),\n    name='hash-rate-TH/s'\n)\n\ntrace2=go.Scatter(\n    x=df['Date'],\n    y=df['Mining-revenue-USD'],\n    xaxis='x2',\n    yaxis='y2',\n    mode='lines',\n    line=dict(width=2, color='#b04553'),\n    name='mining revenue'\n)\n\ntrace3=go.Scatter(\n    x=df['Date'],\n    y=df['Transaction-fees-BTC'],\n    xaxis='x3',\n    yaxis='y3',\n    mode='lines',\n    line=dict(width=2, color='#af7bbd'),\n    name='transact-fee'\n)\n\naxis=dict(\n    showline=True,\n    zeroline=False,\n    showgrid=True,\n    mirror=True,\n    ticklen=4, \n    gridcolor='#ffffff',\n    tickfont=dict(size=10)\n)\n\nlayout1 = dict(\n    width=950,\n    height=800,\n    autosize=False,\n    title='Bitcoin mining stats for 180 days',\n    margin = dict(t=100),\n    showlegend=False,   \n    xaxis1=dict(axis, **dict(domain=[0.55, 1], anchor='y1', showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0.55, 1], anchor='y2', showticklabels=False)),        \n    xaxis3=dict(axis, **dict(domain=[0.55, 1], anchor='y3')), \n    yaxis1=dict(axis, **dict(domain=[0.66, 1.0], anchor='x1', hoverformat='.2f')),  \n    yaxis2=dict(axis, **dict(domain=[0.3 + 0.03, 0.63], anchor='x2', tickprefix='$', hoverformat='.2f')),\n    yaxis3=dict(axis, **dict(domain=[0.0, 0.3], anchor='x3', tickprefix=u'\\u20BF', hoverformat='.2f')),\n    plot_bgcolor='rgba(228, 222, 249, 0.65)'\n)\n\nfig1 = dict(data=[table_trace1, trace1, trace2, trace3], layout=layout1)\npy.iplot(fig1, filename='table-right-aligned-plots')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple snippet to check the installed version of Plotly in Python. This is useful to ensure you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Simplified County Choropleth for Oregon in Python\nDESCRIPTION: This example shows how to create a choropleth map with simplified county and state lines for Oregon, using a divergent categorical color scale.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\nscope = ['Oregon']\ndf_sample = pd.read_csv(\n    'https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv'\n)\ndf_sample_r = df_sample[df_sample['STNAME'].isin(scope)]\n\nvalues = df_sample_r['TOT_POP'].tolist()\nfips = df_sample_r['FIPS'].tolist()\n\ncolorscale = [\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\",\n              \"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\",\n              \"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\",\n              \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\",\n              \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\"]\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=scope,\n    colorscale=colorscale, round_legend_values=True,\n    simplify_county=0, simplify_state=0,\n    county_outline={'color': 'rgb(15, 15, 55)', 'width': 0.5},\n    state_outline={'width': 1},\n    legend_title='pop. per county',\n    title='Oregon'\n)\n\npy.iplot(fig, filename='choropleth_oregon_ono_simplification_factor')\n```\n\n----------------------------------------\n\nTITLE: Converting Cufflinks Plot to Plotly Figure in Python\nDESCRIPTION: This snippet demonstrates how to convert a Cufflinks plot to a Plotly figure object using the asFigure parameter. It then prints the figure's string representation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfigure = df.iplot(kind='scatter', asFigure=True)\nprint figure.to_string()\n```\n\n----------------------------------------\n\nTITLE: Offline Plotting with plotly.io.show() in Jupyter\nDESCRIPTION: Python example of creating a scatter plot and displaying it directly in a Jupyter notebook using plotly.io.show(). This method works offline without requiring a Chart Studio account.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1]))\nfig.update_layout(title_text='hello world')\npio.show(fig)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hovertext in OHLC Charts with Python\nDESCRIPTION: This code shows how to create custom hover text for OHLC charts. By generating custom text for each data point, you can control exactly what information is displayed when a user hovers over a point in the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\nhovertext=[]\nfor i in range(len(df['AAPL.Open'])):\n    hovertext.append('Open: '+str(df['AAPL.Open'][i])+'<br>Close: '+str(df['AAPL.Close'][i]))\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'],\n                text=hovertext,\n                hoverinfo='text')\ndata = [trace]\npy.iplot(data, filename='ohlc_custom_hover')\n```\n\n----------------------------------------\n\nTITLE: Two-Way ANOVA Implementation\nDESCRIPTION: Performs two-way ANOVA analysis on tooth growth data examining the relationship between tooth length, supplement type, and dosage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/anova/python-Anova.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nformula = 'len ~ C(supp) + C(dose) + C(supp):C(dose)'\nmodel = ols(formula, data).fit()\naov_table = statsmodels.stats.anova.anova_lm(model, typ=2)\nprint(aov_table)\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Milk Production Data\nDESCRIPTION: Imports milk production time series data from a CSV file using Pandas and creates a table visualization using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-subtraction/python-Baseline-Subtraction.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = np.asarray(time_series)\n\ndf = milk_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple 3D Bubble Chart with Gapminder Data in Python\nDESCRIPTION: This code creates a 3D bubble chart using Gapminder data to visualize relationships between year, continent, population, GDP per capita, and life expectancy. The bubble size represents GDP per capita while color indicates life expectancy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-bubble/3dbubble.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# Get Data: this ex will only use part of it (i.e. rows 750-1500)\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')\n\ntrace1 = go.Scatter3d(\n    x=df['year'][750:1500],\n    y=df['continent'][750:1500],\n    z=df['pop'][750:1500],\n    text=df['country'][750:1500],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=750,\n        size=df['gdpPercap'][750:1500],\n        color = df['lifeExp'][750:1500],\n        colorscale = 'Viridis',\n        colorbar = dict(title = 'Life<br>Expectancy'),\n        line=dict(color='rgb(140, 140, 170)')\n    )\n)\n\ndata=[trace1]\n\nlayout=go.Layout(height=800, width=800, title='Examining Population and Life Expectancy Over Time')\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3DBubble')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Tooth Growth Dataset\nDESCRIPTION: Loads tooth growth dataset from a CSV file and creates a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/anova/python-Anova.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tooth_growth_csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='tooth-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet demonstrates how to publish Plotly documentation with custom styling. It includes importing custom fonts, CSS, and using the publisher module to create a formatted documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/lines-on-maps/lines_on_maps.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'lines_on_maps.ipynb', 'python/lines-on-maps/', 'Lines on maps | plotly',\n    'How to draw lines, great circles, and contours on maps in Python.',\n    title = 'Lines on maps | plotly',\n    name = 'Lines on Maps',\n    has_thumbnail='true', thumbnail='thumbnail/flight-paths.jpg', \n    language='python', page_type='example_index',\n    display_as='maps', order=4,\n    ipynb= '~notebook_demo/58')\n```\n\n----------------------------------------\n\nTITLE: Plotting London to NYC Great Circle Route with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a map showing the great circle route between London and New York City using Plotly. It includes custom map styling and projection settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/lines-on-maps/lines_on_maps.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nnyc_london = [go.Scattergeo(\n    lat = [40.7127, 51.5072],\n    lon = [-74.0059, 0.1275],\n    mode = 'lines',\n    line = go.scattergeo.Line(\n        width = 2,\n        color = 'blue',\n    ),\n)]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'London to NYC Great Circle'\n    ),\n    showlegend = False,\n    geo = go.layout.Geo(\n        resolution = 50,\n        showland = True,\n        showlakes = True,\n        landcolor = 'rgb(204, 204, 204)',\n        countrycolor = 'rgb(204, 204, 204)',\n        lakecolor = 'rgb(255, 255, 255)',\n        projection = go.layout.geo.Projection(\n            type = \"equirectangular\"\n        ),\n        coastlinewidth = 2,\n        lataxis = go.layout.geo.Lataxis(\n            range = [20, 60],\n            showgrid = True,\n            dtick = 10\n        ),\n        lonaxis = go.layout.geo.Lonaxis(\n            range = [-100, 20],\n            showgrid = True,\n            dtick = 20\n        ),\n    )\n)\n\nfig = go.Figure(data = nyc_london, layout = layout)\npy.iplot(fig, filename = 'd3-great-circle')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and checks its installed version to ensure compatibility with the examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Funnelarea Plot in Plotly\nDESCRIPTION: Example of how to create a simple funnel area chart using Plotly, which displays proportional values as segments of a funnel.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\n\ntrace = go.Funnelarea(values = [5, 4, 3, 2, 1])\n\nlayout = go.Layout(margin = go.layout.Margin(l= 200, r = 200))\n\npy.iplot(go.Figure([trace], layout), filename = \"basic_funnelarea\")\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram and Rug Plot with Different Bin Sizes\nDESCRIPTION: Demonstrates creating a histogram and rug plot with different bin sizes for each dataset, without the density curve. This combines the techniques of using custom bin sizes and hiding the curve display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(200) - 2 \nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2 \n\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\ncolors = ['#393E46', '#2BCDC1', '#F66095']\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, colors=colors, \n                         bin_size=[0.3, 0.2, 0.1], show_curve=False)\n\n# Add title\nfig['layout'].update(title='Hist and Rug Plot')\n\n# Plot!\npy.iplot(fig, filename='Hist and Rug Different Bin Size')\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot Data for Sales Pipeline Visualization\nDESCRIPTION: Prepares scatter plot data grouped by owner for visualizing the sales pipeline. Includes hover text with opportunity details and bubble size representing close probability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nscatters = []\nfor name, temp_df in large_opps_df.groupby('Owner'):\n    hover_text = temp_df.Name + \"<br>Close Probability: \" + temp_df.Probability.map(str) + \"<br>Stage:\" + temp_df.StageName\n    scatters.append(\n        go.Scatter(\n            x=temp_df.CloseDate,\n            y=temp_df.Amount,\n            mode='markers',\n            name=name,\n            text=hover_text,\n            marker=dict(\n                size=(temp_df.Probability / 2) # helps keep the bubbles of managable size\n            )\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Bioassay Parameters\nDESCRIPTION: Creates time series and histogram visualizations for the intercept and slope parameters from the bioassay MCMC analysis to assess convergence and posterior distributions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = pgo.Scatter(\n    y=bioassay_trace.T[0],\n    xaxis='x1',\n    yaxis='y1',\n    marker=pgo.Marker(color=color)\n)\n\ntrace2 = pgo.Histogram(\n    x=bioassay_trace.T[0],\n    xaxis='x2',\n    yaxis='y2',\n    marker=pgo.Marker(color=color)\n)\n\ntrace3 = pgo.Scatter(\n    y=bioassay_trace.T[1],\n    xaxis='x3',\n    yaxis='y3',\n    marker=pgo.Marker(color=color)\n)\n\ntrace4 = pgo.Histogram(\n    x=bioassay_trace.T[1],\n    xaxis='x4',\n    yaxis='y4',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Scatter Object with Nested Updates - Plotly Python\nDESCRIPTION: This code snippet shows how to create a scatter trace and update its properties using nested updates to include both data points and additional marker features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nscatter_trace = go.Scatter(marker=dict(color='blue'))\n```\n\nLANGUAGE: python\nCODE:\n```\nscatter_trace.update(dict(x=[1,2,3],y=[4,5,6], marker=dict(symbol='star')))\n```\n\n----------------------------------------\n\nTITLE: Creating Line Charts with Cufflinks in Python\nDESCRIPTION: This shows how to create a line chart using Cufflinks in Python. It requires a DataFrame with cumulative summation data and specifies the kind of plot and filename. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.random.randn(1000, 2), columns=['A', 'B']).cumsum()\ndf.iplot(filename='cufflinks/line-example')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radar Chart with Plotly in Python\nDESCRIPTION: This code creates a basic radar chart using Plotly's Scatterpolar trace. It sets up the data and layout, then plots the figure using plotly.plotly.iplot().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/radar/radar.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Scatterpolar(\n  r = [39, 28, 8, 7, 28, 39],\n  theta = ['A','B','C', 'D', 'E', 'A'],\n  fill = 'toself'\n)]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 50]\n    )\n  ),\n  showlegend = False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = \"radar/basic\")\n```\n\n----------------------------------------\n\nTITLE: Establishing Psycopg2 Connection to Redshift\nDESCRIPTION: Sets up a direct connection to Redshift using psycopg2 driver with connection parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg2\nconn = psycopg2.connect(\n    host=\"datawarehouse.cm4z2iunjfsc.us-west-2.redshift.amazonaws.com\", \n    user=redshift_user, \n    port=port, \n    password=redshift_pass, \n    dbname=dbname)\ncur = conn.cursor() # create a cursor for executing queries\n```\n\n----------------------------------------\n\nTITLE: Creating and Opening a Stream Link\nDESCRIPTION: Creates a Stream Link object with the same stream ID used in the Stream ID object and opens the stream to prepare for sending data to the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# (@) Make instance of the `Stream link` object \n#     with the same stream id as  the `Stream Id` object\ns = py.Stream(stream_id)\n\n# (@) Open the stream\ns.open()\n```\n\n----------------------------------------\n\nTITLE: Deleting All Plotly Plots and Grids in Python\nDESCRIPTION: This snippet defines functions to retrieve all pages of a user's files and to permanently delete all plots and grids. It iterates through all files, moves them to trash, and then permanently deletes them.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_pages(username, page_size):\n    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&page_size='+str(page_size)\n    response = requests.get(url, auth=auth, headers=headers)\n    if response.status_code != 200:\n        return\n    page = json.loads(response.content)\n    yield page\n    while True:\n        resource = page['children']['next'] \n        if not resource:\n            break\n        response = requests.get(resource, auth=auth, headers=headers)\n        if response.status_code != 200:\n            break\n        page = json.loads(response.content)\n        yield page\n        \ndef permanently_delete_files(username, page_size=500, filetype_to_delete='plot'):\n    for page in get_pages(username, page_size):\n        for x in range(0, len(page['children']['results'])):\n            fid = page['children']['results'][x]['fid']\n            res = requests.get('https://api.plot.ly/v2/files/' + fid, auth=auth, headers=headers)\n            res.raise_for_status()\n            if res.status_code == 200:\n                json_res = json.loads(res.content)\n                if json_res['filetype'] == filetype_to_delete:\n                    # move to trash\n                    requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)\n                    # permanently delete\n                    requests.delete('https://api.plot.ly/v2/files/'+fid+'/permanent_delete', auth=auth, headers=headers)\n\npermanently_delete_files(username, filetype_to_delete='plot')\npermanently_delete_files(username, filetype_to_delete='grid')\n```\n\n----------------------------------------\n\nTITLE: Computing and Visualizing Inverse Solution\nDESCRIPTION: Applies inverse solution to MEG data and visualizes results using surfer plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nmethod = \"dSPM\"\nsnr = 3.\nlambda2 = 1. / snr ** 2\nstc = apply_inverse(evoked, inverse_operator, lambda2,\n                    method=method, pick_ori=None)\nprint(stc)\n\nstc.data.shape\n\nimport surfer\nsurfer.set_log_level('WARNING')\n\nsubjects_dir = data_path + '/subjects'\nbrain = stc.plot(surface='inflated', hemi='rh', subjects_dir=subjects_dir)\nbrain.set_data_time_index(45)\nbrain.scale_data_colormap(fmin=8, fmid=12, fmax=15, transparent=True)\nbrain.show_view('lateral')\n\nbrain.save_image('dspm.jpg')\nbrain.close()\nfrom IPython.display import Image\nImage(filename='dspm.jpg', width=600)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Hover Callback with Image Updates\nDESCRIPTION: Updates the hover callback to display both car details and the corresponding car image when hovering over data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef hover_fn(trace, points, state):\n\n    ind = points.point_inds[0]\n    \n    # Update details HTML widget\n    details.value = cars_df.iloc[ind].to_frame().to_html()\n    \n    # Update image widget\n    model_year = cars_df['Model Year'][ind].replace(' ', '_')\n    image_widget.value = image_data[model_year]\n\nscatter.on_hover(hover_fn)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly using Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: This code snippet retrieves and prints the version of the Plotly library being used. It's useful for ensuring compatibility and troubleshooting issues.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Combining Plot and Image with VBox\nDESCRIPTION: This snippet uses `VBox` to vertically arrange the Plotly figure (`f`) and the Image widget (`image`).  This allows them to be displayed together in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/hover scratch.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nVBox((f,image))\n```\n\n----------------------------------------\n\nTITLE: Custom Colormap Facet Grid\nDESCRIPTION: Demonstrates creating a facet grid with custom colormaps using the tips dataset. Includes marker size and opacity customization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\ntips = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tips.csv')\n\nfig = ff.create_facet_grid(\n    tips,\n    x='total_bill',\n    y='tip',\n    color_name='sex',\n    show_boxes=False,\n    marker={'size': 10, 'opacity': 1.0},\n    colormap={'Male': 'rgb(165, 242, 242)', 'Female': 'rgb(253, 174, 216)'}\n)\npy.iplot(fig, filename='facet - custom colormap')\n```\n\n----------------------------------------\n\nTITLE: Customizing 2D Histogram Contour Colorscale in Python\nDESCRIPTION: This example shows how to customize the colorscale of a 2D histogram contour plot. It applies the 'Blues' colorscale to visualize the density of randomly generated data points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(-1, 1, size=500)\ny = np.random.uniform(-1, 1, size=500)\n\ntrace = [go.Histogram2dContour(\n        x = x,\n        y = y,\n        colorscale = 'Blues'\n)]\n\npy.iplot(trace, filename = \"Histogram2dContour Colorscale\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Gantt Chart with Plotly in Python\nDESCRIPTION: This code creates a basic Gantt chart using Plotly's Figure Factory. It defines tasks with start and finish dates, then generates and displays the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')]\n\nfig = ff.create_gantt(df)\npy.iplot(fig, filename='gantt-simple-gantt-chart', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Triangulated Surface Plotting Function\nDESCRIPTION: Main function to create triangulated surface plots using Plotly Mesh3d, including options for edge visualization and color mapping.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef plotly_trisurf(x, y, z, simplices, colormap=cm.RdBu, plot_edges=None):\n    points3D=np.vstack((x,y,z)).T\n    tri_vertices=map(lambda index: points3D[index], simplices)\n    zmean=[np.mean(tri[:,2]) for tri in tri_vertices ]\n    min_zmean=np.min(zmean)\n    max_zmean=np.max(zmean)  \n    facecolor=[map_z2color(zz,  colormap, min_zmean, max_zmean) for zz in zmean] \n    I,J,K=tri_indices(simplices)\n    \n    triangles=go.Mesh3d(x=x,\n                     y=y,\n                     z=z,\n                     facecolor=facecolor, \n                     i=I,\n                     j=J,\n                     k=K,\n                     name=''\n                    )\n    \n    if plot_edges is None:\n        return [triangles]\n    else:\n        lists_coord=[[[T[k%3][c] for k in range(4)]+[ None]   for T in tri_vertices]  for c in range(3)]\n        Xe, Ye, Ze=[reduce(lambda x,y: x+y, lists_coord[k]) for k in range(3)]\n        \n        lines=go.Scatter3d(x=Xe,\n                        y=Ye,\n                        z=Ze,\n                        mode='lines',\n                        line=dict(color= 'rgb(50,50,50)', width=1.5)\n               )\n        return [triangles, lines]\n```\n\n----------------------------------------\n\nTITLE: Creating Population Pyramid Chart with Binning in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a population pyramid chart from raw data using Plotly's go.Histogram trace. It generates random data for men and women and uses histogram binning to create the pyramid structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pyramid/pyramid-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nlayout = go.Layout(barmode='overlay',\n                   yaxis=go.layout.YAxis(range=[0, 90], title='Age'),\n                   xaxis=go.layout.XAxis(\n                       tickvals=[-150, -100, -50, 0, 50, 100, 150],\n                       ticktext=[150, 100, 50, 0, 50, 100, 150],\n                       title='Number'))\n\ndata = [go.Histogram(\n    y=np.random.exponential(50, 1000),\n    orientation='h',\n    name='Men',\n    marker=dict(color='plum'),\n    hoverinfo='skip'\n),\n    go.Histogram(\n        y=np.random.exponential(55, 1000),\n        orientation='h',\n        name='Women',\n        marker=dict(color='purple'),\n        hoverinfo='skip',\n        x=-1 * np.ones(1000),\n        histfunc=\"sum\"\n    )\n]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/histogram_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Importing Stock Data for Convolution Analysis in Python\nDESCRIPTION: Loads stock data from a CSV file using Pandas and creates a table visualization using Plotly's figure factory. This data will later be used for convolution operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/convolution/python-Convolution.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')\ndf = stock_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='stockdata-peak-fitting')\n```\n\n----------------------------------------\n\nTITLE: Setting up Stream Links\nDESCRIPTION: Creates stream link objects for data streaming\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ns_1 = py.Stream(stream_id=token_1)\ns_2 = py.Stream(stream_id=token_2)\n```\n\n----------------------------------------\n\nTITLE: Hiding Specific Legend Entries in Plotly with Python\nDESCRIPTION: This snippet demonstrates how to hide specific legend entries in a Plotly chart. It uses the 'showlegend' parameter for individual traces to control their visibility in the legend.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n    showlegend=False\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\n\ndata = [trace0, trace1]\nfig = go.Figure(data=data)\n\npy.iplot(fig, filename='hide-legend-entry')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Graph Objects in Python\nDESCRIPTION: Imports the required graph objects module from plotly to create interactive visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n```\n\n----------------------------------------\n\nTITLE: Grouping Lead Data by Owner for Comparison Analysis\nDESCRIPTION: Groups lead data by owner and creates bar charts for each sales representative showing the status distribution of their leads for comparison analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlead_comparison = []\nfor name, vals in df.groupby('Owners'):\n    counts = vals.Status.value_counts()\n    lead_comparison.append(Bar(x=counts.index, y=counts.values, name=name))\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple snippet to check the installed Plotly version. Running this after upgrading with pip will confirm you're using the latest version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Plotting Bioassay Results with Plotly\nDESCRIPTION: Displays the interactive plot showing the MCMC trace and posterior distributions for bioassay parameters using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_63\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig9, filename='bioassay')\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Placement, Color, and Style in Plotly Python\nDESCRIPTION: Creates a scatter plot with customized tick properties, including linear tick mode, tick placement outside the plotting area, custom tick intervals, and styling for tick length, width, and color. This example shows how to achieve precise control over tick appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        tickmode='linear',\n        ticks='outside',\n        tick0=0,\n        dtick=0.25,\n        ticklen=8,\n        tickwidth=4,\n        tickcolor='#000'\n    ),\n    yaxis=dict(\n        tickmode='linear',\n        ticks='outside',\n        tick0=0,\n        dtick=0.25,\n        ticklen=8,\n        tickwidth=4,\n        tickcolor='#000'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-ticks')\n```\n\n----------------------------------------\n\nTITLE: Tesla Location Data Retrieval\nDESCRIPTION: Makes HTTP request to Tesla's website to fetch supercharger location data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = requests.get('https://www.tesla.com/en_CA/findus#/bounds/70,-50,42,-142,d?search=supercharger,&name=Canada')\nr_copy = copy.deepcopy(r.text)\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database and Executing Query\nDESCRIPTION: Establishes a connection to the MySQL database, creates a cursor object, and executes a SQL query to retrieve country data. The query selects name, continent, population, life expectancy, and GNP columns from the Country table.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"xxxx\", db=\"world\")\ncursor = conn.cursor()\ncursor.execute('select Name, Continent, Population, LifeExpectancy, GNP from Country');\n\nrows = cursor.fetchall()\nstr(rows)[0:300]\n```\n\n----------------------------------------\n\nTITLE: Fetching Earthquake Data from CartoDB API in Python\nDESCRIPTION: This snippet constructs the URL for the CartoDB SQL API query and uses pandas to read the CSV data directly from the URL. It then sorts the resulting DataFrame by magnitude in descending order.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl = \"http://andye.cartodb.com/api/v2/sql?\"\\\n      \"q=SELECT%20mag,magtype,type,to_char(time,'yyyy-mm-DD%20HH24:MI:SS')%20AS%20time_plotly,place,depth%20FROM%20all_month\"\\\n      \"&format=csv\"\ndf = pd.read_csv(url)\ndf = df.sort(['mag'], ascending=[0]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Mapped Data for Better Visualization in Python\nDESCRIPTION: Creates an array of indices that sort each row of the mapped data, which helps in creating a more visually appealing chord diagram as recommended by Circos documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nidx_sort=np.argsort(mapped_data, axis=1)\nidx_sort\n```\n\n----------------------------------------\n\nTITLE: Version Check in Plotly Python\nDESCRIPTION: A simple snippet to verify the installed version of Plotly Python package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a United States Bubble Map with Plotly in Python\nDESCRIPTION: This code creates a bubble map of US city populations using Plotly. It demonstrates how to load data, create scatter geo plots, and customize the map layout. The size of each bubble represents the population of the city.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/bubble-maps/bubble-maps.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')\ndf.head()\n\ndf['text'] = df['name'] + '<br>Population ' + (df['pop']/1e6).astype(str)+' million'\nlimits = [(0,2),(3,10),(11,20),(21,50),(50,3000)]\ncolors = [\"rgb(0,116,217)\",\"rgb(255,65,54)\",\"rgb(133,20,75)\",\"rgb(255,133,27)\",\"lightgrey\"]\ncities = []\nscale = 5000\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = df[lim[0]:lim[1]]\n    city = go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = df_sub['lon'],\n        lat = df_sub['lat'],\n        text = df_sub['text'],\n        marker = go.scattergeo.Marker(\n            size = df_sub['pop']/scale,\n            color = colors[i],\n            line = go.scattergeo.marker.Line(\n                width=0.5, color='rgb(40,40,40)'\n            ),\n            sizemode = 'area'\n        ),\n        name = '{0} - {1}'.format(lim[0],lim[1]) )\n    cities.append(city)\n\nlayout = go.Layout(\n        title = go.layout.Title(\n            text = '2014 US city populations<br>(Click legend to toggle traces)'\n        ),\n        showlegend = True,\n        geo = go.layout.Geo(\n            scope = 'usa',\n            projection = go.layout.geo.Projection(\n                type='albers usa'\n            ),\n            showland = True,\n            landcolor = 'rgb(217, 217, 217)',\n            subunitwidth=1,\n            countrywidth=1,\n            subunitcolor=\"rgb(255, 255, 255)\",\n            countrycolor=\"rgb(255, 255, 255)\"\n        )\n    )\n\nfig = go.Figure(data=cities, layout=layout)\npy.iplot(fig, filename='d3-bubble-map-populations')\n```\n\n----------------------------------------\n\nTITLE: Initializing Linear Gauge Chart Structure in Python with Plotly\nDESCRIPTION: Sets up the basic structure for a linear gauge chart with 4 scales including tension, energy, valence, and preference. Defines layout parameters, scale labels, and creates the base visualization structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/linear-gauge.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Define Titles and Labels for Each Scale\nscales = ['<b>Tension</b>', '<b>Energy</b>',\n          '<b>Valence</b>', '<b>Prefer</b>']\nscale1 = ['Very <br> Calm ', 'Moderately <br> Calm ',\n          'Slightly <br> Calm ', 'Neutral ',\n          'Slightly <br> Tense ', 'Moderately <br> Tense ',\n          'Very <br> Tense ']\nscale2 = ['Very <br> Tired ', 'Moderately <br> Tired ',\n          'Slightly <br> Tired ', 'Neutral ',\n          'Slightly <br> Awake ', 'Moderately <br> Awake ',\n          'Very <br> Awake ']\nscale3 = ['Very <br> Displeased ', 'Moderately <br> Displeased ',\n          'Slightly <br> Displeased ', 'Neutral ',\n          'Slightly <br> Pleased ', 'Moderately <br> Pleased ',\n          'Very <br> Pleased ']\nscale4 = ['Strongly <br> Dislike ', 'Moderately <br> Dislike ',\n          'Slightly <br> Dislike ', 'Neutral ',\n          'Slightly <br> Like ', 'Moderately <br> Like ',\n          'Strongly <br> Like ']\nscale_labels = [scale1, scale2, scale3, scale4]\n\n# Add Scale Titles to the Plot\ntraces = []\nfor i in range(len(scales)):\n    traces.append(go.Scatter(\n        x=[0.6],\n        y=[6.25],\n        text=scales[i],\n        mode='text',\n        hoverinfo='none',\n        showlegend=False,\n        xaxis='x'+str(i+1),\n        yaxis='y'+str(i+1)\n    ))\n\nshapes = []\nfor i in range(len(scales)):\n    shapes.append({'type': 'rect',\n                   'x0': .02, 'x1': 1.02,\n                   'y0': 0, 'y1': 6,\n                   'xref':'x'+str(i+1), 'yref':'y'+str(i+1)})\n\nx_domains = [[0, .25], [.25, .5], [.5, .75], [.75, 1]]\nchart_width = 800\n\nxaxes = []\nfor i in range(len(scales)):\n    xaxes.append({'domain': x_domains[i], 'range':[0, 4],\n                  'showgrid': False, 'showline': False,\n                  'zeroline': False, 'showticklabels': False})\n\nyaxes = []\nfor i in range(len(scales)):\n    yaxes.append({'anchor':'x'+str(i+1), 'range':[-.5,6.5],\n                  'showgrid': False, 'showline': False, 'zeroline': False,\n                  'ticks':'inside', 'ticklen': chart_width/20,\n                  'ticktext':scale_labels[i], 'tickvals':[0., 1., 2., 3., 4., 5., 6.]\n                 })\n\nlayout = {'shapes': shapes,\n          'xaxis1': xaxes[0],\n          'xaxis2': xaxes[1],\n          'xaxis3': xaxes[2],\n          'xaxis4': xaxes[3],\n          'yaxis1': yaxes[0],\n          'yaxis2': yaxes[1],\n          'yaxis3': yaxes[2],\n          'yaxis4': yaxes[3],\n          'autosize': False,\n          'width': chart_width,\n          'height': 600\n}\n\nfig = dict(data=traces, layout=layout)\npy.iplot(fig, filename='linear-gauge-layout')\n```\n\n----------------------------------------\n\nTITLE: Identifying Contestant Countries in Python\nDESCRIPTION: Extracts the list of contestant countries by filtering the nodes that appear as target nodes in the edges list.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nContestantLst=[G.vs[e[1]] for e in E]\nContestant=list(set([v['label'] for  v in ContestantLst]))\nlen(Contestant)\n```\n\n----------------------------------------\n\nTITLE: Creating Network Graph with networkx in Python\nDESCRIPTION: Constructs a networkx Graph object from nodes and edges extracted from the igraph implementation, and applies the Fruchterman-Reingold layout algorithm for node positioning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/igraph_vs_networkx.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\n\nV=range(N)# list of vertices\ng=nx.Graph()\ng.add_nodes_from(V)\ng.add_edges_from(E)# E is the list of edges\n\npos=nx.fruchterman_reingold_layout(g)\n```\n\n----------------------------------------\n\nTITLE: Creating Normalized Percentage Complaints by City\nDESCRIPTION: Normalizes complaint counts to percentages for each city and creates a grouped bar chart to compare the relative distribution of complaint types across cities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfor trace in traces:\n    trace['y'] = 100.*trace['y']/sum(trace['y'])\n    \npy.iplot({'data': traces, \n          'layout': go.Layout(\n                barmode='group',\n                xaxis={'tickangle': 40, 'autorange': False, 'range': [-0.5, 16]},\n                yaxis={'title': 'Percent of Complaints by City'},\n                margin={'b': 150},\n                title='Relative Number of 311 Complaints by City')\n         }, filename='311/relative complaints by city', validate=False)\n```\n\n----------------------------------------\n\nTITLE: Querying User Preferences by State\nDESCRIPTION: SQL query executed via pandas that retrieves aggregated user preferences by state. The query sums boolean preference fields for various entertainment categories and groups results by state.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(likesports::int) as sports, sum(liketheatre::int) as theatre,  \nsum(likeconcerts::int) as concerts, sum(likejazz::int) as jazz, \nsum(likeclassical::int) as classical, sum(likeopera::int) as opera,  \nsum(likerock::int) as rock, sum(likevegas::int) as vegas,  \nsum(likebroadway::int) as broadway, sum(likemusicals::int) as musical, \nstate\nFROM users \nGROUP BY state\nORDER BY state asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Running MH Algorithm with Large Proposal Variance in Python\nDESCRIPTION: Executes the Metropolis-Hastings algorithm with a large proposal variance (100) for 10,000 iterations, using the same initial parameter values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ntrace_hivar, acc = metropolis(n_iter, initial_values=(1,0,1), prop_var=100)\n```\n\n----------------------------------------\n\nTITLE: Publishing Bar Chart to Plotly Servers\nDESCRIPTION: Posts the created figure to Plotly servers using the py.plot function, making it available online with a specific filename.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.plot(fig, filename='bar-chart')      #post this plot up onto the plotly servers\n```\n\n----------------------------------------\n\nTITLE: Computing Covariance Matrix with NumPy for PCA\nDESCRIPTION: This code shows a more concise way to compute the covariance matrix using NumPy's built-in cov function. This is functionally equivalent to the manual calculation but uses a more efficient implementation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint('NumPy covariance matrix: \\n%s' %np.cov(X_std.T))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tick Formatting with Tickformatstops in Plotly\nDESCRIPTION: Advanced example showing how to customize tick formats for different zoom levels using tickformatstops.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace0 = go.Scatter(\n    x = df['Date'],\n    y = df['mavg']\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    xaxis = go.layout.XAxis(\n        tickformatstops = [\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[None, 1000],\n                value=\"%H:%M:%S.%L ms\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[1000, 60000],\n                value=\"%H:%M:%S s\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[60000, 3600000],\n                value=\"%H:%M m\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[3600000, 86400000],\n                value=\"%H:%M h\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[86400000, 604800000],\n                value=\"%e. %b d\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[604800000, \"M1\"],\n                value=\"%e. %b w\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[\"M1\", \"M12\"],\n                value=\"%b '%y M\"\n              ),\n            go.layout.xaxis.Tickformatstop(\n                dtickrange=[\"M12\", None],\n                value=\"%Y Y\"\n              )\n        ]\n    )\n)\n\nfig = go.Figure(\n    data = data,\n    layout = layout\n)\n\npy.iplot(fig, filename='tickformatstops')\n```\n\n----------------------------------------\n\nTITLE: Creating a Figure with Stacked Histogram Layout\nDESCRIPTION: Creates a Plotly figure with a stacked bar layout for displaying multiple histograms of opportunity amounts grouped by owner.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(\n    barmode='stack'\n)\nfig = go.Figure(data=opportunity_comparisons, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: PCA Implementation using scikit-learn\nDESCRIPTION: Demonstrates a simplified PCA implementation using scikit-learn's built-in PCA class.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.decomposition import PCA as sklearnPCA\nsklearn_pca = sklearnPCA(n_components=2)\nY_sklearn = sklearn_pca.fit_transform(X_std)\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for Annotated Heatmaps in Plotly\nDESCRIPTION: Shows how to access the help documentation for the create_annotated_heatmap function from Plotly's Figure Factory (FF) module. This displays comprehensive information about the function's parameters and usage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhelp(FF.create_annotated_heatmap)\n```\n\n----------------------------------------\n\nTITLE: Converting Plotly Figure to PNG Bytes\nDESCRIPTION: Demonstrates how to convert a Plotly figure to a PNG bytes object using the to_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimg_bytes = pio.to_image(fig, format='png')\n```\n\nLANGUAGE: python\nCODE:\n```\nimg_bytes[:20]\n```\n\n----------------------------------------\n\nTITLE: Getting Help on 2D Density Plot Function\nDESCRIPTION: Shows how to access the help documentation for the create_2d_density function from Plotly's figure factory module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/density-plots/density-plots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_2d_density)\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph Widgets\nDESCRIPTION: Creates and displays two GraphWidget instances using previously created Plotly visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = GraphWidget('https://plotly.com/~kevintest/1189/')\ng2 = GraphWidget('https://plotly.com/~kevintest/1187')\ndisplay(g)\ndisplay(g2)\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing Data for Ternary Plots in Python\nDESCRIPTION: Loads JSON data files for contour and scatter plots, and defines a utility function to clean data for ternary plotting. The function transforms dictionary data into a formatted list suitable for Plotly ternary traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport json\nimport pandas as pd\n\ncontour_raw_data = pd.read_json('https://raw.githubusercontent.com/plotly/datasets/master/contour_data.json')\nscatter_raw_data = pd.read_json('https://raw.githubusercontent.com/plotly/datasets/master/scatter_data.json')\n\nscatter_data =  scatter_raw_data['Data']\n\ndef clean_data(data_in):\n    \"\"\"\n    Cleans data in a format which can be conveniently \n    used for drawing traces. Takes a dictionary as the \n    input, and returns a list in the following format:\n\n    input = {'key': ['a b c']}\n    output = [key, [a, b, c]]\n    \"\"\"\n    key = data_in.keys()[0]\n    data_out = [key]\n    for i in data_in[key]:\n        data_out.append(map(float, i.split(' ')))\n\n    return data_out\n\n\n#Example:\nprint clean_data({'L1': ['.03 0.5 0.47','0.4 0.5 0.1']})\n```\n\n----------------------------------------\n\nTITLE: Adding Density Contour to Plotly Scatter Plot\nDESCRIPTION: Adds a histogram2dcontour trace to visualize data point density using the same x and y values as the scatter plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncontour = fig.add_histogram2dcontour(\n    x=scatter.x, y=scatter.y)\n```\n\n----------------------------------------\n\nTITLE: Creating a Presentation with Preserved Image Aspect Ratios\nDESCRIPTION: This example shows how to maintain original image aspect ratios in a presentation by setting the imgStretch parameter to False. This prevents images from being stretched to fit the slide layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport chart_studio.presentation_objs as pres\n\nfilename = 'pres-with-no-imgstretch'\nmarkdown_string = \"\"\"\n# images in native aspect ratio\n\nImage(https://raw.githubusercontent.com/jackparmer/gradient-backgrounds/master/moods1.png)\nImage(https://raw.githubusercontent.com/jackparmer/gradient-backgrounds/master/moods1.png)\nImage(https://raw.githubusercontent.com/jackparmer/gradient-backgrounds/master/moods1.png)\nImage(https://raw.githubusercontent.com/jackparmer/gradient-backgrounds/master/moods1.png)\nImage(https://raw.githubusercontent.com/jackparmer/gradient-backgrounds/master/moods1.png)\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string, imgStretch=False)\npres_url_3 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Styling IPython Notebooks with Plotly and Google Fonts in Python\nDESCRIPTION: This snippet showcases how to apply Google fonts and custom CSS styles to an IPython notebook using the IPython display and HTML modules. These styles include fonts from Google Fonts and a custom CSS file hosted on Plotly's static server. The snippet does not require additional dependencies but assumes the notebook is hosted in an environment that supports HTML and IPython display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Images to Spectroscopy Plot\nDESCRIPTION: Illustrates adding multiple molecular structure images to a spectroscopy plot with annotations connecting images to data traces. Includes simulated absorption data generation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom scipy.signal import savgol_filter\n\n#simulate spectroscopy data\ndef simulated_absorption(mu,sigma,intensity):\n    data = [np.random.normal(mu[i],sigma[i],intensity[i]) for i in range(len(mu))]\n    hists = [np.histogram(d,1000,range=(200,500),normed=True) for d in data]\n    ys = [y for y,x in hists]\n    s = savgol_filter(np.max(ys,axis = 0),41,3)\n    return hists[0][1],s\n\nmus = [[290,240,260],[330,350]]\nsigmas = [[4,6,10],[5,4]]\nintensities = [[100000,300000,700000],[40000,20000]]\n\nsimulated_absorptions = [simulated_absorption(m,s,i) for m,s,i in zip(mus,sigmas,intensities)]\n\n#create traces from data\nnames=['Benzene','Naphthalene']\ncolors = ['red','maroon']\ntraces = [go.Scatter(x=x,y=y,name=n,line = dict(color=c)) for (x,y),n,c in zip(simulated_absorptions,names,colors)]\n\n#add pictures using layout-images and then connect the image to its trace using annotations\nlayout= go.Layout(\n    images= [dict(\n        source= \"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/benzene.png\",\n        xref= \"paper\",\n        yref= \"paper\",\n        x= 0.75,\n        y= 0.65,\n        sizex= 0.3,\n        sizey= 0.3,\n        xanchor= \"right\",\n        yanchor= \"bottom\"\n      ),dict(\n        source= \"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/naphthalene.png\",\n        xref=\"paper\",\n        yref= \"paper\",\n        x= 0.9,\n        y= 0.3,\n        sizex= 0.3,\n        sizey= 0.3,\n\n        xanchor= \"right\",\n        yanchor= \"bottom\"\n      )\n    ],\n    annotations=[\n        dict(\n            x=93.0/300,\n            y=0.07/0.1,\n            xref='paper',\n            yref='paper',\n            showarrow=True,\n            arrowhead=0,\n            opacity=0.5,\n            ax=250,\n            ay=-40,\n        ),\n        dict(\n            x=156/300,\n            y=0.04/0.1,\n            xref='paper',\n            yref='paper',\n            showarrow=True,\n            arrowhead=0,\n            opacity=0.5,\n            ax=140,\n            ay=-10,\n        )\n    ],\n    title = 'Absorption Frequencies of Benzene and Naphthalene',\n    yaxis = dict(hoverformat='.3f', title='Absorption'),\n    xaxis = dict(title='Wavelength'),\n    showlegend=False,\n    height = 500,\n    width = 900\n        \n)\n\nfig = go.Figure(data=traces,layout=layout)\npy.iplot(fig,filename='EXAMPLES/spectroscopy')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation Setup\nDESCRIPTION: Configuration for publishing the notebook as documentation, including custom styling and metadata setup for the Plotly documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-2d/python_Interpolation_and_Extrapolation_in_2D.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Interpolation_and_Extrapolation_in_2D.ipynb', 'python/interpolation-and-extrapolation-in-2d/', 'Interpolation and Extrapolation in 2D | plotly',\n    'Learn how to interpolation and extrapolate data in two dimensions',\n    title='Interpolation and Extrapolation in 2D in Python. | plotly',\n    name='Interpolation and Extrapolation in 2D',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=4,\n    ipynb= '~notebook_demo/105')\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Plot with Jet Colorscale\nDESCRIPTION: Demonstrates creation of a contour plot using the Jet colorscale to visualize z-values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Jet',\n    )\n]\n\npy.iplot(data, filename='simple-colorscales-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Connections in Network Graph with GML Format\nDESCRIPTION: This snippet defines the connections (edges) between nodes in a network graph using a GraphML-like format. Each edge defines a source node, target node, and a value representing the connection weight or strength between them. The structure follows the GML (Graph Modeling Language) format commonly used for graph visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_19\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 1425\n    target 9\n    value 1.5\n  ]\n  edge\n  [\n    source 1427\n    target 1426\n    value 0.5\n  ]\n  edge\n  [\n    source 1428\n    target 1426\n    value 0.5\n  ]\n  edge\n  [\n    source 1428\n    target 1427\n    value 0.5\n  ]\n  edge\n  [\n    source 1429\n    target 645\n    value 0.0526316\n  ]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Widgets\nDESCRIPTION: Imports necessary Python libraries for creating interactive Plotly visualizations and widgets including pandas, plotly, ipywidgets and IPython display tools.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.plotly as py\nfrom ipywidgets import widgets\nimport plotly.graph_objs as go\nfrom IPython.display import Image, display, clear_output\nfrom plotly.tools import FigureFactory as FF \nfrom plotly.widgets import GraphWidget\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Titles in Plotly Python\nDESCRIPTION: Demonstrates how to create XAxis and YAxis objects and update the layout to add axis titles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# (6.1) Make XAxis object, add title key\nxaxis = XAxis(title='Some independent variable')\n\n# (6.2) Make YAxis object, add title key\nyaxis = YAxis(title='Some dependent variable')\n\n# (7) Update 'layout' key in the Figure object\nfig['layout'].update(\n    xaxis1=xaxis,  # link XAxis object to 'xaxis1' (corresp. to first/only x-axis)\n    yaxis1=yaxis   # similarly for 'yaxis1'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Stream Parameter in Plotly Python\nDESCRIPTION: Generates a bar chart object with the stream parameter set to the previously created stream object. This connects the chart to the streaming data source.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#A simple bar chart object is generated\n\ntrace1 = Bar(\n    x=['one','two','three','four','five'],\n    y=np.array([20,20,20,20,20]),    \n    stream=stream              #we set the stream parameter to the stream id object created earlier     \n)\n\ndata = Data([trace1])\nlayout = Layout(title='Bar Chart Streaming')\nfig = Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Series Scatter Plot of Earthquake Magnitude and Depth with Plotly in Python\nDESCRIPTION: This series of snippets creates a scatter plot of earthquake magnitude over time, with point size representing depth. It uses Plotly to create an interactive plot with hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndepth_time_plot = [Scatter({'y': df['mag'], \n               'x': df['time_plotly'],\n               'name': 'Earthquake Depth',\n               'mode': 'markers',\n               'text': df['place'],\n               'marker': {\n                    'size': 20.0 * (df['depth'] + abs(df['depth'].min())) / (df['depth'].max() + abs(df['depth'].min()))\n                }})]\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_depth = Data(depth_time_plot)\n\nlayout_depth = Layout(yaxis=YAxis(title='Magnitude of the Event'),xaxis=XAxis(title='Date of Event'),hovermode='closest')\n\nfig_depth = Figure(data=data_depth, layout=layout_depth )\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig_depth)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Templates for Plotly Graph Reports in Python\nDESCRIPTION: Defines a function to create HTML templates for both interactive and static reports containing Plotly graphs. The function generates HTML blocks with proper formatting, captions, and links to the interactive versions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndef report_block_template(report_type, graph_url, caption=''):\n    if report_type == 'interactive':\n        graph_block = '<iframe style=\"border: none;\" src=\"{graph_url}.embed\" width=\"100%\" height=\"600px\"></iframe>'\n    elif report_type == 'static':\n        graph_block = (''\n            '<a href=\"{graph_url}\" target=\"_blank\">' # Open the interactive graph when you click on the image\n                '<img style=\"height: 400px;\" src=\"{graph_url}.png\">'\n            '</a>')\n\n    report_block = ('' +\n        graph_block + \n        '{caption}' + # Optional caption to include below the graph\n        '<br>'      + # Line break\n        '<a href=\"{graph_url}\" style=\"color: rgb(190,190,190); text-decoration: none; font-weight: 200;\" target=\"_blank\">'+ \n            'Click to comment and see the interactive graph' + # Direct readers to Plotly for commenting, interactive graph\n        '</a>' + \n        '<br>' + \n        '<hr>') # horizontal line                       \n\n    return report_block.format(graph_url=graph_url, caption=caption)\n\n\ninteractive_report = ''\nstatic_report = ''\n\nfor graph_url in graphs:\n    _static_block = report_block_template('static', graph_url, caption='')\n    _interactive_block = report_block_template('interactive', graph_url, caption='')\n\n    static_report += _static_block\n    interactive_report += _interactive_block\n```\n\n----------------------------------------\n\nTITLE: Creating Data for Soil Types Ternary Plot in Python\nDESCRIPTION: This function processes the JSON data to create the data structure required for a soil types ternary plot using Plotly. It maps clay, sand, and silt values for each soil type.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_data(json):\n    \n    return ([dict(name=k, type='scatterternary', mode='lines', \n             a=map(lambda x: x['clay'],json[k]), \n             b=map(lambda x: x['sand'],json[k]),\n             c=map(lambda x: x['silt'],json[k]), \n             line={'color': '#c00'}) for k in json])\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap of User Preferences by State with Plotly\nDESCRIPTION: Python code that generates an interactive heatmap visualization using Plotly. The heatmap displays user preferences for different entertainment categories across states using a 'Hot' color scale.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n        go.Heatmap(\n            z = df.drop('state', axis=1).values,\n            x = df.drop('state', axis=1).columns,\n            y = df.state,\n            colorscale = 'Hot'\n        )\n    ]\nlayout = go.Layout(title=\"State and Music Tastes\", yaxis=dict(autotick=False, dtick=1))\npy.iplot(Figure(data=data, layout=layout), filename='redshift/state and music taste heatmap', height=1000)\n```\n\n----------------------------------------\n\nTITLE: Updating FigureWidget Title\nDESCRIPTION: Changes the title of a FigureWidget that has already been displayed. This shows the real-time update capability of FigureWidget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf.layout.title = 'This is a new title'\n```\n\n----------------------------------------\n\nTITLE: Sorting and Analyzing Eigenvalues\nDESCRIPTION: Creates sorted pairs of eigenvalues and eigenvectors to determine component importance and explained variance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Make a list of (eigenvalue, eigenvector) tuples\neig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\n\n# Sort the (eigenvalue, eigenvector) tuples from high to low\neig_pairs.sort()\neig_pairs.reverse()\n\n# Visually confirm that the list is correctly sorted by decreasing eigenvalues\nprint('Eigenvalues in descending order:')\nfor i in eig_pairs:\n    print(i[0])\n```\n\n----------------------------------------\n\nTITLE: Linear Tick Formatting in Plotly\nDESCRIPTION: Demonstrates linear tick formatting using tick0 and dtick parameters to control tick placement on the x-axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\n\ntrace0 = go.Scatter(\n    x = x,\n    y = y\n)\n\ndata = [trace0]\n\nlayout = go.Layout(\n    xaxis = go.layout.XAxis(\n        tickmode = 'linear',\n        tick0 = 0.5,\n        dtick = 0.75\n    )\n)\n\nfig = go.Figure(\n    data = data,\n    layout = layout\n)\n\npy.iplot(fig, filename='tickformatting-tickmode-linear')\n```\n\n----------------------------------------\n\nTITLE: Computing Orbital Contributions for Color-Coded Band Diagram\nDESCRIPTION: Extracts projected bands and computes normalized contributions of s, p, and d orbitals for each band at each k-point, which will be used to color-code the band diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# extract projected bands\nname = \"Si\"\npbands = bands.get_projections_on_elts_and_orbitals({name: [\"s\", \"p\", \"d\"]})\n\n# compute contributions\ncontrib = np.zeros((bands.nb_bands, len(bands.kpoints), 3))                        \nfor band in range(bands.nb_bands):\n    for k in range(len(bands.kpoints)):\n        sc = pbands[Spin.up][band][k][name][\"s\"]**2\n        pc = pbands[Spin.up][band][k][name][\"p\"]**2\n        dc = pbands[Spin.up][band][k][name][\"d\"]**2\n        tot = sc + pc + dc\n        if tot != 0.0:\n            contrib[band, k, 0] = sc / tot\n            contrib[band, k, 1] = pc / tot\n            contrib[band, k, 2] = dc / tot\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation Setup\nDESCRIPTION: Sets up the documentation environment by configuring fonts, styles, and publishing settings for the notebook. Installs the publisher package and configures metadata for the wireframe plot documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-wireframe/3d-wireframe.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-wireframe.ipynb', 'python/3d-wireframe-plots/', 'Python Wireframe Plots | plotly',\n    'How to make wireframe plots in Python',\n    title= '3D Wireframe Plots in Python | plotly',\n    name = '3D Wireframe Plots',\n    has_thumbnail='true', thumbnail='thumbnail/wireframe.jpg', \n    language='python',\n    display_as='3d_charts', order=8,\n    ipynb= '~notebook_demo/68')\n```\n\n----------------------------------------\n\nTITLE: Interpolation and Extrapolation with Polynomial Fit in Python using Plotly\nDESCRIPTION: This code snippet demonstrates how to interpolate and extrapolate a set of points using a polynomial fit. It uses NumPy for curve fitting and Plotly for creating an interactive scatter plot with the original data points and the fitted curve.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-1d/python_Interpolation_and_Extrapolation_in_1D.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npoints = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])\n\nx = points[:,0]\ny = points[:,1]\n\nz = np.polyfit(x, y, 3)\nf = np.poly1d(z)\n\nx_new = np.linspace(0, 10, 50)\ny_new = f(x_new)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x_new,\n    y=y_new,\n    mode='lines',\n    name='Fit'\n)\n\nannotation = go.Annotation(\n    x=6,\n    y=-4.5,\n    text='$0.43X^3 - 0.56X^2 + 16.78X + 10.61$',\n    showarrow=False\n)\n\nlayout = go.Layout(\n    title='Polynomial Fit in Python',\n    annotations=[annotation]\n)\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='interpolation-and-extrapolation')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Funnel Plot in Python with Plotly\nDESCRIPTION: Example of how to create a simple funnel chart using Plotly. The funnel shows data flow through different business stages with decreasing values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go \n\n\ntrace1 = go.Funnel(\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"],\n    x = [39, 27.4, 20.6, 11, 2])\n\nlayout = go.Layout(\n    title = \"Annual Sales\",\n    margin = {\"l\": 200, \"r\": 200})\n\npy.iplot(go.Figure([trace1],layout), filename = \"basic_funnel\")\n\n```\n\n----------------------------------------\n\nTITLE: Computing Overall Heading to Roll Command Transfer Function\nDESCRIPTION: Combines the three component transfer functions to create the overall transfer function from commanded roll angle to heading angle, with minreal() to reduce common factors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\npsi_thetac = (theta_thetac * delta_theta * psi_delta).minreal()\npsi_thetac\n```\n\n----------------------------------------\n\nTITLE: Sampling from Conditional Distributions in Python\nDESCRIPTION: This code snippet demonstrates sampling from conditional distributions for a Bayesian changepoint model. It iteratively samples early and late means (lambda1 and lambda2) and the changepoint (tau) using Gamma and Categorical distributions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(n_iterations):\n    \n    # Sample early mean\n    lambda1[i + 1] = rgamma(disasters_array[:tau[i]].sum() + alpha, 1./(tau[i] + beta))\n    \n    # Sample late mean\n    lambda2[i + 1] = rgamma(disasters_array[tau[i]:].sum() + alpha,\n                            1./(n_count_data - tau[i] + beta))\n    \n    # Sample changepoint: first calculate probabilities (conditional)\n    p = np.array([dgamma(lambda1[i + 1], disasters_array[:t].sum() + alpha, t + beta) *\n                  dgamma(lambda2[i + 1], disasters_array[t:].sum() + alpha, n_count_data - t + beta)\n                  for t in range(n_count_data)])\n    \n    # ... then draw sample\n    tau[i + 1] = rcategorical(p/p.sum())\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting 2D Random Walk with Plotly in Python\nDESCRIPTION: This code snippet creates a 2D random walk and plots it using Plotly. It generates 1000 steps in both x and y directions and uses a color scale to represent the time sequence of the walk.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/random-walk/python-Random-Walk.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = [0]\ny = [0]\n\nfor j in range(1000):\n    step_x = random.randint(0,1)\n    if step_x == 1:\n        x.append(x[j] + 1 + np.random.normal())\n    else:\n        x.append(x[j] - 1 + np.random.normal())\n    \n    step_y = random.randint(0,1)\n    if step_y == 1:\n        y.append(y[j] + 1 + np.random.normal())\n    else:\n        y.append(y[j] - 1 + np.random.normal())\n        \ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Random Walk',\n    marker=dict(\n        color=[i for i in range(len(x))],\n        size=8,\n        colorscale='Greens',\n        showscale=True\n    )\n)\n\ndata = [trace1]\npy.iplot(data, filename='random-walk-2d')\n```\n\n----------------------------------------\n\nTITLE: Using to_string() Method for Plotly Objects in Python\nDESCRIPTION: Demonstrates the use of the to_string() method to get a human-friendly representation of a Plotly graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(fig.to_string())  # print figure object in human-friendly form\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation in Python\nDESCRIPTION: This snippet shows how to set up custom fonts, CSS, and publish Plotly documentation using the publisher library. It includes installation of the publisher library and configuration of various metadata for the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'subplots.ipynb', 'python/subplots/', 'Subplots | plotly',\n    'How to make subplots in python. Examples of stacked, custom-sized, gridded, and annotated subplts.',\n    title = 'Python Subplots | Examples | Plotly',\n    name = 'Subplots', has_thumbnail='true', thumbnail='thumbnail/subplots.jpg', \n    language='python', page_type='example_index', redirect_from='ipython-notebooks/subplots/', \n    display_as='file_settings', order=15,\n    ipynb='~notebook_demo/269')\n```\n\n----------------------------------------\n\nTITLE: Loading Raw MEG/EEG Data\nDESCRIPTION: Reads raw MEG/EEG data from a FIF file. The preload=False parameter indicates that only header information is loaded into memory initially, with actual data being loaded on-demand to save RAM.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nraw = mne.io.Raw(raw_fname, preload=False)\nprint(raw)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Baseline Analysis\nDESCRIPTION: Imports necessary Python libraries including Plotly's components, NumPy, Pandas, SciPy and PeakUtils for data analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-subtraction/python-Baseline-Subtraction.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tools\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Interactive Plotting in Python\nDESCRIPTION: Imports the necessary libraries for creating interactive plots. This includes Plotly's graph_objs for visualization, NumPy for numerical operations, and the interact decorator from ipywidgets for creating interactive controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/Interact.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nimport numpy as np\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Configuration Options in Plotly\nDESCRIPTION: Shows how to set multiple configuration options simultaneously in a Plotly graph.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {\n    'linkText': \"Let's visit plot.ly !!!\",\n    'scrollZoom': True,\n    'displayModeBar': True,\n    'editable': True\n}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Styling Legend in Plotly Chart with Python\nDESCRIPTION: This snippet demonstrates how to style the legend in a Plotly chart. It customizes various aspects of the legend including font, background color, border color, and border width.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    legend=dict(\n        x=0,\n        y=1,\n        traceorder='normal',\n        font=dict(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=2\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='style-legend')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Dataset with Plotly Table\nDESCRIPTION: Imports alcohol consumption dataset from a CSV file and creates a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='alcohol-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Color Scales\nDESCRIPTION: Displays all color scales with 11 different colors using colorlover's scale collection\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHTML(cl.to_html( cl.scales['11'] ))\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Widget for Displaying Car Details\nDESCRIPTION: Creates an HTML widget that will be used to show detailed information about cars on hover.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HTML\ndetails = HTML()\ndetails\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Verifies the installed version of Plotly library\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Gain vs Frequency Plot in MATLAB with Plotly Integration\nDESCRIPTION: MATLAB code that creates a log-log plot of gain vs frequency for different damping factors, then converts it to Plotly format with LaTeX formatting for the legend. The code demonstrates how to customize a MATLAB figure before publishing it to Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: matlab\nCODE:\n```\n%%matlab\n\nclose all\n\n% Create a set of values for the damping factor\nzeta = [0.01 .02 0.05 0.1 .2 .5 1 ];\n\n% Define a color for each damping factor\ncolors = ['r' 'g' 'b' 'c' 'm' 'y' 'k'];\n\n% Create a range of frequency values equally spaced logarithmically\nw = logspace(-1, 1, 1000);\n\n% Plot the gain vs. frequency for each of the seven damping factors\nfigure;\nfor i = 1:7\n    a = w.^2 - 1;\n    b = 2*w*zeta(i);\n    gain = sqrt(1./(a.^2 + b.^2));\n    loglog(w, gain, 'color', colors(i), 'linewidth', 2);\n    hold on;\nend\n\n% Set the axis limits\naxis([0.1 10 0.01 100]);\n\n% Add a title and axis labels\ntitle('Gain vs Frequency');\nxlabel('Frequency');\nylabel('Gain');\n\n% Turn the grid on\ngrid on;\n\n% ----------------------------------------\n% Let's convert the figure to plotly structures, and set stripping to false\n[data, layout] = convertFigure(get(gcf), false);\n\n% But, before we publish, let's modify and add some features:\n% Naming the traces\nfor i=1:numel(data)\n    data{i}.name =  ['$\\\\zeta = ' num2str(zeta(i)) '$']; %LATEX FORMATTING\n    data{i}.showlegend = true;\nend\n% Adding a nice the legend\nlegendstyle = struct( ...\n    'x' , 0.15, ...\n    'y' , 0.9, ...\n    'bgcolor' , '#E2E2E2', ...\n    'bordercolor' , '#FFFFFF', ...\n    'borderwidth' , 2, ...\n    'traceorder' , 'normal' ...\n    );\nlayout.legend = legendstyle;\nlayout.showlegend = true;\n\n% Setting the hover mode\nlayout.hovermode = 'closest';\n\n% Giving the plot a custom name\nplot_name = 'My_improved_plot';\n\n% Sending to Plotly\nresponse = plotly(data, struct('layout', layout, ...\n    'filename',plot_name, ...\n\t'fileopt', 'overwrite'));\n\ndisplay(response.url)\n```\n\n----------------------------------------\n\nTITLE: Creating Kernel Density Plot Function with Plotly in Python\nDESCRIPTION: This function 'make_kdeplot' creates a kernel density estimation plot using Plotly, including contour plot creation and layout configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef make_kdeplot(varX, varY, (a,b), (c,d), N, colorsc, title):\n    #varX, varY are lists, 1d numpy.array(s), or dataframe columns, storing the values of two variables\n   \n    x, y, Z = kde_scipy(varY, varX, (a,b), (c,d), N )\n    \n    data = Data([\n       Contour(\n           z=Z, \n           x=x,\n           y=y,\n           colorscale=colorsc,\n           #reversescale=True,\n           opacity=0.9,    \n           contours=Contours(\n               showlines=False)      \n        ),        \n     ])\n\n    layout = Layout(\n        title= title,  \n        font= Font(family='Georgia, serif',  color='#635F5D'),\n        showlegend=False,\n        autosize=False,\n        width=650,\n        height=650,\n        xaxis=XAxis(\n            range=[a,b],\n            showgrid=False,\n            nticks=7\n        ),\n        yaxis=YAxis(\n            range=[c,d],\n            showgrid=False,\n            nticks=7\n        ),\n        margin=Margin(\n            l=40,\n            r=40,\n            b=85,\n            t=100,\n        ),\n    )\n     \n    return Figure( data=data, layout=layout )\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and Creating Table in Plotly (Python)\nDESCRIPTION: This snippet sets up the initial data structure for a Facebook interaction dataset and creates a table visualization using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\ndata = [['', 'Emma', 'Isabella', 'Ava', 'Olivia', 'Sophia', 'row-sum'],\n        ['Emma', 16, 3, 28, 0, 18, 65],\n        ['Isabella', 18, 0, 12, 5, 29, 64],\n        ['Ava', 9, 11, 17, 27, 0, 64],  \n        ['Olivia', 19, 0, 31, 11, 12, 73],\n        ['Sophia', 23, 17, 10, 0, 34, 84]]\n\ntable = ff.create_table(data, index=True)\npy.iplot(table, filename='Data-Table')\n```\n\n----------------------------------------\n\nTITLE: Creating Splom Trace\nDESCRIPTION: Defines the main Splom trace with dimensions and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Splom(dimensions=[dict(label='sepal length',\n                                 values=df['sepal length']),\n                            dict(label='sepal width',\n                                 values=df['sepal width']),\n                            dict(label='petal length',\n                                 values=df['petal length']),\n                            dict(label='petal width',\n                                 values=df['petal width'])],\n                text=text,\n                marker=dict(color=color_vals,\n                            size=7,\n                            colorscale=pl_colorscale,\n                            showscale=False,\n                            line=dict(width=0.5,\n                                      color='rgb(230,230,230)')))\n```\n\n----------------------------------------\n\nTITLE: Display Image in IPython\nDESCRIPTION: Displays an image from an external URL using IPython's display functionality\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage('http://i.imgur.com/SYija2N.png')\n```\n\n----------------------------------------\n\nTITLE: Recursive de Casteljau Algorithm Implementation\nDESCRIPTION: Defines the recursive function deCasteljau that utilizes the step function for computing the final point on the B&eacute;zier surface based on the given barycentric coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef deCasteljau(n,b,lam):\n    if len(b)>1:\n        return deCasteljau(n-1, deCasteljau_step(n, b, lam), lam)\n    else:\n        return b[0]\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Scatter Trace with Streaming in Python\nDESCRIPTION: Sets up a Plotly scatter trace with an embedded stream ID for real-time data streaming.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Initialize trace of streaming plot by embedding the unique stream_id\ntrace1 = go.Scatter(\n    x=[],\n    y=[],\n    mode='lines+markers',\n    stream=stream_1         # (!) embed stream id, 1 per trace\n)\n\ndata = go.Data([trace1])\n\n# Add title to layout object\nlayout = go.Layout(title='Time Series')\n\n# Make a figure object\nfig = go.Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Geometric Graph with NetworkX in Python\nDESCRIPTION: Creates a random geometric graph with 200 nodes using NetworkX, retrieves node positions, and finds the node closest to the center. Also calculates shortest path lengths from the center node.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport networkx as nx\n\nG=nx.random_geometric_graph(200,0.125)\npos=nx.get_node_attributes(G,'pos')\n\ndmin=1\nncenter=0\nfor n in pos:\n    x,y=pos[n]\n    d=(x-0.5)**2+(y-0.5)**2\n    if d<dmin:\n        ncenter=n\n        dmin=d\n\np=nx.single_source_shortest_path_length(G,ncenter)\n```\n\n----------------------------------------\n\nTITLE: Defining Epoch Parameters\nDESCRIPTION: Sets up parameters for epoch creation, including event IDs for auditory stimuli and time ranges for each epoch relative to the trigger.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nevent_id = dict(aud_l=1, aud_r=2)  # event trigger and conditions\ntmin = -0.2  # start of each epoch (200ms before the trigger)\ntmax = 0.5  # end of each epoch (500ms after the trigger)\n```\n\n----------------------------------------\n\nTITLE: Initialize Moebius Band Triangulation\nDESCRIPTION: Sets up the initial parameters and calculates points for Moebius band triangulation using numpy meshgrid and Delaunay triangulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport matplotlib.cm as cm\nfrom scipy.spatial import Delaunay\n\nu=np.linspace(0,2*np.pi, 24)\nv=np.linspace(-1,1, 8)\nu,v=np.meshgrid(u,v)\nu=u.flatten()\nv=v.flatten()\n\n#evaluate the parameterization at the flattened u and v\ntp=1+0.5*v*np.cos(u/2.)\nx=tp*np.cos(u)\ny=tp*np.sin(u)\nz=0.5*v*np.sin(u/2.)\n\n#define 2D points, as input data for the Delaunay triangulation of U\npoints2D=np.vstack([u,v]).T\ntri = Delaunay(points2D)\n```\n\n----------------------------------------\n\nTITLE: Python Package Imports for Plotly and BigQuery\nDESCRIPTION: Importing required Python libraries for data analysis and visualization using Plotly and Google BigQuery\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nfrom pandas.io import gbq # to communicate with Google BigQuery\n```\n\n----------------------------------------\n\nTITLE: Trashing a Plotly Plot Using API\nDESCRIPTION: This snippet demonstrates how to move a plot to the trash using the Plotly API. It sends a POST request to the API endpoint with the file ID of the plot to be trashed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfid = username+':658'\nfid\n\nrequests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Adding Lines and Shaded Areas to Plots with Cufflinks in Python\nDESCRIPTION: This snippet introduces lines and shaded regions on plots using hline, vline, and hspan parameters. It includes options for customizing appearance using dictionaries. Dependencies involve Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndf=cf.datagen.lines(3,columns=['a','b','c'])\n```\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(hline=[2,4],vline=['2015-02-10'])\n```\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(hspan=[(-1,1),(2,5)], filename='cufflinks/shaded-regions')\n```\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(vspan={'x0':'2015-02-15','x1':'2015-03-15','color':'rgba(30,30,30,0.3)','fill':True,'opacity':.4}, \n         filename='cufflinks/custom-regions')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and checks the installed version to ensure compatibility with streaming features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Converting Matplotlib Figure to Plotly\nDESCRIPTION: This code snippet converts a matplotlib figure (`fig1`) to a Plotly plot and displays it using `py.iplot_mpl`. The `strip_style = True` argument removes any custom styling from the matplotlib plot and uses Plotly's default styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npy.iplot_mpl(fig1, strip_style = True)\n```\n\n----------------------------------------\n\nTITLE: Modifying Image Dimensions and Scale in Plotly Export\nDESCRIPTION: Demonstrates how to change the dimensions and scale of an exported Plotly figure using the to_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimg_bytes = pio.to_image(fig, format='png', width=600, height=350, scale=2)\nImage(img_bytes)\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Paths for Ribbon Arcs in Plotly\nDESCRIPTION: Function that returns the Plotly SVG path corresponding to an arc represented by its end angular coordinates. This is used to create the part of the ribbon that follows the circular outline of an ideogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef make_ribbon_arc(theta0, theta1):\n\n    if test_2PI(theta0) and test_2PI(theta1):\n        if theta0 < theta1:\n            theta0= moduloAB(theta0, -PI, PI)\n            theta1= moduloAB(theta1, -PI, PI)\n            if theta0*theta1>0:\n                raise ValueError('incorrect angle coordinates for ribbon')\n    \n        nr=int(40*(theta0-theta1)/PI)\n        if nr<=2: nr=3\n        theta=np.linspace(theta0, theta1, nr)\n        pts=np.exp(1j*theta)# points on arc in polar complex form\n    \n        string_arc=''\n        for k in range(len(theta)):\n            string_arc+='L '+str(pts.real[k])+', '+str(pts.imag[k])+' '\n        return   string_arc \n    else:\n        raise ValueError('the angle coordinates for an arc side of a ribbon must be in [0, 2*pi]')\n        \nmake_ribbon_arc(np.pi/3, np.pi/6)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bézier Control Points for Ribbon Sides in Python\nDESCRIPTION: Function that computes the Cartesian coordinates of control points for Bézier curves used in ribbon sides. The control points determine the curvature of the ribbons connecting ideograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef control_pts(angle, radius):\n    #angle is a  3-list containing angular coordinates of the control points b0, b1, b2\n    #radius is the distance from b1 to the  origin O(0,0) \n\n    if len(angle)!=3:\n        raise InvalidInputError('angle must have len =3')\n    b_cplx=np.array([np.exp(1j*angle[k]) for k in range(3)])\n    b_cplx[1]=radius*b_cplx[1]\n    return zip(b_cplx.real, b_cplx.imag)\n```\n\n----------------------------------------\n\nTITLE: Extracting Edge Weights from Graph in Python\nDESCRIPTION: Creates a list of edge weights by extracting the 'weight' attribute from each edge in the graph.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWeights= map(int, G.es[\"weight\"])\n```\n\n----------------------------------------\n\nTITLE: Converting Python Hazard Plot to Plotly\nDESCRIPTION: Creates an interactive Plotly version of the Nelson-Aalen hazard estimate plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nnaf.plot(ci_force_lines=True, title='Nelson-Aalen Estimate')\npy_p = plt.gcf()\n\npyplot(py_p, legend=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap with Datetime Axis in Python\nDESCRIPTION: Demonstrates how to create a heatmap with datetime values on the x-axis. This example visualizes GitHub commits per day for different programmers using randomly generated data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport numpy as np\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nprogrammers = ['Alex','Nicole','Sara','Etienne','Chelsea','Jody','Marianne']\n\nbase = datetime.datetime.today()\ndate_list = [base - datetime.timedelta(days=x) for x in range(0, 180)]\n\nz = []\n\nfor prgmr in programmers:\n    new_row = []\n    for date in date_list:\n        new_row.append( np.random.poisson() )\n    z.append(list(new_row))\n\ndata = [\n    go.Heatmap(\n        z=z,\n        x=date_list,\n        y=programmers,\n        colorscale='Viridis',\n    )\n]\n\nlayout = go.Layout(\n    title='GitHub commits per day',\n    xaxis = dict(ticks='', nticks=36),\n    yaxis = dict(ticks='' )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='datetime-heatmap')\n```\n\n----------------------------------------\n\nTITLE: Setting Contour Colorscale in Plotly\nDESCRIPTION: Applies the 'Hot' colorscale to the density contour to enhance visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncontour.colorscale = 'Hot'\n```\n\n----------------------------------------\n\nTITLE: Creating Public Plotly Graphs\nDESCRIPTION: Example of creating a public scatter plot using Plotly with public sharing settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\npy.iplot(data, filename='privacy-public', sharing='public')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Eurovision Graph with igraph\nDESCRIPTION: Creates a circular graph visualization using the igraph library with custom vertex and edge styling parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nig.plot(G,   vertex_size=25, vertex_label_size=7, \n     edge_label_size=7,  layout=layt, \n     bbox=(0,0,550,550), vertex_color='#a1d99b' )\n```\n\n----------------------------------------\n\nTITLE: Implementing Markowitz Optimal Portfolio Calculation in Python\nDESCRIPTION: Defines a function to calculate the efficient frontier and optimal portfolio weights using quadratic programming. Uses the cvxopt solver to minimize portfolio variance for given levels of expected return while ensuring weights sum to 1.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef optimal_portfolio(returns):\n    n = len(returns)\n    returns = np.asmatrix(returns)\n    \n    N = 100\n    mus = [10**(5.0 * t/N - 1.0) for t in range(N)]\n    \n    # Convert to cvxopt matrices\n    S = opt.matrix(np.cov(returns))\n    pbar = opt.matrix(np.mean(returns, axis=1))\n    \n    # Create constraint matrices\n    G = -opt.matrix(np.eye(n))   # negative n x n identity matrix\n    h = opt.matrix(0.0, (n ,1))\n    A = opt.matrix(1.0, (1, n))\n    b = opt.matrix(1.0)\n    \n    # Calculate efficient frontier weights using quadratic programming\n    portfolios = [solvers.qp(mu*S, -pbar, G, h, A, b)['x'] \n                  for mu in mus]\n    ## CALCULATE RISKS AND RETURNS FOR FRONTIER\n    returns = [blas.dot(pbar, x) for x in portfolios]\n    risks = [np.sqrt(blas.dot(x, S*x)) for x in portfolios]\n    ## CALCULATE THE 2ND DEGREE POLYNOMIAL OF THE FRONTIER CURVE\n    m1 = np.polyfit(returns, risks, 2)\n    x1 = np.sqrt(m1[2] / m1[0])\n    # CALCULATE THE OPTIMAL PORTFOLIO\n    wt = solvers.qp(opt.matrix(x1 * S), -pbar, G, h, A, b)['x']\n    return np.asarray(wt), returns, risks\n\nweights, returns, risks = optimal_portfolio(return_vec)\n\nfig = plt.figure()\nplt.plot(stds, means, 'o')\nplt.ylabel('mean')\nplt.xlabel('std')\nplt.plot(risks, returns, 'y-o')\npy.iplot_mpl(fig, filename='efficient_frontier', strip_style=True)\n```\n\n----------------------------------------\n\nTITLE: Customizing Edit Link Text in Plotly\nDESCRIPTION: Shows how to customize the edit link text in a Plotly graph using the linkText configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {'linkText': \"Let's visit plot.ly !!!\"}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Line Charts with Multiple Traces in Plotly\nDESCRIPTION: Comprehensive example of creating filled line charts with multiple traces and custom styling. Includes data preparation, trace creation with fill effects, and layout customization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx_rev = x[::-1]\n\n# Line 1\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ny1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1_lower = y1_lower[::-1]\n\n# Line 2\ny2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]\ny2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]\ny2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]\ny2_lower = y2_lower[::-1]\n\n# Line 3\ny3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]\ny3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]\ny3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]\ny3_lower = y3_lower[::-1]\n\ntrace1 = go.Scatter(\n    x=x+x_rev,\n    y=y1_upper+y1_lower,\n    fill='tozerox',\n    fillcolor='rgba(0,100,80,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    showlegend=False,\n    name='Fair',\n)\ntrace2 = go.Scatter(\n    x=x+x_rev,\n    y=y2_upper+y2_lower,\n    fill='tozerox',\n    fillcolor='rgba(0,176,246,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    name='Premium',\n    showlegend=False,\n)\ntrace3 = go.Scatter(\n    x=x+x_rev,\n    y=y3_upper+y3_lower,\n    fill='tozerox',\n    fillcolor='rgba(231,107,243,0.2)',\n    line=dict(color='rgba(255,255,255,0)'),\n    showlegend=False,\n    name='Fair',\n)\ntrace4 = go.Scatter(\n    x=x,\n    y=y1,\n    line=dict(color='rgb(0,100,80)'),\n    mode='lines',\n    name='Fair',\n)\ntrace5 = go.Scatter(\n    x=x,\n    y=y2,\n    line=dict(color='rgb(0,176,246)'),\n    mode='lines',\n    name='Premium',\n)\ntrace6 = go.Scatter(\n    x=x,\n    y=y3,\n    line=dict(color='rgb(231,107,243)'),\n    mode='lines',\n    name='Ideal',\n)\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\n\nlayout = go.Layout(\n    paper_bgcolor='rgb(255,255,255)',\n    plot_bgcolor='rgb(229,229,229)',\n    xaxis=dict(\n        gridcolor='rgb(255,255,255)',\n        range=[1,10],\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        tickcolor='rgb(127,127,127)',\n        ticks='outside',\n        zeroline=False\n    ),\n    yaxis=dict(\n        gridcolor='rgb(255,255,255)',\n        showgrid=True,\n        showline=False,\n        showticklabels=True,\n        tickcolor='rgb(127,127,127)',\n        ticks='outside',\n        zeroline=False\n    ),\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename= 'shaded_lines')\n```\n\n----------------------------------------\n\nTITLE: Setting Rangemode in Plotly Python\nDESCRIPTION: This snippet demonstrates how to set the `rangemode` property for both the x and y axes in a Plotly chart. It sets the `rangemode` of the x-axis to `tozero` and the y-axis to `nonnegative`, ensuring that the x-axis always includes zero and the y-axis only displays non-negative values. `autorange` is set to `True` to automatically adjust the axis ranges.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[2, 4, 6],\n        y=[-3, 0, 3]\n    )\n]\nlayout = go.Layout(\n    showlegend=False,\n    xaxis=dict(\n        rangemode='tozero',\n        autorange=True\n    ),\n    yaxis=dict(\n        rangemode='nonnegative',\n        autorange=True\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='axes-range-mode')\n```\n\n----------------------------------------\n\nTITLE: Converting R Plot to Plotly\nDESCRIPTION: Converts the R ggplot object to a Plotly visualization and renders it in HTML.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n%R p <- plot.ly(\"https://plotly.com/~rmdk/185/cumulativehazard-vs-time/\")\n# pass object to python kernel\n%R -o p \n\n# Render HTML\nHTML(p[0])\n```\n\n----------------------------------------\n\nTITLE: Plotting Average of Two Curves using Plotly in Python\nDESCRIPTION: This code calculates and plots the average of sine and cosine functions using Plotly. It demonstrates how to create scatter plots for individual functions and their average.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/average-multiple-curves/python_Average_Multiple_Curves.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\nf = np.sin(x)\ng = np.cos(x)\nh = [(f[j] + g[j])/2 for j in range(len(x))] \n\ntrace1 = go.Scatter(\n    x=x,\n    y=f,\n    mode='lines',\n    name='f(x)',\n    marker=dict(\n        color='rgb(220, 20, 60)'\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=g,\n    mode='lines',\n    name='g(x)',\n    marker=dict(\n        color='rgb(100, 149, 237)'\n    )\n)\n\ntrace3 = go.Scatter(\n    x=x,\n    y=h,\n    mode='markers+lines',\n    name='Average of f and g',\n    marker=dict(\n        color='rgb(128, 0, 128)',\n        symbol='diamond-open',\n    )\n)\n\ndata = [trace1, trace2, trace3]\npy.iplot(data, filename='2-curves')\n```\n\n----------------------------------------\n\nTITLE: Customizing Funnel Chart Markers and Text in Plotly\nDESCRIPTION: Example demonstrating how to customize a funnel chart by setting marker colors, line properties, opacity, text position, and connector styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go \n\ntrace1 = go.Funnel(\n    y = [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"Finalized\"],\n    x = [39, 27.4, 20.6, 11, 2],\n    textposition = \"inside\", \n    textinfo = \"value+percent initial\", \n    opacity = 0.65, marker = {\"color\": [\"deepskyblue\", \"lightsalmon\", \"tan\", \"teal\", \"silver\"],\n    \"line\": {\"width\": [4, 2, 2, 3, 1, 1], \"color\": [\"wheat\", \"wheat\", \"blue\", \"wheat\", \"wheat\"]}},\n    connector = {\"line\": {\"color\": \"royalblue\", \"dash\": \"dot\", \"width\": 3}})\n\nlayout = go.Layout(margin = {\"l\": 200, \"r\": 200 })\n\npy.iplot(go.Figure([trace1], layout), filename = \"Style_funnel\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Event Study Analysis with Python for Financial Markets\nDESCRIPTION: The beginning of an EventPlot class implementation for conducting financial event studies around specific dates. This snippet shows the imports needed for date handling and time series manipulation with Pandas, setting up the foundation for market event analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# for dates\nimport datetime\n\n# time series manipulation\nimport pandas\n```\n\n----------------------------------------\n\nTITLE: Initializing Frame Structure in Plotly\nDESCRIPTION: Basic frame structure definition for Plotly animations showing the template for creating individual frames.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nframe = {'data': [], 'name': value-name}\n```\n\n----------------------------------------\n\nTITLE: Color Scale Interpolation\nDESCRIPTION: Shows how to interpolate color scales to create more granular color mappings\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbupu = cl.scales['9']['seq']['BuPu']\nHTML( cl.to_html(bupu) )\n```\n\nLANGUAGE: python\nCODE:\n```\nbupu500 = cl.interp( bupu, 500 ) # Map color scale to 500 bins\nHTML( cl.to_html( bupu500 ) )\n```\n\n----------------------------------------\n\nTITLE: Importing GraphWidget\nDESCRIPTION: Import the GraphWidget class from Plotly widgets module\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.widgets import GraphWidget\n```\n\n----------------------------------------\n\nTITLE: Setting up Display Configuration\nDESCRIPTION: Configures display settings and publishes the notebook\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'subplot-streaming', 'python/subplot-streaming//', 'Streaming in Plotly',\n    'Streaming in Plotly with Python', name=\"Streaming with Subplots\",\n    title = 'Streaming in Subplots with Plotly',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false',\n    ipynb= '~notebook_demo/83')\n```\n\n----------------------------------------\n\nTITLE: Extending Traces in Existing Plotly Graphs (Initial Creation) in Python\nDESCRIPTION: This snippet demonstrates how to create multiple traces in a Plotly graph with the intention of extending them later. It uses the 'extend' file option to create new traces if the plot doesn't exist.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2],\n    y=[1, 2]\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2],\n    y=[2, 3]\n)\n\ntrace2 = go.Scatter(\n    x=[1, 2],\n    y=[3, 4]\n)\n\ndata = [trace0, trace1, trace2]\n\n# Take 1: if there is no data in the plot, 'extend' will create new traces.\nplot_url = py.plot(data, filename='extend plot', fileopt='extend')\n```\n\n----------------------------------------\n\nTITLE: Displaying PNG Bytes as Image in Jupyter Notebook\nDESCRIPTION: Shows how to display a PNG bytes object as an image in a Jupyter notebook using IPython.display.Image.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage(img_bytes)\n```\n\n----------------------------------------\n\nTITLE: Plotting Root Locus for Negative Feedback in Python\nDESCRIPTION: This snippet plots the root locus for negative feedback gains using the previously defined plotting function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_root_locus(neg_feedback_gains, neg_feedback_roots))\n```\n\n----------------------------------------\n\nTITLE: Implementing Inverse Permutation Function in Python\nDESCRIPTION: This function calculates the inverse of a given permutation. It's used in the chord diagram to properly associate ribbons with the correct data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef invPerm(perm):\n    # function that returns the inverse of a permutation, perm\n    inv = [0] * len(perm)\n    for i, s in enumerate(perm):\n        inv[s] = i\n    return inv\n```\n\n----------------------------------------\n\nTITLE: Defining Feedback System Transfer Function in Python\nDESCRIPTION: This function creates a closed-loop transfer function for a basic feedback system using given plant and controller transfer functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef feedback(plant, controller):\n    \"\"\"Returns the closed loop system given the plant and controller of this form:\n    \n      +    -----   -----\n    -->o-->| c |-->| p |--->\n      -|   -----   ----- |\n       -------------------\n    \n    \"\"\"\n    feedforward = controller * plant\n    return (feedforward / (1 + feedforward)).minreal()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Study Analysis in Python\nDESCRIPTION: Class method to calculate asset price movements around event dates. Takes spot prices, event dates, and window parameters to compute returns and cumulative index values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef event_study(self, spot, dates, pre, post, mean_label = 'Mean'):\n        data_frame = pandas.DataFrame()\n\n        # for each date grab spot data the days before and after\n        for i in range(0, len(dates)):\n            mid_index = spot.index.searchsorted(dates[i])\n            start_index = mid_index + pre\n            finish_index = mid_index + post + 1\n\n            x = (spot.ix[start_index:finish_index])[spot.columns.values[0]]\n\n            data_frame[dates[i]] = x.values\n\n        data_frame.index = range(pre, post + 1)\n\n        data_frame = data_frame / data_frame.shift(1) - 1   # returns\n\n        # add the mean on to the end\n        data_frame[mean_label] = data_frame.mean(axis=1)\n\n        data_frame = 100.0 * (1.0 + data_frame).cumprod()   # index\n        data_frame.ix[pre,:] = 100\n\n        return data_frame\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to PDF Format\nDESCRIPTION: Shows how to export a Plotly figure to PDF vector format using the write_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.pdf')\n```\n\n----------------------------------------\n\nTITLE: Vertical Table and Graph Subplot Creation\nDESCRIPTION: Creates a vertical layout combining a table with three scatter plots showing Bitcoin mining data. Implements custom domain settings for vertical arrangement.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table_sub.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntable_trace2 = go.Table(\n    domain=dict(x=[0, 1],\n                y=[0, 1.0]),  \n    columnwidth = [30] + [33, 35, 33],\n    columnorder=[0, 1, 2, 3, 4],\n    header = dict(height = 50,\n                  values = [['<b>Date</b>'],['<b>Hash Rate, TH/sec</b>'], \n                            ['<b>Mining revenue</b>'], ['<b>Transaction fees</b>']], \n                  line = dict(color='rgb(50, 50, 50)'),\n                  align = ['left'] * 5,\n                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                  fill = dict(color='#d562be')),\n    cells = dict(values = [df['Date'][-20:], df['Hash-rate'][-20:], df['Mining-revenue-USD'][-20:],\n                           df['Transaction-fees-BTC'][-20:]],\n                 line = dict(color='#506784'),\n                 align = ['left'] * 5,\n                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),\n                 format = [None] + [\", .2f\"] * 2 + [',.4f'],  \n                 prefix = [None] * 2 + ['$', u'\\u20BF'],\n                 suffix=[None] * 4,\n                 height = 27,\n                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))\n)\n\ntrace4=go.Scatter(\n    x=df['Date'],\n    y=df['Hash-rate'],\n    xaxis='x1',\n    yaxis='y1',\n    mode='lines',\n    line=dict(width=2, color='#9748a1'),\n    name='hash-rate-TH/s'\n)\n\ntrace5=go.Scatter(\n    x=df['Date'],\n    y=df['Mining-revenue-USD'],\n    xaxis='x2',\n    yaxis='y2',\n    mode='lines',\n    line=dict(width=2, color='#b04553'),\n    name='mining revenue'\n)\n\ntrace6=go.Scatter(\n    x=df['Date'],\n    y=df['Transaction-fees-BTC'],\n    xaxis='x3',\n    yaxis='y3',\n    mode='lines',\n    line=dict(width=2, color='#af7bbd'),\n    name='transact-fee'\n)\n\naxis=dict(\n    showline=True,\n    zeroline=False,\n    showgrid=True,\n    mirror=True, \n    ticklen=4, \n    gridcolor='#ffffff',\n    tickfont=dict(size=10)\n)\n\nlayout2 = dict(\n    width=950,\n    height=800,\n    autosize=False,\n    title='Bitcoin mining stats for 180 days',\n    margin = dict(t=100),\n    showlegend=False,          \n    xaxis1=dict(axis, **dict(domain=[0, 1], anchor='y1', showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0, 1], anchor='y2', showticklabels=False)),          \n    xaxis3=dict(axis, **dict(domain=[0, 1], anchor='y3')), \n    yaxis1=dict(axis, **dict(domain=[2 * 0.21 + 0.02 + 0.02, 0.68], anchor='x1', hoverformat='.2f')),  \n    yaxis2=dict(axis, **dict(domain=[0.21 + 0.02, 2 * 0.21 + 0.02], anchor='x2', tickprefix='$', hoverformat='.2f')),\n    yaxis3=dict(axis, **dict(domain=[0.0, 0.21], anchor='x3', tickprefix=u'\\u20BF', hoverformat='.2f')),\n    plot_bgcolor='rgba(228, 222, 249, 0.65)',\n    annotations=[\n        dict(\n            showarrow=False,\n            text='The last 20 records',\n            xref='paper',\n            yref='paper',\n            x=0.415,\n            y=1.01,\n            xanchor='left',\n            yanchor='bottom',  \n            font=dict(size=15)\n        )\n    ]\n)\n\nfig2 = dict(data=[table_trace2, trace4, trace5, trace6], layout=layout2)\npy.iplot(fig2)\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to PNG Format\nDESCRIPTION: Demonstrates how to export a Plotly figure to PNG format using the write_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.png')\n```\n\n----------------------------------------\n\nTITLE: Creating Projection Surfaces and Hover Text in Python with Plotly\nDESCRIPTION: This code defines color functions and arrays for each projection plane. It also creates hover text for the x, y, and z projections, and defines surface traces for each projection plane with appropriate coloring and hover information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nproj_z=lambda x, y, z: z#projection in the z-direction\ncolorsurfz=proj_z(x,y,z)\nproj_x=lambda x, y, z: x\ncolorsurfx=proj_z(x,y,z)\nproj_y=lambda x, y, z: y\ncolorsurfy=proj_z(x,y,z)\n\ntextx=[['y: '+'{:0.5f}'.format(y[i][j])+'<br>z: '+'{:0.5f}'.format(z[i][j])+\n        '<br>x: '+'{:0.5f}'.format(x[i][j]) for j in range(z.shape[1])]  for i in range(z.shape[0])]\ntexty=[['x: '+'{:0.5f}'.format(x[i][j])+'<br>z: '+'{:0.5f}'.format(z[i][j]) +\n        '<br>y: '+'{:0.5f}'.format(y[i][j]) for j in range(z.shape[1])] for i in range(z.shape[0])]  \n\ntracex = go.Surface(z=list(z),\n                x=list(x_offset),\n                y=list(y),\n                colorscale=colorscale,\n                showlegend=False,\n                showscale=False,\n                surfacecolor=colorsurfx,\n                text=textx,\n                hoverinfo='text'\n               )\ntracey = go.Surface(z=list(z),\n                x=list(x),\n                y=list(y_offset),\n                colorscale=colorscale,\n                showlegend=False,\n                showscale=False,\n                surfacecolor=colorsurfy,\n                text=texty,\n                hoverinfo='text'\n               )\ntracez = go.Surface(z=list(z_offset),\n                x=list(x),\n                y=list(y),\n                colorscale=colorscale,\n                showlegend=False,\n                showscale=False,\n                surfacecolor=colorsurfx,\n                text=textz,\n                hoverinfo='text'\n               )\n\ndata=[trace1, tracex, tracey, tracez]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Data Array\nDESCRIPTION: Demonstrates how to access a slice of raw data as a NumPy array, returning both data values and corresponding time points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata, times = raw[:, :10]\nprint(data.shape)\n```\n\n----------------------------------------\n\nTITLE: Loading NYC Flights Dataset\nDESCRIPTION: Loads the NYC flights dataset from a GitHub repository and removes the first column.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv')\ndf = df.drop(df.columns[[0]], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Creating and Opening Stream Link Object in Python\nDESCRIPTION: Initializes a Stream Link object and opens a connection for sending data to Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# We will provide the stream link object the same token that's associated with the trace we wish to stream to\ns = py.Stream(stream_id)\n\n# We then open a connection\ns.open()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Scatter Traces for Silicon Density of States\nDESCRIPTION: Defines Plotly scatter plots for the total density of states and the contributions from 3s and 3p atomic orbitals. The plots include styling configurations for line colors and fill.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# total DOS\ntrace_tdos = go.Scatter(\n    x=dosrun.tdos.densities[Spin.up],\n    y=dosrun.tdos.energies - dosrun.efermi,\n    mode=\"lines\",\n    name=\"total DOS\",\n    line=go.Line(color=\"#444444\"),\n    fill=\"tozeroy\"\n)\n# 3s contribution to the total DOS\ntrace_3s = go.Scatter(\n    x=spd_dos[\"S\"].densities[Spin.up],\n    y=dosrun.tdos.energies - dosrun.efermi,\n    mode=\"lines\",\n    name=\"3s\",\n    line=go.Line(color=\"red\")\n)\n# 3p contribution to the total DOS\ntrace_3p = go.Scatter(\n    x=spd_dos[\"P\"].densities[Spin.up],\n    y=dosrun.tdos.energies - dosrun.efermi,\n    mode=\"lines\",\n    name=\"3p\",\n    line=go.Line(color=\"green\")\n)\ndosdata = go.Data([trace_tdos, trace_3s, trace_3p])\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to JPEG Format\nDESCRIPTION: Shows how to export a Plotly figure to JPEG format using the write_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.jpeg')\n```\n\n----------------------------------------\n\nTITLE: Viewing a Plotly Grid in an IFrame\nDESCRIPTION: Displays the previously uploaded Plotly grid in an embedded IFrame within the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nIFrame(src= url.rstrip('/') + \".embed\", width=\"100%\",height=\"200px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Traces in Plotly Graphs in Python\nDESCRIPTION: This code extends the traces of an existing Plotly graph with new data. It adds new points to each of the three traces created in the previous example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[3, 4],\n    y=[2, 1]\n)\n\ntrace1 = go.Scatter(\n    x=[3, 4],\n    y=[3, 2]\n)\n\ntrace2 = go.Scatter(\n    x=[3, 4],\n    y=[4, 3]\n)\n\ndata = [trace0, trace1, trace2]\n\n# Take 2: extend the traces on the plot with the data in the order supplied.\npy.iplot(data, filename='extend plot', fileopt='extend')\n```\n\n----------------------------------------\n\nTITLE: Generating Indexes for Triangular Grid Points\nDESCRIPTION: Defines a function indexes which generates a list of indexes for the points in a triangular grid based on the given degree n. This is crucial for defining control points in the triangular B&eacute;zier patch.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef indexes(n):\n    return [(i,j, n-(i+j)) for i in range(n,-1, -1) for j in range(n-i, -1, -1)]\n```\n\nLANGUAGE: python\nCODE:\n```\nprint indexes(3)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Charts with Plotly in Jupyter\nDESCRIPTION: Shows how to create a simple interactive bar chart using Plotly in a Jupyter Notebook. This example plots the 'Gap' column against the 'School' column from the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\ndata = [go.Bar(x=df.School,\n            y=df.Gap)]\n\npy.iplot(data, filename='jupyter-basic_bar')\n```\n\n----------------------------------------\n\nTITLE: Implementing 2D Alpha Shapes using Delaunay Triangulation\nDESCRIPTION: A custom implementation for generating alpha shapes from 2D point sets using scipy.spatial's Delaunay triangulation. This snippet includes helper functions for computing circumcircles and filtering triangles based on the alpha parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.spatial import Delaunay\n```\n\nLANGUAGE: python\nCODE:\n```\ndef sq_norm(v): #squared norm \n    return np.linalg.norm(v)**2\n```\n\nLANGUAGE: python\nCODE:\n```\ndef circumcircle(points,simplex):\n    A=[points[simplex[k]] for k in range(3)]\n    M=[[1.0]*4]\n    M+=[[sq_norm(A[k]), A[k][0], A[k][1], 1.0 ] for k in range(3)] \n    M=np.asarray(M, dtype=np.float32) \n    S=np.array([0.5*np.linalg.det(M[1:,[0,2,3]]), -0.5*np.linalg.det(M[1:,[0,1,3]])]) \n    a=np.linalg.det(M[1:, 1:]) \n    b=np.linalg.det(M[1:, [0,1,2]]) \n    return S/a,  np.sqrt(b/a+sq_norm(S)/a**2) #center=S/a, radius=np.sqrt(b/a+sq_norm(S)/a**2)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_alpha_complex(alpha, points, simplexes):\n    #alpha is the parameter for the alpha shape\n    #points are given data points \n    #simplexes is the  list of indices in the array of points \n    #that define 2-simplexes in the Delaunay triangulation\n    \n    return filter(lambda simplex: circumcircle(points,simplex)[1]<alpha, simplexes)\n```\n\nLANGUAGE: python\nCODE:\n```\npts=np.loadtxt('data-ex-2d.txt')\ntri = Delaunay(pts)\n```\n\nLANGUAGE: python\nCODE:\n```\ncolors=['#C0223B', '#404ca0', 'rgba(173,216,230, 0.5)']# colors for vertices, edges and 2-simplexes\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout and Generating Final Eurovision Visualization in Python\nDESCRIPTION: Sets up the final layout with title, annotations, and dimensions for the Eurovision visualization and combines all elements into a Plotly figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nanno_text1='Blue nodes mark the countries that are both contestants and jury members'\nanno_text2='Grey nodes mark the countries that are only jury members'\nanno_text3='There is an edge from a Jury country to a contestant country '+\\\n           'if the jury country assigned at least one vote to that contestant'\nwidth=800\nheight=850\ntitle=\"A circular graph associated to Eurovision Song Contest, 2015<br>Data source:\"+\\\n\"<a href='http://www.eurovision.tv/page/history/by-year/contest?event=2083#Scoreboard'> [1]</a>\"\nlayout=go.Layout(title= title,\n              font= dict(size=12),\n              showlegend=False,\n              autosize=False,\n              width=width,\n              height=height,\n              xaxis=dict(axis),\n              yaxis=dict(axis),\n              margin=dict(l=40,\n                            r=40,\n                            b=85,\n                            t=100,\n                          ),\n              hovermode='closest',\n              annotations=list([make_annotation(anno_text1, -0.07),\n                                       make_annotation(anno_text2, -0.09),\n                                       make_annotation(anno_text3, -0.11)]\n                                     )\n              )\n\ndata=lines+edge_info+[trace2]\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Eurovision-15')\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Cufflinks in Python\nDESCRIPTION: This snippet explains how to partition DataFrame columns into separate subplots using Cufflinks by setting subplots=True, shape, and shared axes. It also allows subplot title settings. Dependencies are Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndf=cf.datagen.lines(4)\ndf.iplot(subplots=True, shape=(4,1), shared_xaxes=True, fill=True, filename='cufflinks/simple-subplots')\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Table and Pie Chart with Plotly\nDESCRIPTION: Creates a visualization combining a data table with a pie chart. The code initializes table data, creates a figure using Figure Factory, adds a pie chart, and customizes the layout for proper display. It includes color coordination between the table and pie chart segments.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Add table data\ntable_data = [['Prominence', 'Percent', 'RGB Value'],\n              [1, '38%', 'rgb(56, 75, 126)'],\n              [2, '27%', 'rgb(18, 36, 37)'],\n              [3, '18%', 'rgb(34, 53, 101)'], \n              [4, '10%', 'rgb(36, 55, 57)'],\n              [5, '7%', 'rgb(6, 4, 4)']] \n# Initialize a figure with ff.create_table(table_data)\nfigure = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\ntrace1={'labels': ['1st', '2nd', '3rd', '4th', '5th'],\n        'values': [38, 27, 18, 10, 7],\n        'type': 'pie',\n        'name': 'Starry Night',\n        'marker': {'colors': ['rgb(56, 75, 126)',\n                              'rgb(18, 36, 37)',\n                              'rgb(34, 53, 101)',\n                              'rgb(36, 55, 57)',\n                              'rgb(6, 4, 4)']},\n            'domain': {'x': [0, 1],\n                       'y': [.4, 1]},\n            'hoverinfo':'label+percent+name',\n            'textinfo':'none'\n        }\n\n# Add trace data to figure\nfigure['data'].extend(go.Data([trace1]))\n\n# Edit layout for subplots\nfigure.layout.yaxis.update({'domain': [0, .30]})\n# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa\n# Update the margins to add a title and see graph x-labels. \nfigure.layout.margin.update({'t':75, 'l':50})\nfigure.layout.update({'title': 'Starry Night'})\n# Update the height because adding a graph vertically will interact with\n# the plot height calculated for the table\nfigure.layout.update({'height':800})\n\n# Plot!\npy.iplot(figure)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook to Plotly Documentation\nDESCRIPTION: Sets up styling for the notebook and publishes it to the Plotly documentation website using the publisher library. This includes configuring metadata such as title, description, and categorization for the tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/smoothing/python-Smoothing.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Smoothing.ipynb', 'python/smoothing/', 'Smoothing | plotly',\n    'Learn how to perform smoothing using various methods in Python.',\n    title='Smoothing in Python | plotly',\n    name='Smoothing',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=1)\n```\n\n----------------------------------------\n\nTITLE: Pandas Integration Example\nDESCRIPTION: Create a scatter plot using Pandas DataFrame with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')\n\nfig = {\n    'data': [\n          {\n          'x': df.gdpPercap, \n            'y': df.lifeExp, \n            'text': df.country, \n            'mode': 'markers', \n            'name': '2007'},\n    ],\n    'layout': {\n        'xaxis': {'title': 'GDP per Capita', 'type': 'log'},\n        'yaxis': {'title': \"Life Expectancy\"}\n    }\n}\n\npy.iplot(fig, filename='pandas-multiple-scatter')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling in Python\nDESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook with specific metadata including title, description, and display settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'Plotly-project-3d-onto-a-plane.ipynb', 'python/2d-projection-of-3d-surface/', 'Projection of 3D Surface',\n    'How to project 3D Surface plots in 2D with Plotly.',\n    title = '2D Projection of 3D surface | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/projection-3d.jpg', \n    language='python',\n    display_as='3d_charts', order=19,\n    ipynb= '~notebook_demo/79')\n```\n\n----------------------------------------\n\nTITLE: Creating MA Plot for Gene Expression Comparison with Plotly in Python\nDESCRIPTION: Prepares data for an MA plot comparing gene expression in adult and newborn substantia nigra samples. It then creates an interactive scatter plot using Plotly, showing the average expression (A) vs. the difference in expression (M).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf_MA = df[[\"uniprot_id\",'substantia_nigra_adult_donor10258CNhs1422410371105G2','substantia_nigra_newborn_donor10223CNhs1407610358105E7']]\ndf_MA.columns = ['gene','adult', 'newborn']\ndf_MA[['adult','newborn']] = df_MA[['adult', 'newborn']].astype(float) \ndf_MA = df_MA[(df_MA.T != 0).any()]  #remove rows with all zeros\n\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nA = df_MA['adult'] + df_MA['newborn']\nM = df_MA['adult'] - df_MA['newborn']\n\ntrace = Scatter(\n    x=A[1:1000],\n    y=M[1:1000],\n    mode='markers',\n    name=\"substantia nigra\",\n    text=df_MA['gene'][1:1000],\n    marker=Marker(\n        size=5,\n        line=Line(\n            width=0.5),\n        opacity=0.8))\n\nlayout = Layout(showlegend=True,\n                title=\"MA plot of gene expression in adult and newborn samples of substantia nigra\",\n                xaxis=XAxis(\n                    title='A',\n                ),\n               yaxis=YAxis(\n                    title='M',\n                ),\n                )\nfig = Figure(data=Data([trace]), layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash App with IFrame in Python\nDESCRIPTION: This snippet demonstrates how to embed a Dash application within a Jupyter Notebook using an IFrame. It imports `IFrame` from `IPython.display` and then creates an `IFrame` object pointing to the URL of the deployed Dash app.  The `width`, `height`, and `frameBorder` attributes are set to control the IFrame's appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-axesplot/\", width=\"100%\", height=\"850px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Bubble Charts with Multiple Traces\nDESCRIPTION: Complex bubble chart implementation using pandas DataFrame and multiple traces for different continents.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\nimport math\n\n# Full code implementation for categorical bubble chart\n# Removed for brevity - see original code for complete implementation\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Connections in GML Format\nDESCRIPTION: Graph edge definitions specifying source nodes, target nodes, and weight values that define network connections. Each edge is defined with three properties: source (origin node ID), target (destination node ID), and value (edge weight).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_21\n\nLANGUAGE: gml\nCODE:\n```\nedge\n[\n  source 1520\n  target 243\n  value 0.25\n]\nedge\n[\n  source 1520\n  target 927\n  value 0.25\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly User Profile Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of a Plotly user profile page showing various graphs and datasets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nImage(url='https://i.imgur.com/gUC4ajR.png')\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Layout Configuration\nDESCRIPTION: Function to create a Plotly layout object with customizable title, axis labels, and plot dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_layout(self, title, xaxis, yaxis, width = -1, height = -1):\n        layout = Layout(\n                    title = title,\n                    xaxis = plotly.graph_objs.XAxis(\n                        title = xaxis,\n                        showgrid = False\n                ),\n                    yaxis = plotly.graph_objs.YAxis(\n                        title= yaxis,\n                        showline = False\n                )\n            )\n\n        if width > 0 and height > 0:\n            layout['width'] = width\n            layout['height'] = height\n\n        return layout\n```\n\n----------------------------------------\n\nTITLE: Creating a Cumulative Histogram in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a cumulative histogram by setting the 'cumulative' dictionary parameter with 'enabled' set to True. It shows the running sum of counts over the range of data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ndata = [go.Histogram(x=x,\n                     cumulative=dict(enabled=True))]\n\npy.iplot(data, filename='cumulative histogram')\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Streaming Loop\nDESCRIPTION: Continuously streams random data to both charts with a time delay\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ns_1.open()\ns_2.open()\n\nimport time\nimport datetime\nimport numpy as np\n\nwhile True:\n    nums = np.random.random_integers(0,10, size=(3))\n    s_1.write(dict(labels=['one', 'two', 'three'], values=nums, type='pie'))\n    s_2.write(dict(x=['one', 'two', 'three'], y=nums, type='bar', marker=dict(color=[\"blue\", \"orange\", \"green\"])))\n    time.sleep(0.8)\ns_1.close()\ns_2.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Scatter Traces for Plotly in Python\nDESCRIPTION: Creates three scatter trace dictionaries for Plotly, representing hash rate, mining revenue, and transaction fees over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrace1=dict(type='scatter',\n            x=df['Date'],\n            y=df['Hash-rate'],\n            xaxis='x1',\n            yaxis='y1',\n            mode='lines',\n            line=dict(width=2, color='#9748a1'),\n            name='hash-rate-TH/s')\n\ntrace2=dict(type='scatter',\n            x=df['Date'],\n            y=df['Mining-revenue-USD'],\n            xaxis='x2',\n            yaxis='y2',\n            mode='lines',\n            line=dict(width=2, color='#b04553'),\n            name='mining revenue')\n\ntrace3=dict(type='scatter',\n            x=df['Date'],\n            y=df['Transaction-fees-BTC'],\n            xaxis='x3',\n            yaxis='y3',\n            mode='lines',\n            line=dict(width=2, color='#af7bbd'),\n            name='transact-fee')\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticated Proxy Environment Variable\nDESCRIPTION: Command to set HTTP proxy with basic authentication credentials using username and password.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/proxies/2015-07-27-proxy_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=\"http://user:pass@10.10.1.10:3128/\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Libraries\nDESCRIPTION: Imports necessary Python packages including Plotly, Pandas, and requests for data visualization and API connectivity.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function #python 3 support\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport pandas as pd\nimport os\nimport requests\nrequests.packages.urllib3.disable_warnings() # this squashes insecure SSL warnings - DO NOT DO THIS ON PRODUCTION!\n```\n\n----------------------------------------\n\nTITLE: Computing Control Variables for Final Simulation\nDESCRIPTION: Calculates all intermediary control variables for the complete dual-loop controller, including heading error, commanded roll, roll error, and steering angle.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\npsie = psic - psi\nthetac = k_psi * psie\ntime, theta, state = cn.forced_response(theta_thetac, T=time, U=thetac)\nthetae = thetac - theta\ndelta = k_theta * thetae\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Revisions Interface Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of Plotly's revisions and versions interface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nImage (url = 'http://i.imgur.com/ATn7vE4.png')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Data for Plotly Animated Bubble Chart\nDESCRIPTION: This snippet imports necessary libraries and loads the Gapminder dataset from a CSV file. It also creates a preview table of the data using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff \nfrom plotly.grid_objs import Grid, Column\n\nimport pandas as pd\nimport time\n\nurl = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'\ndataset = pd.read_csv(url)\n\ntable = ff.create_table(dataset.head(10))\npy.iplot(table, filename='animations-gapminder-data-preview')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Sliders with IPython Widgets\nDESCRIPTION: Uses ipywidgets.interactive to create slider controls for marker opacity and size.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interactive\nopacity_slider = interactive(set_opacity,\n                             opacity=(0.0, 1.0, 0.01),\n                             size=(1, 10, 0.25))\nopacity_slider\n```\n\n----------------------------------------\n\nTITLE: Creating Meter Chart for Gauge in Python with Plotly\nDESCRIPTION: This snippet creates the meter chart that will be superimposed on the base chart to form the semi-circular gauge. It uses a pie chart with 6 sections, one of which is invisible to create the lower half. Custom colors and rotations are applied to achieve the desired gauge effect.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/semicircular-gauge.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmeter_chart = {\n    \"values\": [50, 10, 10, 10, 10, 10],\n    \"labels\": [\"Log Level\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Fatal\"],\n    \"marker\": {\n        'colors': [\n            'rgb(255, 255, 255)',\n            'rgb(232,226,202)',\n            'rgb(226,210,172)',\n            'rgb(223,189,139)',\n            'rgb(223,162,103)',\n            'rgb(226,126,64)'\n        ]\n    },\n    \"domain\": {\"x\": [0, 0.48]},\n    \"name\": \"Gauge\",\n    \"hole\": .3,\n    \"type\": \"pie\",\n    \"direction\": \"clockwise\",\n    \"rotation\": 90,\n    \"showlegend\": False,\n    \"textinfo\": \"label\",\n    \"textposition\": \"inside\",\n    \"hoverinfo\": \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing opacity with rgba color in Plotly.js error bars\nDESCRIPTION: Example showing how to replace the deprecated opacity attribute on error bars with an rgba color value that includes an alpha channel for transparency in Plotly.js.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  error_y: {\n    type: 'constant',\n    value: 0.1,\n    color: '#85144B',\n    thickness: 1.5,\n    width: 3,\n    opacity: 0.5\n  }\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n  error_y: {\n    type: 'constant',\n    value: 0.1,\n    color: 'rgba(133, 20, 75, 0.5)',\n    thickness: 1.5,\n    width: 3,\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Printing DataFrame Schema\nDESCRIPTION: Displays the schema of the DataFrame showing the structure of the bike rental data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbtd.printSchema()\n```\n\n----------------------------------------\n\nTITLE: Uploading a Plotly Grid in Python\nDESCRIPTION: Creates a Plotly grid with two columns of data and uploads it to Plotly. The grid is made public and the resulting URL is printed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nimport chart_studio.plotly as py\nimport chart_studio.tools as tls\nimport plotly.graph_objects as go\nfrom chart_studio.grid_objs import Column, Grid\n\nfrom datetime import datetime as dt\nimport numpy as np\nfrom IPython.display import IFrame\n\ncolumn_1 = Column(['a', 'b', 'c'], 'column 1')\ncolumn_2 = Column([1, 2, 3], 'column 2') # Tabular data can be numbers, strings, or dates\ngrid = Grid([column_1, column_2])\nurl = py.grid_ops.upload(grid,\n                         filename='grid_ex_'+str(dt.now()),\n                         world_readable=True,\n                         auto_open=False)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Customizing Histograms with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates customizing a histogram using parameters like barmode, bins, histnorm, and histfunc to adjust appearance and data representation. Dependencies include Pandas, NumPy, and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='histogram', barmode='stack', bins=100, histnorm='probability', filename='cufflinks/customized-histogram')\n```\n\n----------------------------------------\n\nTITLE: Aggregating Daily Complaints with SQL and Plotly in Python\nDESCRIPTION: This code snippet aggregates complaint data on a daily basis using SQL. It demonstrates how to group timestamps into daily intervals and count the complaints. The results are visualized using a Plotly bar chart, showing the number of complaints per day over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nhours = 24\nminutes = hours*60\nseconds = minutes*60\n\ndf = pd.read_sql_query('SELECT datetime(('\n                                   'strftime(\\'%s\\', CreatedDate) / {seconds}) * {seconds}, \\'unixepoch\\') interval ,'\n                               'COUNT(*) as \"Complaints / interval\"'\n                       'FROM data '\n                       'GROUP BY interval '\n                       'ORDER BY interval'.format(seconds=seconds), disk_engine)\n\npy.iplot(\n    {\n        'data': [{\n            'x': df.interval,\n            'y': df['Complaints / interval'],\n            'type': 'bar'\n        }],\n        'layout': {\n            'title': 'Number of 311 Complaints per Day'\n        }\n}, filename='311/complaints per day')\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Settings for Graph Visualization in Python\nDESCRIPTION: Configures axis settings to hide grid lines, tick labels, and other elements for a cleaner graph visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\naxis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title=''\n          )\n```\n\n----------------------------------------\n\nTITLE: Implementing Modulo Function for Circular Calculations (Python)\nDESCRIPTION: This snippet defines functions for handling circular arithmetic, crucial for positioning elements in the chord diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPI=np.pi\n\ndef moduloAB(x, a, b): #maps a real number onto the unit circle identified with \n                       #the interval [a,b), b-a=2*PI\n        if a>=b:\n            raise ValueError('Incorrect interval ends')\n        y=(x-a)%(b-a)\n        return y+b if y<0 else y+a\n    \ndef test_2PI(x):\n    return 0<= x <2*PI\n```\n\n----------------------------------------\n\nTITLE: Replacing heatmapgl with heatmap in Plotly.js\nDESCRIPTION: Example demonstrating how to update code that uses the deprecated heatmapgl trace type to the recommended heatmap trace type in Plotly.js.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  {\n    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],\n    type: 'heatmapgl'\n  }\n];\n\nPlotly.newPlot('myDiv', data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  {\n    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],\n    type: 'heatmap'\n  }\n];\n\nPlotly.newPlot('myDiv', data);\n```\n\n----------------------------------------\n\nTITLE: Defining Network Edges in GML Format\nDESCRIPTION: This code defines the edges of a network graph in GML (Graph Modeling Language) format. Each edge connects a source node to a target node with an associated value representing the strength or weight of the connection. The snippet shows the pattern used throughout the file for defining graph connectivity.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_6\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 29\n    target 28\n    value 0.5\n  ]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Explained Variance\nDESCRIPTION: Creates a bar and line plot showing individual and cumulative explained variance for each principal component using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntot = sum(eig_vals)\nvar_exp = [(i / tot)*100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\n\ntrace1 = dict(\n    type='bar',\n    x=['PC %s' %i for i in range(1,5)],\n    y=var_exp,\n    name='Individual'\n)\n\ntrace2 = dict(\n    type='scatter',\n    x=['PC %s' %i for i in range(1,5)], \n    y=cum_var_exp,\n    name='Cumulative'\n)\n\ndata = [trace1, trace2]\n\nlayout=dict(\n    title='Explained variance by different principal components',\n    yaxis=dict(\n        title='Explained variance in percent'\n    ),\n    annotations=list([\n        dict(\n            x=1.16,\n            y=1.05,\n            xref='paper',\n            yref='paper',\n            text='Explained Variance',\n            showarrow=False,\n        )\n    ])\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='selecting-principal-components')\n```\n\n----------------------------------------\n\nTITLE: Creating Stream ID Objects\nDESCRIPTION: Sets up stream ID dictionaries with tokens and maximum points configuration\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstream_id1 = dict(token=token_1, maxpoints=60)\nstream_id2 = dict(token=token_2, maxpoints=60)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for FFT Filtering in Python\nDESCRIPTION: This snippet imports the required libraries for FFT filtering and data visualization, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Publishing Polygon Area Notebook with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for the notebook, installs a publisher package, and publishes the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/polygon-area/python_Polygon_Area.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Polygon_Area.ipynb', 'python/polygon-area/', 'Polygon Area | plotly',\n    'Learn how to find the area of any simple polygon',\n    title='Polygon Area in Python. | plotly',\n    name='Polygon Area',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=8,\n    ipynb= '~notebook_demo/100')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Publisher in Python\nDESCRIPTION: This snippet shows how to publish a Jupyter Notebook using the `publisher` library, which allows for easy deployment of Plotly documentation. It imports `display` and `HTML` from `IPython.display` to customize the notebook's styling, installs the `publisher` library, and then calls `publisher.publish` with various parameters to configure the publishing process, including the notebook name, destination path, title, description, thumbnail, and display settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'axes.ipynb', 'python/axes/', 'Axes | plotly',\n    'How to adjust axes properties in python. Seven examples of linear and logarithmic axes, axes titles, and styling and coloring axes and grid lines.',\n    title = 'Axes | plotly',\n    name = 'Axes',\n    has_thumbnail='true', thumbnail='thumbnail/axes.png', \n    language='python',\n    display_as='file_settings', order=12,\n    ipynb= '~notebook_demo/95')\n```\n\n----------------------------------------\n\nTITLE: Generating Control Points for Bézier Patch\nDESCRIPTION: Function that calculates control points for a triangular Bézier patch given degree n, triangle T, and z-coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef control_points(n, T, b_z):\n    ind=indexes(n)\n    weights=[(i/n, j/n, k/n) for (i, j, k) in ind]\n    b_xy=[cartesian_coords(w,T) for w in weights]\n    b_xy=map(list, b_xy)\n    len_bxy=len(b_xy)\n    b=[b_xy[k]+[b_z[k]] for k in range(len_bxy)]\n    return b\n```\n\n----------------------------------------\n\nTITLE: Creating Asymmetric Error Bars with Pandas Data in Plotly\nDESCRIPTION: This example loads wind speed data from a CSV file using Pandas and creates a line chart with asymmetric error bars. It demonstrates the 'tonexty' fill method to create shaded regions between upper and lower bounds based on standard deviation values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/continuous-error-bars/cont-error-bars.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\n\nupper_bound = go.Scatter(\n    name='Upper Bound',\n    x=df['Time'],\n    y=df['10 Min Sampled Avg']+df['10 Min Std Dev'],\n    mode='lines',\n    marker=dict(color=\"#444\"),\n    line=dict(width=0),\n    fillcolor='rgba(68, 68, 68, 0.3)',\n    fill='tonexty')\n\ntrace = go.Scatter(\n    name='Measurement',\n    x=df['Time'],\n    y=df['10 Min Sampled Avg'],\n    mode='lines',\n    line=dict(color='rgb(31, 119, 180)'),\n    fillcolor='rgba(68, 68, 68, 0.3)',\n    fill='tonexty')\n\nlower_bound = go.Scatter(\n    name='Lower Bound',\n    x=df['Time'],\n    y=df['10 Min Sampled Avg']-df['10 Min Std Dev'],\n    marker=dict(color=\"#444\"),\n    line=dict(width=0),\n    mode='lines')\n\n# Trace order can be important\n# with continuous error bars\ndata = [lower_bound, trace, upper_bound]\n\nlayout = go.Layout(\n    yaxis=dict(title='Wind speed (m/s)'),\n    title='Continuous, variable value error bars.<br>Notice the hover text!',\n    showlegend = False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='pandas-continuous-error-bars')\n```\n\n----------------------------------------\n\nTITLE: Creating Random Scatter Plot\nDESCRIPTION: Generate a scatter plot with 100 random points with varying colors and sizes using Plotly's Figure object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nN = 100\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\nsz = np.random.rand(N)*30\n\nfig = go.Figure()\nfig.add_scatter(x=x,\n                y=y,\n                mode='markers',\n                marker={'size': sz,\n                        'color': colors,\n                        'opacity': 0.6,\n                        'colorscale': 'Viridis'\n                       });\niplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Matrix with Cufflinks in Python\nDESCRIPTION: This snippet uses Cufflinks to create a scatter matrix plot for visualizing relationships between data columns. It specifies filename and privacy settings. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndf.scatter_matrix(filename='cufflinks/scatter-matrix-subplot', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Grid Creation for Animation\nDESCRIPTION: Creates a Plotly grid structure for animation by processing time series data into x,y column pairs\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/filled-area-animation/filled-area-animation.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef to_unix_time(dt):\n    epoch =  datetime.utcfromtimestamp(0)\n    return (dt - epoch).total_seconds() * 1000\n\nappl_price = list(appl['Adjusted'])\nmy_columns = []\nfor k in range(len(appl.Date) - 1):\n    my_columns.append(Column(list(appl.Date)[:k + 1], 'x{}'.format(k + 1)))   \n    my_columns.append(Column(appl_price[:k + 1], 'y{}'.format(k + 1)))\ngrid = Grid(my_columns)\npy.grid_ops.upload(grid, 'AAPL-daily-stock-price' + str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Eurovision Graph with NetworkX for Comparison in Python\nDESCRIPTION: Implements an alternative visualization of the same Eurovision data using NetworkX and Matplotlib for comparison with the Plotly version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nG=nx.DiGraph()\nG.add_nodes_from(range(L))\nG.add_edges_from(E)\n\nplt.figure(figsize=(18,18))            \nnx.draw_circular(G,node_color='g', edge_color='#909090', node_size=900)\nplt.axis('equal')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly and Data Manipulation in Python\nDESCRIPTION: This snippet imports necessary libraries for working with Plotly, NumPy, Pandas, and SciPy. These libraries are used for data manipulation, curve fitting, and visualization in the subsequent examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-1d/python_Interpolation_and_Extrapolation_in_1D.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Analyzing System Zeros for Non-Minimum Phase Behavior\nDESCRIPTION: Examines the zeros of the transfer function, revealing a right half-plane zero that explains the countersteering phenomenon in bicycles (non-minimum phase behavior).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npsi_thetac.zero()\n```\n\n----------------------------------------\n\nTITLE: Creating Color-Coded Band Diagram Based on Orbital Contributions\nDESCRIPTION: Generates a band diagram where lines are colored according to the atomic orbital contributions (s, p, d) at each k-point, using RGB color encoding to represent orbital character.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncolorBands = list() # will contain the list of all lines\nnkpts = len(bands.kpoints)\nfor band in range(bands.nb_bands):\n    eband = [e - bands.efermi for e in bands.bands[Spin.up][band]]\n    for k in range(nkpts - 1):\n        red, green, blue = [int(255 * (contrib[band, k, i] + contrib[band, k+1, i])/2) for i in range(3)]\n        colorBands.append(\n            go.Scatter(\n                x=[k, k+1],\n                y=[eband[k], eband[k+1]],\n                mode=\"lines\",\n                line=go.Line(color=\"rgb({}, {}, {})\".format(red, green, blue)),\n                showlegend=False\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Waterfall Chart with Plotly in Python\nDESCRIPTION: This code creates a basic vertical waterfall chart representing a profit and loss statement. It uses the Plotly offline mode and demonstrates how to set up the data and layout for the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = False)\n\ntrace = go.Waterfall(\n    name = \"20\", orientation = \"v\", \n    measure = [\"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\"], \n    x = [\"Sales\", \"Consulting\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"], \n    textposition = \"outside\", \n    text = [\"+60\", \"+80\", \"\", \"-40\", \"-20\", \"Total\"], \n    y = [60, 80, 0, -40, -20, 0], \n    connector = {\"line\":{\"color\":\"rgb(63, 63, 63)\"}}, \n)\n\nlayout = go.Layout(\n        title = \"Profit and loss statement 2018\", \n        showlegend = True\n)\n\npy.iplot(go.Figure([trace], layout), filename = \"basic_waterfall_chart\")\n```\n\n----------------------------------------\n\nTITLE: Scaling Bubble Sizes with sizeref\nDESCRIPTION: Implementation of bubble size scaling using sizeref attribute and area-based sizing mode.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nsize = [20, 40, 60, 80, 100, 80, 60, 40, 20, 40]\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    y=[11, 12, 10, 11, 12, 11, 12, 13, 12, 11],\n    mode='markers',\n    marker=dict(\n        size=size,\n        sizemode='area',\n        sizeref=2.*max(size)/(40.**2),\n        sizemin=4\n    )\n)\n\ndata = [trace0]\npy.iplot(data, filename='bubblechart-size-ref')\n```\n\n----------------------------------------\n\nTITLE: Date/Time Tick Formatting in Plotly\nDESCRIPTION: Demonstrates custom date/time formatting for time series data using tickformat attribute.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace0 = go.Scatter(\n    mode = 'lines',\n    name = 'AAPL High',\n    x = df['Date'],\n    y = df['AAPL.High'],\n    line = go.scatter.Line(\n        color = '#17BECF'\n    )\n)\n\ntrace1 = go.Scatter(\n    mode = 'lines',\n    name = 'AAPL Low',\n    x = df['Date'],\n    y = df['AAPL.Low'],\n    line = go.scatter.Line(\n        color = '#7F7F7F'\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title = 'Time Series with Custom Date-Time Format',\n    xaxis = go.layout.XAxis(\n        tickformat = '%d %B (%a)<br>%Y'\n    )\n)\n\nfig = go.Figure(\n    data=data,\n    layout=layout\n)\n\npy.iplot(fig, filename='using-tickformat-attribute-date')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node and Edge Colors for Eurovision Visualization in Python\nDESCRIPTION: Defines color schemes for nodes and edges in the graph based on country status (contestant or jury member).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nnode_color=['rgba(0,51,181, 0.85)'  if v['label'] in Contestant else '#CCCCCC' for v in G.vs] \nline_color=['#FFFFFF'  if v['label'] in Contestant else 'rgb(150,150,150)' for v in G.vs]\nedge_colors=['#d4daff','#84a9dd', '#5588c8', '#6d8acf']\n```\n\n----------------------------------------\n\nTITLE: Setting up IPython Display and Publishing Notebook with Plotly in Python\nDESCRIPTION: This snippet sets up custom styling for IPython display, installs the Plotly publisher package, and publishes the notebook with specific metadata. It includes instructions for displaying custom fonts and CSS, as well as publishing the notebook to Plotly's documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-differentiation/python_Numerical_Differentiation.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Numerical_Differentiation.ipynb', 'python/numerical-differentiation/', 'Numerical Differentiation | plotly',\n    'Learn how to differentiate a sequence or list of values numerically',\n    title='Numerical Differentiation in Python. | plotly',\n    name='Numerical Differentiation',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=6,\n    ipynb= '~notebook_demo/102')\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example in IPython Notebook\nDESCRIPTION: This snippet shows how to embed a Dash application example in an IPython notebook using an IFrame. It displays an interactive legend example created with Dash.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-legend/\", width=\"100%\", height=\"820px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plotly Line Plot with Custom Styling\nDESCRIPTION: Creates a figure with two line plots using Plotly's graph objects. Demonstrates how to customize the plot title, axis labels, and trace names with specific styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/labels/labels.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    name='Name of Trace 1'\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],\n    name='Name of Trace 2'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title=go.layout.Title(\n        text='Plot Title',\n        xref='paper',\n        x=0\n    ),\n    xaxis=go.layout.XAxis(\n        title=go.layout.xaxis.Title(\n            text='x Axis',\n            font=dict(\n                family='Courier New, monospace',\n                size=18,\n                color='#7f7f7f'\n            )\n        )\n    ),\n    yaxis=go.layout.YAxis(\n        title=go.layout.yaxis.Title(\n            text='y Axis',\n            font=dict(\n                family='Courier New, monospace',\n                size=18,\n                color='#7f7f7f'\n            )\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='styling-names')\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLAlchemy Connection to Redshift\nDESCRIPTION: Creates a SQLAlchemy engine for connecting to Redshift database using connection parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nengine_string = \"postgresql+psycopg2://%s:%s@%s:%d/%s\" \\\n% (redshift_user, redshift_pass, redshift_endpoint, port, dbname)\nengine = create_engine(engine_string)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with LaTeX Examples\nDESCRIPTION: This snippet sets up custom CSS for the notebook display, installs the Plotly publisher package, and publishes the notebook with LaTeX examples. It includes metadata for the published document such as title, description, and thumbnail.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/latex/latex-typesetting.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'latex-typesetting.ipynb', 'python/LaTeX/', 'LaTeX',\n    'How to add LaTeX to python graphs.',\n    title = 'Python LaTeX | Examples | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/latex.jpg',\n    language='python',\n    display_as='style_opt', order=3, ipynb='~notebook_demo/268')\n```\n\n----------------------------------------\n\nTITLE: Creating Private Plotly Graphs\nDESCRIPTION: Example of creating a private plot that can only be viewed by the owner.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename='privacy-private', sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Creating an OHLC Chart without Rangeslider in Python\nDESCRIPTION: This example shows how to create an OHLC chart with the rangeslider disabled. The rangeslider is a navigation tool that appears below the chart by default, but can be hidden for a cleaner visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nfrom datetime import datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\n\nlayout = go.Layout(\n    xaxis = dict(\n        rangeslider = dict(\n            visible = False\n        )\n    )\n)\n\ndata = [trace]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='OHLC without Rangeslider')\n```\n\n----------------------------------------\n\nTITLE: Importing Essential Data Science Libraries in Python\nDESCRIPTION: Shows how to import commonly used Python libraries for data science including Pandas for data manipulation, NumPy for numerical operations, SciPy for scientific computing, and Plotly for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nimport chart_studio.plotly as py\n```\n\n----------------------------------------\n\nTITLE: Exporting plotly Graph as Static Image in R\nDESCRIPTION: Creates a simple line plot with plotly and exports it as a PNG file using the plotly_IMAGE() function. The image is saved in the working directory of the R session.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-04-09-static-image_r_index.md#2025-04-11_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(x = c(1,2,3,4), y = c(2,4,1,3), type = 'scatter', mode = 'lines')\nplotly_IMAGE(p, format = \"png\", out_file = \"output.png\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Environment\nDESCRIPTION: Configuration code for documentation setup including font loading, CSS styling, and publishing settings for the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'gapminder-example.ipynb', 'python/gapminder-example/', 'Adding Sliders to Animations | plotly',\n    'How to make the classic Gapminder Animation using sliders and buttons in Python.',\n    title='Adding Sliders to Animations | plotly',\n    name='Adding Sliders to Animations',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/gapminder_animation.gif',\n    display_as='animations', ipynb= '~notebook_demo/129', order=2)\n```\n\n----------------------------------------\n\nTITLE: Registering DataFrame as SQL Table\nDESCRIPTION: Registers the DataFrame as a temporary SQL table for query operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsqlCtx.registerDataFrameAsTable(btd, \"bay_area_bike\")\n```\n\n----------------------------------------\n\nTITLE: Version Check in Python Plotly\nDESCRIPTION: Simple code to check the installed version of Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots with Cufflinks in Python\nDESCRIPTION: This snippet explains how to create a box plot with Cufflinks, illustrating how to input data and specify the kind \"box\" setting for visualization. Dependencies are Pandas, NumPy, and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])\ndf.iplot(kind='box', filename='cufflinks/box-plots')\n```\n\n----------------------------------------\n\nTITLE: Reading Network Data with igraph in Python\nDESCRIPTION: Loads a network graph from a GML file using igraph, extracts nodes (vertices) and edges, and applies the Kamada-Kawai layout algorithm.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/igraph_vs_networkx.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n\nG=ig.Graph.Read_GML('netscience.gml.txt')\nlabels=list(G.vs['label'])\nN=len(labels)\nE=[e.tuple for e in G.es]# list of edges\nlayt=G.layout('kk') #kamada-kawai layout\ntype(layt)\n```\n\n----------------------------------------\n\nTITLE: Direct Plotting with Cufflinks in Python\nDESCRIPTION: This snippet shows how to directly plot a DataFrame using Cufflinks, simplifying the process to a single line of code. It uses the iplot method, specifying the plot type and filename, with Cufflinks and Plotly as dependencies.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='scatter', filename='cufflinks/cf-simple-line')\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Connections in Graph Modeling Language (GML)\nDESCRIPTION: This code defines network connections (edges) between nodes in a graph structure. Each edge has a source node, target node, and a weight value. The format follows the Graph Modeling Language (GML) standard commonly used in network visualization tools.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_17\n\nLANGUAGE: gml\nCODE:\n```\nedge\n[\n  source 1223\n  target 1222\n  value 0.5\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Parameters for Negative Binomial Simulation in Python\nDESCRIPTION: This snippet initializes parameters for simulating a negative binomial distribution using Python's numpy. The parameters 'r' and 'p' represent the number of failures and probability of success, respectively. These values will be used in subsequent simulations to approximate the expected value of a random variable with a negative binomial distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nr = 3\np = 0.7\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Data Smoothing in Python\nDESCRIPTION: Imports necessary libraries for data smoothing, including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and SciPy for scientific computing and signal processing functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/smoothing/python-Smoothing.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Publishing IPython Notebooks - Python\nDESCRIPTION: This snippet outlines the steps to publish an IPython Notebook using the 'publisher' library. It includes installation commands and parameters required for publishing, such as the notebook path and description. This requires the 'publisher' package to be installed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'bioinformatics.ipynb', 'ipython-notebooks/bioinformatics/', 'Visualizing biological data: exploratory bioinformatics with plot.ly', \n    '5 popular visualizations that bioinformaticians use in exploratory analysis of genomic data.', name='Visualizing Biological Data')\n```\n\n----------------------------------------\n\nTITLE: Displaying All Available Color Scales\nDESCRIPTION: Renders HTML output of all color scales available in the colorlover library\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHTML(cl.to_html( cl.scales ))\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Plotly Graphs Using a For Loop in R\nDESCRIPTION: This snippet shows an alternative approach to creating multiple plotly graphs using a for loop instead of lapply. It creates an empty tag list and then populates it with three histogram plots of random normal data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\n\nl <- htmltools::tagList()\nfor (i in 1:3) {\n  l[[i]] <- plot_ly(x = rnorm(10))\n}\nl\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation with Plotly Publisher\nDESCRIPTION: Code for publishing the notebook as documentation using Plotly's publisher tool. It sets custom fonts, styling, and metadata for the documentation page about animations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'intro-to-animations.ipynb', 'python/animations/', 'Intro to Animations | plotly',\n    'An introduction to creating animations with Plotly in Python.',\n    title='Intro to Animations in Python | plotly',\n    name='Intro to Animations',\n    language='python',\n    page_type='example_index',\n    has_thumbnail='true', thumbnail='thumbnail/animations.gif',\n    display_as='animations', ipynb= '~notebook_demo/131', order=1, uses_plotly_offline=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ribbon Plot with Plotly in Python\nDESCRIPTION: This code creates a basic ribbon plot using Plotly's surface plot functionality. It loads spectral data from a CSV file, processes it to create multiple ribbon traces with color gradients, and displays the result as a 3D visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-ribbon/ribbon.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport urllib\nimport numpy as np\n\nurl = \"https://raw.githubusercontent.com/plotly/datasets/master/spectral.csv\"\nf = urllib.urlopen(url)\nspectra=np.loadtxt(f, delimiter=',')\n\ntraces = []\ny_raw = spectra[:, 0] # wavelength\nsample_size = spectra.shape[1]-1 \nfor i in range(1, sample_size):\n    z_raw = spectra[:, i]\n    x = []\n    y = []\n    z = []\n    ci = int(255/sample_size*i) # ci = \"color index\"\n    for j in range(0, len(z_raw)):\n        z.append([z_raw[j], z_raw[j]])\n        y.append([y_raw[j], y_raw[j]])\n        x.append([i*2, i*2+1])\n    traces.append(dict(\n        z=z,\n        x=x,\n        y=y,\n        colorscale=[ [i, 'rgb(%d,%d,255)'%(ci, ci)] for i in np.arange(0,1.1,0.1) ],\n        showscale=False,\n        type='surface',\n    ))\n\nfig = { 'data':traces, 'layout':{'title':'Ribbon Plot'} }\npy.iplot(fig, filename='ribbon-plot-python')\n```\n\n----------------------------------------\n\nTITLE: Setting API Authentication Variables\nDESCRIPTION: Defines authentication variables for accessing Plotly's API, including username and API key.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nusername = 'private_plotly' # Replace with YOUR USERNAME\napi_key = 'k0yy0ztssk' # Replace with YOUR API KEY\n\nauth = HTTPBasicAuth(username, api_key)\nheaders = {'Plotly-Client-Platform': 'python'}\n\npage_size = 500\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Thresholds and Control Point Parameters in Python\nDESCRIPTION: Creates lists of threshold distances between nodes on the unit circle and parameters for interior control points of Bézier curves.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nDist=[0, dist([1,0], 2*[np.sqrt(2)/2]), np.sqrt(2),\n      dist([1,0],  [-np.sqrt(2)/2, np.sqrt(2)/2]), 2.0]\nparams=[1.2, 1.5, 1.8, 2.1]\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying HTML in IPython - Plotly Python\nDESCRIPTION: This snippet demonstrates how to import the necessary libraries to display custom HTML styles in an IPython notebook for enhanced aesthetic presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'new_py_guide.ipynb', 'python/user-guide//', 'Plotly User Guide for Python',\n    'Plotly User Guide for Python',\n    name = 'Plotly User Guide',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Area Polar Chart with Fill\nDESCRIPTION: Creates a polar chart with filled areas using multiple traces. Demonstrates the use of fill='toself' to create closed shapes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatterpolar(\n        r = [0, 1.5, 1.5, 0, 2.5, 2.5, 0],\n        theta = [0, 10, 25, 0, 205, 215, 0],\n        mode = 'lines',\n        fill = 'toself',\n        fillcolor = '#709BFF',\n        line =  dict(\n            color = 'black'\n        )   \n    ),\n    go.Scatterpolar(\n        r = [0, 3.5, 3.5, 0],\n        theta = [0, 55, 75, 0],\n        mode = 'lines',\n        fill = 'toself',\n        fillcolor = '#E4FF87',\n        line =  dict(\n            color = 'black'\n        )    \n    ),\n    go.Scatterpolar(\n        r = [0, 4.5, 4.5, 0, 4.5, 4.5, 0],\n        theta = [0, 100, 120, 0, 305, 320, 0],\n        mode = 'lines',\n        fill = 'toself',\n        fillcolor = '#FFAA70',\n        line =  dict(\n            color = 'black'\n        )  \n    ),\n    go.Scatterpolar(\n        r = [0, 4, 4, 0],\n        theta = [0, 165, 195, 0],\n        mode = 'lines',\n        fill = 'toself',\n        fillcolor = '#FFDF70',\n        line =  dict(\n            color = 'black'\n        )    \n    ),\n    go.Scatterpolar(\n        r = [0, 3, 3, 0],\n        theta = [0, 262.5, 277.5, 0],\n        mode = 'lines',\n        fill = 'toself',\n        fillcolor = '#B6FFB4',\n        line =  dict(\n            color = 'black'\n        )    \n    )\n]\n\nlayout = go.Layout(\n    polar = dict(\n        radialaxis = dict(\n            visible = True,\n            range = [0,5]\n        )\n    ),\n    showlegend = False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = 'polar-area')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple version check for the Plotly package installation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Plotly Graph with Cufflinks in Python\nDESCRIPTION: This snippet shows how to create a private graph using Cufflinks with Plotly. The world_readable parameter is set to False to ensure the plot's privacy. It uses Cufflinks to plot a histogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf.a.iplot(kind='histogram', world_readable=False)\n```\n\n----------------------------------------\n\nTITLE: Loading Network Data from JSON in Python\nDESCRIPTION: Fetches Les Miserables character network data from a JSON file hosted on GitHub using urllib2 and parses it with the json module. The code retrieves the data structure and displays available keys.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport urllib2\n\ndata = []\nreq = urllib2.Request(\"https://raw.githubusercontent.com/plotly/datasets/master/miserables.json\")\nopener = urllib2.build_opener()\nf = opener.open(req)\ndata = json.loads(f.read())\n\nprint data.keys()\n```\n\n----------------------------------------\n\nTITLE: Defining Bicycle Model Constants in Python\nDESCRIPTION: This code defines numerical values for the bicycle model constants, including gravity, mass, moment of inertia, and geometry.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = 9.81  # m/s^2\nm = 87.0  # kg\nI = 3.28  # kg m^2\nh = 1.0  # m\na = 0.5  # m\nb = 1.0  # m\nv = 5.0  # m/s\n```\n\n----------------------------------------\n\nTITLE: Graph Edge Data Structure\nDESCRIPTION: A collection of edge definitions for a graph structure. Each edge specifies a source node, target node, and a weighted value representing the strength of the connection between them. The values range from approximately 0.14 to 2.91.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n  edge\n  [\n    source 435\n    target 245\n    value 1\n  ]\n```\n\n----------------------------------------\n\nTITLE: Adding Rank Annotations to Heatmap Cells in Plotly\nDESCRIPTION: Adds text annotations to each cell in the heatmap displaying the candidate's rank value. Text color adapts based on rank value - white for ranks below 12 and gray for ranks 12 and above for better visibility.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor i, row in enumerate(tab_vals17):\n    for j, val in enumerate(row):\n        annotations.append(\n            Annotation(\n                text=str(val), \n                x=candidates[j], y=factors[i],\n                xref='x1', yref='y1',\n                font=dict(color='white' if tab_vals17[i][j]<12 else 'rgb(150,150,150)'),\n                showarrow=False))\n```\n\n----------------------------------------\n\nTITLE: Setting MNE Log Level\nDESCRIPTION: Sets the MNE logging level to 'WARNING' to reduce verbosity of output messages during data processing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmne.set_log_level('WARNING')\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Notebook Display and Publishing Content\nDESCRIPTION: This snippet sets up custom styling for the IPython notebook, upgrades the publisher package, and publishes the notebook content to a specified location with metadata. It uses IPython's display functions and the publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    's0_getting-started.ipynb', 'python/getting_started//', 'Getting Started Plotly for Python',\n    'Getting Started with Plotly for Python',\n    title = 'Getting Started Plotly for Python',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Displaying a Dash Example in an IPython Notebook\nDESCRIPTION: This code snippet demonstrates how to display a Dash example of a multiple axes plot in an IPython notebook using an IFrame. It requires the IPython.display module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-multipleaxesplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scatter Plot with Multiple Traces in Python using Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic 3D scatter plot with two traces using Plotly. It generates random data using NumPy, configures marker properties like size, color, and opacity, and sets a minimal layout with no margins.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-scatter/3d_scatter.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx, y, z = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 200).transpose()\ntrace1 = go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    mode='markers',\n    marker=dict(\n        size=12,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\nx2, y2, z2 = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 200).transpose()\ntrace2 = go.Scatter3d(\n    x=x2,\n    y=y2,\n    z=z2,\n    mode='markers',\n    marker=dict(\n        color='rgb(127, 127, 127)',\n        size=12,\n        symbol='circle',\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=1\n        ),\n        opacity=0.9\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='simple-3d-scatter')\n```\n\n----------------------------------------\n\nTITLE: Implementing Band-Pass FFT Filter in Python\nDESCRIPTION: This code creates a band-pass FFT filter by combining low-pass and high-pass filters. It defines low and high cutoff frequencies and applies the filter to the wind speed data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfL = 0.1\nfH = 0.3\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1  # Make sure that N is odd.\nn = np.arange(N)\n \n# low-pass filter\nhlpf = np.sinc(2 * fH * (n - (N - 1) / 2.))\nhlpf *= np.blackman(N)\nhlpf = hlpf / np.sum(hlpf)\n \n# high-pass filter \nhhpf = np.sinc(2 * fL * (n - (N - 1) / 2.))\nhhpf *= np.blackman(N)\nhhpf = hhpf / np.sum(hhpf)\nhhpf = -hhpf\nhhpf[int((N - 1) / 2)] += 1\n \nh = np.convolve(hlpf, hhpf)\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, h)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='Band-Pass Filter',\n    marker=dict(\n        color='#BB47BE'\n    )\n)\n\nlayout = go.Layout(\n    title='Band-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-band-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Plot with Plotly\nDESCRIPTION: Generates a histogram plot using Plotly to visualize the distribution of the test data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(\n    x=gauss_data\n)\n\npy.iplot([trace], filename='normality-histogram')\n```\n\n----------------------------------------\n\nTITLE: Processing Matrix Data for Chord Diagram (Python)\nDESCRIPTION: This code processes the interaction data into a numpy array and defines a function to check the data's validity for chord diagram creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nmatrix=np.array([[16,  3, 28,  0, 18],\n                 [18,  0, 12,  5, 29],\n                 [ 9, 11, 17, 27,  0],  \n                 [19,  0, 31, 11, 12],\n                 [23, 17, 10,  0, 34]], dtype=int)\n\ndef check_data(data_matrix):\n    L, M=data_matrix.shape\n    if L!=M:\n        raise ValueError('Data array must have (n,n) shape')\n    return L\n\nL=check_data(matrix)\n```\n\n----------------------------------------\n\nTITLE: Calculating Roll Error and Steer Angle in Bicycle Control\nDESCRIPTION: Computes the roll error as the difference between commanded and actual roll angle, then calculates the steer angle using a proportional controller gain (k_theta).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nthetae = thetac - theta\ndelta = k_theta * thetae\n```\n\n----------------------------------------\n\nTITLE: Facet Grid by Row and Column\nDESCRIPTION: Creates a complex facet grid plot segmented by both rows and columns. Plots vehicle data with custom marker colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\nfig = ff.create_facet_grid(\n    mpg,\n    x='displ',\n    y='cty',\n    facet_row='cyl',\n    facet_col='drv',\n    marker={'color': 'rgb(234, 239, 155)'},\n)\n\npy.iplot(fig, filename='facet by row and col')\n```\n\n----------------------------------------\n\nTITLE: Create Interactive Widgets\nDESCRIPTION: Setting up ipywidgets for interactive filtering and Plotly FigureWidget for visualization\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmonth = widgets.IntSlider(\n    value=1.0,\n    min=1.0,\n    max=12.0,\n    step=1.0,\n    description='Month:',\n    continuous_update=False\n)\n\nuse_date = widgets.Checkbox(\n    description='Date: ',\n    value=True,\n)\n\ncontainer = widgets.HBox(children=[use_date, month])\n\ntextbox = widgets.Dropdown(\n    description='Airline:   ',\n    value='DL',\n    options=df['carrier'].unique().tolist()\n)\n\norigin = widgets.Dropdown(\n    options=list(df['origin'].unique()),\n    value='LGA',\n    description='Origin Airport:',\n)\n\n\n# Assign an emptry figure widget with two traces\ntrace1 = go.Histogram(x=df['arr_delay'], opacity=0.75, name='Arrival Delays')\ntrace2 = go.Histogram(x=df['dep_delay'], opacity=0.75, name='Departure Delays')\ng = go.FigureWidget(data=[trace1, trace2],\n                    layout=go.Layout(\n                        title=dict(\n                            text='NYC FlightDatabase'\n                        ),\n                        barmode='overlay'\n                    ))\n```\n\n----------------------------------------\n\nTITLE: 2D Histogram with Custom Binning and Styling\nDESCRIPTION: Demonstrates advanced customization of 2D histograms including bin size control, probability normalization, and custom color scales.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(500)\ny = np.random.randn(500)+1\n\ndata = [\n    go.Histogram2d(x=x, y=y, histnorm='probability',\n        autobinx=False,\n        xbins=dict(start=-3, end=3, size=0.1),\n        autobiny=False,\n        ybins=dict(start=-2.5, end=4, size=0.1),\n        colorscale=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']]\n    )\n]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for documentation and uses a publisher script to publish the notebook as documentation. It includes font loading, custom CSS, and parameters for the publishing process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/filter/filter.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'filter.ipynb', 'python/filter/', 'Filter',\n    'How to use filters in Python with Plotly.',\n    title = 'Filter | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/filter.jpg', \n    language='python', uses_plotly_offline=True,\n    page_type='example_index',\n    display_as='transforms', order=1,\n    ipynb= '~notebook_demo/195')\n```\n\n----------------------------------------\n\nTITLE: Configuring Axes for Vertical Subplots\nDESCRIPTION: This code configures the x and y axes of the previously created figures to create vertical subplots. It updates the axis properties to specify domains and anchors for proper layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(len(fig1.data)):\n    fig1.data[i].xaxis='x1'\n    fig1.data[i].yaxis='y1'\n\nfig1.layout.xaxis1.update({'anchor': 'y1'})\nfig1.layout.yaxis1.update({'anchor': 'x1', 'domain': [.55, 1]})\n\nfor i in range(len(fig2.data)):\n    fig2.data[i].xaxis='x2'\n    fig2.data[i].yaxis='y2'\n\n# initialize xaxis2 and yaxis2\nfig2['layout']['xaxis2'] = {}\nfig2['layout']['yaxis2'] = {}\n\nfig2.layout.xaxis2.update({'anchor': 'y2'})\nfig2.layout.yaxis2.update({'anchor': 'x2', 'domain': [0, .45]})\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Scatter Plot with Plotly FigureWidget\nDESCRIPTION: Initializes a Plotly FigureWidget with a scattergl trace showing the relationship between Torque and City MPG from the cars dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig = go.FigureWidget(\n    data=[\n        dict(\n            type='scattergl',\n            x=cars_df['Torque'],\n            y=cars_df['City mpg'],\n            mode='markers',\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Traces into Plotly Data Object\nDESCRIPTION: Creates a data object that combines all the visualizations (time series and histograms) for the three parameters to prepare for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndata7 = pgo.Data([trace1, trace2, trace3, trace4, trace5, trace6])\n```\n\n----------------------------------------\n\nTITLE: Adding Logo to Plotly Bar Chart\nDESCRIPTION: Shows how to add a logo to a bar chart visualization using layout.images. Includes comprehensive chart formatting with custom axes, margins, and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Bar(\n        x=['-35.3', '-15.9', '-15.8', '-15.6', '-11.1',\n           '-9.6', '-9.2', '-3.5', '-1.9', '-0.9',\n           '1.0', '1.4', '1.7', '2.0', '2.8', '6.2',\n           '8.1', '8.5', '8.5', '8.6', '11.4', '12.5',\n           '13.3', '13.7', '14.4', '17.5', '17.7',\n           '18.9', '25.1', '28.9', '41.4'],\n        y=['Designers, musicians, artists, etc.',\n           'Secretaries and administrative assistants',\n           'Waiters and servers', 'Archivists, curators, and librarians',\n           'Sales and related', 'Childcare workers, home car workers, etc.',\n           'Food preparation occupations', 'Janitors, maids, etc.',\n           'Healthcare technicians, assistants. and aides',\n           'Counselors, social and religious workers',\n           'Physical, life and social scientists', 'Construction',\n           'Factory assembly workers', 'Machinists, repairmen, etc.',\n           'Media and communications workers', 'Teachers',\n           'Mechanics, repairmen, etc.', 'Financial analysts and advisers',\n           'Farming, fishing and forestry workers',\n           'Truck drivers, heavy equipment operator, etc.','Accountants and auditors',\n           'Human resources, management analysts, etc.', 'Managers',\n           'Lawyers and judges', 'Engineers, architects and surveyors',\n           'Nurses', 'Legal support workers',\n           'Computer programmers and system admin.', 'Police officers and firefighters',\n           'Chief executives', 'Doctors, dentists and surgeons'],\n        marker=dict(\n            color='rgb(253, 240, 54)',\n            line=dict(color='rgb(0, 0, 0)',\n                      width=2)\n        ),\n        orientation='h',\n    )\n]\n\nlayout = go.Layout(\n    images=[dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=1, y=1.05,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"right\", yanchor=\"bottom\"\n      )],\n    autosize=False, height=800, width=700,\n    bargap=0.15, bargroupgap=0.1,\n    barmode='stack', hovermode='x',\n    margin=dict(r=20, l=300,\n                  b=75, t=125),\n    title='Moving Up, Moving Down<br><i>Percentile change in income between childhood and adulthood</i>',\n    xaxis=dict(\n        dtick=10, nticks=0,\n        gridcolor='rgba(102, 102, 102, 0.4)',\n        linecolor='#000', linewidth=1,\n        mirror=True,\n        showticklabels=True, tick0=0, tickwidth=1,\n        title='<i>Change in percentile</i>',\n    ),\n    yaxis=dict(\n        anchor='x',\n        gridcolor='rgba(102, 102, 102, 0.4)', gridwidth=1,\n        linecolor='#000', linewidth=1,\n        mirror=True, showgrid=False,\n        showline=True, zeroline=False,\n        showticklabels=True, tick0=0,\n        type='category',\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='EXAMPLES/logo')\n```\n\n----------------------------------------\n\nTITLE: Reversing Colorscale in Plotly\nDESCRIPTION: Reverses the direction of the color mapping for the density contour.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ncontour.reversescale = True\n```\n\n----------------------------------------\n\nTITLE: Generating Plotly Graph Images On-the-fly with py.image.get\nDESCRIPTION: Creates Plotly figures directly in code and converts them to base64-encoded images using py.image.get, without requiring pre-existing graph URLs. This approach allows for dynamic graph generation and embedding directly in the email.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\n# A collection of Plotly graphs\nfigures = [\n    {'data': [{'x': [1,2,3], 'y': [3,1,6]}], 'layout': {'title': 'the first graph'}},\n    {'data': [{'x': [1,2,3], 'y': [3,7,6], 'type': 'bar'}], 'layout': {'title': 'the second graph'}}\n]\n\n# Generate their images using `py.image.get`\nimages = [base64.b64encode(py.image.get(figure)).decode(\"ascii\") for figure in figures]\n\nemail_body = ''\nfor image in images:\n    _ = template\n    _ = _.format(image=image, caption='')\n    email_body += _\n    \ndisplay(HTML(email_body))\n```\n\n----------------------------------------\n\nTITLE: Node Definitions in Graph Markup Language\nDESCRIPTION: This snippet shows the structure of node definitions in what appears to be a Graph Markup Language (GML) or similar format. Each node is defined with an ID and a label attribute, commonly used for network visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  node\n  [\n    id 206\n    label \"PETERSON, C\"\n  ]\n  node\n  [\n    id 207\n    label \"BLANCHARD, P\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using Plotly's publisher tool. Includes font loading and custom CSS configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/webgl.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'webgl.ipynb', 'python/webgl-vs-svg/', 'Python WebGL vs SVG | plotly',\n    'Implement WebGL for increased speed, improved interactivity, and the ability to plot even more data!',\n    title = 'Python WebGL vs SVG | plotly',\n    name = 'WebGL vs SVG',\n    has_thumbnail='true', thumbnail='thumbnail/webgl.jpg', \n    language='python', \n    display_as='basic', order=0.5,\n    ipynb= '~notebook_demo/44')\n```\n\n----------------------------------------\n\nTITLE: Querying Daily Sales Data from Redshift\nDESCRIPTION: SQL query executed via pandas that retrieves daily sales quantity data. The query joins the sales and date tables to aggregate the quantity sold for each calendar date.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(sales.qtysold) as quantity_sold, date.caldate  \nFROM sales, date\nWHERE sales.dateid = date.dateid \nGROUP BY date.caldate \nORDER BY date.caldate asc;\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report Template String - Python/HTML\nDESCRIPTION: Creates an HTML string template that includes Bootstrap styling and embeds Plotly graphs and tables. The template contains sections for displaying Apple stock data and comparison with other stocks, along with reference tables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhtml_string = '''\n<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\">\n        <style>body{ margin:0 100; background:whitesmoke; }</style>\n    </head>\n    <body>\n        <h1>2014 technology and CPG stock prices</h1>\n\n        <!-- *** Section 1 *** --->\n        <h2>Section 1: Apple Inc. (AAPL) stock in 2014</h2>\n        <iframe width=\"1000\" height=\"550\" frameborder=\"0\" seamless=\"seamless\" scrolling=\"no\" \\\nsrc=\"''' + first_plot_url + '''.embed?width=800&height=550\"></iframe>\n        <p>Apple stock price rose steadily through 2014.</p>\n        \n        <!-- *** Section 2 *** --->\n        <h2>Section 2: AAPL compared to other 2014 stocks</h2>\n        <iframe width=\"1000\" height=\"1000\" frameborder=\"0\" seamless=\"seamless\" scrolling=\"no\" \\\nsrc=\"''' + second_plot_url + '''.embed?width=1000&height=1000\"></iframe>\n        <p>GE had the most predictable stock price in 2014. IBM had the highest mean stock price. \\\nThe red lines are kernel density estimations of each stock price - the peak of each red lines \\\ncorresponds to its mean stock price for 2014 on the x axis.</p>\n        <h3>Reference table: stock tickers</h3>\n        ''' + summary_table_2 + '''\n        <h3>Summary table: 2014 stock statistics</h3>\n        ''' + summary_table_1 + '''\n    </body>\n</html>'''\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook with Plotly Publisher in Python\nDESCRIPTION: This snippet demonstrates how to publish the Jupyter notebook using Plotly's publisher tool. It sets up custom CSS and fonts, installs the publisher, and calls the publish function with various metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Outlier-Test.ipynb', 'python/outlier-test/', 'Outlier Test | plotly',\n    'Learn how to test for outliers in datasets using Python.',\n    title='Outlier Test in Python. | plotly',\n    name='Outlier Test',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=6,\n    ipynb= '~notebook_demo/113')\n```\n\n----------------------------------------\n\nTITLE: Plotting Magnetometer Data with Plotly\nDESCRIPTION: Selects magnetometer data for a specific time segment, plots it using matplotlib, and converts it to an interactive Plotly visualization with channel names as legend entries.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npicks = mne.pick_types(raw.info, meg='mag', exclude=[])\ndata, times = raw[picks[:10], start:stop]\n\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\n\nplt.plot(times, data.T)\nplt.xlabel('time (s)')\nplt.ylabel('MEG data (T)')\n\nupdate = dict(layout=dict(showlegend=True), data=[dict(name=raw.info['ch_names'][p]) for p in picks[:10]])\npy.iplot_mpl(plt.gcf(), update=update)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display settings and publishes the notebook with custom styling and metadata configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Normalization.ipynb', 'python/normalization/', 'Normalization | plotly',\n    'Learn how to normalize data by fitting to intervals on the real line and dividing by a constant',\n    title='Normalization in Python. | plotly',\n    name='Normalization',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=2,\n    ipynb= '~notebook_demo/103')\n```\n\n----------------------------------------\n\nTITLE: Reading Second Excel File into Pandas DataFrame in Python\nDESCRIPTION: This snippet reads data from another Excel file named 'SystEng.xls' into a pandas DataFrame and displays its column names.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nxl = pd.ExcelFile(\"Data/SystEng.xls\")\ndfi = xl.parse(\"Sheet1\")\ndfi.columns\n```\n\n----------------------------------------\n\nTITLE: Counting Records in Database Tables\nDESCRIPTION: Python script that executes COUNT queries for each table in the database including the 'sales' table. The script prints the count results and commits the transaction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor table in tables + [\"sales\"]:\n    cur.execute(\"select count(*) from %s;\" % (table,))    \n    print(cur.fetchone())\nconn.commit() # make sure data went through and commit our statements permanently.\n```\n\n----------------------------------------\n\nTITLE: Dropping Bad Epochs and Checking Drop Log\nDESCRIPTION: Removes epochs that exceed the rejection criteria and imports Counter to analyze the drop log, which records which epochs were dropped and why.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom mne.fixes import Counter\n\n# drop bad epochs\nepochs.drop_bad_epochs()\ndrop_log = epochs.drop_log\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edge Connections with Weights\nDESCRIPTION: Edge definitions for a network graph, where each edge specifies a source node ID, target node ID, and a numeric weight value. The edges appear to be part of a larger graph data structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nedge\n[\n  source 1445\n  target 1438\n  value 0.0526316\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Simple code to import plotly and check its installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/table-subplots/table-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Documentation Publishing Setup\nDESCRIPTION: Configuration for publishing the documentation to Plotly's help system, including custom styling and metadata settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'sunburst-charts.ipynb', 'python/sunburst-charts/', 'Sunburst Charts',\n    'How to make Sunburst Charts.',\n    title= 'Sunburst in Python | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/sunburst.gif', \n    language='python', \n    display_as='basic', order=6.1,\n    ipynb='~notebook_demo/274/')\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Area Plot with Cufflinks in Python\nDESCRIPTION: This snippet describes generating a stacked area plot with Cufflinks. It notes the conversion of NaN to 0 and advises on using dropna or fillna for specific data filling. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.random.rand(10, 4), columns=['a', 'b', 'c', 'd'])\n```\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='area', fill=True, filename='cuflinks/stacked-area')\n```\n\n----------------------------------------\n\nTITLE: Plotting Normal Distribution PDFs with Plotly\nDESCRIPTION: Creates and plots two normal probability distribution functions using Plotly's Scatter plots, showing distributions with different means.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(-4, 4, 160)\ny1 = scipy.stats.norm.pdf(x)\ny2 = scipy.stats.norm.pdf(x, loc=2)\n\ntrace1 = go.Scatter(\n    x = x,\n    y = y1,\n    mode = 'lines+markers',\n    name='Mean of 0'\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = y2,\n    mode = 'lines+markers',\n    name='Mean of 2'\n)\n\ndata = [trace1, trace2]\n\npy.iplot(data, filename='normal-dists-plot')\n```\n\n----------------------------------------\n\nTITLE: Generating On-the-Fly Images for Plotly Graph Reports in Python\nDESCRIPTION: Creates a report with Plotly graphs generated on-the-fly rather than using pre-created graphs. Uses plotly.image.get to generate base64-encoded PNG images from figure objects and embeds them in an HTML template.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport base64\n\nwidth = 600\nheight = 600\n\ntemplate = (''\n    '<img style=\"width: {width}; height: {height}\" src=\"data:image/png;base64,{image}\">' \n    '{caption}'                              # Optional caption to include below the graph\n    '<br>'\n    '<hr>'\n'')\n\n# A collection of Plotly graphs\nfigures = [\n    {'data': [{'x': [1,2,3], 'y': [3,1,6]}], 'layout': {'title': 'the first graph'}},\n    {'data': [{'x': [1,2,3], 'y': [3,7,6], 'type': 'bar'}], 'layout': {'title': 'the second graph'}}\n]\n\n# Generate their images using `py.image.get`\nimages = [base64.b64encode(py.image.get(figure, width=width, height=height)).decode('utf-8') for figure in figures]\n\nreport_html = ''\nfor image in images:\n    _ = template\n    _ = _.format(image=image, caption='', width=width, height=height)\n    report_html += _\n\ndisplay(HTML(report_html))\nconvert_html_to_pdf(report_html, 'report-2.pdf')\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Image in IPython Notebook\nDESCRIPTION: Embeds a GIF image in the notebook using HTML markup to demonstrate the widget functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/filter_example.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%%html\n<img src=\"https://cloud.githubusercontent.com/assets/12302455/16568848/46acc124-41fd-11e6-95e4-10e7dad66fe3.gif\">\n```\n\n----------------------------------------\n\nTITLE: Generating Contour Plot\nDESCRIPTION: Creating and displaying the contour plot using Plotly with custom styling and layout options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntitle=\"Contourplot of a triangular Bezier function\"\ndata = Data([\n    Contour(\n        z=ZZ,\n        x=x, \n        y=y,\n        autocontour=False,\n        zauto=False,  \n        contours=Contours(\n            showlines=False,    \n            start =min(Z),   \n            end=max(Z),\n            size=0.1\n        ),    \n        colorscale=viridisCS, \n    ),\n    ])\nlayout = Layout(\n    title= title,  \n    font= Font(family='Georgia, serif',  color='#635F5D'),\n    showlegend=False,\n    autosize=False,\n    width=500,\n    height=500,\n    xaxis=XAxis(\n        range=[min(x), max(x)],\n        showgrid=False,\n    ),\n    yaxis=YAxis(\n        range=[min(y), max(y)],\n        showgrid=False,\n    ),\n    margin=Margin(\n        l=40,\n        r=40,\n        b=85,\n        t=100,\n        pad=0,\n        autoexpand=True\n    ),\n    )\nfig = Figure(data=data, layout=layout)\npy.iplot(fig, filename='Contourplot-triangular-Bezier-graph4')\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Cufflinks in Python\nDESCRIPTION: This code shows how to use the iplot method on a DataFrame to create a grouped bar chart with Cufflinks, specifying the kind and filename. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='bar', filename='cufflinks/grouped-bar-chart')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colorscale for Plotly Contour Plot in Python\nDESCRIPTION: This code defines a custom colorscale named 'cubehelix_cs' for use in Plotly contour plots, specifying color values for different intensity levels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncubehelix_cs=[[0.0, '#fcf9f7'],\n [0.16666666666666666, '#edcfc9'],\n [0.3333333333333333, '#daa2ac'],\n [0.5, '#bc7897'],\n [0.6666666666666666, '#925684'],\n [0.8333333333333333, '#5f3868'],\n [1.0, '#2d1e3e']]\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into Spark DataFrame\nDESCRIPTION: Loads bike rental data from a JSON file into a Spark DataFrame using SQLContext.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbtd = sqlContext.jsonFile(\"btd2.json\")\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Visualization with Color Scales\nDESCRIPTION: Generates a scatter plot using interpolated color scales with Plotly, demonstrating color scale application in data visualization\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\nimport math\n\nun='IPython.Demo'; k='1fw3zw2o13'; py.sign_in(un,k);\n\ndata = Data([ Scatter(\n    x = [ i * 0.1 for i in range(500) ],\n    y = [ math.sin(j * 0.1) for j in range(500) ],\n    mode='markers',\n    marker=Marker(color=bupu500,size=22.0,line=Line(color='black',width=2)),\n    text = cl.to_rgb( bupu500 ),\n    opacity = 0.7\n)])\nlayout = Layout( showlegend=False, xaxis=XAxis(zeroline=False), yaxis=YAxis(zeroline=False) )\nfig = Figure(data=data, layout=layout)\npy.iplot(fig, filename='spectral_bubblechart')\n```\n\n----------------------------------------\n\nTITLE: Importing igraph Library for Network Analysis in Python\nDESCRIPTION: Imports the igraph library which is used for high-performance graph generation and analysis. This library is required for creating and manipulating the network structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean of Simulated Poisson Values in Python\nDESCRIPTION: This code calculates the mean of simulated Poisson values to estimate the expected value of the negative binomial distribution. The numpy mean function is used here, and the result should be close to the theoretical expected value calculated using the formula for the negative binomial distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsim_vals.mean()\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Parameter Visualization (Precision)\nDESCRIPTION: Creates a time series scatter plot and histogram for the precision parameter from the MCMC trace. These visualizations help assess convergence and the posterior distribution of the parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ntrace5 = pgo.Scatter(\n    y=trace_tuned.T[2],\n    xaxis='x5',\n    yaxis='y5',\n    line=pgo.Line(width=0.5),\n    marker=pgo.Marker(color=color)\n)\n\ntrace6 = pgo.Histogram(\n    x=trace_tuned.T[2],\n    xaxis='x6',\n    yaxis='y6',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Plotly Documentation\nDESCRIPTION: Sets up the documentation environment and publishes the notebook with specific metadata and styling configurations for the Plotly documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/iso-surface/isosurfaces.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'isosurfaces.ipynb', 'python/3d-isosurface-plots/', 'Iso Surface',\n    'How to make 3D Isosurface Plots in Python with Plotly.',\n    title = 'Python 3D Isosurface Plots | plotly',\n    name = '3D Isosurface Plots',\n    has_thumbnail='true', thumbnail='thumbnail/isosurface.jpg', \n    redirect_from='python/isosurfaces-with-marching-cubes/',\n    language='python',\n    display_as='3d_charts', order=12.1,\n    ipynb= '~notebook_demo/272')\n```\n\n----------------------------------------\n\nTITLE: Plotting Secret Graphs with URL\nDESCRIPTION: Demonstrates plotting secret graphs that can be viewed by anyone with the link.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-secret', sharing='secret')\n```\n\n----------------------------------------\n\nTITLE: Publishing Trisurf Documentation with Plotly Publisher\nDESCRIPTION: Sets up and publishes the trisurf notebook as documentation on the Plotly website. The code customizes the display styling and uses the publisher module to specify metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'trisurf.ipynb', 'python/trisurf/', 'Trisurf Plots',\n    'How to make tri-surf plots in Python with Plotly. Trisurfs are formed by replacing the boundaries of a compact surface by touching triangles.',\n    title = 'Python Trisurf Plots | plotly',\n    name = 'Trisurf Plots',\n    has_thumbnail='true', thumbnail='thumbnail/tri-surf2.jpg', \n    language='python',\n    display_as='3d_charts', order=10,\n    ipynb= '~notebook_demo/70')  \n```\n\n----------------------------------------\n\nTITLE: Performing Time-frequency Analysis\nDESCRIPTION: Conducts time-frequency analysis using Morlet wavelets and visualizes power plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom mne.time_frequency import tfr_morlet\nfreqs = np.arange(6, 30, 3)  # define frequencies of interest\nn_cycles = freqs / 4.  # different number of cycle per frequency\n\npower = tfr_morlet(epochs, freqs=freqs, n_cycles=n_cycles, use_fft=False,\n                   return_itc=False, decim=3, n_jobs=1)\n\n# Inspect power\npower.plot_topo(baseline=(-0.5, 0), tmin=0, tmax=0.4, mode='logratio', title='Average power');\npower.plot([82], baseline=(-0.5, 0), tmin=0, tmax=0.4, mode='logratio');\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Animation Support\nDESCRIPTION: Simple version check to ensure Plotly version supports animations (required v1.12.10+)\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Plotly and ipywidgets\nDESCRIPTION: This snippet creates an interactive scatter plot using Plotly and ipywidgets. It reads car data from a CSV file, creates a scatter plot of 'City mpg' vs. 'Torque', adds some random noise to the data points, and sets the opacity of the markers.  The `init_notebook_mode()` function ensures that Plotly plots are rendered correctly in the Jupyter Notebook environment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/hover scratch.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport numpy as np\nfrom ipywidgets import interactive, HBox, VBox\npy.init_notebook_mode()\n\ndf = pd.read_csv('https://raw.githubusercontent.com/jonmmease/plotly_ipywidget_notebooks/master/notebooks/data/cars/cars.csv')\n\nf = go.FigureWidget([go.Scatter(y = df['City mpg'], x = df['Torque'], mode = 'markers')])\nscatter = f.data[0]\nN = len(df)\nscatter.x = scatter.x + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())\nscatter.y = scatter.y + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())\nscatter.marker.opacity = 0.5\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bar Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a simple bar chart using Plotly's graph objects. It creates two bar traces and sets a layout with a title.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import *\npy.iplot({\n    'data': [\n        Bar(**{\n            'x': [1, 2, 3],\n            'y': [3, 1, 5],\n            'name': 'first trace',\n            'type': 'bar'\n        }),\n        Bar(**{\n            'x': [1, 2, 3],\n            'y': [4, 3, 6],\n            'name': 'second trace',\n            'type': 'bar'\n        })\n    ],\n    'layout': Layout(**{\n        'title': 'simple example'\n    })\n}, filename='cufflinks/simple-plotly-example')\n```\n\n----------------------------------------\n\nTITLE: Displaying YouTube Video in IPython Notebook\nDESCRIPTION: This code embeds a YouTube video in the IPython notebook using the YouTubeVideo function from IPython.display. The video likely demonstrates how to edit a Plotly figure using the web GUI.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('zEKfPI3GtOw', width='100%', height='350')\n```\n\n----------------------------------------\n\nTITLE: Implementing Kernel Density Estimation Function in Python\nDESCRIPTION: This function 'kde_scipy' calculates the kernel density estimation for two variables using scipy.stats.gaussian_kde and returns data suitable for Plotly contour plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef kde_scipy( vals1, vals2, (a,b), (c,d), N ):\n    \n    #vals1, vals2 are the values of two variables (columns)\n    #(a,b) interval for vals1; usually larger than (np.min(vals1), np.max(vals1))\n    #(c,d) -\"-          vals2 \n    \n    x=np.linspace(a,b,N)\n    y=np.linspace(c,d,N)\n    X,Y=np.meshgrid(x,y)\n    positions = np.vstack([Y.ravel(), X.ravel()])\n\n    values = np.vstack([vals1, vals2])\n    kernel = st.gaussian_kde(values)\n    Z = np.reshape(kernel(positions).T, X.shape)\n    \n    return [x, y, Z]\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Range Slider with Plotly FigureWidget\nDESCRIPTION: Creates an interactive plot with a single slider to control the x-axis range. Uses FloatRangeSlider from ipywidgets to create a continuous range selector that updates the plot's x-axis bounds in real-time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/slider-widget.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly\n\nfrom ipywidgets import interactive, HBox, VBox, widgets, interact\n\npy.init_notebook_mode()\n\n# load fig\nfig = plotly.plotly.get_figure(\"https://plotly.com/~jordanpeterson/889\")\n\n# find the range of the slider.\nxmin, xmax = fig['layout']['xaxis']['range']\n\n# create FigureWidget from fig\nf = go.FigureWidget(data=fig.data, layout=fig.layout)\n\nslider = widgets.FloatRangeSlider(\n    min=xmin,\n    max=xmax,\n    step=(xmax - xmin) / 1000.0,\n    readout=False,\n    description='Time')\nslider.layout.width = '800px'\n\n\n# our function that will modify the xaxis range\ndef update_range(y):\n    f.layout.xaxis.range = [y[0], y[1]]\n\n\n# display the FigureWidget and slider with center justification\nvb = VBox((f, interactive(update_range, y=slider)))\nvb.layout.align_items = 'center'\nvb\n```\n\n----------------------------------------\n\nTITLE: Adding Coastlines and Boundaries - Python\nDESCRIPTION: This snippet provides functions to draw coastlines and country boundaries using Basemap, converting the geographical data into suitable formats for Plotly visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Make shortcut to Basemap object, \n# not specifying projection type for this example\nm = Basemap() \n\n# Make trace-generating function (return a Scatter object)\ndef make_scatter(x,y):\n    return Scatter(\n        x=x,\n        y=y,\n        mode='lines',\n        line=Line(color=\"black\"),\n        name=' '  # no name on hover\n    )\n\n# Functions converting coastline/country polygons to lon/lat traces\ndef polygons_to_traces(poly_paths, N_poly):\n    ''' \n    pos arg 1. (poly_paths): paths to polygons\n    pos arg 2. (N_poly): number of polygon to convert\n    '''\n    traces = []  # init. plotting list \n\n    for i_poly in range(N_poly):\n        poly_path = poly_paths[i_poly]\n        \n        # get the Basemap coordinates of each segment\n        coords_cc = np.array(\n            [(vertex[0],vertex[1]) \n             for (vertex,code) in poly_path.iter_segments(simplify=False)]\n        )\n        \n        # convert coordinates to lon/lat by 'inverting' the Basemap projection\n        lon_cc, lat_cc = m(coords_cc[:,0],coords_cc[:,1], inverse=True)\n        \n        # add plot.ly plotting options\n        traces.append(make_scatter(lon_cc,lat_cc))\n     \n    return traces\n\n# Function generating coastline lon/lat traces\ndef get_coastline_traces():\n    poly_paths = m.drawcoastlines().get_paths() # coastline polygon paths\n    N_poly = 91  # use only the 91st biggest coastlines (i.e. no rivers)\n    return polygons_to_traces(poly_paths, N_poly)\n\n# Function generating country lon/lat traces\ndef get_country_traces():\n    poly_paths = m.drawcountries().get_paths() # country polygon paths\n    N_poly = len(poly_paths)  # use all countries\n    return polygons_to_traces(poly_paths, N_poly)\n\n# Get list of of coastline and country lon/lat traces\ntraces_cc = get_coastline_traces()+get_country_traces()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Cmocean Colorscales in Python\nDESCRIPTION: This snippet imports the necessary libraries for working with Plotly, cmocean, and numpy. It also includes imports for file handling and graph object creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/cmocean.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\nimport cmocean\n\nimport numpy as np\nimport os\n```\n\n----------------------------------------\n\nTITLE: Embedding a Dash Time Series Application in Python using IFrame\nDESCRIPTION: This code demonstrates how to embed a Dash time series dashboard application using an IFrame in a Jupyter notebook. Dash is an open-source Python library that helps convert Plotly figures into reactive web-based applications.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-timeseriesplot/\", width=\"100%\", height=\"750px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Z Values for Surface Plots\nDESCRIPTION: Computes two sets of z-values using trigonometric functions to create two different surface plots for comparison.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nZ1 = np.cos(X)*np.sin(Y)\nZ2 = 2 + np.cos(X)*np.sin(Y)\n```\n\n----------------------------------------\n\nTITLE: Batch Converting All Plots to Private with Plotly REST API\nDESCRIPTION: Implements functions to fetch all plots for a user and update their visibility settings to private using Plotly's REST API. This allows for bulk privacy changes to existing plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_pages(username, page_size):\n    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&filetype=plot&page_size='+str(page_size)\n    response = requests.get(url, auth=auth, headers=headers)\n    if response.status_code != 200:\n        return\n    page = json.loads(response.content.decode('utf-8'))\n    yield page\n    while True:\n        resource = page['children']['next']\n        if not resource:\n            break\n        response = requests.get(resource, auth=auth, headers=headers)\n        if response.status_code != 200:\n            break\n        page = json.loads(response.content.decode('utf-8'))\n        yield page\n\ndef make_all_plots_private(username, page_size=500):\n    for page in get_pages(username, page_size):\n        for x in range(0, len(page['children']['results'])):\n            fid = page['children']['results'][x]['fid']\n            requests.patch('https://api.plot.ly/v2/files/'+fid, {\"world_readable\": False}, auth=auth, headers=headers)\n    print('ALL of your plots are now private - visit: https://plotly.com/organize/home to view your private plots!')\n\nmake_all_plots_private(username)\n```\n\n----------------------------------------\n\nTITLE: Filtering SQLite Query Results with WHERE Clause\nDESCRIPTION: Shows how to filter query results from a SQLite database using a WHERE clause to match specific values in a column.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'WHERE Agency = \"NYPD\" '\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Generating Weibull Distribution Data in Python\nDESCRIPTION: This code generates a 1D dataset from a Weibull Distribution using NumPy's random module. It creates 1000 samples and prints the first 10 values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/frequency-counts/python-Frequency-Counts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx=np.random.weibull(1.25, size=1000)\nprint(x[:10])\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Loading for Ring Cyclide\nDESCRIPTION: Imports required libraries and loads ring cyclide data from a JSON file. Creates copies of the data for different visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport math\nfrom plotly import tools\nimport copy\n\n\n#data related to the ring cyclide is loaded\n\nwith open('2381.json') as data_file:\n    fig = json.load(data_file)\n\n\ndata_original = fig['data'][0]     #this will be trace0\n\ndata = copy.deepcopy(fig['data'])[0]        #trace1\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Complex Layout for Plotly Subplots in Python\nDESCRIPTION: Defines another detailed layout for a Plotly figure with multiple subplots, including custom positioning, axis properties, annotations, and shape overlays.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlayout2 = dict(width=800, height=1000, autosize=False, title='Bitcoin transaction  summary for 180 days',\n    margin = dict(t=100, l=60,r=0),\n    showlegend=False,          \n    xaxis1=dict(axis, **dict(domain=[0.1,0.9], anchor= 'y1', showgrid=False, showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0.1,0.9], anchor= 'y2', showgrid=False, showticklabels=False)),\n    xaxis3=dict(axis, **dict(domain=[0.1,0.9], anchor= 'y3',showgrid=False, showticklabels=True)),           \n    yaxis1=dict(axis, **dict(domain=[0.28, 0.398],  anchor= 'x1', showgrid=False, hoverformat='d')), \n    yaxis2=dict(axis, **dict(domain=[0.14, 0.26],  anchor= 'x2', showgrid=False, tickprefix= u'\\u20BF', hoverformat='.2f')), \n     yaxis3=dict(axis, **dict(domain=[0, 0.12],  anchor= 'x3', showgrid=False, tickprefix='S', hoverformat='.2f')),            \n    plot_bgcolor='rgba(228, 222,249, 0.65)', \n    annotations=[dict(showarrow=False, \n            text='16 records around the date of september 3, 2017',  \n            xref='paper',     \n            yref='paper',     \n            x=0.2,  \n            y=1.01,  \n            xanchor='left',   \n            yanchor='bottom',  \n            font=dict(\n            size=15 ))], \n                \n    shapes=[dict(type='rect',\n                 xref='x3',\n                 yref='y3',\n            x0=df['Date'].iloc[-60],\n            y0=8,\n            x1=df['Date'].iloc[-43],\n            y1=53,\n            layer='below',\n            line=dict(color='rgba(235,193, 238, 0.9)', width=0.5),\n            fillcolor= 'rgba(235,193, 238, 0.9)'\n            ),\n           dict(type='rect',\n                 xref='x2',\n                 yref='y2',\n            x0=df['Date'].iloc[-60],\n            y0=3327226,\n            x1=df['Date'].iloc[-43],\n            y1=11801113,\n            layer='below',\n            line=dict(color='rgba(235,193, 238, 0.9)', width=0.5),\n            fillcolor= 'rgba(235,193, 238, 0.9)'\n            ),\n           dict(type='rect',\n                 xref='x1',\n                 yref='y1',\n            x0=df['Date'].iloc[-60],\n            y0=130875,\n            x1=df['Date'].iloc[-43],\n            y1=375098,\n            layer='below',\n            line=dict(color='rgba(235,193, 238, 1)', width=0.5),\n            fillcolor= 'rgba(235,193, 238, 1)'\n            )]         \n)\n\nfig2 = dict(data=[table_trace2, trace4, trace5, trace6], layout=layout2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Plot of Earthquake Magnitudes with Plotly in Python\nDESCRIPTION: This series of snippets creates a box plot of earthquake magnitudes using Plotly. It defines the data with jitter, creates a Figure object, and plots the box plot using py.iplot().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmag_jitter_plot = [{'y': df['mag'], \n                 'name': 'Earthquake Magnitude',\n                 'type': 'box',\n                 'boxpoints': 'outliers', \n                 'jitter': 0.9,\n}]\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_jitter = Data(mag_jitter_plot)\n\nfig_jitter = Figure(data=data_jitter)\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig_jitter, filename='boxplot_with_jitter')\n```\n\n----------------------------------------\n\nTITLE: One-Way ANOVA Implementation using Statsmodels\nDESCRIPTION: Performs one-way ANOVA analysis using Moore dataset from Statsmodels. Includes data preparation and model fitting using ordinary least squares regression.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/anova/python-Anova.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmoore = sm.datasets.get_rdataset(\"Moore\", \"car\", cache=True)\n\ndata = moore.data\ndata = data.rename(columns={\"partner.status\" :\"partner_status\"})  # make name pythonic\n\nmoore_lm = ols('conformity ~ C(fcategory, Sum)*C(partner_status, Sum)', data=data).fit()\ntable = sm.stats.anova_lm(moore_lm, typ=2) # Type 2 ANOVA DataFrame\n\nprint(table)\n```\n\n----------------------------------------\n\nTITLE: Creating Hover Text\nDESCRIPTION: Generates hover text for data points showing iris class.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntext=[df.loc[ k, 'class'] for k in range(len(df))]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Python and R\nDESCRIPTION: This snippet installs necessary Python and R packages for performing survival analysis and rendering plots using Plotly. It uses IPython magic commands to execute shell and R commands inline, ensuring that both lifelines and other interactive graphing packages like plotly are installed. The R devtools package is used to install Plotly for R from GitHub.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# You can also install packages from within IPython!\\n\\n# Install Python Packages\\n!pip install lifelines\\n!pip install rpy2\\n!pip install plotly\\n!pip install pandas\\n\\n# Load extension that let us use magic function `%R`\\n%load_ext rpy2.ipython\\n\\n# Install R packages\\n%R install.packages(\"devtools\")\\n%R devtools::install_github(\"plotly/plotly.R\")\\n%R install.packages(\"OIsurv\")\n```\n\n----------------------------------------\n\nTITLE: Generating Control Ribbons for Chord Connections in Python\nDESCRIPTION: Function that returns a 2-list containing control polygons for the quadratic Bézier curves that form the opposite sides of a ribbon connecting two arcs on the ideograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef ctrl_rib_chords(l, r, radius):\n    # this function returns a 2-list containing control poligons of the two quadratic Bezier\n    #curves that are opposite sides in a ribbon\n    #l (r) the list of angular variables of the ribbon arc ends defining \n    #the ribbon starting (ending) arc \n    # radius is a common parameter for both control polygons\n    if len(l)!=2 or len(r)!=2:\n        raise ValueError('the arc ends must be elements in a list of len 2')\n    return [control_pts([l[j], (l[j]+r[j])/2, r[j]], radius) for j in range(2)]\n```\n\n----------------------------------------\n\nTITLE: Version Check in Plotly\nDESCRIPTION: Simple code to check the installed version of Plotly library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Discretizing B&eacute;zier Surface Points\nDESCRIPTION: This function surface_points discretizes a B&eacute;zier surface of degree n by taking control points and barycenters to compute the surface coordinates for rendering.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef surface_points(n, b, barycenters):\n    points=[]\n    for weight in barycenters:\n        b_aux=np.array(b)\n        points.append(deCasteljau(n, b_aux, weight))\n    return zip(*points)\n```\n\n----------------------------------------\n\nTITLE: Creating Subplot Structure for Large Variance MCMC Visualization in Python\nDESCRIPTION: Creates a new subplot structure for organizing the large variance MCMC results visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfig6 = tls.make_subplots(3, 2)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Funnel Area Charts with Scale Groups in Plotly\nDESCRIPTION: Example demonstrating how to create multiple funnel area charts in a grid layout with scale groups to ensure proportional sizing between related charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\n\ntrace1 = go.Funnelarea(\n    scalegroup = \"first\", values = [500, 450, 340, 230, 220, 110], textinfo = \"value\",\n    title = {\"position\": \"top center\", \"text\": \"Sales for Sale Person A in U.S.\"}, \n    domain = {\"x\": [0, 0.5], \"y\": [0, 0.5]})\n\ntrace2 = go.Funnelarea(\n    scalegroup = \"first\", values = [600, 500, 400, 300, 200, 100], textinfo = \"value\",\n    title = {\"position\": \"top center\", \"text\": \"Sales of Sale Person B in Canada\"},\n    domain = {\"x\": [0, 0.5], \"y\": [0.55, 1]})\n\ntrace3 = go.Funnelarea(\n    scalegroup = \"second\", values = [510, 480, 440, 330, 220, 100], textinfo = \"value\", \n    title = {\"position\": \"top left\", \"text\": \"Sales of Sale Person A in Canada\"},\n    domain = {\"x\": [0.55, 1], \"y\": [0, 0.5]})\n\ntrace4 = go.Funnelarea(\n            scalegroup = \"second\", values = [360, 250, 240, 130, 120, 60],\n            textinfo = \"value\", title = {\"position\": \"top left\", \"text\": \"Sales of Sale Person B in U.S.\"},\n            domain = {\"x\": [0.55, 1], \"y\": [0.55, 1]})\n\nlayout = go.Layout(\n            margin = {\"l\": 200, \"r\": 200}, shapes = [\n            {\"x0\": 0, \"x1\": 0.5, \"y0\": 0, \"y1\": 0.5},\n            {\"x0\": 0, \"x1\": 0.5, \"y0\": 0.55, \"y1\": 1},\n            {\"x0\": 0.55, \"x1\": 1, \"y0\": 0, \"y1\": 0.5},\n            {\"x0\": 0.55, \"x1\": 1, \"y0\": 0.55, \"y1\": 1}])\n\npy.iplot(go.Figure([trace1, trace2, trace3, trace4], layout), filename = \"scale_group\")\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple code to check the installed version of Plotly library. Sunburst Charts require version 3.8+.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating Bar Object in Plotly Python\nDESCRIPTION: Shows how to create a Bar object and use the validate() method to check for valid attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Starting with a simple bar object\ntrace1 = Bar(\n    x=[1, 2, 3],\n    y=[2, 1, 1]\n)\n\ntrace1['fillcolor'] = 'red'\n\ntry:\n    trace1.validate()                        # check if valid!\nexcept Exception as validate_error_message:\n    print validate_error_message             # print error message\n```\n\n----------------------------------------\n\nTITLE: Setting Default Privacy for Future Plotly Graphs\nDESCRIPTION: Configures chart_studio to create private plots by default for all future plots, eliminating the need to specify sharing='private' with each plot creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nchart_studio.tools.set_config_file(world_readable=False, sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edges with Source, Target and Weight Values\nDESCRIPTION: This code defines the edges of a graph where each edge connects a source node to a target node with an associated weight value. The structure follows a consistent pattern where each edge is defined as a block with source, target, and value attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n  edge\n  [\n    source 769\n    target 767\n    value 0.333333\n  ]\n  edge\n  [\n    source 769\n    target 768\n    value 0.333333\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Violin Traces by Day\nDESCRIPTION: This code generates multiple violin plots showing the distribution of total bill values for each day of the week. It creates separate traces for each unique day value in the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\n\ndata = []\nfor i in range(0,len(pd.unique(df['day']))):\n    trace = {\n            \"type\": 'violin',\n            \"x\": df['day'][df['day'] == pd.unique(df['day'])[i]],\n            \"y\": df['total_bill'][df['day'] == pd.unique(df['day'])[i]],\n            \"name\": pd.unique(df['day'])[i],\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\n    data.append(trace)\n\n        \nfig = {\n    \"data\": data,\n    \"layout\" : {\n        \"title\": \"\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\n\n\npy.iplot(fig, filename='violin/multiple', validate = False)\n```\n\n----------------------------------------\n\nTITLE: Adding The Verge Logo to Existing Plotly Figure in Python\nDESCRIPTION: This code retrieves an existing figure, adds The Verge logo, and modifies the legend orientation. It demonstrates how to add a logo to the top of the chart and adjust legend properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nfig = py.get_figure('https://plotly.com/~Dreamshot/8158/')\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/theverge.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=1.0,\n        sizex=0.2, sizey=0.3,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\nfig.layout.legend.orientation = 'h'\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Apple_Labor_Violations_TheVerge')\n```\n\n----------------------------------------\n\nTITLE: Creating Output Directory for Plotly Image Exports\nDESCRIPTION: Creates a directory named 'images' to store exported Plotly figures if it doesn't already exist.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif not os.path.exists('images'):\n    os.mkdir('images')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Dependencies\nDESCRIPTION: Basic setup for importing required Plotly and Pandas libraries for 3D visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-hover/3d-hover-options.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Adding Scatter Plot to FigureWidget\nDESCRIPTION: Adds a scatter plot trace to an existing FigureWidget. This demonstrates how to add visualization elements to a FigureWidget dynamically.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf.add_scatter(y=[2, 1, 4, 3])\n```\n\n----------------------------------------\n\nTITLE: R Script for ggplot2 Plotting\nDESCRIPTION: This R code snippet retrieves GNI per capita data for Chile, Hungary, and Uruguay from the World Bank's WDI database and creates a ggplot2 plot showing the data over time. The `ggplotly` function converts the ggplot2 plot to an interactive Plotly plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nlibrary(WDI)\nlibrary(ggplot2)\n \n#Grab GNI per capita data for Chile, Hungary and Uruguay\n \ndat = WDI(indicator='NY.GNP.PCAP.CD', country=c('CL','HU','UY'), start=1960, end=2012)\n \n#a quick plot with legend, title and label\n \nwb <- ggplot(dat, aes(year, NY.GNP.PCAP.CD, color=country)) + geom_line() \n+     xlab('Year') + ylab('GDI per capita (Atlas Method USD)') \n+     labs(title <- \"GNI Per Capita ($USD Atlas Method)\")\n\nggplotly(wb)\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Categorical Dot Plot with Plotly in Python\nDESCRIPTION: This code creates a styled categorical dot plot showing voting data for OECD countries. It uses Plotly's graph objects to define detailed data traces and layout settings, including custom colors and marker styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/dot/dot.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ncountry = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)',\n           'United States (2012)', 'Slovenia (2014)', 'Canada (2011)',\n           'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)']\nvoting_pop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]\nreg_voters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]\n\ntrace0 = go.Scatter(\n    x=voting_pop,\n    y=country,\n    mode='markers',\n    name='Percent of estimated voting age population',\n    marker=dict(\n        color='rgba(156, 165, 196, 0.95)',\n        line=dict(\n            color='rgba(156, 165, 196, 1.0)',\n            width=1,\n        ),\n        symbol='circle',\n        size=16,\n    )\n)\ntrace1 = go.Scatter(\n    x=reg_voters,\n    y=country,\n    mode='markers',\n    name='Percent of estimated registered voters',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line=dict(\n            color='rgba(217, 217, 217, 1.0)',\n            width=1,\n        ),\n        symbol='circle',\n        size=16,\n    )\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title=\"Votes cast for ten lowest voting age population in OECD countries\",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        titlefont=dict(\n            color='rgb(204, 204, 204)'\n        ),\n        tickfont=dict(\n            color='rgb(102, 102, 102)',\n        ),\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(\n        l=140,\n        r=40,\n        b=50,\n        t=80\n    ),\n    legend=dict(\n        font=dict(\n            size=10,\n        ),\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='rgb(254, 247, 234)',\n    plot_bgcolor='rgb(254, 247, 234)',\n    hovermode='closest',\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='lowest-oecd-votes-cast')\n```\n\n----------------------------------------\n\nTITLE: Path Calculation and Click Response Implementation\nDESCRIPTION: Implements path calculation between points and click event handling for contour maps\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef march(x0, y0, x1, y1):\n    '''\n    Return the closest path of integer coordinates \n    between (x0, y0) and (x1, y1)\n    '''\n    if abs(x1-x0) > abs(y1-y0):    \n        if x1>x0:\n            x = range(int(x0), int(x1)+1)\n        else:\n            x = range(int(x0), int(x1)+1, -1)\n        y = []\n        tanth = (y1-y0)/(x1-x0)\n        for xi in x:\n            y.append(round(y0+(xi-x0)*tanth))\n    else:\n        if y1>y0:\n            y = range(int(y0), int(y1)+1)\n        else:\n            y = range(int(y0), int(y1)+1, -1)\n        x = []\n        tanth = (x1-x0)/(y1-y0)\n        for yi in y:\n            x.append(round(x0+(yi-y0)*tanth))\n\n    return (x, y)\n\nclass Responder(object):\n    '''\n    Stateful object that stores and computes the \n    elevation and distance data of the \n    line plot. The 'click' method is executed\n    on `click` events of the contour map.\n    '''\n    def __init__(self, data):\n        self.clicks = 0\n        self.x = []\n        self.y = []\n        self.xp = []\n        self.yp = []\n        self.z = []\n        self.d = []\n        self.data = data\n\n    def append_point(self, point):\n        print point\n        xp = point['pointNumber'][1]\n        yp = point['pointNumber'][0]\n        self.xp.append(xp)\n        self.yp.append(yp)\n\n        if 'x' in self.data[0]:\n            x = self.data[0]['x'][xp]\n        else:\n            x = xp\n        if 'y' in self.data[0]:\n            y = self.data[0]['y'][xp]\n        else:\n            y = yp\n\n        self.x.append(x)\n        self.y.append(y)\n        self.z.append(point['z'])\n    \n        if len(self.x) == 1:\n            self.d.append(0)\n        else:\n            self.d.append(math.sqrt((y-self.y[-2])**2+(x-self.x[-2])**2))\n        \n        \n    def click(self, contour_widget, click_obj):\n        print \"This is the clickobj\"\n        print click_obj\n        point = click_obj[0]\n        if self.clicks==0 or self.clicks > 5:\n            self.__init__(self.data)\n            self.append_point(point)\n        else:\n            \n            (xpath, ypath) = march(self.xp[-1], self.yp[-1],\n                                   point['pointNumber'][1], point['pointNumber'][0])\n    \n            d = []\n            z = []\n            for i in range(1, len(xpath)):\n                xpi = xpath[i]\n                ypi = ypath[i]\n\n                if 'x' in self.data[0]:\n                    xi = self.data[0]['x'][xpi]\n                else:\n                    xi = xpi\n                if 'y' in self.data[0]:\n                    yi = self.data[0]['y'][ypi]\n                else:\n                    yi = ypi\n                \n                self.d.append(self.d[-1]+math.sqrt((yi-self.y[-1])**2+(xi-self.x[-1])**2))\n                self.z.append(self.data[0]['z'][int(ypi)][int(xpi)])\n                self.x.append(xi)\n                self.y.append(yi)\n                self.xp.append(xpi)\n                self.yp.append(ypi)\n            \n\n        self.clicks+=1\n        \n        line_plot.restyle({'x': [self.d], 'y': [self.z]})\n\n    \nr = Responder(contour_data['data'])\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Contour Plot from Grid Data\nDESCRIPTION: Creates a 2D histogram contour plot using data referenced from a previously uploaded Plotly grid.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Histogram2dContour(\n        xsrc=grid[0],\n        ysrc=grid[1]\n    )\n]\n\npy.iplot(data, filename='2D Contour from Grid Data')\n```\n\n----------------------------------------\n\nTITLE: Function to Mix Two Lists of Points into a Final Grid\nDESCRIPTION: The grid function combines the base grid with the additional midpoints created by additional_weights to produce a final grid suitable for rendering the B&eacute;zier triangular patch.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef grid(m, weights, new_weights):\n    L=len(weights)\n    barycenters=[]\n    for  k in range(m):\n        L=2*k+1\n        enD=k**2+L \n        barycenters +=weights[k**2: enD] +new_weights[k**2: enD]\n    barycenters+=weights[m**2:]  \n    return barycenters\n```\n\n----------------------------------------\n\nTITLE: Populating Figure with Data for Plotly Animated Bubble Chart\nDESCRIPTION: This code populates the figure with data from the grid, setting up the initial state of the bubble chart. It uses referenced data from the grid for each continent and year.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncol_name_template = '{year}_{continent}_{header}_gapminder_grid'\nyear = 1952\nfor continent in continents:\n    data_dict = {\n        'xsrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='lifeExp'\n        )),\n        'ysrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='gdpPercap'\n        )),\n        'mode': 'markers',\n        'textsrc': grid.get_column_reference(col_name_template.format(\n            year=year, continent=continent, header='country'\n        )),\n        'marker': {\n            'sizemode': 'area',\n            'sizeref': 200000,\n            'sizesrc': grid.get_column_reference(col_name_template.format(\n                 year=year, continent=continent, header='pop'\n            )),\n            'color': custom_colors[continent]\n        },\n        'name': continent\n    }\n    figure['data'].append(data_dict)\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Range Slider with Plotly Chart\nDESCRIPTION: Creates an interactive plot with a single range slider that controls the x-axis range. Uses ipywidgets and Plotly's GraphWidget to create a responsive visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/slider_example.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport ipywidgets as widgets\n\nfrom ipywidgets import interact, interactive, fixed\nfrom IPython.core.display import HTML\nfrom IPython.display import display, clear_output\nfrom plotly.widgets import GraphWidget\n\n\nstyles = '''<style>.widget-hslider { width: 100%; }\n    .widget-hbox { width: 100% !important; }\n    .widget-slider { width: 100% !important; }</style>'''\n\nHTML(styles)\n\n#this widget will display our plotly chart\ngraph = GraphWidget(\"https://plotly.com/~jordanpeterson/889\")\nfig = py.get_figure(\"https://plotly.com/~jordanpeterson/889\")\n\n#find the range of the slider.\nxmin, xmax = fig['layout']['xaxis']['range']\n\n# use the interact decorator to tie a widget to the listener function\n@interact(y=widgets.FloatRangeSlider(min=xmin, max=xmax, step=(xmax-xmin)/1000.0, continuous_update=False))\ndef update_plot(y):\n    graph.relayout({'xaxis.range[0]': y[0], 'xaxis.range[1]': y[1]})\n    \n#display the app    \ngraph\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation for Plotly Images in Python\nDESCRIPTION: This code snippet is used to publish documentation for Plotly images. It sets up custom CSS, installs the publisher package, and calls the publish function with specific parameters for the 'images' documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'images.ipynb', 'python/images/', 'Layout with images',\n    'How to add images to charts as background images or logos.',\n    title = 'Layout with images | plotly',\n    name = 'Images',\n    has_thumbnail='true', thumbnail='thumbnail/images.png', \n    language='python',\n    display_as='file_settings', order=31,\n    ipynb= '~notebook_demo/216')\n```\n\n----------------------------------------\n\nTITLE: Removing Edit Chart Link in Plotly Python\nDESCRIPTION: Demonstrates how to remove the 'Edit Chart' link from a Plotly scatter plot using the showLink configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode()\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig={'showLink': False}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating Table from Local CSV\nDESCRIPTION: Reading local CSV data using pandas and creating a table visualization using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('sample-data.csv')\n\nsample_data_table = FF.create_table(df.head())\npy.iplot(sample_data_table, filename='sample-data-table')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plotly Graph Data and Layout in Python\nDESCRIPTION: Prepares the data and layout for the Plotly graph, including node colors, edge colors, and Bézier curve edges.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nnode_color=['rgba(0,51,181, 0.85)'  if v['label'] in Contestant else '#CCCCCC' for v in G.vs] \nline_color=['#FFFFFF'  if v['label'] in Contestant else 'rgb(150,150,150)' for v in G.vs]\n\nedge_colors=['#d4daff','#84a9dd', '#5588c8', '#6d8acf']\n\nXn=[layt[k][0] for k in range(L)]\nYn=[layt[k][1] for k in range(L)]\n\nlines=[]\nedge_info=[]\n\nfor j, e in enumerate(E):\n    A=np.array(layt[e[0]])\n    B=np.array(layt[e[1]])\n    d=dist(A, B)\n    K=get_idx_interv(d, Dist)\n    b=[A, A/params[K], B/params[K], B]\n    color=edge_colors[K]\n    pts=BezierCv(b, nr=5)\n    text=V[e[0]]['label']+' to '+V[e[1]]['label']+' '+str(Weights[j])+' pts'\n    mark=deCasteljau(b,0.9)\n    edge_info.append(Scatter(x=mark[0], \n                             y=mark[1], \n                             mode='markers', \n                             marker=Marker( size=0.5,  color=edge_colors),\n                             text=text, \n                             hoverinfo='text'\n                             )\n                    )\n    lines.append(Scatter(x=pts[:,0],\n                         y=pts[:,1],\n                         mode='lines',\n                         line=Line(color=color, \n                                  shape='spline',\n                                  width=Weights[j]/5#The  width is proportional to the edge weight\n                                 ), \n                        hoverinfo='none' \n                       )\n                )\n\ntrace2=Scatter(x=Xn,\n               y=Yn,\n               mode='markers',\n               name='',\n               marker=Marker(symbol='dot',\n                             size=15, \n                             color=node_color, \n                             line=Line(color=line_color, width=0.5)\n                             ),\n               text=labels,\n               hoverinfo='text',\n               )\n\naxis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title='' \n          )\n\ndef make_annotation(anno_text, y_coord):\n    return Annotation(showarrow=False, \n                      text=anno_text,  \n                      xref='paper',     \n                      yref='paper',     \n                      x=0,  \n                      y=y_coord,  \n                      xanchor='left',   \n                      yanchor='bottom',  \n                      font=Font(size=12)     \n                     )\n\nanno_text1='Blue nodes mark the countries that are both contestants and jury members'\nanno_text2='Grey nodes mark the countries that are only jury members'\nanno_text3='There is an edge from a Jury country to a contestant country '+\\\n           'if the jury country assigned at least one vote to that contestant'\nwidth=800\nheight=850\ntitle=\"A circular graph associated to Eurovision Song Contest, 2015<br>Data source:\"+\\\n\"<a href='http://www.eurovision.tv/page/history/by-year/contest?event=2083#Scoreboard'> [1]</a>\"\nlayout=Layout(title= title,\n              font= Font(size=12),\n              showlegend=False,\n              autosize=False,\n              width=width,\n              height=height,\n              xaxis=XAxis(axis),\n              yaxis=YAxis(axis),          \n              margin=Margin(l=40,\n                            r=40,\n                            b=85,\n                            t=100,\n                          ),\n              hovermode='closest',\n              annotations=Annotations([make_annotation(anno_text1, -0.07), \n              ])\n```\n\n----------------------------------------\n\nTITLE: Basic Range Slider with Time Series Data\nDESCRIPTION: Creates a time series plot with range slider and selector buttons for different time periods. Uses financial data from Apple stock to demonstrate basic range slider functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/range-slider/range-slider.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go \n\nfrom datetime import datetime\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\ndf.columns = [col.replace('AAPL.', '') for col in df.columns]\n\ntrace = go.Scatter(x=list(df.Date),\n                   y=list(df.High))\n\ndata = [trace]\nlayout = dict(\n    title='Time series with range slider and selectors',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=1,\n                    label='YTD',\n                    step='year',\n                    stepmode='todate'),\n                dict(count=1,\n                    label='1y',\n                    step='year',\n                    stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Publisher Configuration\nDESCRIPTION: Setup display settings and publish notebook configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'orca-management.ipynb', 'python/orca-management/', 'Orca Management | plotly',\n    'This section covers the low-level details of how plotly.py uses orca to perform static image generation.',\n    title = 'Orca Management | Plotly',\n    name = 'Orca Management',\n    thumbnail='thumbnail/orca-management.png',\n    language='python',\n    uses_plotly_offline=True,\n    has_thumbnail='true', display_as='file_settings', order=1.5,\n    ipynb='~notebook_demo/253')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Data Analysis\nDESCRIPTION: Imports the necessary Python libraries for data manipulation (pandas), database connection (sqlalchemy), date handling (datetime), and interactive graphing (plotly).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom sqlalchemy import create_engine # database connection\nimport datetime as dt\nfrom IPython.display import display\n\nimport plotly.plotly as py # interactive graphing\nimport plotly.graph_objs as go\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Bar Chart Source Code in IPython\nDESCRIPTION: This code snippet embeds the source code of a Dash bar chart application in an IPython notebook using an IFrame, allowing users to view the implementation details directly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-barplot/code\", width=\"80%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Exploring Cars Dataset with Pandas in Python\nDESCRIPTION: Imports pandas and loads a cars dataset CSV file, selecting specific columns for analysis. The sample() method is used to display a random selection of 5 rows.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objs as go\n\ncars_df = pd.read_csv('data/cars/cars.csv',\n                      usecols=['City mpg',\n                               'Fuel Type',\n                               'Horsepower',\n                               'Model Year',\n                               'Torque', 'Hybrid', 'ID'])\ncars_df.sample(5)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Candlestick Code Example in IPython\nDESCRIPTION: Shows how to embed the source code of a Dash candlestick application in an IPython notebook using an IFrame. This displays the code that powers the Dash application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-candlestickplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Apple Stock Data\nDESCRIPTION: Imports Apple stock price data from 2014 using Pandas and creates a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napple_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\ndf = apple_data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='apple-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Offline Plotting with plotly.io.write_html()\nDESCRIPTION: Python example of creating a scatter plot and saving it as a standalone HTML file using write_html(). This method allows offline plotting without requiring a Chart Studio account.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nimport plotly.io as pio\n\nfig = go.Figure(go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1]))\nfig.update_layout(title_text='hello world')\npio.write_html(fig, file='hello_world.html', auto_open=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Pie Chart Source Code in IPython\nDESCRIPTION: This snippet shows how to display the source code of a Dash pie chart example in an IPython notebook using an IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-pieplot/code\", width=\"100%\", height=500 ,frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Subplot Figure for Small Variance Run in Python\nDESCRIPTION: Adds the combined data object to the subplot figure for the small variance MCMC run visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfig5['data'] += data5\n```\n\n----------------------------------------\n\nTITLE: Embedding Another Vine Animation in Notebook Using HTML\nDESCRIPTION: Embeds another interactive Vine animation demonstrating Plotly's visualization capabilities using an HTML iframe.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nHTML('<center><iframe class=\"vine-embed\" src=\"https://vine.co/v/M6JBhdiqPqA/embed/simple\" width=\"600\" height=\"600\" frameborder=\"0\"></iframe><script async src=\"//platform.vine.co/static/scripts/embed.js\" charset=\"utf-8\"></script></center>')\n```\n\n----------------------------------------\n\nTITLE: Function to Compute Additional Weights for Triangular Grid\nDESCRIPTION: Defines additional_weights to compute and return midpoints between given weight points to enrich the grid structure used for the B&eacute;zier surface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef additional_weights(m, weights):\n    wei=map(np.array, weights)\n    new_weights=[]\n    a=0\n    for k in range(1, m+1):\n        for j in range(1,2*k):\n            new_weights.append((wei[a]+wei[a+2*k])/2)\n            a=a+1\n    return list(map(tuple, new_weights))\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots of User Preferences with Plotly\nDESCRIPTION: Python code that generates a series of box plots using Plotly to visualize the distribution of user preferences across different entertainment categories. The code iterates through each preference column in the dataframe.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Declared User Preference Box Plots\", \n                yaxis=dict())\n\ndata = []\nfor pref in df.drop('state', axis=1).columns:\n    # for every preference type, make a box plot\n    data.append(go.Box(y=df[pref], name=pref)) \n    \npy.iplot(go.Figure(data=data, layout=layout), filename='redshift/user preference box plots')\n```\n\n----------------------------------------\n\nTITLE: Defining Plotly Graph URLs for Email Inclusion\nDESCRIPTION: Creates a list of public Plotly graph URLs that will be included in the email. These URLs point to pre-existing Plotly graphs that can also be generated programmatically using py.plot().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# The public plotly graphs to include in the email. These can also be generated with `py.plot(figure, filename)`\ngraphs = [\n    'https://plotly.com/~christopherp/308',\n    'https://plotly.com/~christopherp/306',\n    'https://plotly.com/~christopherp/300',\n    'https://plotly.com/~christopherp/296'\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up NetworkX Graph\nDESCRIPTION: Initializes a directed graph using NetworkX and adds nodes and edges from Eurovision voting data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nG=nx.DiGraph()\nG.add_nodes_from(range(L))\nG.add_edges_from(E)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-scatter/scattercarpet.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Implementing Bézier Curve Functions in Python\nDESCRIPTION: Defines functions to compute Bézier curves for graph edges, including distance calculation and de Casteljau's algorithm.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\ndef dist (A,B):\n    return np.linalg.norm(np.array(A)-np.array(B))\n\nDist=[0, dist([1,0], 2*[np.sqrt(2)/2]), np.sqrt(2),\n      dist([1,0],  [-np.sqrt(2)/2, np.sqrt(2)/2]), 2.0]\n\nparams=[1.2, 1.5, 1.8, 2.1]\n\ndef get_idx_interv(d, D):\n    k=0\n    while(d>D[k]): \n        k+=1\n    return  k-1\n\nclass InvalidInputError(Exception):\n    pass\n\ndef deCasteljau(b,t): \n    N=len(b) \n    if(N<2):\n        raise InvalidInputError(\"The  control polygon must have at least two points\")\n    a=np.copy(b) #shallow copy of the list of control points \n    for r in range(1,N): \n        a[:N-r,:]=(1-t)*a[:N-r,:]+t*a[1:N-r+1,:]                             \n    return a[0,:]\n\ndef BezierCv(b, nr=5):\n    t=np.linspace(0, 1, nr)\n    return np.array([deCasteljau(b, t[k]) for k in range(nr)])\n```\n\n----------------------------------------\n\nTITLE: Defining Posterior Function for Bioassay Model\nDESCRIPTION: Defines the log posterior function for the bioassay model using binomial likelihood with a logit link function and normal priors. This function is used for MCMC sampling in the bioassay analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import distributions\ndbin = distributions.binom.logpmf\ndnorm = distributions.norm.logpdf\n\ninvlogit = lambda x: 1./(1 + np.exp(-x))\n\ndef calc_posterior(a, b, y=deaths, x=log_dose):\n\n    # Priors on a,b\n    logp = dnorm(a, 0, 10000) + dnorm(b, 0, 10000)\n    # Calculate p\n    p = invlogit(a + b*np.array(x))\n    # Data likelihood\n    logp += sum([dbin(yi, n, pi) for yi,pi in zip(y,p)])\n    \n    return logp\n```\n\n----------------------------------------\n\nTITLE: Getting Plotly Figure Data\nDESCRIPTION: This code snippet retrieves the data associated with a Plotly figure object. This data can then be used for further analysis or visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nggplot_data = ggplot.get_data()\n```\n\n----------------------------------------\n\nTITLE: Creating Points Changing Size Animation\nDESCRIPTION: Example of creating an animation where points change size and color over time. Shows advanced usage of frames and marker properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nimport time\n\ncolumn_1 = Column([0.9, 1.1], 'x')\ncolumn_2 = Column([1.0, 1.0], 'y')\ncolumn_3 = Column([0.8, 1.2], 'x2')\ncolumn_4 = Column([1.2, 0.8], 'y2')\ncolumn_5 = Column([0.7, 1.3], 'x3')\ncolumn_6 = Column([0.7, 1.3], 'y3')\ncolumn_7 = Column([0.6, 1.4], 'x4')\ncolumn_8 = Column([1.5, 0.5], 'y4')\ncolumn_9 = Column([0.4, 1.6], 'x5')\ncolumn_10 = Column([1.2, 0.8], 'y5')\n\ngrid = Grid([column_1, column_2, column_3, column_4, column_5,\n             column_6, column_7, column_8, column_9, column_10])\npy.grid_ops.upload(grid, 'points_changing_size_grid'+str(time.time()), auto_open=False)\n\n# create figure\nfigure = {\n    'data': [\n        {\n            'xsrc': grid.get_column_reference('x'),\n            'ysrc': grid.get_column_reference('y'),\n            'mode': 'markers',\n            'marker': {'color': '#48186a', 'size': 10}\n        }\n    ],\n    'layout': {'title': 'Growing Circles',\n               'xaxis': {'range': [0, 2], 'autorange': False},\n               'yaxis': {'range': [0, 2], 'autorange': False},\n               'updatemenus': [{\n                   'buttons': [\n                       {'args': [None],\n                        'label': 'Play',\n                        'method': 'animate'}\n               ],\n               'pad': {'r': 10, 't': 87},\n               'showactive': False,\n               'type': 'buttons'\n                }]},\n    'frames': [\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x2'),\n                    'ysrc': grid.get_column_reference('y2'),\n                    'mode': 'markers',\n                    'marker': {'color': '#3b528b', 'size': 25}\n                }\n            ]\n        },\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x3'),\n                    'ysrc': grid.get_column_reference('y3'),\n                    'mode': 'markers',\n                    'marker': {'color': '#26828e', 'size': 50}\n                }\n            ]\n        },\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x4'),\n                    'ysrc': grid.get_column_reference('y4'),\n                    'mode': 'markers',\n                    'marker': {'color': '#5ec962', 'size': 80}\n                }\n            ]\n        },\n        {\n            'data': [\n                {\n                    'xsrc': grid.get_column_reference('x5'),\n                    'ysrc': grid.get_column_reference('y5'),\n                    'mode': 'markers',\n                    'marker': {'color': '#d8e219', 'size': 100}\n                }\n            ]\n        }\n    ]\n}\npy.icreate_animations(figure, 'points_changing_size'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes and Layout for Density of States Plot\nDESCRIPTION: Configures the appearance of axes and general layout for the density of states plot, including titles, grid lines, tick marks, and range settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndosxaxis = go.XAxis(\n    title=\"Density of states\",\n    showgrid=True,\n    showline=True,\n    range=[.01, 3],\n    mirror=\"ticks\",\n    ticks=\"inside\",\n    linewidth=2,\n    tickwidth=2\n)\ndosyaxis = go.YAxis(\n    title=\"$E - E_f \\\\quad / \\\\quad \\\\text{eV}$\",\n    showgrid=True,\n    showline=True,\n    ticks=\"inside\",\n    mirror='ticks',\n    linewidth=2,\n    tickwidth=2,\n    zerolinewidth=2\n)\ndoslayout = go.Layout(\n    title=\"Density of states of Silicon\",\n    xaxis=dosxaxis,\n    yaxis=dosyaxis\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting Normal Curve Distribution in Plotly\nDESCRIPTION: Shows how to create a distribution plot with a normal distribution curve overlay. This example uses the curve_type parameter set to 'normal' to display the theoretical normal distribution alongside the histogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(200)  \nx2 = np.random.randn(200) + 2    \nhist_data = [x1, x2]\n\ngroup_labels = ['Group 1', 'Group 2']\n\ncolors = ['#3A4750', '#F64E8B']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.5, curve_type='normal', colors=colors)\n\n# Add title\nfig['layout'].update(title='Distplot with Normal Distribution')\n\n# Plot!\npy.iplot(fig, filename='Distplot with Normal Curve')\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Figure Data\nDESCRIPTION: This code snippet displays the data that was retrieved from a Plotly figure. It is a simple command that renders data structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nggplot_data\n```\n\n----------------------------------------\n\nTITLE: Displaying WebPlotDigitizer Interface Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of the WebPlotDigitizer tool interface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nImage (url = 'https://i.imgur.com/y4t5hdj.png')\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Table and Chart Layout\nDESCRIPTION: This code creates a layout with a table below and chart above. It demonstrates creating a table with hockey statistics, adding bar charts for goals metrics, and configuring the subplot layout with vertical arrangement. It also adjusts height and margins for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Add table data\ntable_data = [['Team', 'Wins', 'Losses', 'Ties'],\n              ['Montréal<br>Canadiens', 18, 4, 0],\n              ['Dallas Stars', 18, 5, 0],\n              ['NY Rangers', 16, 5, 0], \n              ['Boston<br>Bruins', 13, 8, 0],\n              ['Chicago<br>Blackhawks', 13, 8, 0],\n              ['Ottawa<br>Senators', 12, 5, 0]]\n\n# Initialize a figure with ff.create_table(table_data)\nfigure = ff.create_table(table_data, height_constant=60)\n\n# Add graph data\nteams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',\n         'Boston Bruins', 'Chicago Blackhawks', 'Ottawa Senators']\nGFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]\nGAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]\n\n# Make traces for graph\ntrace1 = go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#0099ff'),\n                name='Goals For<br>Per Game')\ntrace2 = go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',\n                marker=dict(color='#404040'),\n                name='Goals Against<br>Per Game')\n\n# Add trace data to figure\nfigure.add_traces([trace1, trace2])\n\n# initialize xaxis2 and yaxis2\nfigure['layout']['xaxis2'] = {}\nfigure['layout']['yaxis2'] = {}\n\n# Edit layout for subplots\nfigure.layout.yaxis.update({'domain': [0, .45]})\nfigure.layout.yaxis2.update({'domain': [.6, 1]})\n\n# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa\nfigure.layout.yaxis2.update({'anchor': 'x2'})\nfigure.layout.xaxis2.update({'anchor': 'y2'})\nfigure.layout.yaxis2.update({'title': 'Goals'})\n\n# Update the margins to add a title and see graph x-labels. \nfigure.layout.margin.update({'t':75, 'l':50})\nfigure.layout.update({'title': '2016 Hockey Stats'})\n\n# Update the height because adding a graph vertically will interact with\n# the plot height calculated for the table\nfigure.layout.update({'height':800})\n\n# Plot!\npy.iplot(figure, filename='subplot_table_vertical')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Graphs as Inline Images with Base64 Encoding\nDESCRIPTION: Fetches Plotly graph images and converts them to base64-encoded strings for inline embedding in HTML emails. This approach allows sharing graphs outside a private network and ensures complete privacy since the images are embedded directly in the email body.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport base64\n\ntemplate = (''\n    '<img src=\"data:image/png;base64,{image}\">' \n    '{caption}'                              # Optional caption to include below the graph\n    '<br>'\n    '<hr>'\n'')\n\nemail_body = ''\nfor graph_url in graphs:\n    response = requests.get(graph_url + '.png') # request Plotly for the image\n    response.raise_for_status()\n    image_bytes = response.content\n    image = base64.b64encode(image_bytes).decode(\"ascii\")\n    _ = template\n    _ = _.format(image=image, caption='')\n    email_body += _\n\ndisplay(HTML(email_body))\n```\n\n----------------------------------------\n\nTITLE: Displaying Bicycle Model Diagram using IPython\nDESCRIPTION: This code snippet uses IPython.display to show an SVG diagram of the bicycle model, illustrating the essential components and variables used in the mathematical model.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import SVG\nSVG('model-diagram.svg')\n```\n\n----------------------------------------\n\nTITLE: Converting HTML Reports to PDF with xhtml2pdf in Python\nDESCRIPTION: Defines a utility function to convert HTML content to PDF using xhtml2pdf, then converts the static report to a PDF file. The function writes the PDF to disk and opens it automatically.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom xhtml2pdf import pisa\n\n# Utility function\ndef convert_html_to_pdf(source_html, output_filename):\n    # open output file for writing (truncated binary)\n    result_file = open(output_filename, \"w+b\")\n\n    # convert HTML to PDF\n    pisa_status = pisa.CreatePDF(\n            source_html,                # the HTML to convert\n            dest=result_file)           # file handle to recieve result\n\n    # close output file\n    result_file.close()                 # close output file\n\n    # return True on success and False on errors\n    return pisa_status.err\n\nconvert_html_to_pdf(static_report, 'report.pdf')\n\n! open report.pdf\n```\n\n----------------------------------------\n\nTITLE: Creating Zoomable Static Image Plot\nDESCRIPTION: Shows how to create a zoomable static image plot with preserved aspect ratio and hidden axes. Uses scatter points to enable autoscaling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/images/images.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimg_width = 1600\nimg_height = 900\nscale_factor = 0.5\n\nlayout = go.Layout(\n    xaxis = go.layout.XAxis(\n        visible = False,\n        range = [0, img_width*scale_factor]),\n    yaxis = go.layout.YAxis(\n        visible=False,\n        range = [0, img_height*scale_factor],\n        # the scaleanchor attribute ensures that the aspect ratio stays constant\n        scaleanchor = 'x'),\n    width = img_width*scale_factor,\n    height = img_height*scale_factor,\n    margin = {'l': 0, 'r': 0, 't': 0, 'b': 0},\n    images = [go.layout.Image(\n        x=0,\n        sizex=img_width*scale_factor,\n        y=img_height*scale_factor,\n        sizey=img_height*scale_factor,\n        xref=\"x\",\n        yref=\"y\",\n        opacity=1.0,\n        layer=\"below\",\n        sizing=\"stretch\",\n        source='https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg')]\n)\n# we add a scatter trace with data points in opposite corners to give the Autoscale feature a reference point\nfig = go.Figure(data=[{\n    'x': [0, img_width*scale_factor], \n    'y': [0, img_height*scale_factor], \n    'mode': 'markers',\n    'marker': {'opacity': 0}}],layout = layout)\npy.iplot(fig, filename='EXAMPLES/zoom_bridge')\n```\n\n----------------------------------------\n\nTITLE: Counting Nodes in Network Graph in Python\nDESCRIPTION: Retrieves the number of nodes in the graph from the loaded JSON data, which represents characters in Les Miserables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nN=len(data['nodes'])\nN\n```\n\n----------------------------------------\n\nTITLE: Monthly Time Series Data Sample\nDESCRIPTION: A dataset containing monthly dates from 1975 to 2007 with corresponding decimal values. The data appears to be truncated in the sample.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n75-01-31,4.0884895881769\\n75-02-28,4.12472893197371\\n75-03-31,4.1607724921156\\n...\n```\n\n----------------------------------------\n\nTITLE: Downloading Chart Studio Plots with api_download_plot in R\nDESCRIPTION: This snippet demonstrates how to download a Chart Studio figure directly into an R session using the api_download_plot() function. It requires the plotly library and takes two parameters: the plot_id and username of the plot's creator.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\nfig <- api_download_plot(\"559\", \"cpsievert\")\nfig\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap with Plotly in Python\nDESCRIPTION: This code creates a heatmap using Plotly to visualize a contingency table of vehicle types involved in accidents. It applies a log transformation to the data and uses a custom color scale for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncont_table = pd.crosstab(car_types['vehicle_type_code_1'], car_types['vehicle_type_code_2']).apply(np.log)\npy.iplot(Data([\n            Heatmap(z = cont_table.values, x=cont_table.columns, y=cont_table.index, colorscale='Jet')\n        ]),filename='nypd_crashes/vehicle to vehicle heatmap')\n```\n\n----------------------------------------\n\nTITLE: Zooming In on 3D Surface by Reducing Eye Vector Magnitude\nDESCRIPTION: Demonstrates how to zoom in on the 3D surface by reducing the magnitude of the eye vector to (0.1, 0.1, 1). This creates a closer view of the surface while maintaining a similar viewing angle.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nname = 'eye = (x:0.1, y:0.1, z:1)'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=0.1, y=0.1, z=1)\n)\n\nfig['layout'].update(\n    scene=dict(camera=camera),\n    title=name\n)\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots in Plotly\nDESCRIPTION: This code configures a Plotly figure to display data in three subplots using multiple y-axes. It modifies the `my_data` list to assign data to different y-axes (`yaxis2`, `yaxis3`), then defines a layout with corresponding y-axis configurations using `YAxis` and `Layout`. Finally, it creates a `Figure` object and displays it with `py.iplot()`.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmy_data[1]['yaxis'] = 'y2'\nmy_data[2]['yaxis'] = 'y3'\n\nlayout = Layout(\n    yaxis=YAxis(\n        domain=[0, 0.33]\n    ),\n    legend=Legend(\n        traceorder='reversed'\n    ),\n    yaxis2=YAxis(\n        domain=[0.33, 0.66]\n    ),\n    yaxis3=YAxis(\n        domain=[0.66, 1]\n    )\n)\n\nfig = Figure(data=my_data, layout=layout)\n\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Events with MNE and Plotly\nDESCRIPTION: Uses MNE's plot_events function to visualize the extracted events and converts the plot to an interactive Plotly visualization with event type labels as a legend.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nevent_ids = ['aud_l', 'aud_r', 'vis_l', 'vis_r', 'smiley', 'button']\nfig = mne.viz.plot_events(events, raw.info['sfreq'], raw.first_samp, show=False)\n\n# convert plot to plotly\nupdate = dict(layout=dict(showlegend=True), data=[dict(name=e) for e in event_ids])\npy.iplot_mpl(plt.gcf(), update=update)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Imports the Plotly library and displays the installed version number. This is important since distplots are only available in version 1.11.0 and higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Trace and Histogram Plots for Small Variance MCMC Results in Python\nDESCRIPTION: Creates Plotly graph objects for visualizing the MCMC traces and histograms for all three parameters (intercept, slope, precision) from the small variance run.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = pgo.Scatter(\n    y=trace.T[0],\n    xaxis='x1',\n    yaxis='y1',\n    marker=pgo.Marker(color=color)\n)\n\ntrace2 = pgo.Histogram(\n    x=trace.T[0],\n    xaxis='x2',\n    yaxis='y2',\n    marker=pgo.Marker(color=color)\n)\n\ntrace3 = pgo.Scatter(\n    y=trace.T[1],\n    xaxis='x3',\n    yaxis='y3',\n    marker=pgo.Marker(color=color)\n)\n\ntrace4 = pgo.Histogram(\n    x=trace.T[1],\n    xaxis='x4',\n    yaxis='y4',\n    marker=pgo.Marker(color=color)\n)\n\ntrace5 = pgo.Scatter(\n    y=trace.T[2],\n    xaxis='x5',\n    yaxis='y5',\n    marker=pgo.Marker(color=color)\n)\n\ntrace6 = pgo.Histogram(\n    x=trace.T[2],\n    xaxis='x6',\n    yaxis='y6',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphWidget Help Documentation\nDESCRIPTION: Shows the help documentation for the GraphWidget class used in the filtering example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/filter_example.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhelp(GraphWidget)\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Libraries in Python\nDESCRIPTION: Imports the required Plotly libraries for creating interactive visualizations, specifically the plotly.plotly module and graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py  \nfrom plotly.graph_objs import *\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Server Communication Module\nDESCRIPTION: Code to import the plotly.plotly module for server communication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# (*) How you communicate with Plotly's servers\nimport plotly.plotly as py\n```\n\n----------------------------------------\n\nTITLE: Generating Circular Layout for Graph in Python\nDESCRIPTION: Creates a circular layout for the graph nodes using igraph's layout function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayt=G.layout('circular') #circular layout\n\nL=len(layt)\nlayt[7]\n```\n\n----------------------------------------\n\nTITLE: HTML Image Tag for Display\nDESCRIPTION: HTML markup needed to display the exported static image on the webpage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/static-image-export/2016-05-20-static-image.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"jpg-export\"></img>\n```\n\n----------------------------------------\n\nTITLE: Embedding a Plotly Graph Post-Styling\nDESCRIPTION: This code snippet embeds a Plotly graph using its username and graph ID, presumably after the graph has been styled using the GUI. This shows the flexibility of the GUI-based styling and the ability to embed the styled graph.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('MattSundquist', '1404')\n```\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('MattSundquist', '1339')\n```\n\n----------------------------------------\n\nTITLE: Implementing Zipline Trading Algorithm\nDESCRIPTION: Defines a complete Zipline trading algorithm with initialization and trading logic for Markowitz portfolio optimization. Includes commission settings, history tracking, and rebalancing logic.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport zipline\nfrom zipline.api import (add_history, \n                         history, \n                         set_slippage, \n                         slippage,\n                         set_commission, \n                         commission, \n                         order_target_percent)\n\nfrom zipline import TradingAlgorithm\n\n\ndef initialize(context):\n    '''\n    Called once at the very beginning of a backtest (and live trading). \n    Use this method to set up any bookkeeping variables.\n    \n    The context object is passed to all the other methods in your algorithm.\n\n    Parameters\n\n    context: An initialized and empty Python dictionary that has been \n             augmented so that properties can be accessed using dot \n             notation as well as the traditional bracket notation.\n    \n    Returns None\n    '''\n    # Register history container to keep a window of the last 100 prices.\n    add_history(100, '1d', 'price')\n    # Turn off the slippage model\n    set_slippage(slippage.FixedSlippage(spread=0.0))\n    # Set the commission model (Interactive Brokers Commission)\n    set_commission(commission.PerShare(cost=0.01, min_trade_cost=1.0))\n    context.tick = 0\n    \ndef handle_data(context, data):\n    '''\n    Called when a market event occurs for any of the algorithm's \n    securities. \n\n    Parameters\n\n    data: A dictionary keyed by security id containing the current \n          state of the securities in the algo's universe.\n\n    context: The same context object from the initialize function.\n             Stores the up to date portfolio as well as any state \n             variables defined.\n\n    Returns None\n    '''\n    # Allow history to accumulate 100 days of prices before trading\n    # and rebalance every day thereafter.\n    context.tick += 1\n    if context.tick < 100:\n        return\n    # Get rolling window of past prices and compute returns\n    prices = history(100, '1d', 'price').dropna()\n    returns = prices.pct_change().dropna()\n    try:\n        # Perform Markowitz-style portfolio optimization\n        weights, _, _ = optimal_portfolio(returns.T)\n        # Rebalance portfolio accordingly\n        for stock, weight in zip(prices.columns, weights):\n            order_target_percent(stock, weight)\n    except ValueError as e:\n        # Sometimes this error is thrown\n        # ValueError: Rank(A) < p or Rank([P; A; G]) < n\n        pass\n        \n# Instantinate algorithm        \nalgo = TradingAlgorithm(initialize=initialize, \n                        handle_data=handle_data)\n# Run algorithm\nresults = algo.run(data)\nresults.portfolio_value.iplot(filename='algo_perf', yTitle='Cumulative capital in $', world_readable=True, asDates=True)\n```\n\n----------------------------------------\n\nTITLE: Converting Cmocean Colormap to Plotly Colorscale in Python\nDESCRIPTION: This function converts a cmocean colormap to a Plotly colorscale. It takes the colormap and the number of entries as input and returns a list of RGB values suitable for Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/cmocean.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cmocean\n\ndef cmocean_to_plotly(cmap, pl_entries):\n    h = 1.0/(pl_entries-1)\n    pl_colorscale = []\n    \n    for k in range(pl_entries):\n        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)\n        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])\n        \n    return pl_colorscale\n```\n\n----------------------------------------\n\nTITLE: Import Required Libraries\nDESCRIPTION: Imports necessary Python libraries for email processing and data visualization including plotly, mailbox, and date parsing utilities\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport mailbox\nfrom email.utils import parsedate\nfrom dateutil.parser import parse\nimport itertools\n```\n\n----------------------------------------\n\nTITLE: Loading Plotly Dependencies for Streaming in Python\nDESCRIPTION: This code imports the necessary Plotly modules and packages required for creating streaming visualizations, including plotly.plotly for API interaction, plotly.tools for configuration, plotly.graph_objs for creating graph objects, and numpy for numerical operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py  \nimport plotly.tools as tls   \nimport plotly.graph_objs as go\nimport numpy as np  \n```\n\n----------------------------------------\n\nTITLE: Singular Value Decomposition (SVD)\nDESCRIPTION: Performs SVD on a matrix and visualizes the decomposition components using Plotly's table.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\nsvd = np.linalg.svd(matrix)\n\nu = svd[0]\nsigma = svd[1]\nv = svd[2]\n\nu = u.tolist()\nsigma = sigma.tolist()\nv = v.tolist()\n\ncolorscale = [[0, '#111111'],[1, '#222222']]\nfont=['#ffffff', '#ffffff']\n\nmatrix_prod = [\n    ['$U$', '', '$\\Sigma$', '$V^*$', ''],\n    [u[0][0], u[0][1], sigma[0], v[0][0], v[0][1]],\n    [u[1][0], u[1][1], sigma[1], v[1][0], v[1][1]]\n]\n\ntable = FF.create_table(matrix_prod)\npy.iplot(table, filename='svd')\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Documentation\nDESCRIPTION: Sets up HTML styling and publishes the notebook documentation using custom publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/anova/python-Anova.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Anova.ipynb', 'python/anova/', 'Anova | plotly',\n    'Learn how to perform a one and two way ANOVA test using Python.',\n    title='Anova in Python | plotly',\n    name='Anova',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=8,\n    ipynb= '~notebook_demo/108')\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Proxies with Environment Variables in Bash\nDESCRIPTION: Sets the HTTP_PROXY and HTTPS_PROXY environment variables to configure Plotly's connection through corporate proxies. These variables tell the requests module used by Plotly how to route network traffic.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/proxy-configuration.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export HTTP_PROXY=\"http://10.10.1.10:3128\"\n$ export HTTPS_PROXY=\"http://10.10.1.10:1080\"\n```\n\n----------------------------------------\n\nTITLE: Generating Random Portfolio Weights in Python\nDESCRIPTION: Creates a function to generate random weights for a portfolio that sum to 1. This ensures that 100% of capital is allocated across the available assets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef rand_weights(n):\n    ''' Produces n random weights that sum to 1 '''\n    k = np.random.rand(n)\n    return k / sum(k)\n\nprint rand_weights(n_assets)\nprint rand_weights(n_assets)\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Object from Edges in Python igraph\nDESCRIPTION: Extracts edges from the JSON data and creates an undirected igraph Graph object. Each edge represents a co-appearance relationship between two characters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nL=len(data['links'])\nEdges=[(data['links'][k]['source'], data['links'][k]['target']) for k in range(L)]\n\nG=ig.Graph(Edges, directed=False)\n```\n\n----------------------------------------\n\nTITLE: Create Plotly Scatter Plot\nDESCRIPTION: Generates an interactive scatter plot of email counts over time using Plotly\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nx = []\ny = []\nfor date, count in email_count:\n    x.append(date)\n    y.append(count)\n    \npy.iplot( [ go.Scatter( x=x, y=y ) ] )\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Plotly REST API Access\nDESCRIPTION: Imports necessary libraries to use Plotly's REST API for batch operations on existing plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n```\n\n----------------------------------------\n\nTITLE: Implementing Statistical Functions - Python\nDESCRIPTION: Defines helper functions for statistical calculations including random gamma variate generation and categorical distribution sampling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrgamma = np.random.gamma\n\ndef rcategorical(probs, n=None):\n    # Function to draw random categorical variate\n    return np.array(probs).cumsum().searchsorted(np.random.sample(n))\n```\n\nLANGUAGE: python\nCODE:\n```\ndgamma = lambda lam, a, b: lam**(a - 1) * np.exp(-b * lam)\n```\n\n----------------------------------------\n\nTITLE: Decreasing Marker Size in Plotly\nDESCRIPTION: Reduces the marker size to 4 pixels to improve visibility when many points overlap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nscatter.marker.size = 4\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Generating R Scientific Charts Documentation List\nDESCRIPTION: Liquid template code that filters and sorts posts specifically for R scientific charts documentation. It assigns filtered posts to a variable and then includes a template to render the documentation examples list.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-scientific-index.md#2025-04-11_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"scientific\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Plotly.js Control Examples using Liquid Templates\nDESCRIPTION: This Liquid template snippet filters and sorts blog posts related to Plotly.js controls. It selects posts with specific attributes and prepares them for rendering in the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/controls/2024-05-27-plotly_js-controls-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"plotly_js\" | where:\"display_as\",\"controls\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Bar Charts with Cufflinks in Python\nDESCRIPTION: This snippet provides instructions to generate a horizontal bar chart using Cufflinks, setting the kind to 'barh' and specifying barmode and bargap. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='barh',barmode='stack', bargap=.1, filename='cufflinks/barh')\n```\n\n----------------------------------------\n\nTITLE: Loading Custom CSS Styling for Jupyter Notebook\nDESCRIPTION: A helper function that applies custom CSS styling to the Jupyter notebook for better visualization presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.core.display import HTML\ndef  css_styling():\n    styles = open(\"./custom.css\", \"r\").read()\n    return HTML(styles)\ncss_styling()\n```\n\n----------------------------------------\n\nTITLE: Displaying ggplot2 Image\nDESCRIPTION: This code snippet shows an image of a ggplot2 plot. It uses `IPython.display.Image` to display an image from a URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage(url = 'http://i.imgur.com/PkRRmHq.png')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet demonstrates how to publish Plotly documentation with custom styling using the publisher library. It includes setting up custom fonts and CSS, and configuring metadata for the published notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'aggregations.ipynb', 'python/aggregations/', 'Aggregations',\n    'How to use aggregates in Python with Plotly.',\n    title = 'Aggregations | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/aggregations.jpg', \n    language='python', uses_plotly_offline=True,\n    page_type='example_index',\n    display_as='transforms', order=3,\n    ipynb= '~notebook_demo/192')\n```\n\n----------------------------------------\n\nTITLE: Updating Heatmap with New Data in Plotly\nDESCRIPTION: Updates the existing Plotly figure with the new August 17 data, maintaining the same colorscale and display properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig['data'].update(Data([Heatmap(z=tab_vals17,\n                   y=factors,\n                   x=candidates17,\n                   colorscale=newyorktimes_cs,\n                   showscale=False\n                   )]))\n```\n\n----------------------------------------\n\nTITLE: Downloading Market Data from Multiple Sources using Python\nDESCRIPTION: A DataDownloader class that serves as a wrapper for retrieving financial market data from Bloomberg, Quandl, and CSV files. The class provides a unified interface through the download_time_series method, which returns data as Pandas DataFrames regardless of the source used.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# for time series manipulation\nimport pandas\n\nclass DataDownloader:\n    def download_time_series(self, vendor_ticker, pretty_ticker, start_date, source, csv_file = None):\n\n        if source == 'Quandl':\n            import Quandl\n            # Quandl requires API key for large number of daily downloads\n            # https://www.quandl.com/help/api\n            spot = Quandl.get(vendor_ticker)    # Bank of England's database on Quandl\n            spot = pandas.DataFrame(data=spot['Value'], index=spot.index)\n            spot.columns = [pretty_ticker]\n\n        elif source == 'Bloomberg':\n            from bbg_com import HistoricalDataRequest\n            req = HistoricalDataRequest([vendor_ticker], ['PX_LAST'], start = start_date)\n            req.execute()\n\n            spot = req.response_as_single()\n            spot.columns = [pretty_ticker]\n        elif source == 'CSV':\n            dateparse = lambda x: pandas.datetime.strptime(x, '%Y-%m-%d')\n\n            # in case you want to use a source other than Bloomberg/Quandl\n            spot = pandas.read_csv(csv_file, index_col=0, parse_dates=0, date_parser=dateparse)\n\n        return spot\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration\nDESCRIPTION: Sets up documentation styling and publishes the notebook using custom publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'widget_app.ipynb', 'python/widget-app/', 'IPython Widgets',\n    'Interactive Data Analysis with Plotly',\n    title = 'Interactive Data Analysis with ipywidgets',\n    name = 'Interactive Data Analysis with ipywidgets',\n    has_thumbnail='true', thumbnail='thumbnail/multi-widget.jpg', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=23,\n    ipynb= '~notebook_demo/90')\n```\n\n----------------------------------------\n\nTITLE: Printing Axis and Legend Configuration\nDESCRIPTION: Shows how to print configuration details for axes and legend in a Plotly figure\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(fig['layout']['xaxis'].to_string())\nprint(fig['layout']['yaxis'].to_string())\nprint(fig['layout']['legend'].to_string())\n```\n\n----------------------------------------\n\nTITLE: Plotting Column-Versus-Column Line Chart with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates plotting one column against another in a line chart using Cufflinks. The x and y arguments are used to specify column names of the DataFrame. Dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(x='A', y='B', filename='cufflinks/x-vs-y-line-example')\n```\n\n----------------------------------------\n\nTITLE: Facet Grid by Column\nDESCRIPTION: Creates a facet grid plot segmented by columns using vehicle data. Demonstrates basic faceting with displacement vs city MPG.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\nfig = ff.create_facet_grid(\n    mpg,\n    x='displ',\n    y='cty',\n    facet_col='cyl',\n)\n\npy.iplot(fig, filename='facet by col')\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Waterfall Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a horizontal waterfall chart using Plotly. It represents a profit and loss statement with positive and negative values, and customizes the connector lines between bars.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = False)\n\ntrace = go.Waterfall(\n    name = \"2018\", orientation = \"h\", measure = [\"relative\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \n                                              \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\", \"relative\", \"total\"], \n    y = [\"Sales\", \"Consulting\", \"Maintenance\", \"Other revenue\", \"Net revenue\", \"Purchases\", \"Material expenses\", \n       \"Personnel expenses\", \"Other expenses\", \"Operating profit\", \"Investment income\", \"Financial income\", \n       \"Profit before tax\", \"Income tax (15%)\", \"Profit after tax\"], \n    x = [375, 128, 78, 27, None, -327, -12, -78, -12, None, 32, 89, None, -45, None], \n    connector = {\"mode\":\"between\", \"line\":{\"width\":4, \"color\":\"rgb(0, 0, 0)\", \"dash\":\"solid\"}}\n)\n\nlayout = go.Layout(\n    title = \"Profit and loss statement 2018<br>waterfall chart displaying positive and negative\", \n        yaxis = {\"type\":\"category\", \"autorange\":\"reversed\"}, \n        xaxis = {\"type\":\"linear\"}, \n        margin = {\"l\":150}, \n        showlegend = True\n)\n\npy.iplot(go.Figure([trace], layout), filename = \"horizontal_waterfall\")\n```\n\n----------------------------------------\n\nTITLE: Setting Trace Opacity in Plotly Scatter Plot\nDESCRIPTION: This code demonstrates how to set the opacity of entire traces in a Plotly scatter plot. It allows for better visibility of multiple traces but may not effectively show point density.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=4.5, size=(500,))\nx2 = np.random.uniform(low=3, high=6, size=(500,))\ny2 = np.random.uniform(low=4.5, high=6, size=(500,))\n  \ndata = [\n    go.Scatter(\n        mode = 'markers',\n        x = x,\n        y = y,\n        opacity = 0.5,\n        marker = dict(\n          color = 'rgb(17, 157, 255)',\n          size = 20,\n          line = dict(\n            color = 'rgb(231, 99, 250)',\n            width = 2\n          )\n        ),\n        name = 'Opacity 0.5'\n      ),\n     go.Scatter(\n       mode = 'markers',\n       x = x2,\n       y = y2,\n       marker = dict(\n         color = 'rgb(17, 157, 255)',\n         size = 20,\n         line = dict(\n           color = 'rgb(231, 99, 250)',\n           width = 2\n         )\n       ),\n       name = 'Opacity 1.0'\n     ),\n     go.Scatter(\n        mode = 'markers',\n        x = [2,2],\n        y = [4.25,4.75],\n        opacity = 0.5,\n        marker = dict(\n           color = 'rgb(17, 157, 255)',\n           size = 80,\n           line = dict(\n              color = 'rgb(231, 99, 250)',\n              width = 8\n           )\n        ),\n        showlegend = False\n    )]\n\npy.iplot(data, filename = \"style-opacity\")\n```\n\n----------------------------------------\n\nTITLE: Combining Bioassay Traces into Plotly Data Object\nDESCRIPTION: Creates a data object that combines all visualizations (time series and histograms) for the bioassay parameters to prepare for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_58\n\nLANGUAGE: python\nCODE:\n```\ndata9 = pgo.Data([trace1, trace2, trace3, trace4])\n```\n\n----------------------------------------\n\nTITLE: Lowering the Viewpoint in 3D Surface Plot\nDESCRIPTION: Adjusts the camera to view the surface from a lower angle by modifying the eye vector to (2, 2, 0.1). This creates a perspective that emphasizes height differences by viewing from near the base plane.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nname = 'eye = (x:2, y:2, z:0.1)'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=2, y=2, z=0.1)\n)\n\nfig['layout'].update(\n    scene=dict(camera=camera),\n    title=name\n)\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Stock Data with Plotly in Python\nDESCRIPTION: This code imports stock data from a CSV file, creates a table using Plotly's FigureFactory, and displays it interactively.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')\ndf = stock_data[0:15]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='stockdata-peak-fitting')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for 3D Mesh Compatibility\nDESCRIPTION: A version check for Plotly to ensure compatibility with 3D Mesh features. 3D Mesh plots require Plotly version 1.10.0 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Plotly Component Structure\nDESCRIPTION: Hierarchical structure showing the nested attributes and configuration options for Plotly visualization components. Includes settings for markers, transforms, colorscales, and other visual properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/ref_names.txt#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nscatterternary > marker > sizemin\nscatterternary > marker > sizemode\nscatterternary > marker > sizeref\nscatterternary > marker > symbol\nscatterternary > mode\nscatterternary > name\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules and Authenticating with Plotly\nDESCRIPTION: Imports necessary Plotly modules for communication with Plotly servers, tools for working with Plotly, graph objects for creating plots, and NumPy for mathematical operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# (*) To communicate with Plotly's server, sign in with credentials file\nimport plotly.plotly as py  \n \n# (*) Useful Python/Plotly tools\nimport plotly.tools as tls   \n \n# (*) Graph objects to piece together plots\nfrom plotly.graph_objs import *\n \nimport numpy as np  # (*) numpy for math functions and arrays\n```\n\n----------------------------------------\n\nTITLE: CSV Data Import and Basic Table Creation\nDESCRIPTION: Demonstrates importing CSV data using pandas and creating a basic Plotly table with custom header and cell styling for Bitcoin mining data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table_sub.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport re\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv')\n\n# remove min:sec:millisec from dates \nfor i, row in enumerate(df['Date']):\n    p = re.compile(' 00:00:00')\n    datetime = p.split(df['Date'][i])[0]\n    df.iloc[i, 1] = datetime\n\ntable = go.Table(\n    header=dict(\n        values=list(df.columns),\n        line = dict(color='rgb(50, 50, 50)'),\n        align = ['left'] * 5,\n        fill = dict(color='#EDFAFF')\n    ),\n    cells=dict(\n        values=[df.iloc[j] for j in range(10)],\n        line = dict(color='rgb(50, 50, 50)'),\n        align = ['left'] * 5,\n        fill = dict(color='#f5f5fa')\n    )\n)\n\npy.iplot([table])\n```\n\n----------------------------------------\n\nTITLE: Implementing Interval Index Finder for Distance Thresholds in Python\nDESCRIPTION: Defines a function that returns the index of the interval to which a given distance belongs in the threshold list.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_idx_interv(d, D):\n    k=0\n    while(d>D[k]): \n        k+=1\n    return  k-1\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plots with Plotly in Python\nDESCRIPTION: Demonstrates how to create two scatter plots using Plotly graph objects and combine them into a single figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Make three lists of numbers\nx = [1, 2, 3, 5, 6]\ny1 = [1, 4.5, 7, 24, 38]\ny2 = [1, 4, 9, 25, 36]\n\n# (1.1) Make a 1st Scatter object\ntrace1 = Scatter(\n    x=x,           # x-coordinates of trace\n    y=y1,          # y-coordinates of trace\n    mode='markers'   # scatter mode (more in UG section 1)\n)\n\n# (1.2) Make a 2nd Scatter object\ntrace2 = Scatter(\n    x=x,           # same x-coordinates\n    y=y2,          # different y-coordinates\n    mode='lines'     # different scatter mode\n) \n\n# (2) Make Data object \ndata = Data([trace1, trace2])  # (!) Data is list-like, must use [ ]\n\n# (3) Make Layout object (Layout is dict-like)\nlayout = Layout(title='Fig 0.3: Some Experiment')\n\n# (4) Make Figure object (Figure is dict-like)\nfig = Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Creating a Matplotlib Figure\nDESCRIPTION: This code creates a matplotlib figure and populates it with several normal distribution plots. It iterates through means and variances, creating normal distribution curves with `mlab.normpdf` and plotting them with labels. It also sets X and Y axis labels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig1 = plt.figure()\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.mlab as mlab\n\nmean = [10,12,16,22,25]\nvariance = [3,6,8,10,12]\n\nx = np.linspace(0,40,1000)\n\nfor i in range(4):\n    sigma = np.sqrt(variance[i])\n    y = mlab.normpdf(x,mean[i],sigma)\n    plt.plot(x,y, label=r'$v_{}$'.format(i+1))\n\nplt.xlabel(\"X\")\nplt.ylabel(\"P(X)\")        \n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Time Series Visualization with JSON Data\nDESCRIPTION: JSON configuration for a Plotly time series chart showing unemployment to population ratio from 1967 to 2015. The configuration includes data points, layout settings for axes and margins, and interaction settings for the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"x\":{\"visdat\":{\"cd914ad31029\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"cd914ad31029\",\"attrs\":{\"cd914ad31029\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"date\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"unemploy/pop\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"1967-07-01\",\"1967-08-01\",\"1967-09-01\",\"1967-10-01\",\"1967-11-01\",\"1967-12-01\",\"1968-01-01\",\"1968-02-01\",\"1968-03-01\",\"1968-04-01\",\"1968-05-01\",\"1968-06-01\",\"1968-07-01\",\"1968-08-01\",\"1968-09-01\",\"1968-10-01\",\"1968-11-01\",\"1968-12-01\",\"1969-01-01\",\"1969-02-01\",\"1969-03-01\",\"1969-04-01\",\"1969-05-01\",\"1969-06-01\",\"1969-07-01\",\"1969-08-01\",\"1969-09-01\",\"1969-10-01\",\"1969-11-01\",\"1969-12-01\",\"1970-01-01\",\"1970-02-01\",\"1970-03-01\",\"1970-04-01\",\"1970-05-01\",\"1970-06-01\",\"1970-07-01\",\"1970-08-01\",\"1970-09-01\",\"1970-10-01\",\"1970-11-01\",\"1970-12-01\",\"1971-01-01\",\"1971-02-01\",\"1971-03-01\",\"1971-04-01\",\"1971-05-01\",\"1971-06-01\",\"1971-07-01\",\"1971-08-01\",\"1971-09-01\",\"1971-10-01\",\"1971-11-01\",\"1971-12-01\",\"1972-01-01\",\"1972-02-01\",\"1972-03-01\",\"1972-04-01\",\"1972-05-01\",\"1972-06-01\",\"1972-07-01\",\"1972-08-01\",\"1972-09-01\",\"1972-10-01\",\"1972-11-01\",\"1972-12-01\",\"1973-01-01\",\"1973-02-01\",\"1973-03-01\",\"1973-04-01\",\"1973-05-01\",\"1973-06-01\",\"1973-07-01\",\"1973-08-01\",\"1973-09-01\",\"1973-10-01\",\"1973-11-01\",\"1973-12-01\",\"1974-01-01\",\"1974-02-01\",\"1974-03-01\",\"1974-04-01\",\"1974-05-01\",\"1974-06-01\",\"1974-07-01\",\"1974-08-01\",\"1974-09-01\",\"1974-10-01\",\"1974-11-01\",\"1974-12-01\",\"1975-01-01\",\"1975-02-01\",\"1975-03-01\",\"1975-04-01\",\"1975-05-01\",\"1975-06-01\",\"1975-07-01\",\"1975-08-01\",\"1975-09-01\",\"1975-10-01\",\"1975-11-01\",\"1975-12-01\",\"1976-01-01\",\"1976-02-01\",\"1976-03-01\",\"1976-04-01\",\"1976-05-01\",\"1976-06-01\",\"1976-07-01\",\"1976-08-01\",\"1976-09-01\",\"1976-10-01\",\"1976-11-01\",\"1976-12-01\",\"1977-01-01\",\"1977-02-01\",\"1977-03-01\",\"1977-04-01\",\"1977-05-01\",\"1977-06-01\",\"1977-07-01\",\"1977-08-01\",\"1977-09-01\",\"1977-10-01\",\"1977-11-01\",\"1977-12-01\",\"1978-01-01\",\"1978-02-01\",\"1978-03-01\",\"1978-04-01\",\"1978-05-01\",\"1978-06-01\",\"1978-07-01\",\"1978-08-01\",\"1978-09-01\",\"1978-10-01\",\"1978-11-01\",\"1978-12-01\",\"1979-01-01\",\"1979-02-01\",\"1979-03-01\",\"1979-04-01\",\"1979-05-01\",\"1979-06-01\",\"1979-07-01\",\"1979-08-01\",\"1979-09-01\",\"1979-10-01\",\"1979-11-01\",\"1979-12-01\",\"1980-01-01\",\"1980-02-01\",\"1980-03-01\",\"1980-04-01\",\"1980-05-01\",\"1980-06-01\",\"1980-07-01\",\"1980-08-01\",\"1980-09-01\",\"1980-10-01\",\"1980-11-01\",\"1980-12-01\",\"1981-01-01\",\"1981-02-01\",\"1981-03-01\",\"1981-04-01\",\"1981-05-01\",\"1981-06-01\",\"1981-07-01\",\"1981-08-01\",\"1981-09-01\",\"1981-10-01\",\"1981-11-01\",\"1981-12-01\",\"1982-01-01\",\"1982-02-01\",\"1982-03-01\",\"1982-04-01\",\"1982-05-01\",\"1982-06-01\",\"1982-07-01\",\"1982-08-01\",\"1982-09-01\",\"1982-10-01\",\"1982-11-01\",\"1982-12-01\",\"1983-01-01\",\"1983-02-01\",\"1983-03-01\",\"1983-04-01\",\"1983-05-01\",\"1983-06-01\",\"1983-07-01\",\"1983-08-01\",\"1983-09-01\",\"1983-10-01\",\"1983-11-01\",\"1983-12-01\",\"1984-01-01\",\"1984-02-01\",\"1984-03-01\",\"1984-04-01\",\"1984-05-01\",\"1984-06-01\",\"1984-07-01\",\"1984-08-01\",\"1984-09-01\",\"1984-10-01\",\"1984-11-01\",\"1984-12-01\",\"1985-01-01\",\"1985-02-01\",\"1985-03-01\",\"1985-04-01\",\"1985-05-01\",\"1985-06-01\",\"1985-07-01\",\"1985-08-01\",\"1985-09-01\",\"1985-10-01\",\"1985-11-01\",\"1985-12-01\",\"1986-01-01\",\"1986-02-01\",\"1986-03-01\",\"1986-04-01\",\"1986-05-01\",\"1986-06-01\",\"1986-07-01\",\"1986-08-01\",\"1986-09-01\",\"1986-10-01\",\"1986-11-01\",\"1986-12-01\",\"1987-01-01\",\"1987-02-01\",\"1987-03-01\",\"1987-04-01\",\"1987-05-01\",\"1987-06-01\",\"1987-07-01\",\"1987-08-01\",\"1987-09-01\",\"1987-10-01\",\"1987-11-01\",\"1987-12-01\",\"1988-01-01\",\"1988-02-01\",\"1988-03-01\",\"1988-04-01\",\"1988-05-01\",\"1988-06-01\",\"1988-07-01\",\"1988-08-01\",\"1988-09-01\",\"1988-10-01\",\"1988-11-01\",\"1988-12-01\",\"1989-01-01\",\"1989-02-01\",\"1989-03-01\",\"1989-04-01\",\"1989-05-01\",\"1989-06-01\",\"1989-07-01\",\"1989-08-01\",\"1989-09-01\",\"1989-10-01\",\"1989-11-01\",\"1989-12-01\",\"1990-01-01\",\"1990-02-01\",\"1990-03-01\",\"1990-04-01\",\"1990-05-01\",\"1990-06-01\",\"1990-07-01\",\"1990-08-01\",\"1990-09-01\",\"1990-10-01\",\"1990-11-01\",\"1990-12-01\",\"1991-01-01\",\"1991-02-01\",\"1991-03-01\",\"1991-04-01\",\"1991-05-01\",\"1991-06-01\",\"1991-07-01\",\"1991-08-01\",\"1991-09-01\",\"1991-10-01\",\"1991-11-01\",\"1991-12-01\",\"1992-01-01\",\"1992-02-01\",\"1992-03-01\",\"1992-04-01\",\"1992-05-01\",\"1992-06-01\",\"1992-07-01\",\"1992-08-01\",\"1992-09-01\",\"1992-10-01\",\"1992-11-01\",\"1992-12-01\",\"1993-01-01\",\"1993-02-01\",\"1993-03-01\",\"1993-04-01\",\"1993-05-01\",\"1993-06-01\",\"1993-07-01\",\"1993-08-01\",\"1993-09-01\",\"1993-10-01\",\"1993-11-01\",\"1993-12-01\",\"1994-01-01\",\"1994-02-01\",\"1994-03-01\",\"1994-04-01\",\"1994-05-01\",\"1994-06-01\",\"1994-07-01\",\"1994-08-01\",\"1994-09-01\",\"1994-10-01\",\"1994-11-01\",\"1994-12-01\",\"1995-01-01\",\"1995-02-01\",\"1995-03-01\",\"1995-04-01\",\"1995-05-01\",\"1995-06-01\",\"1995-07-01\",\"1995-08-01\",\"1995-09-01\",\"1995-10-01\",\"1995-11-01\",\"1995-12-01\",\"1996-01-01\",\"1996-02-01\",\"1996-03-01\",\"1996-04-01\",\"1996-05-01\",\"1996-06-01\",\"1996-07-01\",\"1996-08-01\",\"1996-09-01\",\"1996-10-01\",\"1996-11-01\",\"1996-12-01\",\"1997-01-01\",\"1997-02-01\",\"1997-03-01\",\"1997-04-01\",\"1997-05-01\",\"1997-06-01\",\"1997-07-01\",\"1997-08-01\",\"1997-09-01\",\"1997-10-01\",\"1997-11-01\",\"1997-12-01\",\"1998-01-01\",\"1998-02-01\",\"1998-03-01\",\"1998-04-01\",\"1998-05-01\",\"1998-06-01\",\"1998-07-01\",\"1998-08-01\",\"1998-09-01\",\"1998-10-01\",\"1998-11-01\",\"1998-12-01\",\"1999-01-01\",\"1999-02-01\",\"1999-03-01\",\"1999-04-01\",\"1999-05-01\",\"1999-06-01\",\"1999-07-01\",\"1999-08-01\",\"1999-09-01\",\"1999-10-01\",\"1999-11-01\",\"1999-12-01\",\"2000-01-01\",\"2000-02-01\",\"2000-03-01\",\"2000-04-01\",\"2000-05-01\",\"2000-06-01\",\"2000-07-01\",\"2000-08-01\",\"2000-09-01\",\"2000-10-01\",\"2000-11-01\",\"2000-12-01\",\"2001-01-01\",\"2001-02-01\",\"2001-03-01\",\"2001-04-01\",\"2001-05-01\",\"2001-06-01\",\"2001-07-01\",\"2001-08-01\",\"2001-09-01\",\"2001-10-01\",\"2001-11-01\",\"2001-12-01\",\"2002-01-01\",\"2002-02-01\",\"2002-03-01\",\"2002-04-01\",\"2002-05-01\",\"2002-06-01\",\"2002-07-01\",\"2002-08-01\",\"2002-09-01\",\"2002-10-01\",\"2002-11-01\",\"2002-12-01\",\"2003-01-01\",\"2003-02-01\",\"2003-03-01\",\"2003-04-01\",\"2003-05-01\",\"2003-06-01\",\"2003-07-01\",\"2003-08-01\",\"2003-09-01\",\"2003-10-01\",\"2003-11-01\",\"2003-12-01\",\"2004-01-01\",\"2004-02-01\",\"2004-03-01\",\"2004-04-01\",\"2004-05-01\",\"2004-06-01\",\"2004-07-01\",\"2004-08-01\",\"2004-09-01\",\"2004-10-01\",\"2004-11-01\",\"2004-12-01\",\"2005-01-01\",\"2005-02-01\",\"2005-03-01\",\"2005-04-01\",\"2005-05-01\",\"2005-06-01\",\"2005-07-01\",\"2005-08-01\",\"2005-09-01\",\"2005-10-01\",\"2005-11-01\",\"2005-12-01\",\"2006-01-01\",\"2006-02-01\",\"2006-03-01\",\"2006-04-01\",\"2006-05-01\",\"2006-06-01\",\"2006-07-01\",\"2006-08-01\",\"2006-09-01\",\"2006-10-01\",\"2006-11-01\",\"2006-12-01\",\"2007-01-01\",\"2007-02-01\",\"2007-03-01\",\"2007-04-01\",\"2007-05-01\",\"2007-06-01\",\"2007-07-01\",\"2007-08-01\",\"2007-09-01\",\"2007-10-01\",\"2007-11-01\",\"2007-12-01\",\"2008-01-01\",\"2008-02-01\",\"2008-03-01\",\"2008-04-01\",\"2008-05-01\",\"2008-06-01\",\"2008-07-01\",\"2008-08-01\",\"2008-09-01\",\"2008-10-01\",\"2008-11-01\",\"2008-12-01\",\"2009-01-01\",\"2009-02-01\",\"2009-03-01\",\"2009-04-01\",\"2009-05-01\",\"2009-06-01\",\"2009-07-01\",\"2009-08-01\",\"2009-09-01\",\"2009-10-01\",\"2009-11-01\",\"2009-12-01\",\"2010-01-01\",\"2010-02-01\",\"2010-03-01\",\"2010-04-01\",\"2010-05-01\",\"2010-06-01\",\"2010-07-01\",\"2010-08-01\",\"2010-09-01\",\"2010-10-01\",\"2010-11-01\",\"2010-12-01\",\"2011-01-01\",\"2011-02-01\",\"2011-03-01\",\"2011-04-01\",\"2011-05-01\",\"2011-06-01\",\"2011-07-01\",\"2011-08-01\",\"2011-09-01\",\"2011-10-01\",\"2011-11-01\",\"2011-12-01\",\"2012-01-01\",\"2012-02-01\",\"2012-03-01\",\"2012-04-01\",\"2012-05-01\",\"2012-06-01\",\"2012-07-01\",\"2012-08-01\",\"2012-09-01\",\"2012-10-01\",\"2012-11-01\",\"2012-12-01\",\"2013-01-01\",\"2013-02-01\",\"2013-03-01\",\"2013-04-01\",\"2013-05-01\",\"2013-06-01\",\"2013-07-01\",\"2013-08-01\",\"2013-09-01\",\"2013-10-01\",\"2013-11-01\",\"2013-12-01\",\"2014-01-01\",\"2014-02-01\",\"2014-03-01\",\"2014-04-01\",\"2014-05-01\",\"2014-06-01\",\"2014-07-01\",\"2014-08-01\",\"2014-09-01\",\"2014-10-01\",\"2014-11-01\",\"2014-12-01\",\"2015-01-01\",\"2015-02-01\",\"2015-03-01\",\"2015-04-01\"],\"y\":[0.01481541124844,0.0148056165822906,0.0148558858537614,0.0157693253257472,0.0153685751235601,0.015115923809333,0.0144038276745676,0.0150110044017607,0.0143809733274683,0.0135309278350515,0.0136753160545216,0.0146507360274464,0.0143642940420316,0.013778136168603,0.0133568711305602,0.0133588355109543,0.0134762193124398,0.0133170651866621,0.0134714512291832,0.0133345881979978,0.0134242140746351,0.013642591795648,0.013408721352635,0.0139056921489134,0.0141505942953567,0.0140774952311006,0.0149687330740066,0.0149973930408948,0.014034398034398,0.0141598134282558,0.0157027996212883,0.0169258068311047,0.0178050118536805,0.0185762300575829,0.0191537923922446,0.0198750183078651,0.020360688995962,0.0207311429893568,0.0216794784470176,0.0223093669212976,0.0237739292509611,0.0246123410816629,0.0241492545988201,0.0237240404900614,0.0241086751589278,0.0239490015212614,0.0241049889028274,0.0238549710308394,0.0242462474898994,0.0246968217393605,0.02422710629751,0.0237778684393674,0.0247464697561794,0.0246910031618281,0.0240238946567297,0.0235720674826964,0.0240808366632889,0.023683531850267,0.0234889880455272,0.0234735963762069,0.0234068300491672,0.0235106509579912,0.0230599492100933,0.023161455537132,0.021846042837612,0.0215490866659394,0.0205038272863,0.0210875331564987,0.0207996061613035,0.0210907198940498,0.0204606360804813,0.0206048756529049,0.020315324030598,0.0202977952963808,0.0204909345279313,0.0195034709965878,0.0206740220284621,0.0210964118711375,0.0218097796479627,0.0222035536949604,0.0217343382846101,0.0216440680349267,0.0]}}]}}\n```\n\n----------------------------------------\n\nTITLE: Empty Python Code Block\nDESCRIPTION: An empty code block at the end of the notebook that can be used for additional code if needed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Object with Markers - Plotly Python\nDESCRIPTION: This snippet attempts to create a Scatter object with incorrect parameters, illustrating Plotly's keyword validation feature that raises exceptions when incorrect keys are used.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngo.Scatter(markers=dict(color='blue'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Plotly Graph in Python\nDESCRIPTION: This snippet demonstrates how to create a simple Plotly graph using the Python API. It creates a plot with a single trace and a title, and returns the URL of the created plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = py.plot({\"data\": [{\"x\": [1, 2, 3],\n                         \"y\": [4, 2, 4]}],\n               \"layout\": {\"title\": \"Let's Trash This Plot<br>(then restore it)\"}},\n              filename='trash example') \n\nurl\n```\n\n----------------------------------------\n\nTITLE: Setting up IPython Display Environment with Custom Styling\nDESCRIPTION: Configures the IPython notebook environment with custom fonts and styling, then installs and uses the publisher package to create an interactive visualization of GBP/USD price action around UK elections.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'ukelectionbbg.ipynb', 'ipython-notebooks/ukelectionbbg/', 'Plotting GBP/USD price action around UK general elections', \n    'Create interactive graphs with market data, IPython Notebook and Plotly', name='Plot MP Action in GBP/USD around UK General Elections')\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Plotly's Figure Factory Module\nDESCRIPTION: Code to access the help documentation for Plotly's figure factory module, which contains wrapper functions for creating unique chart types not yet included in plotly.js.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.figure_factory\nhelp(plotly.figure_factory)\n```\n\n----------------------------------------\n\nTITLE: Plotting Bézier Surface\nDESCRIPTION: Creating and displaying the 3D surface plot of the Bézier patch.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfig=plot_Surface(n, b, m,  'Graph as a triangular Bezier patch')\npy.iplot(fig, filename='triangular-Bezier-graph4')\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook as Plotly Documentation\nDESCRIPTION: This code snippet sets up custom styling for the Jupyter notebook and uses the Plotly publisher to publish the notebook as documentation. It includes metadata for the published page such as title, description, and thumbnail.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/matplotlib_colorscales/matplotlib-colorscales.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'matplotlib-colorscales.ipynb', 'python/matplotlib-colorscales/', 'Matplotlib Colorscales',\n    'How to make Matplotlib Colorscales in Python with Plotly.',\n    title = 'Python Matplotlib Colorscales | plotly',\n    name = 'Matplotlib Colorscales',\n    has_thumbnail='true', thumbnail='thumbnail/colorbars.jpg', \n    language='python', page_type='example_index',\n    display_as='style_opt', order=8,\n    ipynb= '~notebook_demo/48')\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Configuration for publishing the documentation, including custom styling and metadata for the notebook publication process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/sizing/sizing.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'sizing.ipynb', 'python/setting-graph-size/', 'Setting Graph Size',\n    'How to manipulate the graph size in Python with Plotly.',\n    title = 'Setting Graph Size',\n    name = 'Setting Graph Size',\n    has_thumbnail='true', thumbnail='thumbnail/sizing.png', \n    language='python', order=2,\n    display_as='file_settings',\n    ipynb= '~notebook_demo/133')\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to HTML Table with Bootstrap Styling\nDESCRIPTION: This snippet converts a Pandas DataFrame containing statistical summaries of the stock data into an HTML table. It uses the to_html() method and replaces the default styling with Bootstrap table styling for better appearance in the final report.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsummary_table_1 = df.describe()\nsummary_table_1 = summary_table_1\\\n    .to_html()\\\n    .replace('<table border=\"1\" class=\"dataframe\">','<table class=\"table table-striped\">') # use bootstrap styling\n```\n\n----------------------------------------\n\nTITLE: Importing NetCDF and NumPy - Python\nDESCRIPTION: This snippet loads the required libraries for handling NetCDF files and scientific computations, enabling the processing of climate data in array format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.io import netcdf\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animated Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a basic animated plot using Plotly in Python. It initializes a notebook mode, creates a figure with initial data and frames for animation, and then plots the figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\n\ninit_notebook_mode(connected=True)\n\nfigure = {'data': [{'x': [0, 1], 'y': [0, 1]}],\n          'layout': {'xaxis': {'range': [0, 5], 'autorange': False},\n                     'yaxis': {'range': [0, 5], 'autorange': False},\n                     'title': 'Start Title'},\n          'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},\n                     {'data': [{'x': [1, 4], 'y': [1, 4]}]},\n                     {'data': [{'x': [3, 4], 'y': [3, 4]}],\n                      'layout': {'title': 'End Title'}}]}\n\niplot(figure)\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Helper Function\nDESCRIPTION: Defines a helper function to load and apply custom CSS styling from an external file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.core.display import HTML\ndef  css_styling():\n    styles = open(\"./custom.css\", \"r\").read()\n    return HTML(styles)\ncss_styling()\n```\n\n----------------------------------------\n\nTITLE: Basic jQuery Knob Implementation\nDESCRIPTION: Shows the basic HTML and JavaScript required to initialize a jQuery Knob control with default settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" value=\"75\" class=\"dial\">\n\n<script>\n$(function() {\n    $(\".dial\").knob();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Step Function of de Casteljau Algorithm\nDESCRIPTION: Implements a single step of the de Casteljau algorithm, evaluating the convex combinations of points by processing their barycentric coordinates. It utilizes NumPy for array operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom __future__ import division\n\ndef deCasteljau_step(n, b, lam):\n    i=0\n    j=1\n    for nr in range(1, n+1):\n        for k in range(nr):\n            b[i]=lam[0]*b[i]+lam[1]*b[j]+lam[2]*b[j+1]\n            i+=1\n            j+=1\n        j+=1\n    return b[:-(n+1)]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Flight Analysis Dashboard\nDESCRIPTION: Imports necessary Python packages including datetime, numpy, pandas, plotly and IPython widgets required for the application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\nfrom ipywidgets import widgets \nfrom IPython.display import display, clear_output, Image\nfrom plotly.widgets import GraphWidget\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to Large Variance MCMC Plot in Python\nDESCRIPTION: Applies custom styling to the large variance MCMC visualization figure using the same styling function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nadd_style(fig6)\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob Change Event Example\nDESCRIPTION: Demonstrates how to implement a change event handler with console logging.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".dial\").knob({\n                     'change' : function (v) { console.log(v); }\n                    });\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Dataset\nDESCRIPTION: Loads the mtcars dataset from GitHub, renames columns and creates a table visualization using Plotly's Figure Factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/yankev/testing/master/datasets/mtcars.csv')\ndf.rename(columns={'Unnamed: 0':'model'}, inplace=True)\ncols = df.columns.tolist()\ncols = cols[1:] + [cols[0]]\ntable = FF.create_table(df[cols].head())\npy.iplot(table, filename='df_table_mouseevents', show_link=False)\n```\n\n----------------------------------------\n\nTITLE: Switching Cufflinks to Online Mode in Python\nDESCRIPTION: This snippet switches Cufflinks to online mode where graphs are saved to the online Plotly account. Use cufflinks.go_online() to enable online saving of plots. Dependency is Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncf.go_online()\n```\n\n----------------------------------------\n\nTITLE: Publishing Linear Gauge Chart Documentation in Python\nDESCRIPTION: Sets up documentation styling and publishes the notebook with custom styling and metadata for the linear gauge chart tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/linear-gauge.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'linear-gauge.ipynb', 'python/linear-gauge-chart/', 'Python Linear-Gauge Chart | plotly',\n    'How to make interactive linear-guage charts in Python with Plotly. ',\n    title = 'Python Linear-Gauge Chart | plotly',\n    name = 'Linear-Gauge Chart',\n    thumbnail='thumbnail/linear-gauge.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=12,\n    ipynb='~notebook_demo/12')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plot Data Structure\nDESCRIPTION: Code demonstrating how to create data structures for a basic plot including x and y coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# (1) Two lists of numbers\nx1 = [1, 2, 3, 5, 6]\ny1 = [1, 4.5, 7, 24, 38]\n\n# (2) Make dictionary linking x and y coordinate lists to 'x' and 'y' keys\ntrace1 = dict(x=x1, y=y1)\n\n# (3) Make list of 1 trace, to be sent to Plotly\ndata = [trace1]\n```\n\n----------------------------------------\n\nTITLE: Rendering the Plot - Python\nDESCRIPTION: This code finalizes the figure object and sends it to Plotly for visualization, allowing interactivity with the generated map.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfig = Figure(data=data, layout=layout)\n\npy.iplot(fig, filename=\"maps\", width=1000)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Shows how to import the plotly library and verify the installed version. This is useful to ensure compatibility with the latest features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Loading Image Data with Python\nDESCRIPTION: This snippet reads image files from a specified directory and stores their binary data into a dictionary. The keys of the dictionary are derived from the filenames (model year). This data structure is used later to dynamically update the displayed image.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/hover scratch.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nfrom ipywidgets import Image, Layout\nimport os\n\nimage_data = {}\nfor img_filename in os.listdir('/home/michael/plotly/repos/plotly_ipywidget_notebooks/notebooks/data/cars/images'):\n    model_year = img_filename.split('.')[0]\n    with open(f\"/home/michael/plotly/repos/plotly_ipywidget_notebooks/notebooks/data/cars/images/{img_filename}\", \"rb\") as f:\n        b = f.read()\n        image_data[model_year] = b\n\nImage(value=image_data['2012_Chevrolet_Camaro_Coupe'])\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced 2D Histogram Contour Plot\nDESCRIPTION: Demonstrates creation of a complex visualization combining a 2D histogram contour plot with scatter overlay using random data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.randn(2000)\ny = np.random.randn(2000)\niplot([go.Histogram2dContour(x=x, y=y, contours=dict(coloring='heatmap')),\n       go.Scatter(x=x, y=y, mode='markers', marker=dict(color='white', size=3, opacity=0.3))], show_link=False)\n```\n\n----------------------------------------\n\nTITLE: Simulating Heading Response to Roll Command\nDESCRIPTION: Simulates the system response over time for a given roll command input, computing the resulting heading angle using the transfer function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntime, psi, state = cn.forced_response(psi_thetac, T=time, U=thetac)\n```\n\n----------------------------------------\n\nTITLE: Creating New Plotly Files with Unique Names in Python\nDESCRIPTION: This code creates a new Plotly graph file with a unique name. If a file with the same name exists, Plotly will append a number to the filename to make it unique.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2],\n        y=[3, 4]\n    )\n]\n\nplot_url = py.plot(data, filename='new plot', fileopt='new')\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for Proxy Connection Issues\nDESCRIPTION: Shows the typical error message encountered when Plotly cannot connect to its servers due to corporate firewall restrictions. This is usually the first indicator that proxy configuration is needed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/proxy-configuration.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequests.exceptions.ConnectionError: ('Connection aborted.', TimeoutError(10060, ...)\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data to Custom Interval\nDESCRIPTION: Demonstrates normalization to a custom interval [a,b] and visualizes the results with comparative histograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = 10\nb = 50\ndata_norm_to_a_b = [(number - a)/(b - a) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data',\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_to_a_b,\n    opacity=0.75,\n    name='normalized to [10,50]',\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize to [10,50]')\npy.iplot(fig, filename='apple-data-normalize-a-b')\n```\n\n----------------------------------------\n\nTITLE: Customizing Subplot Axes - Plotly Python\nDESCRIPTION: This snippet demonstrates how to customize subplot axes in Plotly by assigning existing axes to other traces and removing unnecessary annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfig.data[1].yaxis = 'y1'\nfig.data[1].xaxis = 'x1'\ndel fig.layout['xaxis2']\ndel fig.layout['yaxis2']\n```\n\nLANGUAGE: python\nCODE:\n```\ndel fig.layout.annotations[0]   #deletes annotation for `First Subplot`\ndel fig.layout.annotations[0]   #deletes annotation for `Second Subplot` because of shift\nfig.layout.xaxis1.domain = [0.0, 1]\n```\n\n----------------------------------------\n\nTITLE: Importing XAxis and YAxis Objects in Plotly Python\nDESCRIPTION: Imports XAxis and YAxis graph objects for customizing axis properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import XAxis, YAxis\n```\n\n----------------------------------------\n\nTITLE: Creating Ideograms for Chord Diagram in Python\nDESCRIPTION: This code generates the ideograms for the chord diagram. It sets the position, color, and associated information for each ideogram, creating both the visible arcs and the shapes for filling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nideograms=[]\nfor k in range(len(ideo_ends)):\n    z= make_ideogram_arc(1.1, ideo_ends[k])\n    zi=make_ideogram_arc(1.0, ideo_ends[k])\n    m=len(z)\n    n=len(zi)\n    ideograms.append(go.Scatter(x=z.real,\n                             y=z.imag,\n                             mode='lines',\n                             line=dict(color=ideo_colors[k], shape='spline', width=0.25),\n                             text=labels[k]+'<br>'+'{:d}'.format(row_sum[k]), \n                             hoverinfo='text'\n                             )\n                     )\n    \n       \n    path='M '\n    for s in range(m):\n        path+=str(z.real[s])+', '+str(z.imag[s])+' L '\n        \n    Zi=np.array(zi.tolist()[::-1]) \n\n    for s in range(m):\n        path+=str(Zi.real[s])+', '+str(Zi.imag[s])+' L '\n    path+=str(z.real[0])+' ,'+str(z.imag[0]) \n   \n    layout['shapes'].append(make_ideo_shape(path,'rgb(150,150,150)' , ideo_colors[k]))\n    \ndata = go.Data(ideograms+ribbon_info)\nfig = go.Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Domain and Theme for Specific Images\nDESCRIPTION: HTML and JavaScript for applying custom domains and themes to specific images using CSS selectors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img data-src=\"example.com/100x100/simple\" id=\"new\">\n```\n\nLANGUAGE: js\nCODE:\n```\nHolder.run({\n    domain: \"example.com\",\n    themes: {\n        \"simple\":{\n            background:\"#fff\",\n            foreground:\"#000\",\n            size:12\n            }\n    },\n    images: \"#new\"\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating Axis Labels for Parameter Plots\nDESCRIPTION: Updates the y-axis titles for the parameter plots to clearly label each parameter (intercept, slope, precision) in the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfig7['layout'].update(\n    yaxis1=pgo.YAxis(title='intercept'),\n    yaxis3=pgo.YAxis(title='slope'),\n    yaxis5=pgo.YAxis(title='precision')\n)\n```\n\n----------------------------------------\n\nTITLE: 2D Histogram Slider Control Implementation\nDESCRIPTION: Embedding an interactive 2D histogram with slider controls using JSFiddle iframe integration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.core.display import display,HTML\ndisplay(HTML('<iframe height=600 width=950 src=\"https://jsfiddle.net/plotlygraphs/y9sdy76h/4/embedded/result,js,html/\"></iframe>'))\n```\n\n----------------------------------------\n\nTITLE: Updating Layout for Large Variance MCMC Plot in Python\nDESCRIPTION: Updates the layout of the large variance MCMC visualization with axis titles for each parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfig6['layout'].update(\n    yaxis1=pgo.YAxis(title='intercept'),\n    yaxis3=pgo.YAxis(title='slope'),\n    yaxis5=pgo.YAxis(title='precision')\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Response Functions\nDESCRIPTION: Defines functions to validate widget inputs and update the graph based on selected filters. Includes handlers for widget value changes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef validate():\n    # print \"validating\"\n    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():\n        return True\n    else:\n        return False\n\ndef response(change):\n    if validate():\n        # print \"using date\"\n        if use_date.value:\n            filter_list = [i and j and k for i,j,k in \n                           zip(df['month'] == month.value, df['carrier'] == textbox.value, \n                               df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n            x1 = temp_df['arr_delay']\n            x2 = temp_df['dep_delay']\n            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', \n                       'opacity': 0.75}, indices=0) \n            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', \n                       'opacity': 0.75}, indices=1)\n            g.relayout({'barmode': 'overlay', 'xaxis': {'title': 'Delay in Minutes'},\n                        'yaxis': {'title': 'Number of Delays'}})\n            # print temp_df.head()\n            \n        else:\n            # print \"not using date\"\n            filter_list = [i and j for i,j in \n                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]\n            temp_df = df[filter_list]\n            x1 = temp_df['arr_delay']\n            x2 = temp_df['dep_delay']\n            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', \n                       'opacity': 0.75}, indices=0) \n            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', \n                       'opacity': 0.75}, indices=1)\n            g.relayout({'barmode': 'overlay'})\n            # print temp_df.head()\n    \n\norigin.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")\nmonth.observe(response, names=\"value\")\nuse_date.observe(response, names=\"value\")\n```\n\n----------------------------------------\n\nTITLE: Forcing Canvas Rendering Engine\nDESCRIPTION: JavaScript for forcing Holder.js to use the canvas rendering engine instead of SVG.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nHolder.run({use_canvas:true})\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot of Earthquake Magnitude vs Depth with Plotly in Python\nDESCRIPTION: This snippet creates a scatter plot of earthquake magnitude vs depth using Plotly. It includes hover text for location information and uses a logarithmic scale for both axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlocation = df['place']  # manages serialization in early versions of Plotly Python client\nfor i in range(len(location)):\n    try:\n        location[i] = str(location[i]).decode('utf-8')\n    except:\n        location[i] = 'Country name decode error'\n\ntrace1 = Scatter(\n    x=df['depth'],\n    y=df['mag'],\n    text=location,\n    mode='markers',\n    marker=Marker(\n            color='rgba(31, 119, 180, 0.15)',  # add opacity for visibility\n        )\n)\nlayout = Layout(\n    title='Earthquake Magnitude vs. Depth',\n    xaxis=XAxis( type='log', title='depth' ),\n    yaxis=YAxis( type='log', title='magnitude' ),\n    hovermode=\"closest\",\n)\ndata = Data([trace1])\nfig = Figure(data=data, layout=layout)\npy.iplot(fig, filename='Earthquake_basic')\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Display and Publishing Notebook as Documentation in Python\nDESCRIPTION: This code configures styling for the notebook by importing custom fonts and CSS. It then uses the publisher module to publish the current notebook as a documentation page with specific metadata including title, description, thumbnail, and categorization parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'horizontal-bars.ipynb', 'python/horizontal-bar-charts/', 'Horizontal Bar Charts | plotly',\n    'How to make horizontal bar charts in Python with Plotly.',\n    title = 'Horizontal Bar Charts | plotly',\n    name = 'Horizontal Bar Charts',\n    thumbnail='thumbnail/horizontal-bar.jpg', language='python', \n    has_thumbnail='true', display_as='basic', order=5,\n    ipynb= '~notebook_demo/5')\n```\n\n----------------------------------------\n\nTITLE: Julia Example Code Template\nDESCRIPTION: Template for individual Julia code examples including front matter metadata and sample plotting code for a basic bar chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/julia/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n---\nname: Basic Bar Chart **\nplot_url: https://plotly.com/~PlotBot/39\nlanguage: julia\nsuite: bar\norder: 1 **\nsitemap: false\narrangement: horizontal\n---\n# Learn about API authentication here: https://plotly.com/julia/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nusing Plotly\n\n\ndata = [\n  [\n    \"x\" => [\"giraffes\", \"orangutans\", \"monkeys\"],\n    \"y\" => [20, 14, 23],\n    \"type\" => \"bar\"\n  ]\n]\nresponse = Plotly.plot(data, [\"filename\" => \"basic-bar\", \"fileopt\" => \"overwrite\"])\nplot_url = response[\"url\"]\n```\n\n----------------------------------------\n\nTITLE: Viewing 3D Surface from X-Z Plane Perspective\nDESCRIPTION: Positions the camera to view the 3D surface from the X-Z plane with eye vector at (0.1, 2.5, 0.1). This perspective shows the cross-section of the elevation data along the Y axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nname = 'eye = (x:0.1, y:2.5, z:0.1)'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=0.1, y=2.5, z=0.1)\n)\n\nfig['layout'].update(\n    scene=dict(camera=camera),\n    title=name\n)\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Extracting Lead Owner Data using List Comprehension\nDESCRIPTION: Extracts the Owner Name field from the previously queried Salesforce lead data using a list comprehension for further analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nowners = [x['Owner']['Name'] for x in leads_for_status[\"records\"]]\n```\n\n----------------------------------------\n\nTITLE: Importing matplotlib for plotting\nDESCRIPTION: This code snippet imports the necessary libraries from matplotlib for creating and customizing plots. It also imports numpy for numerical operations and matplotlib.gridspec for creating subplots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt # side-stepping mpl backend\nimport matplotlib.gridspec as gridspec # subplots\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scale\nDESCRIPTION: Creates a discrete color scale for different flower classes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npl_colorscale=[[0.0, '#19d3f3'],\n               [0.333, '#19d3f3'],\n               [0.333, '#e763fa'],\n               [0.666, '#e763fa'],\n               [0.666, '#636efa'],\n               [1, '#636efa']]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Inputs for Dash Callback\nDESCRIPTION: This example demonstrates a Dash callback that takes multiple inputs to generate a formatted string output. It combines values from a dropdown and slider to create dynamic content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.callback(\n    Output('multi-input-output', 'children'),\n    Input('my-dropdown', 'value'),\n    Input('my-slider', 'value')\n)\ndef update_output(dropdown_value, slider_value):\n    return f'The dropdown has value: {dropdown_value} and the slider has value: {slider_value}'\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder with Custom Colors\nDESCRIPTION: HTML for specifying custom background and foreground colors directly in the placeholder URL using hex notation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img data-src=\"holder.js/100x200/#000:#fff\">\n```\n\n----------------------------------------\n\nTITLE: Applying Style to Bioassay Figure\nDESCRIPTION: Applies custom styling to the bioassay figure using a predefined add_style function to improve visual appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nadd_style(fig9)\n```\n\n----------------------------------------\n\nTITLE: Using Themed Placeholder in HTML\nDESCRIPTION: HTML for creating a themed placeholder image using Holder's predefined 'sky' theme.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"holder.js/200x300/sky\">\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation\nDESCRIPTION: Sets up handlers for click, hover, and zoom events on the graph\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\ndef message_handler(widget, msg):\n    clear_output()\n    print widget._graph_url\n    display(msg)\n\ng.on_click(message_handler)\ng.on_hover(message_handler)\ng.on_zoom(message_handler)\n```\n\n----------------------------------------\n\nTITLE: Plotting Public Graphs with URL\nDESCRIPTION: Demonstrates plotting public graphs that can be viewed by anyone without logging into Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-public', sharing='public')\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Stream Object\nDESCRIPTION: Creates a Stream object using the token to establish a connection for sending data updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ns = py.Stream(stream_id=token)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Notebook\nDESCRIPTION: Sets up custom styling for the IPython notebook and publishes it using the publisher module. This includes loading custom fonts and CSS for improved presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'montecarlo.ipynb', 'ipython-notebooks/computational-bayesian-analysis/',\n    'Computational Methods in Bayesian Analysis', \n    'Monte Carlo simulations, Markov chains, Gibbs sampling illustrated in Plotly',\n    name='Computational Methods in Bayesian Analysis')\n```\n\n----------------------------------------\n\nTITLE: Display Search Documentation Readme in Makefile\nDESCRIPTION: Make target that displays the contents of this file using the 'less' command, providing a quick way to access the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/make_instructions.txt#2025-04-11_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nsearch_readme -> `less` this file\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Histogram with Cufflinks in Python\nDESCRIPTION: This snippet shows the creation of a basic histogram using Cufflinks with kind set to 'histogram'. It includes random data and specifies the filename. Required dependencies include Pandas, NumPy, and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({'a': np.random.randn(1000) + 1,\n                   'b': np.random.randn(1000),\n                   'c': np.random.randn(1000) - 1})\n\ndf.iplot(kind='histogram', filename='cufflinks/basic-histogram')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling\nDESCRIPTION: Sets up custom styling and publishes the notebook to Plotly's documentation system. This code imports fonts, applies CSS styling, and uses the publisher module to upload the notebook with appropriate metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish('mysql-ipython-notebook.ipynb', 'python/graph-data-from-mysql-database-in-python/', \n                  'Plot Data from MySQL', 'How to graph data from a MySQL database with Python.',\n                  title='Plot Data from a MySQL Database | Plotly', has_thumbnail='false', \n                  page_type='example_index', display_as='databases', order=1, language='python',\n                  uses_plotly_offline=True)\n```\n\n----------------------------------------\n\nTITLE: Ruby Dependencies Installation\nDESCRIPTION: Commands to install bundler and required gem dependencies for the documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/julia/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install bundler\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Visualizing Q-Test Results with Plotly in Python\nDESCRIPTION: This code creates a scatter plot using Plotly to visualize the Q-Test results. It plots the dataset points in increasing order and adds a critical line to represent the outlier threshold.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = [j for j in range(len(dataset))]\ny1 = dataset\ny2 = [-2.04 for j in range(len(dataset))]\n\ntrace1 = go.Scatter(\n    x = x,\n    y = y1,\n    mode = 'lines+markers',\n    name='Dataset',\n    marker=dict(symbol=[100, 0])\n)\n\ntrace2 = go.Scatter(\n    x = x,\n    y = y2,\n    mode = 'lines',\n    name='Critical Line'\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='q-test-scatter')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Libraries and Dependencies in Python\nDESCRIPTION: Basic imports for Plotly visualization library and pandas for data handling. This sets up the environment for creating 3D visualizations in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Getting Plotly Figure Data\nDESCRIPTION: This code snippet retrieves the data associated with a Plotly figure using its username and graph ID. The `get_data()` method returns the data as a list of dictionaries, which can then be used for further analysis or visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmy_data = py.get_figure('PythonAPI', '455').get_data()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cufflinks Settings in Python\nDESCRIPTION: This snippet demonstrates the use of the set_config_file function to change global settings for Cufflinks, including online mode, privacy settings, and themes. Dependencies are Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncf.set_config_file(offline=False, world_readable=True, theme='ggplot')\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in Amazon Redshift\nDESCRIPTION: SQL script that creates multiple tables for a ticketing or events database in Amazon Redshift. Tables include users, venue, category, date, event, listing, and sales with appropriate columns, data types, and distribution/sort keys.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users(\n\tuserid integer not null distkey sortkey,\n\tusername char(8),\n\tfirstname varchar(30),\n\tlastname varchar(30),\n\tcity varchar(30),\n\tstate char(2),\n\temail varchar(100),\n\tphone char(14),\n\tlikesports boolean,\n\tliketheatre boolean,\n\tlikeconcerts boolean,\n\tlikejazz boolean,\n\tlikeclassical boolean,\n\tlikeopera boolean,\n\tlikerock boolean,\n\tlikevegas boolean,\n\tlikebroadway boolean,\n\tlikemusicals boolean);\n\ncreate table venue(\n\tvenueid smallint not null distkey sortkey,\n\tvenuename varchar(100),\n\tvenuecity varchar(30),\n\tvenuestate char(2),\n\tvenueseats integer);\n\ncreate table category(\n\tcatid smallint not null distkey sortkey,\n\tcatgroup varchar(10),\n\tcatname varchar(10),\n\tcatdesc varchar(50));\n\ncreate table date(\n\tdateid smallint not null distkey sortkey,\n\tcaldate date not null,\n\tday character(3) not null,\n\tweek smallint not null,\n\tmonth character(5) not null,\n\tqtr character(5) not null,\n\tyear smallint not null,\n\tholiday boolean default('N'));\n\ncreate table event(\n\teventid integer not null distkey,\n\tvenueid smallint not null,\n\tcatid smallint not null,\n\tdateid smallint not null sortkey,\n\teventname varchar(200),\n\tstarttime timestamp);\n\ncreate table listing(\n\tlistid integer not null distkey,\n\tsellerid integer not null,\n\teventid integer not null,\n\tdateid smallint not null  sortkey,\n\tnumtickets smallint not null,\n\tpriceperticket decimal(8,2),\n\ttotalprice decimal(8,2),\n\tlisttime timestamp);\n\ncreate table sales(\n\tsalesid integer not null,\n\tlistid integer not null distkey,\n\tsellerid integer not null,\n\tbuyerid integer not null,\n\teventid integer not null,\n\tdateid smallint not null sortkey,\n\tqtysold smallint not null,\n\tpricepaid decimal(8,2),\n\tcommission decimal(8,2),\n\tsaletime timestamp);\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout for Plotly Heatmap\nDESCRIPTION: Sets up the layout for the scoreboard heatmap including dimensions, margins, font styles, axis properties, and annotations. The layout includes a link to the original data source and places the x-axis at the top of the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwidth = 900 \nheight =450\n\nanno_text=\"Data source:\\\n<a href='http://www.nytimes.com/interactive/2015/08/06/upshot/\\\n2016-republican-presidential-candidates-dashboard.html'> [1]</a>\"\n\ntitle = \"A scoreboard for republican candidates as of August 14, 2015\"               \n\nlayout = Layout(\n    title=' ',  \n    font=Font(\n        family='Balto, sans-serif',\n        size=12,\n        color='rgb(68,68,68)'\n    ),\n    showlegend=False,\n    xaxis=XAxis(\n        title='',  \n        showgrid=True,\n        side='top'\n    ),\n    yaxis=YAxis(\n        title='',\n        autorange='reversed',\n        showgrid=True,   \n        autotick=False,  \n        dtick=1          \n    ),\n    autosize=False, \n    height=height,   \n    width=width,\n    margin=Margin(\n        l=135,\n        r=40,\n        b=85,\n        t=170\n    )\n)\n   \nannotations = Annotations([\n    Annotation(\n            showarrow=False, \n            text=anno_text,  \n            xref='paper',     \n            yref='paper',     \n            x=0,  \n            y=-0.1,  \n            xanchor='left',   \n            yanchor='bottom',  \n            font=Font(\n            size=11 )\n            )])\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-panel Visualization with Plotly Subplots in Python\nDESCRIPTION: This code creates a figure with two subplots arranged horizontally with shared x-axes. It appends existing trace objects to each subplot and updates the layout before publishing the figure to Plotly with a specific filename.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\npy.iplot(fig, filename='oecd-networth-saving-bar-line')\n```\n\n----------------------------------------\n\nTITLE: Styling and Coloring Annotations in Plotly\nDESCRIPTION: This snippet shows how to apply advanced styling to annotations in Plotly. Annotations can be customized with specific fonts, colors, borders, backgrounds, and arrow properties to create highly visible and informative callouts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n)\n\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    showlegend=False,\n    annotations=[\n        dict(\n            x=2,\n            y=5,\n            xref='x',\n            yref='y',\n            text='max=5',\n            showarrow=True,\n            font=dict(\n                family='Courier New, monospace',\n                size=16,\n                color='#ffffff'\n            ),\n            align='center',\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor='#636363',\n            ax=20,\n            ay=-30,\n            bordercolor='#c7c7c7',\n            borderwidth=2,\n            borderpad=4,\n            bgcolor='#ff7f0e',\n            opacity=0.8\n        )\n    ]\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='style-annotation')\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Values with DISTINCT\nDESCRIPTION: Shows how to retrieve unique values from a specific column using the DISTINCT keyword in a SQL query.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT DISTINCT City FROM data', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Define Clustering Function in Python\nDESCRIPTION: Defines a function 'cluster' that initializes a KMeans object with a specified number of clusters, fits it to a reduced dataset 'X_reduced', and predicts cluster assignments.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Let the number of clusters be a parameter, so we can get a feel for an appropriate\n# value thereof.\ndef cluster(n_clusters):\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(X_reduced)\n    Z = kmeans.predict(X_reduced)\n    return kmeans, Z\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Plotly Plot\nDESCRIPTION: Demonstrates how to add text annotations to a plot using the layout.update() method with annotations parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayout.update(dict(annotations=[go.Annotation(text=\"Highest Point\", x=3, y=6)]))\npy.iplot(go.Figure(data=data, layout=layout), filename='pyguide_4')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Graph Objects in Python\nDESCRIPTION: Imports the core Plotly graph objects Data, Layout, and Figure for creating plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import Data, Layout, Figure\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and displays the current version to ensure compatibility with the examples in the document.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Histogram Example in Python\nDESCRIPTION: This snippet demonstrates how to embed a Dash web application showing histograms using IPython's IFrame. It displays a live Dash example that showcases interactive histogram visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-histogramplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Querying Open Opportunity Data for Sales Pipeline Analysis\nDESCRIPTION: Executes a SOQL query to retrieve open opportunities with their details including probability, revenue, amount, and close date, filtering for large opportunities over $5,000.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlarge_opps = sf.query(\"SELECT Id, Name, Probability, ExpectedRevenue, StageName, Amount, CloseDate, Owner.Name FROM Opportunity WHERE StageName NOT IN ('Closed Lost', 'Closed Won') AND Amount > 5000\")\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Violin Plots by Gender\nDESCRIPTION: This code creates grouped violin plots that show total bill distributions by day, split by gender. Male and female distributions are displayed side by side with blue and pink colors respectively, using the 'group' violin mode.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\n\nfig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": df['day'] [ df['sex'] == 'Male' ],\n            \"y\": df['total_bill'] [ df['sex'] == 'Male' ],\n            \"legendgroup\": 'M',\n            \"scalegroup\": 'M',\n            \"name\": 'M',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": df['day'] [ df['sex'] == 'Female' ],\n            \"y\": df['total_bill'] [ df['sex'] == 'Female' ],\n            \"legendgroup\": 'F',\n            \"scalegroup\": 'F',\n            \"name\": 'F',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'pink'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violinmode\": \"group\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin/grouped', validate = False)\n```\n\n----------------------------------------\n\nTITLE: Adding Bioassay Data to Plotly Figure\nDESCRIPTION: Adds the previously created bioassay data traces to the figure object for visualization in a subplot layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfig9['data'] += data9\n```\n\n----------------------------------------\n\nTITLE: Adding a Line Trace to a Subplot in R with Plotly\nDESCRIPTION: This code snippet downloads a plot from Chart Studio, adds a new line trace to the second subplot, and displays the resulting figure. It uses the 'add_lines' function to specify the new trace's data and subplot axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nfig <- api_download_plot(\"6343\", \"chelsea_lyn\")\n\np <- add_lines(fig, x = c(1, 2), y = c(1, 2), xaxis = \"x2\", yaxis = \"y2\")\np\n```\n\n----------------------------------------\n\nTITLE: Getting a Plotly Figure\nDESCRIPTION: This code snippet retrieves a Plotly figure object using its username and graph ID. This allows access to the graph's data and layout for further manipulation or analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nggplot = py.get_figure('MattSundquist', '1339') \n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Chart in Python\nDESCRIPTION: Uses Plotly's tools module to embed a pre-existing chart from Plotly's server directly into the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\ntls.embed('https://plotly.com/~chris/7365')\n```\n\n----------------------------------------\n\nTITLE: Creating Curve and Rug Plot without Histogram\nDESCRIPTION: Demonstrates how to create a distribution plot showing only the KDE curve and rug plot without the histogram. This is accomplished by setting show_hist=False in the create_distplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(200) - 1 \nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 1 \n\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\ncolors = ['#333F44', '#37AA9C', '#94F3E4']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False, colors=colors)\n\n# Add title\nfig['layout'].update(title='Curve and Rug Plot')\n\n# Plot!\npy.iplot(fig, filename='Curve and Rug')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tree Structure with igraph\nDESCRIPTION: This code creates a tree structure using igraph, sets up the layout, and prepares the node and edge positions for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnr_vertices = 25\nv_label = map(str, range(nr_vertices))\nG = Graph.Tree(nr_vertices, 2) # 2 stands for children number\nlay = G.layout('rt')\n\nposition = {k: lay[k] for k in range(nr_vertices)}\nY = [lay[k][1] for k in range(nr_vertices)]\nM = max(Y)\n\nes = EdgeSeq(G) # sequence of edges\nE = [e.tuple for e in G.es] # list of edges\n\nL = len(position)\nXn = [position[k][0] for k in range(L)]\nYn = [2*M-position[k][1] for k in range(L)]\nXe = []\nYe = []\nfor edge in E:\n    Xe+=[position[edge[0]][0],position[edge[1]][0], None]\n    Ye+=[2*M-position[edge[0]][1],2*M-position[edge[1]][1], None] \n\nlabels = v_label\n```\n\n----------------------------------------\n\nTITLE: Initializing Disaster Data Array - Python\nDESCRIPTION: Creates a numpy array containing the count of coal mining disasters per year from 1851 to 1962.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisasters_array = np.array([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6,\n                            3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5,\n                            2, 2, 3, 4, 2, 1, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0,\n                            1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,\n                            0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2,\n                            3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4,\n                            0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])\n\nn_count_data = len(disasters_array)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Streaming Documentation in Python\nDESCRIPTION: Sets up custom styling and publishes the Plotly streaming documentation using a custom publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'python_streaming', 'python/streaming-tutorial/', 'Plotly Streaming',\n    'Plotly Streaming', name='Plotly Streaming',\n    title = 'Plotly Streaming', \n    redirect_from = 'python/streaming-line-tutorial/', \n    language='python',\n    layout='user-guide',\n    ipynb= '~notebook_demo/80') \n```\n\n----------------------------------------\n\nTITLE: Increasing Title Font Size in Plotly\nDESCRIPTION: Changes the title font size to 22 points to make it more prominent.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.titlefont.size = 22\n```\n\n----------------------------------------\n\nTITLE: Getting Help on a Plotly Object\nDESCRIPTION: This code snippet uses the `help()` function to display documentation for the `Figure` object in Plotly. This provides information on the object's attributes, methods, and usage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nhelp(Figure)\n```\n\n----------------------------------------\n\nTITLE: Uploading a DataFrame to Plotly\nDESCRIPTION: Reads a CSV file into a pandas DataFrame, creates a table from the first few rows, and plots it using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\ndf_head = df.head()\ntable = ff.create_table(df_head)\npy.iplot(table, filename='dataframe_ex_preview')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Plotly Streaming\nDESCRIPTION: Sets up the necessary imports for creating streaming plots with Plotly, including the plotly API, tools, graph objects, and NumPy for mathematical operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# (*) To communicate with Plotly's server, sign in with credentials file\nimport plotly.plotly as py  \n \n# (*) Useful Python/Plotly tools\nimport plotly.tools as tls   \n \n# (*) Graph objects\nfrom plotly.graph_objs import *\n \nimport numpy as np  # (*) numpy for math functions and arrays\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet shows the publishing workflow for Plotly documentation. It sets up custom fonts and styles, installs the publisher package, and then publishes the notebook with metadata like title, description, and thumbnail.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'histograms.ipynb', 'python/histograms/', 'Python Histograms | plotly',\n    'How to make Histograms in Python with Plotly.',\n    title = 'Python Histograms | plotly',\n    name = 'Histograms',\n    has_thumbnail='true', thumbnail='thumbnail/histogram.jpg', \n    language='python', page_type='example_index',\n    display_as='statistical', order=4, redirect_from='/python/histogram-tutorial/',\n    ipynb= '~notebook_demo/22')\n```\n\n----------------------------------------\n\nTITLE: Publishing Graph Widget Documentation\nDESCRIPTION: Sets up documentation styling and publishes the notebook as documentation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'plotly_widgets.ipynb', 'python/ipython-widgets//', 'IPython Notebook Widgets | plotly',\n    'How to make IPython Notebook Widgets in Python with Plotly.',\n    name = 'IPython Notebook Widgets',\n    thumbnail='thumbnail/ipython_widgets.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='chart_events', order=0)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Contour Plot Colorscale\nDESCRIPTION: Implements a contour plot with custom-defined colorscale using specific RGB values at different thresholds.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale=[[0, 'rgb(166,206,227)'], [0.25, 'rgb(31,120,180)'], [0.45, 'rgb(178,223,138)'], [0.65, 'rgb(51,160,44)'], [0.85, 'rgb(251,154,153)'], [1, 'rgb(227,26,28)']],\n    )\n]\n\npy.iplot(data, filename='colorscales-custom-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display configuration and publishes the notebook with custom styling and metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Basic-Statistics.ipynb', 'python/basic-statistics/', 'Basic Statistics | plotly',\n    'Learn how to perform basic statistical operations using Python.',\n    title='Basic Statistics in Python. | plotly',\n    name='Basic Statistics',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=1,\n    ipynb= '~notebook_demo/109')\n```\n\n----------------------------------------\n\nTITLE: Using State in Dash Callbacks to Preserve Values\nDESCRIPTION: This code shows how to use State in Dash callbacks to access component property values without triggering the callback when they change. It displays the current value of an input only when a button is clicked.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import State\n\n@app.callback(\n    Output('output-state', 'children'),\n    Input('submit-button-state', 'n_clicks'),\n    State('input-1-state', 'value'),\n    State('input-2-state', 'value')\n)\ndef update_output(n_clicks, input1, input2):\n    if n_clicks > 0:\n        return f'''The Button has been pressed {n_clicks} times,\n                  Input 1 is \"{input1}\",\n                  and Input 2 is \"{input2}\"'''\n    return \"Enter values and press submit\"\n```\n\n----------------------------------------\n\nTITLE: Styled Error Bars with Theoretical Curve in Plotly\nDESCRIPTION: Creates a complex plot combining a theoretical curve with measured data points, featuring customized error bars with specific colors and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx_theo = np.linspace(-4, 4, 100)\nsincx = np.sinc(x_theo)\nx = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\ny = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\n\ntrace1 = go.Scatter(\n    x=x_theo,\n    y=sincx,\n    name='sinc(x)'\n)\ntrace2 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='measured',\n    error_y=dict(\n        type='constant',\n        value=0.1,\n        color='#85144B',\n        thickness=1.5,\n        width=3,\n    ),\n    error_x=dict(\n        type='constant',\n        value=0.2,\n        color='#85144B',\n        thickness=1.5,\n        width=3,\n    ),\n    marker=dict(\n        color='#85144B',\n        size=8\n    )\n)\ndata = [trace1, trace2]\npy.iplot(data, filename='error-bar-style')\n```\n\n----------------------------------------\n\nTITLE: Plotting Private Graphs with URL\nDESCRIPTION: Demonstrates plotting private graphs that can only be viewed by the owner.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-private', sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Link Objects in Plotly Python\nDESCRIPTION: This snippet creates stream link objects using the previously defined tokens. These objects will be used to open connections to the Plotly streaming service for each trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ns_1 = py.Stream(stream_id=token_1)\ns_2 = py.Stream(stream_id=token_2)\n```\n\n----------------------------------------\n\nTITLE: Combining Plots into Plotly Data Object for Large Variance Run in Python\nDESCRIPTION: Creates a Plotly Data object that combines all trace and histogram plots for the large variance MCMC run.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndata6 = pgo.Data([trace1, trace2, trace3, trace4, trace5, trace6])\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Hyperlinks in Plotly\nDESCRIPTION: Demonstrates how to create a table with clickable hyperlinks using HTML anchor tags.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata_matrix = [['User', 'Language', 'Chart Type', '# of Views'],\n               ['<a href=\"https://plotly.com/~empet/folder/home\">empet</a>',\n                '<a href=\"https://plotly.com/python/\">Python</a>',\n                '<a href=\"https://plotly.com/~empet/8614/\">Network Graph</a>',\n                298],\n               ['<a href=\"https://plotly.com/~Grondo/folder/home\">Grondo</a>',\n                '<a href=\"https://plotly.com/matlab/\">Matlab</a>',\n                '<a href=\"https://plotly.com/~Grondo/42/\">Subplots</a>',\n                356],\n               ['<a href=\"https://plotly.com/~Dreamshot/folder/home\">Dreamshot</a>',\n                '<a href=\"https://help.plot.ly/tutorials/\">Web App</a>',\n                '<a href=\"https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/\">Bubble Map</a>',\n                262],\n               ['<a href=\"https://plotly.com/~FiveThirtyEight/folder/home\">FiveThirtyEight</a>',\n                '<a href=\"https://help.plot.ly/tutorials/\">Web App</a>',\n                '<a href=\"https://plotly.com/~FiveThirtyEight/30/\">Scatter</a>',\n                692],\n               ['<a href=\"https://plotly.com/~cpsievert/folder/home\">cpsievert</a>',\n                '<a href=\"https://plotly.com/r/\">R</a>',\n                '<a href=\"https://plotly.com/~cpsievert/1130/\">Surface</a>',\n                302]]\n\ntable = ff.create_table(data_matrix)\npy.iplot(table, filename='linked_table')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly and Scientific Libraries in Python\nDESCRIPTION: This snippet shows the necessary imports for Plotly, NumPy, Pandas, and SciPy to create advanced plots and perform mathematical operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/average-multiple-curves/python_Average_Multiple_Curves.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Plot Privacy Settings\nDESCRIPTION: Functions to collect and update privacy settings for all existing plots using Plotly's API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_pages(username, page_size):\n    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&filetype=plot&page_size='+str(page_size)\n    response = requests.get(url, auth=auth, headers=headers)\n    if response.status_code != 200:\n        return\n    page = json.loads(response.content.decode('utf-8'))\n    yield page\n    while True:\n        resource = page['children']['next']\n        if not resource:\n            break\n        response = requests.get(resource, auth=auth, headers=headers)\n        if response.status_code != 200:\n            break\n        page = json.loads(response.content.decode('utf-8'))\n        yield page\n\ndef make_all_plots_private(username, page_size=500):\n    for page in get_pages(username, page_size):\n        for x in range(0, len(page['children']['results'])):\n            fid = page['children']['results'][x]['fid']\n            requests.patch('https://api.plot.ly/v2/files/'+fid, {\"world_readable\": False}, auth=auth, headers=headers)\n    print('ALL of your plots are now private - visit: https://plotly.com/organize/home to view your private plots!')\n\nmake_all_plots_private(username)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Traces with Separate Axes in Plotly\nDESCRIPTION: This code creates two scatter traces with separate y-axes and configures the layout with appropriate titles and styling. The second trace uses a different color and is displayed on a secondary y-axis on the right side of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(x=[], y=[], stream=stream_id1, name='trace1')\ntrace2 = go.Scatter(x=[], y=[], stream=stream_id2, yaxis='y2', name='trace2', marker=dict(color='rgb(148, 103, 189)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title='Streaming Two Traces',\n    yaxis=dict(\n        title='y for trace1'\n    ),\n    yaxis2=dict(\n        title='y for trace2',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.plot(fig, filename='multple-trace-axes-streaming')\n```\n\n----------------------------------------\n\nTITLE: Importing Bar Graph Object in Plotly Python\nDESCRIPTION: Imports the Bar graph object for creating bar charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import Bar\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Animation Example in IPython\nDESCRIPTION: Code to embed a Dash animation example as an iframe within a Jupyter notebook. This displays the actual running application from a hosted server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-animationplot/\", width=\"100%\", height=\"750px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing necessary Python libraries including Plotly, NumPy and Pandas for data manipulation and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as FF\n\nimport numpy as np\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Plotting Heatmaps with Magma, Viridis, and Parula Colorscales in Python\nDESCRIPTION: These code snippets demonstrate how to use the heatmap_plot function to create and display heatmaps with Magma, Viridis, and Parula colorscales using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/matplotlib_colorscales/matplotlib-colorscales.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=magma, title='MAGMA'))\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=viridis, title='VIRIDIS'))\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(heatmap_plot(colorscale=parula, title='PARULA'))\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling in Python\nDESCRIPTION: This code snippet sets up custom styling for IPython notebooks and publishes documentation for the custom buttons example. It uses the Plotly publisher module to create and format the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'custom-buttons.ipynb', 'python/custom-buttons/', 'Custom Buttons | plotly',\n    'How to add custom buttons to update Plotly chart attributes in Python.',\n    title='Custom Buttons | plotly',\n    name='Custom Buttons',\n    has_thumbnail='true', thumbnail='thumbnail/custom-buttons.jpg',\n    language='python', page_type='example_index',\n    display_as='controls', order=1)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the correct version is installed for animations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/heatmap/heatmap.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing the Notebook with Plotly Publisher\nDESCRIPTION: Sets up styling for the notebook and publishes it to the Plotly documentation site using the publisher module with metadata for categorization and display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-camera-lighting.ipynb', 'python/3d-surface-lighting/', 'Python 3D  surface lighting | plotly',\n    'How to add lighting effects in 3D Python Plots',\n    title= '3D Surface Lighting in Python | Plotly',\n    name = '3D Surface Lighting',\n    has_thumbnail='true', thumbnail='thumbnail/3d-surface-lighting.jpg', \n    language='python' \n    display_as='3d_charts', order=0.107,\n    ipynb= '~notebook_demo/77')\n```\n\n----------------------------------------\n\nTITLE: Implementing Pattern-Matching Callbacks in Dash\nDESCRIPTION: This snippet demonstrates how to use pattern-matching callbacks in Dash to handle dynamic components with similar functionality. It uses the MATCH parameter to connect specific inputs to corresponding outputs based on pattern-matching.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dash.dependencies import MATCH, ALL\n\n@app.callback(\n    Output({'type': 'dynamic-output', 'index': MATCH}, 'children'),\n    Input({'type': 'dynamic-input', 'index': MATCH}, 'value')\n)\ndef update_dynamic_output(value):\n    return f'Input value: {value}'\n```\n\n----------------------------------------\n\nTITLE: Box Trace Facet Grid\nDESCRIPTION: Demonstrates creating a facet grid using box plot traces with the tips dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\ntips = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tips.csv')\n\nfig = ff.create_facet_grid(\n    tips,\n    y='tip',\n    facet_row='sex',\n    facet_col='smoker',\n    trace_type='box',\n)\n\npy.iplot(fig, filename='facet - box traces')\n```\n\n----------------------------------------\n\nTITLE: Accessing Quick Reference in Jupyter Notebook\nDESCRIPTION: Demonstrates how to open the quick reference guide in Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquickref\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jupyter Notebook Display and Publishing Tutorial\nDESCRIPTION: This code sets up custom styling for the Jupyter notebook and uses a publisher tool to publish the tutorial. It includes font imports and custom CSS.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/heatmap/heatmap.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'heatmap.ipynb', 'python/heatmap-animation/', 'Heatmap Animation | plotly',\n    'How to make an animated heatmap in Python.',\n    title='Heatmap Animation | plotly',\n    name='Heatmap Animation',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/heatmap_animation.gif',\n    ipynb= '~notebook_demo/131',\n    display_as='animations', order=4)\n```\n\n----------------------------------------\n\nTITLE: Enabling Scroll Zoom in Plotly\nDESCRIPTION: Demonstrates how to enable scroll zoom functionality in a Plotly graph using the scrollZoom configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {'scrollZoom': True}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Trace with Stream Reference\nDESCRIPTION: Initializes a Scatter trace object with empty data arrays and links it to the Stream ID object, setting up the trace to receive streaming data updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Initialize trace of streaming plot by embedding the unique stream_id\ntrace1 = Scatter(\n    x=[],\n    y=[],\n    mode='lines+markers',\n    stream=stream         # (!) embed stream id, 1 per trace\n)\n\ndata = Data([trace1])\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance from Origin for Surface Coloring\nDESCRIPTION: Processes the 3D surface data to calculate distances from origin for each point, which will be used for surface coloring in the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlx = len(data['z'])\nly = len(data['z'][0])\n\nout = []\n\n\ndef dist_origin(x, y, z):\n\n    return math.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)\n\nfor i in xrange(lx):\n    temp = []\n    for j in xrange(ly):\n        temp.append(\n            dist_origin(data['x'][i][j], data['y'][i][j], data['z'][i][j]))\n    out.append(temp)\n\nprint(len(out))\nprint(len(out[0]))\n\ndata['surfacecolor'] = out     #sets surface-color to distance from the origin\n```\n\n----------------------------------------\n\nTITLE: Extracting Lead Status Data using List Comprehension\nDESCRIPTION: Extracts the Status field from the Salesforce query results using a list comprehension and counts occurrences using Counter from the collections module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstatuses = [x['Status'] for x in leads_for_status[\"records\"]]\nstatus_counts = Counter(statuses)\n```\n\n----------------------------------------\n\nTITLE: Filter and Group By Transforms with Plotly in Python\nDESCRIPTION: Creates a scatter plot using Plotly with filter and group by transforms applied to the Gapminder dataset. This example filters data for the year 2007 and groups points by continent with different colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/multiple-transforms/multiple-transforms.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\nimport pandas as pd\n\noff.init_notebook_mode(connected=False)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv\")\n\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\n\nopt = []\nopts = []\nfor i in range(0, len(colors)):\n    opt = dict(\n        target = df['continent'][[i]].unique(), value = dict(marker = dict(color = colors[i]))\n    )\n    opts.append(opt)\n\ndata = [dict(\n  type = 'scatter',\n  mode = 'markers',\n  x = df['lifeExp'],\n  y = df['gdpPercap'],\n  text = df['continent'],\n  hoverinfo = 'text',\n  opacity = 0.8,\n  marker = dict(\n      size = df['pop'],\n      sizemode = 'area',\n      sizeref = 200000\n  ),\n  transforms = [\n      dict(\n        type = 'filter',\n        target = df['year'],\n        orientation = '=',\n        value = 2007\n      ),\n      dict(\n        type = 'groupby',\n        groups = df['continent'],\n        styles = opts\n    )]\n)]\n\nlayout = dict(\n    yaxis = dict(\n        type = 'log'\n    )\n)\n\n\noff.iplot({'data': data, 'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check for the Plotly package installation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Get Unique Carriers\nDESCRIPTION: Extract unique airline carriers from the dataset\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf['carrier'].unique()\n```\n\n----------------------------------------\n\nTITLE: Using PreventUpdate in Dash Callbacks\nDESCRIPTION: This example shows how to use PreventUpdate to control when a callback updates outputs. This is useful for conditional updates or to prevent the callback from executing under certain conditions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dash.exceptions import PreventUpdate\n\n@app.callback(\n    Output('my-output', 'children'),\n    Input('my-input', 'value')\n)\ndef update_output(value):\n    if value is None or value == '':\n        raise PreventUpdate\n    return f'Output: {value}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout and Plotting\nDESCRIPTION: Sets up the plot layout and creates the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naxis = dict(showline=True,\n          zeroline=False,\n          gridcolor='#fff',\n          ticklen=4)\n\nlayout = go.Layout(\n    title='Iris Data set',\n    dragmode='select',\n    width=600,\n    height=600,\n    autosize=False,\n    hovermode='closest',\n    plot_bgcolor='rgba(240,240,240, 0.95)',\n    xaxis1=dict(axis),\n    xaxis2=dict(axis),\n    xaxis3=dict(axis),\n    xaxis4=dict(axis),\n    yaxis1=dict(axis),\n    yaxis2=dict(axis),\n    yaxis3=dict(axis),\n    yaxis4=dict(axis)\n)\n\nfig1 = dict(data=[trace1], layout=layout)\npy.iplot(fig1, filename='splom-iris1')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plotly Plot\nDESCRIPTION: Creates a simple line plot using Plotly with x and y coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/style-template.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\niplot([{'x': [1, 2, 3], 'y': [3, 1, 5]}])\n```\n\n----------------------------------------\n\nTITLE: Displaying a Presentation in Jupyter\nDESCRIPTION: This code renders the previously created presentation in a Jupyter notebook by generating an HTML iframe using the url_to_iframe function and displaying it with IPython's HTML display capability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_0 = url_to_iframe(pres_url_0, True)\nIPython.display.HTML(iframe_0)\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Graph with Fit Line in Python\nDESCRIPTION: Uses Plotly's embedding tool to display a graph with fit lines within a Python environment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('MattSundquist', '1337')\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes to Sankey Diagram in Plotly Python\nDESCRIPTION: This code fetches Sankey diagram data from a JSON file and adds nodes to the diagram. It sets up node properties such as padding, thickness, line color, labels, and colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport urllib, json\n\nurl = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json'\nresponse = urllib.urlopen(url)\ndata = json.loads(response.read())\n\ndata_trace = dict(\n    type='sankey',\n    domain = dict(\n      x =  [0,1],\n      y =  [0,1]\n    ),\n    orientation = \"h\",\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(\n        color = \"black\",\n        width = 0.5\n      ),\n      label =  data['data'][0]['node']['label'],\n      color =  data['data'][0]['node']['color']\n    )\n)\n\nlayout =  dict(\n    title = \"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\",\n    font = dict(\n      size = 10\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Publishing Plotly Documentation with Jupyter Lab\nDESCRIPTION: This code snippet demonstrates how to import required modules, add custom CSS styling, install the Plotly publisher package, and publish a Jupyter notebook as documentation. It configures display properties and metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/jupyter-lab-tools.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'jupyter-lab-tools.ipynb', 'python/jupyter-lab-tools/', 'IPython Widgets | plotly',\n    'Using Plotly FigureWidgets with Jupyter Lab',\n    title = 'Jupyter Lab with FigureWidget',\n    name = 'Jupyter Lab with FigureWidget',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-jupyterlab.png', \n    language='python', \n    display_as='chart_events', order=2)\n```\n\n----------------------------------------\n\nTITLE: Loading Eurovision Graph Data with igraph in Python\nDESCRIPTION: Imports the Eurovision Song Contest graph data from a GML file using the igraph library and assigns it to a Graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n\nG = ig.Graph.Read_GML('Eurovision15.gml')\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML and Publication for IPython - Python\nDESCRIPTION: This snippet displays custom HTML styles for the notebook interface and publishes the notebook to the specified Plotly directory for broader access.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish(\n    'basemap.ipynb', 'ipython-notebooks/basemap-maps/', 'Plotly maps with Matplotlib Basemap', \n    'An IPython Notebook showing how to make an interactive world map using plotly and Maplotlib Basemap')\n```\n\n----------------------------------------\n\nTITLE: Creating Stream ID Objects for Plotly in Python\nDESCRIPTION: This code creates stream ID objects for each token, which will be used to configure the streaming traces. The maxpoints parameter is set to 60, which limits the number of points displayed in the streaming visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstream_id1 = dict(token=token_1, maxpoints=60)\nstream_id2 = dict(token=token_2, maxpoints=60)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plotly Figure Data in Python\nDESCRIPTION: Gets a figure object from Plotly servers using get_figure() and extracts data for further analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Get figure object from Plotly servers\n# 'alexhp' is the username of the plot's maker\n# '68' is the unique file id corresponding to the plot (same as in URL)\nalexhp68 = py.get_figure('alexhp', '68')\n\n# Extract data object inside figure object\nalexhp68_data = alexhp68.get_data()\n\n# Make a list of distances:\n# distances are linked to the 'y' key in each trace (Scatter) object,\n# specify item [0] to extract value from list (of one item)\ndistances = [trace['y'][0] for trace in alexhp68_data]\n```\n\n----------------------------------------\n\nTITLE: Selecting Channels by Type\nDESCRIPTION: Uses MNE's pick_types function to select only magnetometer channels from the data, returning their indices for further processing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npicks = mne.pick_types(raw.info, meg='mag', exclude=[])\nprint(picks)\n```\n\n----------------------------------------\n\nTITLE: Creating Stream ID Object for Plotly\nDESCRIPTION: Sets up a stream ID object with the token and configures the maximum number of points to display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstream_id = dict(token=token, maxpoints=3)\nstream_id\n```\n\n----------------------------------------\n\nTITLE: Defining SISO Response Plotting Function in Python\nDESCRIPTION: This function creates a reusable plot for single-input-single-output (SISO) system responses using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef plot_siso_response(time, input, output, title='Time Response',\n                       x_lab='Time [s]', x_lim=None,\n                       input_y_lab='Input', input_y_lim=None,\n                       output_y_lab='Output', output_y_lim=None,\n                       subplots=True):\n    \"\"\"Plots a time history of the input and output of a SISO system.\"\"\"\n    \n    xaxis = gr.XAxis(title=x_lab, range=x_lim)\n    \n    if subplots:\n        yaxis = gr.YAxis(title=input_y_lab, range=input_y_lim, domain=[0.0, 0.49])\n        yaxis2 = gr.YAxis(title=output_y_lab, range=output_y_lim, domain=[0.51, 1.0])\n        layout = gr.Layout(title=title, xaxis=xaxis, yaxis=yaxis, yaxis2=yaxis2, showlegend=False)\n        \n        output_trace = gr.Scatter(name=output_y_lab, x=time, y=output, yaxis='y2')\n    else:\n        yaxis = gr.YAxis(range=output_y_lim)\n        layout = gr.Layout(title=title, xaxis=xaxis, yaxis=yaxis)\n        \n        output_trace = gr.Scatter(name=output_y_lab, x=time, y=output)\n\n    input_trace = gr.Scatter(name=input_y_lab, x=time, y=input)\n\n    data = gr.Data([input_trace, output_trace])\n    \n    fig = gr.Figure(data=data, layout=layout)\n    \n    return fig\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Server Settings for Gmail\nDESCRIPTION: Sets up the email configuration for sending the Plotly graphs via Gmail's SMTP server. Defines the sender, recipient, subject, and required SMTP settings including server host, port, username, and password.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nme  = 'chris@plot.ly'\nrecipient = 'chris@plot.ly'\nsubject = 'Graph Report'\n\nemail_server_host = 'smtp.gmail.com'\nport = 587\nemail_username = me\nemail_password = 'xxxxx'\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots - Plotly Python\nDESCRIPTION: This snippet shows how to create subplots with custom specifications using the Plotly tools, including adding scatter and heatmap traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))\n```\n\nLANGUAGE: python\nCODE:\n```\nfig.append_trace(box_1, 1, 1)\nfig.append_trace(box_2, 1, 2)\nfig.append_trace(heatmap, 2, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nfig['layout'].update(height=600, width=600, title='i <3 subplots')\npy.iplot(fig, filename='box_heatmap1')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Markowitz Portfolio Optimization in Python\nDESCRIPTION: Imports necessary libraries for portfolio optimization, including numpy for numerical operations, matplotlib for basic plotting, cvxopt for convex optimization, and pandas for data handling. Also sets a random seed and turns off solver progress printing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cvxopt as opt\nfrom cvxopt import blas, solvers\nimport pandas as pd\n\nnp.random.seed(123)\n\n# Turn off progress printing \nsolvers.options['show_progress'] = False\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream ID Object\nDESCRIPTION: Creates an instance of a Stream ID object with a specific token (stream ID) and maxpoints parameter, which limits the number of points displayed in the streaming plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get stream id from stream id list \nstream_id = stream_ids[0]\n\n# Make instance of stream id object \nstream = Stream(\n    token=stream_id,  # (!) link stream id to 'token' key\n    maxpoints=80      # (!) keep a max of 80 pts on screen\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Graph with Plotly in Python\nDESCRIPTION: Creates a private plot that only the owner can view. This requires a Plotly subscription to use.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename='privacy-private', sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Viewing Bad Channels\nDESCRIPTION: Displays the list of bad channels from the info dictionary, which are typically excluded from analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nraw.info['bads']\n```\n\n----------------------------------------\n\nTITLE: Publishing and Styling Documentation Page\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using the publisher module. Includes font loading and custom CSS implementation for documentation formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/slider-widget.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'slider-widget.ipynb', 'python/slider-widget/', 'IPython Widgets | plotly',\n    'Interacting with Plotly FigureWidgets using Sliders',\n    title = 'Slider Widget',\n    name = 'Slider Widget',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-slider.gif', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=20,\n    ipynb= '~notebook_demo/230')\n```\n\n----------------------------------------\n\nTITLE: Extract Email Dates\nDESCRIPTION: Creates a list of email dates by parsing the 'date' field from each message\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nall_dates = []\nmbox = mailbox.mbox(path)\nfor message in mbox:\n    all_dates.append( str( parse( message['date'] ) ).split(' ')[0] )\n```\n\n----------------------------------------\n\nTITLE: Hiding Diagonal Plots\nDESCRIPTION: Demonstrates how to hide diagonal scatter plots in the matrix.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntrace2 = copy.copy(trace1)\ntrace2['diagonal'].update(visible=False)\nfig2 = dict(data=[trace2], layout=layout)\npy.iplot(fig2, filename='splom-invisible-diagonal')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Tools in Python\nDESCRIPTION: This code imports the tools module from Plotly, which provides additional functionality for creating and manipulating Plotly figures.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\n```\n\n----------------------------------------\n\nTITLE: Splitting Iris Data into Features and Class Labels\nDESCRIPTION: This code splits the Iris dataframe into feature matrix X and class label vector y. The features include sepal length, sepal width, petal length, and petal width, while the class labels represent the three different iris species.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# split data table into data X and class labels y\n\nX = df.iloc[:,0:4].values\ny = df.iloc[:,4].values\n```\n\n----------------------------------------\n\nTITLE: Embedding a Continuous Streaming Plot\nDESCRIPTION: Embeds an example of a continuous streaming plot that has been running since March 2014, demonstrating Plotly's capability to support indefinite streaming.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Embed never-ending time series streaming plot\ntls.embed('streaming-demos','12')\n\n# Note that the time point correspond to internal clock of the servers, \n# that is UTC time.\n```\n\n----------------------------------------\n\nTITLE: Hazard Rate Estimation in Python\nDESCRIPTION: Implements Nelson-Aalen hazard estimation using Python's lifelines package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom lifelines.estimation import NelsonAalenFitter\n\nnaf = NelsonAalenFitter()\nnaf.fit(T, event_observed=C)\n\nnaf.plot(title='Nelson-Aalen Estimate')\n```\n\n----------------------------------------\n\nTITLE: Plotting SISO Response for Roll Error and Steer Angle\nDESCRIPTION: Generates an interactive plot that shows the relationship between roll error and steer angle in degrees over time using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_siso_response(time, np.rad2deg(thetae), np.rad2deg(delta),\n                           input_y_lab='Roll Error [deg]',\n                           output_y_lab='Steer Angle [deg]'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Surface Plot in Plotly\nDESCRIPTION: Defines a basic surface plot trace using the Z1 values and the Viridis colorscale without any lighting effects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Surface(z=Z1, colorscale='Viridis')\n```\n\n----------------------------------------\n\nTITLE: Checking DataFrame Type\nDESCRIPTION: Prints the type of the DataFrame to verify it's a Spark DataFrame object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(type(btd))\n```\n\n----------------------------------------\n\nTITLE: Creating Overlaid Histograms in Python with Plotly\nDESCRIPTION: This snippet shows how to create overlaid histograms by setting the 'barmode' parameter to 'overlay' in the layout. It plots two sets of 500 random data points with reduced opacity to show the overlap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\n\ntrace1 = go.Histogram(\n    x=x0,\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1,\n    opacity=0.75\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay')\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='overlaid histogram')\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret Graph with Plotly in Python\nDESCRIPTION: Creates a secret plot that can be viewed by anyone with the link, but won't appear in the Plotly feed, user profile, or search engines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename='privacy-secret', sharing='secret')\n```\n\n----------------------------------------\n\nTITLE: Polar Chart with Different Directions\nDESCRIPTION: Creates polar charts demonstrating clockwise and counterclockwise rotation directions with custom rotation angles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatterpolar(\n      mode = \"lines+markers\",\n      r = [1,2,3,4,5],\n      theta = [0,90,180,360,0],\n      line = dict(\n        color = \"#ff66ab\"\n      ),\n      marker = dict(\n        color = \"#8090c7\",\n        symbol = \"square\",\n        size = 8\n      ),\n      subplot = \"polar\",\n    ),\n    go.Scatterpolar(\n      mode = \"lines+markers\",\n      r = [1,2,3,4,5],\n      theta = [0,90,180,360,0],\n      line = dict(\n        color = \"#ff66ab\"\n      ),\n      marker = dict(\n        color = \"#8090c7\",\n        symbol = \"square\",\n        size = 8\n      ),\n      subplot = \"polar2\"\n    )\n  ]\n\n\nlayout = go.Layout(\n    showlegend = False,\n    polar = dict(\n      domain = dict(\n        x = [0,0.4],\n        y = [0,1]\n      ),\n      radialaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      ),\n      angularaxis = dict(\n        tickfont = dict(\n          size = 8\n        ),\n        rotation = 90,\n        direction = \"counterclockwise\"\n      )\n    ),\n    polar2 = dict(\n      domain = dict(\n        x = [0.6,1],\n        y = [0,1]\n      ),\n      radialaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      ),\n      angularaxis = dict(\n        tickfont = dict(\n          size = 8\n        ),\n        rotation = 90,\n        direction = \"clockwise\"\n      ),\n    )\n)\n\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-directions')\n```\n\n----------------------------------------\n\nTITLE: Customizing Row and Column Sizes in Plotly Table\nDESCRIPTION: Shows how to customize row heights and column widths in a table with complex formatting and multiple columns.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nvalues = [[['Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL<br>EXPENSES</b>']],\n[['Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad',\n  'Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad',\n  'Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad',\n  'Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad',\n  'Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad']]]\n\n\ntrace0 = go.Table(\n  columnorder = [1,2],\n  columnwidth = [80,400],\n  header = dict(\n    values = [['<b>EXPENSES</b><br>as of July 2017'],\n                  ['<b>DESCRIPTION</b>']],\n    line = dict(color = '#506784'),\n    fill = dict(color = '#119DFF'),\n    align = ['left','center'],\n    font = dict(color = 'white', size = 12),\n    height = 40\n  ),\n  cells = dict(\n    values = values,\n    line = dict(color = '#506784'),\n    fill = dict(color = ['#25FEFD', 'white']),\n    align = ['left', 'center'],\n    font = dict(color = '#506784', size = 12),\n    height = 30\n    ))\n\ndata = [trace0]\n\npy.iplot(data, filename = \"Row and Column Size\")\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Random Portfolios in Python\nDESCRIPTION: Creates a large number of random portfolios and calculates their expected returns and standard deviations. Uses list comprehension with the previously defined random_portfolio function to efficiently generate 500 different portfolios.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nn_portfolios = 500\nmeans, stds = np.column_stack([\n    random_portfolio(return_vec) \n    for _ in xrange(n_portfolios)\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Size and Margins\nDESCRIPTION: Demonstrates how to set explicit width, height, and margin values for a Plotly scatter plot. Includes customization of margin padding and background colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/sizing/sizing.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n    )\n]\nlayout = go.Layout(\n    autosize=False,\n    width=500,\n    height=500,\n    margin=go.layout.Margin(\n        l=50,\n        r=50,\n        b=100,\n        t=100,\n        pad=4\n    ),\n    paper_bgcolor='#7f7f7f',\n    plot_bgcolor='#c7c7c7'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='size-margins')\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Logarithmic Axes in Plotly\nDESCRIPTION: This code snippet demonstrates how to create a scatter plot with logarithmic scaling on both x and y axes using Plotly's Python library. It defines two scatter traces with different data patterns and configures the layout to use logarithmic scaling with automatic range determination.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/log/log-axes.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]\n)\ntrace2 = go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        type='log',\n        autorange=True\n    ),\n    yaxis=dict(\n        type='log',\n        autorange=True\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Initializing Survival Analysis Data and Plot in Python\nDESCRIPTION: Sets up survival analysis data for two DNA types and creates Kaplan-Meier plots using matplotlib. The code filters data by DNA type and fits survival curves for comparison.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nf2 = tongue.type==2\nT2 = tongue[f2]['time']\nC2 = tongue[f2]['delta']\n\nax = plt.subplot(111)\n\nkmf.fit(T, event_observed=C, label=['Type 1 DNA'])\nkmf.survival_function_.plot(ax=ax)\nkmf.fit(T2, event_observed=C2, label=['Type 2 DNA'])\nkmf.survival_function_.plot(ax=ax)\n\nplt.title('Lifespans of different tumor DNA profile')\n\nkmf2 = plt.gcf()\n```\n\n----------------------------------------\n\nTITLE: Setting Figure Title in Plotly\nDESCRIPTION: Sets the title of the Plotly figure to 'Torque and Fuel Efficience' using property assignment syntax.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.title = 'Torque and Fuel Efficience'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Streaming Tokens from Credentials in Python\nDESCRIPTION: This snippet retrieves streaming tokens from the credentials file using Plotly's tools. It selects two tokens from the end of the list to ensure they haven't been used before and prints them for verification.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream_tokens = tls.get_credentials_file()['stream_ids']\ntoken_1 = stream_tokens[-1]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens\ntoken_2 = stream_tokens[-2]   \nprint token_1\nprint token_2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edited Plotly Figure in Python\nDESCRIPTION: This snippet uses Plotly's get_figure function to retrieve a figure that was edited on the Plotly web interface. It requires the username and file ID of the edited plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Get figure object from Plotly's servers \nfig_styled = py.get_figure('PythonAPI', '61')\n```\n\n----------------------------------------\n\nTITLE: Defining Ribbon Colors in Chord Diagram\nDESCRIPTION: Initializes and customizes the colors for ribbons connecting different ideograms. Each ribbon is colored with the color of one of the two ideograms it connects, with some specific overrides.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nribbon_color=[L*[ideo_colors[k]] for k in range(L)]\n```\n\n----------------------------------------\n\nTITLE: Finding Matrix Determinant\nDESCRIPTION: Calculates the determinant of a 2x2 matrix using NumPy's linear algebra function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\ndet = np.linalg.det(matrix)\ndet\n```\n\n----------------------------------------\n\nTITLE: Implementing Specular Lighting on Surface Plots\nDESCRIPTION: Creates two surface plots with different specular values. Specular lighting creates bright spots on the plot surface, with values ranging from 0 to 2.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig = tls.make_subplots(rows=1, cols=2,specs=[[{'is_3d': True},{'is_3d': True} ]])\ntrace1 = go.Surface(z=Z1, colorscale='Viridis', lighting=dict(specular=0.2))\ntrace2 = go.Surface(z=Z2, colorscale='Viridis',showscale=False ,lighting=dict(specular=2))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Candlestick Example in IPython\nDESCRIPTION: Shows how to embed a Dash candlestick application in an IPython notebook using an IFrame. This displays the interactive Dash application hosted on an external server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-candlestickplot/\", width=\"100%\", height=\"750px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Longitude Data - Python\nDESCRIPTION: This snippet shifts longitude values from the range [0, 360] to [-180, 180] for better visualization and corresponds this shift to the air data array.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Shift 'lon' from [0,360] to [-180,180], make numpy array\ntmp_lon = np.array([lon[n]-360 if l>=180 else lon[n] \n                   for n,l in enumerate(lon)])  # => [0,180]U[-180,2.5]\n\ni_east, = np.where(tmp_lon>=0)  # indices of east lon\ni_west, = np.where(tmp_lon<0)   # indices of west lon\nlon = np.hstack((tmp_lon[i_west], tmp_lon[i_east]))  # stack the 2 halves\n\n# Correspondingly, shift the 'air' array\ntmp_air = np.array(air)\nair = np.hstack((tmp_air[:,i_west], tmp_air[:,i_east]))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly and Scientific Computing\nDESCRIPTION: Sets up the necessary Python imports for Plotly visualization and scientific computing libraries including NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-integration/python_Numerical_Integration.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Sets up custom styling for documentation display and publishes the notebook using the publisher module. Includes font loading and CSS customization for documentation appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorway/colorway.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'colorway.ipynb', 'python/colorway/', 'Colorway',\n    'How to set default trace colors with colorway.',\n    title = 'Colorway in Python | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/colorway.jpg', \n    language='python', \n    display_as='file_settings', \n    order=20,\n    ipynb= '~notebook_demo/256')\n```\n\n----------------------------------------\n\nTITLE: Getting URL for a Public Plotly Graph\nDESCRIPTION: Uses py.plot() to create a public plot and return its URL. This demonstrates an alternative to iplot() that returns the URL directly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-public', sharing='public')\n```\n\n----------------------------------------\n\nTITLE: Initialize Notebook Mode\nDESCRIPTION: Initializes Plotly notebook mode for inline plotting in Jupyter notebooks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/style-template.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninit_notebook_mode()\n```\n\n----------------------------------------\n\nTITLE: Range Loop Example\nDESCRIPTION: Demonstrates a simple loop that prints numbers from 0 to 99.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/style-template.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(100):\n    print i\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting Alpha Complex and Delaunay Triangulation\nDESCRIPTION: Final steps to compute the alpha complex and add both the Delaunay triangulation and alpha shape to the plot. This includes filling the triangles in the alpha complex for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nalpha_complex=get_alpha_complex(0.15, pts, tri.simplices)\n```\n\nLANGUAGE: python\nCODE:\n```\nX,Y=Plotly_data(pts, tri.simplices)# get data for Delaunay triangulation\nfigure.append_trace(make_trace(X, Y), 1, 1) \n\n\nX,Y=Plotly_data(pts, alpha_complex)# data for alpha complex\nfigure.append_trace(make_trace(X, Y), 1, 2) \n```\n\nLANGUAGE: python\nCODE:\n```\nfor s in alpha_complex: #fill in the triangles of the alpha complex\n    A=pts[s[0]]\n    B=pts[s[1]]\n    C=pts[s[2]]\n    figure['layout']['shapes'].append(dict(path='M '+str(A[0])+',' +str(A[1])+' '+'L '+\\\n                                                 str(B[0])+', '+str(B[1])+ ' '+'L '+\\\n                                                 str(C[0])+', '+str(C[1])+' Z',\n                                           fillcolor='rgba(173,216,230, 0.5)',\n                                           line=dict(color=colors[1], width=1.25),\n                                           xref='x2',\n                                           yref='y2'\n                                           )\n                                     )\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(figure, filename='2D-AlphaS-ex', width=850)\n```\n\n----------------------------------------\n\nTITLE: Creating Subplot Structure for MCMC Visualization in Python\nDESCRIPTION: Creates a subplot structure with 3 rows and 2 columns using Plotly's make_subplots function for organizing the trace and histogram visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfig5 = tls.make_subplots(3, 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Title Font Family in Plotly\nDESCRIPTION: Changes the font family of the figure title to 'Rockwell'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.titlefont.family = 'Rockwell'\n```\n\n----------------------------------------\n\nTITLE: Getting Help for py.iplot() Function\nDESCRIPTION: Python code to display the help documentation for the py.iplot() function, providing details on its parameters and usage in Jupyter notebooks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nhelp(py.iplot)\n```\n\n----------------------------------------\n\nTITLE: Plotting a DataFrame Row as a Bar Chart with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates how to plot a single row of a DataFrame as a bar chart using Cufflinks. A specific row is selected via a Pandas DataFrame. Dependencies include Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.random.rand(10, 4), columns=['A', 'B', 'C', 'D'])\nrow = df.ix[5]\nrow.iplot(kind='bar', filename='cufflinks/bar-chart-row')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Analysis\nDESCRIPTION: Initial setup importing necessary Python libraries including Plotly, NumPy, Pandas, and SciPy for data analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Studio Enterprise with Privacy Settings\nDESCRIPTION: Extended configuration for Chart Studio Enterprise that includes both custom domains and privacy settings, making plots private by default.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nchart_studio.tools.set_config_file(\n    plotly_domain='https://plotly.your-company.com',\n    plotly_api_domain='https://plotly.your-company.com',\n    plotly_streaming_domain='https://stream-plotly.your-company.com',\n    world_readable=False,\n    sharing='private'\n)\n```\n\n----------------------------------------\n\nTITLE: Getting URL for a Private Plotly Graph\nDESCRIPTION: Uses py.plot() to create a private plot and return its URL. Only the owner can view this private plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-private', sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Documentation\nDESCRIPTION: Shows how to access help documentation for Plotly's offline plotting functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as offline\nhelp(offline.plot)\n```\n\n----------------------------------------\n\nTITLE: Updating Axis Labels for Bioassay Plots\nDESCRIPTION: Updates the y-axis titles for the bioassay parameter plots to clearly label each parameter (intercept and slope) in the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfig9['layout'].update(\n    yaxis1=pgo.YAxis(title='intercept'),\n    yaxis3=pgo.YAxis(title='slope')\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Root Locus for Positive Feedback in Python\nDESCRIPTION: This code calculates and plots the root locus for positive feedback gains using Python Control and the custom plotting function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npos_feedback_roots, pos_feedback_gains = cn.root_locus(theta_delta, kvect=np.linspace(0.0, -20.0, num=500))\npl.iplot(plot_root_locus(pos_feedback_gains, pos_feedback_roots))\n```\n\n----------------------------------------\n\nTITLE: GGSurv Helper Function Implementation\nDESCRIPTION: Defines a comprehensive helper function for creating customized survival plots using ggplot2. Handles both single and multiple strata cases with various styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%%R\n\nggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',\n                   cens.col = 'red', lty.est = 1, lty.ci = 2,\n                   cens.shape = 3, back.white = F, xlab = 'Time',\n                   ylab = 'Survival', main = ''){\n\n  library(ggplot2)\n  strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))\n  stopifnot(length(surv.col) == 1 | length(surv.col) == strata)\n  stopifnot(length(lty.est) == 1 | length(lty.est) == strata)\n\n  ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',\n                       cens.col = 'red', lty.est = 1, lty.ci = 2,\n                       cens.shape = 3, back.white = F, xlab = 'Time',\n                       ylab = 'Survival', main = ''){\n\n    dat <- data.frame(time = c(0, s$time),\n                      surv = c(1, s$surv),\n                      up = c(1, s$upper),\n                      low = c(1, s$lower),\n                      cens = c(0, s$n.censor))\n    dat.cens <- subset(dat, cens != 0)\n\n    col <- ifelse(surv.col == 'gg.def', 'black', surv.col)\n\n    pl <- ggplot(dat, aes(x = time, y = surv)) +\n      xlab(xlab) + ylab(ylab) + ggtitle(main) +\n      geom_step(col = col, lty = lty.est)\n\n    pl <- if(CI == T | CI == 'def') {\n      pl + geom_step(aes(y = up), color = col, lty = lty.ci) +\n        geom_step(aes(y = low), color = col, lty = lty.ci)\n    } else (pl)\n\n    pl <- if(plot.cens == T & length(dat.cens) > 0){\n      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,\n                       col = cens.col)\n    } else if (plot.cens == T & length(dat.cens) == 0){\n      stop ('There are no censored observations')\n    } else(pl)\n\n    pl <- if(back.white == T) {pl + theme_bw()\n    } else (pl)\n    pl\n  }\n\n  ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',\n                       cens.col = 'red', lty.est = 1, lty.ci = 2,\n                       cens.shape = 3, back.white = F, xlab = 'Time',\n                       ylab = 'Survival', main = '') {\n    n <- s$strata\n\n    groups <- factor(unlist(strsplit(names\n                                     (s$strata), '='))[seq(2, 2*strata, by = 2)])\n    gr.name <-  unlist(strsplit(names(s$strata), '='))[1]\n    gr.df <- vector('list', strata)\n    ind <- vector('list', strata)\n    n.ind <- c(0,n); n.ind <- cumsum(n.ind)\n    for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]\n\n    for(i in 1:strata){\n      gr.df[[i]] <- data.frame(\n        time = c(0, s$time[ ind[[i]] ]),\n        surv = c(1, s$surv[ ind[[i]] ]),\n        up = c(1, s$upper[ ind[[i]] ]),\n        low = c(1, s$lower[ ind[[i]] ]),\n        cens = c(0, s$n.censor[ ind[[i]] ]),\n        group = rep(groups[i], n[i] + 1))\n    }\n\n    dat <- do.call(rbind, gr.df)\n    dat.cens <- subset(dat, cens != 0)\n\n    pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +\n      xlab(xlab) + ylab(ylab) + ggtitle(main) +\n      geom_step(aes(col = group, lty = group))\n\n    col <- if(length(surv.col == 1)){\n      scale_colour_manual(name = gr.name, values = rep(surv.col, strata))\n    } else{\n      scale_colour_manual(name = gr.name, values = surv.col)\n    }\n\n    pl <- if(surv.col[1] != 'gg.def'){\n      pl + col\n    } else {pl + scale_colour_discrete(name = gr.name)}\n\n    line <- if(length(lty.est) == 1){\n      scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))\n    } else {scale_linetype_manual(name = gr.name, values = lty.est)}\n\n    pl <- pl + line\n\n    pl <- if(CI == T) {\n      if(length(surv.col) > 1 && length(lty.est) > 1){\n        stop('Either surv.col or lty.est should be of length 1 in order\n             to plot 95% CI with multiple strata')\n      }else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){\n        pl + geom_step(aes(y = up, color = group), lty = lty.ci) +\n          geom_step(aes(y = low, color = group), lty = lty.ci)\n      } else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +\n               geom_step(aes(y = low,lty = group), col = surv.col)}\n    } else {pl}\n\n\n    pl <- if(plot.cens == T & length(dat.cens) > 0){\n      pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,\n                      col = cens.col)\n    } else if (plot.cens == T & length(dat.cens) == 0){\n      stop ('There are no censored observations')\n    } else(pl)\n\n    pl <- if(back.white == T) {pl + theme_bw()\n    } else (pl)\n    pl\n  }\n  pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,\n                                  cens.col, lty.est, lty.ci,\n                                  cens.shape, back.white, xlab,\n                                  ylab, main)\n  } else {ggsurv.m(s, CI, plot.cens, surv.col ,\n                   cens.col, lty.est, lty.ci,\n                   cens.shape, back.white, xlab,\n                   ylab, main)}\n  pl\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linked Brushing with Parallel Categories and Scatter Plot\nDESCRIPTION: Demonstrates how to create linked brushing between a parallel categories diagram and scatter plot using callbacks for selections and clicks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncars_df = pd.read_csv(\n    'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv')\n\n# Build parcats dimensions\ncategorical_dimensions = [\n  'body-style',\n  'drive-wheels',\n  'fuel-type'\n];\n\ndimensions = [\n    dict(values=cars_df[label], label=label)\n    for label in categorical_dimensions\n]\n\n# Build colorscale\ncolor = np.zeros(len(cars_df), dtype='uint8')\ncolorscale = [[0, 'gray'], [1, 'firebrick']]\n\n# Build figure as FigureWidget\nfig = go.FigureWidget(\n    data=[\n        go.Scatter(\n            x=cars_df.horsepower,\n            y=cars_df['highway-mpg'],\n            marker={'color': 'gray'},\n            mode='markers',\n            selected={'marker': {'color': 'firebrick'}},\n            unselected={'marker': {'opacity': 0.3}}),\n\n        go.Parcats(\n            domain={'y': [0, 0.4]},\n            dimensions=dimensions,\n            line={\n                'colorscale': colorscale,\n                'cmin': 0,\n                'cmax': 1,\n                'color': color,\n                'shape': 'hspline'})\n    ],\n    layout=go.Layout(\n        height=800,\n        xaxis={'title': 'Horsepower'},\n        yaxis={'title': 'MPG',\n               'domain': [0.6, 1]},\n        dragmode='lasso',\n        hovermode='closest')\n)\n\n# Update color callback\ndef update_color(trace, points, state):\n    # Update scatter selection\n    fig.data[0].selectedpoints = points.point_inds\n    \n    # Update parcats colors\n    new_color = np.zeros(len(cars_df), dtype='uint8')\n    new_color[points.point_inds] = 1\n    fig.data[1].line.color = new_color\n    \n# Register callback on scatter selection...\nfig.data[0].on_selection(update_color)\n# and parcats click\nfig.data[1].on_click(update_color)\n\n# Display figure\nfig\n```\n\n----------------------------------------\n\nTITLE: Figure and Animation Configuration\nDESCRIPTION: Defines the plot layout, styling, and animation frames for the interactive visualization\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/filled-area-animation/filled-area-animation.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata=[dict(type='scatter',\n           xsrc=grid.get_column_reference('x1'),\n           ysrc= grid.get_column_reference('y1'),\n           name='AAPL',\n           mode='lines',\n           line=dict(color= 'rgb(114, 186, 59)'),\n           fill='tozeroy',\n           fillcolor='rgba(114, 186, 59, 0.5)')]\n\naxis=dict(ticklen=4,\n          mirror=True,\n          zeroline=False,\n          showline=True,\n          autorange=False,\n          showgrid=False)\n\nlayout = dict(title='AAPL Daily Stock Price',\n              font=dict(family='Balto'),\n              showlegend=False,\n              autosize=False,\n              width=800,\n              height=400,\n              xaxis=dict(axis, **{'nticks':12, 'tickangle':-45,\n                                  'range': [to_unix_time(datetime(2015, 2, 17)),\n                                            to_unix_time(datetime(2016, 11, 30))]}),\n              yaxis=dict(axis, **{'title': '$', 'range':[0,170]}),\n              updatemenus=[dict(type='buttons',\n                                showactive=False,\n                                y=1,\n                                x=1.1,\n                                xanchor='right',\n                                yanchor='top',\n                                pad=dict(t=0, r=10),\n                                buttons=[dict(label='Play',\n                                              method='animate',\n                                              args=[None, dict(frame=dict(duration=50, redraw=False), \n                                                               transition=dict(duration=0),\n                                                               fromcurrent=True,\n                                                               mode='immediate')])])])\n\nframes=[{'data':[{'xsrc': grid.get_column_reference('x{}'.format(k + 1)),\n                  'ysrc': grid.get_column_reference('y{}'.format(k + 1))}],\n         'traces': [0]\n        } for k in range(len(appl.Date) - 1)]\n\nfig=dict(data=data, layout=layout, frames=frames)\npy.icreate_animations(fig, 'AAPL-stockprice' + str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Creating Heading to Steer Transfer Function\nDESCRIPTION: Defines the transfer function that relates steering angle to heading angle, which is a simple integrator with a gain proportional to velocity and inverse to wheelbase.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npsi_delta = cn.TransferFunction([v], [b, 0])\npsi_delta\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading Plotly Grid\nDESCRIPTION: Creates a basic Plotly grid with two columns of data and uploads it to Plotly. Uses Column and Grid objects to structure the data before upload.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.plotly as py\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.grid_objs import Column, Grid\n\nfrom datetime import datetime as dt\nimport numpy as np\nfrom IPython.display import Image\n\ncolumn_1 = Column(['a', 'b', 'c'], 'column 1')\ncolumn_2 = Column([1, 2, 3], 'column 2') # Tabular data can be numbers, strings, or dates\ngrid = Grid([column_1, column_2])\nurl = py.grid_ops.upload(grid, \n                         filename='grid_ex_'+str(dt.now()), \n                         world_readable=True, \n                         auto_open=False)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Demo Video of Streaming\nDESCRIPTION: Imports and displays a YouTube video demonstrating the streaming plot functionality in action using IPython's video display capabilities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('OVQ2Guypp_M', width='100%', height='350')\n```\n\n----------------------------------------\n\nTITLE: Performing Eigendecomposition on Covariance Matrix\nDESCRIPTION: This snippet computes the eigenvectors and eigenvalues of the covariance matrix using NumPy's linalg.eig function. In PCA, eigenvectors represent the principal components (directions of maximum variance), while eigenvalues indicate the amount of variance explained by each principal component.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncov_mat = np.cov(X_std.T)\n\neig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Parameter Visualization in Python\nDESCRIPTION: This code creates six Plotly traces for visualizing the sampled parameters (lambda1, lambda2, and tau). It includes scatter plots and histograms for each parameter, setting up the layout for a 3x2 subplot figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = pgo.Scatter(\n    y=lambda1,\n    xaxis='x1',\n    yaxis='y1',\n    line=pgo.Line(width=1),\n    marker=pgo.Marker(color=color)\n)\n\ntrace2 = pgo.Histogram(\n    x=lambda1,\n    xaxis='x2',\n    yaxis='y2',\n    line=pgo.Line(width=0.5),\n    marker=pgo.Marker(color=color)\n)\n\ntrace3 = pgo.Scatter(\n    y=lambda2,\n    xaxis='x3',\n    yaxis='y3',\n    line=pgo.Line(width=1),\n    marker=pgo.Marker(color=color)\n)\n\ntrace4 = pgo.Histogram(\n    x=lambda2,\n    xaxis='x4',\n    yaxis='y4',\n    marker=pgo.Marker(color=color)\n)\n\ntrace5 = pgo.Scatter(\n    y=tau,\n    xaxis='x5',\n    yaxis='y5',\n    line=pgo.Line(width=1),\n    marker=pgo.Marker(color=color)\n)\n\ntrace6 = pgo.Histogram(\n    x=tau,\n    xaxis='x6',\n    yaxis='y6',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Normal Distribution Data\nDESCRIPTION: Generate two sets of random data from normal distributions with different means (0 and 2) and same variance (1), with 50 points each.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata1 = np.random.normal(0, 1, size=50)\ndata2 = np.random.normal(2, 1, size=50)\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Graphs to Folders in Python\nDESCRIPTION: This snippet demonstrates how to save a Plotly graph to a specific folder in your Plotly account. It creates a scatter plot and saves it to a folder named 'my-graphs'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2],\n        y=[3, 4]\n    )\n]\n\nplot_url = py.plot(data, filename='my-graphs/my plot')\n```\n\n----------------------------------------\n\nTITLE: Combining Plotly Traces into Data Object in Python\nDESCRIPTION: This snippet combines the previously created Plotly traces into a single Data object for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndata4 = pgo.Data([trace1, trace2, trace3, trace4, trace5, trace6])\n```\n\n----------------------------------------\n\nTITLE: Numerical Integration of Sine Function with Plotly Visualization\nDESCRIPTION: Demonstrates numerical integration of sin(x) from 0 to 2π using NumPy's trapz function and creates an interactive plot using Plotly. The code generates x and y values, performs the integration, and displays the result with an annotation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-integration/python_Numerical_Integration.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='lines',\n)\n\n# use numpy's built in trapezoid-rule integration tool\ndy = np.trapz(y, x)\n\nannotation = go.Annotation(\n    x=4.5,\n    y=1.25,\n    text='Numerical Integration of sin(x) is approximately %s' % (dy),\n    showarrow=False\n)\n\nlayout = go.Layout(\n    annotations=[annotation]\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\n\npy.iplot(fig, filename='1d-numerical-integration')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Attributes in Python\nDESCRIPTION: Lists available edge attributes from the graph's edge sequence.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nG.es.attributes()# the edge attributes\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Parallel Categories Diagram Notebook\nDESCRIPTION: This code snippet sets up the display environment and publishes the notebook containing the parallel categories diagram. It imports necessary libraries, installs the publisher package, and specifies metadata for the publication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'parcats.ipynb', 'python/parallel-categories-diagram/', 'Parallel Categories Diagram',\n    'How to make parallel categories diagrams in Python with Plotly.',\n    title = 'Python Parallel Categories | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/parcats.jpg',\n    language='python',\n    display_as='statistical', order=10.3,\n    uses_plotly_offline=True,\n    ipynb= '~notebook_demo/258')\n```\n\n----------------------------------------\n\nTITLE: Checking DataFrame Shape in Python\nDESCRIPTION: Returns the dimensions of the cars_df DataFrame as a tuple containing (rows, columns).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncars_df.shape\n```\n\n----------------------------------------\n\nTITLE: Export Figure as SVG\nDESCRIPTION: Convert Plotly figure to SVG format and display it.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%%time\nimg_bytes = pio.to_image(fig, format='svg')\nfrom IPython.display import SVG, display\ndisplay(SVG(img_bytes))\n```\n\n----------------------------------------\n\nTITLE: Enterprise Server Configuration\nDESCRIPTION: Configure Plotly to work with Enterprise server by setting custom domains.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.tools.set_config_file(plotly_domain='https://plotly.your-company.com',\n                             plotly_streaming_domain='https://stream-plotly.your-company.com',\n                             world_readable=False,\n                             sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Setting up custom styling and publishing configuration for the documentation, including font loading and publisher settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'BigQuery-Plotly.ipynb', 'python/google_big_query/', 'Google Big-Query',\n    'How to make your-tutorial-chart plots in Python with Plotly.',\n    title = 'Google Big Query | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/bigquery2.jpg', \n    language='python', page_type='example_index',\n    display_as='databases', order=7)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication for Plotly REST API\nDESCRIPTION: Defines variables for authentication with Plotly's REST API, including username, API key, and request headers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nusername = 'private_plotly' # Replace with YOUR USERNAME\napi_key = 'k0yy0ztssk' # Replace with YOUR API KEY\n\nauth = HTTPBasicAuth(username, api_key)\nheaders = {'Plotly-Client-Platform': 'python'}\n\npage_size = 500\n```\n\n----------------------------------------\n\nTITLE: Color Model Exploration\nDESCRIPTION: Demonstrates different ways of specifying colors in Plotly figures\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfig['data'][1]['line']['color']\nfig['layout']['plot_bgcolor']\nfig['layout']['xaxis']['gridcolor']\n```\n\n----------------------------------------\n\nTITLE: Formatting Hover Text in Plotly\nDESCRIPTION: Shows how to format hover text using layout settings and hoverformat property for numerical values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x = [1,2,3,4,5],\n        y = [2.02825,1.63728,6.83839,4.8485,4.73463],\n        hoverinfo = 'y',\n        marker = dict(\n            color = 'green'\n        ),\n        showlegend = False\n    )\n]\n\nlayout = go.Layout(\n    title = \"Set hover text formatting<br><a href= https://github.com/d3/d3-time-format/blob/master/README.md#locale_format>https://github.com/d3/d3-time-format/blob/master/README.md#locale_format</a>\",\n    titlefont = dict(\n        size = 10\n    ),\n    xaxis = dict(\n        zeroline = False\n    ),\n    yaxis = dict(\n        hoverformat = '.2f'\n    )\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"format-hover-text\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Metropolis-Hastings Algorithm for Parameter Estimation in Python\nDESCRIPTION: Implementation of the Metropolis-Hastings MCMC algorithm for Bayesian parameter estimation. The function performs random-walk proposals and accepts/rejects based on the posterior probability ratio, generating a trace of parameter values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nrnorm = np.random.normal\nrunif = np.random.rand\n\ndef metropolis(n_iterations, initial_values, prop_var=1):\n\n    n_params = len(initial_values)\n            \n    # Initial proposal standard deviations\n    prop_sd = [prop_var]*n_params\n    \n    # Initialize trace for parameters\n    trace = np.empty((n_iterations+1, n_params))\n    \n    # Set initial values\n    trace[0] = initial_values\n        \n    # Calculate joint posterior for initial values\n    current_log_prob = calc_posterior(*trace[0])\n    \n    # Initialize acceptance counts\n    accepted = [0]*n_params\n    \n    for i in range(n_iterations):\n    \n        if not i%1000: print('Iteration %i' % i)\n    \n        # Grab current parameter values\n        current_params = trace[i]\n    \n        for j in range(n_params):\n    \n            # Get current value for parameter j\n            p = trace[i].copy()\n    \n            # Propose new value\n            if j==2:\n                # Ensure tau is positive\n                theta = np.exp(rnorm(np.log(current_params[j]), prop_sd[j]))\n            else:\n                theta = rnorm(current_params[j], prop_sd[j])\n            \n            # Insert new value \n            p[j] = theta\n    \n            # Calculate log posterior with proposed value\n            proposed_log_prob = calc_posterior(*p)\n    \n            # Log-acceptance rate\n            alpha = proposed_log_prob - current_log_prob\n    \n            # Sample a uniform random variate\n            u = runif()\n    \n            # Test proposed value\n            if np.log(u) < alpha:\n                # Accept\n                trace[i+1,j] = theta\n                current_log_prob = proposed_log_prob\n                accepted[j] += 1\n            else:\n                # Reject\n                trace[i+1,j] = trace[i,j]\n                \n    return trace, accepted\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly for Interactive Visualization in Python\nDESCRIPTION: Imports Plotly and cufflinks libraries for creating interactive visualizations of portfolio data. This enables more sophisticated and interactive charting compared to matplotlib.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport cufflinks\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Figure Sizing and Layout Update\nDESCRIPTION: Demonstrates how to modify figure size and update layout properties while maintaining aspect ratio\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Compute width-heigth ratio\nratio = float(fig['layout']['width']) / fig['layout']['height']\n\nnew_width = 650                    # set new width (in pixels)\nnew_height = int(new_width/ratio)  # (!) set new height, must be an integer\n\n# Update layout object\nfig['layout'].update(\n    autosize=False,  # allow custom size (set already, only for completeness here)\n    width=new_width,    # link new width value\n    height=new_height,  # link new height value\n    font=Font(size=7),       # update global font size\n    titlefont=Font(size=12)  #  as well as the title font size \n)\n```\n\n----------------------------------------\n\nTITLE: Plotting a Bar Chart from a Pandas Series with Cufflinks in Python\nDESCRIPTION: This snippet plots a bar chart from a Pandas Series using Cufflinks. It specifies attributes like kind, yTitle, title, and filename. Plotly and Cufflinks are required dependencies.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nseries.iplot(kind='bar', yTitle='Number of Complaints', title='NYC 311 Complaints',\n             filename='cufflinks/categorical-bar-chart')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plotly Figure Object\nDESCRIPTION: Shows how to get a figure object from Plotly's servers using get_figure function\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get figure object from Plotly's servers\n#   Quartz is username of the graph's maker,\n#   7 is the graph's unique id number (either a string or an integer)\nQuartz7 = py.get_figure('Quartz', '7')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Trisurf Support\nDESCRIPTION: Verifies the installed Plotly version to ensure compatibility with trisurf plots, which require version 1.11.0 or newer.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/tri-surf/trisurf.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying Legend for Single Trace Plot in Plotly with Python\nDESCRIPTION: This snippet demonstrates how to force the legend to appear in a Plotly chart with only one trace. It uses the 'showlegend' parameter in the layout object to ensure the legend is visible.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ndata = [trace0]\nlayout = go.Layout(showlegend=True)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='show-legend')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Marker Opacity in Plotly\nDESCRIPTION: Reduces marker opacity to 0.2 to address overplotting and reveal density patterns.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nscatter.marker.opacity = 0.2\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Discussion Interface Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of Plotly's discussion interface for collaborative commenting on graphs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nImage(url = 'http://i.imgur.com/OqXKs0r.png')\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Email Template for Plotly Graphs\nDESCRIPTION: Constructs an HTML email template that formats Plotly graphs with interactive links. The template includes the graph as an image, adds a caption, and provides a link to the interactive version. It uses the .png magic URL to ensure the latest version of each graph is displayed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ntemplate = (''\n    '<a href=\"{graph_url}\" target=\"_blank\">' # Open the interactive graph when you click on the image\n        '<img src=\"{graph_url}.png\">'        # Use the \".png\" magic url so that the latest, most-up-to-date image is included\n    '</a>'\n    '{caption}'                              # Optional caption to include below the graph\n    '<br>'                                   # Line break\n    '<a href=\"{graph_url}\" style=\"color: rgb(190,190,190); text-decoration: none; font-weight: 200;\" target=\"_blank\">'\n        'Click to comment and see the interactive graph'  # Direct readers to Plotly for commenting, interactive graph\n    '</a>'\n    '<br>'\n    '<hr>'                                   # horizontal line\n'')\n\nemail_body = ''\nfor graph in graphs:\n    _ = template\n    _ = _.format(graph_url=graph, caption='')\n    email_body += _\n    \ndisplay(HTML(email_body))\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Scatter Plot with Colorscaling in Python using Plotly\nDESCRIPTION: This snippet shows how to create a 3D scatter plot with color mapping based on z-values. It uses the Viridis colorscale to map colors to the data points, demonstrating how to visualize an additional dimension through color in a 3D plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-scatter/3d_scatter.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx, y, z = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 400).transpose()\n\ntrace1 = go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=z,                # set color to an array/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-scatter-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Milk Production Data with Plotly\nDESCRIPTION: This code loads milk production data from a CSV file, converts it to a NumPy array, creates a table using Plotly's figure factory, and displays it.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-detection/python-Baseline-Detection.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = np.asarray(time_series)\n\ndf = milk_data[0:15]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Creating Annotation Function for Graph Visualization in Python\nDESCRIPTION: Defines a helper function to create text annotations for the graph visualization with consistent formatting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef make_annotation(anno_text, y_coord):\n    return dict(showarrow=False,\n                      text=anno_text,\n                      xref='paper',\n                      yref='paper',\n                      x=0,\n                      y=y_coord,\n                      xanchor='left',\n                      yanchor='bottom',\n                      font=dict(size=12)\n                     )\n```\n\n----------------------------------------\n\nTITLE: Disabling Hover Text in Plotly Charts\nDESCRIPTION: This example shows how to disable hover text for a trace in a Plotly chart by setting the 'hoverinfo' parameter to 'none'. This is useful when you want to prevent hover information from appearing on certain elements of your visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\ntrace = dict(\n    x=[1, 2, 3,],\n    y=[10, 30, 15],\n    type='scatter',\n    name='first trace',\n    hoverinfo='none'\n)\n\npy.iplot([trace], filename='hoverinfo=none')\n```\n\n----------------------------------------\n\nTITLE: Getting Stream Tokens\nDESCRIPTION: Retrieves streaming tokens from credentials file for real-time data streaming\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream_tokens = tls.get_credentials_file()['stream_ids']\ntoken_1 = stream_tokens[-1]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens\ntoken_2 = stream_tokens[-2]   \nprint token_1\nprint token_2\n```\n\n----------------------------------------\n\nTITLE: Verifying Eigenvector Unit Length\nDESCRIPTION: Validates that all eigenvectors have unit length of 1 using NumPy testing functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor ev in eig_vecs:\n    np.testing.assert_array_almost_equal(1.0, np.linalg.norm(ev))\nprint('Everything ok!')\n```\n\n----------------------------------------\n\nTITLE: Updating Line Styles for Multiple Traces in Python\nDESCRIPTION: Updates line styles including color, width and opacity for all traces in a figure using the update() method.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Make a dictionary linking the 'line' key to a Line object\nstyle = dict(\n    line=Line(\n        color='blue', \n        width=0.3, \n        opacity=0.7\n    )\n)\n\n# Update all traces linked to 'data'!\nfig['data'].update(style)\n```\n\n----------------------------------------\n\nTITLE: Getting and Styling a Plotly Figure\nDESCRIPTION: This code snippet retrieves a Plotly figure using its username and graph ID, removes any existing styling using `fig.strip_style()`, and then displays the styled figure using `py.iplot()`. It demonstrates how to modify a Plotly graph programmatically.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfig = py.get_figure('RgraphingAPI', '1457')\nfig.strip_style()\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating a Ternary Scatter Plot in Python with Plotly\nDESCRIPTION: Processes the scatter data and creates a ternary scatter plot using Plotly. The code extracts the a, b, and c coordinates for each point and configures the plot layout with custom axis settings and marker styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\na_list = []\nb_list = []\nc_list = []\ntext = []\n\nfor raw_data in scatter_data:\n    data = clean_data(raw_data)\n    text.append(data[0])\n    c_list.append(data[1][0])\n    a_list.append(data[1][1])\n    b_list.append(data[1][2])\n    \ntrace1 = dict(type='scatterternary',\n              text=text,\n              a=a_list,\n              b=b_list,\n              c=c_list,\n              mode='markers',\n              marker={'symbol': 100,\n                      'color': 'green',\n                      'size': 10},\n)\n\nlayout = {\n    'title': 'Ternary Scatter Plot',\n    'ternary':\n        {\n        'sum':1,\n        'aaxis':{'title': 'X', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n        'baxis':{'title': 'W', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n        'caxis':{'title': 'S', 'min': 0.01, 'linewidth':2, 'ticks':'outside' }\n    },\n    'showlegend': False\n}\n\nscatter_fig = dict(data=[trace1], layout=layout)\npy.iplot(scatter_fig)\n```\n\n----------------------------------------\n\nTITLE: Using Plotly with Pandas for Scatter Plot Visualization\nDESCRIPTION: Python example demonstrating how to use Plotly with Pandas to create a scatter plot from CSV data. The example loads gapminder data, creates a scatter plot of GDP vs life expectancy, and displays it online.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')\n\nfig = go.Figure(go.Scatter(x=df.gdpPercap, y=df.lifeExp, text=df.country, mode='markers', name='2007'))\nfig.update_xaxes(title_text='GDP per Capita', type='log')\nfig.update_yaxes(title_text='Life Expectancy')\n\npy.iplot(fig, filename='pandas-multiple-scatter')\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Private Plotly Graphs\nDESCRIPTION: Builds an HTML email template specifically for including private/secret Plotly graphs. Uses a direct link with a share_key parameter to access unlisted graphs that require specific permissions to view.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ntemplate = (''\n    '<a href=\"{graph_url}\" target=\"_blank\">' # Open the interactive graph when you click on the image\n        '<img src=\"{graph_url}\">'        # Use the \".png\" magic url so that the latest, most-up-to-date image is included\n    '</a>'\n    '{caption}'                              # Optional caption to include below the graph\n    '<br>'                                   # Line break\n    '<a href=\"{graph_url}\" style=\"color: rgb(190,190,190); text-decoration: none; font-weight: 200;\" target=\"_blank\">'\n        'Click to comment and see the interactive graph'  # Direct readers to Plotly for commenting, interactive graph\n    '</a>'\n    '<br>'\n    '<hr>'                                   # horizontal line\n'')\n\nemail_body = ''\ngraph = 'https://plotly.com/~chelsea_lyn/17461.png?share_key=3kCBg9awEny15vobuAP5Up'\n_ = template\n_ = _.format(graph_url=graph, caption='')\nemail_body += _\n\ndisplay(HTML(email_body))\n```\n\n----------------------------------------\n\nTITLE: Plotting Without Auto-Opening Browser\nDESCRIPTION: Code demonstrating how to create a plot without automatically opening the browser.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# (@) Make Plotly plot but do no open a new tab\npy.plot(data, filename='s0_first_plot', auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying LaTeX Math Expressions in Jupyter Notebooks\nDESCRIPTION: This code shows how to render LaTeX mathematical expressions in a Jupyter notebook using the IPython.display module. It demonstrates creating formatted mathematical output that integrates with Python code execution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, Math, Latex\n\ndisplay(Math(r'F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx'))\n```\n\n----------------------------------------\n\nTITLE: Publishing 3D Bubble Chart Documentation to Plotly Website in Python\nDESCRIPTION: This code sets up custom CSS for the documentation and publishes the notebook to the Plotly website. It configures fonts, styling, and metadata for the documentation page on 3D bubble charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-bubble/3dbubble.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3dbubble.ipynb', 'python/3d-bubble-charts/', 'Python 3D Bubble Charts',\n    'How to make 3D Bubble Charts in Python with Plotly. '\n    'Three examples of 3D Bubble Charts.',\n    title = 'Python 3D Bubble Charts | plotly',\n    name = '3D Bubble Charts',\n    has_thumbnail='true', thumbnail='thumbnail/3dbubble.jpg', \n    language='python', display_as='3d_charts', order=2,\n    ipynb= '~notebook_demo/62')\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code for Dash Shapes Application\nDESCRIPTION: This snippet uses an IFrame to display the source code of the Dash application that implements Plotly shapes. This allows viewers to see how the interactive application is implemented.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-shapesplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Plotly Conversion Helper Function\nDESCRIPTION: Defines a helper function to convert matplotlib figures to interactive Plotly visualizations with customized styling for survival curves.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef pyplot(fig, ci=True, legend=True):\n    # Convert mpl fig obj to plotly fig obj, resize to plotly's default\n    py_fig = tls.mpl_to_plotly(fig, resize=True)\n    \n    # Add fill property to lower limit line\n    if ci == True:\n        style1 = dict(fill='tonexty')\n        # apply style\n        py_fig['data'][2].update(style1)\n        \n        # Change color scheme to black\n        py_fig['data'].update(dict(line=Line(color='black')))\n    \n    # change the default line type to 'step'\n    py_fig['data'].update(dict(line=Line(shape='hv')))\n    # Delete misplaced legend annotations \n    py_fig['layout'].pop('annotations', None)\n    \n    if legend == True:\n        # Add legend, place it at the top right corner of the plot\n        py_fig['layout'].update(\n            showlegend=True,\n            legend=Legend(\n                x=1.05,\n                y=1\n            )\n        )\n        \n    # Send updated figure object to Plotly, show result in notebook\n    return py.iplot(py_fig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Export Format and Dimensions\nDESCRIPTION: Example showing how to specify image format and dimensions when exporting a Plotly graph.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/static-image-export/2016-05-20-static-image.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.toImage(\ngd,{\n  format:'jpeg',\n  height:desired_height,\n  width:desired_width,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Callback in Dash\nDESCRIPTION: This snippet shows how to implement a callback in Dash that updates a div element based on an input value. It showcases the @app.callback decorator with Output and Input components to create interactive features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import Input, Output\n\n@app.callback(\n    Output('output-container-button', 'children'),\n    Input('button-example-1', 'n_clicks')\n)\ndef update_output(n_clicks):\n    if n_clicks is None:\n        return \"Not clicked.\"\n    else:\n        return f\"Clicked {n_clicks} times.\"\n```\n\n----------------------------------------\n\nTITLE: Embed Plotly Chart\nDESCRIPTION: Embeds a previously created Plotly chart using its URL\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\ntls.embed('https://plotly.com/~jackp/3266')\n```\n\n----------------------------------------\n\nTITLE: Hiding Entries in Grouped Legend in Plotly with Python\nDESCRIPTION: This snippet demonstrates how to hide specific entries in a grouped legend in Plotly. It uses the 'showlegend' parameter to control the visibility of individual traces within legend groups.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\ndata = [\n    {\n        'x': [1, 2, 3],\n        'y': [2, 1, 3],\n        'legendgroup': 'group',\n        'name': 'first legend group',\n        'mode': 'markers',\n        'marker': {\n            'color': 'rgb(164, 194, 244)'\n        }\n    },\n    {\n        'x': [1, 2, 3],\n        'y': [2, 2, 2],\n        'legendgroup': 'group',\n        'name': 'first legend group - average',\n        'mode': 'lines',\n        'line': {\n            'color': 'rgb(164, 194, 244)'\n        },\n        'showlegend': False\n    },\n    {\n        'x': [1, 2, 3],\n        'y': [4, 9, 2],\n        'legendgroup': 'group2',\n        'name': 'second legend group',\n        'mode': 'markers',\n        'marker': {\n            'color': 'rgb(142, 124, 195)'\n        }\n    },\n    {\n        'x': [1, 2, 3],\n        'y': [5, 5, 5],\n        'legendgroup': 'group2',\n        'name': 'second legend group - average',\n        'mode': 'lines',\n        'line': {\n            'color': 'rgb(142, 124, 195)'\n        },\n        'showlegend': False\n    }\n]\n\npy.iplot(data, filename='hiding-entries-from-grouped-legends')\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple Scatter Plots with Plotly Native Syntax in Python\nDESCRIPTION: This snippet uses Plotly's native syntax to create scatter plots comparing data from different years. The data is defined separately, and the plot is generated with detailed layouts. Dependencies include Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfig = {\n    'data': [\n        {'x': df2007.gdpPercap, 'y': df2007.lifeExp, 'text': df2007.country, 'mode': 'markers', 'name': '2007'},\n        {'x': df1952.gdpPercap, 'y': df1952.lifeExp, 'text': df1952.country, 'mode': 'markers', 'name': '1952'}\n    ],\n    'layout': {\n        'xaxis': {'title': 'GDP per Capita', 'type': 'log'},\n        'yaxis': {'title': \"Life Expectancy\"}\n    }\n}\npy.iplot(fig, filename='cufflinks/multiple-scatter')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Script for publishing documentation to Plotly's documentation system, including custom styling and metadata configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/labels/labels.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'labels.ipynb', 'python/figure-labels/', 'Setting the Title, Legend Entries, and Axis Titles in Python | Examples | Plotly',\n    'How to set the title, legend-entries, and axis-titles in python.',\n    title = 'Setting the Title, Legend Entries, and Axis Titles in Python | Examples | Plotly',\n    name = 'Setting the Title, Legend Entries, and Axis Titles',\n    thumbnail='thumbnail/figure-labels.png', language='python',\n    has_thumbnail='true', display_as='file_settings', order=11, \n    ipynb='~notebook_demo/271')\n```\n\n----------------------------------------\n\nTITLE: Displaying a Presentation with Plotly Charts in Jupyter\nDESCRIPTION: This code renders the previously created presentation with embedded Plotly charts in a Jupyter notebook using an iframe, enabling interactive viewing of the visualization-rich presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_1 = url_to_iframe(pres_url_1, True)\nIPython.display.HTML(iframe_1)\n```\n\n----------------------------------------\n\nTITLE: Initialize Notebook Mode\nDESCRIPTION: Configure Plotly for offline use in Jupyter notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninit_notebook_mode(connected=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Plotly Figure in Python\nDESCRIPTION: This code adds the previously created data object to the Plotly figure, populating the subplots with the parameter visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfig4['data'] += data4\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty FigureWidget in Plotly\nDESCRIPTION: Creates an empty FigureWidget object and displays it. This is the starting point for building interactive visualizations with Plotly's FigureWidget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nf = go.FigureWidget()\nf\n```\n\n----------------------------------------\n\nTITLE: Creating Probability Distribution Histogram\nDESCRIPTION: Generates a histogram with probability distribution normalization, including custom bin sizes and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = data['alcohol'].values.tolist()\n\ntrace = go.Histogram(x=x, histnorm='probability',\n                     xbins=dict(start=np.min(x),\n                                size=0.25,\n                                end=np.max(x)),\n                     marker=dict(color='rgb(25, 25, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram with Probability Distribution\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-prob-dist')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple code snippet that imports the Plotly library and displays the current version number. This is useful to ensure you're using the latest version of Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying Presentation in Jupyter\nDESCRIPTION: Code to display the created presentation within a Jupyter notebook using IPython HTML display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_0 = url_to_iframe(pres_url_0, True)\nIPython.display.HTML(iframe_0)\n```\n\n----------------------------------------\n\nTITLE: Adding AccuWeather Logo to Existing Plotly Figure in Python\nDESCRIPTION: This code retrieves an existing figure from Plotly, modifies its y-axis tickangle, and adds the AccuWeather logo as an image. It demonstrates how to update an existing chart and add a logo positioned relative to the chart area.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = py.get_figure('https://plotly.com/~Dreamshot/8152/', raw=True)\nfig['layout']['yaxis']['tickangle'] = 0\nfig = go.Figure(fig)\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/accuweather.jpeg\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=1.05,\n        sizex=0.4, sizey=0.4,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Florida_Rainfall_AccuWeather')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Alpha Complex Sequence\nDESCRIPTION: Demonstrates the evolution of alpha complexes and alpha shapes for different alpha values through an interactive visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHTML('<iframe src=https://plotly.com/~empet/13479/ width=825 height=950></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Projecting Data onto New Feature Space\nDESCRIPTION: Transforms the original data onto the new reduced feature space using matrix multiplication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nY = X_std.dot(matrix_w)\n```\n\n----------------------------------------\n\nTITLE: Hiding Legend in Plotly Chart with Python\nDESCRIPTION: This example shows how to hide the legend in a Plotly chart with multiple traces. It uses the 'showlegend' parameter in the layout object to hide the legend.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[1, 2, 3, 4, 5],\n)\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4, 5],\n    y=[5, 4, 3, 2, 1],\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(showlegend=False)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='hide-legend')\n```\n\n----------------------------------------\n\nTITLE: Enabling Edit Mode in Plotly\nDESCRIPTION: Demonstrates how to enable edit mode for title and axis titles using the editable configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\nconfig = {'editable': True}\niplot(data, config=config)\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Positions from Circular Layout in Python\nDESCRIPTION: Shows how to access node positions from the circular layout, which are stored as 2D coordinates on the unit circle.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nL=len(layt)\nlayt[7]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Carpet Plot in Python with Plotly\nDESCRIPTION: This code creates a basic carpet plot with customized axes. It defines a-b coordinates, x-y positions, and configures axis properties including tickprefix, smoothing, and gridlines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-contour/contourcarpet.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        smoothing = 0,\n        minorgridcount = 9,\n        type = 'linear'\n    )\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    margin = dict(\n    \tt = 40,\n        r = 30,\n        b = 30,\n        l = 30\n    ),\n    yaxis = dict(\n        range = [0.388,4.361]\n    ),\n    xaxis = dict(\n    \trange = [0.667,5.932]\t\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig, filename = \"contourcarpet/basic\")\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple code snippet to import Plotly and check the installed version. This is useful to ensure you have the latest version of Plotly installed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: PNG Export Configuration\nDESCRIPTION: Code snippet demonstrating how to export a Plotly graph as a PNG image with specific dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/static-image-export/2016-05-20-static-image.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimg_png.attr(\"src\", url);\nPlotly.toImage(gd,{format:'png',height:400,width:400});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Widget Layout in IPython\nDESCRIPTION: Sets the width of slider widgets to improve the user interface layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nopacity_slider.children[0].layout.width = '400px'\nopacity_slider.children[1].layout.width = '400px'\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import Plotly and check the installed version number.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/labels/labels.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Display Cluster Map Using Plotly’s IPlot\nDESCRIPTION: Renders the cluster map visualization using Plotly’s iplot functionality, allowing interactive exploration of the clustering results.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npy.iplot(fig7, filename='baltimore-cluster-map')\n```\n\n----------------------------------------\n\nTITLE: Saving a Segment of Raw MEG Data\nDESCRIPTION: Selects and saves a 150-second segment of MEG data (excluding EEG) to a new FIF file, demonstrating data export functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npicks = mne.pick_types(raw.info, meg=True, eeg=False, stim=True, exclude=[])\nraw.save('sample_audvis_meg_raw.fif', tmin=0., tmax=150., picks=picks, overwrite=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for ANOVA Analysis in Python\nDESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, SciPy, and Statsmodels for statistical analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/anova/python-Anova.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nimport statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Offline Mode\nDESCRIPTION: Imports required Plotly offline plotting functions for notebook integration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/style-template.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This is a comment\nfrom plotly.offline import iplot, init_notebook_mode\n```\n\n----------------------------------------\n\nTITLE: Setting Up Axis Properties for Plotly in Python\nDESCRIPTION: Defines a dictionary of common axis properties for Plotly charts, including line visibility, grid color, and tick font size.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\naxis=dict(showline=True, zeroline=False, showgrid=True, mirror=True, \n          ticklen=4, gridcolor='#ffffff', tickfont=dict(size=10))\n```\n\n----------------------------------------\n\nTITLE: Creating FigureWidget from Figure Object\nDESCRIPTION: Constructs a FigureWidget using an existing Figure object. This demonstrates how to convert between regular Plotly Figures and interactive FigureWidgets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfigure = go.Figure(data=data, layout=layout)\nf3 = go.FigureWidget(figure)\n```\n\n----------------------------------------\n\nTITLE: Setting X-Axis Title in Plotly\nDESCRIPTION: Labels the x-axis with 'Torque (foot-pounds)' to provide context for the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.xaxis.title = 'Torque (foot-pounds)'\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Customizing Plotly Figure from Cufflinks in Python\nDESCRIPTION: This snippet shows how to customize a Plotly figure that was originally created with Cufflinks. It updates the y-axis title, adds tick prefixes, and renames the traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfigure['layout']['yaxis1'].update({'title': 'Price', 'tickprefix': '$'})\nfor i, trace in enumerate(figure['data']):\n    trace['name'] = 'Trace {}'.format(i)\n    \npy.iplot(figure, filename='cufflinks/customized-chart')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Graph Objects - Python\nDESCRIPTION: This code imports the necessary modules from Plotly for creating graphs, particularly the Contour object used for plotting contour graphs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n```\n\n----------------------------------------\n\nTITLE: Importing KMeans from sklearn\nDESCRIPTION: This snippet imports the KMeans class from the sklearn.cluster module, which is essential for performing K-means clustering on the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sklearn.cluster import KMeans\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Simple version check to verify Plotly installation version. Required version 2.0.6+ for parallel coordinates plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/parcoords/parcoords.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Handling Character Encoding in Country Names\nDESCRIPTION: Processes country names to prevent serialization errors in the Plotly client. This code iterates through the country names list, attempting to decode each from UTF-8 and providing a fallback in case of errors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncountry_names = df['Name']\nfor i in range(len(country_names)):\n    try:\n        country_names[i] = str(country_names[i]).decode('utf-8')\n    except:\n        country_names[i] = 'Country name decode error'\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for Choropleth Creation in Python\nDESCRIPTION: This snippet demonstrates how to access the help documentation for the ff.create_choropleth function in Python. It provides information on the function's usage, parameters, and capabilities for creating choropleth maps.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_choropleth)\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Grouping with Plotly Native Syntax in Python\nDESCRIPTION: This snippet shows the creation of grouped scatter plots by iterating over a range of years with Plotly's native syntax. It supports grouping data when Cufflinks does not suffice. Dependencies involve Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(\n    {\n        'data': [\n            {\n                'x': df[df['year']==year]['gdpPercap'],\n                'y': df[df['year']==year]['lifeExp'],\n                'name': year, 'mode': 'markers',\n            } for year in [1952, 1982, 2007]\n        ],\n        'layout': {\n            'xaxis': {'title': 'GDP per Capita', 'type': 'log'},\n            'yaxis': {'title': \"Life Expectancy\"}\n        }\n}, filename='cufflinks/scatter-group-by')\n```\n\n----------------------------------------\n\nTITLE: Performing One-Sample T-Test\nDESCRIPTION: Conducts a one-sample t-test using SciPy to evaluate if the sample mean equals the true population mean, creating a table to display results.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrue_mu = 0\n\nonesample_results = scipy.stats.ttest_1samp(data1, true_mu)\n\nmatrix_onesample = [\n    ['', 'Test Statistic', 'p-value'],\n    ['Sample Data', onesample_results[0], onesample_results[1]]\n]\n\nonesample_table = FF.create_table(matrix_onesample, index=True)\npy.iplot(onesample_table, filename='onesample-table')\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data by Standard Deviation\nDESCRIPTION: Demonstrates how to normalize data by dividing each point by the standard deviation and visualizes the results using histograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = apple_data['AAPL_y']\n\ndata_norm_by_std = [number/scipy.std(data) for number in data]\n\ntrace1 = go.Histogram(\n    x=data,\n    opacity=0.75,\n    name='data'\n)\n\ntrace2 = go.Histogram(\n    x=data_norm_by_std,\n    opacity=0.75,\n    name='normalized by std = ' + str(scipy.std(data)),\n)\n\nfig = tools.make_subplots(rows=2, cols=1)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(height=600, width=800, title='Normalize by a Constant')\npy.iplot(fig, filename='apple-data-normalize-constant')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream IDs from Credentials File in Python\nDESCRIPTION: This snippet shows how to retrieve stream IDs from the Plotly credentials file, which is necessary for creating streaming plots. The stream IDs must be previously set up in the credentials file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstream_ids = tls.get_credentials_file()['stream_ids']\n```\n\n----------------------------------------\n\nTITLE: Customizing Combined Plot Layout and Subplot Domains\nDESCRIPTION: Configures the overall layout of the combined plot, sets axis properties, and adjusts the size of each subplot by defining their domains.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndosbandfig[\"layout\"].update(\n    go.Layout(\n        title=\"Bands diagram and density of states of Silicon\",\n        xaxis1=bandxaxis,\n        yaxis1=bandyaxis,\n        xaxis2=dosxaxis,\n        annotations=go.Annotations(annotations)\n    )\n)\n# adjust size of subplots\ndosbandfig[\"layout\"][\"xaxis1\"][\"domain\"] = [0., 0.7]\ndosbandfig[\"layout\"][\"xaxis2\"][\"domain\"] = [0.702, 1.]\n# add some specific options\ndosbandfig[\"layout\"][\"yaxis1\"][\"mirror\"] = \"allticks\"\ndosbandfig[\"layout\"][\"xaxis2\"][\"mirror\"] = \"allticks\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset for Linear Model Estimation in Python\nDESCRIPTION: Sets up the age and price arrays for a real estate dataset. The price values are scaled by dividing by 1000 to avoid numerical issues in the model.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nage = np.array([13, 14, 14,12, 9, 15, 10, 14, 9, 14, 13, 12, 9, 10, 15, 11, \n                15, 11, 7, 13, 13, 10, 9, 6, 11, 15, 13, 10, 9, 9, 15, 14, \n                14, 10, 14, 11, 13, 14, 10])\n\nprice = np.array([2950, 2300, 3900, 2800, 5000, 2999, 3950, 2995, 4500, 2800, \n                  1990, 3500, 5100, 3900, 2900, 4950, 2000, 3400, 8999, 4000, \n                  2950, 3250, 3950, 4600, 4500, 1600, 3900, 4200, 6500, 3500, \n                  2999, 2600, 3250, 2500, 2400, 3990, 4600, 450,4700])/1000.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Camera Parameters for 3D Visualization\nDESCRIPTION: Demonstrates the default camera setup for a 3D plot using up, center, and eye vectors. The default eye position is at (1.25, 1.25, 1.25), creating a standard isometric view of the surface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nname = 'default'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=1.25, y=1.25, z=1.25)\n)\n\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Styling 3D Plot Background and Grid\nDESCRIPTION: Shows how to customize the background colors and grid appearance for each axis plane in a 3D plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-axes/3d-axes.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\nN = 50\ntrace1 = go.Mesh3d(x=(30*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(30*np.random.randn(N)),\n                   opacity=0.5,)\n\n\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                         backgroundcolor=\"rgb(200, 200, 230)\",\n                         gridcolor=\"rgb(255, 255, 255)\",\n                         showbackground=True,\n                         zerolinecolor=\"rgb(255, 255, 255)\",),\n                    yaxis = dict(\n                        backgroundcolor=\"rgb(230, 200,230)\",\n                        gridcolor=\"rgb(255, 255, 255)\",\n                        showbackground=True,\n                        zerolinecolor=\"rgb(255, 255, 255)\"),\n                    zaxis = dict(\n                        backgroundcolor=\"rgb(230, 230,200)\",\n                        gridcolor=\"rgb(255, 255, 255)\",\n                        showbackground=True,\n                        zerolinecolor=\"rgb(255, 255, 255)\",),),\n                    width=700,\n                    margin=dict(\n                    r=10, l=10,\n                    b=10, t=10)\n                  )\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig, filename='3d-axis-background-and-grid-color')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Figures in Notebook\nDESCRIPTION: Demonstrates how to embed Plotly figures in a Jupyter notebook with width configuration\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('BrianVancil', 8, width=1100)\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Trace - Python\nDESCRIPTION: This code snippet creates a contour trace object suitable for the Plotly graph. It specifies data ranges and color schemes for the visualization of temperature anomalies.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = Contour(\n    z=air,\n    x=lon,\n    y=lat,\n    colorscale=\"RdBu\",\n    zauto=False,  # custom contour levels\n    zmin=-5,      # first contour level\n    zmax=5        # last contour level  => colorscale is centered about 0\n)\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Embedding Code for Plotly Graphs Using Python\nDESCRIPTION: This code example shows how to use the chart_studio.tools.get_embed function to generate HTML code for embedding a Plotly graph. The function takes a URL to a Plotly graph as input and returns the HTML iframe code needed for embedding.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/embedding-charts.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.tools as tls\n\ntls.get_embed('https://plotly.com/~chris/1638')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Graph with Plotly Tools in Python\nDESCRIPTION: This snippet demonstrates how to use Plotly's tools to embed a specific graph from a URL. This requires the Plotly package to be imported as tls. It gets a graph by its URL and embeds it into a platform that supports embedding HTML content. The key dependency is Plotly tools.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.tools as tls\ntls.embed('https://plotly.com/~cufflinks/8')\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Export Options Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of Plotly's export options for presentations and publications.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nImage(url = 'http://i.imgur.com/QaIw9p4.png?1')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Salesforce Data Visualization with Plotly\nDESCRIPTION: Imports necessary libraries for Salesforce data analysis and visualization. Includes Plotly for visualization, Pandas for data manipulation, and Simple Salesforce for API access.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport requests\n\nfrom simple_salesforce import Salesforce\nrequests.packages.urllib3.disable_warnings() # this squashes insecure SSL warnings - DO NOT DO THIS ON PRODUCTION!\n```\n\n----------------------------------------\n\nTITLE: Creating Treemap with Plotly and Squarify in Python\nDESCRIPTION: This code snippet demonstrates how to create an interactive treemap using Plotly and Squarify in Python. It defines the coordinate system, treemap values, and uses Squarify to generate rectangles. The script then creates shapes and annotations for the treemap, adds hover text, and sets up the layout for the final plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/treemap/treemap.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport squarify\n\nx = 0.\ny = 0.\nwidth = 100.\nheight = 100.\n\nvalues = [500, 433, 78, 25, 25, 7]\n\nnormed = squarify.normalize_sizes(values, width, height)\nrects = squarify.squarify(normed, x, y, width, height)\n\n# Choose colors from http://colorbrewer2.org/ under \"Export\"\ncolor_brewer = ['rgb(166,206,227)','rgb(31,120,180)','rgb(178,223,138)',\n                'rgb(51,160,44)','rgb(251,154,153)','rgb(227,26,28)']\nshapes = []\nannotations = []\ncounter = 0\n\nfor r in rects:\n    shapes.append( \n        dict(\n            type = 'rect', \n            x0 = r['x'], \n            y0 = r['y'], \n            x1 = r['x']+r['dx'], \n            y1 = r['y']+r['dy'],\n            line = dict( width = 2 ),\n            fillcolor = color_brewer[counter]\n        ) \n    )\n    annotations.append(\n        dict(\n            x = r['x']+(r['dx']/2),\n            y = r['y']+(r['dy']/2),\n            text = values[counter],\n            showarrow = False\n        )\n    )\n    counter = counter + 1\n    if counter >= len(color_brewer):\n        counter = 0\n\n# For hover text\ntrace0 = go.Scatter(\n    x = [ r['x']+(r['dx']/2) for r in rects ], \n    y = [ r['y']+(r['dy']/2) for r in rects ],\n    text = [ str(v) for v in values ], \n    mode = 'text',\n)\n        \nlayout = dict(\n    height=700, \n    width=700,\n    xaxis=dict(showgrid=False,zeroline=False),\n    yaxis=dict(showgrid=False,zeroline=False),\n    shapes=shapes,\n    annotations=annotations,\n    hovermode='closest'\n)\n\n# With hovertext\nfigure = dict(data=[trace0], layout=layout)\n\n# Without hovertext\n# figure = dict(data=[Scatter()], layout=layout)\n\npy.iplot(figure, filename='squarify-treemap')\n```\n\n----------------------------------------\n\nTITLE: Defining Network Graph Edges in GML\nDESCRIPTION: This code defines the edges of a network graph in GML (Graph Modeling Language) format. Each edge structure contains a source node ID, a target node ID, and a value that likely represents the weight or strength of the connection. This is typical syntax for network visualization tools like Gephi or other graph visualization libraries.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_7\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 145\n    target 141\n    value 0.111111\n  ]\n  edge\n  [\n    source 145\n    target 142\n    value 0.111111\n  ]\n  edge\n  [\n    source 145\n    target 143\n    value 0.111111\n  ]\n  edge\n  [\n    source 145\n    target 144\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 139\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 140\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 141\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 142\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 143\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 144\n    value 0.111111\n  ]\n  edge\n  [\n    source 146\n    target 145\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 139\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 140\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 141\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 142\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 143\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 144\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 145\n    value 0.111111\n  ]\n  edge\n  [\n    source 147\n    target 146\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 139\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 140\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 141\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 142\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 143\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 144\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 145\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 146\n    value 0.111111\n  ]\n  edge\n  [\n    source 148\n    target 147\n    value 0.111111\n  ]\n  edge\n  [\n    source 149\n    target 71\n    value 1.16667\n  ]\n  edge\n  [\n    source 150\n    target 149\n    value 0.666667\n  ]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for on_click Method in Plotly\nDESCRIPTION: A simple command to display the help documentation for the on_click method of a scatter plot object in Plotly. This provides details about the method's parameters and usage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-click-event.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhelp(scatter.on_click)\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with ipywidgets\nDESCRIPTION: This snippet creates an Image widget to display a specific image from the `image_data` dictionary. It also sets the layout (height and width) of the image widget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/hover scratch.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimage = Image(value=image_data['2012_Chevrolet_Camaro_Coupe'],\n              layout = Layout(height='252px', width='400px'))\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Simple version check to ensure compatibility with graph size attributes (requires version 1.9.2+)\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/sizing/sizing.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Graphs with Plotly in RMarkdown\nDESCRIPTION: This code snippet demonstrates how to create a simple interactive time series plot using the plotly R package with the economics dataset. The graph displays unemployment over population ratio over time and will render as an interactive HTML element in HTML output formats.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(economics, x = ~date, y = ~unemploy / pop)\np\n```\n\n----------------------------------------\n\nTITLE: Data Import and Table Creation\nDESCRIPTION: Imports Apple stock data from CSV, processes column names, and creates a formatted table display using Plotly's FigureFactory\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/filled-area-animation/filled-area-animation.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\nfrom plotly.tools import FigureFactory as FF \n\nimport time\nfrom datetime import datetime\nimport numpy as np\nimport pandas as pd\n\nappl = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\nappl.columns = [col.replace('AAPL.', '') for col in appl.columns]\napple_data_matrix = appl.head(10).round(2)\n\ntable = FF.create_table(apple_data_matrix)\npy.iplot(table, filename='apple_data_table')\n```\n\n----------------------------------------\n\nTITLE: Embedding Streaming Data Plot in Python\nDESCRIPTION: Uses Plotly's embedding tool to display a graph that demonstrates streaming data capabilities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('flann321', '9')\n```\n\n----------------------------------------\n\nTITLE: Series Value Counts and Exploration with Pandas in Python\nDESCRIPTION: This snippet counts the occurrences of each type in a column of the DataFrame using Pandas. The first three counts are displayed. Dependencies are Pandas.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nseries = df['Complaint Type'].value_counts()[:20]\nseries.head(3)\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple version check to ensure Plotly is installed and verify the version number. Required version 1.9.12+ for 2D Histograms.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing HTML Display Module in Python\nDESCRIPTION: Imports the HTML display module from IPython.display to enable embedding HTML content in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Plot Parameters\nDESCRIPTION: Defines initial ranges and plot dimensions for the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx_range=[3, 10]\ny_range=[0, 6]\nplot_height=500\nplot_width=700\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation Example with Plotly in Python\nDESCRIPTION: This example shows how to create a scatter plot with aggregated data using Plotly in Python. It demonstrates the use of the 'sum' aggregation function on a simple dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\noff.init_notebook_mode(connected=False)\n\nsubject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']\nscore = [1,6,2,8,2,9,4,5,1,5,2,8]\n\ndata = [dict(\n  type = 'scatter',\n  x = subject,\n  y = score,\n  mode = 'markers',\n  transforms = [dict(\n    type = 'aggregate',\n    groups = subject,\n    aggregations = [dict(\n        target = 'y', func = 'sum', enabled = True),\n    ]\n  )]\n)]\n\n\noff.iplot({'data': data}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Documentation\nDESCRIPTION: Sets up custom styling and publishes the documentation notebook with specific metadata and configuration settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/range-slider/range-slider.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'range-slider.ipynb', 'python/range-slider/', 'Python Range Slider and Selectors | plotly',\n    'Now you can implement range sliders and selectors in your Plotly graphs purely with python!',\n    title = 'Python Range Slider and Selectors | plotly',\n    name = 'Range Slider and Selector',\n    thumbnail='thumbnail/sliders.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='controls', order=3,\n    ipynb='~notebook_demo/211')\n```\n\n----------------------------------------\n\nTITLE: Adding High-Symmetry K-Point Labels and Lines to Band Diagram\nDESCRIPTION: Creates vertical lines at high-symmetry k-points in the Brillouin zone and adds corresponding labels at the bottom of the plot. Labels are added as annotation objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlabels = [r\"$L$\", r\"$\\Gamma$\", r\"$X$\", r\"$U,K$\", r\"$\\Gamma$\"]\nstep = len(bands.kpoints) / (len(labels) - 1)\n# vertical lines\nvlines = list()\nfor i, label in enumerate(labels):\n    vlines.append(\n        go.Scatter(\n            x=[i * step, i * step],\n            y=[emin, emax],\n            mode=\"lines\",\n            line=go.Line(color=\"#111111\", width=1),\n            showlegend=False\n        )\n    )\n# Labels of highsymetry k-points are added as Annotation object\nannotations = list()\nfor i, label in enumerate(labels):\n    annotations.append(\n        go.Annotation(\n            x=i * step, y=emin,\n            xref=\"x1\", yref=\"y1\",\n            text=label,\n            xanchor=\"center\", yanchor=\"top\",\n            showarrow=False\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Calculating Joint Log-Posterior for Linear Model in Python\nDESCRIPTION: Function that calculates the joint log-posterior probability for a linear model given parameter values. It combines log priors for slope, intercept, and precision with the log-likelihood of the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import distributions\ndgamma = distributions.gamma.logpdf\ndnorm = distributions.norm.logpdf\n\ndef calc_posterior(a, b, t, y=price, x=age):\n    # Calculate joint posterior, given values for a, b and t\n\n    # Priors on a,b\n    logp = dnorm(a, 0, 10000) + dnorm(b, 0, 10000)\n    # Prior on t\n    logp += dgamma(t, 0.001, 0.001)\n    # Calculate mu\n    mu = a + b*x\n    # Data likelihood\n    logp += sum(dnorm(y, mu, t**-2))\n    \n    return logp\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook and Styling HTML Output in Python\nDESCRIPTION: This code snippet sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook with specific metadata. It's used for documentation and sharing purposes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/radar/radar.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'radar.ipynb', 'python/radar-chart/', 'Radar Charts',\n    'How to make radar charts in Python with Plotly.',\n    title = 'Radar Charts | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/radar.gif', \n    language='python', \n    display_as='scientific',\n    order=30, \n    ipynb='~notebook_demo/202')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Visualization Tools for Materials Science Data\nDESCRIPTION: Imports Plotly libraries for creating interactive plots, including the main plotting functions, tools for configuration, and graph objects for defining plot elements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as pltly      # plotting functions\nimport plotly.tools as tls         # plotly tools\nimport plotly.graph_objs as go     # plot and configuration tools : Scatter, Line, Layout\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash App Source Code in IPython Notebook\nDESCRIPTION: This snippet demonstrates how to embed the source code of a Dash application in an IPython notebook using IFrame. This allows users to view the implementation details of the 3D scatter plot Dash application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-scatter/3d_scatter.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-3dscatterplot/code\", width=\"100%\", height=\"500px\",frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Attaching Metadata to Grid\nDESCRIPTION: Demonstrates how to attach custom JSON metadata to a Plotly grid upload.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmeta = {\n    \"Month\": \"November\",\n    \"Experiment ID\": \"d3kbd\",\n    \"Operator\": \"James Murphy\",\n    \"Initial Conditions\": {\n          \"Voltage\": 5.5\n    }\n}\n\ngrid_url = py.grid_ops.upload(grid, filename='grid_with_metadata_'+str(dt.now()), meta=meta)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for the notebook, installs the publisher package, and publishes the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/polynomial-fit/Polynomial-Fits.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'Polynomial-fits.ipynb', 'python/polynomial-fits/', 'Polynomial Fit',\n    'Create a polynomial fit / regression in Python and add a line of best fit to your chart.',\n    title = 'Polynomial Fit',\n    name = 'Polynomial Fit',\n    has_thumbnail='true', thumbnail='thumbnail/polynomial_fit.jpg', \n    language='python', page_type='example_index',\n    display_as='statistics', order=12,\n    ipynb= '~notebook_demo/138')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using the publisher module. Includes font loading, CSS styling, and configuration for publishing the group by example documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/groupby/groupby.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git\nimport publisher\npublisher.publish(\n    'groupby.ipynb', 'python/group-by/', 'Group By',\n    'How to use group by in Python with Plotly.',\n    title = 'Group By | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/groupby.jpg', \n    language='python', uses_plotly_offline=True,\n    page_type='example_index',\n    display_as='transforms', order=2,\n    ipynb= '~notebook_demo/194')\n```\n\n----------------------------------------\n\nTITLE: Reference Documentation Display\nDESCRIPTION: Displays help documentation for the GraphWidget class and sets up custom styling for documentation display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/slider_example.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(GraphWidget)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'slider_example.ipynb', 'python/slider-widget/', 'IPython Widgets | plotly',\n    'Interacting with Plotly charts using Sliders',\n    title = 'Slider Widget with Plotly',\n    name = 'Slider Widget with Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/ipython_widgets.jpg', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=20,\n    ipynb= '~notebook_demo/91')\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to EPS Format\nDESCRIPTION: Illustrates exporting a Plotly figure to EPS vector format using the write_image function. Requires the poppler library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.eps')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's important to keep Plotly updated for the latest features and bug fixes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Extracting Opportunity Amount and Owner Data\nDESCRIPTION: Extracts the Amount and Owner Name fields from the queried opportunity data using list comprehensions for visualization and analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\namounts = [x['Amount'] for x in opportunity_amounts['records']]\nowners = [x['Owner']['Name'] for x in opportunity_amounts['records']]\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Color Scale\nDESCRIPTION: Renders a specific color scale with 3 divisions using RdYlBu color palette\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHTML(cl.to_html( cl.scales['3']['div']['RdYlBu'] ))\n```\n\n----------------------------------------\n\nTITLE: Create Final Dashboard Layout\nDESCRIPTION: Arranging widgets and figure into final dashboard layout\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncontainer2 = widgets.HBox([origin, textbox])\nwidgets.VBox([container,\n              container2,\n              g])\n```\n\n----------------------------------------\n\nTITLE: Importing Graph Objects from Plotly\nDESCRIPTION: This code snippet imports specific graph objects (Data, Layout, Figure) from the `plotly.graph_objs` module. This allows direct creation and manipulation of graph elements in Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import Data, Layout, Figure\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Shows how to import the Plotly library and check its installed version. This is important as 2D Density Plots require version 2.0.0 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/density-plots/density-plots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example Source Code in IPython Notebook\nDESCRIPTION: This snippet demonstrates how to display the source code of a Dash application example in an IPython notebook using an IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-legend/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Showing Lower Half Only\nDESCRIPTION: Shows how to display only the lower half of the scatterplot matrix.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntrace3 = copy.deepcopy(trace1)\ntrace3['showupperhalf']=False\n\nfig3 = dict(data=[trace3], layout=layout)\npy.iplot(fig3, filename='splom-showupperhalf')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Ternary Charts in Python\nDESCRIPTION: Imports the Plotly library and displays its version to ensure compatibility with ternary charts, which require version 1.9.10 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Display Documentation Styling\nDESCRIPTION: Adding custom styling and publishing configuration for documentation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'figurewidget_app.ipynb', 'python/figurewidget-app/', 'IPython FigureWidget',\n    'Interactive Data Analysis with Plotly',\n    title='Interactive Data Analysis with FigureWidget ipywidgets',\n    name='Interactive Data Analysis with FigureWidget ipywidgets',\n    has_thumbnail='true', thumbnail='thumbnail/multi-widget.jpg',\n    language='python', page_type='example_index',\n    display_as='chart_events', order=23,\n    ipynb='~notebook_demo/231')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling\nDESCRIPTION: Code for publishing a Plotly notebook with custom styling, including loading fonts, CSS, and installing dependencies. The publisher module is used to publish the notebook with metadata specifications for the Plotly documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/map-subplots/map-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'map-subplots.ipynb', ' python/map-subplots-and-small-multiples/', ' Python Map Subplots and Map Small Multiples| Plotly',\n    'How to make map subplots and map small multiples in Python.',\n    title = 'Python Map Subplots and Map Small Multiples | plotly',\n    name = 'Map Subplots',\n    has_thumbnail='true', thumbnail='thumbnail/map-subplots.jpg', \n    language='python', page_type='example_index'\n    display_as='multiple_axes', order=5,\n    ipynb= '~notebook_demo/59')\n```\n\n----------------------------------------\n\nTITLE: Publishing the Exponential Fit Example to Plotly Documentation\nDESCRIPTION: A code snippet for publishing the exponential fit example to the Plotly documentation site. It sets up custom styling, installs the publisher package, and defines metadata for the documentation entry.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/exponential-fit/Exponential-Fits.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'Exponential-fits.ipynb', 'python/exponential-fits/', 'Exponential Fit',\n    'Create a exponential fit / regression in Python and add a line of best fit to your chart.',\n    title = 'Exponential Fit',\n    name = 'Exponential Fit',\n    has_thumbnail='true', thumbnail='thumbnail/exponential_fit.jpg', \n    language='python', page_type='example_index',\n    display_as='statistics', order=11,\n    ipynb= '~notebook_demo/135')\n```\n\n----------------------------------------\n\nTITLE: Converting Matplotlib Plot to Plotly\nDESCRIPTION: Converts the matplotlib figure to a Plotly object for interactive visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npyplot(kmf2, ci=False)\n```\n\n----------------------------------------\n\nTITLE: Updating Data for August 17 Scoreboard in Python\nDESCRIPTION: Updates the scoreboard data with new values from August 17, reflecting changes in candidate rankings and positions. Some candidates swapped positions compared to the previous dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntab_vals17=[[1,2,3,4,5,6,7,7,9,9,11,11,13,13,13,13],\n  [1,7,5,12,5,4,7,12,2,12,3, 7,7,12,7,12],\n   [4,7,2,1,10,5,7, 6, 9,3, 12, 14,12,11,15,16],\n  [2,9,4,1,3,8,11, 10, 6,6, 5, 14,14,12,14,13],\n  [1,3,4,14,8,2,12, 13, 7,9, 6,16,5,10,11,15]]\n\ncandidates17=['Bush', 'Rubio', 'Walker', 'Trump', 'Kasich', 'Cruz',  'Huckabee', 'Fiorina','Paul']+\\\n  ['Carson',  'Christie', 'Santorum', 'Perry', 'Jindal', 'Graham', 'Pataki']\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Display\nDESCRIPTION: Configures HTML display settings and publishes documentation using publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'mne-tutorial.ipynb', 'ipython-notebooks/mne-tutorial/', 'Plotly visualizations for MNE-Python to process MEG/EEG data', \n    'Create interactive visualizations using MNE-Python and Plotly', name='Process MEG/EEG Data with Plotly',\n    redirect_from='ipython-notebooks/meeg-and-eeg-data-analysis/')\n```\n\n----------------------------------------\n\nTITLE: Standardizing Data for PCA using StandardScaler\nDESCRIPTION: This code standardizes the Iris dataset using scikit-learn's StandardScaler, transforming the features to have zero mean and unit variance. Standardization is an important preprocessing step for PCA to ensure features with larger scales don't dominate the analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.preprocessing import StandardScaler\nX_std = StandardScaler().fit_transform(X)\n```\n\n----------------------------------------\n\nTITLE: Installing and Publishing Notebook (Python)\nDESCRIPTION: This code snippet installs a Python package from a Git repository using `pip` and then publishes a Jupyter Notebook using a custom `publisher` module. It updates the `publisher` package and publishes the notebook with specified metadata like title, description, language, and thumbnail. It assumes the `publisher` package and associated dependencies are available and configured correctly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/selection-events-figure-widget.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'selection-events-figure-widget.ipynb', 'python/selection-events/', 'Selection Events with go.FigureWidget',\n    'Selection Events With FigureWidget',\n    title = 'Selection Events',\n    name = 'Selection Events',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-selection-events.gif', \n    language='python', \n    display_as='chart_events', order=24,\n    ipynb= '~notebook_demo/229')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple code snippet to check which version of Plotly is currently installed. This is useful for ensuring you're using the latest version with all features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-contour/contourcarpet.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Determining Energy Range for Band Diagram\nDESCRIPTION: Calculates the minimum and maximum energy values across all bands to set appropriate y-axis limits for the band diagram plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nemin = 1e100\nemax = -1e100\nfor spin in bands.bands.keys():\n    for band in range(bands.nb_bands):\n        emin = min(emin, min(bands.bands[spin][band]))\n        emax = max(emax, max(bands.bands[spin][band]))\nemin = emin - bands.efermi - 1\nemax = emax - bands.efermi + 1\n```\n\n----------------------------------------\n\nTITLE: Combining Plots into Plotly Data Object for Small Variance Run in Python\nDESCRIPTION: Creates a Plotly Data object that combines all six trace and histogram plots for the small variance MCMC run.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndata5 = pgo.Data([trace1, trace2, trace3, trace4, trace5, trace6])\n```\n\n----------------------------------------\n\nTITLE: Calculating Acceptance Rate for Large Variance Run in Python\nDESCRIPTION: Calculates the acceptance rate for each parameter in the large variance Metropolis-Hastings run.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nnp.array(acc, float)/n_iter\n```\n\n----------------------------------------\n\nTITLE: Embedding MATLAB Demo Plot in Python\nDESCRIPTION: Uses Plotly's embedding tool to display a MATLAB demo plot within a Python environment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('MATLAB-Demos', '4')\n```\n\n----------------------------------------\n\nTITLE: Implementing Anderson-Darling Test with Plotly Visualization in Python\nDESCRIPTION: This code snippet demonstrates how to perform the Anderson-Darling normality test using SciPy's anderson() function and visualize the results with Plotly. It tests whether a data sample follows a Gaussian distribution and displays the results in a formatted table.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import anderson\n\nresult = anderson(gauss_data)\nstat = round(result.statistic, 4)\n\np = 0\nresult_mat = []\nfor i in range(len(result.critical_values)):\n    sl, cv = result.significance_level[i], result.critical_values[i]\n    if result.statistic < result.critical_values[i]:\n        msg = 'Sample looks Gaussian (fail to reject H0)'\n    else:\n        msg = 'Sample does not look Gaussian (reject H0)'\n    result_mat.append([len(gauss_data), stat, sl, cv, msg])\n\ntrace = go.Table(\n    header=dict(values=['<b>Sample Size</b>', '<b>Statistic</b>', '<b>Significance Level</b>', '<b>Critical Value</b>', '<b>Comment</b>'],\n                line = dict(width=0),\n                fill = dict(color='rgba(42,63,95,0.8)'),\n                align = 'center',\n                font = dict(\n                    color = '#ffffff',\n                    size = 12\n                )),\n    cells=dict(values=np.array(result_mat).T,\n               line = dict(width=0),\n               fill = dict(color=[['#EBF0F8', '#ffffff', '#EBF0F8', '#ffffff', '#EBF0F8']]),\n               align = 'center',\n               height = 40),\n    columnwidth=[0.3, 0.25, 0.3, 0.25, 0.5])\nlayout = dict(\n    height=300,\n    margin=dict(\n        l=5,\n        r=5,\n        t=30,\n        b=0\n    )\n)\ndata = [trace]\nandar_table = dict(data=data, layout=layout)\n\npy.iplot(andar_table, filename='anderson-darling-table')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python\nDESCRIPTION: Simple version check to ensure Plotly is updated to version 1.12.12+ which is required for button functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook as Plotly Documentation\nDESCRIPTION: This snippet contains code to format and publish the notebook as official Plotly documentation. It includes styling with custom CSS, installs the publisher package, and calls the publish function with metadata about the content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-scatter/3d_scatter.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d_scatter.ipynb', 'python/3d-scatter-plots/', '3D Python Scatter Plots | plotly',\n    'How to make 3D scatter plots in Python with Plotly.',\n    title = '3D Python Scatter Plots | plotly',\n    name = '3D Scatter Plots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-scatter.jpg', \n    language='python', page_type='example_index', \n    display_as='3d_charts', order=1,\n    ipynb= '~notebook_demo/61')\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Text Annotations in Tree Plot\nDESCRIPTION: This function creates text annotations for the nodes in the tree plot, allowing for customization of font size and color.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef make_annotations(pos, text, font_size=10, font_color='rgb(250,250,250)'):\n    L=len(pos)\n    if len(text)!=L:\n        raise ValueError('The lists pos and text must have the same len')\n    annotations = go.Annotations()\n    for k in range(L):\n        annotations.append(\n            go.Annotation(\n                text=labels[k], # or replace labels with a different list for the text within the circle  \n                x=pos[k][0], y=2*M-position[k][1],\n                xref='x1', yref='y1',\n                font=dict(color=font_color, size=font_size),\n                showarrow=False)\n        )\n    return annotations\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python\nDESCRIPTION: Simple version check to ensure Plotly is at version 1.9.2 or higher for linear fit functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/linear-fit/linear-fits.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting a Plotly Graph in Python\nDESCRIPTION: This snippet demonstrates how to permanently delete a Plotly graph. It first moves the plot to trash, then sends a DELETE request to permanently remove it. This action cannot be undone.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurl = py.plot({\"data\": [{\"x\": [1, 2, 3],\n                         \"y\": [3, 2, 1]}],\n               \"layout\": {\"title\": \"Let's Delete This Plot<br><b>FOREVER!!!!</b>\"}},\n              filename='PERMANENT delete ex') \nurl\n\nfid_permanent_delete = username+':79'\nfid_permanent_delete\n\nrequests.post('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/trash', auth=auth, headers=headers)\n\nrequests.delete('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/permanent_delete', auth=auth, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Create Location Data Table\nDESCRIPTION: Creates a table displaying sample data from the supercharger locations using Plotly's figure factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Location ID', 'Latitude', 'Longitude']]\nfirst_ten_keys = supercharger_locations.keys()[0:10]\n\nfor key in first_ten_keys:\n    row = [key,\n           supercharger_locations[key]['latitude'],\n           supercharger_locations[key]['longitude']]\n    data_matrix.append(row)\n\ntable = ff.create_table(data_matrix)\npy.iplot(table, filename='supercharger-locations-sample')\n```\n\n----------------------------------------\n\nTITLE: Statistical Testing of Survival Rates in R\nDESCRIPTION: Performs survival difference testing using R's survdiff function to compare survival rates between DNA types.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n%%R \nsurvdiff(Surv(time, delta) ~ type)\n```\n\n----------------------------------------\n\nTITLE: Bullet Chart Reference Help\nDESCRIPTION: Displays help documentation for the create_bullet function\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_bullet)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Surface Subplots with Different Colorscales in Plotly\nDESCRIPTION: Comprehensive example demonstrating how to create a 2x2 grid of 3D surface plots using Plotly's make_subplots function. The example creates a 3D surface visualization of the function z = x^3 + y^3 with four different colorscales (Viridis, RdBu, YlOrRd, and YlGnBu) applied to each subplot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-subplot/3d-subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\nimport numpy as np\n\nx = np.linspace(-5, 80, 10)\ny = np.linspace(-5, 60, 10)\nxGrid, yGrid = np.meshgrid(y, x)\nz = xGrid ** 3 + yGrid ** 3\n\nscene = dict(\n    xaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    yaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    zaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    )\n)\n\nfig = tools.make_subplots(rows=2, cols=2,\n                          specs=[[{'is_3d': True}, {'is_3d': True}],\n                                 [{'is_3d': True}, {'is_3d': True}]])\n\n# adding surfaces to subplots.\nfig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='Viridis',\n                      scene='scene1', showscale=False), 1, 1)\nfig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='RdBu',\n                      scene='scene2', showscale=False), 1, 2)\nfig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='YlOrRd',\n                      scene='scene3', showscale=False), 2, 1)\nfig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='YlGnBu',\n                      scene='scene4', showscale=False), 2, 2)\n\nfig['layout'].update(title='subplots with different colorscales',\n                     height=800, width=800)\nfig['layout']['scene1'].update(scene)\nfig['layout']['scene2'].update(scene)\nfig['layout']['scene3'].update(scene)\nfig['layout']['scene4'].update(scene)\n\npy.iplot(fig, file_name='multiple_plots')\n```\n\n----------------------------------------\n\nTITLE: Publishing Annotated Heatmap Documentation with Plotly's Publisher\nDESCRIPTION: Sets up the environment for displaying content in Plotly's documentation style and publishes the annotated heatmap notebook to the Plotly documentation site. Includes custom font loading, CSS styling, and metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'annotated_heatmap.ipynb', 'python/annotated_heatmap/', 'Python Annotated Heatmaps | plotly',\n    'How to make Annotated Heatmaps in Python with Plotly.',\n    title = 'Python Annotated Heatmaps | plotly',\n    name = 'Annotated Heatmaps',\n    thumbnail='thumbnail/ann_heat.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=4,\n    ipynb= '~notebook_demo/35')\n```\n\n----------------------------------------\n\nTITLE: Creating Plot from Grid Reference\nDESCRIPTION: Creates a 2D histogram contour plot using grid references instead of direct data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Histogram2dContour(\n        xsrc=grid[0],\n        ysrc=grid[1]\n    )\n]\n\npy.iplot(data, filename='2D Contour from Grid Data')\n```\n\n----------------------------------------\n\nTITLE: HTML Display and Publishing Configuration in Plotly\nDESCRIPTION: Configuration for displaying custom fonts and publishing the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'tick-formatting.ipynb', 'python/tick-formatting/', 'Formatting Ticks',\n    'How to format axes ticks in Python with Plotly.',\n    title = 'Formatting Ticks | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/tick-formatting.gif',\n    language='python',\n    order=10,\n    display_as='file_settings',\n    ipynb='~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Computing Secondary Statistics\nDESCRIPTION: Calculates additional statistical measures including median, maximum, and minimum values of the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmedian = np.median(data['alcohol'])\nmaximum = np.max(data['alcohol'])\nminimum = np.min(data['alcohol'])\n\nprint(\"The median is %r\") %(median)\nprint(\"The maximum is %r\") %(maximum)\nprint(\"The minimum is %r\") %(minimum)\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Simple version check to ensure Plotly is at version 2.2.1 or higher which is required for table traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Survival Fit in R\nDESCRIPTION: Creates a basic survival fit object using survfit() function with tongue.surv data against an intercept.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%%R\nsurv.fit <- survfit(tongue.surv~1)\nsurv.fit\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Plotly Graph Reports in IPython\nDESCRIPTION: Displays a static HTML report containing Plotly graphs within the IPython notebook. This version includes static image versions of the graphs that are easier to convert to PDF.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndisplay(HTML(static_report))\n```\n\n----------------------------------------\n\nTITLE: Count Emails per Day\nDESCRIPTION: Groups emails by date and counts the number of emails received per day\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nemail_count = [(g[0], len(list(g[1]))) for g in itertools.groupby(all_dates)]\nemail_count[0]\n```\n\n----------------------------------------\n\nTITLE: Implementing de Casteljau Algorithm and Bézier Curve Generation in Python\nDESCRIPTION: Defines functions to evaluate points on Bézier curves using the de Casteljau algorithm, for precise edge rendering in the graph visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass InvalidInputError(Exception):\n    pass\n\ndef deCasteljau(b,t): \n    N=len(b) \n    if(N<2):\n        raise InvalidInputError(\"The  control polygon must have at least two points\")\n    a=np.copy(b) #shallow copy of the list of control points \n    for r in range(1,N): \n        a[:N-r,:]=(1-t)*a[:N-r,:]+t*a[1:N-r+1,:]                             \n    return a[0,:]\n\ndef BezierCv(b, nr=5):\n    t=np.linspace(0, 1, nr)\n    return np.array([deCasteljau(b, t[k]) for k in range(nr)]) \n```\n\n----------------------------------------\n\nTITLE: Creating Text Labels and Color Values for Diabetic Classification\nDESCRIPTION: Prepares text labels and color values based on the 'Outcome' column for distinguishing between diabetic and non-diabetic patients in the visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntextd = ['non-diabetic' if cl==0 else 'diabetic' for cl in dfd['Outcome']]\ncolor_vals = [0  if cl==0 else 1 for cl in dfd['Outcome']]\n```\n\n----------------------------------------\n\nTITLE: Viewing 3D Surface from Y-Z Plane Perspective\nDESCRIPTION: Sets the camera to view the 3D surface from the Y-Z plane with eye vector at (2.5, 0.1, 0.1). This provides a cross-sectional view of the elevation data along the X axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nname = 'eye = (x:2.5, y:0.1, z:0.1)'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=2.5, y=0.1, z=0.1)\n)\n\nfig['layout'].update(\n    scene=dict(camera=camera),\n    title=name\n)\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import the Plotly library and check its installed version. This helps ensure compatibility with the examples that follow.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-subplot/3d-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Implementing Inverse Modeling with dSPM\nDESCRIPTION: Sets up and computes inverse modeling using dSPM method, including forward solution and inverse operator calculation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom mne.forward import read_forward_solution\nfrom mne.minimum_norm import (make_inverse_operator, apply_inverse,\n                              write_inverse_operator)\n\nfname_fwd = data_path + '/MEG/sample/sample_audvis-meg-oct-6-fwd.fif'\nfwd = mne.read_forward_solution(fname_fwd, surf_ori=True)\nfwd = mne.pick_types_forward(fwd, meg=True, eeg=False)\n\ninfo = evoked.info\ninverse_operator = make_inverse_operator(info, fwd, noise_cov,\n                                         loose=0.2, depth=0.8)\n\nwrite_inverse_operator('sample_audvis-meg-oct-6-inv.fif',\n                       inverse_operator)\n```\n\n----------------------------------------\n\nTITLE: Displaying Small Variance MCMC Plot in Python\nDESCRIPTION: Uses Plotly's iplot function to display the small variance MCMC results as an interactive plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig5, filename='MH algorithm small proposal variance')\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Chart URL for Report Generation\nDESCRIPTION: This snippet creates a Plotly chart and saves its URL for later use in report generation. The chart is not automatically opened in the browser (auto_open=False), and the URL is printed to the console.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfirst_plot_url = py.plot(data, filename='apple stock moving average', auto_open=False,)\nprint first_plot_url\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Pass FFT Filter in Python\nDESCRIPTION: This snippet demonstrates a high-pass FFT filter implementation. It uses spectral inversion on a low-pass filter to create a high-pass filter effect on the wind speed data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfc = 0.1\nb = 0.08\nN = int(np.ceil((4 / b)))\nif not N % 2: N += 1\nn = np.arange(N)\n \nsinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))\nwindow = np.blackman(N)\nsinc_func = sinc_func * window\nsinc_func = sinc_func / np.sum(sinc_func)\n\n# reverse function\nsinc_func = -sinc_func\nsinc_func[int((N - 1) / 2)] += 1\n\ns = list(data['10 Min Std Dev'])\nnew_signal = np.convolve(s, sinc_func)\n\ntrace1 = go.Scatter(\n    x=list(range(len(new_signal))),\n    y=new_signal,\n    mode='lines',\n    name='High-Pass Filter',\n    marker=dict(\n        color='#424242'\n    )\n)\n\nlayout = go.Layout(\n    title='High-Pass Filter',\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='fft-high-pass-filter')\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Subplots with Cufflinks in Python\nDESCRIPTION: This snippet shows how to split histogram plots into subplots using Cufflinks by specifying subplots=True and shape. Dependencies include Pandas, NumPy, and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='histogram', subplots=True, shape=(3, 1), filename='cufflinks/histogram-subplots')\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for FigureWidget in Plotly\nDESCRIPTION: Displays the help documentation for the FigureWidget class from Plotly's graph_objs module. This provides reference information about available methods and properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/Interact.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Publishing Cmocean Colorscales Documentation with Plotly Publisher\nDESCRIPTION: This snippet uses the Plotly publisher to publish the notebook as documentation. It sets various metadata properties for the published content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/cmocean.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'cmocean.ipynb', 'python/cmocean-colorscales/', 'Cmocean Colorscales | plotly',\n    'How to make Cmocean Colorscales in Python with Plotly.',\n    title = 'Cmocean Colorscales | plotly',\n    name = 'Cmocean Colorscales',\n    has_thumbnail='true', thumbnail='thumbnail/colorbars.jpg',\n    language='python', page_type='example_index',\n    display_as='style_opt', order=22,\n    ipynb= '~notebook_demo/52')\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Authentication in Python\nDESCRIPTION: This snippet sets up the authentication for using Plotly's REST API. It defines the username and API key, creates authentication and header objects, and sets credentials for Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.plotly as py\n\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nusername = 'private_plotly' # Replace with YOUR USERNAME\napi_key = 'k0yy0ztssk' # Replace with YOUR API KEY\n\nauth = HTTPBasicAuth(username, api_key)\nheaders = {'Plotly-Client-Platform': 'python'}\n\nplotly.tools.set_credentials_file(username=username, api_key=api_key)\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Polar Chart with Multiple Trials Data\nDESCRIPTION: Creates an interactive WebGL-based polar scatter plot displaying data from multiple trials. Uses pandas to read data from CSV and creates six different scatter traces with custom styling for markers, colors, and opacity.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv\")\n\ndata = [\n    go.Scatterpolargl(\n      r = df.trial_1_r,\n      theta = df.trial_1_theta,\n      mode = \"markers\",\n      name = \"Trial 1\",\n      marker = dict(\n        color = \"rgb(27,158,119)\",\n        size = 15,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    ),\n    go.Scatterpolargl(\n      r = df.trial_2_r,\n      theta = df.trial_2_theta,\n      mode = \"markers\",\n      name = \"Trial 2\",\n      marker = dict(\n        color = \"rgb(217,95,2)\",\n        size = 20,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    ),\n    go.Scatterpolargl(\n      r = df.trial_3_r,\n      theta = df.trial_3_theta,\n      mode = \"markers\",\n      name = \"Trial 3\",\n      marker = dict(\n        color = \"rgb(117,112,179)\",\n        size = 12,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    ),\n    go.Scatterpolargl(\n      r = df.trial_4_r,\n      theta = df.trial_4_theta,\n      mode = \"markers\",\n      name = \"Trial 4\",\n      marker = dict(\n        color = \"rgb(231,41,138)\",\n        size = 22,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    ),\n    go.Scatterpolargl(\n      r = df.trial_5_r,\n      theta = df.trial_5_theta,\n      mode = \"markers\",\n      name = \"Trial 5\",\n      marker = dict(\n        color = \"rgb(102,166,30)\",\n        size = 19,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    ),\n    go.Scatterpolargl(\n      r = df.trial_6_r,\n      theta = df.trial_6_theta,\n      mode = \"markers\",\n      name = \"Trial 6\",\n      marker = dict(\n        color = \"rgb(230,171,2)\",\n        size = 10,\n        line = dict(\n          color = \"white\"\n        ),\n        opacity = 0.7\n      )\n    )\n]\n    \nlayout = go.Layout(\n    title = \"Hobbs-Pearson Trials\",\n    font = dict(\n      size = 15\n    ),\n    showlegend = False,\n    polar = dict(\n      bgcolor = \"rgb(223, 223, 223)\",\n      angularaxis = dict(\n        tickwidth = 2,\n        linewidth = 3,\n        layer = \"below traces\"\n      ),\n      radialaxis = dict(\n        side = \"counterclockwise\",\n        showline = True,\n        linewidth = 2,\n        tickwidth = 2,\n        gridcolor = \"white\",\n        gridwidth = 2\n      )\n    ),\n    paper_bgcolor = \"rgb(223, 223, 223)\"\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-webgl')\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to MCMC Plot in Python\nDESCRIPTION: Applies custom styling to the MCMC visualization figure using a predefined styling function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nadd_style(fig5)\n```\n\n----------------------------------------\n\nTITLE: Column Subtraction Visualization\nDESCRIPTION: Demonstrates how to subtract two DataFrame columns and visualize the results using scatter plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=data['Date'],\n    y=data['A'],\n    mode='markers',\n    name='Column A',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=data['Date'],\n    y=data['D'],\n    mode='markers',\n    name='Column D',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace3 = go.Scatter(\n    x=data['Date'],\n    y=data['D'] - data['A'],\n    mode='markers',\n    name='Column D - Column A',\n    marker=dict(\n        size=12,\n        symbol='square-open'   \n    )\n)\n\ntrace_data1 = [trace1, trace2, trace3]\npy.iplot(trace_data1, filename='subtract-two-dataframe-columns')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Ternary Plots\nDESCRIPTION: Checks the installed version of Plotly to ensure compatibility with ternary plots, which require version 1.9.10 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check for the installed Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Initializing Triangle Parameters\nDESCRIPTION: Setting up initial parameters for the triangular Bézier patch including degree, resolution, and triangle vertices.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nn=4\nm=80\nnr_ctrl_pts=(n+1)*(n+2)/2\nT=[np.array([0, 1.5]), np.array([-1,0]), np.array([1, 0])]\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation Setup\nDESCRIPTION: Sets up documentation styling and publishes the notebook to Plotly's documentation system with specific metadata and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/quiver/quiver.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'quiver.ipynb', 'python/quiver-plots/', 'Python Quiver Plots | plotly',\n    'How to make a quiver plot in Python. A quiver plot displays velocity vectors a arrows. ',\n    title = 'Python Quiver Plots | plotly',\n    name = 'Quiver Plots',\n    has_thumbnail='true', thumbnail='thumbnail/quiver-plot.jpg', \n    language='python', \n    display_as='scientific', order=12,\n    ipynb= '~notebook_demo/42')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation for Inset Plots\nDESCRIPTION: This code prepares and publishes the inset plots documentation to the Plotly documentation site. It sets up custom styling for the notebook display and uses the publisher module to publish the notebook with metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/insets/inset.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'inset.ipynb', 'python/insets/', 'Inset Plots | plotly',\n    'How to make an inset graph in python.',\n    title = 'Inset Plots | plotly',\n    name = 'Inset Plots',\n    has_thumbnail='true', thumbnail='thumbnail/insets.jpg', \n    language='python', page_type='example_index',\n    display_as='multiple_axes', order=3)\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Sets up documentation styling and publishes the notebook using custom HTML and publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Simple_Mathematics_Operations.ipynb', 'python/simple-mathematics-operations/', 'Simple Mathematics Operations | plotly',\n    'Learn how to perform simple mathematical operations on dataframes such as scaling, adding, and subtracting',\n    title='Simple Mathematics Operations in Python. | plotly',\n    name='Simple Mathematics Operations',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=1,\n    ipynb= '~notebook_demo/99')\n```\n\n----------------------------------------\n\nTITLE: Embedding Live Stream Demo\nDESCRIPTION: Embeds a live demonstration of the streaming geo visualization using Plotly's embed function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('streaming-demos','121')\n```\n\n----------------------------------------\n\nTITLE: Installing Virtualenv Globally\nDESCRIPTION: Command to install Python's virtualenv tool globally, which allows creating isolated Python environments with different package versions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install virtualenv\n```\n\n----------------------------------------\n\nTITLE: Sending Figure to Plotly and Displaying\nDESCRIPTION: Shows how to send a modified figure to Plotly and display it in a notebook\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# (@) Send figure object to Plotly and show result in notebook \npy.iplot(fig, filename='s1_hubble', height=new_height)\n\n# (-) adjust height of output cell with 'height'\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Plotly Table\nDESCRIPTION: Creates a styled table with custom colors, alignment, and dimensions using Plotly's table trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Table(\n    header=dict(values=['A Scores', 'B Scores'],\n                line = dict(color='#7D7F80'),\n                fill = dict(color='#a1c3d1'),\n                align = ['left'] * 5),\n    cells=dict(values=[[100, 90, 80, 90],\n                       [95, 85, 75, 95]],\n               line = dict(color='#7D7F80'),\n               fill = dict(color='#EDFAFF'),\n               align = ['left'] * 5))\n\nlayout = dict(width=500, height=300)\ndata = [trace]\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename = 'styled_table')\n```\n\n----------------------------------------\n\nTITLE: Creating Gantt Chart from Pandas DataFrame in Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a Gantt chart using data from a Pandas DataFrame. It reads data from a CSV file and customizes the chart appearance with specific colors and grid settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gantt_example.csv')\n\nfig = ff.create_gantt(df, colors=['#333F44', '#93e4c1'], index_col='Complete', show_colorbar=True,\n                      bar_width=0.2, showgrid_x=True, showgrid_y=True)\npy.iplot(fig, filename='gantt-use-a-pandas-dataframe', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like permalink, description, layout and other page attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/nodejs/static-image/2015-04-09-static-image_node_js_index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Static Image Export\npermalink: nodejs/static-image-export/\ndescription: How to export plotly graphs as static images in nodejs. Plotly supports png, svg, jpg, and pdf image export.\nlayout: base\nthumbnail: thumbnail/static-image.jpg\nlanguage: nodejs\npage_type: example_index\ndisplay_as: get_request\nsitemap: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram and Curve Plot without Rug\nDESCRIPTION: Shows how to create a distribution plot with only the histogram and density curve, without the rug plot. This is accomplished by setting show_rug=False in the create_distplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(200) - 2 \nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2 \n\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\ncolors = ['#A56CC1', '#A6ACEC', '#63F5EF']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, colors=colors,\n                         bin_size=.2, show_rug=False)\n\n# Add title\nfig['layout'].update(title='Hist and Curve Plot')\n\n# Plot!\npy.iplot(fig, filename='Hist and Curve')\n```\n\n----------------------------------------\n\nTITLE: Selecting Gradiometer Data\nDESCRIPTION: Extracts the first 10 seconds of data from 20 gradiometer channels for visualization with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npicks = mne.pick_types(raw.info, meg='grad', exclude=[])\nstart, stop = raw.time_as_index([0, 10])\n\nn_channels = 20\ndata, times = raw[picks[:n_channels], start:stop]\nch_names = [raw.info['ch_names'][p] for p in picks[:n_channels]]\n```\n\n----------------------------------------\n\nTITLE: Creating Trace and Histogram Plots for Large Variance MCMC Results in Python\nDESCRIPTION: Creates Plotly graph objects for visualizing the MCMC traces and histograms for the parameters from the large variance run.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = pgo.Scatter(\n    y=trace_hivar.T[0],\n    xaxis='x1',\n    yaxis='y1',\n    marker=pgo.Marker(color=color)\n)\n\ntrace2 = pgo.Histogram(\n    x=trace_hivar.T[0],\n    xaxis='x2',\n    yaxis='y2',\n    marker=pgo.Marker(color=color)\n)\n\ntrace3 = pgo.Scatter(\n    y=trace_hivar.T[1],\n    xaxis='x3',\n    yaxis='y3',\n    marker=pgo.Marker(color=color)\n)\n\ntrace4 = pgo.Histogram(\n    x=trace_hivar.T[1],\n    xaxis='x4',\n    yaxis='y4',\n    marker=pgo.Marker(color=color)\n)\n\ntrace5 = pgo.Scatter(\n    y=trace_hivar.T[2],\n    xaxis='x5',\n    yaxis='y5',\n    marker=pgo.Marker(color=color)\n)\n\ntrace6 = pgo.Histogram(\n    x=trace_hivar.T[2],\n    xaxis='x6',\n    yaxis='y6',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting MCMC Results with Plotly\nDESCRIPTION: Displays the interactive plot showing the MCMC trace and posterior distributions for all parameters using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_52\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig7, filename='adaptive-metropolis')\n```\n\n----------------------------------------\n\nTITLE: Polar Chart with Sector\nDESCRIPTION: Creates polar charts with defined sectors, showing how to limit the angular range of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n\n\ndata = [\n    go.Scatterpolar(\n      mode = \"lines+markers\",\n      r = [1,2,3,4,5],\n      theta = [0,90,180,360,0],\n      line = dict(\n        color = \"#ff66ab\"\n      ),\n      marker = dict(\n        color = \"#8090c7\",\n        symbol = \"square\",\n        size = 8\n      ),\n      subplot = \"polar\",\n    ),\n    go.Scatterpolar(\n      mode = \"lines+markers\",\n      r = [1,2,3,4,5],\n      theta = [0,90,180,360,0],\n      line = dict(\n        color = \"#ff66ab\"\n      ),\n      marker = dict(\n        color = \"#8090c7\",\n        symbol = \"square\",\n        size = 8\n      ),\n      subplot = \"polar2\"\n    )\n  ]\n\n\nlayout = go.Layout(\n    showlegend = False,\n    polar = dict(\n      domain = dict(\n        x = [0,0.4],\n        y = [0,1]\n      ),\n      sector = [150,210],\n      radialaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      ),\n      angularaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      )\n    ),\n    polar2 = dict(\n      domain = dict(\n        x = [0.6,1],\n        y = [0,1]\n      ),\n      radialaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      ),\n      angularaxis = dict(\n        tickfont = dict(\n          size = 8\n        )\n      )\n    )\n)\n\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='polar-sector')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Simple code to check the installed version of Plotly. Range sliders and selectors require version 1.9.7 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/range-slider/range-slider.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\n\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Report with Plotly Publisher - Python\nDESCRIPTION: Sets up custom styling for the report display and publishes it using Plotly's publisher module. Includes font styling and custom CSS for IPython notebook display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\n\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('html-reports', '/python/html-reports/', \n                  'Python HTML Reports', \n                  'How to make HTML reports with Python, Pandas, and Plotly Graphs.')\n```\n\n----------------------------------------\n\nTITLE: Calculating Acceptance Rate in MH Algorithm in Python\nDESCRIPTION: Calculates the acceptance rate for each parameter in the Metropolis-Hastings algorithm by dividing the acceptance count by the number of iterations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nnp.array(acc, float)/n_iter\n```\n\n----------------------------------------\n\nTITLE: Display External Resources in Jupyter Notebook\nDESCRIPTION: Loads additional CSS and web fonts in the Jupyter notebook environment to enhance the display aesthetics using IPython's HTML display capabilities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook with Custom Styling in Python\nDESCRIPTION: This code snippet sets up custom styling for a Jupyter Notebook, installs a publisher package, and publishes the notebook. It includes commands to display custom CSS and fonts, install a GitHub-hosted package, and use the publisher to upload the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-1d/python_Interpolation_and_Extrapolation_in_1D.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Interpolation_and_Extrapolation_in_1D.ipynb', 'python/interpolation-and-extrapolation-in-1d/', 'Interpolation and Extrapolation in 1D | plotly',\n    'Learn how to interpolation and extrapolate data in one dimension',\n    title='Interpolation and Extrapolation in 1D in Python. | plotly',\n    name='Interpolation and Extrapolation in 1D',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=3,\n    ipynb= '~notebook_demo/106')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Privacy Configuration\nDESCRIPTION: Updates the Plotly configuration file to make all future plots private by default.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.tools.set_config_file(world_readable=False, sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Publishing Wind Rose Chart Documentation\nDESCRIPTION: Sets up custom styling for documentation and publishes the wind rose chart example to Plotly's documentation website. Includes font loading, custom CSS styling, and publisher configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/wind-rose/wind-rose.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'wind-rose.ipynb', 'python/wind-rose-charts/', 'Python Wind Rose Charts | plotly',\n    'How to graph wind rose charts in python. Wind Rose charts display wind speed and direction of a given location. ',\n    title = 'Python Wind Rose Charts | plotly',\n    name = 'Wind Rose Charts',\n    has_thumbnail='true', thumbnail='thumbnail/wind-rose.jpg', \n    language='python', page_type='example_index', \n    display_as='scientific', order=8,\n    ipynb= '~notebook_demo/38')\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Plotly Figure\nDESCRIPTION: Adds the previously created data traces to the figure object for visualization in a subplot layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfig7['data'] += data7\n```\n\n----------------------------------------\n\nTITLE: Checking Proxy Environment Variables\nDESCRIPTION: Commands to verify current proxy environment variable settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/proxies/2015-07-27-proxy_index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho $HTTP_PROXY\necho $HTTPS_PROXY\n```\n\n----------------------------------------\n\nTITLE: Applying Themes with Cufflinks in Python\nDESCRIPTION: This snippet describes how to view and apply different themes using Cufflinks. The getThemes function lists all available themes while set_config_file is used to apply a theme. The dependency is Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncf.getThemes()\n```\n\nLANGUAGE: python\nCODE:\n```\ncf.set_config_file(theme='pearl')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly and Statistical Analysis\nDESCRIPTION: Initial setup importing necessary Python libraries including Plotly, NumPy, Pandas, and SciPy for statistical analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Histogram Source Code in Python\nDESCRIPTION: This snippet shows how to embed the source code view of a Dash histogram application using IPython's IFrame. It allows viewing the implementation code for the Dash example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-histogramplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Example Credentials File Format\nDESCRIPTION: Example of the JSON format used in the .plotly/.credentials file that stores your Chart Studio API credentials and stream IDs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": \"DemoAccount\",\n    \"stream_ids\": [\"ylosqsyet5\", \"h2ct8btk1s\", \"oxz4fm883b\"],\n    \"api_key\": \"lr1c37zw81\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting URL for a Secret Plotly Graph\nDESCRIPTION: Uses py.plot() to create a secret plot and return its URL. Secret plots can be viewed by anyone with the link, but are not discoverable.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npy.plot(data, filename='privacy-secret', sharing='secret')\n```\n\n----------------------------------------\n\nTITLE: Writing HTML Report to File - Python\nDESCRIPTION: Writes the generated HTML string to a local file named 'report.html' in the specified directory path.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nf = open('/home/jack/report.html','w')\nf.write(html_string)\nf.close()\n```\n\n----------------------------------------\n\nTITLE: Reading and Processing Florida County Data in Python\nDESCRIPTION: This code retrieves GeoJSON data for Florida counties and voting registration data. It processes the county names for consistency between datasets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport string\nimport urllib\n\nrepub_democ_counties_url = 'http://dos.myflorida.com/elections/data-statistics/voter-registration-statistics/voter-registration-monthly-reports/voter-registration-current-by-county/'\nflorida_data_url = 'https://raw.githubusercontent.com/plotly/datasets/master/florida_county_data.geojson'\n\nrepub_democ_counties = urllib.urlopen(repub_democ_counties_url).read()\nflorida_data = pd.read_json(florida_data_url)\n\ncounty_names = []\ncounty_names_dict = {}\n\nfor county in florida_data['features']:\n    for m in range(len(county['properties']['name'])):\n        if county['properties']['name'][m:m+6] == 'County':\n            county_names.append(county['properties']['name'][0:m-1])\n            county_names_dict[county['properties']['name'][0:m-1]] = county['properties']['name']\n            \nprint county_names\n```\n\n----------------------------------------\n\nTITLE: Basic Isosurface Plot Implementation in Python\nDESCRIPTION: Creates a basic 3D isosurface visualization using Plotly with simple coordinate and value data. Defines the isosurface boundaries using isomin and isomax parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/iso-surface/isosurfaces.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Isosurface(\n    x=[0,0,0,0,1,1,1,1],\n    y=[1,0,1,0,1,0,1,0],\n    z=[1,1,0,0,1,1,0,0],\n    value=[1,2,3,4,5,6,7,8],\n    isomin=2,\n    isomax=6\n)]\n\npy.iplot(data, filename='basic-isosurface-trace')\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code of a Dash Box Plot Application\nDESCRIPTION: This snippet embeds the source code view of a Dash box plot application in an IPython notebook. It allows users to see the implementation details of the box plot dashboard.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-boxplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Components\nDESCRIPTION: Imports necessary Plotly classes and modules to create custom interactive visualizations of MEG/EEG data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nfrom plotly.graph_objs import Layout, YAxis, Scatter, Annotation, Annotations, Data, Figure, Marker, Font\n```\n\n----------------------------------------\n\nTITLE: Visualizing Regression Lines from Posterior Samples\nDESCRIPTION: Creates a visualization of 50 random regression lines drawn from the posterior distribution, along with the original data points. This helps visualize the uncertainty in the model.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n# Data points\npoints = pgo.Scatter(\n    x=age,\n    y=price,\n    mode='markers'\n)\n\n# Sample models from posterior\nxvals = np.linspace(age.min(), age.max())\nline_data = [np.column_stack([np.ones(50), xvals]).dot(trace_tuned[np.random.randint(0, 1000), :2]) for i in range(50)]\n\n# Generate Scatter obejcts\nlines = [pgo.Scatter(x=xvals, y=line, opacity=0.5, marker=pgo.Marker(color='#e34a33'),\n                     line=pgo.Line(width=0.5)) for line in line_data]\n\ndata8 = pgo.Data([points] + lines)\n\nlayout8 = layout_grey_bg.copy()\nlayout8.update(\n    showlegend=False,\n    hovermode='closest',\n    xaxis=pgo.XAxis(title='Age', showgrid=False, zeroline=False),\n    yaxis=pgo.YAxis(title='Price', showline=False, zeroline=False)\n)\n\nfig8 = pgo.Figure(data=data8, layout=layout8)\npy.iplot(fig8, filename='regression_lines')\n```\n\n----------------------------------------\n\nTITLE: DataShader Image Generation Function\nDESCRIPTION: Defines a function that generates a DataShader image based on x/y ranges and plot dimensions, returning a PIL image object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef gen_ds_image(x_range, y_range, plot_width, plot_height):\n    if x_range is None or y_range is None or plot_width is None or plot_height is None:\n        return None\n    \n    cvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\n    agg_scatter = cvs.points(iris_target_df, \n                         'sepal_length', 'sepal_width', \n                          ds.count_cat('target'))\n    img = tf.shade(agg_scatter)\n    img = tf.dynspread(img, threshold=0.95, max_px=5, shape='circle')\n    \n    return img.to_pil()\n```\n\n----------------------------------------\n\nTITLE: Viewing Stream Link Object Documentation\nDESCRIPTION: Displays help documentation for the py.Stream object, showing available methods and parameters for creating and using a stream link to send data to Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhelp(py.Stream)  # run help() of the Stream link object\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Example with Custom Styling in Plotly Documentation\nDESCRIPTION: This code sets up custom styling for the notebook and publishes it to the Plotly documentation website. It adds custom fonts, CSS, installs the publisher package, and defines metadata about the example for proper categorization on the documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-click-event.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'figurewidget-click-event.ipynb', 'python/click-events/', 'Click Events with go.FigureWidget',\n    'Click Events With FigureWidget',\n    title = 'Click Events',\n    name = 'Click Events',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-click-events.gif', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=24,\n    ipynb= '~notebook_demo/240')\n```\n\n----------------------------------------\n\nTITLE: Creating Histograms for Exploratory Data Visualization with Plotly\nDESCRIPTION: This snippet uses Plotly to create histograms showing the distribution of the four Iris flower features across the three species. The visualization helps understand how the features are distributed for each class, displaying sepal length, sepal width, petal length, and petal width.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\n# plotting histograms\ndata = []\n\nlegend = {0:False, 1:False, 2:False, 3:True}\n\ncolors = {'Iris-setosa': '#0D76BF', \n          'Iris-versicolor': '#00cc96', \n          'Iris-virginica': '#EF553B'}\n\nfor col in range(4):\n    for key in colors:\n        trace = dict(\n            type='histogram',\n            x=list(X[y==key, col]),\n            opacity=0.75,\n            xaxis='x%s' %(col+1),\n            marker=dict(color=colors[key]),\n            name=key,\n            showlegend=legend[col]\n        )\n        data.append(trace)\n\nlayout = dict(\n    barmode='overlay',\n    xaxis=dict(domain=[0, 0.25], title='sepal length (cm)'),\n    xaxis2=dict(domain=[0.3, 0.5], title='sepal width (cm)'),\n    xaxis3=dict(domain=[0.55, 0.75], title='petal length (cm)'),\n    xaxis4=dict(domain=[0.8, 1], title='petal width (cm)'),\n    yaxis=dict(title='count'),\n    title='Distribution of the different Iris flower features'\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='exploratory-vis-histogram')\n```\n\n----------------------------------------\n\nTITLE: Using Help and QuickRef Commands in Jupyter\nDESCRIPTION: Demonstrates how to access the help documentation and quick reference within Jupyter. These commands provide an introduction to Jupyter features and command overview.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhelp\n```\n\nLANGUAGE: python\nCODE:\n```\nquickref\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Annotations in Plotly\nDESCRIPTION: This example shows how to add annotations to 3D scatter plots. The annotations can be positioned in 3D space and customized with different text, arrow styling, and anchoring options to highlight specific points in a 3D visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Scatter3d(\n  x = [\"2017-01-01\", \"2017-02-10\", \"2017-03-20\"],\n  y = [\"A\", \"B\", \"C\"],\n  z = [1, 1000, 100000],\n  name = \"z\",\n)]\n\nlayout = go.Layout(\n   scene = dict(\n    aspectratio = dict(\n      x = 1,\n      y = 1,\n      z = 1\n    ),\n    camera = dict(\n      center = dict(\n        x = 0,\n        y = 0,\n        z = 0\n      ),\n      eye = dict(\n        x = 1.96903462608,\n        y = -1.09022831971,\n        z = 0.405345349304\n      ),\n      up = dict(\n        x = 0,\n        y = 0,\n        z = 1\n      )\n    ),\n    dragmode = \"turntable\",\n    xaxis = dict(\n      title = \"\",\n      type = \"date\"\n    ),\n    yaxis = dict(\n      title = \"\",\n      type = \"category\"\n    ),\n    zaxis = dict(\n      title = \"\",\n      type = \"log\"\n    ),\n    annotations = [dict(\n        showarrow = False,\n        x = \"2017-01-01\",\n        y = \"A\",\n        z = 0,\n        text = \"Point 1\",\n        xanchor = \"left\",\n        xshift = 10,\n        opacity = 0.7\n      ), dict(\n        x = \"2017-02-10\",\n        y = \"B\",\n        z = 4,\n        text = \"Point 2\",\n        textangle = 0,\n        ax = 0,\n        ay = -75,\n        font = dict(\n          color = \"black\",\n          size = 12\n        ),\n        arrowcolor = \"black\",\n        arrowsize = 3,\n        arrowwidth = 1,\n        arrowhead = 1\n      ), dict(\n        x = \"2017-03-20\",\n        y = \"C\",\n        z = 5,\n        ax = 50,\n        ay = 0,\n        text = \"Point 3\",\n        arrowhead = 1,\n        xanchor = \"left\",\n        yanchor = \"bottom\"\n      )]\n  ),\n  xaxis = dict(title = \"x\"),\n  yaxis = dict(title = \"y\")\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = \"3d annotations\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Environment\nDESCRIPTION: Code for setting up the documentation environment with custom fonts and styles, and publishing the documentation using the publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/table-subplots/table-subplots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'table-subplots.ipynb', 'python/table-subplots/', 'Table and Chart Subplots',\n    'How to create a subplot with tables and charts in Python with Plotly.',\n    title = 'Table and Chart Subplots | plotly',\n    has_thumbnail='true',page_type='example_index', thumbnail='thumbnail/table_subplots.jpg',\n    language='python',\n    display_as='multiple_axes', order=11)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Sets up custom styling for documentation and uses the publisher module to publish the notebook to Plotly's documentation site. Includes configuration for fonts, CSS, and metadata for the published document.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\n\npublisher.publish(\n    '3d-camera-controls.ipynb', 'python/3d-camera-controls/', 'Python 3D Camera Controls | plotly',\n    'How to Control the Camera in your 3D Charts in Python with Plotly.',\n    title= 'Python 3D Camera Controls | plotly',\n    name = '3D Camera Controls',\n    has_thumbnail='true', thumbnail='thumbnail/3d-camera-controls.jpg', \n    language='python', \n    display_as='3d_charts', order=0.108,\n    ipynb= '~notebook_demo/78')\n```\n\n----------------------------------------\n\nTITLE: Configuring Subplot Layout\nDESCRIPTION: Creates a subplot layout with bar and pie charts using Plotly graph objects\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    x=['one', 'two', 'three'],\n    y=[4, 3, 2],\n    xaxis='x2',\n    yaxis='y2',\n    marker=dict(color=\"maroon\"),\n    name='Random Numbers',\n    stream=stream_id2,\n    showlegend=False\n)\ntrace2 = go.Pie(\n    labels=['one','two','three'],\n    values=[20,50,100],\n    domain=dict(x=[0, 0.45]),\n    text=['one', 'two', 'three'],\n    stream=stream_id1,\n    sort=False,\n    \n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.5, 0.95],\n        anchor='y2'\n    ),\n    yaxis2=dict(\n        domain=[0, 1],\n        anchor='x2'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='simple-inset-stream')\n```\n\n----------------------------------------\n\nTITLE: Printing Data Keys\nDESCRIPTION: Debugging step to print the available keys in both original and modified data structures.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(data.keys())\nprint(data_original.keys())\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Jupyter Notebook\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in a Jupyter Notebook using the IPython.display module. It creates an interactive video player within the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import YouTubeVideo\nYouTubeVideo(\"wupToqz1e2g\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Cumulative Density Function\nDESCRIPTION: Creates a scatter plot showing the cumulative density function (CDF) of the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncumsum = np.cumsum(x)\n\ntrace = go.Scatter(x=[i for i in range(len(cumsum))], y=10*cumsum/np.linalg.norm(cumsum),\n                     marker=dict(color='rgb(150, 25, 120)'))\nlayout = go.Layout(\n    title=\"Cumulative Distribution Function\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='cdf-dataset')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling and Metadata\nDESCRIPTION: Sets up custom styling for the IPython notebook and publishes it using a publisher module. This code adds Google fonts, custom CSS, and defines metadata for the published notebook including title, description, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh-3d.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\n\npublisher.publish(\n    'mesh-3d.ipynb', 'python/3d-mesh/', 'Python 3D Mesh Plots | Plotly',\n    'How to make 3D Mesh Plots',\n    title= '3D Mesh Plots in Python | plotly',\n    name = '3D Mesh Plots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-mesh.jpg', \n    language='python',\n    display_as='3d_charts', order=7,\n    ipynb= '~notebook_demo/67') \n```\n\n----------------------------------------\n\nTITLE: Creating a Secret Graph with Plotly in R\nDESCRIPTION: This snippet demonstrates how to create a secret graph using the api_create() function with the sharing parameter set to 'secret'. Secret graphs are accessible to anyone with the special link but won't appear in profiles, feeds, or search engines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-privacy.md#2025-04-11_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')\nsecret_graph = api_create(p, filename = \"secret-graph-file\", sharing = \"secret\")\nsecret_graph\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ternary Contour Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a ternary contour plot using Plotly's Python library. It loads data from a JSON file, creates traces for each data point, and sets up the layout for the ternary plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-contour/ternary-contour.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport json\nimport urllib\n\nurl = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json'\nresponse = urllib.urlopen(url).read()\ndata = json.loads(response)\n\ncolors = ['#8dd3c7','#ffffb3','#bebada',\n          '#fb8072','#80b1d3','#fdb462',\n          '#b3de69','#fccde5','#d9d9d9',\n          '#bc80bd','#ccebc5','#ffed6f'];\n\n# generate a,b and c from JSON data..\ntraces = []\ncolor_iter = iter(colors)\nfor i in data.keys():\n    trace = dict(text=i,\n        type='scatterternary',\n        a=[ k['clay'] for k in data[i] ],\n        b=[ k['sand'] for k in data[i] ],\n        c=[ k['silt'] for k in data[i] ],\n        mode='lines',\n        line=dict(color='#444'),\n        fill='toself',\n        fillcolor=color_iter.next()\n    )\n    traces.append(trace)\n    \nlayout = {\n    'title': 'Simple Ternary Contour Plot with Python',\n    'ternary': \n        {'sum':100,\n         'aaxis':{'title': 'clay', 'ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n         'baxis':{'title': 'sand', 'ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },\n         'caxis':{'title': 'silt','ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' }},\n    'showlegend': False          \n}\n\nfigure = dict(data=traces, layout=layout)\npy.iplot(figure, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Calculating Closed-Loop System Poles in Python Control\nDESCRIPTION: This snippet calculates the poles of the closed-loop system to verify stability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntheta_thetac.pole()\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting Chart Studio Figure Object in R\nDESCRIPTION: R code demonstrating how to create a Chart Studio figure object using api_create() and inspect its class and contents.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nf <- api_create(p)\nclass(f)\nf\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Tutorial with Custom Styling in Python\nDESCRIPTION: This code sets up custom styling for an IPython notebook and publishes a tutorial on adding logos to charts. It demonstrates how to use the Plotly publisher to create and format documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'logos.ipynb', 'python/logos/', 'Add Logos to Charts',\n    'How to add images as logos to Plotly charts.',\n    title = 'Add Logos to Charts | plotly',\n    name = 'Logos',\n    has_thumbnail='false', thumbnail='thumbnail/your-tutorial-chart.jpg', \n    language='python', page_type='example_index',\n    display_as='style_opt', order=6,\n    ipynb= '~notebook_demo/92') \n```\n\n----------------------------------------\n\nTITLE: Publishing Contour Plot Documentation with Plotly Publisher\nDESCRIPTION: This code sets up required CSS styles and publishes the notebook as documentation. It installs the Plotly publisher module, then uses it to publish the contour plot examples as a documentation page with metadata including title, description, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/contour/contour.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'contour.ipynb', 'python/contour-plots/', 'Contour Plots',\n    'How to make Contour plots in Python with Plotly.',\n    title = 'Contour Plots | plotly',\n    name = 'Contour Plots',\n    has_thumbnail='true', thumbnail=' thumbnail/contour.jpg',\n    language='python', page_type='example_index',\n    display_as='scientific', order=2,\n    ipynb= '~notebook_demo/185')\n```\n\n----------------------------------------\n\nTITLE: Importing IPython.display for Image Visualization\nDESCRIPTION: Python import statement that loads the Image module from IPython.display package, which allows displaying external images in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing NetCDF Data - Python\nDESCRIPTION: This snippet demonstrates how to read a NetCDF file, extract latitude, longitude, and air temperature data, and appropriately format the latitude vector for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Path the downloaded NetCDF file (different for each download)\nf_path = '/home/etienne/Downloads/compday.Bo3cypJYyE.nc'\n\n# Retrieve data from NetCDF file\nwith netcdf.netcdf_file(f_path, 'r') as f:\n    lon = f.variables['lon'][::]    # copy as list\n    lat = f.variables['lat'][::-1]  # invert the latitude vector -> South to North\n    air = f.variables['air'][0,::-1,:]  # squeeze out the time dimension, \n                                        # invert latitude index\n```\n\n----------------------------------------\n\nTITLE: Configure Display and Publish\nDESCRIPTION: Sets up custom styling and publishes the notebook using the publisher library\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'gmail.ipynb', 'ipython-notebooks/graph-gmail-inbox-data/',\n    'Graph Gmail inbox data with IPython notebook', \n    'Learn how to graph your Gmail inbox data with plotly and IPython Notebook',\n    name='Graph Gmail Inbox Data')\n```\n\n----------------------------------------\n\nTITLE: Indexing Gantt Chart by Numeric Variable in Plotly Python\nDESCRIPTION: This example shows how to create a Gantt chart indexed by a numeric variable (Complete percentage). It uses a custom color scale and displays a color bar.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Complete=10),\n      dict(Task=\"Job B\", Start='2008-12-05', Finish='2009-04-15', Complete=60),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Complete=95)]\n\nfig = ff.create_gantt(df, colors='Viridis', index_col='Complete', show_colorbar=True)\npy.iplot(fig, filename='gantt-numeric-variable', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Time Series Data\nDESCRIPTION: Imports time series data from a CSV file and creates a table visualization using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/timeseries.csv')\n\ntable = FF.create_table(data)\npy.iplot(table, filename='timeseries-data-table')\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Plotly Documentation\nDESCRIPTION: This snippet defines the required Python packages and their versions for the Plotly graphing library documentation project. It includes algoliasearch for search functionality and python-frontmatter for handling metadata in documentation files.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/requirements.txt#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nalgoliasearch==1.20.0\npython-frontmatter==0.4.5\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly 3D Surface Plot\nDESCRIPTION: Generates a 3D surface plot using Plotly with customized layout and camera settings\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata3=plotly_trisurf(x,y,z, faces, colormap=cm.RdBu, plot_edges=None)\n\ntitle=\"Trisurf from a PLY file<br>\"+\\\n                \"Data Source:<a href='http://people.sc.fsu.edu/~jburkardt/data/ply/airplane.ply'> [1]</a>\"\n\nnoaxis=dict(showbackground=False,\n            showline=False,  \n            zeroline=False,\n            showgrid=False,\n            showticklabels=False,\n            title='' \n          )\n\nfig3 = go.Figure(data=data3, layout=layout)\nfig3['layout'].update(dict(title=title,\n                           width=1000,\n                           height=1000,\n                           scene=dict(xaxis=noaxis,\n                                      yaxis=noaxis, \n                                      zaxis=noaxis, \n                                      aspectratio=dict(x=1, y=1, z=0.4),\n                                      camera=dict(eye=dict(x=1.25, y=1.25, z= 1.25)     \n                                     )\n                           )\n                     ))\n                      \npy.iplot(fig3, filename='Chopper-Ply-cls')\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw Data Information\nDESCRIPTION: Prints the info dictionary containing measurement details like bad channels, channel locations, sampling frequency, and subject information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(raw.info)\n```\n\n----------------------------------------\n\nTITLE: Loading Bioassay Data for Toxicity Analysis\nDESCRIPTION: Loads the bioassay dataset including log dose levels, sample sizes, and death counts for toxicity analysis. This data will be used to estimate the LD50 (lethal dose for 50% of subjects).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n# Log dose in each group\nlog_dose = [-.86, -.3, -.05, .73]\n\n# Sample size in each group\nn = 5\n\n# Outcomes\ndeaths = [0, 1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Animation Source Code in IPython\nDESCRIPTION: Code to embed the source code view of a Dash animation example as an iframe within a Jupyter notebook. This allows viewing the implementation code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-animationplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Libraries for Visualization in Python\nDESCRIPTION: This snippet imports the necessary Plotly libraries for creating interactive plots in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Data Streaming to Multiple Traces in Plotly\nDESCRIPTION: This code opens stream connections, then enters a continuous loop that generates new data points for both traces at regular intervals. The first trace uses a cosine function with random noise, while the second trace uses the negative scaled value of the first trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ns_1.open()\ns_2.open()\n\nimport time\nimport datetime\nimport numpy as np\n\nk=10\ni=0\n\nwhile True:\n    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')\n    delta = np.random.randint(4,10) \n    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0] \n    s_1.write(dict(x=x,y=y))\n    s_2.write(dict(x=x,y=(-delta*y)))\n    time.sleep(0.8)\n    i += 1\ns_1.close()\ns_2.close()\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Committing and Pushing Changes\nDESCRIPTION: Git commands for adding, committing, and pushing documentation changes to the remote repository as part of the contribution workflow.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add file-a\ngit add file-b\ngit commit -m 'message about your changes'\ngit push origin your_feature_branch\n```\n\n----------------------------------------\n\nTITLE: Accessing Figure Data and Trace Names\nDESCRIPTION: Shows how to access trace names and data from a Plotly figure object\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig['data'][0]['name']\nfig['data'][1]['name']\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Time Series Chart with Category X-Axis in JavaScript\nDESCRIPTION: This snippet configures a Plotly time series chart with dates as categories. It sets up the x-axis as categorical with an array of dates from 1967 to 2007, and configures the layout options including automargin settings, hover behavior, and font family.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"layout\":{\"1\":[[],{\"env\":{},\"args\":{}}],\"font\":{\"env\":{},\"args\":{}},\"family\":\"Courier New, monospace\",\"title\":\"Modified on  2020-01-29 14:24:24\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"1967-06-30\",\"1967-07-31\",\"1967-08-31\",\"1967-09-30\",\"1967-10-31\",\"1967-11-30\",\"1967-12-31\",\"1968-01-31\",\"1968-02-29\",\"1968-03-31\",\"1968-04-30\",\"1968-05-31\",\"1968-06-30\",\"1968-07-31\",\"1968-08-31\",\"1968-09-30\",\"1968-10-31\",\"1968-11-30\",\"1968-12-31\",\"1969-01-31\",\"1969-02-28\",\"1969-03-31\",\"1969-04-30\",\"1969-05-31\",\"1969-06-30\",\"1969-07-31\",\"1969-08-31\",\"1969-09-30\",\"1969-10-31\",\"1969-11-30\",\"1969-12-31\",\"1970-01-31\",\"1970-02-28\",\"1970-03-31\",\"1970-04-30\",\"1970-05-31\",\"1970-06-30\",\"1970-07-31\",\"1970-08-31\",\"1970-09-30\",\"1970-10-31\",\"1970-11-30\",\"1970-12-31\",\"1971-01-31\",\"1971-02-28\",\"1971-03-31\",\"1971-04-30\",\"1971-05-31\",\"1971-06-30\",\"1971-07-31\",\"1971-08-31\",\"1971-09-30\",\"1971-10-31\",\"1971-11-30\",\"1971-12-31\",\"1972-01-31\",\"1972-02-29\",\"1972-03-31\",\"1972-04-30\",\"1972-05-31\",\"1972-06-30\",\"1972-07-31\",\"1972-08-31\",\"1972-09-30\",\"1972-10-31\",\"1972-11-30\",\"1972-12-31\",\"1973-01-31\",\"1973-02-28\",\"1973-03-31\",\"1973-04-30\",\"1973-05-31\",\"1973-06-30\",\"1973-07-31\",\"1973-08-31\",\"1973-09-30\",\"1973-10-31\",\"1973-11-30\",\"1973-12-31\",\"1974-01-31\",\"1974-02-28\",\"1974-03-31\",\"1974-04-30\",\"1974-05-31\",\"1974-06-30\",\"1974-07-31\",\"1974-08-31\",\"1974-09-30\",\"1974-10-31\",\"1974-11-30\",\"1974-12-31\",\"1975-01-31\",\"1975-02-28\",\"1975-03-31\",\"1975-04-30\",\"1975-05-31\",\"1975-06-30\",\"1975-07-31\",\"1975-08-31\",\"1975-09-30\",\"1975-10-31\",\"1975-11-30\",\"1975-12-31\",\"1976-01-31\",\"1976-02-29\",\"1976-03-31\",\"1976-04-30\",\"1976-05-31\",\"1976-06-30\",\"1976-07-31\",\"1976-08-31\",\"1976-09-30\",\"1976-10-31\",\"1976-11-30\",\"1976-12-31\",\"1977-01-31\",\"1977-02-28\",\"1977-03-31\",\"1977-04-30\",\"1977-05-31\",\"1977-06-30\",\"1977-07-31\",\"1977-08-31\",\"1977-09-30\",\"1977-10-31\",\"1977-11-30\",\"1977-12-31\",\"1978-01-31\",\"1978-02-28\",\"1978-03-31\",\"1978-04-30\",\"1978-05-31\",\"1978-06-30\",\"1978-07-31\",\"1978-08-31\",\"1978-09-30\",\"1978-10-31\",\"1978-11-30\",\"1978-12-31\",\"1979-01-31\",\"1979-02-28\",\"1979-03-31\",\"1979-04-30\",\"1979-05-31\",\"1979-06-30\",\"1979-07-31\",\"1979-08-31\",\"1979-09-30\",\"1979-10-31\",\"1979-11-30\",\"1979-12-31\",\"1980-01-31\",\"1980-02-29\",\"1980-03-31\",\"1980-04-30\",\"1980-05-31\",\"1980-06-30\",\"1980-07-31\",\"1980-08-31\",\"1980-09-30\",\"1980-10-31\",\"1980-11-30\",\"1980-12-31\",\"1981-01-31\",\"1981-02-28\",\"1981-03-31\",\"1981-04-30\",\"1981-05-31\",\"1981-06-30\",\"1981-07-31\",\"1981-08-31\",\"1981-09-30\",\"1981-10-31\",\"1981-11-30\",\"1981-12-31\",\"1982-01-31\",\"1982-02-28\",\"1982-03-31\",\"1982-04-30\",\"1982-05-31\",\"1982-06-30\",\"1982-07-31\",\"1982-08-31\",\"1982-09-30\",\"1982-10-31\",\"1982-11-30\",\"1982-12-31\",\"1983-01-31\",\"1983-02-28\",\"1983-03-31\",\"1983-04-30\",\"1983-05-31\",\"1983-06-30\",\"1983-07-31\",\"1983-08-31\",\"1983-09-30\",\"1983-10-31\",\"1983-11-30\",\"1983-12-31\",\"1984-01-31\",\"1984-02-29\",\"1984-03-31\",\"1984-04-30\",\"1984-05-31\",\"1984-06-30\",\"1984-07-31\",\"1984-08-31\",\"1984-09-30\",\"1984-10-31\",\"1984-11-30\",\"1984-12-31\",\"1985-01-31\",\"1985-02-28\",\"1985-03-31\",\"1985-04-30\",\"1985-05-31\",\"1985-06-30\",\"1985-07-31\",\"1985-08-31\",\"1985-09-30\",\"1985-10-31\",\"1985-11-30\",\"1985-12-31\",\"1986-01-31\",\"1986-02-28\",\"1986-03-31\",\"1986-04-30\",\"1986-05-31\",\"1986-06-30\",\"1986-07-31\",\"1986-08-31\",\"1986-09-30\",\"1986-10-31\",\"1986-11-30\",\"1986-12-31\",\"1987-01-31\",\"1987-02-28\",\"1987-03-31\",\"1987-04-30\",\"1987-05-31\",\"1987-06-30\",\"1987-07-31\",\"1987-08-31\",\"1987-09-30\",\"1987-10-31\",\"1987-11-30\",\"1987-12-31\",\"1988-01-31\",\"1988-02-29\",\"1988-03-31\",\"1988-04-30\",\"1988-05-31\",\"1988-06-30\",\"1988-07-31\",\"1988-08-31\",\"1988-09-30\",\"1988-10-31\",\"1988-11-30\",\"1988-12-31\",\"1989-01-31\",\"1989-02-28\",\"1989-03-31\",\"1989-04-30\",\"1989-05-31\",\"1989-06-30\",\"1989-07-31\",\"1989-08-31\",\"1989-09-30\",\"1989-10-31\",\"1989-11-30\",\"1989-12-31\",\"1990-01-31\",\"1990-02-28\",\"1990-03-31\",\"1990-04-30\",\"1990-05-31\",\"1990-06-30\",\"1990-07-31\",\"1990-08-31\",\"1990-09-30\",\"1990-10-31\",\"1990-11-30\",\"1990-12-31\",\"1991-01-31\",\"1991-02-28\",\"1991-03-31\",\"1991-04-30\",\"1991-05-31\",\"1991-06-30\",\"1991-07-31\",\"1991-08-31\",\"1991-09-30\",\"1991-10-31\",\"1991-11-30\",\"1991-12-31\",\"1992-01-31\",\"1992-02-29\",\"1992-03-31\",\"1992-04-30\",\"1992-05-31\",\"1992-06-30\",\"1992-07-31\",\"1992-08-31\",\"1992-09-30\",\"1992-10-31\",\"1992-11-30\",\"1992-12-31\",\"1993-01-31\",\"1993-02-28\",\"1993-03-31\",\"1993-04-30\",\"1993-05-31\",\"1993-06-30\",\"1993-07-31\",\"1993-08-31\",\"1993-09-30\",\"1993-10-31\",\"1993-11-30\",\"1993-12-31\",\"1994-01-31\",\"1994-02-28\",\"1994-03-31\",\"1994-04-30\",\"1994-05-31\",\"1994-06-30\",\"1994-07-31\",\"1994-08-31\",\"1994-09-30\",\"1994-10-31\",\"1994-11-30\",\"1994-12-31\",\"1995-01-31\",\"1995-02-28\",\"1995-03-31\",\"1995-04-30\",\"1995-05-31\",\"1995-06-30\",\"1995-07-31\",\"1995-08-31\",\"1995-09-30\",\"1995-10-31\",\"1995-11-30\",\"1995-12-31\",\"1996-01-31\",\"1996-02-29\",\"1996-03-31\",\"1996-04-30\",\"1996-05-31\",\"1996-06-30\",\"1996-07-31\",\"1996-08-31\",\"1996-09-30\",\"1996-10-31\",\"1996-11-30\",\"1996-12-31\",\"1997-01-31\",\"1997-02-28\",\"1997-03-31\",\"1997-04-30\",\"1997-05-31\",\"1997-06-30\",\"1997-07-31\",\"1997-08-31\",\"1997-09-30\",\"1997-10-31\",\"1997-11-30\",\"1997-12-31\",\"1998-01-31\",\"1998-02-28\",\"1998-03-31\",\"1998-04-30\",\"1998-05-31\",\"1998-06-30\",\"1998-07-31\",\"1998-08-31\",\"1998-09-30\",\"1998-10-31\",\"1998-11-30\",\"1998-12-31\",\"1999-01-31\",\"1999-02-28\",\"1999-03-31\",\"1999-04-30\",\"1999-05-31\",\"1999-06-30\",\"1999-07-31\",\"1999-08-31\",\"1999-09-30\",\"1999-10-31\",\"1999-11-30\",\"1999-12-31\",\"2000-01-31\",\"2000-02-29\",\"2000-03-31\",\"2000-04-30\",\"2000-05-31\",\"2000-06-30\",\"2000-07-31\",\"2000-08-31\",\"2000-09-30\",\"2000-10-31\",\"2000-11-30\",\"2000-12-31\",\"2001-01-31\",\"2001-02-28\",\"2001-03-31\",\"2001-04-30\",\"2001-05-31\",\"2001-06-30\",\"2001-07-31\",\"2001-08-31\",\"2001-09-30\",\"2001-10-31\",\"2001-11-30\",\"2001-12-31\",\"2002-01-31\",\"2002-02-28\",\"2002-03-31\",\"2002-04-30\",\"2002-05-31\",\"2002-06-30\",\"2002-07-31\",\"2002-08-31\",\"2002-09-30\",\"2002-10-31\",\"2002-11-30\",\"2002-12-31\",\"2003-01-31\",\"2003-02-28\",\"2003-03-31\",\"2003-04-30\",\"2003-05-31\",\"2003-06-30\",\"2003-07-31\",\"2003-08-31\",\"2003-09-30\",\"2003-10-31\",\"2003-11-30\",\"2003-12-31\",\"2004-01-31\",\"2004-02-29\",\"2004-03-31\",\"2004-04-30\",\"2004-05-31\",\"2004-06-30\",\"2004-07-31\",\"2004-08-31\",\"2004-09-30\",\"2004-10-31\",\"2004-11-30\",\"2004-12-31\",\"2005-01-31\",\"2005-02-28\",\"2005-03-31\",\"2005-04-30\",\"2005-05-31\",\"2005-06-30\",\"2005-07-31\",\"2005-08-31\",\"2005-09-30\",\"2005-10-31\",\"2005-11-30\",\"2005-12-31\",\"2006-01-31\",\"2006-02-28\",\"2006-03-31\",\"2006-04-30\",\"2006-05-31\",\"2006-06-30\",\"2006-07-31\",\"2006-08-31\",\"2006-09-30\",\"2006-10-31\",\"2006-11-30\",\"2006-12-31\",\"2007-01-31\",\"2007-02-28\",\"2007-03-31\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":false}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plotly Documentation Environment in Python\nDESCRIPTION: This snippet sets up the environment for Plotly documentation. It includes loading custom CSS, installing the publisher package, and using it to publish the notebook as documentation. This is typically used by Plotly developers for maintaining their documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/mixed/mixed.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'mixed.ipynb', 'python/graphing-multiple-chart-types/', 'Python Multiple Chart Types | plotly',\n    'How to design figures with multiple chart types in python.',\n    title = 'Python Multiple Chart Types | plotly',\n    name = 'Multiple Chart Types',\n    thumbnail='thumbnail/multiple-chart-type.jpg', language='python',\n    has_thumbnail='true', display_as='file_settings', order=16)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtualenv Directory for Plotly Environments\nDESCRIPTION: Command to create a directory for storing Python virtual environments, which is a common practice for organizing virtualenvs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/.virtualenvs\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Folder Sharing Interface Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of Plotly's folder sharing interface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nImage(url = 'http://i.imgur.com/YRyTCQy.png')\n```\n\n----------------------------------------\n\nTITLE: Sort Emails by Date\nDESCRIPTION: Defines a function to extract dates from emails and sorts the mailbox chronologically\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef extract_date(email):\n    date = email.get('Date')\n    return parsedate(date)\n\nsorted_mails = sorted(mbox, key=extract_date)\nmbox.update(enumerate(sorted_mails))\nmbox.flush()\n```\n\n----------------------------------------\n\nTITLE: Checking Default Title Font Size in Plotly\nDESCRIPTION: Retrieves the current default font size for the figure title.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.titlefont.size\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository for Plotly Documentation\nDESCRIPTION: Commands for cloning the graphing-library-docs repository and changing into the project directory. This is the first step in the contribution process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:plotly/graphing-library-docs.git\n$ cd graphing-library-docs\n```\n\n----------------------------------------\n\nTITLE: Plotting Plotly Figure in IPython Notebook\nDESCRIPTION: Shows how to send a Plotly Figure object to Plotly and display it in an IPython notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig, filename='s0_second-plot')\n```\n\n----------------------------------------\n\nTITLE: Initializing Packages and Plotly Authentication in R and Python\nDESCRIPTION: This snippet initializes and loads libraries necessary for handling data and plotting in R and Python environments. It includes loading Plotly for creating interactive graphs, and matplotlib as well as plotly's Python client library for visualization. It demonstrates how to authenticate access to Plotly's API with user credentials.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# OIserve contains the survival package and sample datasets\\n%R library(OIsurv)\\n%R library(devtools)\\n%R library(plotly)\\n%R library(IRdisplay)\\n\\n# Authenticate to plotly's api using your account\\n%R py <- plotly(\"rmdk\", \"0sn825k4r8\")\\n\\n# Load python libraries\\nimport numpy as np\\nimport pandas as pd\\nimport lifelines as ll\\n\\n# Plotting helpers\\nfrom IPython.display import HTML\\n%matplotlib inline\\nimport matplotlib.pyplot as plt\\nimport plotly.plotly as py\\nimport plotly.tools as tls   \\nfrom plotly.graph_objs import *\\n\\nfrom pylab import rcParams\\nrcParams['figure.figsize']=10, 5\n```\n\n----------------------------------------\n\nTITLE: Defining Nodes in Graph Modeling Language (GML)\nDESCRIPTION: This snippet shows the format for defining nodes in a graph using GML (Graph Modeling Language). Each node has a unique numeric ID and a label attribute containing what appears to be an author name, likely representing researchers in a citation or collaboration network.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_2\n\nLANGUAGE: GML\nCODE:\n```\n  node\n  [\n    id 822\n    label \"LONDEI, A\"\n  ]\n  node\n  [\n    id 823\n    label \"MAZUR, C\"\n  ]\n  node\n  [\n    id 824\n    label \"LOZOWSKI, A\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher in Python\nDESCRIPTION: Installs and uses the Plotly publisher package to publish the notebook to Plotly's documentation site. Sets up custom styling for the notebook and publishes it with metadata including title, description, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\n\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish('pdf-reports.ipynb', 'python/pdf-reports/', 'PDF Reports'\n                  'How to make PDF reports with Python and Plotly Graphs.',\n                  title = 'Python PDF Reports | plotly',\n                  name = 'PDF Reports',\n                  has_thumbnail='true', thumbnail='thumbnail/ipython_10_pdf_report.jpg', \n                  language='python', page_type='example_index',\n                  display_as='report_generation', order=1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example in Python using IPython\nDESCRIPTION: This snippet demonstrates how to display a Dash example using an IFrame in IPython. It shows both the dashboard and its source code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-multiplesubplot/\", width=\"100%\", height=\"950px\", frameBorder=\"0\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-multiplesubplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Defining Network Graph Edges in GML Format\nDESCRIPTION: This code defines edges in a network graph using the GML (Graph Modeling Language) format. Each edge connects a source node to a target node with a specific value representing the weight or strength of the connection. The connections form a complex network with various relationships between nodes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_13\n\nLANGUAGE: gml\nCODE:\n```\nedge\n  [\n    source 847\n    target 845\n    value 0.333333\n  ]\n  edge\n  [\n    source 847\n    target 846\n    value 0.333333\n  ]\n  edge\n  [\n    source 849\n    target 848\n    value 1\n  ]\n  edge\n  [\n    source 851\n    target 850\n    value 0.5\n  ]\n  edge\n  [\n    source 852\n    target 850\n    value 0.5\n  ]\n  edge\n  [\n    source 852\n    target 851\n    value 0.5\n  ]\n  edge\n  [\n    source 853\n    target 646\n    value 0.5\n  ]\n  edge\n  [\n    source 853\n    target 78\n    value 0.5\n  ]\n  edge\n  [\n    source 856\n    target 855\n    value 0.5\n  ]\n  edge\n  [\n    source 857\n    target 855\n    value 0.5\n  ]\n  edge\n  [\n    source 857\n    target 856\n    value 0.5\n  ]\n  edge\n  [\n    source 859\n    target 106\n    value 1\n  ]\n  edge\n  [\n    source 860\n    target 294\n    value 0.2\n  ]\n  edge\n  [\n    source 861\n    target 860\n    value 0.5\n  ]\n  edge\n  [\n    source 862\n    target 860\n    value 0.5\n  ]\n  edge\n  [\n    source 862\n    target 861\n    value 0.5\n  ]\n  edge\n  [\n    source 863\n    target 654\n    value 0.5\n  ]\n  edge\n  [\n    source 864\n    target 863\n    value 0.5\n  ]\n  edge\n  [\n    source 864\n    target 654\n    value 0.5\n  ]\n  edge\n  [\n    source 865\n    target 654\n    value 0.5\n  ]\n  edge\n  [\n    source 865\n    target 34\n    value 0.5\n  ]\n  edge\n  [\n    source 866\n    target 371\n    value 0.5\n  ]\n  edge\n  [\n    source 867\n    target 866\n    value 0.5\n  ]\n  edge\n  [\n    source 867\n    target 371\n    value 0.5\n  ]\n  edge\n  [\n    source 871\n    target 870\n    value 0.25\n  ]\n  edge\n  [\n    source 872\n    target 870\n    value 0.25\n  ]\n  edge\n  [\n    source 872\n    target 871\n    value 0.25\n  ]\n  edge\n  [\n    source 873\n    target 870\n    value 0.25\n  ]\n  edge\n  [\n    source 873\n    target 871\n    value 0.25\n  ]\n  edge\n  [\n    source 873\n    target 872\n    value 0.25\n  ]\n  edge\n  [\n    source 874\n    target 870\n    value 0.25\n  ]\n  edge\n  [\n    source 874\n    target 871\n    value 0.25\n  ]\n  edge\n  [\n    source 874\n    target 872\n    value 0.25\n  ]\n  edge\n  [\n    source 874\n    target 873\n    value 0.25\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining Baseline Period\nDESCRIPTION: Sets the baseline period for baseline correction of epochs, using (None, 0) to indicate from the start of the epoch to time zero (stimulus onset).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nbaseline = (None, 0)  # means from the first instant to t = 0\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Statistical Analysis with Plotly\nDESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas and SciPy for statistical analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Data from Salesforce with SOQL\nDESCRIPTION: Uses Simple Salesforce to execute a SOQL query that retrieves lead information including ID, Status, and Owner Name from the Salesforce database.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nleads_for_status = sf.query(\"SELECT Id, Status, Owner.Name FROM Lead\")\n```\n\n----------------------------------------\n\nTITLE: Computing Random Portfolio Performance Metrics in Python\nDESCRIPTION: Defines a function to calculate the mean return and standard deviation (risk) for a randomly weighted portfolio. Uses matrix operations to compute the portfolio return and volatility based on the covariance matrix of asset returns.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef random_portfolio(returns):\n    ''' \n    Returns the mean and standard deviation of returns for a random portfolio\n    '''\n\n    p = np.asmatrix(np.mean(returns, axis=1))\n    w = np.asmatrix(rand_weights(returns.shape[0]))\n    C = np.asmatrix(np.cov(returns))\n    \n    mu = w * p.T\n    sigma = np.sqrt(w * C * w.T)\n    \n    # This recursion reduces outliers to keep plots pretty\n    if sigma > 2:\n        return random_portfolio(returns)\n    return mu, sigma\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fonts and CSS to Jupyter Notebook in Python\nDESCRIPTION: This code adds custom fonts and CSS to the Jupyter notebook for improved styling and readability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('2d-kernel-density-distributions', '/ipython-notebooks/2d-kernel-density-distributions/', \n                  '2d Kernel Density Distributions', \n                  '2D Kernel Density Distributions Using Plotly')\n```\n\n----------------------------------------\n\nTITLE: Simulating Closed-Loop Heading Response\nDESCRIPTION: Simulates the response of the closed-loop system to a commanded heading angle of 10 degrees, computing the actual heading over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\npsic = np.deg2rad(10.0) * np.ones_like(time)\ntime, psi, state = cn.forced_response(psi_psic, T=time, U=psic)\n```\n\n----------------------------------------\n\nTITLE: Running MCMC for Bioassay Analysis\nDESCRIPTION: Executes the adaptive Metropolis-Hastings algorithm for the bioassay model with specified initial values and tuning parameters. This generates posterior samples for the intercept and slope parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nbioassay_trace, acc = metropolis_tuned(n_iter, f=calc_posterior, initial_values=(1,0), prop_var=5, tune_for=9000)\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Timestamps with SQLite strftime\nDESCRIPTION: Uses SQLite's strftime function to extract the hour component from timestamp values, allowing for time-based analysis of complaint patterns.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                              'strftime(\\'%H\\', CreatedDate) as hour, '\n                              'ComplaintType '\n                       'FROM data '\n                       'LIMIT 5 ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for 3D Surface Plots in Plotly\nDESCRIPTION: Imports necessary Plotly modules and NumPy for creating 3D surface plots with lighting effects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Categorical Color Facet Grid\nDESCRIPTION: Creates a facet grid with colors based on categorical variables using the mtcars dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmtcars = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv')\n\nfig = ff.create_facet_grid(\n    mtcars,\n    x='mpg',\n    y='wt',\n    facet_col='cyl',\n    color_name='cyl',\n    color_is_cat=True,\n)\npy.iplot(fig, filename='facet - color by categorical variable')\n```\n\n----------------------------------------\n\nTITLE: Node Definitions in Graph Format\nDESCRIPTION: This code defines nodes in a graph structure where each node has an ID and a label. The nodes appear to represent individuals with labels formatted as last names followed by initials. This is a standard format used in graph visualization and network analysis tools.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_3\n\nLANGUAGE: graph\nCODE:\n```\n  node\n  [\n    id 1028\n    label \"MARTIN, R\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Layout and Creating Subplots\nDESCRIPTION: Sets up the visual layout for the 3D plots including axes properties, camera position, and subplot configuration. Creates side-by-side 3D surface plots with annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n## This section deals with the layout of the plot\n\nscene = dict(\n    xaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    yaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    zaxis=dict(\n        gridcolor='rgb(255, 255, 255)',\n        zerolinecolor='rgb(255, 255, 255)',\n        showbackground=True,\n        backgroundcolor='rgb(230, 230,230)'\n    ),\n    cameraposition = [[0.2, 0.5, 0.5, 0.2], [0, 0, 0], 3.5]\n)\n\nfig = tools.make_subplots(rows=1, cols=2,\n                          specs=[[{'is_3d': True}, {'is_3d': True}]])\n\n# adding surfaces to subplots.\ndata_original['scene'] = 'scene1'\ndata_original['colorbar'] = dict(x=-0.07)\n\ndata['scene'] = 'scene2'\nfig.append_trace(data_original, 1, 1)\nfig.append_trace(data, 1, 2)\n\n\nfig['layout'].update(title='Ring Cyclide',\n                     height=800, width=9000)\nfig['layout']['scene1'].update(scene)\nfig['layout']['scene2'].update(scene)\nfig['layout']['annotations'] = [\n        dict(\n            x=0.1859205,\n            y=0.95,       #0.9395833,\n            xref='x',\n            yref='y',\n            text='4th Dim Prop. to z',\n            showarrow=False\n        ),\n            dict(\n            x=0.858,\n            y=0.95,\n            xref='x',\n            yref='y',\n            text='4th Dim Prop. to Distance from Origin',\n            showarrow=False\n        )\n    \n    ]\n\n\nplot_url = py.plot(fig, filename='multiple_surface_plots', auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Bar Chart and Line Plot with Plotly in Python\nDESCRIPTION: This code demonstrates how to create a complex chart combining a horizontal bar chart with a line plot. It includes custom annotations, multiple axes, and detailed styling options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\nimport numpy as np\n\ny_saving = [1.3586, 2.2623000000000002, 4.9821999999999997, 6.5096999999999996,\n            7.4812000000000003, 7.5133000000000001, 15.2148, 17.520499999999998\n            ]\ny_net_worth = [93453.919999999998, 81666.570000000007, 69889.619999999995,\n               78381.529999999999, 141395.29999999999, 92969.020000000004,\n               66090.179999999993, 122379.3]\nx_saving = ['Japan', 'United Kingdom', 'Canada', 'Netherlands',\n            'United States', 'Belgium', 'Sweden', 'Switzerland']\nx_net_worth = ['Japan', 'United Kingdom', 'Canada', 'Netherlands',\n               'United States', 'Belgium', 'Sweden', 'Switzerland'\n               ]\ntrace0 = go.Bar(\n    x=y_saving,\n    y=x_saving,\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='Household savings, percentage of household disposable income',\n    orientation='h',\n)\ntrace1 = go.Scatter(\n    x=y_net_worth,\n    y=x_net_worth,\n    mode='lines+markers',\n    line=dict(\n        color='rgb(128, 0, 128)'),\n    name='Household net worth, Million USD/capita',\n)\nlayout = dict(\n    title='Household savings & net worth for eight OECD countries',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.85],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.85],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.47, 1],\n        side='top',\n        dtick=25000,\n    ),\n    legend=dict(\n        x=0.029,\n        y=1.038,\n        font=dict(\n            size=10,\n        ),\n    ),\n    margin=dict(\n        l=100,\n        r=20,\n        t=70,\n        b=70,\n    ),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\n\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xd, x=ydn - 20000,\n                            text='{:,}'.format(ydn) + 'M',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd + 3,\n                            text=str(yd) + '%',\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(50, 171, 96)'),\n                            showarrow=False))\n# Source\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.109,\n                        text='OECD \"' +\n                             '(2015), Household savings (indicator), ' +\n                             'Household net worth (indicator). doi: ' +\n                             '10.1787/cfc6f499-en (Accessed on 05 June 2015)',\n                        font=dict(family='Arial', size=10,\n                                  color='rgb(150,150,150)'),\n                        showarrow=False))\n\nlayout['annotations'] = annotations\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Regression Plot with Plotly\nDESCRIPTION: Creates a scatter plot with a linear regression line using Plotly and SciPy. The code generates a dataset, calculates the linear fit using stats.linregress, and creates an interactive plot with both the original data points and the fitted line.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/linear-fit/linear-fits.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# Scientific libraries\nfrom numpy import arange,array,ones\nfrom scipy import stats\n\n\nxi = arange(0,9)\nA = array([ xi, ones(9)])\n\n# (Almost) linear sequence\ny = [19, 20, 20.5, 21.5, 22, 23, 23, 25.5, 24]\n\n# Generated linear fit\nslope, intercept, r_value, p_value, std_err = stats.linregress(xi,y)\nline = slope*xi+intercept\n\n# Creating the dataset, and generating the plot\ntrace1 = go.Scatter(\n                  x=xi, \n                  y=y, \n                  mode='markers',\n                  marker=go.Marker(color='rgb(255, 127, 14)'),\n                  name='Data'\n                  )\n\ntrace2 = go.Scatter(\n                  x=xi, \n                  y=line, \n                  mode='lines',\n                  marker=go.Marker(color='rgb(31, 119, 180)'),\n                  name='Fit'\n                  )\n\nannotation = go.Annotation(\n                  x=3.5,\n                  y=23.5,\n                  text='$R^2 = 0.9551,\\\\Y = 0.716X + 19.18$',\n                  showarrow=False,\n                  font=go.Font(size=16)\n                  )\nlayout = go.Layout(\n                title='Linear Fit in Python',\n                plot_bgcolor='rgb(229, 229, 229)',\n                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),\n                  annotations=[annotation]\n                )\n\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\n\npy.plot(fig, filename='Linear-Fit-in-python')\n```\n\n----------------------------------------\n\nTITLE: Table with Right Aligned Plots\nDESCRIPTION: Creates a complex layout combining a table with three right-aligned scatter plots showing Bitcoin mining statistics. Uses custom domain settings for layout control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table_sub.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntable_trace1 = go.Table(\n    domain=dict(x=[0, 0.5],\n                y=[0, 1.0]),\n    columnwidth = [30] + [33, 35, 33],\n    columnorder=[0, 1, 2, 3, 4],\n    header = dict(height = 50,\n                  values = [['<b>Date</b>'],['<b>Number<br>transactions</b>'], \n                            ['<b>Output-volume(BTC)</b>'], ['<b>Market-Price</b>']], \n                  line = dict(color='rgb(50, 50, 50)'),\n                  align = ['left'] * 5,\n                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                  fill = dict(color='#d562be')),\n    cells = dict(values = [df.iloc[j][1:5] for j in range(25)],\n                 line = dict(color='#506784'),\n                 align = ['left'] * 5,\n                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),\n                 format = [None] + [\", .2f\"] * 2 + [',.4f'],  \n                 prefix = [None] * 2 + ['$', u'\\u20BF'],\n                 suffix=[None] * 4,\n                 height = 27,\n                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))\n)\n\ntrace1=go.Scatter(\n    x=df['Date'],\n    y=df['Hash-rate'],\n    xaxis='x1',\n    yaxis='y1',\n    mode='lines',\n    line=dict(width=2, color='#9748a1'),\n    name='hash-rate-TH/s'\n)\n\ntrace2=go.Scatter(\n    x=df['Date'],\n    y=df['Mining-revenue-USD'],\n    xaxis='x2',\n    yaxis='y2',\n    mode='lines',\n    line=dict(width=2, color='#b04553'),\n    name='mining revenue'\n)\n\ntrace3=go.Scatter(\n    x=df['Date'],\n    y=df['Transaction-fees-BTC'],\n    xaxis='x3',\n    yaxis='y3',\n    mode='lines',\n    line=dict(width=2, color='#af7bbd'),\n    name='transact-fee'\n)\n\naxis=dict(\n    showline=True,\n    zeroline=False,\n    showgrid=True,\n    mirror=True, \n    ticklen=4, \n    gridcolor='#ffffff',\n    tickfont=dict(size=10)\n)\n\nlayout1 = dict(\n    width=950,\n    height=800,\n    autosize=False,\n    title='Bitcoin mining stats for 180 days',\n    margin = dict(t=100),\n    showlegend=False,          \n    xaxis1=dict(axis, **dict(domain=[0.55, 1], anchor='y1', showticklabels=False)),\n    xaxis2=dict(axis, **dict(domain=[0.55, 1], anchor='y2', showticklabels=False)),          \n    xaxis3=dict(axis, **dict(domain=[0.55, 1], anchor='y3')), \n    yaxis1=dict(axis, **dict(domain=[0.66, 1.0], anchor='x1', hoverformat='.2f')),  \n    yaxis2=dict(axis, **dict(domain=[0.3 + 0.03, 0.63], anchor='x2', tickprefix='$', hoverformat='.2f')),\n    yaxis3=dict(axis, **dict(domain=[0.0, 0.3], anchor='x3', tickprefix=u'\\u20BF', hoverformat='.2f')),\n    plot_bgcolor='rgba(228, 222, 249, 0.65)',\n    annotations=[\n        dict(\n            showarrow=False,\n            text='The last 20 records',\n            xref='paper',\n            yref='paper',\n            x=0,\n            y=1.01,\n            xanchor='left',\n            yanchor='bottom',  \n            font=dict(size=15)\n        )\n    ]\n)\n\nfig1 = dict(data=[table_trace1, trace1, trace2, trace3], layout=layout1)\npy.iplot(fig1)\n```\n\n----------------------------------------\n\nTITLE: Embedding an Existing Plotly Streaming Plot\nDESCRIPTION: Demonstrates how to embed an existing streaming plot in your application using Plotly's embedding tools.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Embed an existing Plotly streaming plot\ntls.embed('streaming-demos','6')\n\n# Note that the time point correspond to internal clock of the servers, \n# that is UTC time.\n```\n\n----------------------------------------\n\nTITLE: Publishing Setup for Plotly Documentation\nDESCRIPTION: Sets up custom styling and publishes the notebook as documentation using Plotly's publisher package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/scatter-plot-on-maps/scatter-plot-on-map.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'scatter-plot-on-map.ipynb', 'python/scatter-plots-on-maps/', 'Python Scatter Plots on Maps | Examples | Plotly',\n    'How to make scatter plots on maps in Python. Scatter plots on maps highlight geographic areas and can be colored by value.',\n    title = 'Python Scatter Plots on Maps | Plotly',\n    name = 'Scatter Plots on Maps',\n    has_thumbnail='true', thumbnail='thumbnail/scatter-plot-on-maps.jpg', \n    language='python',\n    display_as='maps', order=2,\n    ipynb= '~notebook_demo/57')\n```\n\n----------------------------------------\n\nTITLE: Custom Binning in Histograms with Plotly\nDESCRIPTION: This snippet demonstrates various approaches to custom binning in histograms. It shows how to use 'nbinsx' parameter for automatic bin calculation and 'xbins' with 'autobinx=False' for precise control over bin start, end, and size with date values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nx = ['1970-01-01', '1970-01-01', '1970-02-01', '1970-04-01', '1970-01-02', '1972-01-31', '1970-02-13', '1971-04-19']\n\n\ntrace0 = go.Histogram(\n    x=x,\n    nbinsx = 4,         \n  )\ntrace1 = go.Histogram(\n    x=x,\n    nbinsx = 8,   \n  )\ntrace2 = go.Histogram(\n    x=x,\n    nbinsx = 10,     \n  )\ntrace3 = go.Histogram(\n    x=x,\n    xbins=dict(\n        start='1969-11-15',\n        end='1972-03-31',\n        size= 'M18'),\n    autobinx = False\n)\ntrace4 = go.Histogram(\n    x=x,\n    xbins=dict(\n        start='1969-11-15',\n        end='1972-03-31',\n        size= 'M4'),\n    autobinx = False\n)\ntrace5 = go.Histogram(\n    x=x,\n    xbins=dict(\n        start='1969-11-15',\n        end='1972-03-31',\n        size= 'M2'),\n    autobinx = False\n)\n  \nfig = tools.make_subplots(rows=3, cols=2)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\nfig.append_trace(trace4, 3, 1)\nfig.append_trace(trace5, 3, 2)\n\npy.iplot(fig, filename='custom binning')\n```\n\n----------------------------------------\n\nTITLE: Defining Weighted Graph Edges in GraphViz Format\nDESCRIPTION: This snippet shows the structure for defining weighted edges between nodes in a graph using GraphViz syntax. Each edge is defined with a source node, target node, and a numeric value representing the edge weight.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_8\n\nLANGUAGE: GraphViz\nCODE:\n```\nedge\n[\n  source 252\n  target 218\n  value 0.25\n]\nedge\n[\n  source 255\n  target 254\n  value 1\n]\nedge\n[\n  source 256\n  target 254\n  value 0.5\n]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Box Plot to Chart Studio in R\nDESCRIPTION: Example of creating a box plot with the plotly package and publishing it to Chart Studio using api_create(). The filename parameter sets the title of the file in your Chart Studio account.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2020-01-17-getting-started-with-chart-studio.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(midwest, x = ~percollege, color = ~state, type = \"box\")\napi_create(p, filename = \"r-docs-midwest-boxplots\")\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edges with Source, Target, and Value\nDESCRIPTION: This snippet shows the structure used to define edges in the graph. Each edge specifies a source node, target node, and a numeric value representing the strength or weight of the connection.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n  edge\n  [\n    source 1342\n    target 150\n    value 0.333333\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Color Linked Brushing with Toggle Controls\nDESCRIPTION: Extends the previous example to support multiple color brushing with toggle buttons, allowing users to select between different active colors for selections.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncars_df = pd.read_csv(\n    'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv')\n\n# Build parcats dimensions\ncategorical_dimensions = [\n  'body-style',\n  'drive-wheels',\n  'fuel-type'\n];\n\ndimensions = [\n    dict(values=cars_df[label], label=label)\n    for label in categorical_dimensions\n]\n\n# Build colorscale\ncolor = np.zeros(len(cars_df), dtype='uint8')\ncolorscale = [[0, 'gray'], [0.33, 'gray'],\n              [0.33, 'firebrick'], [0.66, 'firebrick'],\n              [0.66, 'blue'], [1.0, 'blue']];\ncmin = -0.5\ncmax = 2.5\n\n# Build figure as FigureWidget\nfig = go.FigureWidget(\n    data=[\n        go.Scatter(\n            x=cars_df.horsepower,\n            y=cars_df['highway-mpg'],\n            marker={'color': color,\n                    'cmin': cmin,\n                    'cmax': cmax,\n                    'colorscale': colorscale,\n                    'showscale': True,\n                    'colorbar': {'tickvals': [0, 1, 2],\n                                 'ticktext': ['None', 'Red', 'Blue']}\n                   },\n            mode='markers'),\n\n        go.Parcats(\n            domain={'y': [0, 0.4]},\n            dimensions=dimensions,\n            line={\n                'colorscale': colorscale,\n                'cmin': cmin,\n                'cmax': cmax,\n                'color': color,\n                'shape': 'hspline'})\n    ],\n    layout=go.Layout(\n        height=800,\n        xaxis={'title': 'Horsepower'},\n        yaxis={'title': 'MPG',\n               'domain': [0.6, 1]},\n        dragmode='lasso',\n        hovermode='closest')\n)\n\n# Build color selection widget\ncolor_toggle = widgets.ToggleButtons(\n    options=['None', 'Red', 'Blue'],\n    index=1,\n    description='Brush Color:',\n    disabled=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Plotly Plot Properties\nDESCRIPTION: Shows how to update existing plot properties like title and marker colors using the figure.update() method.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfigure.update(dict(layout=dict(title='Plot update'), data=dict(marker=dict(color='blue'))))\npy.iplot(figure, filename='pyguide_2')\n```\n\n----------------------------------------\n\nTITLE: Publishing IPython Notebook with Plotly\nDESCRIPTION: Sets up custom styling and publishes the notebook as a Plotly tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'survival_analysis.ipynb', 'ipython-notebooks/survival-analysis-r-vs-python/',\n    'Survival Analysis with Plotly: R vs Python', \n    'An introduction to survival analysis with Plotly graphs using R, Python, and IPython notebooks',\n    name='Survival Analysis with Plotly')\n```\n\n----------------------------------------\n\nTITLE: Modifying DataFrame Values\nDESCRIPTION: Shows how to modify specific values in a DataFrame using arithmetic operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndataframe['A'][0] = 120\ndataframe['B'][3] = -2*dataframe['B'][3]\n\ntable = FF.create_table(dataframe)\npy.iplot(table, filename='math-operations-dataframe-changed')\n```\n\n----------------------------------------\n\nTITLE: Displaying a Presentation with Preserved Image Aspect Ratios in Jupyter\nDESCRIPTION: This code renders the previously created presentation with preserved image aspect ratios in a Jupyter notebook, setting the text parameter to False to hide navigation instructions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_3 = url_to_iframe(pres_url_3, False)\nIPython.display.HTML(iframe_3)\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary for Colors in Plotly Gantt Chart\nDESCRIPTION: This example shows how to use a dictionary to define specific colors for each resource in a Gantt chart. It demonstrates different color formats (RGB, tuple) for each resource.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2016-01-01', Finish='2016-01-02', Resource='Apple'),\n      dict(Task=\"Job B\", Start='2016-01-02', Finish='2016-01-04', Resource='Grape'),\n      dict(Task=\"Job C\", Start='2016-01-02', Finish='2016-01-03', Resource='Banana')]\n\ncolors = dict(Apple = 'rgb(220, 0, 0)',\n              Grape = 'rgb(170, 14, 200)',\n              Banana = (1, 0.9, 0.16))\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True)\npy.iplot(fig, filename='gantt-dictioanry-colors', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation with Custom Styling\nDESCRIPTION: Sets up custom styling for the documentation and publishes it using the publisher module with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'geo-streaming', 'python/geo-streaming//', 'Streaming to a Map',\n    'Streaming in Plotly with Python', name=\"Streaming to Maps\",\n    title = 'Geo-Streaming with Plotly',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false',\n    ipynb= '~notebook_demo/82') \n```\n\n----------------------------------------\n\nTITLE: Creating an Index Page Template for a New Chart Type in HTML\nDESCRIPTION: This HTML template is used to create an index page for a new chart type in the Plotly JavaScript documentation. It includes front matter for page metadata and a Liquid template to automatically include examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n---\nname: Add-Chart-Type-or-Topic\npermalink: javascript/add-chart-type-or-topic/\ndescription: How to make a D3.js-based add-chart-type-or-topic in javascript. Add an additional sentence summarizing chart-type or topic.\nlayout: langindex\nthumbnail: thumbnail/mixed.jpg \nlanguage: plotly_js\npage_type: example_index\ndisplay_as: **SEE BELOW\norder: 5\n---\n  {% assign examples = site.posts | where:\"language\",\"plotly_js\" | where:\"suite\",\"add-chart-type-or-topic\"| sort: \"order\" %}\n  {% include posts/auto_examples.html examples=examples %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation for Streamline Plots in Plotly\nDESCRIPTION: Shows how to access the help documentation for the create_streamline function in Plotly's figure_factory module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/streamline/streamline.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_streamline)\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edges in GraphML Format\nDESCRIPTION: This code snippet defines edges between nodes in a graph structure. Each edge specifies a source node, a target node, and a value associated with the connection. The format appears to be GraphML or a similar graph definition language.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_15\n\nLANGUAGE: GraphML\nCODE:\n```\n  edge\n  [\n    source 1068\n    target 1063\n    value 0.111111\n  ]\n  edge\n  [\n    source 1068\n    target 1064\n    value 0.111111\n  ]\n  edge\n  [\n    source 1068\n    target 1065\n    value 0.111111\n  ]\n```\n\n----------------------------------------\n\nTITLE: Adding Web Fonts and Publishing the Notebook\nDESCRIPTION: Adds Google web fonts to the notebook and uses the publisher module to publish the completed notebook with a title and description.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('scoreboard-republican-candidates', '/ipython-notebooks/scoreboard-heatmaps/', \n                  'Two Scoreboards for Republican Presidential Candidates', \n                  'Plot Scoreboard Using Python and Plotly')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display settings and publishes the notebook using custom styling and configuration options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/t-test/python-T-Test.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-T-Test.ipynb', 'python/t-test/', 'T-Test | plotly',\n    'Learn how to perform a one sample and two sample t-test using Python.',\n    title='T-Test in Python. | plotly',\n    name='T-Test',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=7,\n    ipynb= '~notebook_demo/115')\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Nodes and Edges in GML Format\nDESCRIPTION: This code snippet shows how to define nodes and edges in GML (Graph Modeling Language) format. Each node has an ID and label, while edges define connections between nodes with source, target, and value attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_4\n\nLANGUAGE: gml\nCODE:\n```\n  node\n  [\n    id 1429\n    label \"UETZ, P\"\n  ]\n  node\n  [\n    id 1430\n    label \"CAGNEY, G\"\n  ]\n  node\n  [\n    id 1431\n    label \"MANSFIELD, T\"\n  ]\n  node\n  [\n    id 1432\n    label \"JUDSON, R\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Closed-Loop Heading Control System\nDESCRIPTION: Implements the closed-loop heading control system with negative feedback and a proportional gain of 0.25, then simplifies the resulting transfer function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nk_psi = 0.25\npsi_psic = feedback(psi_thetac, k_psi)\npsi_psic.minreal()\n```\n\n----------------------------------------\n\nTITLE: Importing Scatter Graph Object in Python\nDESCRIPTION: Imports the Scatter graph object for creating scatter plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import Scatter\n```\n\n----------------------------------------\n\nTITLE: Embedding Vine Animation in Notebook Using HTML\nDESCRIPTION: Embeds an interactive Vine animation showing Plotly's functionality using an HTML iframe.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nHTML('<br><center><iframe class=\"vine-embed\" src=\"https://vine.co/v/Mvzin6HZzLB/embed/simple\" width=\"600\" height=\"600\" frameborder=\"0\"></iframe><script async src=\"//platform.vine.co/static/scripts/embed.js\" charset=\"utf-8\"></script></center><br>')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to check the installed version of Plotly in your Python environment. This is useful to ensure you have the latest features and bug fixes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Simulating Step Response with Python Control\nDESCRIPTION: This snippet simulates the step response of the system for 5 seconds with a 2-degree input using forced_response function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntime = np.linspace(0.0, 5.0, num=1001)\n\ndelta = np.deg2rad(2.0) * np.ones_like(time)\n\ntime, theta, state = cn.forced_response(theta_delta, T=time, U=delta)\n```\n\n----------------------------------------\n\nTITLE: Creating Bioassay Subplot Layout\nDESCRIPTION: Creates a 2x2 subplot layout for organizing the trace and histogram plots for each bioassay parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfig9 = tls.make_subplots(2, 2)\n```\n\n----------------------------------------\n\nTITLE: Replotting Retrieved Plotly Figure in Python\nDESCRIPTION: This code replots the retrieved and styled figure using Plotly's iplot function. It specifies a new filename and adjusts the display width of the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# (@) Send to Plotly and show plot in notebook,\n#     adjust display width (in pixels)\npy.iplot(fig_styled, filename='s0_quickbars-edited', width=700)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Opacity for Markers in Plotly Scatter Plot\nDESCRIPTION: This code demonstrates how to set color opacity for markers in a Plotly scatter plot using RGBA values. This technique maximizes visibility of each point while keeping marker lines opaque.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n  \ndata = [\n    go.Scatter(\n        mode = 'markers',\n        x = x,\n        y = y,\n        marker = dict(\n          color = 'rgba(17, 157, 255, 0.5)',\n          size = 20,\n          line = dict(\n            color = 'rgb(231, 99, 250)',\n            width = 2\n          )\n        ),\n        showlegend = False\n      ),\n      go.Scatter(\n          mode = 'markers',\n          x = [2,2],\n          y = [4.25,4.75],\n          marker = dict(\n            color = 'rgba(17, 157, 255, 0.5)',\n            size = 80,\n            line = dict(\n              color = 'rgb(231, 99, 250)',\n              width = 8\n            )\n          ),\n          showlegend = False\n    )]\n\npy.iplot(data, filename = \"style-color-opacity\")\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Plotly R Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Plotly R fundamentals documentation page, including description, display settings, language, layout type, permalinks and redirects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-fundamental-index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Plotly's R graphing library makes interactive, publication-quality graphs\n  online. Tutorials and tips about fundamental features of Plotly's R API.\ndisplay_as: file_settings\nlanguage: r\nlayout: langindex\nname: Fundamentals\npage_type: example_index\npermalink: r/plotly-fundamentals/\nredirect_from:\n  - r/fundamentals/\n  - r/style-options/\n  - r/layout-options/\nthumbnail: thumbnail/mixed.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with Plotly in Python\nDESCRIPTION: Shows how to create a simple interactive bar chart using Plotly in a Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Bar(x=df.School,\n            y=df.Gap)]\n\npy.iplot(data, filename='jupyter-basic_bar')\n```\n\n----------------------------------------\n\nTITLE: Publishing Mapbox Choropleth Tutorial with Plotly Publisher in Python\nDESCRIPTION: This code uses Plotly's publisher module to publish the tutorial. It sets metadata for the tutorial including title, description, and thumbnail.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish(\n    'mapbox-county-choropleth.ipynb', 'python/mapbox-county-choropleth/', 'Python Mapbox Choropleth Maps | plotly',\n    'How to make a Mapbox Choropleth Map of the Florida Counties in Python with Plotly.',\n    title='Python Mapbox Choropleth Maps | plotly',\n    name='Mapbox Choropleth Maps',\n    thumbnail='thumbnail/county-level-choropleth.jpg', language='python',\n    has_thumbnail='true', display_as='maps', order=1.5,\n    ipynb= '~notebook_demo/56')\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Chart in Chart Studio Enterprise\nDESCRIPTION: Code example for Chart Studio Enterprise subscribers to create a private plot that is only visible to the creator. The sharing parameter is set to \"private\" to restrict access to the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2020-01-17-getting-started-with-chart-studio.md#2025-04-11_snippet_4\n\nLANGUAGE: r\nCODE:\n```\napi_create(filename = \"private-graph\", sharing = \"private\")\n```\n\n----------------------------------------\n\nTITLE: Generating a Grouped Bar Chart with Plotly in Python\nDESCRIPTION: This snippet creates a grouped bar chart comparing animal populations between two zoos using Plotly in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[20, 14, 23],\n    name='SF Zoo'\n)\ntrace2 = go.Bar(\n    x=['giraffes', 'orangutans', 'monkeys'],\n    y=[12, 18, 29],\n    name='LA Zoo'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='grouped-bar')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Publisher Module\nDESCRIPTION: This code configures HTML display settings and uses the publisher module to publish the notebook. It sets various metadata parameters like title, description, thumbnail, language settings, and display configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'ff-subplots.ipynb', 'python/figure-factory-subplots/', 'Python Figure Factory Subplots | plotly',\n    'Subplots with Plotly Figure Factory Charts',\n    title= 'Figure Factory Subplots in Python | plotly',\n    name = 'Figure Factory Subplots',\n    has_thumbnail='true', thumbnail='thumbnail/ff-subplots.jpg',\n    language='python', \n    display_as='multiple_axes', order=10,\n    ipynb= '~PythonPlotBot/1828')\n```\n\n----------------------------------------\n\nTITLE: Jekyll Liquid Template for R Documentation Examples\nDESCRIPTION: Liquid template code that filters and displays R language documentation examples. It assigns posts with specific attributes to a variable and then includes a template to render these examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-basic-index.md#2025-04-11_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"basic\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap with Unequal Block Sizes in Python\nDESCRIPTION: Demonstrates how to create a complex heatmap with spiral layout and unequal block sizes. This example combines a spiral path with a heatmap using the Viridis colorscale.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport plotly.plotly as py\n\ndef spiral(th):\n    a = 1.120529\n    b = 0.306349\n    r = a*np.exp(-b*th)\n    return (r*np.cos(th), r*np.sin(th))\n\nnspiral = 2 # number of spiral loops\n\nth = np.linspace(-np.pi/13,2*np.pi*nspiral,1000); # angle\n(x,y) = spiral(th)\n\n# shift the spiral north so that it is centered\nyshift = (1.6 - (max(y)-min(y)))/2\n\ns = dict(x= -x+x[0], y= y-y[0]+yshift,\n     line =dict(color='white',width=3)) \n\n# Build the rectangles as a heatmap\n# specify the edges of the heatmap squares\nphi = ( 1+np.sqrt(5) )/2.\nxe = [0, 1, 1+(1/(phi**4)), 1+(1/(phi**3)), phi]\nye = [0, 1/(phi**3),1/phi**3+1/phi**4,1/(phi**2),1]\n\nz = [ [13,3,3,5],\n      [13,2,1,5],\n      [13,10,11,12],\n      [13,8,8,8]\n    ]\n\nhm = dict(x = np.sort(xe),\n          y = np.sort(ye)+yshift,\n          z = z,\n          type = 'heatmap',\n          colorscale = 'Viridis')\n\naxis_template = dict(range = [0,1.6], autorange = False,\n             showgrid = False, zeroline = False,\n             linecolor = 'black', showticklabels = False,\n             ticks = '' )\n\nlayout = dict( margin = dict(t=200,r=200,b=200,l=200),\n    xaxis = axis_template,\n    yaxis = axis_template,\n    showlegend = False,\n    width = 700, height = 700,\n    autosize = False )\n\nfigure = dict(data=[s, hm],layout=layout)\n\npy.iplot(figure, filename='golden spiral', height=750)\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data and Creating a Table with Plotly in Python\nDESCRIPTION: Demonstrates how to import CSV data using Pandas and create an interactive table using Plotly in a Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv\")\n\ntable = ff.create_table(df)\npy.iplot(table, filename='jupyter-table1')\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Plotly R Documentation\nDESCRIPTION: YAML front matter configuration for the Jekyll page that defines metadata for the Plotly R basic charts documentation section, including description, display type, language, layout, and permalink settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-basic-index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Plotly's R graphing library makes interactive, publication-quality graphs\n  online. Examples of how to make basic charts.\ndisplay_as: basic\nlanguage: r\nlayout: langindex\nname: Basic Charts\npage_type: example_index\npermalink: r/basic-charts/\nthumbnail: thumbnail/mixed.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Jupyter Notebook\nDESCRIPTION: A simple example showing how to print text in a Jupyter Notebook cell. This demonstrates the basic input and output format of code cells in Jupyter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation in Python\nDESCRIPTION: This snippet sets up custom styling for the documentation and uses a publisher module to publish the documentation. It includes setting fonts, CSS, and metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'delete.ipynb', 'python/delete-plots/', 'Deleting Plots with the Python API',\n    'How to delete plotly graphs in python.',\n    name = 'Deleting Plots', language='python', \n    has_thumbnail='true', thumbnail= 'thumbnail/delete.jpg',\n    display_as='chart_studio', order=9)\n```\n\n----------------------------------------\n\nTITLE: 3D Point Cloud Coordinate Dataset in Plaintext Format\nDESCRIPTION: A collection of 3D coordinates stored as space-separated floating-point values. Each line represents a single point with x, y, and z coordinates. This data format is commonly used for creating 3D point cloud visualizations in Plotly and other graphing libraries.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/data-file.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.689484 -0.014459 0.428751\n0.476483 0.162624 0.449488\n0.586770 0.102149 0.769481\n1.068768 0.678668 1.023915\n1.438060 0.683633 0.752397\n1.483567 0.140479 1.389489\n1.163844 0.125522 1.098527\n1.491083 0.317640 0.760376\n1.970356 0.389628 0.631279\n1.961689 0.144644 0.254462\n1.823355 0.309693 0.151225\n1.868743 0.171245 -0.160235\n1.437345 0.781093 -0.569670\n1.248269 0.429151 -0.795403\n1.108745 0.233132 -0.744953\n1.670774 -0.080785 -0.820339\n1.503391 -0.179939 -0.791839\n1.406028 0.025858 -0.967830\n1.971070 0.309369 -0.651420\n1.853437 0.658340 -0.661080\n1.361601 0.443953 -0.126488\n1.139926 1.295734 0.114152\n1.949556 1.032481 0.417303\n2.323108 0.665570 0.615544\n2.558936 0.227190 0.385185\n2.650508 0.817791 0.186861\n2.431305 1.189158 -0.085800\n2.026224 1.167509 -0.120976\n1.971259 0.499964 -0.035002\n1.168452 0.683057 -0.309909\n1.342775 0.672141 -0.208439\n1.129037 0.183479 -0.485355\n0.871781 0.069470 -0.734185\n0.855148 0.587134 -0.574637\n0.395625 0.606762 -1.004597\n1.051331 0.804046 -1.250838\n1.309558 0.672450 -1.174746\n1.876837 0.506276 -1.376205\n2.620561 0.556901 -1.528117\n2.508878 0.445584 -1.501028\n2.646833 0.160679 -1.605397\n2.448341 -0.003327 -1.875326\n1.610501 0.031129 -2.069439\n1.925691 -0.412504 -2.138976\n1.918400 -0.344678 -2.299420\n1.910517 -0.246417 -2.245133\n2.450736 -0.725501 -2.828320\n2.381144 -1.214003 -2.812268\n2.159600 -1.524586 -2.873087\n2.379856 -1.845657 -2.758474\n2.254824 -1.268736 -3.020816\n2.320000 -1.171255 -3.604322\n1.698536 -1.233225 -3.369023\n1.527831 -1.374688 -3.394583\n1.530377 -1.355630 -3.295790\n1.672040 -1.146433 -3.038195\n1.534793 -1.167195 -3.646896\n1.886021 -0.864813 -3.523450\n2.062097 -0.488551 -3.273344\n2.128729 0.153843 -3.081451\n2.057646 0.302593 -2.701675\n2.155564 0.568636 -2.718267\n2.698137 0.182249 -2.875416\n3.066121 0.562960 -2.909034\n3.925938 0.252966 -3.011479\n4.240422 -0.220912 -2.795740\n3.907132 -0.328587 -2.430246\n3.750647 -0.193345 -2.166711\n2.918651 -0.238123 -2.143549\n2.980647 0.261956 -2.218529\n2.992436 0.081961 -2.173249\n2.710340 -0.490590 -1.838208\n2.693541 -0.259896 -1.613949\n2.361263 -0.187197 -1.208869\n1.897547 -0.032457 -0.792615\n2.345557 0.049672 -1.164745\n2.007566 0.121710 -1.080368\n1.599818 -0.105825 -1.086920\n1.182395 -0.745416 -0.878417\n1.469907 -0.795117 -0.562867\n1.460792 -0.450440 -0.599801\n1.113180 -0.514758 -0.508419\n0.879555 -0.639992 -0.672436\n1.351152 -0.329654 -0.829762\n1.392628 -0.215191 -0.596751\n1.926062 -0.375350 -0.554818\n1.211311 -1.208597 -0.556275\n0.913065 -1.064432 -0.494078\n1.363192 -1.338370 -0.238343\n2.032102 -1.405084 -0.335621\n1.738637 -1.456743 0.028875\n1.249448 -1.299677 0.102270\n0.610179 -1.236958 0.315250\n0.853197 -0.482796 0.164532\n0.794531 -0.346327 -0.462431\n0.635271 -0.689043 -0.492473\n0.545627 -0.840409 -0.344744\n0.137978 -1.164410 -0.537114\n0.552325 -1.242295 -0.476395\n0.417952 -1.794645 -0.288381\n0.063636 -1.392008 -0.495803\n0.270569 -1.760419 -0.027581\n0.465861 -2.329245 0.035753\n0.224424 -2.168251 -0.193070\n0.234005 -1.890062 0.136462\n0.066304 -2.254005 0.006976\n-0.590007 -2.074276 -0.466010\n-0.564228 -2.180494 -0.123120\n-0.862183 -2.411982 -0.028077\n-0.835138 -2.001141 0.037551\n-0.358328 -2.011921 -0.136263\n-0.153771 -1.745932 -0.246048\n-0.402331 -1.553359 -0.313232\n-0.288023 -1.880650 -0.271885\n-0.076669 -1.859422 -0.312956\n-0.314785 -1.519305 -0.132629\n0.038873 -1.148978 0.096291\n-0.373976 -1.561826 0.111550\n-0.305032 -1.189923 -0.133022\n-0.325419 -1.093044 -0.228238\n0.261204 -0.908630 -0.426471\n1.198158 -0.709813 -0.421499\n0.955160 -0.866599 -0.542272\n-0.054643 -0.849581 -0.459668\n0.170616 -0.818985 -0.482471\n0.449830 -0.295839 -0.534499\n0.033248 -0.426162 -0.397172\n0.321234 -0.342447 -0.372978\n0.299138 -0.219997 -0.136276\n0.498764 -0.515553 -0.431687\n1.114521 -0.494993 -0.075384\n0.637120 -0.680155 -0.358235\n0.938266 -1.230975 -0.003075\n1.321346 -0.900911 -0.195531\n1.293162 -0.765870 -0.375611\n1.508690 -0.695327 -0.218006\n1.913274 -0.904249 0.365808\n1.765946 -0.915630 0.263471\n2.040353 -1.337914 0.586506\n1.381556 -1.929364 0.389045\n0.174465 -2.540700 0.315377\n0.028495 -2.366009 0.128681\n0.379481 -1.975778 -0.269045\n-0.669148 -1.711153 -0.162167\n-0.534714 -1.548458 -0.336419\n-0.886413 -1.547606 -0.019438\n-1.721495 -1.398594 0.231251\n-1.002140 -0.855336 0.026580\n-1.919706 -1.261225 0.190797\n-1.140082 -1.693494 0.737523\n-1.305455 -1.940874 0.326120\n-1.385275 -1.513315 0.310784\n-1.700804 -1.454906 0.596005\n-1.383739 -1.487379 0.379760\n-1.418135 -1.296192 0.044075\n-1.316977 -1.051611 0.239119\n-1.209985 -1.301749 0.251076\n-1.627034 -0.881364 0.218926\n-1.867307 -1.073767 -0.028889\n-2.198017 -1.046423 0.155034\n-2.421694 -1.381144 0.187969\n-2.415605 -1.391328 0.387360\n-2.724491 -1.006637 -0.038025\n-2.008271 -1.017700 -0.095609\n-1.465631 -0.956630 -0.028786\n-1.626449 -1.079294 0.100394\n-1.340794 -1.054864 -0.231481\n-1.017376 -0.987401 0.016533\n-0.716250 -0.671692 -0.217537\n-0.617038 -0.737152 -0.297303\n-0.551376 -0.769002 -0.232595\n-0.184614 -0.613152 -0.177161\n-0.081288 -0.695816 -0.583397\n0.485871 -0.376302 -1.082045\n0.984442 -0.394376 -0.701239\n0.695647 -0.137996 -0.589993\n0.089495 -0.432969 -0.751204\n-0.321205 -0.605479 -0.800903\n-0.967925 -0.710437 -1.191601\n-1.118629 -0.924980 -0.601275\n-1.550979 -0.436884 -0.199922\n-2.283605 -0.894900 -0.649577\n-1.755864 -1.162008 -0.712762\n-2.054186 -0.540825 -0.140276\n-1.970629 -0.637033 -0.296211\n-1.417753 -0.917763 -0.255914\n-1.710782 -0.529252 -0.141535\n-0.792070 -0.311093 -0.398747\n-0.956221 -0.476337 -0.717366\n-1.288402 0.245260 -1.040109\n-2.311384 0.293434 -1.061344\n-1.980432 -0.177670 -1.414031\n-2.813299 -0.389484 -1.394257\n-2.345587 -0.311234 -1.003791\n-2.111185 -0.097245 -0.825758\n-2.290606 -0.760096 -1.086674\n-2.656762 -0.203731 -1.190057\n-2.373667 -0.155186 -1.466129\n-2.454531 -0.091853 -1.915351\n-1.968977 0.342108 -1.952409\n```\n\n----------------------------------------\n\nTITLE: Publishing a Plotly Notebook Documentation\nDESCRIPTION: This snippet shows how to publish a Plotly notebook as part of the documentation. It sets up custom styling for the notebook, installs the publisher package, and calls the publish function with metadata parameters including title, thumbnail, language, and display options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-line/3d-line.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-line.ipynb', 'python/3d-line-plots/', 'Python 3D Line Plots | plotly',\n    'How to make 3D Line Plots',\n    title= '3D Line Plots in Python | plotly',\n    name = '3D Line Plots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-line.jpg', \n    language='python',\n    display_as='3d_charts', order=3,\n    ipynb= '~notebook_demo/63')\n```\n\n----------------------------------------\n\nTITLE: Creating and Processing a DataFrame from Opportunity Data\nDESCRIPTION: Creates a Pandas DataFrame from the open opportunities query results and processes it by extracting the owner names and removing unnecessary attributes returned from Salesforce.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nlarge_opps_df = pd.DataFrame(large_opps['records'])\nlarge_opps_df['Owner'] = large_opps_df.Owner.apply(lambda x: x['Name']) # just extract owner name\nlarge_opps_df.drop('attributes', inplace=True, axis=1) # get rid of extra return data from Salesforce\nlarge_opps_df.head()\n```\n\n----------------------------------------\n\nTITLE: Sunburst Chart with Repeated Labels\nDESCRIPTION: Creates a sunburst chart showing sports categorization across different regions, demonstrating how to handle repeated labels and complex hierarchical relationships.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sunburst/sunburst-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n\ntrace = go.Sunburst(\n ids=[\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels= [\n    \"North<br>America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American<br>Football\", \"Football\", \"Association\",\n    \"Australian<br>Rules\", \"American<br>Football\", \"Rugby\", \"Rugby<br>League\",\n    \"Rugby<br>Union\"\n  ],\n  parents=[\n    \"\", \"\", \"\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n  outsidetextfont={\"size\": 20, \"color\": \"#377eb8\"},\n  leaf={\"opacity\": 0.4},\n  marker={\"line\": {\"width\": 2}}\n)\n\nlayout = go.Layout(\n    margin = go.layout.Margin(t=0, l=0, r=0, b=0),\n    sunburstcolorway=[\"#636efa\",\"#ef553b\",\"#00cc96\"]\n)\n\nfig = go.Figure([trace], layout)\n\npy.iplot(fig, filename='repeated_labels_sunburst')\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Bar Chart with Custom Color Palette in Plotly Python\nDESCRIPTION: This code demonstrates how to create a horizontal bar chart with a custom color palette and complex annotations. It includes custom formatting for labels and uses a stacked bar layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntop_labels = ['Strongly<br>agree', 'Agree', 'Neutral', 'Disagree',\n              'Strongly<br>disagree']\n\ncolors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)']\n\nx_data = [[21, 30, 21, 16, 12],\n          [24, 31, 19, 15, 11],\n          [27, 26, 23, 11, 13],\n          [29, 24, 15, 18, 14]]\n\ny_data = ['The course was effectively<br>organized',\n          'The course developed my<br>abilities and skills ' +\n          'for<br>the subject', 'The course developed ' +\n          'my<br>ability to think critically about<br>the subject',\n          'I would recommend this<br>course to a friend']\n\n\ntraces = []\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        traces.append(go.Bar(\n            x=[xd[i]],\n            y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(\n                        color='rgb(248, 248, 249)',\n                        width=1)\n            )\n        ))\n\nlayout = go.Layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    margin=dict(\n        l=120,\n        r=10,\n        t=140,\n        b=80\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] / 2, y=yd,\n                            text=str(xd[0]) + '%',\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] / 2, y=1.1,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]/2), y=yd, \n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]/2), y=1.1,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=14,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='bar-colorscale')\n```\n\n----------------------------------------\n\nTITLE: ggplot2 Style Facet Grid\nDESCRIPTION: Demonstrates creating a facet grid in ggplot2 style using the tips dataset with custom marker symbols.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\ntips = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tips.csv')\n\nfig = ff.create_facet_grid(\n    tips,\n    x='total_bill',\n    y='tip',\n    facet_row='sex',\n    facet_col='smoker',\n    marker={'symbol': 'circle-open', 'size': 10},\n    ggplot2=True\n)\npy.iplot(fig, filename='facet - ggplot2 style')\n```\n\n----------------------------------------\n\nTITLE: Calculating System Poles in Python Control\nDESCRIPTION: This code calculates the poles of the transfer function to determine system stability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntheta_delta.pole()\n```\n\n----------------------------------------\n\nTITLE: Python Survival Analysis Implementation\nDESCRIPTION: Implements survival analysis using lifelines library in Python, creating a KaplanMeierFitter object and fitting it to tongue cancer data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom lifelines.estimation import KaplanMeierFitter\nkmf = KaplanMeierFitter()\n\nf = tongue.type==1\nT = tongue[f]['time']\nC = tongue[f]['delta']\n\nkmf.fit(T, event_observed=C)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Return Data for Portfolio Simulation in Python\nDESCRIPTION: Creates random return data for a specified number of assets over a given number of observations. Uses numpy's random normal distribution generator to simulate financial returns.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n## NUMBER OF ASSETS\nn_assets = 4\n\n## NUMBER OF OBSERVATIONS\nn_obs = 1000\n\nreturn_vec = np.random.randn(n_assets, n_obs)\n```\n\n----------------------------------------\n\nTITLE: Simple Presentation Example\nDESCRIPTION: Basic example showing how to create and upload a simple presentation with two slides using the Presentations API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.presentation_objs as pres\n\nfilename = 'simple-pres'\nmarkdown_string = \"\"\"\n# slide 1\nThere is only one slide.\n\n---\n# slide 2\nAgain, another slide on this page.\n\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string)\npres_url_0 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Display Configuration for Documentation\nDESCRIPTION: Sets up display configuration for documentation including custom fonts and CSS styles. Also installs and configures the publisher package for documentation generation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ff_table.ipynb', 'python/figure-factory/table/', 'Figure Factory Tables',\n    \"How to make tables in Python with Plotly's Figure Factory.\",\n    title = 'Figure Factory Tables | plotly',\n    thumbnail='thumbnail/table.jpg', language='python',\n    ipynb='~notebook_demo/13')\n```\n\n----------------------------------------\n\nTITLE: Plotting Time Series Data - Python/Plotly\nDESCRIPTION: Sets up Plotly graph objects to create a time series visualization of the disaster data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as pgo\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = pgo.Data([\n        pgo.Scatter(\n            x=[str(year) + '-01-01' for year in np.arange(1851, 1962)],\n            y=disasters_array,\n            mode='lines+markers'\n    )\n])\n```\n\nLANGUAGE: python\nCODE:\n```\nlayout = pgo.Layout(\n    title='UK coal mining disasters (per year), 1851--1962',\n    xaxis=pgo.XAxis(title='Year', type='date', range=['1851-01-01', '1962-01-01']),\n    yaxis=pgo.YAxis(title='Disaster count')\n)\n```\n\n----------------------------------------\n\nTITLE: Pandas DateTime Conversion\nDESCRIPTION: Simple example of converting string to datetime using Pandas.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npd.to_datetime([\"a\"])\n```\n\n----------------------------------------\n\nTITLE: Including layout components with Liquid templating in HTML\nDESCRIPTION: This code uses Liquid templating to include various layout components in the HTML structure of the documentation page. The include statements pull in relevant layout sections such as links to examples in other languages, dashboard plugs, and documentation examples specific to R statistical charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-statistical-index.md#2025-04-11_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include layouts/page-another-language.html %}\n{% include layouts/dashplug.html %}\n```\n\n----------------------------------------\n\nTITLE: Publishing Normality Tests Tutorial with Plotly Publisher in Python\nDESCRIPTION: This code sets up the styling for the notebook display and publishes the tutorial using Plotly's publisher module. It configures fonts, CSS styling, and metadata for the published tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Normality-Test.ipynb', 'python/normality-test/', 'Normality Tests',\n    'Learn how to generate various normality tests using Python. ',\n    title = 'Normality Tests | Plotly',\n    has_thumbnail='false',\n    language='python',\n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='statistics', order=2, ipynb='~notebook_demo/266')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme in JavaScript\nDESCRIPTION: JavaScript code for defining a custom placeholder theme named 'dark' with specific background, foreground colors, text size, and font.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nHolder.add_theme(\"dark\", {background:\"#000\", foreground:\"#aaa\", size:11, font: \"Monaco\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Periodic Table Visualization with Custom Hover Text in Plotly\nDESCRIPTION: Shows how to create a complex visualization of the periodic table as an annotated heatmap with custom hover text displaying element names and atomic masses.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/annotated-heatmap/annotated_heatmap.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Add Periodic Table Data\nsymbol = [['H', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'He'],\n         ['Li', 'Be', '', '', '', '', '', '', '', '', '', '', 'B', 'C', 'N', 'O', 'F', 'Ne'],\n         ['Na', 'Mg', '', '', '', '', '', '', '', '', '', '', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar'],\n         ['K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr'],\n         ['Rb ', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe' ],\n         ['Cs', 'Ba', '', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn' ],\n         ['Fr', 'Ra', '', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Uut', 'Fl', 'Uup', 'Lv', 'Uus', 'Uuo'],\n         ['', '', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', ''],\n         ['', '', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', '' ],\n         ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n         ['', 'Alkali Metal', '', '', 'Transition Metal', '', '', 'Actinide', '', '', 'Semimetal', '', '', 'Halogen', '', '', '', ''],\n         ['', 'Alkaline Metal', '', '', 'Lanthanide', '', '', 'Basic Metal', '', '', 'Nonmetal', '', '', 'Noble Gas', '', '', '', '']]\n\nelement = [['Hydrogen', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Helium'],\n           ['Lithium', 'Beryllium', '', '', '', '', '', '', '', '', '', '', 'Boron', 'Carbon', 'Nitrogen', 'Oxygen', 'Fluorine', 'Neon'],\n           ['Sodium', 'Magnesium', '', '', '', '', '', '', '', '', '', '', 'Aluminium', 'Silicon', 'Phosphorus', 'Sulfur', 'Chlorine', ' Argon'],\n           ['Potassium', ' Calcium', ' Scandium', ' Titanium', ' Vanadium', ' Chromium',  'Manganese', 'Iron', 'Cobalt', 'Nickel', 'Copper', 'Zinc', 'Gallium', 'Germanium', 'Arsenic', 'Selenium', 'Bromine', 'Krypton'],\n           ['Rubidium', 'Strontium', 'Yttrium', 'Zirconium', 'Niobium', 'Molybdenum', 'Technetium', 'Ruthenium', 'Rhodium', 'Palladium', 'Silver', 'Cadmium', 'Indium', 'Tin', 'Antimony', 'Tellurium', 'Iodine', 'Xenon'],\n           [' Cesium', ' Barium', '',  'Hafnium', 'Tantalum', 'Tungsten', 'Rhenium', 'Osmium', 'Iridium', 'Platinum', 'Gold', 'Mercury', 'Thallium', 'Lead', 'Bismuth', 'Polonium', 'Astatine', 'Radon'],\n           [' Francium', ' Radium', '', 'Rutherfordium','Dubnium','Seaborgium','Bohrium','Hassium','Meitnerium','Darmstadtium','Roentgenium','Copernicium','Ununtrium','Ununquadium','Ununpentium','Ununhexium','Ununseptium','Ununoctium'],\n           ['', '',  'Lanthanum', 'Cerium', 'Praseodymium', 'Neodymium', 'Promethium', 'Samarium', 'Europium', 'Gadolinium', 'Terbium', 'Dysprosium', 'Holmium', 'Erbium', 'Thulium', 'Ytterbium', 'Lutetium', ''],\n           ['', '', 'Actinium', 'Thorium', 'Protactinium', 'Uranium', 'Neptunium', 'Plutonium', 'Americium', 'Curium', 'Berkelium', 'Californium', 'Einsteinium','Fermium' ,'Mendelevium', 'Nobelium', 'Lawrencium', '' ],\n           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n           ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']]\n\natomic_mass = [[ 1.00794, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  4.002602],\n     [ 6.941, 9.012182, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  10.811, 12.0107, 14.0067, 15.9994, 18.9984032, 20.1797],\n     [ 22.98976928, 24.3050, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0,  26.9815386, 28.0855, 30.973762, 32.065, 35.453, 39.948], \n     [ 39.0983, 40.078, 44.955912, 47.867, 50.9415, 51.9961, 54.938045, 55.845, 58.933195, 58.6934, 63.546, 65.38, 69.723, 72.64, 74.92160, 78.96, 79.904, 83.798],\n     [ 85.4678, 87.62, 88.90585, 91.224, 92.90638, 95.96, 98, 101.07, 102.90550, 106.42, 107.8682, 112.411, 114.818, 118.710, 121.760, 127.60, 126.90447, 131.293],\n     [ 132.9054519, 137.327, .0, 178.49, 180.94788, 183.84, 186.207, 190.23, 192.217, 195.084, 196.966569, 200.59, 204.3833, 207.2, 208.98040, 209, 210, 222],\n     [223, 226, .0, 267, 268, 271, 272, 270, 276, 281, 280, 285, 284, 289, 288, 293, 'unknown', 294],\n     [.0, .0, 138.90547, 140.116, 140.90765, 144.242, 145, 150.36, 151.964, 157.25, 158.92535, 162.500, 164.93032, 167.259, 168.93421, 173.054, 174.9668, .0],\n     [.0, .0, 227, 232.03806, 231.03588, 238.02891, 237, 244, 243, 247, 247, 251, 252, 257, 258, 259, 262, .0],\n     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],\n     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],\n     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0]]\n\nz = [[.8, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, 1.],\n     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .7, .8, .8, .8, .9, 1.],\n     [.1, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .6, .7, .8, .8, .9, 1], \n     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .7, .8, .8, .9, 1.],\n     [.1, .2, .3, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .7, .7, .9, 1.],\n     [.1, .2, .4, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .7, .9, 1.],\n     [.1, .2, .5, .3, .3, .3, .3, .3, .3, .3, .3, .3, .6, .6, .6, .6, .9, 1.],\n     [.0, .0, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .4, .0],\n     [.0, .0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .0],\n     [.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0],\n     [.1, .1, .1, .3, .3, .3, .5, .5, .5, .7, .7, .7, .9, .9, .9, .0, .0, .0],\n     [.2, .2, .2, .4, .4, .4, .6, .6, .6, .8, .8, .8, 1., 1., 1., .0, .0, .0]]\n\n# Display element name and atomic mass on hover\nhover=range(len(symbol))\nfor x in range(len(symbol)):\n    hover[x] = [i + '<br>' + 'Atomic Mass: ' + str(j) for i, j in zip(element[x], atomic_mass[x])]\n\n# Invert Matrices\nsymbol = symbol[::-1]\nhover = hover[::-1]\nz = z[::-1]\n\n# Set Colorscale\ncolorscale=[[0.0, 'rgb(255,255,255)'], [.2, 'rgb(255, 255, 153)'], \n            [.4, 'rgb(153, 255, 204)'], [.6, 'rgb(179, 217, 255)'], \n            [.8, 'rgb(240, 179, 255)'],[1.0, 'rgb(255, 77, 148)']]\n\n# Make Annotated Heatmap\npt = ff.create_annotated_heatmap(z, annotation_text=symbol, text=hover,\n                                 colorscale=colorscale, font_colors=['black'], hoverinfo='text')\npt.layout.title = 'Periodic Table'\n\npy.iplot(pt, filename='periodic_table')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Script for publishing the notebook as documentation, including custom CSS and font styles. This is specific to Plotly's documentation process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'static-image-export.ipynb', 'python/static-image-export/', 'Static Image Export | plotly',\n    'Plotly allows you to save static images of your plots. Save the image to your local computer, or embed it inside your Jupyter notebooks as a static image.',\n    title = 'Static Image Export | plotly',\n    name = 'Static Image Export',\n    thumbnail='thumbnail/static-image-export.png',\n    language='python',\n    uses_plotly_offline=True,\n    page_type='example_index', has_thumbnail='true', display_as='file_settings', order=1,\n    ipynb='~notebook_demo/252')\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Privacy Settings in Chart Studio\nDESCRIPTION: Python code to configure the default privacy settings for your Chart Studio plots, setting them to private instead of the default public setting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nchart_studio.tools.set_config_file(world_readable=False,\n                             sharing='private')\n```\n\n----------------------------------------\n\nTITLE: Counting Lines in CSV File using Shell Command\nDESCRIPTION: Uses a shell command to count the total number of lines in the dataset file, giving an indication of its size.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n!wc -l < 311_100M.csv # Number of lines in dataset\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs the Plotly publisher, and publishes the notebook with specific metadata for the Plotly documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/frequency-counts/python-Frequency-Counts.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Frequency-Counts.ipynb', 'python/frequency-counts/', 'Frequency Counts | plotly',\n    'Learn how to perform frequency counts using Python.',\n    title='Frequency Counts in Python. | plotly',\n    name='Frequency Counts',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=2,\n    ipynb= '~notebook_demo/111')\n```\n\n----------------------------------------\n\nTITLE: Running Holder with Custom Domain Setting\nDESCRIPTION: JavaScript for running Holder with a specific domain setting, extending the default configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nHolder.run({domain:\"example.com\"})\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Parametric Plot with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create an interactive 3D parametric plot using Numpy and Plotly in Python. It generates a surface plot based on parametric equations and customizes the layout for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\nimport numpy as np\n\ns = np.linspace(0, 2 * np.pi, 240)\nt = np.linspace(0, np.pi, 240)\ntGrid, sGrid = np.meshgrid(s, t)\n\nr = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)\nx = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)\ny = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)\nz = r * np.cos(tGrid)                  # z = r*cos(t)\n\nsurface = go.Surface(x=x, y=y, z=z)\ndata = [surface]\n\nlayout = go.Layout(\n    title='Parametric Plot',\n    scene=dict(\n        xaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        yaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        ),\n        zaxis=dict(\n            gridcolor='rgb(255, 255, 255)',\n            zerolinecolor='rgb(255, 255, 255)',\n            showbackground=True,\n            backgroundcolor='rgb(230, 230,230)'\n        )\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='jupyter-parametric_plot')\n```\n\n----------------------------------------\n\nTITLE: Accessing Theta to Theta Command Transfer Function\nDESCRIPTION: Retrieves the previously defined transfer function that relates the commanded roll angle to the actual roll angle of the bicycle.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntheta_thetac\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Creating a Pull Request\nDESCRIPTION: Series of git commands for creating a feature branch, checking status, and pushing changes to prepare for making a pull request with documentation changes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your_feature_branch\ngit status\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Replotting a Public Plotly Figure by URL in Python\nDESCRIPTION: This snippet shows how to retrieve a public Plotly figure using its URL and replot it without modifications. It uses the chart_studio.plotly library to interact with the Plotly API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/get-requests.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nfig = py.get_figure(\"https://plotly.com/~PlotBot/5\")\n\nplot_url = py.plot(fig, filename=\"python-replot1\")\n```\n\n----------------------------------------\n\nTITLE: Importing xhtml2pdf for PDF Conversion\nDESCRIPTION: Imports the xhtml2pdf library that will be used to convert HTML reports containing Plotly graphs into PDF format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport xhtml2pdf\nfrom xhtml2pdf import pisa\n```\n\n----------------------------------------\n\nTITLE: Julia Documentation Index Template\nDESCRIPTION: Front matter template for creating new Julia documentation index pages with metadata like title, permalink, and display settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/julia/README.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n---\ntitle: Julia Add-Chart-Type-or-Topic | Examples | Plotly\nname: Add-Chart-Type-or-Topic\npermalink: julia/add-chart-type-or-topic/\ndescription: How to make a add-chart-type-or-topic in Julia. Add an additional sentence summarizing chart-type or topic.\nlayout: base\n    thumbnail: thumbnail/add-chart-type-or-topic.jpg *MORE INFO ON ADDING THUMBNAILS BELOW\nlanguage: julia\npage_type: example_index\ndisplay_as: **SEE BELOW\norder: ***SEE BELOW\n---\n{% assign examples = site.posts | where:\"language\",\"julia\" | where:\"suite\",\"add-chart-type-or-topic\"**** | sort: \"order\" %}\n{% include posts/auto_examples.html examples=examples %}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Matrix Operations\nDESCRIPTION: Imports necessary Python libraries including Plotly for visualization, NumPy for matrix operations, Pandas for data handling, and SciPy for scientific computing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Constructing FigureWidget with Data and Layout Arguments\nDESCRIPTION: Creates a FigureWidget with pre-defined data (heatmap) and layout. This demonstrates how to initialize a complete visualization in a single step, specifying both data and appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as py\npy.init_notebook_mode()\n\ntrace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n                   x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n                   y=['Morning', 'Afternoon', 'Evening'])\ndata=[trace]\nlayout = go.Layout(title='Activity Heatmap')\n\nf2 = go.FigureWidget(data,layout)\n\n# two different ways to view f2\npy.iplot(f2)\nf2\n```\n\n----------------------------------------\n\nTITLE: Customizing A and B Axes in Carpet Plot with Plotly Python\nDESCRIPTION: This code shows how to customize the A and B axes of a carpet plot using Plotly in Python. It adds tick prefixes, suffixes, and adjusts smoothing and grid properties for both axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis = dict(\n        tickprefix = 'a = ',\n        ticksuffix = 'm',\n        smoothing = 1,\n        minorgridcount = 9,\n    ),\n    baxis = dict(\n        tickprefix = 'b = ',\n        ticksuffix = 'pa',\n        smoothing = 1,\n        minorgridcount = 9,\n    )\n)\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"carpet/add-axes\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Examples in IPython\nDESCRIPTION: Shows how to embed Dash applications in IPython notebooks using IFrame for both the application and its source code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface/3d-surface.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-3dsurfaceplot/\", width=\"100%\", height=950 ,frameBorder=\"0\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-3dsurfaceplot/code\", width=\"100%\", height=500 ,frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Market Data\nDESCRIPTION: Downloads GBP/USD spot data from various sources including Bloomberg, Quandl, or CSV using a DataDownloader class.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    ticker = 'GBPUSD'\n    source = \"Bloomberg\"\n    csv_file = None\n\n    event_plot = EventPlot()\n    \n    data_downloader = DataDownloader()\n    start_date = event_plot.parse_dates(['01/01/1975'])\n\n    if source == 'Quandl':\n        vendor_ticker = \"BOE/XUDLUSS\"\n    elif source == 'Bloomberg':\n        vendor_ticker = 'GBPUSD BGN Curncy'\n    elif source == 'CSV':\n        vendor_ticker = 'GBPUSD'\n        csv_file = 'D:/GBPUSD.csv'\n\n    spot = data_downloader.download_time_series(vendor_ticker, ticker, start_date[0], source, csv_file = csv_file)\n```\n\n----------------------------------------\n\nTITLE: Applying Style to Plotly Figure\nDESCRIPTION: Applies custom styling to the figure using a predefined add_style function to improve the visual appearance of the plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nadd_style(fig7)\n```\n\n----------------------------------------\n\nTITLE: Hazard Rate Estimation in R\nDESCRIPTION: Calculates and plots the Nelson-Aalen cumulative hazard estimate using R's survival package and ggplot2.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n%%R  \n\nhaz <- Surv(time[type==1], delta[type==1])\nhaz.fit  <- summary(survfit(haz ~ 1), type='fh')\n\nx <- c(haz.fit$time, 250)\ny <- c(-log(haz.fit$surv), 1.474)\ncum.haz <- data.frame(time=x, cumulative.hazard=y)\n\np <- ggplot(cum.haz, aes(time, cumulative.hazard)) + geom_step() + theme_bw() + \n        ggtitle('Nelson-Aalen Estimate')\np\n```\n\n----------------------------------------\n\nTITLE: Displaying Triangle Image Using IPython\nDESCRIPTION: This snippet imports the Image class from IPython's display module to show an image of a triangle. It's used for visual representation of triangular geometry in the context of B&eacute;zier patches.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage(filename='Imag/triangle.png')\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to create a grouped bar chart using Plotly. It compares vehicle types involved in accidents, showing data for both the first and second vehicles in each incident.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata = Data([\n        Bar(x=code_1.index, y=code_1.COUNT,name='First Vehicle Type'),\n        Bar(x=code_2.index, y=code_2.COUNT,name='Second Vehicle Type')\n     ])\npy.iplot(Figure(data=data, layout=Layout(barmode='group', yaxis=YAxis(title=\"Vehicle Incidents\"))))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Outlier Testing in Python\nDESCRIPTION: This snippet imports the necessary libraries for data analysis and visualization, including Plotly, NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding a Placeholder with Custom Theme\nDESCRIPTION: JavaScript for programmatically adding a placeholder with a new theme using method chaining.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nHolder.add_theme(\"new\",{foreground:\"#ccc\", background:\"#000\", size:10}).add_image(\"holder.js/200x100/new\", \"body\").run()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Jupyter Notebook with Plotly in Python\nDESCRIPTION: This code sets up custom styling for the Jupyter notebook, installs the Plotly publisher, and publishes the notebook. It includes font imports, CSS styling, and uses the publisher module to create a public version of the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Statistics-Charts.ipynb', 'python/statistics-charts/', 'Statistics Charts | plotly',\n    'Learn how to plot statistical data with various charts using Python.',\n    title='Statistics Charts in Python. | plotly',\n    name='Statistics Charts',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=5,\n    ipynb= '~notebook_demo/116')\n```\n\n----------------------------------------\n\nTITLE: Converting Rmd to Markdown Using rmarkdown\nDESCRIPTION: Terminal command for converting a single R Markdown file to Markdown using the rmarkdown package. This is needed to generate the final documentation files.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRscript -e \"rmarkdown::render('YOUR_FILE_.RMD', output_dir='OUTPUT_DIRECTORY')\"\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the correct version is installed for animation support.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration and Styling\nDESCRIPTION: Sets up custom styling for the notebook and publishes it to Plotly's documentation using the publisher package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/filter_example.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'filter_example.ipynb', 'python/textbox-widget/', 'IPython Widgets',\n    'Interacting with Plotly graphs using a Textbox Widget',\n    title = 'Textbox Widget with Plotly',\n    name = 'Textbox Widget with Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/textbox-widget.jpg', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=22,\n    ipynb= '~notebook_demo/87')\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Directory Structure\nDESCRIPTION: Shows the file organization within the Bootstrap framework, highlighting the compiled and minified CSS/JS files, along with the included Glyphicons font files.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/bootstrap/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbootstrap/\n├── css/\n│   ├── bootstrap.css\n│   ├── bootstrap.min.css\n│   ├── bootstrap-theme.css\n│   └── bootstrap-theme.min.css\n├── js/\n│   ├── bootstrap.js\n│   └── bootstrap.min.js\n└── fonts/\n    ├── glyphicons-halflings-regular.eot\n    ├── glyphicons-halflings-regular.svg\n    ├── glyphicons-halflings-regular.ttf\n    └── glyphicons-halflings-regular.woff\n```\n\n----------------------------------------\n\nTITLE: Accessing DataFrame Columns in Pandas\nDESCRIPTION: Shows how to access specific columns in a Pandas DataFrame and retrieve individual elements. This example extracts the 'School' column and displays its first element.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschools = df.School\nschools[0]\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Image in Notebook\nDESCRIPTION: Demonstrates how to display static image bytes as an image in Jupyter notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\n\nImage(static_image_bytes)\n```\n\n----------------------------------------\n\nTITLE: HTML Template Structure for AI/ML Documentation\nDESCRIPTION: HTML structure defining the documentation page layout for Plotly's R graphing library AI/ML charts section. Includes welcome header, title section, and templating logic for documentation examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2021-08-17-ai-index.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\t\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Open Source Graphing Library Artificial Intelligence and Machine Learning Charts</h1>\n\t\t\t\t<p>{{page.description}}</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n\n\t\t{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"ai_ml\" | where: \"layout\",\"base\" | sort: \"order\" %}\n        {% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check snippet to display the installed Plotly version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/quiver/quiver.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling in Python\nDESCRIPTION: Sets up custom styling for the notebook display and uses a publisher package to publish the notebook as documentation. This includes setting up fonts, CSS, and metadata for the published documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/convolution/python-Convolution.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Convolution.ipynb', 'python/convolution/', 'Convolution | plotly',\n    'Learn how to perform convolution between two signals in Python.',\n    title='Convolution in Python | plotly',\n    name='Convolution',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=4)\n```\n\n----------------------------------------\n\nTITLE: Embedding Instagram Post in Notebook Using HTML\nDESCRIPTION: Embeds an Instagram post showing a streaming data application using an HTML iframe.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nHTML('<center><iframe src=\"//instagram.com/p/nJkMMQRyvS/embed/\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe></center>')\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout for Tree Plot Visualization\nDESCRIPTION: This code sets up the layout for the tree plot, including axis specifications, title, and other visual parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\naxis = dict(showline=False, # hide axis line, grid, ticklabels and  title\n            zeroline=False,\n            showgrid=False,\n            showticklabels=False,\n            )\n\nlayout = dict(title= 'Tree with Reingold-Tilford Layout',  \n              annotations=make_annotations(position, v_label),\n              font=dict(size=12),\n              showlegend=False,\n              xaxis=go.XAxis(axis),\n              yaxis=go.YAxis(axis),          \n              margin=dict(l=40, r=40, b=85, t=100),\n              hovermode='closest',\n              plot_bgcolor='rgb(248,248,248)'          \n              )\n```\n\n----------------------------------------\n\nTITLE: Segregating Complaints by Hour with SQL and Plotly in Python\nDESCRIPTION: This complex snippet segregates complaints by hour and type, focusing on the 7 most common complaints for each hour. It uses a loop to query the database for each hour, processes the data, and creates a stacked bar chart using Plotly. This demonstrates advanced data manipulation and visualization techniques.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncomplaint_traces = {} # Each series in the graph will represent a complaint\ncomplaint_traces['Other'] = {}\n\nfor hour in range(1, 24):\n    hour_str = '0'+str(hour) if hour < 10 else str(hour)\n    df = pd.read_sql_query('SELECT  CreatedDate, '\n                                   'ComplaintType ,'\n                                   'strftime(\\'%H\\', CreatedDate) as `hour`,  '\n                                   'COUNT(*) as num_complaints '\n                           'FROM data '\n                           'WHERE hour = \"{}\" '\n                           'GROUP BY ComplaintType '\n                           'ORDER BY -num_complaints'.format(hour_str), disk_engine)\n    \n    complaint_traces['Other'][hour] = sum(df.num_complaints)\n    \n    # Grab the 7 most common complaints for that hour\n    for i in range(7):\n        complaint = df.get_value(i, 'ComplaintType')\n        count = df.get_value(i, 'num_complaints')\n        complaint_traces['Other'][hour] -= count\n        if complaint in complaint_traces:\n            complaint_traces[complaint][hour] = count\n        else:\n            complaint_traces[complaint] = {hour: count}\n            \ntraces = []\nfor complaint in complaint_traces:\n    traces.append({\n        'x': range(25),\n        'y': [complaint_traces[complaint].get(i, None) for i in range(25)],\n        'name': complaint,\n        'type': 'bar'\n    })\n\npy.iplot({\n    'data': traces, \n    'layout': {\n        'barmode': 'stack',\n        'xaxis': {'title': 'Hour in Day'},\n        'yaxis': {'title': 'Number of Complaints'},\n        'title': 'The 7 Most Common 311 Complaints by Hour in a Day'\n    }}, filename='311/most common complaints by hour')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/latex/latex-typesetting.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Labels from Graph Vertices in Python\nDESCRIPTION: Extracts and creates a list of labels from the graph vertices, which will be displayed in the Plotly visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlabels=[v['label']  for v in V] \n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Parameter Visualization (Intercept)\nDESCRIPTION: Creates a time series scatter plot and histogram for the intercept parameter from the MCMC trace. These visualizations help assess convergence and the posterior distribution of the parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = pgo.Scatter(\n    y=trace_tuned.T[0],\n    xaxis='x1',\n    yaxis='y1',\n    line=pgo.Line(width=1),\n    marker=pgo.Marker(color=color)\n)\n\ntrace2 = pgo.Histogram(\n    x=trace_tuned.T[0],\n    xaxis='x2',\n    yaxis='y2',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Earthquake Data from CartoDB using SQL\nDESCRIPTION: This SQL query selects relevant columns from the 'all_month' table in CartoDB, including magnitude, type, time, place, and depth of earthquakes. It also formats the timestamp for compatibility with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   mag,\n   magtype,\n   type,\n   to_char(time,'yyyy-mm-DD HH24:MI:SS') AS time_plotly,\n   place,\n   depth\nFROM\n  all_month\n```\n\n----------------------------------------\n\nTITLE: Computing Control Points\nDESCRIPTION: Calculating the final control points for the Bézier patch.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nb=control_points(n, T, b_z)\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation of DataFrame Columns in Python\nDESCRIPTION: Demonstrates how to calculate the standard deviation for each column in a Pandas DataFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf.std()\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Title in Plotly\nDESCRIPTION: Labels the y-axis with 'City MPG' to provide context for the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfig.layout.yaxis.title = 'City MPG'\n```\n\n----------------------------------------\n\nTITLE: Simulating Closed-Loop Step Response in Python Control\nDESCRIPTION: This code simulates the step response of the closed-loop system to a 3-degree roll angle command.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nthetac = np.deg2rad(3.0) * np.ones_like(time)\ntime, theta, state = cn.forced_response(theta_thetac, T=time, U=thetac)\n```\n\n----------------------------------------\n\nTITLE: Including Dashboard Promotion Template\nDESCRIPTION: Liquid include statement that inserts a dashboard promotion template. This likely adds information about Plotly's dashboard capabilities to the page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2015-07-30-r-index.md#2025-04-11_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\n{% include layouts/dashplug.html %}\n```\n\n----------------------------------------\n\nTITLE: Load NYC Flights Dataset\nDESCRIPTION: Loading and preprocessing the NYC flights dataset from GitHub\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\n    'https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv')\ndf = df.drop(df.columns[[0]], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for plotly.io.show() Function\nDESCRIPTION: Python code to display the help documentation for the plotly.io.show() function, providing details on its parameters and usage for displaying plots in various contexts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nhelp(plotly.io.show)\n```\n\n----------------------------------------\n\nTITLE: Updating Scatter Object with Dictionary in Python\nDESCRIPTION: Updates a scatter plot graph object using a Python dictionary via the update() method.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ngo1.update(dict2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Relative Barmode in Plotly Python\nDESCRIPTION: This code snippet demonstrates how to create a bar chart with relative barmode in Plotly. It defines four traces with different data points and combines them in a layout with relative barmode, which stacks bars with the same sign together and places positive and negative bars on opposite sides of the zero line.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nx = [1, 2, 3, 4]\n\ntrace1 = {\n  'x': x,\n  'y': [1, 4, 9, 16],\n  'name': 'Trace1',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': [6, -8, -4.5, 8],\n  'name': 'Trace2',\n  'type': 'bar'\n};\ntrace3 = {\n  'x': x,\n  'y': [-15, -3, 4.5, -8],\n  'name': 'Trace3',\n  'type': 'bar'\n }\n \ntrace4 = {\n  'x': x,\n  'y': [-1, 3, -3, -4],\n  'name': 'Trace4',\n  'type': 'bar'\n }\n \ndata = [trace1, trace2, trace3, trace4];\nlayout = {\n  'xaxis': {'title': 'X axis'},\n  'yaxis': {'title': 'Y axis'},\n  'barmode': 'relative',\n  'title': 'Relative Barmode'\n};\npy.iplot({'data': data, 'layout': layout}, filename='barmode-relative')\n```\n\n----------------------------------------\n\nTITLE: Categorical Polar Chart\nDESCRIPTION: Creates polar charts with categorical axes, demonstrating different ways to handle categorical data in both radial and angular dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n\ndata = [\n    go.Scatterpolar(\n      name = \"angular categories\",\n      r = [5, 4, 2, 4, 5],\n      theta = [\"a\", \"b\", \"c\", \"d\", \"a\"],\n      fill = \"toself\"\n    ),\n    go.Scatterpolar(\n      name = \"radial categories\",\n      r = [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\"],\n      theta = [1, 4, 2, 1.5, 1.5, 6, 5],\n      thetaunit = \"radians\",\n      fill = \"toself\",\n      subplot = \"polar2\"\n    ),\n    go.Scatterpolar(\n      name = \"angular categories (w/ categoryarray)\",\n      r = [5, 4, 2, 4, 5],\n      theta = [\"a\", \"b\", \"c\", \"d\", \"a\"],\n      fill = \"toself\",\n      subplot = \"polar3\"\n    ),\n    go.Scatterpolar(\n      name = \"radial categories (w/ category descending)\",\n      r = [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\", \"a\"],\n      theta = [45, 90, 180, 200, 300, 15, 20, 45],\n      fill = \"toself\",\n      subplot = \"polar4\"\n    ),\n    go.Scatterpolar(\n      name = \"angular categories (w/ extra category)\",\n      r = [5, 4, 2, 4, 5, 5],\n      theta = [\"b\", \"c\", \"d\", \"e\", \"a\", \"b\"],\n      fill = \"toself\"\n    )\n  ]\n        \n        \nlayout = go.Layout(\n    polar = dict(\n      domain = dict(\n        x = [0, 0.46],\n        y = [0.56, 1]\n      ),\n      radialaxis = dict(\n        angle = 45\n      ),\n      angularaxis = dict(\n        direction = \"clockwise\",\n        period = 6\n      )\n    ),\n    polar2 = dict(\n      domain = dict(\n        x = [0, 0.46],\n        y = [0, 0.44]\n      ),\n      radialaxis = dict(\n        angle = 180,\n        tickangle = -180\n      )\n    ),\n    polar3 = dict(\n      domain = dict(\n        x = [0.54, 1],\n        y = [0.56, 1]\n      ),\n      sector = [150, 400],\n      radialaxis = dict(\n        angle = -45\n      ),\n      angularaxis = dict(\n        categoryarray = [\"d\", \"a\", \"c\", \"b\"]\n      )\n    ),\n    polar4 = dict(\n      domain = dict(\n        x = [0.54, 1],\n        y = [0, 0.44]\n      ),\n      radialaxis = dict(\n        categoryorder = \"category descending\"\n      ),\n      angularaxis = dict(\n        thetaunit = \"radians\",\n        dtick = 0.3141592653589793\n      )\n    )\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename='polar-category')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version - Python\nDESCRIPTION: This snippet is used to import the Plotly library and check its version. The output aids in ensuring that the correct version for the notebook's requirements is in use.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server for Local Development\nDESCRIPTION: Command to run Jekyll server with a development configuration for local testing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/style_README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ jekyll serve --config _config_dev.yml\n```\n\n----------------------------------------\n\nTITLE: Preparing Data Loading from AWS S3\nDESCRIPTION: Sets up AWS credentials and generates COPY statements for loading sample data from S3 into Redshift tables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\naws_key = os.getenv(\"AWS_ACCESS_KEY_ID\") # needed to access S3 Sample Data\naws_secret = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n\nbase_copy_string = \"\"\"copy %s from 's3://awssampledbuswest2/tickit/%s.txt' \ncredentials 'aws_access_key_id=%s;aws_secret_access_key=%s' \ndelimiter '%s';\"\"\" # the base COPY string that we'll be using\n\n#easily generate each table that we'll need to COPY data from\ntables = [\"users\", \"venue\", \"category\", \"date\", \"event\", \"listing\"]\ndata_files = [\"allusers_pipe\", \"venue_pipe\", \"category_pipe\", \"date2008_pipe\", \"allevents_pipe\", \"listings_pipe\"]\ndelimiters = [\"|\", \"|\", \"|\", \"|\", \"|\", \"|\", \"|\"]\n\n#the generated COPY statements we'll be using to load data;\ncopy_statements = []\nfor tab, f, delim in zip(tables, data_files, delimiters):\n    copy_statements.append(base_copy_string % (tab, f, aws_key, aws_secret, delim))\n\n# add in Sales data, delimited by '\\t'\ncopy_statements.append(\"\"\"copy sales from 's3://awssampledbuswest2/tickit/sales_tab.txt' \ncredentials 'aws_access_key_id=%s;aws_secret_access_key=%s' \ndelimiter '\\t' timeformat 'MM/DD/YYYY HH:MI:SS';\"\"\" % (aws_key, aws_secret))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Tokens from Credentials File\nDESCRIPTION: Shows how to retrieve stream IDs from your Plotly credentials file after setting them up through the Plotly interface.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstream_ids = tls.get_credentials_file()['stream_ids']\n```\n\n----------------------------------------\n\nTITLE: Creating Closed-Loop Transfer Function for Roll Control in Python\nDESCRIPTION: This code creates the closed-loop transfer function for roll angle control using a chosen positive feedback gain.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nk_theta = -2.5\n\ntheta_thetac = feedback(theta_delta, k_theta)\ntheta_thetac\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Trace for Plotly in Python\nDESCRIPTION: Defines a dictionary representing a table trace for Plotly, including domain, column properties, header, and cell data from the DataFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable_trace1=dict(type = 'table',\n                  domain=dict(x= [0.0, 0.5],\n                             y= [0, 1.0]),\n                 \n                 columnwidth= [30]+[ 33, 35, 33],\n                 columnorder=[0, 1, 2, 3, 4],\n                 header = dict(height = 50,\n                               values = [['<b>Date</b>'],['<b>Hash Rate, TH/sec</b>'], \n                                         ['<b>Mining revenue</b>'], ['<b>Transaction fees</b>']], \n                                \n                               line = dict(color='rgb(50,50,50)'),\n                               align = ['left']*5,\n                               font = dict(color=['rgb(45,45,45)']*5, size=14),\n                               fill = dict( color = '#d562be' )#fill color for header\n                              ),\n                 cells = dict(values = [df['Date'][-20:], df['Hash-rate'][-20:], df['Mining-revenue-USD'][-20:],\n                                        df['Transaction-fees-BTC'][-20:],\n                                       ],\n                              line = dict(color='#506784'),\n                              align = ['left']*5,\n                              font = dict(color=['rgb(40,40,40)']*5, size=12),\n                              format = [None]+ [\",.2f\"]*2+[',.4f'],  \n                              prefix = [None]*2+['$', u'\\u20BF'],\n                              suffix=[None]*4,\n                              height = 27,\n                              fill = dict( color = ['rgb(235,193, 238', 'rgba(228, 222,249, 0.65)'] )\n                             )\n                  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Event Handler\nDESCRIPTION: Defines a message handler function that updates the bar chart based on zoom events in the scatter plot. Filters data based on zoom ranges and updates the second visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef message_handler(widget, msg):\n    xrange = msg['x']\n    yrange = msg['y']\n    \n    x_bool = map(lambda x: x>=xrange[0] and x <= xrange[1], df['cyl'])\n    y_bool = map(lambda y: y>=yrange[0] and y <= yrange[1], df['wt'])\n    bool_filter = [i and j for i,j in zip(x_bool,y_bool)]\n\n    temp_df = df[bool_filter]\n    temp_df = temp_df.sort('mpg', 0, ascending=False)\n    g2.restyle({'x': [temp_df['model']], 'y': [temp_df['mpg']]})\n    \ng.on_zoom(message_handler)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/filter/filter.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Edge List from Graph in Python\nDESCRIPTION: Creates a list of edges as tuples containing the indices of connected nodes and determines the total number of edges.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nE=[e.tuple for e in G.es]# list of edges\nlen(E)\n```\n\n----------------------------------------\n\nTITLE: Calculating Acceptance Rates from MCMC Results\nDESCRIPTION: Computes the acceptance rates for each parameter in the MCMC chain by dividing the acceptance counts by the number of iterations. This helps assess the efficiency of the sampling process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nnp.array(acc, float)/(n_iter)\n```\n\n----------------------------------------\n\nTITLE: Date String Parsing Function\nDESCRIPTION: Method to parse date strings in day/month/year format into Python datetime objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef parse_dates(self, str_dates):\n        dates = []\n\n        for d in str_dates:\n            dates.append(datetime.datetime.strptime(d, '%d/%m/%Y'))\n\n        return dates\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plots for Each Electronic Band\nDESCRIPTION: Iterates through all bands and creates a Plotly scatter plot for each one, representing the electronic band structure along the k-path.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nkptslist = [k for k in range(len(bands.kpoints))]\nbandTraces = list()\nfor band in range(bands.nb_bands):\n    bandTraces.append(\n        go.Scatter(\n            x=kptslist,\n            y=[e - bands.efermi for e in bands.bands[Spin.up][band]],\n            mode=\"lines\",\n            line=go.Line(color=\"#666666\"),\n            showlegend=False\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inline Plotting and Importing NumPy\nDESCRIPTION: Configures matplotlib to display plots inline in the notebook and imports the NumPy library for array manipulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# add plot inline in the page\n%matplotlib inline\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Data for Multiple Companies\nDESCRIPTION: This code retrieves historical stock price data for multiple technology and consumer packaged goods companies from Yahoo Finance. It stores the closing prices for each ticker in a list and prepares the data for comparative analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntickers = ['AAPL', 'GE', 'IBM', 'KO', 'MSFT', 'PEP']\nprices = []\nfor ticker in tickers:\n    quotes = quotes_historical_yahoo(ticker, date1, date2)\n    prices.append( [q[1] for q in quotes] )\n```\n\n----------------------------------------\n\nTITLE: Updating Plotly Figure Layout in Python\nDESCRIPTION: This code updates the layout of the Plotly figure, adding titles to the y-axes for lambda1, lambda2, and tau. It uses LaTeX formatting for mathematical symbols.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfig4['layout'].update(\n    yaxis1=pgo.YAxis(title=r'$\\lambda_1$'),\n    yaxis3=pgo.YAxis(title=r'$\\lambda_2$'),\n    yaxis5=pgo.YAxis(title=r'$\\tau$'))\n```\n\n----------------------------------------\n\nTITLE: Building Jekyll Site with Development Configuration\nDESCRIPTION: Command to build the Jekyll site using a development configuration file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/style_README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ jekyll build --config _config_dev.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Histogram Contour Plot with Embedded Data\nDESCRIPTION: Generates random data and creates a 2D histogram contour plot with the data embedded directly in the graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = np.random.randn(1000)\ny = np.random.randn(1000) + 1\n\ndata = [\n    go.Histogram2dContour(\n        x=x,\n        y=y\n    )\n]\n\npy.iplot(data, filename='Example 2D Histogram Contour')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for Plotly, NumPy and OS dependencies needed for creating scatter plots and handling file operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.io as pio\n\nimport os\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up Credentials for Plotly API\nDESCRIPTION: This snippet imports required libraries and sets up authentication credentials for interacting with the Plotly API. It uses the requests library for HTTP requests and defines the username and API key for authentication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nimport chart_studio.plotly as py\n\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nusername = 'private_plotly' # Replace with YOUR USERNAME\napi_key = 'k0yy0ztssk' # Replace with YOUR API KEY\n\nauth = HTTPBasicAuth(username, api_key)\nheaders = {'Plotly-Client-Platform': 'python'}\n\nchart_studio.tools.set_credentials_file(username=username, api_key=api_key)\n```\n\n----------------------------------------\n\nTITLE: Commented Code for Loading CSV Data into HDF5 Store\nDESCRIPTION: This commented-out code shows how to read a CSV file, process column names, and append the data to an HDF5 store. It's included for reference on how to populate the HDF5 file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# df = pd.read_csv('NYPD_motor_collisions.csv', parse_dates=['DATE'])\n# df.columns = [col.lower().replace(\" \", \"_\") for col in df.columns]\n# store.append(\"nypd\", df,format='table',data_columns=True)\n```\n\n----------------------------------------\n\nTITLE: Running Gulp for SCSS Compilation and Live Reloading\nDESCRIPTION: Command to start Gulp task runner for SCSS compilation and BrowserSync live reloading.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/style_README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gulp\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly 2.7 Virtualenv\nDESCRIPTION: Command to create a new Python virtual environment specifically for Plotly version 2.7 using the venv module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv plotly2.7\n```\n\n----------------------------------------\n\nTITLE: Displaying Event Dictionary\nDESCRIPTION: Shows the event ID dictionary that maps condition names to numeric trigger values for epoch creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nevent_id\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Iris Dataset with Pandas\nDESCRIPTION: This snippet demonstrates how to load the Iris dataset from the UCI repository using pandas, assign column names, and clean the data by removing empty lines. The dataset contains measurements for 150 iris flowers from three different species across four features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_csv(\n    filepath_or_buffer='https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', \n    header=None, \n    sep=',')\n\ndf.columns=['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'class']\ndf.dropna(how=\"all\", inplace=True) # drops the empty line at file-end\n\ndf.tail()\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code handles the publishing process for the notebook, setting up custom styling, and configuring metadata like title, thumbnail, and order for the documentation system. It uses the Plotly publisher package to manage documentation deployment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'shapes.ipynb', 'python/shapes/', 'Shapes | plotly',\n    'How to make SVG shapes in python. Examples of lines, circle, rectangle, and path.',\n    title = 'Shapes | plotly',\n    name = 'Shapes',\n    thumbnail='thumbnail/shape.jpg', language='python',\n    has_thumbnail='true', display_as='file_settings', order=32, \n    ipynb='~notebook_demo/14')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher\nDESCRIPTION: Sets up custom CSS styling for the notebook and publishes it to the Plotly documentation site using the publisher package. This includes metadata like title, description, thumbnail, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'networkx.ipynb', 'python/network-graphs/', 'Python Network Graphs',\n    'How to make Network Graphs in Python with Plotly. '\n    'One examples of a network graph with NetworkX',\n    name = 'Network Graphs',\n    thumbnail='thumbnail/net.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=14, redirect_from='ipython-notebooks/networks/',\n    ipynb= '~notebook_demo/223')\n```\n\n----------------------------------------\n\nTITLE: Set Number of Clusters and Cluster Data\nDESCRIPTION: Sets the number of clusters to 7 and reuses the 'cluster' function to apply K-means clustering with this configuration, storing the model and cluster assignments.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nn_clusters = 7\nmodel, Z = cluster(n_clusters)\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Subplot Figure for Large Variance Run in Python\nDESCRIPTION: Adds the combined data object to the subplot figure for the large variance MCMC run visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfig6['data'] += data6\n```\n\n----------------------------------------\n\nTITLE: Converting Query Results to Pandas DataFrame\nDESCRIPTION: Transforms the fetched MySQL query results into a pandas DataFrame and organizes the data for visualization. The code creates a DataFrame from the query results, renames columns, and sorts data by life expectancy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame( [[ij for ij in i] for i in rows] )\ndf.rename(columns={0: 'Name', 1: 'Continent', 2: 'Population', 3: 'LifeExpectancy', 4:'GNP'}, inplace=True);\ndf = df.sort_values(['LifeExpectancy'], ascending=[1]);\n```\n\n----------------------------------------\n\nTITLE: Reading Band Structure Data from VASP Calculation\nDESCRIPTION: Loads electronic band structure data from a VASP calculation using pymatgen, referencing a KPOINTS file to determine the high-symmetry path for the band diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrun = Vasprun(\"./Bandes/vasprun.xml\", parse_projected_eigen = True)\nbands = run.get_band_structure(\"./Bandes/KPOINTS\", line_mode=True, efermi=dosrun.efermi)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for py.plot() Function\nDESCRIPTION: Python code to display the help documentation for the py.plot() function, providing details on its parameters and usage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nhelp(py.plot)\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram of Earthquake Magnitudes with Plotly in Python\nDESCRIPTION: This series of snippets creates a histogram of earthquake magnitudes using Plotly. It defines the data, creates a Figure object, and plots the histogram using py.iplot().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmag_histogram_plot = [{'x': df['mag'], \n                 'type': 'histogram'\n}]\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_histogram = Data(mag_histogram_plot)\n\nfig_histogram = Figure(data=data_histogram)\n```\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig_histogram, filename='magnitude_histogram')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with HTML and Python\nDESCRIPTION: This code snippet demonstrates how to set up custom CSS for documentation and publish a Plotly notebook using the publisher library. It configures fonts, styles, and metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2dcontour/histogram2dcontour.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'histogram2dcontour.ipynb', 'python/2d-histogram-contour/', '2D Histogram Contour',\n    'How to make 2D Histogram Contour plots in Python with Plotly.',\n    title = '2D Histogram Contour | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/hist2dcontour.png', \n    language='python', \n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='statistical', \n    order=30, \n    ipynb='~notebook_demo/199',\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Downloading Plotly Figure from Cloud\nDESCRIPTION: Demonstrates how to download a figure from Plotly Cloud or Enterprise using get_figure method.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py \n\nfig = py.get_figure('https://plotly.com/~jackp/8715', raw=True)\niplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Categorizing Florida Counties by Political Party in Python\nDESCRIPTION: This script parses through the list of counties, finds their corresponding Republican/Democratic votes, and categorizes them into red or blue counties based on which party has more votes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nred_counties = []\nblue_counties = []\n\nfor k, county in enumerate(county_names):\n    for j in range(len(repub_democ_counties)):\n        county_len = len(county)\n        if repub_democ_counties[j:j+county_len] == string.upper(county):\n            new_j = j\n            while True:\n                try:\n                    int(repub_democ_counties[new_j])\n                    break\n                except ValueError:\n                    new_j += 1\n\n    repub_votes = ''\n    while repub_democ_counties[new_j] != '<':\n        if repub_democ_counties[new_j] != ',':\n            repub_votes += repub_democ_counties[new_j]\n        new_j += 1\n    \n    # advance to next set of numbers\n    new_j += 11\n\n    democ_votes = ''\n    while repub_democ_counties[new_j] != '<':\n        if repub_democ_counties[new_j] != ',':\n            democ_votes += repub_democ_counties[new_j]\n        new_j += 1\n\n    try:\n        repub_votes = int(repub_votes)\n    except ValueError:\n        repub_votes = 0\n    try:\n        democ_votes = int(democ_votes)\n    except ValueError:\n        democ_votes = 0\n\n    if repub_votes >= democ_votes:\n        red_counties.append(florida_data['features'][k])\n    else:\n        blue_counties.append(florida_data['features'][k])\n```\n\n----------------------------------------\n\nTITLE: Updating R Documentation Search Index in Makefile\nDESCRIPTION: Make target for updating the R search index on Algolia. This index provides search functionality for R documentation on plotly.com/r/ and plotly.com/ggplot2/.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/make_instructions.txt#2025-04-11_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nupdate_r_search -> update the r search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/r_docs\n```\n\n----------------------------------------\n\nTITLE: PySpark Setup Script for IPython Startup\nDESCRIPTION: A Python script that initializes the Spark Context when starting an IPython notebook with the PySpark profile. It checks for the SPARK_HOME environment variable and sets up the necessary Python paths.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: py\nCODE:\n```\nimport os\nimport sys\n \nspark_home = os.environ.get('SPARK_HOME', None)\n \n# check if it exists\nif not spark_home:\n    raise ValueError('SPARK_HOME environment variable is not set')\n \n# check if it is a directory\nif not os.path.isdir(spark_home):\n    raise ValueError('SPARK_HOME environment variable is not a directory')\n \n#check if we can find the python sub-directory\nif not os.path.isdir(os.path.join(spark_home, 'python')):\n    raise ValueError('SPARK_HOME directory does not contain python')\n \nsys.path.insert(0, os.path.join(spark_home, 'python'))\n \n#check if we can find the py4j zip file\nif not os.path.exists(os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip')):\n    raise ValueError('Could not find the py4j library - \\\n            maybe your version number is different?(Looking for 0.8.2.1)')\n \nsys.path.insert(0, os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip'))\n \nwith open(os.path.join(spark_home, 'python/pyspark/shell.py')) as f:\n    code = compile(f.read(), os.path.join(spark_home, 'python/pyspark/shell.py'), 'exec')\n    exec(code)\n```\n\n----------------------------------------\n\nTITLE: Plotting the Plotly Figure in Python\nDESCRIPTION: Uses the iplot function to display the interactive Plotly figure in the Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\niplot(fig1)\n```\n\n----------------------------------------\n\nTITLE: Getting Unique Carriers\nDESCRIPTION: Retrieves the list of unique airline carriers from the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf['carrier'].unique()\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Chart Link to Plotly Graph in R\nDESCRIPTION: This snippet demonstrates how to add an 'Edit Chart' link to a Plotly graph in R by using the config() function with showLink=T parameter, and then saving the widget as an HTML file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2017-07-17-configuration-options.md#2025-04-11_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)\n\nhtmlwidgets::saveWidget(config(p, showLink = T), \"graph.html\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Notebook Styling and Publishing to Plotly\nDESCRIPTION: Configures custom styling for the notebook and publishes it to Plotly's documentation platform with metadata including title and description.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'bicycle_control.ipynb', 'ipython-notebooks/bicycle-control-design/', 'Bicycle Control Design with Python and Plotly', \n    'Design of a sequential dual-loop controller for a bicycle using NumPy, SciPy, Python Control, and Plotly.', name='Bicycle Control Design')\n```\n\n----------------------------------------\n\nTITLE: Updating Python Documentation Search Index in Makefile\nDESCRIPTION: Make target for updating the Python search index on Algolia. This index provides search functionality for Python documentation on plotly.com/python/ and plotly.com/pandas/.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/make_instructions.txt#2025-04-11_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nupdate_python_search -> update the python search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/python_docs\n```\n\n----------------------------------------\n\nTITLE: Saving Plots in Folders in Chart Studio\nDESCRIPTION: This snippet demonstrates how to save a plot to a specific folder in Chart Studio by including a '/' character in the filename parameter. This feature is only available for Chart Studio Enterprise subscribers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-filenames.md#2025-04-11_snippet_2\n\nLANGUAGE: r\nCODE:\n```\napi_create(p, filename=\"r-docs/name-of-my-chart-studio-file\")\n```\n\n----------------------------------------\n\nTITLE: Defining Plotly Graph URLs for PDF Reports in Python\nDESCRIPTION: Initializes a list of URLs to Plotly graphs that will be included in the PDF report. These graphs are already created and hosted on Plotly's server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngraphs = ['https://plotly.com/~christopherp/308',\n          'https://plotly.com/~christopherp/306',\n          'https://plotly.com/~christopherp/300',\n          'https://plotly.com/~christopherp/296']\n```\n\n----------------------------------------\n\nTITLE: Scattergl Trace Facet Grid\nDESCRIPTION: Creates a facet grid using scattergl traces for better performance with large datasets.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\ngrid = ff.create_facet_grid(\n    mpg,\n    x='class',\n    y='displ',\n    trace_type='scattergl',\n)\n\npy.iplot(grid, filename='facet - scattergl')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Dictionary Updates in Plotly Python\nDESCRIPTION: Compares standard Python dictionary updates with Plotly graph object updates to show nested updating capabilities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Define 2 (standard) dictionaries with one key in common that links to \n# different nested dictionaries\ndict1 = dict(\n    type='scatter', \n    x=[1, 2, 3],\n    y=[3, 4, 5], \n    marker=dict(\n        color='blue', \n        symbol='plus'  \n    ) \n)       # (!) line breaks and indents are just for aesthetics\n\ndict2 = dict(marker=dict(color='red'))\n\n# Update dict1 with dict2\ndict1.update(dict2)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Define a Scatter object (i.e. 'type': 'scatter') and a (standard) dictionary\n\ngo1 = Scatter(\n    x=[1, 2, 3],\n    y=[3, 4, 5],\n    marker=dict(\n        color='blue', \n        symbol='plus'\n    )\n)\n\ndict2 = dict(marker=dict(color='red'))  # same as previous code cell\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation Setup\nDESCRIPTION: Configuration for publishing the notebook as documentation, including custom styling and metadata for the documentation platform.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/sliders/sliders.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'sliders.ipynb', 'python/sliders/', 'Sliders | plotly',\n    'How to add slider controls to your plots in Python with Plotly.',\n    title = 'Python Slider Controls | plotly',\n    name = 'Sliders',\n    has_thumbnail='true', thumbnail='thumbnail/slider2017.gif', \n    language='python', page_type='example_index',\n    display_as='controls', order=1.5,\n    ipynb= '~notebook_demo/85')\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image in IPython\nDESCRIPTION: This code snippet demonstrates how to display an image within an IPython environment using the `IPython.display` module. It imports the `Image` class and uses it to display an image from a given URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image\nImage(url = 'https://i.imgur.com/4DrMgLI.png')\n```\n\n----------------------------------------\n\nTITLE: Applying Style to Plotly Figure in Python\nDESCRIPTION: This snippet applies the previously defined style function to the Plotly figure, enhancing its visual appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nadd_style(fig4)\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Cities in the Dataset\nDESCRIPTION: Retrieves the count of distinct cities in the dataset to understand the geographic distribution of complaints.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlen(pd.read_sql_query('SELECT DISTINCT City FROM data', disk_engine))\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Code to import Plotly and check the installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import plotly package\nimport plotly\n\n# Check plotly package version\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Area Charts with Scatter and Fill in Python Using Cufflinks\nDESCRIPTION: This snippet creates a non-stacked filled area chart by setting kind=scatter and fill=True. It imports data and uses the iplot method to visualize. Dependencies include Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(fill=True, filename='cuflinks/filled-area')\n```\n\n----------------------------------------\n\nTITLE: Adding Customized Text and Annotations to OHLC Charts in Python\nDESCRIPTION: This code demonstrates how to enhance an OHLC chart with a title, axis labels, vertical line shapes, and text annotations. These elements help to highlight important points or periods in the financial data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom datetime import datetime\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n\ntrace = go.Ohlc(x=df['Date'],\n                open=df['AAPL.Open'],\n                high=df['AAPL.High'],\n                low=df['AAPL.Low'],\n                close=df['AAPL.Close'])\ndata = [trace]\nlayout = {\n    'title': 'The Great Recession',\n    'yaxis': {'title': 'AAPL Stock'},\n    'shapes': [{\n        'x0': '2016-12-09', 'x1': '2016-12-09',\n        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',\n        'line': {'color': 'rgb(30,30,30)', 'width': 1}\n    }],\n    'annotations': [{\n        'x': '2016-12-09', 'y': 0.05, 'xref': 'x', 'yref': 'paper',\n        'showarrow': False, 'xanchor': 'left',\n        'text': 'Increase Period Begins'\n    }]\n}\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='aapl-recession-ohlc')\n```\n\n----------------------------------------\n\nTITLE: Publishing Salesforce Data Visualization with Plotly in Python\nDESCRIPTION: This code snippet sets up the environment for displaying HTML content in IPython, installs the Plotly publisher package, and publishes a Salesforce-related IPython notebook. It configures custom fonts and styles for the notebook display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'salesforce.ipynb', 'python/salesforce/', 'Plot Data from Salesforce', \n    'Create interactive graphs with salesforce, IPython Notebooks and Plotly',\n    title='Interactive Salesforce Graphing | Plotly',\n    redirect_from='ipython-notebooks/salesforce/', has_thumbnail='false', language='python', page_type='example_index',\n    display_as='databases', order=4, ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Simple Interactive Function Definition\nDESCRIPTION: Defines a basic function with boolean and float parameters for widget interaction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef g(x=True, y=1.0):\n    return (x, y)\n```\n\n----------------------------------------\n\nTITLE: Plotly Chart Configuration JSON\nDESCRIPTION: JSON configuration for a Plotly histogram chart with custom styling, margins, axes settings and interactive events.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"x\":{\"visdat\":{\"cd9124f3b8e8\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"cd9124f3b8e8\",\"attrs\":{\"cd9124f3b8e8\":{\"x\":[-1.09865380860805,1.63208297281384,0.651386032528045,-0.515928174741228,-1.38009329379277,0.354761503927833,-0.0514161094417096,-0.198468204107565,0.449178802730726,-0.162360580446144],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[-1.09865380860805,1.63208297281384,0.651386032528045,-0.515928174741228,-1.38009329379277,0.354761503927833,-0.0514161094417096,-0.198468204107565,0.449178802730726,-0.162360580446144],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plotly.com\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Notebook Display and Publishing Configuration\nDESCRIPTION: Configures IPython notebook display settings by loading custom fonts and CSS. Also sets up publishing parameters for the density of states plotting documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('density-of-states ', '/ipython-notebooks/density-of-states/', \n                  'plotting the density of states and the band diagram using pymatgen and plotly', \n                  'Plotting Density of States with Plotly and Pymatgen')\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Graph with Plotly in R\nDESCRIPTION: This snippet demonstrates how to create a public graph using the api_create() function with default privacy settings. Public graphs are visible to anyone, even without logging into Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-privacy.md#2025-04-11_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')\nchart_link = api_create(p, filename = \"public-graph\")\nchart_link\n```\n\n----------------------------------------\n\nTITLE: Styling Sankey Diagram in Plotly Python\nDESCRIPTION: This code demonstrates how to style a Sankey diagram by customizing colors and background. It uses a different JSON file for data and applies a dark theme to the diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport urllib, json\n\nurl = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json'\nresponse = urllib.urlopen(url)\ndata = json.loads(response.read())\n\ndata_trace = dict(\n    type='sankey',\n    width = 1118,\n    height = 772,\n    domain = dict(\n      x =  [0,1],\n      y =  [0,1]\n    ),\n    orientation = \"h\",\n    valueformat = \".0f\",\n    valuesuffix = \"TWh\",\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(\n        color = \"black\",\n        width = 0.5\n      ),\n      label =  data['data'][0]['node']['label']\n    ),\n    link = dict(\n      source =  data['data'][0]['link']['source'],\n      target =  data['data'][0]['link']['target'],\n      value =  data['data'][0]['link']['value'],\n      label =  data['data'][0]['link']['label']\n  ))\n\nlayout =  dict(\n    title = \"Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>\",\n    font = dict(\n      size = 10,\n      color = 'white'\n    ),\n    plot_bgcolor = 'black',\n    paper_bgcolor = 'black'\n)\n\nfig = dict(data=[data_trace], layout=layout)\npy.iplot(fig, validate = False)\n```\n\n----------------------------------------\n\nTITLE: Calculate Inertias for Different Cluster Numbers in Python\nDESCRIPTION: Successively calculates the inertia for clustering configurations from 1 to max_clusters, storing each inertia in the 'inertias' array. Utilizes the 'cluster' function to fit and predict clusters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ninertias = np.zeros(max_clusters)\n\nfor i in xrange(1, max_clusters):\n    kmeans, Z = cluster(i)\n    inertias[i] = kmeans.inertia_\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Example in IPython Notebook\nDESCRIPTION: Code for embedding a Dash line plot example in an IPython notebook using IFrame. Shows how to display both the application and its source code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-lineplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-lineplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Using Holder.js for Background Images\nDESCRIPTION: CSS and HTML for implementing Holder.js as a background image for an element with the holderjs class.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n#sample {background:url(?holder.js/200x200/social) no-repeat}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"sample\" class=\"holderjs\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Example Post Template in HTML and JavaScript\nDESCRIPTION: This template is used to create a new example post for Plotly JavaScript documentation. It includes front matter for page metadata and a basic JavaScript code snippet for creating a bar chart using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n---\ndescription: How to make a D3.js-based bar chart in javascript. Seven examples of\ngrouped, stacked, overlaid, and colored bar charts.\ndisplay_as: basic\nlanguage: plotly_js\nlayout: base\nname: Bar Charts\norder: 3\npage_type: example_index\npermalink: javascript/bar-charts/\nredirect_from: javascript-graphing-library/bar-charts/\nthumbnail: thumbnail/bar.jpg **MORE INFO ON ADDING THUMBNAILS BELOW\nmarkdown_content: |\n  indented content in markdown format which will prefix an example ****SEE BELOW\n---\nvar data = [\n  {\n    x: ['giraffes', 'orangutans', 'monkeys'],\n    y: [20, 14, 23],\n    type: 'bar'\n  }The\n];\n\nPlotly.newPlot('myDiv', data);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Plotly in Python\nDESCRIPTION: This snippet shows how to create a bar chart using Plotly. It sets up the data and layout for a chart displaying accident counts by borough, demonstrating Plotly's object-oriented approach to chart creation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = Data([Bar(y=borough_groups.sum()['COUNT'], x=borough_groups.sum().index)])\nlayout = Layout(xaxis=XAxis(title=\"Borough\"), yaxis=YAxis(title='Accident Count'))\nfig = Figure(data=data, layout=layout)\n```\n\n----------------------------------------\n\nTITLE: Calculating Event Study Data\nDESCRIPTION: Performs event study analysis on spot data around election dates for both Labour and Conservative wins.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    pre = -20\n    post = 20\n\n    labour_wins_spot = event_plot.event_study(spot, labour_wins_d, pre, post, mean_label = 'Labour Mean')\n\n    conservative_wins_spot = event_plot.event_study(spot, conservative_wins_d, pre, post, mean_label = 'Conservative Mean')\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmaps with Custom Colorscales in Python using Plotly\nDESCRIPTION: This function creates a subplot of three heatmaps using a specified colorscale. It loads data from files and generates heatmaps for histogram data, topographic data, and a mathematical function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/matplotlib_colorscales/matplotlib-colorscales.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport numpy as np\nimport os\nimport plotly.graph_objs as go\nfrom plotly import tools\n\ndef heatmap_plot(colorscale, title):\n    example_dir = os.path.join(os.path.dirname('__file__'), \"examples\")\n    \n    hist2d = np.loadtxt(os.path.join(example_dir, \"hist2d.txt\"))\n    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)\n\n    st_helens = np.loadtxt(os.path.join(example_dir,\n                                        \"st-helens_before-modified.txt.gz\")).T\n    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)\n\n    dx = dy = 0.05  \n    y, x = np.mgrid[-5 : 5 + dy : dy, -5 : 10 + dx : dx]\n    z = np.sin(x)**10 + np.cos(10 + y*x) + np.cos(x) + 0.2*y + 0.1*x\n    trace3 = go.Heatmap(z=z, colorscale=colorscale, showscale=False)\n    \n    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig.append_trace(trace3, 1, 3)\n    fig['layout'].update(title=title)\n    fig['layout']['xaxis2'].update(range=[0, 450])\n    fig['layout']['yaxis2'].update(range=[0, 270])\n    \n    return fig\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Callback for Data Point Details\nDESCRIPTION: Registers a callback function that updates an HTML widget with data point details when hovering over scatter points.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef hover_fn(trace, points, state):\n    ind = points.point_inds[0]\n    details.value = cars_df.iloc[ind].to_frame().to_html()\n\nscatter.on_hover(hover_fn)\n```\n\n----------------------------------------\n\nTITLE: Multiple Aggregation Functions with Plotly in Python\nDESCRIPTION: This example demonstrates how to create a scatter plot with multiple aggregation functions using Plotly in Python. It includes a dropdown menu to switch between different aggregation functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\noff.init_notebook_mode(connected=False)\n\nsubject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']\nscore = [1,6,2,8,2,9,4,5,1,5,2,8]\n\naggs = [\"count\",\"sum\",\"avg\",\"median\",\"mode\",\"rms\",\"stddev\",\"min\",\"max\",\"first\",\"last\"]\n\nagg = []\nagg_func = []\nfor i in range(0, len(aggs)):\n    agg = dict(\n        args=['transforms[0].aggregations[0].func', aggs[i]],\n        label=aggs[i],\n        method='restyle'\n    )\n    agg_func.append(agg)\n\n\ndata = [dict(\n  type = 'scatter',\n  x = subject,\n  y = score,\n  mode = 'markers',\n  transforms = [dict(\n    type = 'aggregate',\n    groups = subject,\n    aggregations = [dict(\n        target = 'y', func = 'sum', enabled = True)\n    ]\n  )]\n)]\n\nlayout = dict(\n  title = '<b>Plotly Aggregations</b><br>use dropdown to change aggregation',\n  xaxis = dict(title = 'Subject'),\n  yaxis = dict(title = 'Score', range = [0,22]),\n  updatemenus = [dict(\n        x = 0.85,\n        y = 1.15,\n        xref = 'paper',\n        yref = 'paper',\n        yanchor = 'top',\n        active = 1,\n        showactive = False,\n        buttons = agg_func\n  )]\n)\n\noff.iplot({'data': data,'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Iframe Embedding Code in Python\nDESCRIPTION: Creates a formatted HTML string containing an iframe code snippet for embedding a Plotly graph in a webpage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ni = \"\"\"<pre style=\"background:#f1f1f1;color:#000\">&lt;iframe src=<span style=\"color:#c03030\">\"https://plotly.com/~MattSundquist/1334/650/550\"</span> width=<span style=\"color:#c03030\">\"650\"</span> height=550<span style=\"color:#c03030\">\" frameBorder=\"</span>0<span style=\"color:#c03030\">\" seamless=\"</span>seamless<span style=\"color:#c03030\">\" scrolling=\"</span>no<span style=\"color:#c03030\">\">&lt;/iframe>\n</span></pre>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Display and Publishing\nDESCRIPTION: Configures IPython display settings and publishes the notebook documentation using the publisher package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'markowitz.ipynb', 'ipython-notebooks/markowitz-portfolio-optimization/',\n    'Markowitz portfolio optimization', \n    'Tutorial on the basic idea behind Markowitz portfolio optimization and how to do it with Python and plotly.',\n    name='Markowitz Portfolio Optimization')\n```\n\n----------------------------------------\n\nTITLE: Filtering Data by Date Range in SQLite\nDESCRIPTION: Demonstrates filtering SQLite query results by timestamp strings in a specific date and time range.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, CreatedDate, City '\n                       'FROM data '\n                       'WHERE CreatedDate < \"2014-11-16 23:47:00\" '\n                       'AND CreatedDate > \"2014-11-16 23:45:00\"', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Figure with the show() Method\nDESCRIPTION: Python example showing how to display a plotly figure directly using the show() method of the Figure object, which is a shortcut for plotly.io.show(fig).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Step Response of Bicycle Model in Python\nDESCRIPTION: This code plots the step response of the bicycle model to a 2-degree steering input using the previously defined plotting function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_siso_response(time, np.rad2deg(delta),np.rad2deg(theta), title='Step Response',\n                            output_y_lab='Roll Angle [deg]', input_y_lab='Steer Angle [deg]'))\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scale for MRI Visualization in Python\nDESCRIPTION: This snippet defines a custom color scale (pl_bone) for visualizing the MRI data. It specifies RGB values for different intensity levels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npl_bone = [\n    [0.0, 'rgb(0, 0, 0)'],\n    [0.05, 'rgb(10, 10, 14)'],\n    [0.1, 'rgb(21, 21, 30)'],\n    [0.15, 'rgb(33, 33, 46)'],\n    [0.2, 'rgb(44, 44, 62)'],\n    [0.25, 'rgb(56, 55, 77)'],\n    [0.3, 'rgb(66, 66, 92)'],\n    [0.35, 'rgb(77, 77, 108)'],\n    [0.4, 'rgb(89, 92, 121)'],\n    [0.45, 'rgb(100, 107, 132)'],\n    [0.5, 'rgb(112, 123, 143)'],\n    [0.55, 'rgb(122, 137, 154)'],\n    [0.6, 'rgb(133, 153, 165)'],\n    [0.65, 'rgb(145, 169, 177)'],\n    [0.7, 'rgb(156, 184, 188)'],\n    [0.75, 'rgb(168, 199, 199)'],\n    [0.8, 'rgb(185, 210, 210)'],\n    [0.85, 'rgb(203, 221, 221)'],\n    [0.9, 'rgb(220, 233, 233)'],\n    [0.95, 'rgb(238, 244, 244)'],\n    [1.0, 'rgb(255, 255, 255)']\n]\n```\n\n----------------------------------------\n\nTITLE: Animating Moving Point on Curve with Plotly in Python\nDESCRIPTION: This snippet creates an animation of a moving point on a curve using Plotly. It generates a parametric curve, sets up the layout with a play button, and creates frames for the animation of the moving point.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\nimport numpy as np\n\ninit_notebook_mode(connected=True)\n\nt=np.linspace(-1,1,100)\nx=t+t**2\ny=t-t**2\nxm=np.min(x)-1.5\nxM=np.max(x)+1.5\nym=np.min(y)-1.5\nyM=np.max(y)+1.5\nN=50\ns=np.linspace(-1,1,N)\nxx=s+s**2\nyy=s-s**2\n\n\ndata=[dict(x=x, y=y, \n           mode='lines', \n           line=dict(width=2, color='blue')\n          ),\n      dict(x=x, y=y, \n           mode='lines', \n           line=dict(width=2, color='blue')\n          )\n    ]\n\nlayout=dict(xaxis=dict(range=[xm, xM], autorange=False, zeroline=False),\n            yaxis=dict(range=[ym, yM], autorange=False, zeroline=False),\n            title='Kinematic Generation of a Planar Curve', hovermode='closest',\n            updatemenus= [{'type': 'buttons',\n                           'buttons': [{'label': 'Play',\n                                        'method': 'animate',\n                                        'args': [None]}]}])\n\nframes=[dict(data=[dict(x=[xx[k]], \n                        y=[yy[k]], \n                        mode='markers', \n                        marker=dict(color='red', size=10)\n                        )\n                  ]) for k in range(N)]    \n          \nfigure1=dict(data=data, layout=layout, frames=frames)          \niplot(figure1)\n```\n\n----------------------------------------\n\nTITLE: Creating Fluid Placeholder\nDESCRIPTION: HTML for creating a fluid placeholder that responds to media queries using percentage dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<img data-src=\"holder.js/100%x75/social\">\n```\n\n----------------------------------------\n\nTITLE: Creating a PySpark IPython Profile\nDESCRIPTION: Command to create a new IPython profile specifically for PySpark. This is the first step in setting up an environment for using Plotly with Spark.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nipython profile create pyspark\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Sets up documentation styling and publishes the notebook as documentation using Plotly's publisher tool.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface/3d-surface.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-surface.ipynb', 'python/3d-surface-plots/', '3D Surface Plots in Python',\n    'How to make 3D-surface plots in Python',\n    title= '3D Surface Plots in Python | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/3d-surface.jpg', \n    language='python', page_type='example_index', \n    display_as='3d_charts', order=6,\n    ipynb= '~notebook_demo/66')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation Setup\nDESCRIPTION: Configuration for publishing the documentation, including custom styling and notebook publishing settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-hover/3d-hover-options.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\n\npublisher.publish(\n    '3d-hover-options.ipynb', 'python/3d-hover/', 'Python 3D Hover Options | Plotly',\n    'How to customize 3d hover options in python with Plotly.',\n    title= 'Python 3D Hover Options | Plotly',\n    name = '3D Hover Options',\n    has_thumbnail='true', thumbnail='thumbnail/3d-hover.png', \n    language='python',\n    display_as='3', order=19,\n    ipynb= '~notebook_demo/257')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Plot\nDESCRIPTION: Embeds the generated plot using Plotly's embed tool.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntools.embed('https://plotly.com/~kevintest/333/ring-cyclide/')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple code snippet to check the installed version of Plotly library in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Customizing Marker Size and Color in Waterfall Charts with Plotly in Python\nDESCRIPTION: This example shows how to customize the appearance of a waterfall chart by setting marker sizes and colors for increasing, decreasing, and total bars. It uses the decreasing, increasing, and total attributes to apply different styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = False)\n\ntrace = go.Waterfall(\n    x = [[\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"], \n       [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\"]], \n    measure = [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"], \n    y = [10, 20, 30, -10, None, 10, 20, -40, None], base = 300, \n    decreasing = {\"marker\":{\"color\":\"Maroon\", \"line\":{\"color\":\"red\", \"width\":2}}}, \n    increasing = {\"marker\":{\"color\":\"Teal\"}}, \n    totals = {\"marker\":{\"color\":\"deep sky blue\", \"line\":{\"color\":\"blue\", \"width\":3}}}\n)\n\nlayout = go.Layout(\n    title = \"Profit and loss statement\", \n    waterfallgap = 0.3, \n    xaxis = {\"title\":\"\", \"tickfont\":{\"size\":15}, \"ticks\":\"outside\"}\n)\n\npy.iplot(go.Figure([trace], layout), filename = \"Style_waterfall\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Combined Band Diagram and DOS Plot\nDESCRIPTION: Publishes the combined figure containing both the band diagram and density of states to Plotly and embeds it in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nplot_url = pltly.plot(dosbandfig, filename=\"DOS_bands_Si\", auto_open=False)\ntls.embed(plot_url)\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob Value Setting\nDESCRIPTION: Demonstrates how to programmatically set the value of a jQuery Knob control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$('.dial')\n        .val(27)\n        .trigger('change');\n```\n\n----------------------------------------\n\nTITLE: Setting SPARK_HOME Environment Variable\nDESCRIPTION: Shell command to set the SPARK_HOME environment variable, which points to the installation directory of Apache Spark. This is required for the PySpark setup.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport SPARK_HOME=\"$HOME/Downloads/spark-1.3.1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Data Visualization in Python\nDESCRIPTION: This code imports necessary Python libraries for data manipulation, visualization, and report generation. It includes Plotly for interactive charts, Pandas for data handling, NumPy for numerical operations, and various libraries for datetime manipulation and statistical analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly as py\nimport pandas as pd\nimport numpy as np\n\nfrom datetime import datetime\nfrom datetime import time as dt_tm\nfrom datetime import date as dt_date\n\nimport plotly.plotly as py\nimport plotly.tools as plotly_tools\nimport plotly.graph_objs as go\n\nimport os\nimport tempfile\nos.environ['MPLCONFIGDIR'] = tempfile.mkdtemp()\nfrom matplotlib.finance import quotes_historical_yahoo\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import gaussian_kde\n\nfrom IPython.display import HTML\n```\n\n----------------------------------------\n\nTITLE: Creating Bubble Charts with Cufflinks in Python\nDESCRIPTION: This snippet creates a bubble chart using Cufflinks by specifying size and text parameters for the bubbles. It sets titles for both axes. Dependencies involve Pandas, Cufflinks, and Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndf2007.iplot(kind='bubble', x='gdpPercap', y='lifeExp', size='pop', text='country',\n             xTitle='GDP per Capita', yTitle='Life Expectancy',\n             filename='cufflinks/simple-bubble-chart')\n```\n\n----------------------------------------\n\nTITLE: Extracting Events from Trigger Channel\nDESCRIPTION: Identifies and extracts events from the trigger channel (STI 014) in the raw data, returning an array where each row represents an event with sample index, trigger value, and event ID.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nevents = mne.find_events(raw, stim_channel='STI 014')\nprint(events[:5])  # events is a 2d array\n```\n\n----------------------------------------\n\nTITLE: Styling and Publishing Setup\nDESCRIPTION: Sets up custom styling for documentation and publishes content using the publisher module. Includes font loading and CSS styling for documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/style-template.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\n\nfrom IPython.display import HTML, display\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"https://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish('style-template', '/python/style-template', \n                  'Markdown CSS Style Template', \n                  'Markdown CSS Style Template',\n                   uses_plotly_offline=True, sitemap='false')\n```\n\n----------------------------------------\n\nTITLE: Embedding a Plotly Graph\nDESCRIPTION: This code snippet embeds a Plotly graph using its username and graph ID.  This allows a publicly shared graph to be shown on another webpage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('RgraphingAPI', '1457')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Asset Return Series with Plotly in Python\nDESCRIPTION: Plots the generated return series for all assets using matplotlib and converts it to an interactive Plotly visualization. Shows the time series of returns for each asset with transparency to enhance readability.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = plt.figure()\nplt.plot(return_vec.T, alpha=.4);\nplt.xlabel('time')\nplt.ylabel('returns')\npy.iplot_mpl(fig, filename='s6_damped_oscillation')\n```\n\n----------------------------------------\n\nTITLE: Dropping Existing Tables in Redshift\nDESCRIPTION: Executes SQL commands to drop existing tables in preparation for data loading.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncur.execute(\"\"\"drop table users;\n\ndrop table venue;\n\ndrop table category;\n\ndrop table date;\n\ndrop table event;\n\ndrop table listing;\n\ndrop table sales;\"\"\")\nconn.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram of Opportunity Amounts\nDESCRIPTION: Creates a histogram object to visualize the distribution of opportunity amounts across all opportunities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nhist1 = go.Histogram(x=amounts)\n```\n\n----------------------------------------\n\nTITLE: Loading and Filtering Raw Data\nDESCRIPTION: Reloads the raw data with preload=True to enable filtering, then applies a bandpass filter between 1-40 Hz using the IIR method.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nraw = mne.io.Raw(raw_fname, preload=True)  # reload data with preload for filtering\nraw.filter(1, 40, method='iir')\n```\n\n----------------------------------------\n\nTITLE: Setting 3D Axis Titles\nDESCRIPTION: Shows how to set custom titles for x, y, and z axes in a 3D plot with multiple mesh traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-axes/3d-axes.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np\n\nN = 50\ntrace1 = go.Mesh3d(x=(60*np.random.randn(N)),\n                   y=(25*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='yellow'\n                  )\ntrace2 = go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(30*np.random.randn(N)),\n                   opacity=0.5,\n                   color='pink'\n                  )\nlayout = go.Layout(\n                    scene = dict(\n                    xaxis = dict(\n                        title='X AXIS TITLE'),\n                    yaxis = dict(\n                        title='Y AXIS TITLE'),\n                    zaxis = dict(\n                        title='Z AXIS TITLE'),),\n                    width=700,\n                    margin=dict(\n                    r=20, b=10,\n                    l=10, t=10)\n                  )\nfig = go.Figure(data=[trace1,trace2], layout=layout)\npy.iplot(fig, filename='3d-axis-titles')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Tools Module\nDESCRIPTION: Code to import the plotly.tools module for enhanced plotting features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# (*) Useful tools, e.g., get_sublots(), embed()\nimport plotly.tools as tls\n```\n\n----------------------------------------\n\nTITLE: Plotly Chart Configuration Structure\nDESCRIPTION: Hierarchical listing of configuration options for various Plotly chart types including carpet, choropleth, cone, and contour charts. Shows the complete property path structure for each configuration option.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/ref_names.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncarpet > baxis > color\ncarpet > baxis > dtick\ncarpet > baxis > endline\ncarpet > baxis > endlinecolor\ncarpet > baxis > endlinewidth\n[...additional properties omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HTML Table with Stock Information\nDESCRIPTION: This code creates a custom HTML table with stock ticker symbols and their corresponding company names as links to Yahoo Finance. The table uses Bootstrap styling for a clean, modern appearance in the final report.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsummary_table_2 = '''<table class=\"table table-striped\">\n<th>Ticker</th><th>Full name</th>\n<tr>\n    <td>AAPL</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=AAPL\">Apple Inc</a></td>\n</tr>\n<tr>\n    <td>GE</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=GE\">General Electric Company</a></td>\n</tr>\n<tr>\n    <td>IBM</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=IBM\">International Business Machines Corp.</a></td>\n</tr>\n<tr>\n    <td>KO</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=KO\">The Coca-Cola Company</a></td>\n</tr>\n<tr>\n    <td>MSFT</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=MSFT\">Microsoft Corporation</a></td>\n</tr>\n<tr>\n    <td>PEP</td>\n    <td><a href=\"http://finance.yahoo.com/q?s=PEP\">Pepsico, Inc.</a></td>\n</tr>\n</table>\n'''\nHTML(summary_table_2)\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Dependencies\nDESCRIPTION: Imports required Plotly modules and NumPy for data manipulation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py  \nimport plotly.tools as tls   \nimport plotly.graph_objs as go\nimport numpy as np  \n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Bicycle Control System\nDESCRIPTION: This code imports the necessary Python libraries for the bicycle control system, including numpy for numerical computations, control for control system design, and plotly for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport control as cn\nimport plotly.plotly as pl\nimport plotly.graph_objs as gr\n```\n\n----------------------------------------\n\nTITLE: Line Polar Chart with Multiple Traces\nDESCRIPTION: Creates a polar line chart showing multiple microphone patterns. Uses pandas to read data and plots multiple traces with different colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv\")\n\ndata = [\n    go.Scatterpolar(\n        r = df['x1'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Figure8',\n        line =  dict(\n            color = 'peru'\n        )   \n    ),\n    go.Scatterpolar(\n        r = df['x2'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Cardioid',\n        line =  dict(\n            color = 'darkviolet'\n        )   \n    ),\n    go.Scatterpolar(\n        r = df['x3'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Hypercardioid',\n        line =  dict(\n            color = 'deepskyblue'\n        )   \n    ),\n    go.Scatterpolar(\n        r = df['x4'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'orangered',\n        line =  dict(\n            color = 'orangered'\n        )   \n    ),\n    go.Scatterpolar(\n        r = df['x5'],\n        theta = df['y'],\n        mode = 'lines',\n        name = 'Supercardioid',\n        line =  dict(\n            color = 'green'\n        )   \n    )\n]\n\nlayout = go.Layout(\n    title = 'Mic Patterns',\n    font = dict(\n        family = 'Arial, sans-serif;',\n        size = 12,\n        color = '#000'\n    ),\n    showlegend = False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = 'polar-line')\n```\n\n----------------------------------------\n\nTITLE: Loading and Exploring Civic Data with Pandas in Python\nDESCRIPTION: This snippet loads civic data into a DataFrame using Pandas from a CSV file. The data is time-indexed, and only the first few rows are shown. Dependencies include Pandas.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/widgets/master/ipython-examples/311_150k.csv', parse_dates=True, index_col=1)\ndf.head(3)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Network Graph Example in IPython\nDESCRIPTION: Embeds a Dash-based network graph application in an IPython notebook using an IFrame. Dash is a Python framework for building web applications with Plotly visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-networkplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Matrix\nDESCRIPTION: A 20x20 matrix containing floating point numbers in scientific notation format. Each row contains 20 values with approximately 15-16 decimal places of precision.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/cmocean/examples/hist2d.txt#2025-04-11_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n4.815073983484015607e-01 4.517083715120223109e-01 4.020904174051740387e-01 4.052771799043169976e-01 3.059235611463523297e-01 4.418475010218267940e-01 4.740995302878973083e-01 6.218619423703027893e-01 6.578876161227252828e-01 5.530510746846607484e-01 6.608670150852846703e-01 5.674893334667274747e-01 6.440703153747932008e-01 7.623622218255359240e-01 5.260140729379694235e-01 5.010231940800351502e-01 4.443531795581764365e-01 3.965262145476259881e-01 3.385126082446651696e-01 2.897447202135944866e-01\n3.510491288840051349e-01 5.689676611591822919e-01 5.858897633406653371e-01 5.536111271029798830e-01 7.311076647694617625e-01 7.460327580619753318e-01 7.179285903980161532e-01 7.411979172352346490e-01 6.309672328321564994e-01 6.686808478858152771e-01 7.718727024051389440e-01 7.706016868503360318e-01 7.601068253638296746e-01 6.663486048387529115e-01 6.236983942000805525e-01 5.158761779908058731e-01 4.726538489878419069e-01 2.377386786801427010e-01 4.232953386316503086e-01 4.332840374306435316e-01\n[...remaining rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive City Grouping with COLLATE NOCASE\nDESCRIPTION: Uses COLLATE NOCASE to perform case-insensitive grouping of cities, addressing the issue of duplicate entries like 'Flushing' and 'FLUSHING'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT City, COUNT(*) as `num_complaints` '\n                        'FROM data '\n                        'GROUP BY `City` '\n                       'COLLATE NOCASE '\n                       'ORDER BY -num_complaints '\n                       'LIMIT 11 ', disk_engine)\ncities = list(df.City)\ncities.remove(None)\n\ntraces = [] # the series in the graph - one trace for each city\n\nfor city in cities:\n    df = pd.read_sql_query('SELECT ComplaintType, COUNT(*) as `num_complaints` '\n                           'FROM data '\n                           'WHERE City = \"{}\" COLLATE NOCASE '\n                           'GROUP BY `ComplaintType` '\n                           'ORDER BY -num_complaints'.format(city), disk_engine)\n\n    traces.append(go.Bar(x=df['ComplaintType'], y=df.num_complaints, name=city.capitalize()))\n\npy.iplot({'data': traces, 'layout': go.Layout(barmode='stack', xaxis={'tickangle': 40}, margin={'b': 150})}, filename='311/complaints by city stacked')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Data Visualization in Python\nDESCRIPTION: This snippet imports Plotly, NumPy, Pandas, and SciPy libraries for data manipulation and visualization. It sets up the necessary dependencies for creating statistical charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Generate and Display Inertia Figure in Plotly\nDESCRIPTION: Creates and displays the inertia figure using Plotly, which visualizes the relationship between the number of clusters and inertia.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfig6 = pgo.Figure(data=data6, layout=layout6)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet sets up custom styling for Jupyter notebook documentation and uses the Plotly publisher module to publish the log-axes notebook as documentation. It loads custom fonts, applies CSS styling, installs the publisher package, and configures metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/log/log-axes.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'log-axes.ipynb', 'python/log-plot/', ' Python Log Plots | Plotly',\n    'How to make Log plots in Python with Plotly.',\n    title = 'Python Log Plots | plotly',\n    name = 'Log Plots',\n    has_thumbnail='true', thumbnail=' thumbnail/log.jpg', \n    language='python',\n    display_as='scientific', order=1,\n    ipynb= '~notebook_demo/31')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing Notebook\nDESCRIPTION: Sets up custom styling for the notebook by importing fonts and CSS, then uses the publisher module to publish the notebook with metadata. Includes installing the publisher package via pip.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'collaborate.ipynb', 'ipython-notebooks/collaboration/', 'Collaboration with Plotly using Python, R and MATLAB', \n    'An IPython Notebook showing how to collaboration between different programming languages with plotly',\n     name='Collaboration with Plotly')\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly with Authentication\nDESCRIPTION: Sets up Plotly credentials and imports required libraries for data visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\ndef ukelection():    \n    plotly_username = \"thalesians\"\n    plotly_api_key = \"XXXXXXXXX\"\n\n    plotly.tools.set_credentials_file(username=plotly_username, api_key=plotly_api_key)\n```\n\n----------------------------------------\n\nTITLE: Querying Event Categories from Redshift\nDESCRIPTION: SQL query executed via pandas that retrieves the sum of event categories. The query joins the event and category tables to get category names and groups the results by category name.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query(\"\"\"\nSELECT sum(event.catid) as category_sum, catname as category_name\nFROM event, category\nwhere event.catid = category.catid\nGROUP BY category.catname\n\"\"\", engine)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Random Portfolios to Show Markowitz Bullet in Python\nDESCRIPTION: Plots the risk (standard deviation) and return characteristics of the randomly generated portfolios. This visualization demonstrates the characteristic parabolic shape known as the 'Markowitz bullet'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig = plt.figure()\nplt.plot(stds, means, 'o', markersize=5)\nplt.xlabel('std')\nplt.ylabel('mean')\nplt.title('Mean and standard deviation of returns of randomly generated portfolios')\npy.iplot_mpl(fig, filename='mean_std', strip_style=True)\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Example\nDESCRIPTION: Displaying an embedded Dash application using IPython's IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-plotfromcsvplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Root Locus for Heading Controller Design\nDESCRIPTION: Computes the root locus of the open-loop system to analyze how closed-loop poles move with varying gain, essential for controller tuning.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nroots, gains = cn.root_locus(psi_thetac, kvect=np.linspace(0.0, 3.0, num=1001))\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Channel Plotly Visualization\nDESCRIPTION: Builds a complex Plotly figure with multiple subplots, one for each channel, with shared x-axis. Channel names are added as annotations, and the resulting figure is rendered with iplot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstep = 1. / n_channels\nkwargs = dict(domain=[1 - step, 1], showticklabels=False, zeroline=False, showgrid=False)\n\n# create objects for layout and traces\nlayout = Layout(yaxis=YAxis(kwargs), showlegend=False)\ntraces = [Scatter(x=times, y=data.T[:, 0])]\n\n# loop over the channels\nfor ii in range(1, n_channels):\n        kwargs.update(domain=[1 - (ii + 1) * step, 1 - ii * step])\n        layout.update({'yaxis%d' % (ii + 1): YAxis(kwargs), 'showlegend': False})\n        traces.append(Scatter(x=times, y=data.T[:, ii], yaxis='y%d' % (ii + 1)))\n\n# add channel names using Annotations\nannotations = Annotations([Annotation(x=-0.06, y=0, xref='paper', yref='y%d' % (ii + 1),\n                                      text=ch_name, font=Font(size=9), showarrow=False)\n                          for ii, ch_name in enumerate(ch_names)])\nlayout.update(annotations=annotations)\n\n# set the size of the figure and plot it\nlayout.update(autosize=False, width=1000, height=600)\nfig = Figure(data=Data(traces), layout=layout)\npy.iplot(fig, filename='shared xaxis')\n```\n\n----------------------------------------\n\nTITLE: Customizing Rug Text, Colors, and Title in Distribution Plots\nDESCRIPTION: Demonstrates how to customize a distribution plot by adding custom text for the rug plot points, specifying colors for each dataset, and adding a custom title to the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nx1 = np.random.randn(26)  \nx2 = np.random.randn(26) + .5  \n\nhist_data = [x1, x2]\n\ngroup_labels = ['2014', '2015']\n\nrug_text_one = ['a', 'b', 'c', 'd', 'e',\n                'f', 'g', 'h', 'i', 'j', \n                'k', 'l', 'm', 'n', 'o',\n                'p', 'q', 'r', 's', 't', \n                'u', 'v', 'w', 'x', 'y', 'z'] \n\nrug_text_two = ['aa', 'bb', 'cc', 'dd', 'ee',\n                'ff', 'gg', 'hh', 'ii', 'jj', \n                'kk', 'll', 'mm', 'nn', 'oo',\n                'pp', 'qq', 'rr', 'ss', 'tt', \n                'uu', 'vv', 'ww', 'xx', 'yy', 'zz'] \n\nrug_text = [rug_text_one, rug_text_two]\n\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 200, 200)']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n    hist_data, group_labels, bin_size=.2,\n    rug_text=rug_text, colors=colors)\n\nfig['layout'].update(title='Customized Distplot')\n\n# Plot!\npy.iplot(fig, filename='Distplot Colors')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Sine Wave Plot with Slider Control in Plotly\nDESCRIPTION: This code creates an interactive sine wave plot with a slider control using Plotly in Python. The slider allows users to adjust the frequency of the sine wave dynamically. The plot is created with multiple traces, each representing a different frequency, and the slider toggles their visibility.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport numpy as np\n\ndata = [dict(\n        visible = False,\n        line=dict(color='#00CED1', width=6),\n        name = '𝜈 = '+str(step),\n        x = np.arange(0,10,0.01),\n        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]\ndata[10]['visible'] = True\n\nsteps = []\nfor i in range(len(data)):\n    step = dict(\n        method = 'restyle',\n        args = ['visible', [False] * len(data)],\n    )\n    step['args'][1][i] = True # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active = 10,\n    currentvalue = {\"prefix\": \"Frequency: \"},\n    pad = {\"t\": 50},\n    steps = steps\n)]\n\nlayout = dict(sliders=sliders)\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='Sine Wave Slider')\n```\n\n----------------------------------------\n\nTITLE: Creating a Ternary Contour Plot in Python with Plotly\nDESCRIPTION: Generates a ternary contour plot using the contour data. The code creates closed spline paths for each contour, applies a unique color from a predefined colormap, and configures the plot layout for optimal visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontour_dict = contour_raw_data['Data']\n\n# Defining a colormap:\ncolors = ['#8dd3c7','#ffffb3','#bebada',\n          '#fb8072','#80b1d3','#fdb462',\n          '#b3de69','#fccde5','#d9d9d9',\n          '#bc80bd']\ncolors_iterator = iter(colors)\n\ntraces = []\nfor raw_data in contour_dict:\n    data = clean_data(raw_data)\n    \n    a = [inner_data[0] for inner_data in data[1:]]\n    a.append(data[1][0]) # Closing the loop \n    \n    b = [inner_data[1] for inner_data in data[1:]]\n    b.append(data[1][1]) # Closing the loop     \n    \n    c = [inner_data[2] for inner_data in data[1:]]\n    c.append(data[1][2]) # Closing the loop     \n    \n    trace = dict(\n        type='scatterternary',text = data[0],\n        a=a, b=b, c=c, mode='lines',\n        line=dict(color='#444', shape='spline'),\n        fill='toself',\n        fillcolor = colors_iterator.next()\n    )\n    traces.append(trace)\n    \nlayout['title'] = 'Ternary Contour Plot'\ncontour_fig = dict(data=traces, layout=layout)\npy.iplot(contour_fig)\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Scientific Charts Page\nDESCRIPTION: YAML front matter that configures the Jekyll page attributes for the Scientific Charts documentation section. It defines metadata like description, display category, language, layout type, page name, permalink, and thumbnail image.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-scientific-index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Plotly's R graphing library makes interactive, publication-quality graphs\n  online. Examples of how to make scientific charts.\ndisplay_as: scientific\nlanguage: r\nlayout: langindex\nname: Scientific Charts\npage_type: example_index\npermalink: r/scientific-charts/\nthumbnail: thumbnail/mixed.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Second 2D Kernel Density Plot with Plotly in Python\nDESCRIPTION: This snippet creates another 2D kernel density plot using data from the second Excel file and plots it using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\na, b=(4,12)\nfig=make_kdeplot(dfi['multiannual'], dfi['bachelor-th'], (a,b), (a,b),\n                 N, cubehelix_cs, 'kde plot of two sets of data')\npy.iplot(fig, filename='kde-2D-SE')\n```\n\n----------------------------------------\n\nTITLE: Accessing DataFrame Columns in Python\nDESCRIPTION: Shows how to access and display a specific column from a Pandas DataFrame in a Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschools = df.School\nschools[0]\n```\n\n----------------------------------------\n\nTITLE: Embedding an Interactive Plotly Graph\nDESCRIPTION: Python code that uses Plotly's tls.embed function to embed an interactive Plotly graph from a plotly.com URL into the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntls.embed(\"https://plotly.com/~bill_chambers/195\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Random Walk Visualization in Python\nDESCRIPTION: This snippet imports necessary libraries for creating random walk visualizations, including Plotly, NumPy, Pandas, SciPy, and the random module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/random-walk/python-Random-Walk.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport random\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Streaming in Python\nDESCRIPTION: Imports necessary Plotly and NumPy libraries for streaming data visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np \nimport plotly.plotly as py  \nimport plotly.tools as tls   \nimport plotly.graph_objs as go\n```\n\n----------------------------------------\n\nTITLE: Selecting Good Channels\nDESCRIPTION: Uses pick_types to select MEG, EEG, and EOG channels that are not marked as bad for epoch creation and analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\npicks = mne.pick_types(raw.info, meg=True, eeg=True, eog=True,\n                       stim=False, exclude='bads')\n```\n\n----------------------------------------\n\nTITLE: Create and Plot Table Visualization\nDESCRIPTION: Creating a table visualization using Plotly's FigureFactory\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntop_10_users_table = ff.create_table(top10_active_users_df)\npy.iplot(top_10_users_table, filename='top-10-active-users')\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Widget for Car Visualization\nDESCRIPTION: Creates an Image widget with specific dimensions to display car images on hover events.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Image, Layout\nimage_widget = Image(\n    value=image_data['2012_Chevrolet_Camaro_Coupe'],\n    layout=Layout(height='252px', width='400px')\n)\nimage_widget\n```\n\n----------------------------------------\n\nTITLE: Finding Top 10 Cities by Complaint Count\nDESCRIPTION: Queries for the top 10 cities with the most complaints, ordering by complaint count in descending order.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT City, COUNT(*) as `num_complaints` '\n                                'FROM data '\n                                'GROUP BY `City` '\n                       'ORDER BY -num_complaints '\n                       'LIMIT 10 ', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Accessing Scatter Trace from Plotly Figure\nDESCRIPTION: Extracts the scatter trace object from the figure's data array for direct manipulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nscatter = fig.data[0]\nscatter\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to Plotly Traces\nDESCRIPTION: Complex function to transform Pandas DataFrame into Plotly-compatible trace objects with customizable styling options including colors, markers, and line properties.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef convert_df_plotly(self, dataframe, axis_no = 1, color_def = ['default'],\n                          special_line = 'Mean', showlegend = True, addmarker = False, gradcolor = None):\n        x = dataframe.index.values\n        traces = []\n        increments = 0.95 / float(len(dataframe.columns))\n\n        if gradcolor is not None:\n            try:\n                import colorlover as cl\n                color_def = cl.scales[str(len(dataframe.columns))]['seq'][gradcolor]\n            except:\n                print('Check colorlover installation...')\n\n        i = 0\n\n        for key in dataframe:\n            scatter = plotly.graph_objs.Scatter(\n                        x = x,\n                        y = dataframe[key].values,\n                        name = key,\n                        xaxis = 'x' + str(axis_no),\n                        yaxis = 'y' + str(axis_no),\n                        showlegend = showlegend)\n\n            if color_def[i % len(color_def)] != \"default\":\n                if special_line in str(key):\n                    scatter['mode'] = 'lines'\n                    scatter['line'] = plotly.graph_objs.Line(\n                                color = color_def[i % len(color_def)],\n                                width = 2\n                            )\n                else:\n                    line_width = 1\n                    if addmarker:\n                        opacity = 0.05 + (increments * i)\n                        scatter['mode'] = 'markers+lines'\n                        scatter['marker'] = plotly.graph_objs.Marker(\n                                    color=color_def[i % len(color_def)],\n                                    opacity = opacity,\n                                    size = 5)\n                        line_width = 0.2\n                    else:\n                        scatter['mode'] = 'lines'\n\n                    scatter['line'] = plotly.graph_objs.Line(\n                            color = color_def[i % len(color_def)],\n                            width = line_width)\n                    \n                i = i + 1\n\n            traces.append(scatter)\n\n        return traces\n```\n\n----------------------------------------\n\nTITLE: BigQuery Query for Top 10 Active Users\nDESCRIPTION: SQL query to get the top 10 most active users on Hacker News based on story submissions\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  author AS User,\n  count(author) as Stories\nFROM\n  [fh-bigquery:hackernews.stories]\nGROUP BY\n  User\nORDER BY\n  Stories DESC\nLIMIT\n  10\n```\n\n----------------------------------------\n\nTITLE: Integrating Plotly Shapes with Dash for Interactive Applications\nDESCRIPTION: This code demonstrates how to embed a Dash application that uses Plotly shapes in an IPython notebook using IFrame. The example showcases a reactive, web-based application built with Dash that implements shape visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-shapesplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import plotly and check its installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/groupby/groupby.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Plotting Root Locus for Gain Selection\nDESCRIPTION: Visualizes the root locus to help select appropriate controller gain values that balance stability and performance requirements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\npl.iplot(plot_root_locus(gains, roots))\n```\n\n----------------------------------------\n\nTITLE: Installing Chart Studio Python Package Using Sudo\nDESCRIPTION: Alternative command using sudo to install the Chart Studio Python package with system-wide permissions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install chart_studio\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob JavaScript Configuration\nDESCRIPTION: Shows how to configure jQuery Knob options using JavaScript initialization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".dial\").knob({\n                'min':-50\n                ,'max':50\n                });\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet shows how to check which version of Plotly is installed on the machine. It's recommended to upgrade if needed to ensure compatibility with the streaming features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Map with Plotly and Mapbox in Python\nDESCRIPTION: Shows how to create an interactive map using Plotly integrated with Mapbox to visualize nuclear waste sites on American campuses.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\n# mapbox_access_token = 'ADD YOUR TOKEN HERE'\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites%20on%20American%20Campuses.csv')\nsite_lat = df.lat\nsite_lon = df.lon\nlocations_name = df.text\n\ndata = [\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=dict(\n            size=17,\n            color='rgb(255, 0, 0)',\n            opacity=0.7\n        ),\n        text=locations_name,\n        hoverinfo='text'\n    ),\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=dict(\n            size=8,\n            color='rgb(242, 177, 172)',\n            opacity=0.7\n        ),\n        hoverinfo='none'\n    )]\n\n        \nlayout = go.Layout(\n    title='Nuclear Waste Sites on Campus',\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='light'\n    ),\n)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='jupyter-Nuclear Waste Sites on American Campuses')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream IDs from Credentials File in Python\nDESCRIPTION: Accesses stream tokens stored in the Plotly credentials file for use in streaming.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstream_ids = tls.get_credentials_file()['stream_ids']\nprint stream_ids\n```\n\n----------------------------------------\n\nTITLE: Plotting Florida County Choropleth using Plotly and Mapbox in Python\nDESCRIPTION: This script creates a choropleth map of Florida counties using Plotly and Mapbox. It uses the previously generated JSON files to color-code counties based on political party affiliation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as graph_objs\n\nmapbox_access_token = \"ADD_YOUR_TOKEN_HERE\"\n\ndata = graph_objs.Data([\n    graph_objs.Scattermapbox(\n        lat=['45.5017'],\n        lon=['-73.5673'],\n        mode='markers',\n    )\n])\nlayout = graph_objs.Layout(\n    height=600,\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        layers=[\n            dict(\n                sourcetype = 'geojson',\n                source = 'https://raw.githubusercontent.com/plotly/datasets/master/florida-red-data.json',\n                type = 'fill',\n                color = 'rgba(163,22,19,0.8)'\n            ),\n            dict(\n                sourcetype = 'geojson',\n                source = 'https://raw.githubusercontent.com/plotly/datasets/master/florida-blue-data.json',\n                type = 'fill',\n                color = 'rgba(40,0,113,0.8)'\n            )\n        ],\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=27.8,\n            lon=-83\n        ),\n        pitch=0,\n        zoom=5.2,\n        style='light'\n    ),\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='county-level-choropleths-python')\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame from Salesforce Lead Data\nDESCRIPTION: Creates a Pandas DataFrame from the extracted owners and statuses data for easier grouping and analysis of lead information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({'Owners':owners, 'Status':statuses})\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher in Python\nDESCRIPTION: This code sets up custom styling for the Jupyter notebook and publishes the notebook to the Plotly documentation site using the publisher module. It configures metadata like title, description, and categorization for the published content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/continuous-error-bars/cont-error-bars.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'cont-error-bars.ipynb', 'python/continuous-error-bars/', 'Continuous Error Bars',\n    'Add continuous error bars to charts in Python with Plotly.',\n    title = 'Continuous Error Bars | plotly',\n    name = 'Continuous Error Bars',\n    thumbnail='thumbnail/error-cont.jpg', language='python',\n    has_thumbnail='true', display_as='statistical', order=2,\n    ipynb='~notebook_demo/19')\n```\n\n----------------------------------------\n\nTITLE: Including Holder.js in HTML\nDESCRIPTION: Basic HTML script tag to include the Holder.js library in a webpage.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"holder.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Rejection Thresholds\nDESCRIPTION: Defines peak-to-peak amplitude thresholds for different channel types (gradiometers, magnetometers, EOG) to automatically reject epochs with excessive signal amplitudes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nreject = dict(grad=4000e-13, mag=4e-12, eog=150e-6)\n```\n\n----------------------------------------\n\nTITLE: Basic Online Line Plot\nDESCRIPTION: Create a basic line plot using Plotly's online plotting functionality with two scatter traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17]\n)\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[16, 5, 11, 9]\n)\ndata = [trace0, trace1]\n\npy.plot(data, filename = 'basic-line', auto_open=True)\n```\n\n----------------------------------------\n\nTITLE: Checking Closed-Loop System Poles\nDESCRIPTION: Examines the poles of the closed-loop system to verify stability after implementing the heading controller.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\npsi_psic.pole()\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Deletion of Plotly Plots and Grids\nDESCRIPTION: This function implements a method to delete all plots and grids permanently. It iterates through all files, moves them to trash, and then permanently deletes them. It's designed to handle pagination of results from the API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_pages(username, page_size):\n    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&page_size='+str(page_size)\n    response = requests.get(url, auth=auth, headers=headers)\n    if response.status_code != 200:\n        return\n    page = json.loads(response.content)\n    yield page\n    while True:\n        resource = page['children']['next']\n        if not resource:\n            break\n        response = requests.get(resource, auth=auth, headers=headers)\n        if response.status_code != 200:\n            break\n        page = json.loads(response.content)\n        yield page\n\ndef permanently_delete_files(username, page_size=500, filetype_to_delete='plot'):\n    for page in get_pages(username, page_size):\n        for x in range(0, len(page['children']['results'])):\n            fid = page['children']['results'][x]['fid']\n            res = requests.get('https://api.plot.ly/v2/files/' + fid, auth=auth, headers=headers)\n            res.raise_for_status()\n            if res.status_code == 200:\n                json_res = json.loads(res.content)\n                if json_res['filetype'] == filetype_to_delete:\n                    # move to trash\n                    requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)\n                    # permanently delete\n                    requests.delete('https://api.plot.ly/v2/files/'+fid+'/permanent_delete', auth=auth, headers=headers)\n\npermanently_delete_files(username, filetype_to_delete='plot')\npermanently_delete_files(username, filetype_to_delete='grid')\n```\n\n----------------------------------------\n\nTITLE: Assigning Click Handler to Graph Widget\nDESCRIPTION: Binds the Responder click handler to the graph widget's click event\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.on_click(r.click)\n```\n\n----------------------------------------\n\nTITLE: Constructing Projection Matrix\nDESCRIPTION: Creates the projection matrix by combining the top two eigenvectors for dimensionality reduction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmatrix_w = np.hstack((eig_pairs[0][1].reshape(4,1), \n                      eig_pairs[1][1].reshape(4,1)))\n\nprint('Matrix W:\\n', matrix_w)\n```\n\n----------------------------------------\n\nTITLE: Execute BigQuery Query with Error Handling\nDESCRIPTION: Python code to execute BigQuery query and handle potential errors\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    top10_active_users_df = gbq.read_gbq(top10_active_users_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n```\n\n----------------------------------------\n\nTITLE: Setting FigureWidget Title\nDESCRIPTION: Sets the title of a FigureWidget by modifying its layout property. This demonstrates how to customize the appearance of a FigureWidget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf.layout.title = 'Hello FigureWidget'\n```\n\n----------------------------------------\n\nTITLE: Counting Events of a Specific Type\nDESCRIPTION: Counts occurrences of a specific event type (event-id 2) in the dataset, demonstrating how to filter events by their ID.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlen(events[events[:, 2] == 2])\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Text to 3D Surface in Python with Plotly\nDESCRIPTION: This snippet creates hover text for the 3D surface. It generates a 2D list of formatted strings containing x, y, and z coordinates for each point on the surface. The hover text is then added to the surface trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntextz = [['x: '+'{:0.5f}'.format(x[i][j])+'<br>y: '+'{:0.5f}'.format(y[i][j])+\n        '<br>z: '+'{:0.5f}'.format(z[i][j]) for j in range(z.shape[1])] for i in range(z.shape[0])]\n\ntrace1= go.Surface(\n    x=tuple(x),\n    y=tuple(y),\n    z=tuple(z),\n    colorscale=colorscale,\n    text=textz,\n    hoverinfo='text',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Stream ID Object for Plotly in Python\nDESCRIPTION: Initializes a Stream ID object with a token and maximum points parameter for a single trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get stream id from stream id list \nstream_id = stream_ids[0]\n\n# Make instance of stream id object \nstream_1 = go.Stream(\n    token=stream_id,  # link stream id to 'token' key\n    maxpoints=80      # keep a max of 80 pts on screen\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning Bootstrap Repository with Git\nDESCRIPTION: Command for downloading Bootstrap by cloning the official GitHub repository using Git.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/bootstrap/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/twbs/bootstrap.git\n```\n\n----------------------------------------\n\nTITLE: Counting Total Events\nDESCRIPTION: Returns the total number of events detected in the dataset across all event types.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nlen(events)\n```\n\n----------------------------------------\n\nTITLE: Styling Box Plot Mean and Standard Deviation in Plotly Python\nDESCRIPTION: This snippet shows how to style the mean and standard deviation in a box plot. It creates two box plots, one showing only the mean and another showing both mean and standard deviation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Box(\n    y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],\n    name='Only Mean',\n    marker=dict(\n        color='rgb(8, 81, 156)',\n    ),\n    boxmean=True\n)\ntrace1 = go.Box(\n    y=[2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],\n    name='Mean & SD',\n    marker=dict(\n        color='rgb(10, 140, 208)',\n    ),\n    boxmean='sd'\n)\ndata = [trace0, trace1]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Documentation\nDESCRIPTION: Sets up custom styling and publishes the documentation using Plotly's publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/parcoords/parcoords.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'parcoords.ipynb', 'python/parallel-coordinates-plot/', 'Parallel Coordinates Plot | plotly',\n    'How to make parallel coorindates plots in Python with Plotly.',\n    title = 'Parallel Coordinates Plot | plotly',\n    name = 'Parallel Coordinates Plot',\n    has_thumbnail='true', thumbnail='thumbnail/parcoords.jpg', \n    language='python', \n    display_as='scientific', order=11.5,\n    ipynb= '~notebook_demo/142')\n```\n\n----------------------------------------\n\nTITLE: Embedding Stream Display\nDESCRIPTION: Embeds the streaming visualization in the notebook\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/subplot-streaming.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('streaming-demos','122')\n```\n\n----------------------------------------\n\nTITLE: Importing Common Data Analysis Libraries in Python\nDESCRIPTION: Shows how to import popular data analysis libraries like Pandas, NumPy, SciPy, and Plotly in a Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nimport plotly.plotly as py\n```\n\n----------------------------------------\n\nTITLE: Alternative Stream ID Object Creation in Python\nDESCRIPTION: Shows an alternative method to create a Stream ID object using a dictionary.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstream_1 = dict(token=stream_id, maxpoints=60)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for MySQL and Plotly Integration\nDESCRIPTION: Imports the necessary libraries for connecting to MySQL, manipulating data with pandas, and creating visualizations with Plotly. These imports prepare the environment for database operations and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport MySQLdb\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Color Scale Conversion and Manipulation\nDESCRIPTION: Demonstrates converting color scales between RGB, HSL, and numeric representations\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nryb = cl.scales['3']['div']['RdYlBu']; ryb\n```\n\nLANGUAGE: python\nCODE:\n```\ncl.to_hsl( ryb )\n```\n\nLANGUAGE: python\nCODE:\n```\ncl.to_numeric( ryb )\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration\nDESCRIPTION: Sets up documentation styling and publishes the notebook using Plotly's publisher tool with specific metadata and configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'mouse_events.ipynb', 'python/mouse-events/', 'Mouse Events in IPython Widgets',\n    'Mouse Events in IPython Widgets',\n    title = 'Using Mouse Events with Plotly GraphWidgets',\n    name = 'Using Mouse Events with Plotly GraphWidgets',\n    has_thumbnail='true', thumbnail='thumbnail/zoom.jpg', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=24,\n    ipynb= '~notebook_demo/88')\n```\n\n----------------------------------------\n\nTITLE: Creating HTML IFrame Display Function\nDESCRIPTION: Helper function that generates HTML code to display presentations in an iframe within Jupyter notebooks. Includes styling and optional instructional text.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef url_to_iframe(url, text=True):\n    html = ''\n    # style\n    html += '''<head>\n    <style>\n    div.textbox {\n        margin: 30px;\n        font-weight: bold;   \n    }\n    </style>\n    </head>'\n    '''\n    # iframe\n    html += '<iframe src=' + url + '.embed#{} width=750 height=400 frameBorder=\"0\"></iframe>'\n    if text:\n        html += '''<body>\n        <div class=\"textbox\">\n            <p>Click on the presentation above and use left/right arrow keys to flip through the slides.</p>\n        </div>\n        </body>\n        '''\n    return html\n```\n\n----------------------------------------\n\nTITLE: Opening an HDF5 File Store with Pandas\nDESCRIPTION: This snippet demonstrates how to open an HDF5 file as a store using pandas. The HDFStore object provides an interface for reading and writing data to the HDF5 file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstore = pd.HDFStore('nypd_motors.h5')\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Graph Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot of a Plotly graph with fitted lines.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nImage (url = 'http://i.imgur.com/BUOe85E.png')\n```\n\n----------------------------------------\n\nTITLE: Query for Top 10 Stories by Score\nDESCRIPTION: SQL query to fetch top 10 highest scoring stories from Hacker News\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  title,\n  score,\n  time_ts AS timestamp\nFROM\n  [fh-bigquery:hackernews.stories]\nORDER BY\n  score DESC\nLIMIT\n  10\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Plotly Graphs\nDESCRIPTION: Example of creating a secret plot that can be viewed by anyone with the link but won't appear in public feeds.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename='privacy-secret', sharing='secret')\n```\n\n----------------------------------------\n\nTITLE: Testing Spark Context in IPython Notebook\nDESCRIPTION: A simple Python snippet to verify that the Spark Context (sc) is properly initialized in the IPython notebook. This confirms that the PySpark setup is working correctly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function #python 3 support\nprint(sc)\n```\n\n----------------------------------------\n\nTITLE: Plot Cluster Centers in Scatter Plot\nDESCRIPTION: Plots cluster centers on the same scatter plot as neighborhoods, using Plotly's Scatter to mark center positions with 'x' symbols.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# Represent cluster centers.\ntrace1 = pgo.Scatter(x=model.cluster_centers_[:, 0],\n                     y=model.cluster_centers_[:, 1],\n                     name='',\n                     mode='markers',\n                     marker=pgo.Marker(symbol='x',\n                                       size=12,\n                                       color=range(n_clusters)),\n                     showlegend=False\n)\ndata7 = pgo.Data([trace0, trace1])\nlayout7 = layout5\nlayout7['title'] = 'Baltimore Vital Signs (PCA and k-means clustering with 7 clusters)'\nfig7 = pgo.Figure(data=data7, layout=layout7)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Publishing IPython Documentation\nDESCRIPTION: Python script that configures font styling for IPython display, installs the plotly publisher package, and publishes documentation about IPython vs Python differences. The code sets up custom CSS and fonts for documentation display and uses the publisher module to create a formatted documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/ipython-vs-python/ipython-vs-python.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ipython-vs-python.ipynb', 'python/ipython-vs-python/', 'IPython vs Python | plotly',\n    'Discussion of key differences between IPython and Python',\n    title = 'IPython vs Python | plotly',\n    name = 'IPython vs Python',\n    thumbnail='thumbnail/venn.jpg', language='python',\n    has_thumbnail='true', display_as='chart_studio', order=12,\n    ipynb='~notebook_demo/17')\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Plotly Graph Reports in IPython\nDESCRIPTION: Displays an interactive HTML report containing Plotly graphs within the IPython notebook. This version includes embedded interactive graphs served from Plotly's server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/pdf-reports.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndisplay(HTML(interactive_report))\n```\n\n----------------------------------------\n\nTITLE: Displaying Quiver Plot Documentation\nDESCRIPTION: Shows help documentation for the create_quiver function from Plotly's figure factory module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/quiver/quiver.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_quiver)\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color and Styling in Plotly Charts\nDESCRIPTION: This example demonstrates how to customize text appearance in Plotly charts by setting font family, size, and color. Different text styles can be applied to different traces to visually distinguish between data series.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2],\n    y=[1, 1, 1],\n    mode='lines+markers+text',\n    name='Lines, Markers and Text',\n    text=['Text A', 'Text B', 'Text C'],\n    textposition='top right',\n    textfont=dict(\n        family='sans serif',\n        size=18,\n        color='#1f77b4'\n    )\n)\n\ntrace2 = go.Scatter(\n    x=[0, 1, 2],\n    y=[2, 2, 2],\n    mode='lines+markers+text',\n    name='Lines and Text',\n    text=['Text G', 'Text H', 'Text I'],\n    textposition='bottom center',\n    textfont=dict(\n        family='sans serif',\n        size=18,\n        color='#ff7f0e'\n    )\n)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    showlegend=False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='text-chart-styling')\n```\n\n----------------------------------------\n\nTITLE: Extracting Node Labels and Groups from JSON in Python\nDESCRIPTION: Processes the nodes data to extract character names as labels and their corresponding groups, which will be used for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlabels=[]\ngroup=[]\nfor node in data['nodes']:\n    labels.append(node['name'])\n    group.append(node['group'])\n```\n\n----------------------------------------\n\nTITLE: Processing Election Dates\nDESCRIPTION: Processes historical UK election dates and filters them based on available spot data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    labour_wins = ['28/02/1974', '10/10/1974', '01/05/1997', '07/06/2001', '05/05/2005']\n    conservative_wins = ['03/05/1979', '09/06/1983', '11/06/1987', '09/04/1992', '06/05/2010']\n\n    labour_wins_d = event_plot.parse_dates(labour_wins)\n    conservative_wins_d = event_plot.parse_dates(conservative_wins)\n\n    labour_wins_d = [d for d in labour_wins_d if d > spot.index[0].to_pydatetime()]\n    conservative_wins_d = [d for d in conservative_wins_d if d > spot.index[0].to_pydatetime()]\n\n    spot.index.name = 'Date'\n```\n\n----------------------------------------\n\nTITLE: Estimating Mean with Larger Sample Size for Negative Binomial in Python\nDESCRIPTION: The snippet increases the sample size of the gamma distribution simulation to 100,000 to achieve a more accurate estimation of the expected value of a negative binomial distribution. This improved estimation is an application of the law of large numbers providing a closer approximation to the theoretical expected value.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlam = np.random.gamma(r, p / (1 - p), size=100000)\nsim_vals = np.random.poisson(lam)\nsim_vals.mean()\n```\n\n----------------------------------------\n\nTITLE: Styling CartoDB Torque Visualization with CartoCSS\nDESCRIPTION: This CSS snippet provides styling for a CartoDB Torque visualization of earthquake data. It defines different styles for earthquakes of varying magnitudes, including marker size, color, and opacity changes over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/** Torque visualization */\nMap {\n-torque-frame-count:512;\n-torque-animation-duration:30;\n-torque-time-attribute:\"time\";\n-torque-aggregation-function:\"max(mag)\";\n-torque-resolution:2;\n-torque-data-aggregation:linear;\n}\n\n#earthquake_data_plotly{\n  comp-op: lighter;\n  marker-fill-opacity: 0.9;\n  marker-line-color: #FFF;\n  marker-line-width: 0;\n  marker-line-opacity: 1;\n  marker-type: ellipse;\n  marker-width: 6;\n  marker-fill: #3E7BB6;\n}\n\n#earthquake_data_plotly[value >7] {\n  marker-width: 20;\n  marker-fill: #3e7bb6;\n  [frame-offset=1] {\n    marker-width:19;\n    marker-fill-opacity:0.8;\n  }\n  [frame-offset=2] {\n    marker-width:18;\n    marker-fill-opacity:0.7; \n  }\n  [frame-offset=3] {\n    marker-width:17;\n    marker-fill-opacity:0.6; \n  }\n  [frame-offset=4] {\n    marker-width:16;\n    marker-fill-opacity:0.5; \n  }\n  [frame-offset=5] {\n    marker-width:15;\n    marker-fill-opacity:0.4;\n  }\n}\n\n#earthquake_data_plotly[value<=7][value>6] {\n  marker-width: 16;\n  marker-fill: #C3CEFF;\n  [frame-offset=1] {\n    marker-width:14;\n    marker-fill-opacity:0.7;\n  }\n  [frame-offset=2] {\n    marker-width:13;\n    marker-fill-opacity:0.6; \n  }\n  [frame-offset=3] {\n    marker-width:12;\n    marker-fill-opacity:0.5; \n  }\n  [frame-offset=4] {\n    marker-width:11;\n    marker-fill-opacity:0.4; \n  }\n}\n\n#earthquake_data_plotly[value<=6][value>5] {\n  marker-width: 12;\n  marker-fill: #FFFFFF;\n  [frame-offset=1] {\n    marker-width:10;\n    marker-fill-opacity:0.6;\n  }\n  [frame-offset=2] {\n    marker-width:8;\n    marker-fill-opacity:0.5; \n  }\n  [frame-offset=3] {\n    marker-width:6;\n    marker-fill-opacity:0.4;\n  }\n}\n\n#earthquake_data_plotly[value<=5][value>4] {\n  marker-width: 6;\n  marker-fill: yellow; \n  [frame-offset=1] {\n    marker-width:4;\n    marker-fill-opacity:0.5;\n  }\n  [frame-offset=2] {\n    marker-width:2;\n    marker-fill-opacity:0.4;\n  }\n}\n\n#earthquake_data_plotly[value <= 4][value > 3] {\n  marker-width: 3;\n  marker-fill: orange;\n  [frame-offset=1] {\n    marker-width:2;\n    marker-fill-opacity:0.4;\n  }\n  [frame-offset=2] {\n    marker-width:1;\n    marker-fill-opacity:0.3;\n  }\n}\n\n#earthquake_data_plotly[value <= 3][value > 2] {\n  marker-width: 2;\n  marker-fill: red;\n  [frame-offset=1] {\n    marker-width:1.5;\n    marker-fill-opacity:0.3;\n  }\n  [frame-offset=2] {\n    marker-width:1;\n    marker-fill-opacity:0.2;\n  }\n}\n\n#earthquake_data_plotly[value <= 2] {\n  marker-fill: #850200;\n  marker-width: 0.5;\n  [frame-offset=1] {\n    marker-width:0;\n    marker-fill-opacity:0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using title.text instead of string title in Plotly.js\nDESCRIPTION: Example demonstrating the use of title.text object instead of a simple string for the title attribute in Plotly.js chart layouts. This applies to main titles and axis titles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  {\n    x: [1, 2, 3, 4, 5],\n    y: [1, 2, 4, 8, 16]\n  }\n];\n\nvar layout = {\n  title: { text: \"My chart title\" },\n  xaxis: {\n    title: {\n      text: \"x-axis title\"\n    }\n  },\n  yaxis: { title: { text: \"y-axis title\" } }\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database with SQLAlchemy\nDESCRIPTION: Creates a connection to a SQLite database using SQLAlchemy's create_engine function. The database will be stored in the current directory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisk_engine = create_engine('sqlite:///311_8M.db') # Initializes database with filename 311_8M.db in current directory\n```\n\n----------------------------------------\n\nTITLE: Displaying MATLAB Plot Gallery Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a MATLAB plot gallery image from an external URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nImage(url = 'http://i.imgur.com/bGj8EzI.png?1')\n```\n\n----------------------------------------\n\nTITLE: Executing BigQuery Queries with Error Handling\nDESCRIPTION: Reading BigQuery results into pandas DataFrames with try-except blocks for error handling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    python_df = gbq.read_gbq(python_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n```\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    php_df = gbq.read_gbq(php_query, project_id=project_id)\nexcept:\n    print 'Error reading the dataset'\n```\n\n----------------------------------------\n\nTITLE: Google Maps API Setup\nDESCRIPTION: Initial setup for using Google Maps API including necessary imports and API key configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\n\nimport numpy as np\nimport requests\nimport copy\nimport googlemaps\n\n# add your google maps api key here\nmy_google_maps_api_key = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check for Plotly Python library to ensure buttons functionality (required version 1.12.12+).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/buttons/custom-buttons.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Calculating Root Locus for Negative Feedback in Python Control\nDESCRIPTION: This code calculates the root locus for negative feedback gains using Python Control's root_locus function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nneg_feedback_roots, neg_feedback_gains = cn.root_locus(theta_delta, kvect=np.linspace(0.0, 10.0, num=500))\n```\n\n----------------------------------------\n\nTITLE: Setting HDF5 Default Format in Pandas\nDESCRIPTION: This code sets the default format for HDF5 files in pandas to 'table'. This setting allows for more flexible querying and data manipulation when working with HDF5 files.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npd.set_option('io.hdf.default_format','table')\n```\n\n----------------------------------------\n\nTITLE: Defining New York Times Custom Colorscale in Python for Plotly Heatmap\nDESCRIPTION: Creates a custom colorscale that mimics the one used by The New York Times for their scoreboards. The colorscale transitions from dark red (#8B0000) to light yellow (#FFFFE0) through 16 color steps.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnewyorktimes_cs=[[0.0, '#8B0000'],\n [0.06666666666666667, '#9E051B'],\n [0.13333333333333333, '#B0122C'],\n [0.2, '#C0223B'],\n [0.26666666666666666, '#CF3447'],\n [0.3333333333333333, '#DB4551'],\n [0.4, '#E75758'],\n [0.4666666666666667, '#F06A5E'],\n [0.5333333333333333, '#F87D64'],\n [0.6, '#FE906A'],\n [0.6666666666666666, '#FFA474'],\n [0.7333333333333333, '#FFB880'],\n [0.8, '#FFCB91'],\n [0.8666666666666667, '#FFDEA7'],\n [0.9333333333333333, '#FFEEC1'],\n [1.0, '#FFFFE0']]\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Histogram in Python with Plotly\nDESCRIPTION: This snippet shows how to create a styled histogram with custom bin sizes, colors, and layout settings. It demonstrates advanced formatting options like setting bin parameters, marker colors, labels, and titles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram/histograms.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\nx0 = np.random.randn(500)\nx1 = np.random.randn(500)+1\n\ntrace1 = go.Histogram(\n    x=x0,\n    histnorm='percent',\n    name='control',\n    xbins=dict(\n        start=-4.0,\n        end=3.0,\n        size=0.5\n    ),\n    marker=dict(\n        color='#FFD7E9',\n    ),\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1,\n    name='experimental',\n    xbins=dict(\n        start=-3.0,\n        end=4,\n        size=0.5\n    ),\n    marker=dict(\n        color='#EB89B5'\n    ),\n    opacity=0.75\n)\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n    title='Sampled Results',\n    xaxis=dict(\n        title='Value'\n    ),\n    yaxis=dict(\n        title='Count'\n    ),\n    bargap=0.2,\n    bargroupgap=0.1\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='styled histogram')\n```\n\n----------------------------------------\n\nTITLE: Defining Network Graph Edges in GML Format\nDESCRIPTION: This code defines edges in a network graph using Graph Modeling Language (GML) format. Each edge specifies a source node, target node, and a numerical value that represents the weight or strength of the connection between them. The edges collectively form a network structure for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_16\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 1146\n    target 1146\n    value 0.25\n  ]\n  edge\n  [\n    source 1149\n    target 1147\n    value 0.25\n  ]\n  edge\n  [\n    source 1149\n    target 1148\n    value 0.25\n  ]\n  edge\n  [\n    source 1150\n    target 1146\n    value 0.25\n  ]\n  edge\n  [\n    source 1150\n    target 1147\n    value 0.25\n  ]\n  edge\n  [\n    source 1150\n    target 1148\n    value 0.25\n  ]\n  edge\n  [\n    source 1150\n    target 1149\n    value 0.25\n  ]\n  edge\n  [\n    source 1153\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1154\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1154\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1155\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1155\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1155\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1156\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1156\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1156\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1156\n    target 1155\n    value 0.125\n  ]\n  edge\n  [\n    source 1157\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1157\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1157\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1157\n    target 1155\n    value 0.125\n  ]\n  edge\n  [\n    source 1157\n    target 1156\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1155\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1156\n    value 0.125\n  ]\n  edge\n  [\n    source 1158\n    target 1157\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1155\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1156\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1157\n    value 0.125\n  ]\n  edge\n  [\n    source 1159\n    target 1158\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1152\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1153\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1154\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1155\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1156\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1157\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1158\n    value 0.125\n  ]\n  edge\n  [\n    source 1160\n    target 1159\n    value 0.125\n  ]\n  edge\n  [\n    source 1162\n    target 114\n    value 0.5\n  ]\n  edge\n  [\n    source 1162\n    target 186\n    value 1.25\n  ]\n  edge\n  [\n    source 1163\n    target 114\n    value 0.5\n  ]\n  edge\n  [\n    source 1163\n    target 1162\n    value 0.5\n  ]\n  edge\n  [\n    source 1165\n    target 1164\n    value 1\n  ]\n  edge\n  [\n    source 1166\n    target 259\n    value 0.333333\n  ]\n  edge\n  [\n    source 1166\n    target 258\n    value 0.333333\n  ]\n  edge\n  [\n    source 1167\n    target 259\n    value 0.333333\n  ]\n  edge\n  [\n    source 1167\n    target 258\n    value 0.333333\n  ]\n  edge\n  [\n    source 1167\n    target 1166\n    value 0.333333\n  ]\n  edge\n  [\n    source 1169\n    target 1168\n    value 1\n  ]\n  edge\n  [\n    source 1170\n    target 820\n    value 1\n  ]\n  edge\n  [\n    source 1172\n    target 78\n    value 1\n  ]\n  edge\n  [\n    source 1175\n    target 931\n    value 0.5\n  ]\n  edge\n  [\n    source 1176\n    target 1175\n    value 0.5\n  ]\n  edge\n  [\n    source 1176\n    target 931\n    value 0.5\n  ]\n  edge\n  [\n    source 1177\n    target 150\n    value 0.5\n  ]\n  edge\n  [\n    source 1177\n    target 96\n    value 0.5\n  ]\n  edge\n  [\n    source 1178\n    target 150\n    value 0.833333\n  ]\n  edge\n  [\n    source 1178\n    target 281\n    value 0.833333\n  ]\n  edge\n  [\n    source 1180\n    target 589\n    value 0.25\n  ]\n  edge\n  [\n    source 1180\n    target 590\n    value 0.25\n  ]\n  edge\n  [\n    source 1180\n    target 591\n    value 0.25\n  ]\n  edge\n  [\n    source 1181\n    target 1180\n    value 0.25\n  ]\n  edge\n  [\n    source 1181\n    target 589\n    value 0.25\n  ]\n  edge\n  [\n    source 1181\n    target 590\n    value 0.25\n  ]\n  edge\n  [\n    source 1181\n    target 591\n    value 0.25\n  ]\n  edge\n  [\n    source 1182\n    target 302\n    value 1\n  ]\n  edge\n  [\n    source 1185\n    target 1184\n    value 0.5\n  ]\n  edge\n  [\n    source 1186\n    target 1184\n    value 0.5\n  ]\n  edge\n  [\n    source 1186\n    target 1185\n    value 0.5\n  ]\n  edge\n  [\n    source 1189\n    target 327\n    value 0.5\n  ]\n  edge\n  [\n    source 1189\n    target 328\n    value 0.5\n  ]\n  edge\n  [\n    source 1190\n    target 54\n    value 0.2\n  ]\n  edge\n  [\n    source 1190\n    target 34\n    value 0.2\n  ]\n  edge\n  [\n    source 1190\n    target 840\n    value 0.2\n  ]\n  edge\n  [\n    source 1190\n    target 33\n    value 0.2\n  ]\n  edge\n  [\n    source 1191\n    target 1190\n    value 0.2\n  ]\n  edge\n  [\n    source 1191\n    target 54\n    value 0.2\n  ]\n  edge\n  [\n    source 1191\n    target 34\n    value 0.2\n  ]\n  edge\n  [\n    source 1191\n    target 840\n    value 0.2\n  ]\n  edge\n  [\n    source 1191\n    target 33\n    value 0.2\n  ]\n  edge\n  [\n    source 1194\n    target 1193\n    value 1\n  ]\n  edge\n  [\n    source 1195\n    target 78\n    value 0.333333\n  ]\n  edge\n  [\n    source 1196\n    target 1195\n    value 0.333333\n  ]\n  edge\n  [\n    source 1196\n    target 78\n    value 0.333333\n  ]\n  edge\n  [\n    source 1197\n    target 1195\n    value 0.333333\n  ]\n  edge\n  [\n    source 1197\n    target 1196\n    value 0.333333\n  ]\n  edge\n  [\n    source 1197\n    target 78\n    value 0.333333\n  ]\n  edge\n  [\n    source 1199\n    target 1198\n    value 0.5\n  ]\n  edge\n  [\n    source 1200\n    target 1198\n    value 0.5\n  ]\n  edge\n  [\n    source 1200\n    target 1199\n    value 0.5\n  ]\n  edge\n  [\n    source 1201\n    target 913\n    value 0.785714\n  ]\n  edge\n  [\n    source 1201\n    target 916\n    value 1.11905\n  ]\n  edge\n  [\n    source 1201\n    target 1000\n    value 0.142857\n  ]\n  edge\n  [\n    source 1201\n    target 914\n    value 0.142857\n  ]\n  edge\n  [\n    source 1201\n    target 915\n    value 0.142857\n  ]\n  edge\n  [\n    source 1202\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1202\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1202\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1202\n    target 1000\n    value 0.142857\n  ]\n  edge\n  [\n    source 1203\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1203\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1203\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1203\n    target 1202\n    value 0.142857\n  ]\n  edge\n  [\n    source 1203\n    target 1000\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 1202\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 1203\n    value 0.142857\n  ]\n  edge\n  [\n    source 1204\n    target 1000\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 1202\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 1203\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 1204\n    value 0.142857\n  ]\n  edge\n  [\n    source 1205\n    target 1000\n    value 0.142857\n  ]\n  edge\n  [\n    source 1206\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1206\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1206\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1206\n    target 914\n    value 0.142857\n  ]\n  edge\n  [\n    source 1206\n    target 915\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 1206\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 914\n    value 0.142857\n  ]\n  edge\n  [\n    source 1207\n    target 915\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 913\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 1206\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 916\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 1201\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 914\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 1207\n    value 0.142857\n  ]\n  edge\n  [\n    source 1208\n    target 915\n    value 0.142857\n  ]\n  edge\n  [\n    source 1210\n    target 1209\n    value 0.333333\n  ]\n  edge\n  [\n    source 1211\n    target 1209\n    value 0.333333\n  ]\n  edge\n  [\n    source 1211\n    target 1210\n    value 0.333333\n  ]\n  edge\n  [\n    source 1212\n    target 1209\n    value 0.333333\n  ]\n  edge\n  [\n    source 1212\n    target 1210\n    value 0.333333\n  ]\n  edge\n  [\n    source 1212\n    target 1211\n    value 0.333333\n  ]\n  edge\n  [\n    source 1214\n    target 330\n    value 0.25\n  ]\n  edge\n  [\n    source 1215\n    target 1214\n    value 0.25\n  ]\n  edge\n  [\n    source 1215\n    target 330\n    value 0.25\n  ]\n  edge\n  [\n    source 1216\n    target 1214\n    value 0.25\n  ]\n  edge\n  [\n    source 1216\n    target 330\n    value 0.25\n  ]\n  edge\n  [\n    source 1216\n    target 1215\n    value 0.25\n  ]\n  edge\n  [\n    source 1217\n    target 1214\n    value 0.25\n  ]\n  edge\n  [\n    source 1217\n    target 330\n    value 0.25\n  ]\n  edge\n  [\n    source 1217\n    target 1215\n    value 0.25\n  ]\n  edge\n  [\n    source 1217\n    target 1216\n    value 0.25\n  ]\n  edge\n  [\n    source 1219\n    target 1218\n    value 1\n  ]\n  edge\n  [\n    source 1221\n    target 500\n    value 0.5\n  ]\n  edge\n  [\n    source 1221\n    target 150\n    value 0.5\n  ]\n```\n\n----------------------------------------\n\nTITLE: Version Check in Plotly Python\nDESCRIPTION: Simple code to check the installed version of Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/tick-format/tick-formatting.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check to ensure Plotly is installed and verify the version number. Required version 1.12.6+ for slider functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/sliders/sliders.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It imports the plotly module and prints the version number.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Treemap Notebook in Python\nDESCRIPTION: This code snippet demonstrates how to publish a Plotly treemap notebook using the publisher library. It sets up custom fonts and CSS, installs the publisher library, and then publishes the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/treemap/treemap.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'treemap.ipynb', 'python/treemaps/', 'Python Treemaps | plotly',\n    'How to make interactive treemap in Python with Plotly and Squarify. '\n    'An examples of a treemap in Plotly using Squarify.',\n    title = 'Python Treemaps | plotly',\n    name = 'Treemaps',\n    thumbnail='thumbnail/treemap.jpg', language='python',\n    has_thumbnail='true', display_as='statistical', order=11,\n    ipynb= '~notebook_demo/29')\n```\n\n----------------------------------------\n\nTITLE: Updating Schema Reference Search Index in Makefile\nDESCRIPTION: Make target for updating the schema search index on Algolia. This index provides search functionality for chart attribute reference pages across all supported programming languages.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/make_instructions.txt#2025-04-11_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nupdate_ref_search -> update the schema search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/schema\n```\n\n----------------------------------------\n\nTITLE: Normalized Stacked Area Chart\nDESCRIPTION: Implements a normalized stacked area chart with percentage values and custom axis configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = dict(\n    x=['Winter', 'Spring', 'Summer', 'Fall'],\n    y=['40', '20', '30', '40'],\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(184, 247, 212)'),\n    stackgroup='one',\n    groupnorm='percent'\n)\ntrace1 = dict(\n    x=['Winter', 'Spring', 'Summer', 'Fall'],\n    y=['50', '70', '40', '60'],\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(111, 231, 219)'),\n    stackgroup='one'\n)\ntrace2 = dict(\n    x=['Winter', 'Spring', 'Summer', 'Fall'],\n    y=['70', '80', '60', '70'],\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(127, 166, 238)'),\n    stackgroup='one'\n)\ntrace3 = dict(\n    x=['Winter', 'Spring', 'Summer', 'Fall'],\n    y=['100', '100', '100', '100'],\n    mode='lines',\n    line=dict(width=0.5,\n              color='rgb(131, 90, 241)'),\n    stackgroup='one'\n)\ndata = [trace0, trace1, trace2, trace3]\nlayout = go.Layout(\n    showlegend=True,\n    xaxis=dict(\n        type='category',\n    ),\n    yaxis=dict(\n        type='linear',\n        range=[1, 100],\n        dtick=20,\n        ticksuffix='%'\n    )\n)\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='stacked-area-plot-norm', validate=False)\n```\n\n----------------------------------------\n\nTITLE: Running MH Algorithm with Small Proposal Variance in Python\nDESCRIPTION: Executes the Metropolis-Hastings algorithm with a small proposal variance (0.001) for 10,000 iterations, starting with initial parameter values (1,0,1).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nn_iter = 10000\ntrace, acc = metropolis(n_iter, initial_values=(1,0,1), prop_var=0.001)\n```\n\n----------------------------------------\n\nTITLE: Creating Contour Plot Data\nDESCRIPTION: Preparing data for the contour plot by calculating grid points and surface values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nweights=even_row_pts(2*m)\nnew_weights=additional_weights(m, weights)\ngrid_pts=grid(m, weights, new_weights)\nX, Y, Z=surface_points(n, b, grid_pts)\nZZ=move_data_to_triangle(m, Z)[::-1]\n```\n\n----------------------------------------\n\nTITLE: Online Plotting with py.plot() in Chart Studio\nDESCRIPTION: Python example of creating a basic line plot with two traces using py.plot() for online plotting in Chart Studio. The plot is saved to your Chart Studio account and can be viewed online.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17]\n)\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[16, 5, 11, 9]\n)\ndata = [trace0, trace1]\n\npy.plot(data, filename = 'basic-line', auto_open=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Function Between 2D Points in Python\nDESCRIPTION: Defines a function to calculate the Euclidean distance between two 2D points using NumPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\ndef dist (A,B):\n    return np.linalg.norm(np.array(A)-np.array(B))\ndist(layt[0], layt[5])\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Chart in Web Page\nDESCRIPTION: Uses Plotly's tools to create an embeddable version of the streaming chart for inclusion in web pages or other content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntls.embed('https://plotly.com/~streaming-demos/116/bar-chart-streaming')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pandas DataFrame from Plotly Data\nDESCRIPTION: This code snippet retrieves data from a Plotly figure, extracts the 'x' and 'y' values for each trace, and creates a pandas DataFrame.  The DataFrame is structured with the trace names as column headers and the 'x' and 'y' values as the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmy_data = py.get_figure('MattSundquist', '1339').get_data()\nframes = {data['name']: {'x': data['x'], 'y': data['y']} for data in my_data['data']}\ndf = pd.DataFrame(frames)\ndf\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Data\nDESCRIPTION: Prepares histogram data for plotting ride durations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndata = [go.Histogram(x=df2.toPandas()['d1'])]\n```\n\n----------------------------------------\n\nTITLE: Online Plotting with py.iplot() in Jupyter Notebook\nDESCRIPTION: Python example of creating a basic line plot with two traces using py.iplot() for interactive plotting within a Jupyter notebook. The plot is saved to your Chart Studio account.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[10, 15, 13, 17]\n)\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[16, 5, 11, 9]\n)\ndata = [trace0, trace1]\n\npy.iplot(data, filename = 'basic-line')\n```\n\n----------------------------------------\n\nTITLE: Creating a Marker Configuration Function for Interactive Controls\nDESCRIPTION: Defines a function that updates marker opacity and size based on input parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef set_opacity(opacity, size):\n    scatter.marker.opacity = opacity\n    scatter.marker.size = size\n```\n\n----------------------------------------\n\nTITLE: Creating a Colored Horizontal Bar Chart with Plotly in Python\nDESCRIPTION: This snippet shows how to create a more complex horizontal bar chart with custom colors and multiple traces. It uses custom marker colors and line styles for each bar.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[20, 14, 23],\n    name='SF Zoo',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(246, 78, 139, 0.6)',\n        line = dict(\n            color = 'rgba(246, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=['giraffes', 'orangutans', 'monkeys'],\n    x=[12, 18, 29],\n    name='LA Zoo',\n    orientation = 'h',\n    marker = dict(\n        color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(\n            color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='marker-h-bar')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet shows how to publish a Jupyter notebook as documentation for Plotly. It includes custom font styling, CSS imports, and uses the Plotly publisher package to format and upload the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-streamtube/streamtube.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'streamtube.ipynb', 'python/streamtube-plot/', '3D Streamtube Plots',\n    'How to make 3D streamtube plots in Python with Plotly.',\n    title = '3D Streamtube Plots | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/streamtube.jpg',\n    language='python',\n    display_as='3d_charts', order=21, ipynb='~notebook_demo/207',\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Play Button to Animated Plotly Plot in Python\nDESCRIPTION: This snippet shows how to add a play button to an animated Plotly plot. It creates a figure with initial data, frames for animation, and adds an 'updatemenus' parameter to the layout for the play button.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\n\ninit_notebook_mode(connected=True)\n\nfigure = {'data': [{'x': [0, 1], 'y': [0, 1]}],\n          'layout': {'xaxis': {'range': [0, 5], 'autorange': False},\n                     'yaxis': {'range': [0, 5], 'autorange': False},\n                     'title': 'Start Title',\n                     'updatemenus': [{'type': 'buttons',\n                                      'buttons': [{'label': 'Play',\n                                                   'method': 'animate',\n                                                   'args': [None]}]}]\n                    },\n          'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},\n                     {'data': [{'x': [1, 4], 'y': [1, 4]}]},\n                     {'data': [{'x': [3, 4], 'y': [3, 4]}],\n                      'layout': {'title': 'End Title'}}]}\n\niplot(figure)\n```\n\n----------------------------------------\n\nTITLE: Displaying YouTube Video in Notebook\nDESCRIPTION: Shows how to embed a YouTube video within an IPython notebook using YouTubeVideo\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('YEM6QMSylfU', width='100%', height='350')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's important to keep Plotly updated for access to the latest features and improvements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: SVG Export Configuration\nDESCRIPTION: Code snippet showing how to export a Plotly graph as an SVG vector image with specific dimensions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/static-image-export/2016-05-20-static-image.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimg_svg.attr(\"src\", url);\nPlotly.toImage(gd,{format:'svg',height:800,width:800});\n```\n\n----------------------------------------\n\nTITLE: Querying Opportunity Data from Salesforce\nDESCRIPTION: Executes a SOQL query to retrieve opportunity information including probability, stage, amount, and owner name, filtering for opportunities with amounts less than $10,000.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nopportunity_amounts = sf.query(\"SELECT Id, Probability, StageName, Amount, Owner.Name FROM Opportunity WHERE AMOUNT < 10000\")\n```\n\n----------------------------------------\n\nTITLE: Computing Covariance Matrix Manually for PCA\nDESCRIPTION: This snippet demonstrates how to manually calculate the covariance matrix from standardized data, which is a key step in PCA. The covariance matrix represents the relationships between pairs of features and forms the basis for eigendecomposition in PCA.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nmean_vec = np.mean(X_std, axis=0)\ncov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[0]-1)\nprint('Covariance matrix \\n%s' %cov_mat)\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Widths with Plotly in Python\nDESCRIPTION: This code shows how to customize individual bar widths in a bar chart using Plotly in Python. It demonstrates varying bar widths to represent different data characteristics.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Bar(\n    x=[1, 2, 3, 5.5, 10],\n    y=[10, 8, 6, 4, 2],\n    width = [0.8, 0.8, 0.8, 3.5, 4]\n)\n\ndata = [trace0]\n\nfig = go.Figure(data=data)\npy.iplot(fig, filename='width-bar')\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Layout with Plotly in R\nDESCRIPTION: This code snippet demonstrates how to update the layout of a downloaded figure using the plotly R package. It modifies the title of the graph to include the current system time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_5\n\nLANGUAGE: r\nCODE:\n```\np <- layout(fig, title = paste(\"Modified on \", Sys.time()))\np\n```\n\n----------------------------------------\n\nTITLE: Viewing Channel Names\nDESCRIPTION: Displays the first five channel names from the raw data object to examine the available recording channels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(raw.ch_names[:5])\n```\n\n----------------------------------------\n\nTITLE: Generating Random Z-coordinates\nDESCRIPTION: Creating random z-coordinates for control points in the range [1,5].\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nb_z=1+4*np.random.random(nr_ctrl_pts)\n```\n\n----------------------------------------\n\nTITLE: Grouping Opportunity Data by Owner for Comparison\nDESCRIPTION: Groups opportunity data by owner and creates histograms for each sales representative showing the distribution of their opportunity amounts for comparison.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nopportunity_comparisons = []\nfor name, vals in df2.groupby('Owners'):\n    temp = Histogram(x=vals['Amounts'], opacity=0.75, name=name)\n    opportunity_comparisons.append(temp)\n```\n\n----------------------------------------\n\nTITLE: Creating OHLC Charts with datetime Objects in Python\nDESCRIPTION: This example demonstrates how to create an OHLC chart using Python's datetime objects instead of string dates. This approach offers more control over date formatting and time-based operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/ohlc/ohlc-charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom datetime import datetime\n\nopen_data = [33.0, 33.3, 33.5, 33.0, 34.1]\nhigh_data = [33.1, 33.3, 33.6, 33.2, 34.8]\nlow_data = [32.7, 32.7, 32.8, 32.6, 32.8]\nclose_data = [33.0, 32.9, 33.3, 33.1, 33.1]\ndates = [datetime(year=2013, month=10, day=10),\n         datetime(year=2013, month=11, day=10),\n         datetime(year=2013, month=12, day=10),\n         datetime(year=2014, month=1, day=10),\n         datetime(year=2014, month=2, day=10)]\n\ntrace = go.Ohlc(x=dates,\n                open=open_data,\n                high=high_data,\n                low=low_data,\n                close=close_data)\ndata = [trace]\npy.iplot(data, filename='ohlc_datetime')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Demonstrates how to verify the installed Plotly version. This is important as mixed subplots with multiple chart types require version 1.12.11 or higher.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/mixed-subplots/mixed-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Applying Random Jitter to Data Points in Plotly\nDESCRIPTION: Adds random noise to x and y coordinates to reduce quantization effects and reveal point density better.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nN = len(cars_df)\nscatter.x = scatter.x + np.random.rand(N) * 10\nscatter.y = scatter.y + np.random.rand(N) * 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Candlestick Chart with Datetime Objects in Plotly\nDESCRIPTION: Demonstrates how to create a candlestick chart using Python's datetime objects instead of string dates. This example uses manually created data with explicit datetime objects for the x-axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom datetime import datetime\n\nopen_data = [33.0, 33.3, 33.5, 33.0, 34.1]\nhigh_data = [33.1, 33.3, 33.6, 33.2, 34.8]\nlow_data = [32.7, 32.7, 32.8, 32.6, 32.8]\nclose_data = [33.0, 32.9, 33.3, 33.1, 33.1]\ndates = [datetime(year=2013, month=10, day=10),\n         datetime(year=2013, month=11, day=10),\n         datetime(year=2013, month=12, day=10),\n         datetime(year=2014, month=1, day=10),\n         datetime(year=2014, month=2, day=10)]\n\ntrace = go.Candlestick(x=dates,\n                       open=open_data,\n                       high=high_data,\n                       low=low_data,\n                       close=close_data)\ndata = [trace]\npy.iplot(data, filename='candlestick_datetime')\n```\n\n----------------------------------------\n\nTITLE: Implementing Colorscale for Scatter Plots\nDESCRIPTION: Creates a scatter plot with Viridis colorscale applied to markers, demonstrating color mapping based on values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/colorscales/colorscales.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        y=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n        marker=dict(\n            size=16,\n            cmax=39,\n            cmin=0,\n            color=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n            colorbar=dict(\n                title='Colorbar'\n            ),\n            colorscale='Viridis'\n        ),\n        mode='markers')\n]\n\nfig = go.Figure(data=data)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plots with LaTeX Labels in Plotly Python\nDESCRIPTION: This code creates two scatter plots using Plotly's graph_objs, with LaTeX-formatted names and axis titles. It demonstrates how to incorporate complex mathematical expressions in plot labels and titles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/latex/latex-typesetting.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 4, 9, 16],\n    name=r'$\\alpha_{1c} = 352 \\pm 11 \\text{ km s}^{-1}$'\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0.5, 2, 4.5, 8],\n    name=r'$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$'\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis=dict(\n        title=r'$\\sqrt{(n_\\text{c}(t|{T_\\text{early}}))}$'\n    ),\n    yaxis=dict(\n        title=r'$d, r \\text{ (solar radius)}$'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='latex')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up display configuration and publishes the notebook with custom styling and metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/discrete-frequency/python-Discrete-Frequency.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Discrete-Frequency.ipynb', 'python/discrete-frequency/', 'Discrete Frequency | plotly',\n    'Learn how to perform discrete frequency analysis using Python.',\n    title='Discrete Frequency in Python. | plotly',\n    name='Discrete Frequency',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=3,\n    ipynb= '~notebook_demo/110')\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook with Random Walk Visualizations\nDESCRIPTION: This code snippet sets up the environment for publishing the Jupyter notebook containing the random walk visualizations. It installs the publisher package, imports necessary modules, and calls the publish function with specific parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/random-walk/python-Random-Walk.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Random-Walk.ipynb', 'python/random-walk/', 'Random Walk | plotly',\n    'Learn how to use Python to make a Random Walk',\n    title='Random Walk in Python. | plotly',\n    name='Random Walk',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='statistics', order=10,\n    ipynb= '~notebook_demo/114')\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook Documentation with Plotly Publisher\nDESCRIPTION: This snippet sets up custom styling for the Jupyter notebook and uses the Plotly publisher to publish the notebook as documentation. It includes metadata for the published page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'visualizing-mri-volume-slices.ipynb', 'python/visualizing-mri-volume-slices/', 'Visualizing MRI Volume Slices | plotly',\n    'How to create an plotly animation with slider that cycles through MRI cross-sections of a human brain.',\n    title='Visualizing MRI Volume Slices | plotly',\n    name='Visualizing MRI Volume Slices',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/brain-mri-animation_square.gif',\n    display_as='animations', order=4, ipynb='~notebook_demo/190')\n```\n\n----------------------------------------\n\nTITLE: Variable Name:Value Labels\nDESCRIPTION: Shows how to create a facet grid with variable name:value labels using the mtcars dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmtcars = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv')\n\nfig = ff.create_facet_grid(\n    mtcars,\n    x='mpg',\n    y='wt',\n    facet_col='cyl',\n    facet_col_labels='name',\n    facet_row_labels='name',\n)\npy.iplot(fig, filename='facet - label variable name')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebooks with Plotly Publisher in Python\nDESCRIPTION: This snippet explains how to publish an IPython notebook using the Plotly publisher package. The code installs the publisher via pip, and publishes a notebook with specified metadata such as title, description, language, and display options. The package 'publisher' is a required dependency and must be installed via a git repository URL. Inputs include the source notebook file path, destination path, and publishing options. The output is a published notebook available at the specified path.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'redshift.ipynb', 'python/amazon-redshift/', 'Plot Data From Amazon Redshift',\n    'A tutorial showing how to plot Amazon AWS Redshift data with Plotly.',\n    title = 'Plot Data from Amazon Redshift | plotly',\n    has_thumbnail='false', redirect_from='ipython-notebooks/amazon-redshift/',\n    language='python', page_type='example_index', \n    display_as='databases', order=3,\n    ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmaps with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates generating heatmaps using Cufflinks, specifying parameters like colorscale and filename. Dependencies include Cufflinks and its datagen utility.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ncf.datagen.heatmap(20,20).iplot(kind='heatmap',colorscale='spectral',\n                                filename='cufflinks/simple-heatmap')\n```\n\n----------------------------------------\n\nTITLE: Plotting Lead Comparison Across Sales Representatives\nDESCRIPTION: Visualizes the lead comparison data showing how different sales representatives are performing with their leads based on status distribution.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(lead_comparison, filename='salesforce/lead-owner-status-groupings')\n```\n\n----------------------------------------\n\nTITLE: Plotting Trigger Channel Data\nDESCRIPTION: Extracts and plots the first 1000 samples of the trigger channel (STI 014) as an interactive Plotly visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nd, t = raw[raw.ch_names.index('STI 014'), :]\nplt.plot(d[0,:1000])\npy.iplot_mpl(plt.gcf())\n```\n\n----------------------------------------\n\nTITLE: Processing Single Condition Epochs\nDESCRIPTION: Extracts and processes epochs data for a single condition, demonstrating data shape and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nepochs_data = epochs['aud_l'].get_data()\nprint(epochs_data.shape)\n\nevokeds = [epochs[k].average() for k in event_id]\nfrom mne.viz import plot_topo\nlayout = mne.find_layout(epochs.info)\nplot_topo(evokeds, layout=layout, color=['blue', 'orange']);\n```\n\n----------------------------------------\n\nTITLE: Function to Generate Even Rows of Points in Triangular Grid\nDESCRIPTION: Implements the even_row_pts function to generate points in even rows of the triangulated grid while checking that the input parameter is an even integer.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef even_row_pts(p):#p=2*m\n    if p%2:\n        raise ValueError('p must be an even integer')\n    I=[2*k for k in range (p+1)]\n    return [(i/p,j/p, 1-(i+j)/p) for i in I[::-1] for j in range(p-i, -1, -1)]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly DataShader Integration\nDESCRIPTION: Import core Python libraries, data manipulation libraries (pandas, numpy), scikit-learn for dataset access, and datashader components for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# core\nimport io\nimport base64 \nimport time\n\n# pandas\nimport pandas as pd\n\n# numpy\nimport numpy as np\n\n# scikit learn\nfrom sklearn import datasets\n\n# datashader\nimport datashader as ds\nimport datashader.transfer_functions as tf\nfrom datashader.colors import inferno\n```\n\n----------------------------------------\n\nTITLE: Advanced Bullet Chart Customization\nDESCRIPTION: Demonstrates advanced customization options including legend grouping, marker styling, and layout parameters\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndata = pd.read_json('https://cdn.rawgit.com/plotly/datasets/master/BulletData.json')\n\nfig = ff.create_bullet(\n    data, orientation='v', markers='markers', measures='measures',\n    ranges='ranges', subtitles='subtitle', titles='title',\n    title='lots of kwargs', width=600, showlegend=True,\n    scatter_options={'marker': {'size': 30,\n                                'color': 'rgb(21, 166, 20)',\n                                'symbol': 'hourglass'}}\n    \n)\n\n# group legends\nchart_elements = 6  # 3 grey bars, 2 blue bars, 1 marker\nfor cols, title in enumerate(data['title']):\n    for ele in range(chart_elements):\n        if ele == 0:\n            showlegend = True\n        else:\n            showlegend = False\n        fig['data'][cols * 6 + ele].update(\n            {\n                'legendgroup': '{}'.format(title),\n                'name': title,\n                'showlegend': showlegend\n            }\n        )\n\npy.iplot(fig, filename='bullet chart - custom kwargs')\n```\n\n----------------------------------------\n\nTITLE: Simulating Graph Hover Event\nDESCRIPTION: Demonstrates programmatic triggering of hover event on graph coordinates\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.hover({'xval': 2, 'yval': 8})\n```\n\n----------------------------------------\n\nTITLE: Publishing Box Plot Documentation with Custom Styling\nDESCRIPTION: This code sets up custom styling for documentation, installs the Plotly publisher package, and publishes the box plot notebook as documentation with metadata. It configures fonts, CSS, and document properties for the published page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/box/box.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'box.ipynb', 'python/box-plots/', 'Box Plots | plotly',\n    'How to make Box Plots in Python with Plotly.',\n    title = 'Box Plots | plotly',\n    name = 'Box Plots',\n    has_thumbnail='true', thumbnail='thumbnail/box.jpg', \n    language='python', page_type='example_index',\n    display_as='statistical', order=3,\n    ipynb='~notebook_demo/20')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling in Python\nDESCRIPTION: Sets up custom styling for the notebook and publishes it to the Plotly documentation site using the publisher module. Includes custom fonts, CSS, and metadata for the published notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/igraph_vs_networkx.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'igraph_vs_networkx.ipynb', 'python/igraph-networkx-comparison/', 'Python Network Graphs Comparison | plotly',\n    'Comparing a Network Graph created with igraph to one created with networkx in Python with Plotly. ',\n    name = 'Network Graphs Comparison',\n    thumbnail='thumbnail/networks.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=14,\n    ipynb= '~notebook_demo/222')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Shows how to import the Plotly library and check its installed version. This is useful to ensure you're using the latest version with 'pip install plotly --upgrade'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python Package\nDESCRIPTION: Simple code to check the installed version of Plotly Python package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/scatter-plot-on-maps/scatter-plot-on-map.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation using Python\nDESCRIPTION: This code snippet demonstrates how to publish Plotly documentation using Python. It installs the publisher package, imports necessary modules, and calls the publish function with various parameters to create and publish the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'multiple-axes.ipynb', 'python/multiple-axes/', 'Multiple Axes | Plotly',\n    'How to make a graph with multiple axes in python.',\n    title = 'Python Multiple Axes | Examples | Plotly',\n    name = 'Multiple Axes', has_thumbnail='true', thumbnail='thumbnail/multiple-axes.jpg', \n    language='python',\n    display_as='file_settings', order=14,\n    ipynb='~notebook_demo/270')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook Comparison of WebGL vs SVG\nDESCRIPTION: This code snippet sets up custom CSS for the notebook display and uses the publisher module to publish the notebook. It includes metadata such as the title, description, and language for the published content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/comparewebgl.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'comparewebgl.ipynb', 'python/compare-webgl-svg/', 'Python Comparing WebGL vs SVG | plotly',\n    'Comparing WebGL with Scattergl() to SVG with Scatter() in Python with Plotly.',\n    title = 'Comparing WebGL vs SVG | plotly',\n    name = 'Comparing WebGL vs SVG',\n    language='python')\n```\n\n----------------------------------------\n\nTITLE: Replacing annotation.ref with annotation.xref and annotation.yref in Plotly.js\nDESCRIPTION: Example showing how to update code that uses the deprecated annotation.ref attribute to the recommended annotation.xref and annotation.yref attributes in Plotly.js layout objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\nvar layout = {\n    title: \"Try panning or zooming!\",\n    annotations: [{\n        text: \"Absolutely-positioned annotation\",\n        ref: \"paper\",\n        x: 0.3,\n        y: 0.3,\n        showarrow: false\n    }]\n};\n...\n```\n\nLANGUAGE: javascript\nCODE:\n```\n...\nvar layout = {\n    title: \"Try panning or zooming!\",\n    annotations: [{\n        text: \"Absolutely-positioned annotation\",\n        xref: \"paper\",\n        yref: \"paper\",\n        x: 0.3,\n        y: 0.3,\n        showarrow: false\n    }]\n};\n...\n```\n\n----------------------------------------\n\nTITLE: Publishing Ternary Contour Plot Example to Plotly Documentation\nDESCRIPTION: This snippet sets up the environment for publishing the ternary contour plot example to Plotly's documentation. It includes setting up custom CSS and using the publisher module to publish the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-contour/ternary-contour.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ternary-contour.ipynb', 'python/ternary-contour/', 'Python Ternary Contour Plots | plotly',\n    'How to make Ternary Contour Plots in Python with Plotly.',\n    name = 'Ternary Contour Plots',\n    thumbnail='thumbnail/ternary-contour.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=10,\n    ipynb= '~notebook_demo/40')\n```\n\n----------------------------------------\n\nTITLE: Publishing Ternary Plot Example to Plotly Documentation in Python\nDESCRIPTION: Sets up custom styling for the notebook display and uses Plotly's publisher module to publish the notebook to the Plotly documentation site with appropriate metadata and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary-scatter-contour/ternary-scatter-contour.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ternary-scatter-contour.ipynb', 'python/ternary-scatter-contour/', 'Python Ternary Scatter Overlaid on Contour | plotly',\n    'How to make a scatter plot overlaid on ternary contour in Python with Plotly.',\n    name = 'Ternary Overlay',\n    thumbnail='thumbnail/ternary-scatter-contour.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=11,\n    ipynb= '~notebook_demo/41')\n```\n\n----------------------------------------\n\nTITLE: Importing MNE-Python Package\nDESCRIPTION: Imports the MNE-Python package for processing MEG/EEG data. This code also includes an optional installation command in case MNE is not already installed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport mne  # If this line returns an error, uncomment the following line\n# !easy_install mne --upgrade\n```\n\n----------------------------------------\n\nTITLE: Displaying LaTeX Equations in Jupyter Notebook using Python\nDESCRIPTION: This code shows how to display LaTeX equations in a Jupyter Notebook using Python. It uses the IPython.display module to render mathematical expressions in a visually appealing format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, Math, Latex\n\ndisplay(Math(r'F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly with Required Libraries\nDESCRIPTION: Import statements for required libraries including Plotly, NumPy, Pandas, and SciPy for data manipulation and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Plotly Documentation\nDESCRIPTION: Sets up the documentation styling and publishes the notebook as a Plotly example. Includes custom font loading, CSS styling, and publisher configuration for the documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-integration/python_Numerical_Integration.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Numerical_Integration.ipynb', 'python/numerical-integration/', 'Numerical Integration | plotly',\n    'Learn how to integrate a sequence or list of values numerically',\n    title='Numerical Integration in Python. | plotly',\n    name='Numerical Integration',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=7,\n    ipynb= '~notebook_demo/101')\n```\n\n----------------------------------------\n\nTITLE: Plotting Price Data with iPlot\nDESCRIPTION: Visualizes the historical price data using interactive plotting, displaying price in dollars over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndata.loc[:, :, 'price'].iplot(filename='prices', yTitle='price in $', world_readable=True, asDates=True)\n```\n\n----------------------------------------\n\nTITLE: Reading Projected Density of States Data from VASP Calculation\nDESCRIPTION: Uses pymatgen to load density of states data from a VASP calculation output file (vasprun.xml) and extracts the projected density of states by orbital type.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndosrun = Vasprun(\"./DOS/vasprun.xml\")\nspd_dos = dosrun.complete_dos.get_spd_dos()\n```\n\n----------------------------------------\n\nTITLE: Reading Excel File into Pandas DataFrame in Python\nDESCRIPTION: This code reads data from an Excel file named 'CSCEng.xls' into a pandas DataFrame and displays the column names.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nxl = pd.ExcelFile(\"Data/CSCEng.xls\")\ndfc = xl.parse(\"Sheet1\")\ndfc.columns\n```\n\n----------------------------------------\n\nTITLE: Import Required Libraries\nDESCRIPTION: Importing necessary Python libraries for data analysis and visualization\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\nfrom ipywidgets import widgets\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Geometric Shapes Visualization\nDESCRIPTION: Embeds an interactive Plotly iframe showing basic geometric shapes including vertices, edges, triangles, and tetrahedra.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/alpha-shapes/Plotly-Mesh3d.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML('<iframe src=https://plotly.com/~empet/13475/ width=850 height=350></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version with Python\nDESCRIPTION: Simple version check for the Plotly library installation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Extracting Graph Edges and Attributes in Python\nDESCRIPTION: Retrieves the list of edges, their attributes, and weights from the graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nG.es.attributes()# the edge attributes\n\nG.es[0]\n\nE=[e.tuple for e in G.es]# list of edges\nlen(E)\n\nWeights= map(int, G.es[\"weight\"])\n```\n\n----------------------------------------\n\nTITLE: Getting Help for plotly.io.write_html() Function\nDESCRIPTION: Python code to display the help documentation for the plotly.io.write_html() function, providing details on its parameters and usage for offline plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nhelp(plotly.io.write_html)\n```\n\n----------------------------------------\n\nTITLE: Adding Bleacher Report Logo to Existing Plotly Figure in Python\nDESCRIPTION: This snippet retrieves an existing figure, removes autobinx and autobiny properties, and adds the Bleacher Report logo. It shows how to modify chart properties and add a logo positioned at the bottom of the chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = py.get_figure('https://plotly.com/~Dreamshot/8160/', raw=True)\nfor j in range(len(fig['data'])):\n    del fig['data'][j]['autobinx']\n    del fig['data'][j]['autobiny']\nfig = go.Figure(fig)\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/bleacherreport.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.5, y=-0.35,\n        sizex=0.3, sizey=0.3,\n        xanchor=\"center\", yanchor=\"top\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Top_Earners_BleacherReport')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook as documentation using the publisher module. Includes font loading, custom CSS styling, and configuration for documentation metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/annotations/webgl-text-and-annotations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'webgl-text-and-annotations.ipynb', 'python/webgl-text-and-annotations/', 'WebGL Text and Annotations',\n    'How to add webGL based text labels and annotations to plots in python',\n    title = 'WebGL Text and Annotations | plotly',\n    name = 'WebGL Text and Annotations',\n    has_thumbnail='false', thumbnail='thumbnail/webgl-text-and-annotations.jpg', \n    language='python', \n    page_type='example_index', display_as='style_opt', order=2,\n    ipynb= '~notebook_demo/219', uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Polygon Area Calculation and Visualization\nDESCRIPTION: This snippet imports necessary libraries including Plotly, NumPy, Pandas, and SciPy for polygon area calculations and visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/polygon-area/python_Polygon_Area.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Documentation to Plotly\nDESCRIPTION: Sets up the environment for publishing the notebook as documentation. This includes setting up styling, installing the publisher package, and configuring metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'distplots.ipynb', 'python/distplot/', 'Python Distplots | plotly',\n    'How to make interactive Distplots in Python with Plotly. ',\n    title = 'Python Distplots | plotly',\n    name = 'Distplots',\n    has_thumbnail='true', thumbnail='thumbnail/distplot.jpg', \n    language='python', page_type='example_index', \n    display_as='statistical', order=5,\n    ipynb= '~notebook_demo/23')  \n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Documentation with Plotly Publisher\nDESCRIPTION: Code to style and publish the notebook as documentation on the Plotly website. This includes setting up CSS styling, installing the publisher package, and configuring metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'candlestick-charts.ipynb', 'python/candlestick-charts/', 'Candlestick Charts',\n    'How to make interactive candlestick charts in Python with Plotly. '\n    'Six examples of candlestick charts with Pandas, time series, and yahoo finance data.',\n    title = 'Python Candlestick Charts | plotly',\n    thumbnail='thumbnail/candlestick.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='financial', order=2,\n    ipynb= '~notebook_demo/275')\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Plotly Version in Virtualenv\nDESCRIPTION: Command to install a specific version of Plotly (2.7) within the activated virtual environment, ensuring version compatibility.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n(plotly2.7) $ pip install plotly==2.7\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook as Plotly Documentation\nDESCRIPTION: This code snippet sets up custom CSS for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook as documentation on the Plotly website.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-fitting/python-Peak-Fitting.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Peak-Fitting.ipynb', 'python/peak-fitting/', 'Peak Fitting | plotly',\n    'Learn how to fit to peaks in Python',\n    title='Peak Fitting in Python | plotly',\n    name='Peak Fitting',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=5,\n    ipynb= '~notebook_demo/119')\n```\n\n----------------------------------------\n\nTITLE: Displaying a Presentation with Web Images in Jupyter\nDESCRIPTION: This code renders the previously created presentation with embedded web images in a Jupyter notebook, allowing for interactive viewing of the image-rich presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_2 = url_to_iframe(pres_url_2, True)\nIPython.display.HTML(iframe_2)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Population Pyramid Chart in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to create a basic population pyramid chart using Plotly's go.Bar trace. It uses pre-binned data for men and women across different age groups and sets up the layout for a symmetrical pyramid chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pyramid/pyramid-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nwomen_bins = np.array([-600, -623, -653, -650, -670, -578, -541, -411, -322, -230])\nmen_bins = np.array([600, 623, 653, 650, 670, 578, 541, 360, 312, 170])\n\ny = list(range(0, 100, 10))\n\nlayout = go.Layout(yaxis=go.layout.YAxis(title='Age'),\n                   xaxis=go.layout.XAxis(\n                       range=[-1200, 1200],\n                       tickvals=[-1000, -700, -300, 0, 300, 700, 1000],\n                       ticktext=[1000, 700, 300, 0, 300, 700, 1000],\n                       title='Number'),\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               )]\n\npy.iplot(dict(data=data, layout=layout), filename='EXAMPLES/bar_pyramid')\n```\n\n----------------------------------------\n\nTITLE: Setting Up IPython Display\nDESCRIPTION: Configures IPython display settings and installs required publisher package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'apachespark.ipynb', 'python/apache-spark/', 'Plot Data from Apache Spark', \n    'A tutorial showing how to plot Apache Spark DataFrames with Plotly', \n    title='Plotting Spark DataFrames | Plotly', has_thumbnail='false',\n    language='python', page_type='example_index', display_as='databases', order=2,\n    redirect_from= 'ipython-notebooks/apache-spark/')\n```\n\n----------------------------------------\n\nTITLE: Sample Data Preview\nDESCRIPTION: Display random sample of 3 rows from the dataset\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget_app.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf.sample(3)\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Code Example in IPython\nDESCRIPTION: Shows how to embed the source code view of a Dash application example within an IPython notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/labels/labels.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-figurelabelsplot/code\", width=\"100%\", height=\"500px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Cartesian Coordinates from Barycentric Coordinates\nDESCRIPTION: Lambda function that converts barycentric coordinates to cartesian coordinates relative to a given triangle T.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bezier.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncartesian_coords=lambda w, T: w[0]*T[0]+w[1]*T[1]+w[2]*T[2]\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Sets up custom styling for the notebook documentation and uses a publisher module to publish the notebook as part of the Plotly documentation. This includes metadata such as title, description, and categorization information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\nimport publisher\npublisher.publish(\n    'heatmap-webgl.ipynb', 'python/heatmap-webgl/', 'WebGL based Heatmaps | plotly',\n    'How to make webGL based heatmaps in Python with Plotly.',\n    title = 'Python Heatmaps WebGL | plotly',\n    name = 'WebGL Heatmaps',\n    has_thumbnail='true', thumbnail='thumbnail/heatmap-webgl.jpg', \n    language='python',\n    display_as='scientific', order=4,\n    ipynb= '~notebook_demo/34')\n```\n\n----------------------------------------\n\nTITLE: Setting Jekyll Frontmatter for Plotly R Documentation Page\nDESCRIPTION: Jekyll frontmatter configuration for the Plotly R documentation landing page. Defines the page name, permalink, display settings, description, layout template, and language indicator.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2015-07-30-r-index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Plotly R Graphing Library\npermalink: /r/\ndisplay_as: false\ndescription: Plotly's R graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, and 3D (WebGL based) charts.\nlayout: langindex\nlanguage: r\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Demonstrates how to check the installed version of Plotly to ensure compatibility with the static image export API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\n\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Current Proxy Configuration in Bash\nDESCRIPTION: Displays the current values of HTTP_PROXY and HTTPS_PROXY environment variables to verify if proxy settings are configured. Useful for troubleshooting when you suspect proxy settings may be causing connection issues.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/proxy-configuration.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $HTTP_PROXY\n$ echo $HTTPS_PROXY\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Example in Jupyter Notebook\nDESCRIPTION: This code snippet sets up custom styling for a Jupyter notebook, installs the Plotly publisher package, and publishes the horizontal legend example to the Plotly documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/horizontal-legend/horizontal-legends.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'horizontal-legends.ipynb', 'python/horizontal-legend/', 'Horizontal legend | plotly',\n    'How to add images to charts as background images or logos.',\n    title = 'Horizontal legend | plotly',\n    name = 'Horizontal Legends',\n    has_thumbnail='false', thumbnail='thumbnail/your-tutorial-chart.jpg', \n    language='python', page_type='example_index',\n    display_as='style_opt', order=12,\n    ipynb= '~notebook_demo/94')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling in Python\nDESCRIPTION: This snippet sets up custom styling for IPython notebooks and publishes the documentation for the dropdown menu example. It includes font loading, custom CSS, and uses the Plotly publisher to create the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/controls/dropdowns/dropdown.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'dropdown.ipynb', 'python/dropdowns/', 'Dropdown Menus | plotly',\n    'How to add dropdowns to update Plotly chart attributes in Python.',\n    title='Dropdown Menus | plotly',\n    name='Dropdown Menus',\n    has_thumbnail='true', thumbnail='thumbnail/dropdown.jpg',\n    language='python', page_type='example_index',\n    display_as='controls', order=2, ipynb= '~notebook_demo/85')\n```\n\n----------------------------------------\n\nTITLE: Computing Ribbon Ends for Chord Diagram in Python\nDESCRIPTION: Function that computes the angular coordinates of ribbon ends, which represent the arcs on the ideograms that are connected by ribbons. These coordinates are stored as tuples in a list of lists.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef make_ribbon_ends(mapped_data, ideo_ends,  idx_sort):\n    L=mapped_data.shape[0]\n    ribbon_boundary=np.zeros((L,L+1))\n    for k in range(L):\n        start=ideo_ends[k][0]\n        ribbon_boundary[k][0]=start\n        for j in range(1,L+1):\n            J=idx_sort[k][j-1]\n            ribbon_boundary[k][j]=start+mapped_data[k][J]\n            start=ribbon_boundary[k][j]\n    return [[(ribbon_boundary[k][j],ribbon_boundary[k][j+1] ) for j in range(L)] for k in range(L)]   \n\nribbon_ends=make_ribbon_ends(mapped_data, ideo_ends,  idx_sort)\nprint 'ribbon ends starting from the ideogram[2]\\n', ribbon_ends[2]\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: This code sets up custom fonts and styling for the documentation notebook, installs the Plotly publisher package, and publishes the notebook as documentation with metadata like title, description, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'violin.ipynb', 'python/violin/', 'Violin Plots',\n    'How to make violin plots in Python with Plotly.',\n    title = 'Violin Plots | Plotly',\n    has_thumbnail='true', \n    thumbnail='thumbnail/violin.jpg', \n    language='python', \n    display_as='statistical', \n    order=12, \n    ipynb='~notebook_demo/201')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook Documentation with Custom Styling\nDESCRIPTION: This code configures custom styling for the notebook documentation by loading Google fonts and Plotly's CSS. It then uses the publisher module to publish the notebook as a user guide with appropriate metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/multiple-trace-streaming.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'multiple-trace-streaming', 'python/multiple-trace-streaming//', 'Streaming to Two Traces',\n    'Streaming in Plotly with Python', name=\"Streaming to Multiple Traces\",\n    title = 'Streaming to Multiple Traces with Plotly',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false',\n    ipynb= '~notebook_demo/81') \n```\n\n----------------------------------------\n\nTITLE: Importing Plotly and Scientific Libraries in Python\nDESCRIPTION: This snippet demonstrates how to import Plotly and other scientific libraries like NumPy, Pandas, and SciPy for data visualization and analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/frequency-counts/python-Frequency-Counts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Creating Grid for Online Animation\nDESCRIPTION: Example of creating a grid with columns for an animated plot using Plotly's grid objects. Demonstrates setting up data columns that will be referenced in the animation frames.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/intro-to-animations/intro-to-animations.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.grid_objs import Grid, Column\n\nimport time\n\ncolumn_1 = Column([0.5], 'x')\ncolumn_2 = Column([0.5], 'y')\ncolumn_3 = Column([1.5], 'x2')\ncolumn_4 = Column([1.5], 'y2')\n\ngrid = Grid([column_1, column_2, column_3, column_4])\npy.grid_ops.upload(grid, 'ping_pong_grid'+str(time.time()), auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Plotting Stacked Opportunity Histograms with Plotly\nDESCRIPTION: Visualizes the stacked histograms of opportunity amounts by owner using the previously created figure object and displays it in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig, filename='salesforce/opportunities-histogram')\n```\n\n----------------------------------------\n\nTITLE: Choropleth Map with Aggregates using Plotly in Python\nDESCRIPTION: This example demonstrates how to create a choropleth map with aggregated data using Plotly in Python. It includes a dropdown menu to switch between different aggregation functions applied to world happiness data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/aggregates/aggregations.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\nimport pandas as pd\n\noff.init_notebook_mode(connected=False)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/worldhappiness.csv\")\n\naggs = [\"count\",\"sum\",\"avg\",\"median\",\"mode\",\"rms\",\"stddev\",\"min\",\"max\",\"first\",\"last\"]\n\nagg = []\nagg_func = []\nfor i in range(0, len(aggs)):\n    agg = dict(\n        args=['transforms[0].aggregations[0].func', aggs[i]],\n        label=aggs[i],\n        method='restyle'\n    )\n    agg_func.append(agg)\n\ndata = [dict(\n  type = 'choropleth',\n  locationmode = 'country names',\n  locations = df['Country'],\n  z = df['HappinessScore'],\n  autocolorscale = False,\n  colorscale = 'Portland',\n  reversescale = True,\n  transforms = [dict(\n    type = 'aggregate',\n    groups = df['Country'],\n    aggregations = [dict(\n        target = 'z', func = 'sum', enabled = True)\n    ]\n  )]\n)]\n\nlayout = dict(\n  title = '<b>Plotly Aggregations</b><br>use dropdown to change aggregation',\n  xaxis = dict(title = 'Subject'),\n  yaxis = dict(title = 'Score', range = [0,22]),\n  height = 600,\n  width = 900,\n  updatemenus = [dict(\n        x = 0.85,\n        y = 1.15,\n        xref = 'paper',\n        yref = 'paper',\n        yanchor = 'top',\n        active = 1,\n        showactive = False,\n        buttons = agg_func\n  )]\n)\n\noff.iplot({'data': data,'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying FigureWidget Help (Python)\nDESCRIPTION: This snippet utilizes the `help()` function in Python to display the documentation and available methods for the `go.FigureWidget` class from the Plotly library. It provides information about the class's attributes, methods, and usage, aiding in understanding its functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/selection-events-figure-widget.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Plotting Histogram\nDESCRIPTION: Creates an interactive histogram plot using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(data, filename=\"spark/less_2_hour_rides\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for CartoDB and Plotly Integration in Python\nDESCRIPTION: This snippet imports the necessary libraries for working with CartoDB data and creating Plotly visualizations. It includes pandas for data manipulation, plotly for creating interactive plots, and matplotlib for inline plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cartodb.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pylab inline\nimport pandas as pd\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\nimport plotly.tools as tls\n```\n\n----------------------------------------\n\nTITLE: Adding Bar Chart to FigureWidget\nDESCRIPTION: Adds a bar chart trace to an existing FigureWidget. This shows how multiple visualization types can be combined in a single FigureWidget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf.add_bar(y=[1, 4, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Configuring Splom Trace for Diabetes Dataset\nDESCRIPTION: Creates a Scatterplot Matrix (SPLOM) trace with all 8 diagnostic measures from the diabetes dataset, applying the custom colorscale and formatting to visualize relationships between variables.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntraced = go.Splom(dimensions=[dict(label='Pregnancies', values=dfd['Pregnancies']),\n                              dict(label='Glucose', values=dfd['Glucose']),\n                              dict(label='BloodPressure', values=dfd['BloodPressure']),\n                              dict(label='SkinThickness', values=dfd['SkinThickness']),\n                              dict(label='Insulin', values=dfd['Insulin']),\n                              dict(label='BMI', values=dfd['BMI']),\n                              dict(label='DiabPedigreeFun', values=dfd['DiabetesPedigreeFunction']),\n                              dict(label='Age', values=dfd['Age'])],\n                  marker=dict(color=color_vals,\n                              size=5,\n                              colorscale=pl_colorscaled,\n                              line=dict(width=0.5,\n                                        color='rgb(230,230,230)') ),\n                  text=textd,\n                  diagonal=dict(visible=False))\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook and Setting Display Options\nDESCRIPTION: This code snippet sets up display options for the notebook and publishes it using a custom publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'tree-plot.ipynb', 'python/tree-plots/', 'Python Tree-plots | plotly',\n    'How to make interactive tree-plot in Python with Plotly. '\n    'An examples of a tree-plot in Plotly.',\n    title = 'Python Tree-plots | plotly',\n    name = 'Tree-plots',\n    thumbnail='thumbnail/treeplot.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='statistical', order=10.5,\n    ipynb= '~notebook_demo/28')\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Plotly in Python\nDESCRIPTION: This snippet uses Plotly tools to create a 3x2 subplot figure for visualizing the sampled parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfig4 = tls.make_subplots(3, 2)\n```\n\n----------------------------------------\n\nTITLE: Publishing Heatmap Documentation in Python with Plotly Publisher\nDESCRIPTION: Demonstrates how to set up custom styling and publish the heatmap documentation notebook using the Plotly publisher. Includes customization for fonts, CSS, and metadata for publication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'heatmaps.ipynb', ' python/heatmaps/', 'Heatmaps | plotly',\n    'How to make Heatmaps in Python with Plotly.',\n    title = 'Python Heatmaps | plotly',\n    name = 'Heatmaps',\n    has_thumbnail='true', thumbnail='thumbnail/heatmap.jpg', \n    language='python', page_type='example_index',\n    display_as='scientific',order=3,\n    ipynb= '~notebook_demo/33', redirect_from='python/heatmap/')  \n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram Contour Plot with Histogram Subplots\nDESCRIPTION: Demonstrates how to create a 2D density plot with histogram subplots using Plotly's figure factory. This example generates random data points, applies a custom colorscale, and displays the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/density-plots/density-plots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\n\nt = np.linspace(-1, 1.2, 2000)\nx = (t**3) + (0.3 * np.random.randn(2000))\ny = (t**6) + (0.3 * np.random.randn(2000))\n\ncolorscale = ['#7A4579', '#D56073', 'rgb(236,158,105)', (1, 1, 0.2), (0.98,0.98,0.98)]\n\nfig = ff.create_2d_density(\n    x, y, colorscale=colorscale,\n    hist_color='rgb(255, 237, 222)', point_size=3\n)\n\npy.iplot(fig, filename='histogram_subplots')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly. It's important to ensure you have version 1.12.2 or higher for Gantt chart functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Code to display custom styling for the notebook and publish it to the Plotly documentation site. This includes loading custom fonts, CSS, and using the publisher module to upload the notebook with appropriate metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-subplot/3d-subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-subplots.ipynb', 'python/3d-subplots/', 'Python 3D Subplots | plotly',\n    '3D Subplots in Plotly',\n    title= '3D Subplots in Python | plotly',\n    name = '3D Subplots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-subplots.jpg', \n    language='python', \n    display_as='3d_charts', order=0.104,\n    ipynb= '~notebook_demo/75')\n```\n\n----------------------------------------\n\nTITLE: Embedding Plotly Graph\nDESCRIPTION: Demonstrates how to embed an existing Plotly graph using the tls.embed function with username and graph ID\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Embed Plotly graph in notebook\n#   Quartz is username of the graph's maker,\n#   7 is the graph's unique id number\ntls.embed('Quartz', '7')\n\n# Or any of:\n# tls.embed('Quartz', 7)\n# tls.embed('https://plotly.com/~Quartz/7')\n```\n\n----------------------------------------\n\nTITLE: Using MNE's Interactive Data Browser\nDESCRIPTION: Demonstrates MNE-Python's built-in interactive data browser for visualizing the raw data with a simple plot method call.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nraw.plot();\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration\nDESCRIPTION: Sets up display preferences and publishes the notebook with metadata for Plotly documentation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/filled-area-animation/filled-area-animation.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'filled-area-animation.ipynb', 'python/filled-area-animation/', 'Filled-Area Animation | plotly',\n    'How to make an animated filled-area plot with apple stock data in Python.',\n    title='Filled-Area Animation | plotly',\n    name='Filled-Area Animation',\n    language='python',\n    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/apple_stock_animation.gif',\n    display_as='animations', ipynb= '~notebook_demo/128', order=3)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's important to ensure you have version 1.9.12 or higher for pie chart functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Delta to Theta Transfer Function\nDESCRIPTION: Constructs the inverse transfer function between steer angle and roll angle by swapping numerator and denominator, representing how roll angle affects steering.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndelta_theta = cn.TransferFunction(theta_delta.den, theta_delta.num)\ndelta_theta\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation and Styling\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using the publisher package. Includes font loading and CSS customization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/surface-subplots.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'surface-subplots.ipynb', 'python/demo/surface-subplots//', 'Surface Subplot Demo',\n    'Surface Subplot Demo',\n    title = 'Surface Subplot Demo',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Accessing FigureWidget Help Documentation\nDESCRIPTION: Displays the help documentation for the Plotly FigureWidget class.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Disk Surface Triangulation\nDESCRIPTION: Creates a triangulated surface of z=sin(-xy) over a unit disk using polar coordinates and Delaunay triangulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nn=12 # number of radii\nh=1.0/(n-1)\nr = np.linspace(h, 1.0, n)\ntheta= np.linspace(0, 2*np.pi, 36)\n\nr,theta=np.meshgrid(r,theta)\nr=r.flatten()\ntheta=theta.flatten()\n\n#Convert polar coordinates to cartesian coordinates (x,y)\nx=r*np.cos(theta)\ny=r*np.sin(theta)\nx=np.append(x, 0)\ny=np.append(y,0)\nz = np.sin(-x*y) \n\npoints2D=np.vstack([x,y]).T\ntri=Delaunay(points2D)\n```\n\n----------------------------------------\n\nTITLE: Defining Style Function for Plotly Figures in Python\nDESCRIPTION: This function adds styling to a Plotly figure, setting grid properties, background colors, and legend visibility. It's used to improve the visual appearance of the parameter plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef add_style(fig):\n    for i in fig['layout'].keys():\n        fig['layout'][i]['zeroline'] = False\n        fig['layout'][i]['showgrid'] = True\n        fig['layout'][i]['gridcolor'] = 'rgb(255, 255, 255)'\n    fig['layout']['paper_bgcolor'] = 'rgb(255, 255, 255)'\n    fig['layout']['plot_bgcolor'] = 'rgba(204, 204, 204, 0.5)'\n    fig['layout']['showlegend']=False\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Violin Plot in Python\nDESCRIPTION: This code creates a basic violin plot using Plotly with data from a CSV file. It displays the distribution of total bill values with box plot overlay and a visible mean line.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\")\n\nfig = {\n    \"data\": [{\n        \"type\": 'violin',\n        \"y\": df['total_bill'],\n        \"box\": {\n            \"visible\": True\n        },\n        \"line\": {\n            \"color\": 'black'\n        },\n        \"meanline\": {\n            \"visible\": True\n        },\n        \"fillcolor\": '#8dd3c7',\n        \"opacity\": 0.6,\n        \"x0\": 'Total Bill'\n    }],\n    \"layout\" : {\n        \"title\": \"\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\n\npy.iplot(fig, filename = 'violin/basic', validate = False)\n```\n\n----------------------------------------\n\nTITLE: Plotly Schema Modification and Export\nDESCRIPTION: Modifies Plotly schema by removing specific attributes and reordering keys, then exports the modified schema to a JSON file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndel schema[\"traces\"][\"area\"]\ndel schema[\"traces\"][\"scatter\"][\"attributes\"][\"r\"]\ndel schema[\"traces\"][\"scatter\"][\"attributes\"][\"t\"]\ndel schema[\"traces\"][\"bar\"][\"attributes\"][\"r\"]\ndel schema[\"traces\"][\"bar\"][\"attributes\"][\"t\"]\ndel schema[\"layout\"][\"layoutAttributes\"][\"radialaxis\"]\ndel schema[\"layout\"][\"layoutAttributes\"][\"angularaxis\"]\ndel schema[\"layout\"][\"layoutAttributes\"][\"direction\"]\ndel schema[\"layout\"][\"layoutAttributes\"][\"orientation\"]\n\ndef reorder_keys(parent, target, order):\n    original = parent[target]\n    parent[target] = {}\n    for k in order:\n        if k in original:\n            parent[target][k] = original[k]\n    for k in original.keys():\n        if k not in parent[target]:\n            parent[target][k] = original[k]\n            print(\"missing key in %s: %s\" % (target, k))\n\nreorder_keys(schema, \"traces\", orders[\"traces\"])\nreorder_keys(schema[\"layout\"], \"layoutAttributes\", orders[\"layout\"])\n\nfor trace in schema[\"traces\"].values():\n    reorder_keys(trace, \"attributes\", orders[\"trace_attr_order\"])\n    \nimport re\n\ndef recurse(node):\n    try:\n        for key, value in node.items():\n            if key == \"description\":\n                node[key] = value.replace(\"*\",\"`\")\n            else:recurse(value)\n    except:\n        if key == \"description\":\n            node[key] = value.replace(\"*\",\"`\")\n\nrecurse(schema)\n\njson.dump(schema, open('plotschema.json', 'w'), indent=2)\n```\n\n----------------------------------------\n\nTITLE: Publishing Linear Fit Documentation\nDESCRIPTION: Sets up documentation styling and publishes the notebook as documentation using the publisher package. Includes font loading and custom CSS for proper display.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/linear-fit/linear-fits.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'linear-fits.ipynb', 'python/linear-fits/', 'Linear Fit',\n    'Create a linear fit / regression in Python and add a line of best fit to your chart.',\n    title = 'Linear Fit',\n    name = 'Linear Fit',\n    has_thumbnail='true', thumbnail='thumbnail/linear_fit.jpg', \n    language='python', page_type='example_index',\n    display_as='statistics', order=10,\n    ipynb= '~notebook_demo/139')\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dash Documentation\nDESCRIPTION: YAML configuration block that defines metadata and display settings for a Dash documentation page. Includes permalink, description, layout settings, and page categorization parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/2020-08-21-dash_apps.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermalink: https://dash.plotly.com/?/\ndescription: Analytical Apps with Dash\nname: Analytical Apps with Dash\nthumbnail: thumbnail/dash_apps.png\nlayout: base\npage_type: example_index\nlanguage: plotly_js\ndisplay_as: file_settings\norder: 5\nsitemap: false\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling\nDESCRIPTION: Code for publishing the notebook with custom styling and metadata to the Plotly documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    's7_streaming.ipynb', 'python/intro_streaming//', 'Getting Started with Plotly Streaming',\n    'Getting Started with Plotly Streaming',\n    title = 'Getting Started with Plotly Streaming',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Customizing Funnelarea Plot Markers and Text in Plotly\nDESCRIPTION: Example showing how to customize a funnel area chart with custom colors, line properties, text fonts, and opacity settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\n\ntrace = go.Funnelarea(\n      values = [5, 4, 3, 2, 1], text = [\"The 1st\",\"The 2nd\", \"The 3rd\", \"The 4th\", \"The 5th\"],\n      marker = {\"colors\": [\"deepskyblue\", \"lightsalmon\", \"tan\", \"teal\", \"silver\"], \n                \"line\": {\"color\": [\"wheat\", \"wheat\", \"blue\", \"wheat\", \"wheat\"], \"width\": [0, 1, 5, 0, 4]}},\n      textfont = {\"family\": \"Old Standard TT, serif\", \"size\": 13, \"color\": \"black\"}, opacity = 0.65)\n\nlayout = go.Layout(margin = {\"l\": 200, \"r\": 200})\n\npy.iplot(go.Figure([trace], layout), filename = \"stylefunnelarea\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Notebook with Custom Styling\nDESCRIPTION: This snippet sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook with specific metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/average-multiple-curves/python_Average_Multiple_Curves.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Average_Multiple_Curves.ipynb', 'python/average_multiple_curves/', 'Average Multiple Curves | plotly',\n    'Learn how to average the values of multiple curves with Python.',\n    title='Average Multiple Curves in Python | plotly',\n    name='Average Multiple Curves',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=9,\n    ipynb= '~notebook_demo/107')\n```\n\n----------------------------------------\n\nTITLE: Publishing Splom Visualization to Plotly Documentation\nDESCRIPTION: Sets up styling for IPython notebook display and publishes the notebook as part of Plotly's official documentation using the publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'splom.ipynb', 'python/splom/', 'Scatterplot Matrix',\n    'How to make scatterplot matrices or sploms natively in Python with Plotly.',\n    title = 'Python Scatterplot Matrix | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/splom_image.jpg',\n    redirect_from ='python/scatterplot-matrix/',\n    language='python',\n    display_as='statistical', order=10.2,\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Publishing Carpet Contour Plot Documentation with Plotly Publisher\nDESCRIPTION: Code for publishing the carpet contour plot documentation to the Plotly website. It sets up display properties, metadata, and publishing parameters for the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-contour/contourcarpet.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'contourcarpet.ipynb', 'python/carpet-contour/', 'Carpet Contour Plot',\n    'How to make carpet contour plots in Python with Plotly.',\n    title = 'Carpet Contour Plots | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/contourcarpet.jpg', \n    language='python', \n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='scientific', order=27,\n    ipynb= '~notebook_demo/145')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: A utility script for publishing Plotly documentation with custom styling. It sets up fonts, CSS, and metadata for the notebook before publishing it to the Plotly documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/streamline/streamline.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'streamline.ipynb', 'python/streamline-plots/', 'Python Streamline Plots | plotly',\n    'How to make a streamline plot in Python. A streamline plot displays vector field data. ',\n    title = 'Python Streamline Plots | plotly',\n    name = 'Streamline Plots',\n    has_thumbnail='true', thumbnail='thumbnail/streamline.jpg', \n    language='python', \n    display_as='scientific', order=13,\n    ipynb= '~notebook_demo/43')\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for Republican Candidates Scoreboard in Python\nDESCRIPTION: Sets up the data for the August 14 scoreboard, including rankings for each candidate across different factors. The data is organized as a 2D array where rows represent factors and columns represent candidates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntab_vals14=[[1,2,3,4,5,6,6,8,9,9,9,12,13,13,13,13],\n          [1,7,5,12,5,4,12,7,2,3,12,7,7,12,7,12],\n          [4,7,2,1,10,5,6,7,9,12,3,14,12,11,15,16],\n          [2,9,4,1,3,8,10,11,6,5,6,14,14,12,14,13],\n          [1,3,4,14,8,2,13,12,7,6,9,16,5,10,12,15]]\n\ncandidates=['Bush', 'Rubio', 'Walker', 'Trump', 'Kasich', 'Cruz', 'Fiorina', 'Huckabee', 'Paul']+\\\n ['Christie', 'Carson', 'Santorum', 'Perry', 'Jindal', 'Graham', 'Pataki']\n\nfactors=['Prediction Market', 'NationalEndorsements', 'Iowa Polls']+\\\n['New Hampshire Polls', 'Money Raised']\n```\n\n----------------------------------------\n\nTITLE: Streaming Real-Time Data to Plotly in Python\nDESCRIPTION: Demonstrates how to continuously send time-series data to a Plotly stream for real-time updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/python_streaming.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import module keep track and format current time\nimport datetime \nimport time   \n \ni = 0    # a counter\nk = 5    # some shape parameter\n\n# Delay start of stream by 5 sec (time to switch tabs)\ntime.sleep(5) \n\nwhile True:\n    \n    # Current time on x-axis, random numbers on y-axis\n    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')\n    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0] \n        \n    # Send data to your plot\n    s.write(dict(x=x, y=y))  \n    \n    #     Write numbers to stream to append current data on plot,\n    #     write lists to overwrite existing data on plot\n            \n    time.sleep(1)  # plot a point every second    \n# Close the stream when done plotting\ns.close() \n```\n\n----------------------------------------\n\nTITLE: Displaying an External Image in the Notebook\nDESCRIPTION: Python code that uses IPython's Image function to display an external image from an imgur URL in the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nImage(url=\"http://i.imgur.com/nUVihzx.png\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltips for Contour in Plotly\nDESCRIPTION: Sets hoverinfo to 'skip' to prevent tooltips from appearing when hovering over the contour trace.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncontour.hoverinfo = 'skip'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Salesforce API in Python\nDESCRIPTION: Demonstrates how to authenticate with Salesforce using credentials stored in a text file. Requires username, password, and security token for authentication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open('salesforce_login.txt') as f:\n    username, password, token = [x.strip(\"\\n\") for x in f.readlines()]\nsf = Salesforce(username=username, password=password, security_token=token)\n```\n\n----------------------------------------\n\nTITLE: Generating Large Dataset from Iris Data\nDESCRIPTION: Creates a large dataset by duplicating the Iris dataset with random noise, resulting in 1,050,000 rows of data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnum_copies = 7000 # 1,050,000 rows\n\niris_data = datasets.load_iris()\nfeature_names = [name.replace(' (cm)', '').replace(' ', '_') for name in iris_data.feature_names]\niris_df_orig = pd.DataFrame(iris_data.data, columns=feature_names)\ntarget_orig = iris_data.target + 1\n\n# frame of features\niris_df = pd.concat(\n    np.random.normal(scale=0.2, size=iris_df_orig.shape) + iris_df_orig for i in range(num_copies)\n).reset_index(drop=True)\n\n# array of targets\ntarget = [t for i in range(num_copies) for t in target_orig]\n\n# dataframe that includes target as categorical\niris_target_df = pd.concat([iris_df, pd.Series(target, name='target', dtype='category')], axis=1)\n\niris_df.describe()\n```\n\n----------------------------------------\n\nTITLE: Publishing Tutorial with Custom Styling\nDESCRIPTION: Sets up custom CSS, installs the publisher package, and publishes the notebook with metadata for the Plotly documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'cars-exploration.ipynb', 'python/cars-exploration/', 'Car Exploration with go.FigureWidget, Case Study',\n    'Use Plotly FigureWidget with hover callbacks and slider widgets',\n    title = 'Car Exploration with Hover Events',\n    name = 'Car Exploration with Hover Events',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-cars.gif', \n    language='python',\n    display_as='chart_events', order=26,\n    ipynb= '~notebook_demo/242')\n```\n\n----------------------------------------\n\nTITLE: IPython Notebook Configuration File Path for PySpark\nDESCRIPTION: The path to the IPython notebook configuration file that needs to be edited to avoid port conflicts with Spark/Hadoop services.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n~/.ipython/profile_pyspark/ipython_notebook_config.py\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This snippet demonstrates how to publish Plotly documentation with custom styling. It includes setting up custom fonts, CSS, and using the publisher module to publish the notebook as documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-parametric/3d-parametric.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-parametric.ipynb', 'python/3d-parametric-plots/', '3D Parametric Plots | plotly',\n    'How to 3D Parameteric Plots in Python',\n    title= '3D Parametric Plots in Python | plotly',\n    name = 'Parametric Plots',\n    has_thumbnail='true', thumbnail='thumbnail/parametric.jpg', \n    language='python',\n    display_as='3d_charts', order=9,\n    ipynb= '~notebook_demo/69')\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Styling for IPython Notebook in Python\nDESCRIPTION: This code sets up custom styling for an IPython notebook by adding custom fonts and CSS. It also installs and uses a publisher package to publish the notebook content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-cone/cones.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'cones.ipynb', 'python/cone-plot/', '3D Cone Plots',\n    'How to make 3D Cone plots in Python with Plotly.',\n    title = '3D Cone Plots | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/3dcone.png',\n    language='python',\n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='3d_charts', order=20, ipynb='~notebook_demo/206',\n    redirect_from='python/3d-cone/',\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Publishing Ternary Plot Documentation to Plotly\nDESCRIPTION: Code for publishing the ternary plot documentation to the Plotly website. It configures custom CSS styles, installs the publisher package, and defines metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'ternary.ipynb', 'python/ternary-plots/', 'Python Ternary Plots | plotly',\n    'How to make Ternary plots in Python with Plotly.',\n    name = 'Ternary Plots',\n    thumbnail='thumbnail/ternary.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='scientific', order=9,\n    ipynb= '~notebook_demo/39')  \n```\n\n----------------------------------------\n\nTITLE: Parse Tesla Supercharger Locations\nDESCRIPTION: Parses the retrieved HTML to extract location data including latitude and longitude for each supercharger station.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsupercharger_locations = {}\nparams_for_locations = ['latitude\":\"', 'longitude\":\"']\nlocation_param = 'location_id\":\"'\n\nwhile True:\n    # add address line to the dictionary\n    index = r_copy.find(location_param)\n    if index == -1:\n        break\n    index += len(location_param)\n\n    index_end = index\n    while r_copy[index_end] != '\"':\n        index_end += 1\n    address_line_1 = r_copy[index:index_end]\n    address_line_1 = str(address_line_1)\n    supercharger_locations[address_line_1] = {}\n\n    for param in params_for_locations:\n        index = r_copy.find(param)\n        if index == -1:\n            break\n        index += len(param)\n\n        index_end = index\n        while r_copy[index_end] != '\"':\n            index_end += 1\n        supercharger_locations[address_line_1][param[0:-3]] = r_copy[index:index_end]\n\n    r_copy = r_copy[index_end:len(r.text)]  # slice off the traversed code\n\nall_keys = supercharger_locations.keys()\n```\n\n----------------------------------------\n\nTITLE: Documentation Setup and Publishing\nDESCRIPTION: Sets up custom styling for documentation and publishes the notebook using Plotly's publisher tool.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'tesla-supercharging-stations.ipynb', 'python/tesla-supercharging-stations/', 'Python Tesla Supercharging Stations | Examples | Plotly',\n    'How to plot car-travel routes between USA and Canada Telsa Supercharging Stations in Python.',\n    title = 'Tesla Supercharging Stations | Plotly',\n    name = 'Tesla Supercharging Stations',\n    has_thumbnail='true', thumbnail='thumbnail/tesla-stations.jpg',\n    language='python',\n    display_as='maps', order=10,\n    ipynb= '~notebook_demo/124')\n```\n\n----------------------------------------\n\nTITLE: Importing Colorlover and IPython Display\nDESCRIPTION: Initial import of colorlover library and IPython display module for rendering color scales and HTML output\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/color.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport colorlover as cl\nfrom IPython.display import HTML\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Waterfall Chart Documentation\nDESCRIPTION: This code snippet is used to publish the waterfall chart documentation to Plotly's documentation website. It sets up custom CSS, installs the publisher package, and calls the publish function with specific metadata for the waterfall charts tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href= \"//fonts.googleapis.com/css?family= Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel= \"stylesheet\" type= \"text/css\" />'))\ndisplay(HTML('<link rel= \"stylesheet\" type= \"text/css\" href= \"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'waterfall-charts.ipynb', 'python/waterfall-charts/', 'Waterfall Charts',\n    'How to make waterfall plots in Python with Plotly.',\n    title= 'Python Waterfall Chart | Plotly',\n    has_thumbnail= 'true', thumbnail= 'thumbnail/waterfall-charts.jpg',\n    language= 'python',\n    # page_type= 'example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as= 'basic', order= 6.2, ipynb= '/~notebook_demo/276',uses_plotly_offline= True)\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Scatter Traces for Plotly in Python\nDESCRIPTION: Creates three more scatter trace dictionaries for Plotly, representing number of transactions, output volume, and cost per transaction over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntrace4=dict(type='scatter',\n            x=df['Date'],\n            y=df['Number-transactions'],\n            xaxis='x1',\n            yaxis='y1',\n            mode='lines',\n            line=dict(width=2, color='#af7bbd'),\n            name='nr-transac')\n\ntrace5=dict(type='scatter',\n            x=df['Date'],\n            y=df['Output-volume(BTC)'],\n            xaxis='x2',\n            yaxis='y2',\n            mode='lines',\n            line=dict(width=2, color='#b04553'),\n            name='ouput-vol')\n\ntrace6=dict(type='scatter',\n            x=df['Date'],\n            y=  df['Cost-per-trans-USD'],\n            xaxis='x3',\n            yaxis='y3',\n            mode='lines',\n            line=dict(width=2, color='#9748a1'),\n            name='cost-transac')\n```\n\n----------------------------------------\n\nTITLE: Indexing Gantt Chart by String Variable in Plotly Python\nDESCRIPTION: This snippet demonstrates creating a Gantt chart indexed by a string variable (Resource). It uses custom colors for each resource and reverses the color order.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-01', Resource='Apple'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15', Resource='Grape'),\n      dict(Task=\"Job C\", Start='2009-04-20', Finish='2009-09-30', Resource='Banana')]\n\ncolors = ['#7a0504', (0.2, 0.7, 0.3), 'rgb(210, 60, 180)']\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', reverse_colors=True, show_colorbar=True)\npy.iplot(fig, filename='gantt-string-variable', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Widgets\nDESCRIPTION: Defines IPython widgets for filtering data including month slider, date checkbox, airline textbox, and origin airport dropdown. Also creates an empty graph widget.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmonth = widgets.FloatSlider(\n    value=1.0,\n    min=1.0,\n    max=12.0,\n    step=1.0,\n    description='Month:',\n    continuous_update = False\n)\n\nuse_date = widgets.Checkbox(\n    description='Date: ',\n    value=True,\n)\n\ncontainer = widgets.HBox(children=[use_date, month] )\n\ntextbox = widgets.Text(\n    description='Airline:   ',\n    value='Delta',\n)\n\norigin = widgets.Dropdown(\n    options=list(df['origin'].unique()),\n    value='LGA',\n    description='Origin Airport:',\n)\n\n\n### Assign an emptry graph widget with two traces\n\ng = GraphWidget('https://plotly.com/~kevintest/1192/')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Publisher Module\nDESCRIPTION: This code snippet demonstrates how to set up custom styling for the notebook and publish the Plotly documentation using the publisher module. It configures metadata like title, description, thumbnail and category information for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-clusters/3d-clusters.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    '3d-clusters.ipynb', 'python/3d-point-clustering/', 'Python 3D Clustering | plotly',\n    'How to cluster points in 3d with alpha shapes in plotly and Python',\n    title= '3D Point Clustering in Python | plotly',\n    name = '3d Clustering',\n    has_thumbnail='true', thumbnail='thumbnail/3d-clusters.jpg', \n    language='python', \n    display_as='3d_charts', order=14,\n    ipynb= '~notebook_demo/74')\n```\n\n----------------------------------------\n\nTITLE: Saving Scatter Matrix Plot URL for Report Generation\nDESCRIPTION: This code saves the scatter matrix visualization to Plotly's server and stores the URL for later use in the HTML report. The plot is configured with specific dimensions and is not automatically opened in the browser.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsecond_plot_url = py.plot(fig, height=1000, width=1000, auto_open=False,\\\n                          filename='Major technology and CPG stock prices in 2014 - scatter matrix')\nprint second_plot_url\n```\n\n----------------------------------------\n\nTITLE: Replacing zauto, zmin, zmax with cauto, cmin, cmax in Plotly.js surface traces\nDESCRIPTION: Example showing how to update code that uses the deprecated zauto, zmin, and zmax attributes to the recommended cauto, cmin, and cmax attributes for color scaling in Plotly.js surface traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    z: [\n        [1, 20, 30, 50],\n        [20, 1, 60, 80],\n        [30, 60, 1, 100],\n        [50, 80, 100, 1]\n    ],\n    type: 'surface',\n    zauto: false,\n    zmin: 0,\n    zmax: 100\n}];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    z: [\n        [1, 20, 30, 50],\n        [20, 1, 60, 80],\n        [30, 60, 1, 100],\n        [50, 80, 100, 1]\n    ],\n    type: 'surface',\n    cauto: false,\n    cmin: 0,\n    cmax: 100\n}];\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots with Matplotlib\nDESCRIPTION: This code snippet generates a matplotlib figure with three subplots, each displaying data from a different trace in `my_data`. It iterates through the first three elements of the `my_data` list, plotting the 'x' and 'y' values in each subplot. Finally, it converts and displays the matplotlib figure to Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig1 = plt.figure()\n\nplt.subplot(311)\nplt.plot(my_data[0]['x'], my_data[0]['y'])\nplt.subplot(312)\nplt.plot(my_data[1]['x'], my_data[1]['y'])\nplt.subplot(313)\nplt.plot(my_data[2]['x'], my_data[2]['y'])\n\npy.iplot_mpl(fig1, strip_style = True)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Network Graph Source Code in IPython\nDESCRIPTION: Embeds the source code for a Dash-based network graph application in an IPython notebook using an IFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/networkx.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-networkplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Displaying FigureWidget Help Documentation\nDESCRIPTION: Shows the help documentation for the FigureWidget class. This provides access to the complete API reference for FigureWidget objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.FigureWidget)\n```\n\n----------------------------------------\n\nTITLE: Printing a Plotly Figure\nDESCRIPTION: This code snippet prints a Plotly figure object. The output typically shows the figure's data and layout structure in JSON format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nggplot #print it\n```\n\n----------------------------------------\n\nTITLE: Printing Plotly Figure Object in Python\nDESCRIPTION: Shows how to print a Plotly Figure object in a notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint(fig)  # print the figure object in notebook\n```\n\n----------------------------------------\n\nTITLE: Publishing Example to Plotly Documentation with Publisher\nDESCRIPTION: Code for publishing the notebook to Plotly's documentation site. It includes styling configurations, installation of the publisher package, and metadata for the documentation entry including title, thumbnail, and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/Interact.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'Interact.ipynb', 'python/interact-decorator/', 'Use the Interact decorator with go.FigureWidget',\n    'Use the Interact decorator with go.FigureWidget',\n    title = 'Use Interact decorator with FigureWidget',\n    name = 'Use Interact decorator with FigureWidget',\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-overview.gif', \n    language='python', \n    display_as='chart_events', order=4,\n    ipynb= '~notebook_demo/254')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Documentation for Plotly Examples\nDESCRIPTION: Code for setting up custom styling and publishing the notebook as official Plotly documentation. It configures fonts, CSS, and metadata for the example to be published on the Plotly documentation website.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/mixed-subplots/mixed-subplots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'mixed-subplots.ipynb', 'python/mixed-subplots/', 'Mixed Subplots',\n    'How to make mixed subplots in Python with Plotly.',\n    title = 'Mixed Subplots | plotly',\n    name = 'Mixed Subplots',\n    has_thumbnail='true', thumbnail='thumbnail/mixed_subplot.JPG', \n    language='python', page_type='example_index',\n    display_as='multiple_axes', order=5,\n    ipynb= '~notebook_demo/132')\n```\n\n----------------------------------------\n\nTITLE: Publishing Polar Chart Documentation\nDESCRIPTION: Sets up documentation styling and publishes the polar chart tutorial to Plotly's documentation site. Includes font loading, custom CSS styling, and publisher configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'polar.ipynb', 'python/polar-chart/', 'Polar Charts',\n    'How to makepolar charts in Python with Plotly.',\n    title = 'Polar Charts | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/polar.gif', \n    language='python', \n    display_as='scientific', order=29, ipynb='~notebook_demo/200',\n    )\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebook with Custom Styling\nDESCRIPTION: This code adds custom styling to the Jupyter notebook, installs the publisher package, and publishes the notebook with specified metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-detection/python-Baseline-Detection.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Baseline-Detection.ipynb', 'python/baseline-detection/', 'Baseline Detection | plotly',\n    'Learn how to detect baselines on data in Python.',\n    title='Baseline Detection in Python | plotly',\n    name='Baseline Detection',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=1,\n    ipynb= '~notebook_demo/117')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dash App with Graph Component\nDESCRIPTION: This code snippet demonstrates how to create a simple Dash application with an HTML DIV containing an H1 header and a core Graph component. It imports necessary Dash modules and initializes an app instance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/scripts/scrape-r-docs.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nfrom dash import html, dcc\n\napp = dash.Dash(__name__)\napp.layout = html.Div([\n    html.H1('Hello Dash'),\n    dcc.Graph(id='example-graph',\n               figure={'data': [\n                   {'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'},\n                   {'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': 'Montréal'},\n               ],\n              'layout': {\n                  'title': 'Dash Data Visualization'\n              }})\n])\n```\n\n----------------------------------------\n\nTITLE: Displaying Customized Plot - Plotly Python\nDESCRIPTION: This snippet shows how to display the customized plot after editing properties and layout, ensuring a cohesive view of the subplots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig, filename='box-heatmap-fixed')\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly Traces for Parameter Visualization (Slope)\nDESCRIPTION: Creates a time series scatter plot and histogram for the slope parameter from the MCMC trace. These visualizations help assess convergence and the posterior distribution of the parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ntrace3 = pgo.Scatter(\n    y=trace_tuned.T[1],\n    xaxis='x3',\n    yaxis='y3',\n    line=pgo.Line(width=1),\n    marker=pgo.Marker(color=color)\n)\n\ntrace4 = pgo.Histogram(\n    x=trace_tuned.T[1],\n    xaxis='x4',\n    yaxis='y4',\n    marker=pgo.Marker(color=color)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Parallel Categories Diagram\nDESCRIPTION: Creates a simple parallel categories diagram showing relationships between hair color, eye color, and sex attributes with interactive tooltips.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparcats = go.Parcats(\n    dimensions=[\n        {'label': 'Hair',\n         'values': ['Black', 'Black', 'Black', 'Brown',\n                    'Brown', 'Brown', 'Red', 'Brown']},\n        {'label': 'Eye',\n         'values': ['Brown', 'Brown', 'Brown', 'Brown',\n                    'Brown', 'Blue', 'Blue', 'Blue']},\n        {'label': 'Sex',\n         'values': ['Female', 'Female', 'Female', 'Male',\n                    'Female', 'Male', 'Male', 'Male']}]\n)\n\niplot([parcats])\n```\n\n----------------------------------------\n\nTITLE: Installing Jupyter Notebook in Virtualenv\nDESCRIPTION: Command to install Jupyter Notebook within the activated Plotly 3.3 virtual environment, enabling interactive plotting in notebooks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n(plotly3.3) $ pip install notebook\n```\n\n----------------------------------------\n\nTITLE: Display Inertia Plot Using Plotly\\u0027s IPlot\nDESCRIPTION: Utilizes Plotly's iplot function to render the inertia plot with filename 'baltimore-clustering-inertias'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npy.iplot(fig6, filename='baltimore-clustering-inertias')\n```\n\n----------------------------------------\n\nTITLE: Setting and Resetting Marker Color in Plotly\nDESCRIPTION: Sets marker color to 'fuchsia' and then resets it to the default by setting it to None.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nscatter.marker.color = 'fuchsia' # Set to 'fuchsia'\n\n# Restore default marker color\nscatter.marker.color = None\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Iframe Code in Python\nDESCRIPTION: Renders the HTML iframe code snippet in the notebook using IPython's HTML display functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nh = HTML(i); h\n```\n\n----------------------------------------\n\nTITLE: Complex Graph Animation Sequence\nDESCRIPTION: Demonstrates a sequence of graph updates including data changes, styling, and hover effects\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.html import widgets\nimport json\nimport time\n\nstyle_sequence = [\n    # Clear graph\n    {\n        'data': {\n            'x': [],\n            'y': [],\n            'marker.color': '',\n            'marker.size': '',\n            'marker.symbol': '',\n            'line.color': '',\n            'line.width': '',\n            'name': ''\n        },\n        'layout': {\n            'title': '',\n            'showlegend': False,\n            'legend.x': '',\n            'legend.y': '',\n            'legend.bgcolor': ''\n        },\n        'hover': {}\n    },\n    # Add data\n    {\n        'data': {\n            'x': [[1,2,3],\n                  [1, 2, 4]],\n         'y': [[10,20,30],\n               [5, 8, 14]]\n        },\n        'traces': [0, 1]\n    },\n    # Restyle markers\n    {\n        'data': {\n            'marker.color': ['rgb(0, 67, 88)', 'rgb(31, 138, 112)'],\n            'marker.size': 10,\n            'marker.symbol': 'hexagon-open'\n        },\n        'traces': [0, 1]\n    },\n    # Restyle lines\n    {\n        'data': {\n            'line.color': ['rgb(0, 67, 88)', 'rgb(31, 138, 112)'],\n            'line.width': 3\n        }\n    },\n    # Add title\n    {\n        'layout': {\n            'title': 'Trials',\n        }\n    },\n    # Add legend\n    {\n        'layout': {\n            'showlegend': True,\n        }\n    },\n    # Add legend names\n    {\n        'data': {\n            'name': ['Control', 'Experiment']\n        },\n        'traces': [0, 1]\n    },\n    # Move legend\n    {\n        'layout': {\n            'legend.x': 0.02,\n            'legend.y': 1,\n            'legend.bgcolor': 'rgba(255, 255, 255, 0.5)'\n        }\n    },\n    {'hover': {'xval': 2, 'yval': 8}},\n    {'hover': {'xval': 2, 'yval': 8, 'hovermode': 'closest'}},\n    {'xval': 2, 'yval': 8, 'hovermode': 'x'},\n    {'hover': [{'curveNumber': 0, 'pointNumber': 0}]},\n    {'hover': [{'curveNumber': 0, 'pointNumber': 0},\n     {'curveNumber': 0, 'pointNumber': 1}]},\n    {'hover': [{'curveNumber': 0, 'pointNumber': 2},\n     {'curveNumber': 1, 'pointNumber': 1}]},\n    {'hover': [{'curveNumber': 0, 'xval': 1, 'yval': 10},\n     {'curveNumber': 0, 'xval': 2, 'yval': 20},\n     {'curveNumber': 0, 'xval': 3, 'yval': 30},\n     {'curveNumber': 1, 'xval': 1, 'yval': 5},\n     {'curveNumber': 1, 'xval': 2, 'yval': 8},\n     {'curveNumber': 1, 'xval': 4, 'yval': 14}\n    ]}\n]\n\nfor s in style_sequence:\n    if 'data' in s:\n        if 'traces' in s:\n            g.restyle(s['data'], indices=s['traces'])\n        else:\n            g.restyle(s['data'])\n    if 'layout' in s:\n        g.relayout(s['layout'])\n    if 'hover' in s:\n        g.hover(s['hover'])\n    time.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Setup and publishing configuration for Plotly documentation using custom styling and publisher package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'plotly_offline.ipynb', 'python/offline/', 'Plotly Offline for IPython Notebooks',\n    'How to use Plotly offline inside IPython notebooks',\n    title= 'Plotly Offline for IPython Notebooks',\n    name = 'Offline Plots in Plotly',\n    has_thumbnail='true',thumbnail='thumbnail/offline.png' \n    language='python', page_type='example_index', layout='user-guide', display_as='chart_studio'\n    ipynb= '~notebook_demo/267',\n    uses_plotly_offline=True\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher\nDESCRIPTION: Sets up custom styling for the notebook and uses Plotly's publisher module to publish the notebook as documentation. This includes setting metadata like title, category, and layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'bar_chart_stream.ipynb', 'python/bar_chart_stream//', 'Bar Chart Streaming Demo',\n    'Getting Started with Plotly Streaming',\n    title = 'Bar Chart Streaming',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Multi-Trace Bar Chart with Plotly in Python\nDESCRIPTION: Demonstrates how to create a more complex, styled bar chart with multiple traces using Plotly in a Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace_women = go.Bar(x=df.School,\n                  y=df.Women,\n                  name='Women',\n                  marker=dict(color='#ffcdd2'))\n\ntrace_men = go.Bar(x=df.School,\n                y=df.Men,\n                name='Men',\n                marker=dict(color='#A2D5F2'))\n\ntrace_gap = go.Bar(x=df.School,\n                y=df.Gap,\n                name='Gap',\n                marker=dict(color='#59606D'))\n\ndata = [trace_women, trace_men, trace_gap]\n\nlayout = go.Layout(title=\"Average Earnings for Graduates\",\n                xaxis=dict(title='School'),\n                yaxis=dict(title='Salary (in thousands)'))\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, sharing='private', filename='jupyter-styled_bar')\n```\n\n----------------------------------------\n\nTITLE: Creating Layout for Chord Diagram in Plotly\nDESCRIPTION: Function that defines the Plotly layout for the chord diagram, including axis configuration, plot size, margins, and placeholder for shapes that will include ideograms and ribbons.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef make_layout(title, plot_size):\n    axis=dict(showline=False, # hide axis line, grid, ticklabels and  title\n          zeroline=False,\n          showgrid=False,\n          showticklabels=False,\n          title='' \n          )\n\n    return go.Layout(title=title,\n                  xaxis=dict(axis),\n                  yaxis=dict(axis),\n                  showlegend=False,\n                  width=plot_size,\n                  height=plot_size,\n                  margin=dict(t=25, b=25, l=25, r=25),\n                  hovermode='closest',\n                  shapes=[]# to this list one appends below the dicts defining the ribbon,\n                           #respectively the ideogram shapes\n                 )  \n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Sets up documentation styling and publishes the notebook using Plotly's publisher\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'triangulation.ipynb', 'python/surface-triangulation/', 'Surface Triangulation',\n    'How to make Tri-Surf plots in Python with Plotly.',\n    title = 'Python Surface Triangulation | plotly',\n    name = 'Surface Triangulation',\n    has_thumbnail='true', thumbnail='thumbnail/trisurf.jpg',\n    language='python',\n    display_as='3d_charts', order=11,\n    ipynb= '~notebook_demo/71')\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Paths for Quadratic Bézier Curves in Plotly\nDESCRIPTION: Function that defines Plotly SVG paths for quadratic Bézier curves based on a list of control points, used for creating the curved edges of ribbons in the chord diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef make_q_bezier(b):# defines the Plotly SVG path for a quadratic Bezier curve defined by the \n                     #list of its control points\n    if len(b)!=3:\n        raise valueError('control poligon must have 3 points')\n    A, B, C=b    \n    return 'M '+str(A[0])+',' +str(A[1])+' '+'Q '+\\\n                str(B[0])+', '+str(B[1])+ ' '+\\\n                str(C[0])+', '+str(C[1])\n        \nb=[(1,4), (-0.5, 2.35), (3.745, 1.47)]\n\nmake_q_bezier(b)\n```\n\n----------------------------------------\n\nTITLE: Adding Dimensions to Parallel Coordinates Plot\nDESCRIPTION: Creates a parallel coordinates plot with custom dimensions, ranges, and labels. Demonstrates setting constraints, custom tick values and labels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/parcoords/parcoords.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Parcoords(\n        line = dict(color = 'blue'),\n        dimensions = list([\n            dict(range = [1,5],\n                 constraintrange = [1,2],\n                 label = 'A', values = [1,4]),\n            dict(range = [1.5,5],\n                 tickvals = [1.5,3,4.5],\n                 label = 'B', values = [3,1.5]),\n            dict(range = [1,5],\n                 tickvals = [1,2,4,5],\n                 label = 'C', values = [2,4],\n                 ticktext = ['text 1', 'text 2', 'text 3', 'text 4']),\n            dict(range = [1,5],\n                 label = 'D', values = [4,2])\n        ])\n    )\n]\n\npy.iplot(data, filename = 'parcoord-dimensions')\n```\n\n----------------------------------------\n\nTITLE: Viewing 3D Surface from Above (Top-Down Perspective)\nDESCRIPTION: Configures the camera for a top-down view of the 3D surface with eye vector at (0.1, 0.1, 2.5). This perspective shows the elevation data as a contour-like view from directly above.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-camera-controls/3d-camera-controls.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nname = 'eye = (x:0.1, y:0.1, z:2.5)'\ncamera = dict(\n    up=dict(x=0, y=0, z=1),\n    center=dict(x=0, y=0, z=0),\n    eye=dict(x=0.1, y=0.1, z=2.5)\n)\n\nfig['layout'].update(\n    scene=dict(camera=camera),\n    title=name\n)\npy.iplot(fig, validate=False, filename=name)\n```\n\n----------------------------------------\n\nTITLE: Publishing the Tutorial as Plotly Documentation\nDESCRIPTION: Sets up font styles and CSS for the notebook, upgrades the publisher package, and publishes the tutorial to Plotly's documentation website with appropriate metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    's7_streaming_p1-first-stream', 'python/streaming_part1//', 'Getting Started with Plotly Streaming',\n    'Getting Started with Plotly Streaming',\n    title = 'Getting Started with Plotly Streaming',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false') \n```\n\n----------------------------------------\n\nTITLE: Publishing IPython Notebook with Custom Styling in Python\nDESCRIPTION: This snippet demonstrates how to publish an IPython notebook with custom styling. It includes adding custom fonts, CSS, and using a publisher module to set metadata for the published notebook. This is useful for creating polished, web-ready data analysis presentations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'sqlite.ipynb', 'python/big-data-analytics-with-pandas-and-sqlite/', 'Big Data Analytics with Pandas and SQLite', \n    'A primer on out-of-memory analytics of large datasets with Pandas, SQLite, and IPython notebooks.',\n    title='Big Data Workflow with Pandas and SQLite | Plotly', has_thumbnail='false',\n    redirect_from='ipython-notebooks/big-data-analytics-with-pandas-and-sqlite/',\n    language='python', page_type='example_index', display_as='databases', order=4, ipynb= '~notebook_demo/1')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly WebGL Heatmaps\nDESCRIPTION: Imports the necessary Python libraries for creating WebGL heatmaps, including Plotly for visualization, requests for downloading images, PIL for image processing, and BytesIO for handling binary data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n```\n\n----------------------------------------\n\nTITLE: Extracting Graph Vertices and Attributes in Python\nDESCRIPTION: Retrieves the list of vertices and their attributes from the graph object.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nV=list(G.vs) \nG.vs.attributes()# list node attributes\n\nprint V[0]\n\nlabels=[v['label']  for v in V]\n```\n\n----------------------------------------\n\nTITLE: Adjusting Marker Opacity in Plotly Scatter Plot\nDESCRIPTION: This example shows how to set the opacity of individual markers in a Plotly scatter plot. It's recommended for maximizing visibility of density, especially when dealing with high-density data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx = np.random.uniform(low=3, high=6, size=(500,))\ny = np.random.uniform(low=3, high=6, size=(500,))\n  \ndata = [\n    go.Scatter(\n        mode = 'markers',\n        x = x,\n        y = y,\n        marker = dict(\n          color = 'rgb(17, 157, 255)',\n          size = 20,\n          opacity = 0.5,\n          line = dict(\n            color = 'rgb(231, 99, 250)',\n            width = 2\n          )\n        ),\n        showlegend = False\n      ),\n      go.Scatter(\n          mode = 'markers',\n          x = [2,2],\n          y = [4.25,4.75],\n          marker = dict(\n            color = 'rgb(17, 157, 255)',\n            size = 80,\n            opacity = 0.5,\n            line = dict(\n              color = 'rgb(231, 99, 250)',\n              width = 8\n            )\n          ),\n          showlegend = False\n    )]\n\npy.iplot(data, filename = \"style-marker-opacity\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Plot\nDESCRIPTION: Embeds an interactive plot using HTML iframe\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML('<iframe src=https://plotly.com/~empet/13734/trisurf-from-a-ply-file-data-source-1/ \\\n     width=800 height=800></iframe>')\n```\n\n----------------------------------------\n\nTITLE: Setting Hover Mode in Plotly\nDESCRIPTION: Sets the hover mode to 'closest' to show information about the nearest data point.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# fig.layout.hovermode = 'nearest' # Set to 'closest'\nfig.layout.hovermode = 'closest'\n```\n\n----------------------------------------\n\nTITLE: Displaying Cufflinks iplot Help Documentation in Python\nDESCRIPTION: This snippet shows how to display the help documentation for the Cufflinks iplot method, which provides information on its usage and parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nhelp(df.iplot)\n```\n\n----------------------------------------\n\nTITLE: Plotting Raw Wind Speed Data with Plotly\nDESCRIPTION: This snippet creates a line plot of the raw wind speed data using Plotly's Scatter object and Figure layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=list(range(len(list(data['10 Min Std Dev'])))),\n    y=list(data['10 Min Std Dev']),\n    mode='lines',\n    name='Wind Data'\n)\n\nlayout = go.Layout(\n    showlegend=True\n)\n\ntrace_data = [trace1]\nfig = go.Figure(data=trace_data, layout=layout)\npy.iplot(fig, filename='wind-raw-data-plot')\n```\n\n----------------------------------------\n\nTITLE: Signing into Plotly\nDESCRIPTION: This code snippet authenticates with the Plotly service using a username and API key. This is required to upload and share plots on the Plotly platform.  Replace \"IPython.Demo\" and \"1fw3zw2o13\" with your actual username and API key, respectively.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.tools as tls\nfrom plotly.graph_objs import *\npy.sign_in(\"IPython.Demo\", \"1fw3zw2o13\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scatter Plots with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates creating a scatter plot using Cufflinks' iplot function with mode set to 'markers'. Imports data from a CSV and filters a DataFrame. Dependencies include Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt', sep='\\t')\ndf2007 = df[df.year==2007]\ndf1952 = df[df.year==1952]\n\ndf2007.iplot(kind='scatter', mode='markers', x='gdpPercap', y='lifeExp', filename='cufflinks/simple-scatter')\n```\n\n----------------------------------------\n\nTITLE: Loading Gene Expression Data with Numpy and Pandas in Python\nDESCRIPTION: Loads gene expression data from a TSV file using numpy.genfromtxt and creates a pandas DataFrame. It then filters the data to remove genes with unknown Uniprot IDs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\n\ndata = np.genfromtxt(\"http://figshare.com/download/file/2087487/1\",\n                     comments=\"#\", usecols=range(2,73,1), names=True, dtype=object, delimiter=\"\\t\")\ndf = pd.DataFrame(data)\nprint \"Number of genes: \" + str(len(df))\ndf.head()\n\nuniprot_clean = [x for x in df['uniprot_id'] if (x != 'NA') and ((x != ''))]\ndf=df[df[\"uniprot_id\"].isin(uniprot_clean)]\nprint \"Number of genes: \" + str(len(df))\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Filtering Raw Data for Beta Band\nDESCRIPTION: Loads raw data with preload=True for filtering, applies a bandpass filter to isolate beta band (13-30 Hz), and saves the filtered data to a new file while verifying the updated filter parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nraw_beta = mne.io.Raw(raw_fname, preload=True)  # reload data with preload for filtering\n\n# keep beta band\nraw_beta.filter(13.0, 30.0, method='iir', n_jobs=-1)\n\n# save the result\nraw_beta.save('sample_audvis_beta_raw.fif', overwrite=True)\n\n# check if the info dictionary got updated\nprint(raw_beta.info['highpass'], raw_beta.info['lowpass'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Filled Line Chart with Plotly in R\nDESCRIPTION: This snippet shows how to create a filled line chart using Plotly and the PerformanceAnalytics package in R. It loads manager performance data, converts it to a data frame, and creates a time series plot using plot_ly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/Plotly-Jupyter-Example.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n# Filled line Chart\nlibrary(plotly)\nlibrary(PerformanceAnalytics)\n\n#Load data\ndata(managers)\n\n# Convert to data.frame\nmanagers.df <- as.data.frame(managers)\nmanagers.df$Dates <- index(managers)\n\n# See first few rows\nhead(managers.df)\n\n# Plot\np <- plot_ly(managers.df, x = ~Dates, y = ~HAM1, name = \"Manager 1\") %>% add_lines() \n  layout(title = \"Time Series plot\")\nembed_notebook(p)\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Connections in GML Network Graph\nDESCRIPTION: This code demonstrates how to define weighted edges between nodes in a GML network graph. Each edge specifies a source node, target node, and a numerical value that represents the weight or strength of the connection.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_5\n\nLANGUAGE: gml\nCODE:\n```\n  edge\n  [\n    source 1\n    target 0\n    value 2.5\n  ]\n  edge\n  [\n    source 3\n    target 2\n    value 0.25\n  ]\n  edge\n  [\n    source 4\n    target 2\n    value 0.25\n  ]\n  edge\n  [\n    source 4\n    target 3\n    value 0.25\n  ]\n```\n\n----------------------------------------\n\nTITLE: Marking Bad Channels\nDESCRIPTION: Identifies specific channels as bad by adding them to the raw.info['bads'] list, which will exclude them from subsequent analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nraw.info['bads'] = ['MEG 2443', 'EEG 053']\nprint(raw.info['bads'])\n```\n\n----------------------------------------\n\nTITLE: Reading a Data Segment\nDESCRIPTION: Extracts a specific time segment (100-115 seconds) from the raw data for all channels and displays the shape of the resulting arrays.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstart, stop = raw.time_as_index([100, 115])  # 100 s to 115 s data segment\ndata, times = raw[:306, start:stop]\nprint(data.shape)\nprint(times.shape)\nprint(times.min(), times.max())\n```\n\n----------------------------------------\n\nTITLE: Analyzing System Poles for Stability\nDESCRIPTION: Extracts the poles of the heading to commanded roll transfer function to analyze system stability. This reveals a pole at origin making the system marginally stable.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\npsi_thetac.pole()\n```\n\n----------------------------------------\n\nTITLE: Creating a Presentation with Custom Slide Transitions\nDESCRIPTION: This example demonstrates how to add transition effects between slides using the 'transition:' syntax at the beginning of each slide. Multiple transition types (slide, zoom, fade, spin) can be combined.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport chart_studio.presentation_objs as pres\n\nfilename = 'pres-with-transitions'\nmarkdown_string = \"\"\"\ntransition: slide\n# slide\n---\ntransition: zoom\n# zoom\n---\ntransition: fade\n# fade\n---\ntransition: spin\n# spin\n---\ntransition: spin and slide\n# spin, slide\n---\ntransition: fade zoom\n# fade, zoom\n---\ntransition: slide, zoom, fade, spin, spin, spin, zoom, fade\n# slide, zoom, fade, spin\n\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string, style='moods')\npres_url_6 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Publishing Chord Diagram Tutorial with Python\nDESCRIPTION: This code snippet sets up the environment for publishing the chord diagram tutorial. It includes setting up custom CSS, installing the publisher package, and defining metadata for the tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'filled-chord.ipynb', 'python/filled-chord-diagram/', 'Python Filled Chord Diagram',\n    'How to make an interactive filled-chord diagram in Python with Plotly and iGraph. ',\n    name = 'Filled Chord Diagram',\n    title = \"Filled Chord Diagram | Plotly\",\n    thumbnail='thumbnail/filled-chord.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=25,\n    ipynb= '~notebook_demo/191')\n```\n\n----------------------------------------\n\nTITLE: Displaying the Interactive Dashboard\nDESCRIPTION: Displays the widget containers and graph for user interaction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/widget_app.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay(container)\ncontainer2 = widgets.HBox([origin, textbox])\ndisplay(container2)\ndisplay(g)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for 2D Kernel Density Plots in Python\nDESCRIPTION: This snippet imports necessary Python libraries for data manipulation, statistical analysis, and visualization, including numpy, pandas, seaborn, scipy.stats, and matplotlib.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport scipy.stats as st\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Maps with Plotly and Mapbox\nDESCRIPTION: Shows how to create interactive maps using Plotly integrated with Mapbox. This example plots nuclear waste sites on American campuses using latitude and longitude data, requiring a Mapbox access token.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\n# mapbox_access_token = 'ADD YOUR TOKEN HERE'\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Nuclear%20Waste%20Sites%20on%20American%20Campuses.csv')\nsite_lat = df.lat\nsite_lon = df.lon\nlocations_name = df.text\n\ndata = [\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=dict(\n            size=17,\n            color='rgb(255, 0, 0)',\n            opacity=0.7\n        ),\n        text=locations_name,\n        hoverinfo='text'\n    ),\n    go.Scattermapbox(\n        lat=site_lat,\n        lon=site_lon,\n        mode='markers',\n        marker=dict(\n            size=8,\n            color='rgb(242, 177, 172)',\n            opacity=0.7\n        ),\n        hoverinfo='none'\n    )]\n\n\nlayout = go.Layout(\n    title='Nuclear Waste Sites on Campus',\n    autosize=True,\n    hovermode='closest',\n    showlegend=False,\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=38,\n            lon=-94\n        ),\n        pitch=0,\n        zoom=3,\n        style='light'\n    ),\n)\n\nfig = dict(data=data, layout=layout)\n\npy.iplot(fig, filename='jupyter-Nuclear Waste Sites on American Campuses')\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Sample Data with Pandas\nDESCRIPTION: Previews the first two rows of the CSV file to examine its structure before full processing.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npd.read_csv('311_100M.csv', nrows=2).head()\n```\n\n----------------------------------------\n\nTITLE: Documentation Publishing Configuration\nDESCRIPTION: Setup and configuration for publishing the documentation, including custom styling and metadata configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/histogram2d/2d-histograms.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/csshref=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    '2d-histograms.ipynb', 'python/2D-Histogram/', 'Python 2D Histograms | plotly',\n    'How to make 2D Histograms in Python with Plotly.',\n    title = 'Python 2D Histograms | plotly',\n    name = '2D Histograms',\n    has_thumbnail='true', thumbnail='thumbnail/histogram2d.jpg', \n    language='python', display_as='statistical', order=6,\n    ipynb= '~notebook_demo/24')\n```\n\n----------------------------------------\n\nTITLE: Basic Mapbox Scatter Plot\nDESCRIPTION: Creates a basic scatter plot on Mapbox map showing a single marker for Montreal. Requires Mapbox access token and demonstrates basic layout configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox/mapbox.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# mapbox_access_token = 'ADD_YOUR_TOKEN_HERE'\n\ndata = [\n    go.Scattermapbox(\n        lat=['45.5017'],\n        lon=['-73.5673'],\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=14\n        ),\n        text=['Montreal'],\n    )\n]\n\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    mapbox=go.layout.Mapbox(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=45,\n            lon=-73\n        ),\n        pitch=0,\n        zoom=5\n    ),\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Montreal Mapbox')\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Bar Colors with Plotly in Python\nDESCRIPTION: This snippet demonstrates how to customize individual bar colors in a bar chart using Plotly in Python. It highlights a specific bar with a different color to emphasize it.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Bar(\n    x=['Feature A', 'Feature B', 'Feature C',\n       'Feature D', 'Feature E'],\n    y=[20, 14, 23, 25, 22],\n    marker=dict(\n        color=['rgba(204,204,204,1)', 'rgba(222,45,38,0.8)',\n               'rgba(204,204,204,1)', 'rgba(204,204,204,1)',\n               'rgba(204,204,204,1)']),\n)\n\ndata = [trace0]\nlayout = go.Layout(\n    title='Least Used Feature',\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='color-bar')\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Display and Installing Publisher in Python\nDESCRIPTION: This snippet sets up custom styling for IPython notebooks, installs the Plotly publisher package, and publishes the notebook content. It's used for configuring the display of Plotly documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'fileopts.ipynb', 'python/file-options/', 'Updating Plotly Graphs',\n    'How to update your graphs in Python with the fileopt parameter.',\n    title = 'Python Filenames Options | Plotly',\n    has_thumbnail='true', \n    thumbnail='thumbnail/horizontal-bar.jpg', \n    language='python', \n    page_type='example_index',\n    display_as='chart_studio', \n    order=3, \n    #ipynb='~notebook_demo/1'\n)\n```\n\n----------------------------------------\n\nTITLE: Documentation Publishing Setup\nDESCRIPTION: Configuration for publishing the documentation to Plotly's help system with custom styling and metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'area.ipynb', 'python/filled-area-plots/', 'Filled Area Plots | plotly',\n    'How to make filled area plots in Python with Plotly.',\n    title = 'Filled Area Plots | plotly',\n    name = 'Filled Area Plots',\n    thumbnail='thumbnail/area.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=3.5,\n    ipynb='~notebook_demo/8')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling and Publishing the Notebook\nDESCRIPTION: Demonstrates how to add custom styling to the notebook and publish it using Plotly's publisher module. This includes setting fonts, CSS, and metadata for the publication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/density-plots/density-plots.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'density-plots.ipynb', 'python/density-plots/', 'Python 2d Density Plots | plotly',\n    'How to make a 2d density plot in python. Examples of density plots with kernel density estimations, custom color-scales, and smoothing.',\n    title='Python 2d Density Plots | plotly',\n    name='2d Density Plots',\n    thumbnail='thumbnail/density.gif', language='python',\n    has_thumbnail='true', display_as='statistical', order=7,\n    ipynb= '~notebook_demo/25')\n```\n\n----------------------------------------\n\nTITLE: Publishing Gauge Chart Documentation in Python with Plotly\nDESCRIPTION: This snippet shows how to set up the environment for publishing the gauge chart documentation. It installs the necessary packages, imports the publisher module, and calls the publish function with appropriate parameters to create the documentation for the gauge chart example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/semicircular-gauge.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'semicircular-gauge.ipynb', 'python/gauge-charts/', 'Python Gauge Chart | plotly',\n    'How to make guage meter charts in Python with Plotly. ',\n    name = 'Gauge Charts',\n    title = 'Python Gauge Chart | plotly',\n    thumbnail='thumbnail/gauge.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=11,\n    ipynb='~notebook_demo/11')\n```\n\n----------------------------------------\n\nTITLE: Creating Epochs from Raw Data\nDESCRIPTION: Creates an Epochs object from the raw data by segmenting it around the specified events, applying baseline correction, and setting up automatic rejection criteria.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nepochs = mne.Epochs(raw, events, event_id, tmin, tmax, proj=True,\n                    picks=picks, baseline=baseline, reject=reject)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plots with Data Labels on Hover using Plotly in Python\nDESCRIPTION: This example demonstrates how to create a scatter plot with data labels that appear on hover. It uses a CSV file for data and creates multiple traces with different colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport random\nimport numpy as np\nimport pandas as pd\n\nl= []\ny= []\ndata= pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv\")\n# Setting colors for plot.\nN= 53\nc= ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 360, N)]\n\nfor i in range(int(N)):\n    y.append((2000+i))\n    trace0= go.Scatter(\n        x= data['Rank'],\n        y= data['Population']+(i*1000000),\n        mode= 'markers',\n        marker= dict(size= 14,\n                    line= dict(width=1),\n                    color= c[i],\n                    opacity= 0.3\n                   ),name= y[i],\n        text= data['State']) # The hover text goes here... \n    l.append(trace0);\n\nlayout= go.Layout(\n    title= 'Stats of USA States',\n    hovermode= 'closest',\n    xaxis= dict(\n        title= 'Population',\n        ticklen= 5,\n        zeroline= False,\n        gridwidth= 2,\n    ),\n    yaxis=dict(\n        title= 'Rank',\n        ticklen= 5,\n        gridwidth= 2,\n    ),\n    showlegend= False\n)\nfig= go.Figure(data=l, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Setting Plot Layout for 3D Surface in Python with Plotly\nDESCRIPTION: This code configures the layout for the 3D surface plot. It sets up the axis properties, defines the plot dimensions, and configures the 3D scene including axis ranges and aspect ratio.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naxis = dict(\nshowbackground=True, \nbackgroundcolor=\"rgb(230, 230,230)\", \nshowgrid=False,    \nzeroline=False,  \nshowline=False)\n\nztickvals=list(range(-6,4))\nlayout = go.Layout(title=\"Projections of a surface onto coordinate planes\" , \n                autosize=False,\n                width=700,\n                height=600,\n                scene=dict(xaxis=dict(axis, range=[-3.5, 3.5]),\n                            yaxis=dict(axis, range=[-3.5, 3.5]),\n                            zaxis=dict(axis , tickvals=ztickvals),\n                            aspectratio=dict(x=1,\n                                             y=1,\n                                             z=0.95)\n                           )\n                )\n```\n\n----------------------------------------\n\nTITLE: Creating Figure for Soil Types Ternary Plot in Python\nDESCRIPTION: This snippet combines the prepared data and layout into a figure object for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig = {'data': data, 'layout': layout}\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Duration\nDESCRIPTION: Calculates two hours in seconds for filtering ride durations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n60 * 60 * 2 # 2 hours in seconds\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Styling to Jupyter Notebook in Python\nDESCRIPTION: This function reads a custom CSS file and applies the styles to the Jupyter notebook for improved visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.core.display import HTML\ndef  css_styling():\n    styles = open(\"./custom.css\", \"r\").read()\n    return HTML(styles)\ncss_styling()\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration Setup\nDESCRIPTION: Sets up display configuration and publishes the notebook with custom styling and metadata.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table_sub.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'table-subplots.ipynb', 'python/table-subplots/', 'Table and Chart Subplots',\n    'How to create a subplot with tables and charts in Python with Plotly.',\n    title = 'Table and Chart Subplots | plotly',\n    has_thumbnail='true', thumbnail='table_subplots.jpg',\n    language='python',\n    display_as='multiple_axes', order=11)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subplots for Color-Coded Band Diagram and DOS\nDESCRIPTION: Creates a new subplot figure for displaying the color-coded band diagram alongside the density of states, adding all the previously generated traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# set up a new figure with two subplots\ncolorbandfig = tls.make_subplots(rows=1, cols=2, shared_yaxes=True)\n# add the bands in the first subplot\nfor btrace in colorBands:\n    colorbandfig.append_trace(btrace, 1, 1)\n# add vlines for specific k-points in the first subplot\nfor vline in vlines:\n    colorbandfig.append_trace(vline, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Adding Band Diagram and DOS Traces to Subplots\nDESCRIPTION: Adds previously created traces for bands, k-point lines, and density of states to their respective subplots in the combined figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# add the bands\nfor btrace in bandTraces:\n    dosbandfig.append_trace(btrace, 1, 1)\n# add vlines for specific k-points\nfor vline in vlines:\n    dosbandfig.append_trace(vline, 1, 1)\n# add the densities\ndosbandfig.append_trace(trace_tdos, 1, 2)\ndosbandfig.append_trace(trace_3s, 1, 2)\ndosbandfig.append_trace(trace_3p, 1, 2)    \n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation with Pandas\nDESCRIPTION: Demonstrates how to calculate statistical measures across a DataFrame using Pandas' built-in functions. This example computes the standard deviation for each column in the dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf.std()\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Initial Scoreboard Figure in Plotly\nDESCRIPTION: Combines the data and layout objects into a Plotly Figure, sets the title and annotations, and then plots the initial August 14 scoreboard using Plotly's iplot function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig=Figure(data=data14, layout=layout)        \nfig['layout'].update(\ntitle=title,\nannotations=annotations\n)    \n\npy.sign_in('empet', 'my_api_key')\npy.iplot(fig,filename='Heatmap-republican-candidates-14')\n```\n\n----------------------------------------\n\nTITLE: Filter and Aggregate Transforms with Plotly in Python\nDESCRIPTION: Creates a scatter plot using Plotly with filter and aggregate transforms. This example filters data for 2007 and aggregates points by continent, calculating averages of life expectancy, GDP per capita, and total population.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/multiple-transforms/multiple-transforms.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.offline as off\n\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv\")\n\ndata = [dict(\n  type = 'scatter',\n  mode = 'markers',\n  x = df['lifeExp'],\n  y = df['gdpPercap'],\n  text = df['continent'],\n  hoverinfo = 'text',\n  opacity = 0.8,\n  marker = dict(\n      size = df['pop'],\n      sizemode = 'area',\n      sizeref = 200000\n  ),\n  transforms = [\n      dict(\n        type = 'filter',\n        target = df['year'],\n        orientation = '=',\n        value = 2007\n      ),\n      dict(\n        type = 'aggregate',\n        groups = df['continent'],\n        aggregations = [\n            dict(target = 'x', func = 'avg'),\n            dict(target = 'y', func = 'avg'),\n            dict(target = 'marker.size', func = 'sum')\n        ]\n      )]\n)]\n\nlayout = dict(\n    yaxis = dict(\n        type = 'log'\n    )\n)\n\n\noff.iplot({'data': data, 'layout': layout}, validate=False)\n```\n\n----------------------------------------\n\nTITLE: Running Summary and Descriptive Statistics\nDESCRIPTION: These snippets demonstrate how to use both R and Python to compute and display summary statistics of the 'tongue' dataset. It shows interoperability in a notebook environment, highlighting dual usage of statistical tools available in both languages.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\n%%R \\nsummary(tongue)\\n\"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\ntongue.describe()\n```\n\n----------------------------------------\n\nTITLE: Creating a Presentation with Embedded Plotly Charts\nDESCRIPTION: This example shows how to embed Plotly charts directly in a presentation by using the Plotly() syntax in the markdown string. The presentation contains multiple slides with 3D scatterplots and explanatory text.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport chart_studio.presentation_objs as pres\n\nfilename = 'pres-with-plotly-chart'\nmarkdown_string = \"\"\"\n# 3D scatterplots\n3D Scatterplot are just a collection of balls in a 3D cartesian space each of which have assigned properties like color, size, and more.\n\n---\n# simple 3d scatterplot\n\nPlotly(https://plotly.com/~AdamKulidjian/3698)\n---\n# different colorscales\n\nThere are various colorscales and colorschemes to try in Plotly. Check out plotly.colors to find a list of valid and available colorscales.\n\nPlotly(https://plotly.com/~AdamKulidjian/3582)\nPlotly(https://plotly.com/~AdamKulidjian/3698)\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string)\npres_url_1 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Displaying an Embedded Plotly Chart in Jupyter Notebook\nDESCRIPTION: Embeds a previously created Plotly chart into the notebook using HTML and the Plotly embed.js script for interactive visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML(\"\"\"<div>\n    <a href=\"https://plotly.com/~bill_chambers/21/\" target=\"_blank\" title=\"Chuck vs Bill Sales Amounts\" style=\"display: block; text-align: center;\"><img src=\"https://plotly.com/~bill_chambers/21.png\" alt=\"Chuck vs Bill Sales Amounts\" style=\"max-width: 100%;width: 1368px;\"  width=\"1368\" onerror=\"this.onerror=null;this.src='https://plotly.com/404.png';\" /></a>\n    <script data-plotly=\"bill_chambers:21\" src=\"https://plotly.com/embed.js\" async></script>\n</div>\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Styling to Jupyter Notebook\nDESCRIPTION: Loads and applies custom CSS styling to the Jupyter notebook from an external CSS file for improved visual presentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.core.display import HTML\ndef  css_styling():\n    styles = open(\"./custom.css\", \"r\").read()\n    return HTML(styles)\ncss_styling()\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly User Guide with Python\nDESCRIPTION: This code snippet sets up custom styling for the IPython notebook and publishes the user guide using the publisher module. It installs the latest version of the publisher package and configures the publication settings for the user guide.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/user-g.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'user-g.ipynb', 'python/userguide//', 'Getting Started Plotly for Python',\n    'Getting Started with Plotly for Python',\n    title = 'Getting Started Plotly for Python',\n    thumbnail='', language='python',\n    layout='user-guide', has_thumbnail='false')\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Block Diagram in Python\nDESCRIPTION: This snippet displays an SVG image of the controller block diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSVG('block-diagram.svg')\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly with pip\nDESCRIPTION: This command demonstrates how to install the Plotly library using the pip package manager. It's a prerequisite for using Plotly in a Python environment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n$ pip install plotly\n```\n\n----------------------------------------\n\nTITLE: Plotting Time Series with Baseline Values\nDESCRIPTION: Creates a scatter plot showing both the original time series data and calculated baseline values using Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-subtraction/python-Baseline-Subtraction.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbaseline_values = peakutils.baseline(time_series)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    marker=dict(\n        color='#547C66',\n    ),\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=baseline_values,\n    mode='markers',\n    marker=dict(\n        size=3,\n        color='#EB55BF',\n        symbol='circle-open'\n    ),\n    name='Baseline'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-baseline')\n```\n\n----------------------------------------\n\nTITLE: Using Alternate Input Format for Carpet Plot in Plotly Python\nDESCRIPTION: This example illustrates an alternate input format for carpet plots in Plotly Python. It uses arrays of arrays for y-coordinates, demonstrating a more compact data representation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4.5, 5, 6],\n    b = [1, 2, 3],\n    y = [[2, 3, 5.5, 8],\n         [3.5, 4.5, 6.5, 8.5],\n         [4, 5, 7.5, 10]]\n)\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"carpet/input-format\")\n```\n\n----------------------------------------\n\nTITLE: Combining Figures into a Single Plot\nDESCRIPTION: This code combines the previously configured figures into a single plot with vertical subplots. It creates a new figure, adds traces from both original figures, updates the layout, and displays the combined figure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\nfig.add_traces([fig1.data[0], fig2.data[0]])\n\nfig.layout.update(fig1.layout)\nfig.layout.update(fig2.layout)\n\npy.iplot(fig, filename='figure_factory_subplot')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Presentation with Plotly\nDESCRIPTION: This example demonstrates how to create a basic two-slide presentation using the Presentations API. The markdown string defines slide content with titles, and the presentation is created and uploaded to Plotly's servers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport chart_studio.presentation_objs as pres\n\nfilename = 'simple-pres'\nmarkdown_string = \"\"\"\n# slide 1\nThere is only one slide.\n\n---\n# slide 2\nAgain, another slide on this page.\n\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string)\npres_url_0 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Adding Shapes to Plotly Plot\nDESCRIPTION: Shows how to add shapes like rectangles to highlight regions on a plot using the layout.update() method with shapes parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlayout.update(dict(shapes = [\n        # 1st highlight during Feb 4 - Feb 6\n        {\n            'type': 'rect',\n            # x-reference is assigned to the x-values\n            'xref': 'x',\n            # y-reference is assigned to the plot paper [0,1]\n            'yref': 'y',\n            'x0': '1',\n            'y0': 0,\n            'x1': '2',\n            'y1': 7,\n            'fillcolor': '#d3d3d3',\n            'opacity': 0.2,\n            'line': {\n                'width': 0,\n            }\n        }]\n        ))\n\npy.iplot(go.Figure(data=data, layout=layout), filename='pyguide_5')\n```\n\n----------------------------------------\n\nTITLE: Adding Politico Logo to Existing Plotly Figure in Python\nDESCRIPTION: This snippet retrieves an existing figure and adds the Politico logo to the bottom of the chart. It shows how to position a logo below the chart area.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/logos/logos.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\n\nfig = py.get_figure('https://plotly.com/~Dreamshot/8155/')\n\nfig.layout.images = [dict(\n        source=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/politico.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.1, y=-0.2,\n        sizex=0.4, sizey=0.4,\n        xanchor=\"center\", yanchor=\"bottom\"\n      )]\n\npy.iplot(fig, fileopt='overwrite', filename='Logos/Foreign_Policy_Politico')\n```\n\n----------------------------------------\n\nTITLE: Filtering Rides Under 2 Hours\nDESCRIPTION: Creates a new DataFrame containing only rides under 2 hours duration using SQL query.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf2 = sqlCtx.sql(\"SELECT Duration as d1 from bay_area_bike where Duration < 7200\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting a Streaming Figure\nDESCRIPTION: Creates a layout with a title, combines it with the data trace to create a figure, and initializes the streaming plot by sending it to Plotly's servers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Add title to layout object\nlayout = Layout(title='Time Series')\n\n# Make a figure object\nfig = Figure(data=data, layout=layout)\n\n# (@) Send fig to Plotly, initialize streaming plot, open new tab\nunique_url = py.plot(fig, filename='s7_first-stream')\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphWidget\nDESCRIPTION: Creates a GraphWidget instance from the previously generated Plotly URL\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngraph = GraphWidget(url)\ng = graph\ngraph\n```\n\n----------------------------------------\n\nTITLE: Generating Circular Layout for Graph Nodes in Python\nDESCRIPTION: Arranges the graph nodes in a circular layout using igraph's built-in layout function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlayt=G.layout('circular') #circular layout\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from a Plotly Figure and Creating a New Histogram in Python\nDESCRIPTION: This code retrieves data from a public Plotly figure, extracts specific values, and creates a new histogram using plotly.graph_objects. It demonstrates data manipulation and creation of a new figure with custom layout settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/get-requests.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\ndata = py.get_figure(\"https://plotly.com/~PythonPlotBot/3483\").data\ndistance = [d['y'][0] for d in data]  # check out the data for yourself!\n\nfig = go.Figure()\nfig.add_histogram(y=distance, name=\"flyby distance\", histnorm='probability')\nxaxis = dict(title=\"Probability for Flyby at this Distance\")\nyaxis = dict(title=\"Distance from Earth (Earth Radii)\")\nfig.update_layout(title=\"data source: https://plotly.com/~AlexHP/68\", xaxis=xaxis, yaxis=yaxis)\n\nplot_url = py.plot(fig, filename=\"python-get-data\")\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame from Opportunity Data\nDESCRIPTION: Creates a Pandas DataFrame from the extracted opportunity amounts and owners data for easier analysis and grouping operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndf2 = pd.DataFrame({'Amounts':amounts,'Owners':owners})\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Custom Styling and Metadata\nDESCRIPTION: This snippet sets up custom styling for the notebook and publishes it with specific metadata using a custom publisher module. It includes setting fonts, CSS, and various publication details.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/legends/legend.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'legend.ipynb', 'python/legend/', 'Legends | plotly',\n    'How to configure and style the legend in Plotly with Python.',\n    title = 'Legends | plotly',\n    name = 'Legends',\n    thumbnail='thumbnail/legends.gif', language='python',\n    has_thumbnail='true', display_as='file_settings', order=13, \n    ipynb='~notebook_demo/14')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet demonstrates how to publish Plotly documentation with custom styling. It includes setting up custom fonts, CSS, and using the publisher module to publish the notebook as a documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/bubble-maps/bubble-maps.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'bubble-maps.ipynb', 'python/bubble-maps/', 'Bubble Maps',\n    'How to make bubble maps in Python with Plotly.',\n    title = 'Python Bubble Maps | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/bubble-map.jpg',\n    language='python',\n    page_type='example_index',\n    display_as='maps', order=3,\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Styling\nDESCRIPTION: Examples of restyling the graph including updating trace names and axis titles\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngraph.restyle({'name': ['control', 'experiment']})\ngraph.relayout({'xaxis.title': 'samples'})\ngraph.add_traces(go.Scatter(x=[1,2,3], y=[5, 4, 5], name='another sample'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Color Dimension using Plotly in Python\nDESCRIPTION: This snippet shows how to create a scatter plot where the color of the markers is determined by a variable. It uses a colorscale to map the variable values to colors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line_and_scatter/scatter.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\nimport numpy as np\n\ntrace1 = go.Scatter(\n    y = np.random.randn(500),\n    mode='markers',\n    marker=dict(\n        size=16,\n        color = np.random.randn(500), #set color equal to a variable\n        colorscale='Viridis',\n        showscale=True\n    )\n)\ndata = [trace1]\n\npy.iplot(data, filename='scatter-plot-with-colorscale')\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Series Line Chart of Daily Sales with Plotly\nDESCRIPTION: Python code that creates a line chart visualization using Plotly to display the quantity of tickets sold over time. The x-axis shows calendar dates and the y-axis displays the quantity sold.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlayout = go.Layout(title=\"Event Sales Per Day\", yaxis=dict(title=\"Sales Quantity\"))\ndata = [go.Scatter(x=df.caldate, y=df.quantity_sold)]\npy.iplot(go.Figure(data=data, layout=layout))\n```\n\n----------------------------------------\n\nTITLE: Creating FigureWidget with Background Image\nDESCRIPTION: Initializes a Plotly FigureWidget with invisible markers and sets the initial DataShader image as background.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/change-callbacks-datashader.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\n\nf = go.FigureWidget(data=[{'x': x_range, \n                           'y': y_range, \n                           'mode': 'markers',\n                           'marker': {'opacity': 0}}], # invisible trace to init axes and to support autoresize\n                    layout={'width': plot_width, 'height': plot_height})\n\n# Set background image\nf.layout.images = [go.layout.Image(\n    source = initial_img,  # plotly now performs auto conversion of PIL image to png data URI\n    xref = \"x\",\n    yref = \"y\",\n    x = x_range[0],\n    y = y_range[1],\n    sizex = x_range[1] - x_range[0],\n    sizey = y_range[1] - y_range[0],\n    sizing = \"stretch\",\n    layer = \"below\")]\n```\n\n----------------------------------------\n\nTITLE: Calculating Ideogram Lengths and Positions (Python)\nDESCRIPTION: This code calculates the lengths and positions of ideograms in the chord diagram based on the input data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrow_sum=[np.sum(matrix[k,:]) for k in range(L)]\n\n#set the gap between two consecutive ideograms\ngap=2*PI*0.005\nideogram_length=2*PI*np.asarray(row_sum)/sum(row_sum)-gap*np.ones(L)\n\ndef get_ideogram_ends(ideogram_len, gap):\n    ideo_ends=[]\n    left=0\n    for k in range(len(ideogram_len)):\n        right=left+ideogram_len[k]\n        ideo_ends.append([left, right])   \n        left=right+gap\n    return ideo_ends \n\nideo_ends=get_ideogram_ends(ideogram_length, gap)\nideo_ends\n```\n\n----------------------------------------\n\nTITLE: Generating a Box Plot of Wind Speed Standard Deviation with Plotly in Python\nDESCRIPTION: This code creates a box plot of the '10 Min Std Dev' column from the wind speed data. It uses Plotly's go.Box object to visualize the distribution and summary statistics of the data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/statistics-charts/python-Statistics-Charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n    go.Box(\n        y=wind_data['10 Min Std Dev'],\n    )\n]\n\npy.iplot(data, filename='wind-data-box-plot')\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up the notebook styling and publishes the documentation using Plotly's publisher module with specific metadata and styling configurations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/baseline-subtraction/python-Baseline-Subtraction.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Baseline-Subtraction.ipynb', 'python/baseline-subtraction/', 'Baseline Subtraction | plotly',\n    'Learn how to subtract baseline estimates from data in Python.',\n    title='Baseline Subtraction in Python | plotly',\n    name='Baseline Subtraction',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=2,\n    ipynb= '~notebook_demo/118')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks in Plotly Gantt Chart\nDESCRIPTION: This snippet demonstrates how to group tasks together in a Gantt chart. It uses different colors to represent task status (Complete, Incomplete, Not Started) and groups tasks with the same name.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gantt/gantt.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndf = [dict(Task=\"Job-1\", Start='2017-01-01', Finish='2017-02-02', Resource='Complete'),\n      dict(Task=\"Job-1\", Start='2017-02-15', Finish='2017-03-15', Resource='Incomplete'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Not Started'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Complete'),\n      dict(Task=\"Job-3\", Start='2017-03-10', Finish='2017-03-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-04-01', Finish='2017-04-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-05-18', Finish='2017-06-18', Resource='Not Started'),\n      dict(Task=\"Job-4\", Start='2017-01-14', Finish='2017-03-14', Resource='Complete')]\n\ncolors = {'Not Started': 'rgb(220, 0, 0)',\n          'Incomplete': (1, 0.9, 0.16),\n          'Complete': 'rgb(0, 255, 100)'}\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True, group_tasks=True)\npy.iplot(fig, filename='gantt-group-tasks-together', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Interactive Plot\nDESCRIPTION: Creates a basic interactive plot using iplot function in Jupyter notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\niplot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}])\n```\n\n----------------------------------------\n\nTITLE: Counting Complaints per Hour with SQL and Plotly in Python\nDESCRIPTION: This snippet uses SQL to query a SQLite database, counting complaints per hour. It then visualizes the results using Plotly's bar chart. The query uses strftime to extract the hour from the CreatedDate field.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT CreatedDate, '\n                               'strftime(\\'%H\\', CreatedDate) as hour,  '\n                               'count(*) as `Complaints per Hour`'\n                       'FROM data '\n                       'GROUP BY hour', disk_engine)\n\npy.iplot({\n    'data': [go.Bar(x=df['hour'], y=df['Complaints per Hour'])],\n    'layout': go.Layout(xaxis={'title': 'Hour in Day'},\n                     yaxis={'title': 'Number of Complaints'})}, filename='311/complaints per hour')\n```\n\n----------------------------------------\n\nTITLE: Highlighting Clusters of Scatter Points with Circle Shapes in Plotly\nDESCRIPTION: This code creates a scatter plot with four distinct data clusters and highlights each cluster with a colored circle. It uses numpy to generate random data points and then defines circle shapes based on the minimum and maximum values of each cluster.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/shapes/shapes.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nx0 = np.random.normal(2, 0.45, 300)\ny0 = np.random.normal(2, 0.45, 300)\n\nx1 = np.random.normal(6, 0.4, 200)\ny1 = np.random.normal(6, 0.4, 200)\n\nx2 = np.random.normal(4, 0.3, 200)\ny2 = np.random.normal(4, 0.3, 200)\n\ntrace0 = go.Scatter(\n    x=x0,\n    y=y0,\n    mode='markers',\n)\ntrace1 = go.Scatter(\n    x=x1,\n    y=y1,\n    mode='markers'\n)\ntrace2 = go.Scatter(\n    x=x2,\n    y=y2,\n    mode='markers'\n)\ntrace3 = go.Scatter(\n    x=x1,\n    y=y0,\n    mode='markers'\n)\nlayout = {\n    'shapes': [\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'x0': min(x0),\n            'y0': min(y0),\n            'x1': max(x0),\n            'y1': max(y0),\n            'opacity': 0.2,\n            'fillcolor': 'blue',\n            'line': {\n                'color': 'blue',\n            },\n        },\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'x0': min(x1),\n            'y0': min(y1),\n            'x1': max(x1),\n            'y1': max(y1),\n            'opacity': 0.2,\n            'fillcolor': 'orange',\n            'line': {\n                'color': 'orange',\n            },\n        },\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'x0': min(x2),\n            'y0': min(y2),\n            'x1': max(x2),\n            'y1': max(y2),\n            'opacity': 0.2,\n            'fillcolor': 'green',\n            'line': {\n                'color': 'green',\n            },\n        },\n        {\n            'type': 'circle',\n            'xref': 'x',\n            'yref': 'y',\n            'x0': min(x1),\n            'y0': min(y0),\n            'x1': max(x1),\n            'y1': max(y0),\n            'opacity': 0.2,\n            'fillcolor': 'red',\n            'line': {\n                'color': 'red',\n            },\n        },\n    ],\n    'showlegend': False,\n}\ndata = [trace0, trace1, trace2, trace3]\nfig = {\n    'data': data,\n    'layout': layout,\n}\npy.iplot(fig, filename='clusters')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Python\nDESCRIPTION: This snippet shows how to use the Plotly publisher to publish the documentation for population pyramid charts. It includes setting up custom CSS and fonts, and specifying metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pyramid/pyramid-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'pyramid-charts.ipynb', 'python/population-pyramid-charts/', 'Python Population Pyramid Charts | Plotly',\n    'How to make Population Pyramid Charts in Python with Plotly.',\n    title = 'Population Pyramid Charts | Plotly',\n    name = 'Population Pyramid Charts',\n    thumbnail='thumbnail/pyramid.jpg', language='python',\n    has_thumbnail='true', display_as='basic', order=5.01,\n    ipynb= '~notebook_demo/221')\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Graph Widget\nDESCRIPTION: Initializes and displays a GraphWidget instance using a Plotly URL\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngraph = GraphWidget('https://plotly.com/~bronsolo/63')\ng = graph\n#line_plot = GraphWidget('https://plotly.com/~chris/2150')\n\ndisplay(g)\n# display(line_plot)\n```\n\n----------------------------------------\n\nTITLE: Computing Event-related Potential\nDESCRIPTION: Averages epochs to compute event-related potential and visualizes using butterfly plots and topography maps.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nevoked = epochs.average()\n\nfig = evoked.plot(show=False)  # butterfly plots\nupdate = dict(layout=dict(showlegend=False), data=[dict(name=raw.info['ch_names'][p]) for p in picks[:10]])\npy.iplot_mpl(fig, update=update)\n\n# topography plots\nevoked.plot_topomap(times=np.linspace(0.05, 0.15, 5), ch_type='mag');\nevoked.plot_topomap(times=np.linspace(0.05, 0.15, 5), ch_type='grad');\nevoked.plot_topomap(times=np.linspace(0.05, 0.15, 5), ch_type='eeg');\n```\n\n----------------------------------------\n\nTITLE: Converting Image Data to Heatmap Values in Python\nDESCRIPTION: Processes an image by converting it to a NumPy array and summing RGB values for each pixel to create a 2D data array suitable for a heatmap visualization. The resulting z_data will be used as input for the heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narr = np.array(img)\nz_data = []\n\nfor i in range(500):\n    k = []\n    for j in range(500):\n        k.append(sum(arr[i][j]))\n    z_data.append(k)\n```\n\n----------------------------------------\n\nTITLE: Interior Filled Area Chart\nDESCRIPTION: Demonstrates interior filling between two lines using custom colors and line styles.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 4, 8, 3],\n    fill= None,\n    mode='lines',\n    line=dict(\n        color='rgb(143, 19, 131)',\n    )\n)\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 6, 2, 6],\n    fill='tonexty',\n    mode='lines',\n    line=dict(\n        color='rgb(143, 19, 131)',\n    )\n)\n\ndata = [trace0, trace1]\npy.iplot(data, filename='filling-interior-area')\n```\n\n----------------------------------------\n\nTITLE: Documentation Examples Rendering with Liquid Templates\nDESCRIPTION: Liquid template code that filters and displays R-specific documentation posts. It selects posts with language 'r', display type 'file_settings', and layout 'base', sorts them by order, and includes them in the page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-fundamental-index.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\t\t{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"file_settings\" | where: \"layout\",\"base\" | sort: \"order\" %}\n        {% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Bullet Chart Colors\nDESCRIPTION: Shows how to customize the colors of range and measure columns using color interpolation\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndata = pd.read_json('https://cdn.rawgit.com/plotly/datasets/master/BulletData.json')\n\nmeasure_colors=['rgb(63,102,153)', 'rgb(120,194,195)']\nrange_colors=['rgb(245,225,218)', 'rgb(241,241,241)']\n\n\nfig = ff.create_bullet(\n    data, orientation='h', markers='markers', measures='measures',\n    ranges='ranges', subtitles='subtitle', titles='title',\n    range_colors=range_colors,\n    measure_colors=measure_colors\n)\npy.iplot(fig, filename='bullet chart - custom colors')\n```\n\n----------------------------------------\n\nTITLE: Color Mapping Function for Z-Values\nDESCRIPTION: Function to map z-coordinate values to RGB colors using a matplotlib colormap for surface visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef map_z2color(zval, colormap, vmin, vmax):\n    #map the normalized value zval to a corresponding color in the colormap\n    \n    if vmin>vmax:\n        raise ValueError('incorrect relation between vmin and vmax')\n    t=(zval-vmin)/float((vmax-vmin))#normalize val\n    R, G, B, alpha=colormap(t)\n    return 'rgb('+'{:d}'.format(int(R*255+0.5))+','+'{:d}'.format(int(G*255+0.5))+\\\n           ','+'{:d}'.format(int(B*255+0.5))+')'\n```\n\n----------------------------------------\n\nTITLE: Scaling Dataset Values\nDESCRIPTION: Creates scatter plots comparing original data with scaled data (multiplied by 2) using Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = data['Date']\ny = data['A']\ny2 = [2.*k for k in y]\n\ntrace1 = go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',\n    name='Data',\n    marker=dict(\n        size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x=x,\n    y=y2,\n    mode='markers',\n    name='Scaled by 2',\n    marker=dict(\n        size=12,\n        symbol='x'\n    )\n)\n\ntrace_data = [trace1, trace2]\npy.iplot(trace_data, filename='scale-a-dataset')\n```\n\n----------------------------------------\n\nTITLE: Importing MNE Sample Dataset\nDESCRIPTION: Loads the MNE sample dataset, which will be downloaded automatically if not already present. The dataset is approximately 2GB in size.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mne.datasets import sample\ndata_path = sample.data_path()\n\nraw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version for Exponential Fitting Compatibility\nDESCRIPTION: A simple version check snippet to ensure the Plotly library is at version 1.9.2 or higher, which is required for exponential fits functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/exponential-fit/Exponential-Fits.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamline Plot with Source Point in Python using Plotly\nDESCRIPTION: Demonstrates how to create a streamline plot with a source point overlaid. The example calculates a vector field representing flow from a source point, visualizes it as streamlines, and adds a marker for the source point location.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/streamline/streamline.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 50\nx_start, x_end = -2.0, 2.0\ny_start, y_end = -1.0, 1.0\nx = np.linspace(x_start, x_end, N)\ny = np.linspace(y_start, y_end, N)\nX, Y = np.meshgrid(x, y)\nsource_strength = 5.0\nx_source, y_source = -1.0, 0.0\n\n# Compute the velocity field on the mesh grid\nu = (source_strength/(2*np.pi) *\n     (X-x_source)/((X-x_source)**2 + (Y-y_source)**2))\nv = (source_strength/(2*np.pi) *\n     (Y-y_source)/((X-x_source)**2 + (Y-y_source)**2))\n\n# Create streamline figure\nfig = ff.create_streamline(x, y, u, v,\n                           name='streamline')\n\n# Add source point\nsource_point = go.Scatter(x=[x_source], y=[y_source],\n                          mode='markers',\n                          marker=go.Marker(size=14),\n                          name='source point')\n\n# Add source point to figure\nfig['data'].append(source_point)\npy.iplot(fig, filename='streamline_source')\n```\n\n----------------------------------------\n\nTITLE: Displaying Large Variance MCMC Plot in Python\nDESCRIPTION: Uses Plotly's iplot function to display the large variance MCMC results as an interactive plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_40\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig6, filename='MH algorithm large proposal variance')\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Plot for Deletion in Plotly\nDESCRIPTION: This code creates a simple plot using Plotly and returns the URL. The resulting plot will be used as an example for demonstrating the deletion process.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = py.plot({\"data\": [{\"x\": [1, 2, 3],\n                         \"y\": [4, 2, 4]}],\n               \"layout\": {\"title\": \"Let's Trash This Plot<br>(then restore it)\"}},\n              filename='trash example')\n\nurl\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Price Plot\nDESCRIPTION: Creating a line plot of Apple stock prices using data from external CSV source.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],\n                  name='Share Prices (in USD)')\nlayout = go.Layout(title='Apple Share Prices over time (2014)',\n                   plot_bgcolor='rgb(230, 230,230)', \n                   showlegend=True)\nfig = go.Figure(data=[trace], layout=layout)\n\npy.iplot(fig, filename='apple-stock-prices')\n```\n\n----------------------------------------\n\nTITLE: Finding Matrix Inverse\nDESCRIPTION: Calculates and visualizes the inverse of a 2x2 matrix using NumPy and Plotly's heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmatrix = np.matrix(\n    [[1, 4],\n     [2, 0]]\n)\n\ninverse = np.linalg.inv(matrix)\n\ncolorscale = [[0, '#F1FAFB'], [1, '#A0E4F1']]\nfont=['#000000', '#000000']\n\ntable = FF.create_annotated_heatmap(inverse.tolist(), colorscale=colorscale, font_colors=font)\npy.iplot(table, filename='inverse')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check for the Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with IPython Widgets\nDESCRIPTION: Uses IPython's Image widget to display a specific car image from the previously loaded image_data dictionary.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import Image\nImage(value=image_data['2012_Chevrolet_Camaro_Coupe'])\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Electronic Structure Visualization in Python\nDESCRIPTION: Imports necessary Python libraries including numpy for numerical operations, pymatgen for materials analysis and electronic structure manipulation, and Plotly for interactive data visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pymatgen.io.vaspio.vasp_output import Vasprun    # read vasprun.xml output file of VASP\nfrom pymatgen.electronic_structure.core import Spin\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Plots with Pandas DataFrames\nDESCRIPTION: Demonstrates how to create a distribution plot using data from a Pandas DataFrame. This example creates a plot comparing two years of data by extracting columns from the DataFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'2012': np.random.randn(200),\n                   '2013': np.random.randn(200)+1})\npy.iplot(ff.create_distplot([df[c] for c in df.columns], df.columns, bin_size=.25),\n                            filename='distplot with pandas')\n```\n\n----------------------------------------\n\nTITLE: Calculating Epoch Drop Statistics with NumPy\nDESCRIPTION: Calculates the percentage of dropped epochs for each channel using NumPy operations and Counter collection.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nperc = 100 * np.mean([len(d) > 0 for d in drop_log if not any(r in ['IGNORED'] for r in d)])\nscores = Counter([ch for d in drop_log for ch in d if ch not in ['IGNORED']])\nch_names = np.array(list(scores.keys()))\ncounts = 100 * np.array(list(scores.values()), dtype=float) / len(drop_log)\norder = np.flipud(np.argsort(counts))\n```\n\n----------------------------------------\n\nTITLE: Facet Grid by Row\nDESCRIPTION: Creates a facet grid plot segmented by rows with custom marker colors. Uses vehicle data to plot displacement vs city MPG.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\nfig = ff.create_facet_grid(\n    mpg,\n    x='displ',\n    y='cty',\n    facet_row='cyl',\n    marker={'color': 'rgb(86, 7, 100)'},\n)\n\npy.iplot(fig, filename='facet by row')\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Line Chart with Source Attribution in Plotly\nDESCRIPTION: Code for adding source attribution annotation to a plotly figure. Demonstrates adding text annotations with custom positioning and styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Source: PewResearch Center & ' +\n                                   'Storytelling with data',\n                              font=dict(family='Arial',\n                                        size=12,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='news-source')\n```\n\n----------------------------------------\n\nTITLE: Running the Adaptive Metropolis Algorithm with Initial Parameters\nDESCRIPTION: Executes the Metropolis-Hastings algorithm with tuning, setting initial values for intercept, slope, and precision parameters. The algorithm runs for twice the number of iterations with a tuning phase.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ntrace_tuned, acc = metropolis_tuned(n_iter*2, initial_values=(1,0,1), prop_var=5, tune_interval=25, tune_for=n_iter)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example in IPython Notebook\nDESCRIPTION: This snippet shows how to embed a Dash application within an IPython notebook using an IFrame. It displays an interactive web-based application created with Dash, demonstrating text annotations in a plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-text-annotationsplot/\", width=\"100%\", height=\"750px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example Source Code in IPython Notebook\nDESCRIPTION: This snippet embeds the source code of a Dash application within an IPython notebook using an IFrame. It allows users to view the implementation details of the text annotations plot example.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/annotations/text-and-annotations.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-text-annotationsplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Basic Polar Chart Creation\nDESCRIPTION: Creates a basic polar scatter plot with markers using Plotly. Demonstrates plotting points with r and theta coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatterpolar(\n        r = [0.5,1,2,2.5,3,4],\n        theta = [35,70,120,155,205,240],\n        mode = 'markers',\n        marker = dict(\n            color = 'peru'\n        )\n    )\n]\n\nlayout = go.Layout(\n    showlegend = False\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename = 'polar-basic')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plotly Figure Object\nDESCRIPTION: Demonstrates how to retrieve a figure object from Plotly's servers using a URL\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# (@) Retrieve figure object using the figure's URL\nfig = py.get_figure(\"https://plotly.com/~etpinard/329\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Data with Default Settings\nDESCRIPTION: Code showing how to plot data using plotly.plot() with default settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# (@) Call the plot() function of the plotly.plotly submodule,\n#     save figure as 's0_first_plot'\npy.plot(data, filename='s0_first_plot')\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hovertemplate in Plotly\nDESCRIPTION: Demonstrates the use of hovertemplate for creating custom hover text with formatted values and HTML styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.io as pio\n\n\ndata = [\n    go.Scatter(\n        x = [1,2,3,4,5],\n        y = [2.02825,1.63728,6.83839,4.8485,4.73463],\n        hovertemplate = '<i>Price</i>: $%{y:.2f}'\n                        '<br><b>X</b>: %{x}<br>'\n                        '<b>%{text}</b>',\n        text = ['Custom text {}'.format(i + 1) for i in range(5)],\n        showlegend = False\n    ),\n    go.Scatter(\n        x = [1,2,3,4,5],\n        y = [3.02825,2.63728,4.83839,3.8485,1.73463],\n        hovertemplate = 'Price: %{y:$.2f}<extra></extra>',\n        showlegend = False\n    )\n]\n\nlayout = go.Layout(\n    title = \"Set hover text with hovertemplate\",\n    template = pio.templates['plotly'],\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig, filename = \"hovertemplate-basic\")\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob Data Attribute Configuration\nDESCRIPTION: Demonstrates how to configure jQuery Knob options using HTML data attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" class=\"dial\" data-min=\"-50\" data-max=\"50\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Plot for Permanent Deletion in Plotly\nDESCRIPTION: This code creates another plot that will be used to demonstrate the permanent deletion process. It's important to note that this deletion cannot be undone.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurl = py.plot({\"data\": [{\"x\": [1, 2, 3],\n                         \"y\": [3, 2, 1]}],\n               \"layout\": {\"title\": \"Let's Delete This Plot<br><b>FOREVER!!!!</b>\"}},\n              filename='PERMANENT delete ex')\nurl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plotly Documentation Environment\nDESCRIPTION: This snippet sets up the environment for Plotly documentation, including custom CSS and font imports. It also installs and uses a publisher package to publish the notebook as documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-FFT-Filters.ipynb', 'python/fft-filters/', 'FFT Filters | plotly',\n    'Learn how filter out the frequencies of a signal by using low-pass, high-pass and band-pass FFT filtering.',\n    title='FFT Filters in Python | plotly',\n    name='FFT Filters',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='signal-analysis', order=2)\n```\n\n----------------------------------------\n\nTITLE: Overlaid Area Chart Without Boundary Lines\nDESCRIPTION: Creates an overlaid area chart without boundary lines by setting mode='none' for both traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[0, 2, 3, 5],\n    fill='tozeroy',\n    mode= 'none'\n)\ntrace2 = go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[3, 5, 1, 7],\n    fill='tonexty',\n    mode= 'none'\n)\n\ndata = [trace1, trace2]\npy.iplot(data, filename='basic-area-no-bound')\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Code\nDESCRIPTION: Embedding the source code view of the Dash application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-plotfromcsvplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating Python Functions Example\nDESCRIPTION: Example demonstrating basic Python function definition and usage with print and addition operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef somePrintFunction():\n\n    print(\"boo\")\n\nsomePrintFunction()\n\n\n\n\n>>>print(new_z)\n10\n\ndef someAddFunction(a, b):\n\n    print(a+b)\n\n\n\n\n>>>someAddFunction(12,451)\n463\n```\n\n----------------------------------------\n\nTITLE: Using Cufflinks with Plotly\nDESCRIPTION: Shows how to create plots using Cufflinks library integration with Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport cufflinks as cf\n\niplot(cf.datagen.lines().iplot(asFigure=True,\n                               kind='scatter',xTitle='Dates',yTitle='Returns',title='Returns'))\n```\n\n----------------------------------------\n\nTITLE: Setting Layout for Soil Types Ternary Plot in Python\nDESCRIPTION: This code defines the layout for the soil types ternary plot, including axis settings, plot size, and annotations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayout = {\n        'ternary': {\n                    'sum': 100,\n                    'aaxis': makeAxis('Clay'),\n                    'baxis': makeAxis('Sand'),\n                    'caxis': makeAxis('Silt')\n                    },\n        'showlegend': False,\n        'width': 700,\n        'annotations': [{\n            'showarrow': False,\n            'text': 'Replica of Daven Quinn\\'s block',\n            'x': 0.50,\n            'y': 1.3\n        }]\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Plotly in Python\nDESCRIPTION: This snippet creates a histogram using Plotly's graph objects. It sets the bin size, color, and layout for the histogram of the Weibull distribution data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/frequency-counts/python-Frequency-Counts.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Histogram(x=x, xbins=dict(start=np.min(x), size=0.25, end=np.max(x)),\n                   marker=dict(color='rgb(0, 0, 100)'))\n\nlayout = go.Layout(\n    title=\"Histogram Frequency Counts\"\n)\n\nfig = go.Figure(data=go.Data([trace]), layout=layout)\npy.iplot(fig, filename='histogram-freq-counts')\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying an Image for Heatmap Processing\nDESCRIPTION: Downloads an image from a URL using the requests library and opens it with PIL for processing. This image will be used as the source data for generating a heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap-webgl/heatmap-webgl.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimage_url = 'https://images.plot.ly/plotly-documentation/images/heatmap-galaxy.jpg'\n\nresponse = requests.get(image_url)\nimg = Image.open(BytesIO(response.content))\nimg\n```\n\n----------------------------------------\n\nTITLE: Publishing the Tutorial with the Publisher Package\nDESCRIPTION: Uses the publisher package to publish the tutorial to the Plotly documentation site. This snippet installs the publisher package, then uses it to publish the tutorial with appropriate metadata including title, description, and settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/email-reports.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n! pip install publisher --upgrade\n\nimport publisher\npublisher.publish('email-reports', '/python/email-reports', \n                  'Emailing Plotly Graphs with Python', \n                  'How to email Plotly graphs in HTML reports with Python.',\n                   uses_plotly_offline=True)\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Wind Speed Data for Outlier Analysis\nDESCRIPTION: This code imports wind speed data from a CSV file, creates a sample dataframe, and displays it using Plotly's table creation function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = data[0:10]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colorscale for Diabetes Classification\nDESCRIPTION: Creates a discrete colorscale with blue for non-diabetic patients and red for diabetic patients to visually distinguish between the two groups in the plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npl_colorscaled = [[0., '#119dff'],\n                 [0.5, '#119dff'],\n                 [0.5, '#ef553b'],\n                 [1, '#ef553b']]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plotly Server Communication in Python\nDESCRIPTION: Configures the necessary components to communicate with Plotly's server for visualization. Imports tools for Python/Plotly integration and graph objects for building plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# (*) To communicate with Plotly's server, sign in with credentials file\nimport plotly.plotly as py  \n\n# (*) Useful Python/Plotly tools\nimport plotly.tools as tls   \n\n# (*) Graph objects to piece together plots\nfrom plotly.graph_objs import *\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy with Basic Authentication in Bash\nDESCRIPTION: Configures the HTTP_PROXY environment variable with username and password authentication for corporate proxies that require authentication. This syntax embeds the credentials directly in the proxy URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/proxy-configuration.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export HTTP_PROXY=\"http://user:pass@10.10.1.10:3128/\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Colorscale in Plotly Contour Plot\nDESCRIPTION: Demonstrates how to apply a custom colorscale (Jet) to a contour plot for better visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/contour/contour.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n     go.Contour(\n        z=[[10, 10.625, 12.5, 15.625, 20],\n           [5.625, 6.25, 8.125, 11.25, 15.625],\n           [2.5, 3.125, 5., 8.125, 12.5],\n           [0.625, 1.25, 3.125, 6.25, 10.625],\n           [0, 0.625, 2.5, 5.625, 10]],\n        colorscale='Jet',\n    )]\npy.iplot(data)\n```\n\n----------------------------------------\n\nTITLE: Initializing PEP-8 Compliant Imports in Python\nDESCRIPTION: Demonstrates proper Python import organization following PEP-8 standards, including absolute imports and third-party library imports for Plotly functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import absolute_import\n\nimport copy\nimport json\nimport os\nimport time\nimport warnings\nimport webbrowser\n\nimport six\nimport six.moves\nfrom requests.compat import json as _json\n\nfrom plotly import exceptions, files, session, tools, utils\nfrom plotly.api import v1, v2\nfrom plotly.plotly import chunked_requests\nfrom plotly.grid_objs import Grid, Column\nfrom plotly.dashboard_objs import dashboard_objs as dashboard\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring compatibility with the tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox-county-choropleth/mapbox-county-choropleth.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Cufflinks Documentation with Plotly Publisher in Python\nDESCRIPTION: This snippet demonstrates how to use the Plotly publisher to publish the Cufflinks documentation. It specifies various metadata for the publication.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'cufflinks.ipynb', 'ipython-notebooks/cufflinks/', 'Cufflinks - Easy Pandas DataFrame Graphing with Plotly | plotly',\n    'An overview of cufflinks, a library for easy interactive Pandas charting with Plotly.',\n    title = 'Cufflinks - Easy Pandas DataFrame Graphing with Plotly | plotly',\n    name = 'Cufflinks',\n    thumbnail='thumbnail/line-plot.jpg', language='python',\n    ipynb= '~notebook_demo/3')\n```\n\n----------------------------------------\n\nTITLE: Creating a Donut Chart with Plotly in Python\nDESCRIPTION: This code demonstrates how to create a donut chart using Plotly. It uses the 'hole' attribute to create the donut shape and includes multiple charts in a grid layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfig = {\n  \"data\": [\n    {\n      \"values\": [16, 15, 12, 6, 5, 4, 42],\n      \"labels\": [\n        \"US\",\n        \"China\",\n        \"European Union\",\n        \"Russian Federation\",\n        \"Brazil\",\n        \"India\",\n        \"Rest of World\"\n      ],\n      \"domain\": {\"column\": 0},\n      \"name\": \"GHG Emissions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\": [27, 11, 25, 8, 1, 3, 25],\n      \"labels\": [\n        \"US\",\n        \"China\",\n        \"European Union\",\n        \"Russian Federation\",\n        \"Brazil\",\n        \"India\",\n        \"Rest of World\"\n      ],\n      \"text\":[\"CO2\"],\n      \"textposition\":\"inside\",\n      \"domain\": {\"column\": 1},\n      \"name\": \"CO2 Emissions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Global Emissions 1990-2011\",\n        \"grid\": {\"rows\": 1, \"columns\": 2},\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"GHG\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"CO2\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\npy.iplot(fig, filename='donut')\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Scatter Plot with Marker Styling in JSON\nDESCRIPTION: This code snippet defines a scatter plot configuration in Plotly with marker styling. It includes a large array of data points, marker styling properties, error bar configuration, and axis bindings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n8,0.0204606360804813,0.0206048756529049,0.020315324030598,0.0202977952963808,0.0204909345279313,0.0195034709965878,0.0206740220284621,0.0210964118711375,0.0218097796479627,0.0222035536949604,0.0217343382846101,0.0216440680349267,0.0220361289476519,0.0230571960727422,0.0236750306283726,0.023462684893619,0.0253773699392287,0.0257541349772209,0.0286080372743157,0.0308964438360756,0.0348995724209165,0.0349661730174598,0.0370728352493982,0.0381234531211546,0.0391280744978494,0.0380964739905825,0.0376297037129641,0.0366705983024584,0.0366139385285106,0.0364610987732412,0.035954993979822,0.0356979869174991,0.0347037011446602,0.0337216742079365,0.0332595765039263,0.0336968114449634,0.0324000275627627,0.0336085852906211,0.0343522828903616,0.0344494187405205,0.0337850210584142,0.0339821810797461,0.0348209144831242,0.0344511109284677,0.0332148609127699,0.0339330002188343,0.0332886872221007,0.0321325176162124,0.0314337825606411,0.0324204938967307,0.0310072239703231,0.0314118789066398,0.0305906981802364,0.0306151088255532,0.0308219023196704,0.0288563643511385,0.0292987533694244,0.0285070997026562,0.0285718150339056,0.0278389664445856,0.0275772360651015,0.0271068760989122,0.0283442280477121,0.0272884360763897,0.0274598413829897,0.0266357923778726,0.0271929549797071,0.0278445924799928,0.0272887677841556,0.0275515168286075,0.0272437398265213,0.0270408754310767,0.0259980768545888,0.0265029376053513,0.0266423763080136,0.0280521094564904,0.0274443907478264,0.0278829588885789,0.0275984727488309,0.0279566660625964,0.0295119032373449,0.0295690385429903,0.0296629035173177,0.0324053888602622,0.0351329587108528,0.0355921625161523,0.036723957738686,0.0363276640360074,0.0351511486243678,0.0354089231537057,0.0350943957447553,0.0337356138456764,0.035254240249501,0.0351463083498129,0.0348218336648867,0.0343020797461236,0.0356049221387346,0.0352453201370119,0.0341920109929294,0.0349107464800358,0.0357186257660191,0.0374868301819711,0.0391167219762414,0.0401187935356229,0.0406520243816973,0.0419561373550125,0.0427485203266082,0.0442228409851281,0.0445841188219612,0.0454239801372461,0.0467250676176202,0.0468217494578127,0.0482246269330479,0.0495197924541269,0.051237590828909,0.0516855378281009,0.0494338296431541,0.0494489726863492,0.0488328988540877,0.0481989554326485,0.0476825608536179,0.0480356059764734,0.0450178611821243,0.0453004464799724,0.0438089313637351,0.0420889969221862,0.0404078646236568,0.0396667162624609,0.0382692185143488,0.0373248077715082,0.0371104274954917,0.0371524641810727,0.0358315712754192,0.0348323170731707,0.0361204664308562,0.0360136800409218,0.0353395843892549,0.0353664506110323,0.0345675264274179,0.035218864299078,0.0354700422793808,0.0350207489835944,0.0350773139501624,0.0352879361076082,0.0348715105387401,0.0355059386410375,0.0356990095024029,0.0343390076211146,0.0345251948530335,0.03470325745568,0.0339647398529922,0.033982386617504,0.0325282300803712,0.0350392847014863,0.034939648561235,0.0348363557606604,0.0351228404593147,0.0353823312914052,0.0345687323135994,0.0337756483180682,0.0344716013738862,0.0341644769017797,0.0337892962599444,0.03262561046271,0.0326407040995269,0.0325094035464804,0.0324770013094899,0.0311328699040668,0.0312429101199144,0.0304936358240454,0.0299336090014992,0.029879182921008,0.0291995411618145,0.02968625485734,0.0288746875500228,0.0284484986198213,0.0284981207553047,0.0283823029439113,0.0281481420834374,0.0270040295362965,0.0277135031274273,0.0267395406975319,0.0269568730843479,0.0279032784211385,0.0269041488772284,0.0267325483428506,0.026585707081388,0.026489904737133,0.0271378907011502,0.0258099343285521,0.0251693505861356,0.0262158470499066,0.0258195426599597,0.0266152464044935,0.0262591876834504,0.0262993137377662,0.0265923104238629,0.0267266504613673,0.0270862450207628,0.0268312412718982,0.027153652190349,0.0267294144124231,0.0264967150177501,0.0272636839867472,0.0270150061106325,0.0263759310623617,0.0276733884508979,0.0287015999904168,0.0293837312712611,0.0297103844943579,0.0308896899095271,0.0313997758578207,0.0318195713191128,0.0327800583021001,0.0340212067899767,0.0334028649121488,0.0345415221835177,0.0343276449703207,0.033870757772404,0.0341440543405028,0.0343215570228942,0.0347515082437558,0.0350623041952277,0.0360756812726503,0.0363733964437688,0.0370094892111115,0.0369960461942175,0.0367784930779087,0.0380201728544394,0.0391287233669409,0.0383426627324889,0.0380473658020775,0.0379773867395592,0.036445992220615,0.0370525320844325,0.0369834334959928,0.0360485389227575,0.0354666903548986,0.0349447428536149,0.0351176112314678,0.0352318237831177,0.0350857622046214,0.0343125012007454,0.0336306348487523,0.0334039951392855,0.0335039802728564,0.0326747633164387,0.0323952704510192,0.0329491178570474,0.0327441697218481,0.0322848691833872,0.0317213124117107,0.030109138494429,0.0301232747613547,0.0301629238221048,0.0300806904187711,0.0292935682171981,0.0288761677027329,0.0278765795153444,0.0273032129424027,0.0278255685848387,0.0270931503750895,0.0269421269703761,0.0287670975146281,0.0279325408461718,0.0278927404514215,0.0282378628210852,0.028046454282106,0.027991555369228,0.0273988992581957,0.0277384532058346,0.0277036533889671,0.0279357526169956,0.0272503018288593,0.0272454811146894,0.0275801274302314,0.0275837210339343,0.026337671593921,0.0272076301512606,0.0254911547693128,0.0258209882937947,0.0259848252464142,0.0267131328494747,0.0267514983863532,0.0263782429245283,0.0261501923891231,0.0257522413647216,0.0252606741325257,0.0244361868532948,0.0249392932338549,0.0243851497918743,0.0241841331884042,0.0243316651617785,0.0235674744022319,0.0230113159641916,0.0236029915589054,0.0231878991792474,0.0229444254433521,0.0233487367613535,0.0215797808967541,0.021944085584474,0.0225206281993648,0.0226680911938866,0.0223538264512441,0.022767189227867,0.0226712346075674,0.0219996609888307,0.0217349005138257,0.0215126534432485,0.021982646982647,0.0207873528925442,0.0215621419926666,0.0207952869756778,0.021329672653503,0.021572172792209,0.0208796789722534,0.0211323208397195,0.0206207642316463,0.0203800036367396,0.0201377905071318,0.0203149023404134,0.0208328887940538,0.020372482756415,0.0194601158162704,0.0204273495176974,0.0200300574920426,0.0203516475733484,0.0207073691062893,0.0198811021729603,0.0195408914516545,0.0198939506725983,0.0198592859962777,0.0212137221752606,0.0214298032287242,0.0215966238790223,0.0220359054188438,0.0218601874934167,0.0227459289558061,0.0230732293758697,0.024659453023777,0.024985743922363,0.0268928828583213,0.0279491934441802,0.0288166940014656,0.0285297850677155,0.0286242917970411,0.0289146558027786,0.0299202844845284,0.0292014199142628,0.0291561292832727,0.0291213272938686,0.0287973366625052,0.0285879605568606,0.0287568802575553,0.0294701597338001,0.0298638498788509,0.0294282220794562,0.0297465776593468,0.0296228842644812,0.0304765187419216,0.0308494003705923,0.0318875092916334,0.0309848015954886,0.0305628847845207,0.0306225778436845,0.0299478005583488,0.0293892881253705,0.0284820963809211,0.0286455481327346,0.0279339736222842,0.029023007167736,0.0279050068481688,0.0280275907261849,0.0282583562680963,0.0277241083202993,0.0272028707710431,0.0269652448710927,0.0273969343710703,0.0269368959404481,0.0269228419988191,0.0263941352394257,0.0270412226156792,0.0262016275691107,0.0259636535923382,0.0258738468197928,0.0254244160899654,0.0250045579466957,0.024777357981379,0.0254560896776955,0.0250966421076735,0.0254570047138863,0.0244729029590056,0.0237328110143895,0.0241191993392736,0.0237267664228679,0.023870109058237,0.023383897941681,0.0234351725084438,0.0239969765481812,0.0236948770813632,0.0228573145409509,0.0224356729534577,0.0228994914926656,0.02251448358527,0.0236747024027361,0.0230284373109221,0.0223605662063444,0.0227382872924509,0.0224423931034254,0.0231292607187006,0.0236718718957365,0.0233799918614999,0.0236988755428927,0.0238997116975499,0.0238901317916939,0.0252071470257545,0.0253207514843199,0.0246846508687535,0.0257381369958573,0.0251120456929405,0.0275858216434512,0.0281557414728326,0.0293210585371295,0.0309396974216919,0.0310963646666164,0.0329696223908049,0.0344620093791083,0.036881870825218,0.0393784616992371,0.0420950254893898,0.0437916682975198,0.0451551076153814,0.0472304745524197,0.0478734139307175,0.0474923480755532,0.0481466434827827,0.0487390646412033,0.0498135884149012,0.0493453689473377,0.0489189425628497,0.0487188869065158,0.048905111851068,0.0491636805816074,0.0495647982697671,0.0479976903184301,0.0467584236605351,0.0468513367375324,0.0472580499069591,0.0470022764396316,0.0467654702453278,0.0485550730176732,0.0461674537759551,0.0450635665454102,0.0444211051857828,0.0441327555952861,0.0448149518168788,0.0444630462183337,0.0447799648292216,0.0441125967188235,0.0442593288282581,0.044643726197121,0.0434807419511074,0.0425215621352976,0.0418293730131926,0.0408610706387906,0.0408918166602682,0.0405519157520218,0.0403166252101388,0.040340243506583,0.0404181174638259,0.040278693679217,0.0396632120998043,0.0385034965036299,0.0385067391462337,0.0381045954672202,0.0390124437323695,0.0395415707991254,0.0378739686359739,0.0370300882122658,0.0372366533868074,0.0368816546440722,0.0371665916197347,0.0358295732195552,0.0356276086605975,0.0355738071667648,0.0351268697937214,0.0340039312919975,0.0327776351151127,0.0321227808883484,0.0325692322066761,0.0326500104494188,0.0305008766439861,0.0309768917383398,0.0297050702271821,0.0301510343386389,0.0301009314744063,0.0290230831466271,0.0281506024288415,0.0284449877176327,0.0272622510362181,0.0278280801400947,0.026899986422224,0.0265558477566239,0.0266102962839264],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Graph with Plotly in Python\nDESCRIPTION: Creates a simple scatter plot and publishes it with public visibility using chart_studio. Public plots can be viewed by anyone even if they're not logged into Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3],\n        y=[1, 3, 1]\n    )\n]\n\npy.iplot(data, filename='privacy-public', sharing='public')\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Wind Speed Data with Plotly\nDESCRIPTION: This code loads wind speed data from a CSV file, creates a sample dataframe, and displays it using Plotly's create_table function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/fft-filters/python-FFT-Filters.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')\ndf = data[0:10]\n\ntable = ff.create_table(df)\npy.iplot(table, filename='wind-data-sample')\n```\n\n----------------------------------------\n\nTITLE: Interactive Hover Points Area Chart\nDESCRIPTION: Shows how to implement selective hover interactions on points and fills in area charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace0 = go.Scatter(\n    x=[0,0.5,1,1.5,2],\n    y=[0,1,2,1,0],\n    fill= 'toself',\n    fillcolor = '#ab63fa',\n    hoveron = 'points+fills',\n    line = dict(\n      color = '#ab63fa'\n    ),\n    text = \"Points + Fills\",\n    hoverinfo = 'text'\n)\n\ntrace1 = go.Scatter(\n    x=[3,3.5,4,4.5,5],\n    y=[0,1,2,1,0],\n    fill='toself',\n    fillcolor = '#e763fa',\n    hoveron = 'points',\n    line = dict(\n      color = '#e763fa'\n    ),\n    text = \"Points only\",\n    hoverinfo = 'text'\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title = \"hover on <i>points</i> or <i>fill</i>\",\n    xaxis = dict(\n      range = [0,5.2]\n    ),\n    yaxis = dict(\n      range = [0,3]\n    )\n)\n\nfig = go.Figure(data=data,layout=layout)\npy.iplot(data, filename='select-hover-points')\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom HTML in IPython Notebook - Python\nDESCRIPTION: This code snippet demonstrates how to display custom HTML styles in an IPython Notebook, incorporating Google Fonts and a CSS stylesheet for enhanced aesthetics. It requires the 'IPython.display' library to function correctly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Percentage Error Bars in Plotly\nDESCRIPTION: Creates a scatter plot with asymmetric percentage-based error bars using different percentages for upper and lower errors.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_y=dict(\n            type='percent',\n            symmetric=False,\n            value=15,\n            valueminus=25\n        )\n    )\n]\npy.iplot(data, filename='error-bar-asymmetric-constant')\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Table in Plotly\nDESCRIPTION: Creates a basic table using Plotly's figure factory with population data by country and year.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/ff_table.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\ndata_matrix = [['Country', 'Year', 'Population'],\n               ['United States', 2000, 282200000],\n               ['Canada', 2000, 27790000],\n               ['United States', 2005, 295500000],\n               ['Canada', 2005, 32310000],\n               ['United States', 2010, 309000000],\n               ['Canada', 2010, 34000000]]\n\ntable = ff.create_table(data_matrix)\npy.iplot(table, filename='simple_table')\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Bar Chart Example in IPython\nDESCRIPTION: This code snippet demonstrates how to embed a Dash bar chart application in an IPython notebook using an IFrame. Dash is Plotly's open-source framework for building web-based analytical applications.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-barplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Jupyter Notebooks\nDESCRIPTION: This code demonstrates how to embed YouTube videos directly in Jupyter notebooks using the IPython.display module. It only requires the YouTube video ID to display the video within the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import YouTubeVideo\nYouTubeVideo(\"wupToqz1e2g\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean using R and Python\nDESCRIPTION: This snippet provides methods to calculate the mean of the dataset using both R and Python, showcasing interoperability between the two languages by performing operations within the same code block.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n%R print(mean(tongue$time))\\n\\nprint tongue['time'].mean()\n```\n\n----------------------------------------\n\nTITLE: Creating Subplots for Combined Band Diagram and DOS\nDESCRIPTION: Sets up a Plotly subplot figure with two columns sharing the y-axis, which will display the band diagram and density of states side by side.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/density-of-states .ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndosbandfig = tls.make_subplots(rows=1, cols=2, shared_yaxes=True)\n```\n\n----------------------------------------\n\nTITLE: Embedding an Existing Plotly Streaming Plot\nDESCRIPTION: This code demonstrates how to embed an existing Plotly streaming plot using the tools.embed function. It references a specific streaming demo that shows how real-time data appears in Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Embed an existing Plotly streaming plot\ntls.embed('streaming-demos','6')\n\n# Note that the time point correspond to internal clock of the servers, \n# that is UTC time.\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Example Source Code in an IPython Notebook\nDESCRIPTION: This code snippet shows how to display the source code of a Dash example for a multiple axes plot in an IPython notebook using an IFrame. It requires the IPython.display module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/multiple-axes/multiple-axes.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-multipleaxesplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Overwriting Plotly Graphs in Python\nDESCRIPTION: This code creates a simple scatter plot using Plotly and saves it with a specified filename. If a graph with the same name exists, it will be overwritten.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2],\n        y=[3, 4]\n    )\n]\n\nplot_url = py.plot(data, filename='my plot')\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite with LIMIT in Pandas\nDESCRIPTION: Demonstrates how to query a SQLite database using Pandas' read_sql_query function with a LIMIT clause to retrieve a specific number of rows.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT Agency, Descriptor FROM data LIMIT 3', disk_engine)\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Displaying Facebook Data Science Image in Python\nDESCRIPTION: Uses Python's IPython Image object to display a screenshot from a Facebook Data Science post.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nImage(url = 'https://i.imgur.com/sAHsjk3.png')\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Marker Appearance in Plotly\nDESCRIPTION: Adjusts marker opacity and size to improve visibility with the density contour overlay.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nscatter.marker.opacity = .1\nscatter.marker.size = 3\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Environment Variables for Chart Studio\nDESCRIPTION: R code for setting environment variables to authenticate with Chart Studio when examples require it. This uses the RPlotBot account credentials.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n```{r, echo = FALSE, message=FALSE}\nknitr::opts_chunk$set(message = FALSE, warning=FALSE)\nSys.setenv(\"plotly_username\"=\"RPlotBot\")\nSys.setenv(\"plotly_api_key\"=\"q0lz6r5efr\")```\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Interactive Events for Shiny Integration\nDESCRIPTION: This snippet sets up interactive event handling for the Plotly chart, including highlight behavior and Shiny event bindings. It configures opacity settings for dynamic highlighting and defines which events will be passed to Shiny.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\"]\n```\n\n----------------------------------------\n\nTITLE: Detecting Highest Peaks with Adjusted Threshold\nDESCRIPTION: Modifies the peak detection algorithm to identify only the highest peaks by increasing the threshold value.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncb = np.array(time_series)\nindices = peakutils.indexes(cb, thres=0.678, min_dist=0.1)\n\ntrace = go.Scatter(\n    x=[j for j in range(len(time_series))],\n    y=time_series,\n    mode='lines',\n    name='Original Plot'\n)\n\ntrace2 = go.Scatter(\n    x=indices,\n    y=[time_series[j] for j in indices],\n    mode='markers',\n    marker=dict(\n        size=8,\n        color='rgb(255,0,0)',\n        symbol='cross'\n    ),\n    name='Detected Peaks'\n)\n\ndata = [trace, trace2]\npy.iplot(data, filename='milk-production-plot-with-higher-peaks')\n```\n\n----------------------------------------\n\nTITLE: Publishing Bar Chart Documentation with Plotly Publisher\nDESCRIPTION: This code snippet configures and styles the documentation page for bar charts, then uses Plotly's publisher tool to publish the notebook as part of the documentation. It sets up custom fonts, CSS styling, and metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'bars.ipynb', 'python/bar-charts/', 'Python Bar Charts | plotly',\n    'How to make Bar Charts in Python with Plotly.',\n    title = 'Bar Charts | plotly',\n    name = 'Bar Charts',\n    thumbnail='thumbnail/bar.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='basic', order=4,\n    ipynb= '~notebook_demo/186')\n```\n\n----------------------------------------\n\nTITLE: Publish Jupyter Notebook Using Publisher\nDESCRIPTION: Upgrades and uses the 'publisher' package to publish the Jupyter Notebook to a specified location, setting metadata such as name and description for the project.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n! pip install publisher --upgrade\nimport publisher\npublisher.publish(\n    'baltimore.ipynb', 'ipython-notebooks/baltimore-vital-signs/', 'Baltimore Vital Signs',\n    'PCA and k-means clustering on dataset with Baltimore neighborhood indicators', name='Clustering')\n```\n\n----------------------------------------\n\nTITLE: HTML Header Structure for Plotly R Basic Charts Documentation\nDESCRIPTION: HTML markup defining the welcome header section of the documentation page, including title and description display. It incorporates the page description from the Jekyll front matter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-basic-index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library Basic Charts</h1>\n\t\t\t\t<p>{{page.description}}</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple code to check installed Plotly version. Required for using Presentations API which needs version 2.2.1+.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Tree Plot Creation\nDESCRIPTION: This snippet imports the necessary libraries: Plotly for visualization and igraph for graph creation. It also checks the version of igraph.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/tree-plot/tree-plot.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport igraph\nfrom igraph import *\nigraph.__version__\n```\n\n----------------------------------------\n\nTITLE: Uploading MRI Animation to Plotly in Python\nDESCRIPTION: This code combines the data, layout, and frames into a figure dictionary and uploads the animation to Plotly. It generates a unique filename using a timestamp.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/visualizing-mri-volume-slices/visualizing-mri-volume-slices.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig=dict(data=data, layout=layout3d, frames=frames)\npy.icreate_animations(fig, filename='animslicesHead'+str(time.time()))\n```\n\n----------------------------------------\n\nTITLE: Percentage-Based Error Bars in Plotly\nDESCRIPTION: Shows how to create error bars that represent a percentage of the y-value. Sets error bars to 50% of each point's y-value.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[0, 1, 2],\n        y=[6, 10, 2],\n        error_y=dict(\n            type='percent',\n            value=50,\n            visible=True\n        )\n    )\n]\npy.iplot(data, filename='percent-error-bar')\n```\n\n----------------------------------------\n\nTITLE: Discretizing Projection Planes for 3D Surface in Python with Plotly\nDESCRIPTION: This snippet creates offset planes for projecting the 3D surface. It defines z, x, and y offsets that will be used to position the projection planes in the 3D space.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/projection-of-3d-plots/Plotly-project-3d-onto-a-plane.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz_offset=(np.min(z)-2)*np.ones(z.shape)#\nx_offset=np.min(xx)*np.ones(z.shape)\ny_offset=np.min(yy)*np.ones(z.shape)\n```\n\n----------------------------------------\n\nTITLE: Creating Transfer Function for Bicycle Steer-to-Roll Relationship\nDESCRIPTION: This snippet defines the transfer function relating the roll angle to the steering angle of the bicycle using Python Control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnum = -m * h * v / b * np.array([a, v])\nden = np.array([(I + m * h**2), 0.0, -m * g * h])\ntheta_delta = cn.TransferFunction(num, den)\ntheta_delta\n```\n\n----------------------------------------\n\nTITLE: Activating Plotly 3.3 Virtualenv\nDESCRIPTION: Command to activate the Plotly 3.3 virtual environment for Jupyter notebook installation and use.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/.virtualenvs/plotly3.3/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Loading Required Plotly Dependencies for Streaming\nDESCRIPTION: Imports necessary Plotly modules and NumPy for data manipulation to enable streaming visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/geo-streaming.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py  \nimport plotly.tools as tls   \nimport plotly.graph_objs as go\nimport numpy as np \n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Horizontal Bar Chart with Plotly in Python\nDESCRIPTION: This code creates a simple horizontal bar chart using Plotly. It demonstrates the basic structure of creating a bar chart with horizontal orientation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/horizontal-bar/horizontal-bars.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [go.Bar(\n            x=[20, 14, 23],\n            y=['giraffes', 'orangutans', 'monkeys'],\n            orientation = 'h'\n)]\n\npy.iplot(data, filename='horizontal-bar')\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Interactive Events for Shiny Integration\nDESCRIPTION: This snippet defines the interactive event configuration for a Plotly graph when integrated with Shiny. It specifies various user interaction events that will be captured including hover, click, selection, and layout changes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"highlight\": {\n    \"on\": \"plotly_click\",\n    \"persistent\": false,\n    \"dynamic\": false,\n    \"selectize\": false,\n    \"opacityDim\": 0.2,\n    \"selected\": {\n      \"opacity\": 1\n    },\n    \"debounce\": 0\n  },\n  \"shinyEvents\": [\n    \"plotly_hover\",\n    \"plotly_click\",\n    \"plotly_selected\",\n    \"plotly_relayout\",\n    \"plotly_brushed\",\n    \"plotly_brushing\",\n    \"plotly_clickannotation\",\n    \"plotly_doubleclick\",\n    \"plotly_deselect\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Milk Production Data\nDESCRIPTION: Imports milk production time series data from a CSV file and creates a table visualization using Plotly's Figure Factory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmilk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')\ntime_series = milk_data['Monthly milk production (pounds per cow)']\ntime_series = time_series.tolist()\n\ndf = milk_data[0:15]\n\ntable = FF.create_table(df)\npy.iplot(table, filename='milk-production-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple version check for the Plotly library installation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bubble/bubble.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Installing Chart Studio Python Package Using Pip\nDESCRIPTION: Command to install the Chart Studio Python package using pip, which is required for online plotting. Plotly's Python package is installed alongside Chart Studio.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install chart_studio\n```\n\n----------------------------------------\n\nTITLE: Histogram Trace Facet Grid\nDESCRIPTION: Shows how to create a facet grid using histogram traces with the tips dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\ntips = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tips.csv')\n\nfig = ff.create_facet_grid(\n    tips,\n    x='total_bill',\n    y='tip',\n    facet_row='sex',\n    facet_col='smoker',\n    trace_type='histogram',\n)\n\npy.iplot(fig, filename='facet - histogram traces')\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from HDF5 Store in Python\nDESCRIPTION: This code demonstrates how to select specific columns from an HDF5 store using pandas. It retrieves the 'borough' column from the 'nypd' dataset stored in the HDF5 file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/PyTables.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nboroughs = store.select(\"nypd\", \"columns=['borough']\")\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Bullet Chart from DataFrame\nDESCRIPTION: Creates a basic bullet chart using pandas DataFrame input with markers, measures, ranges, and titles\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndata = pd.read_json('https://cdn.rawgit.com/plotly/datasets/master/BulletData.json')\n\nfig = ff.create_bullet(\n    data, markers='markers', measures='measures',\n    ranges='ranges', subtitles='subtitle', titles='title',\n)\npy.iplot(fig, filename='bullet chart from a dataframe')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Heatmap Data Object in Plotly\nDESCRIPTION: Creates a Plotly Heatmap data object using the scoreboard values, factors as y-axis labels, candidates as x-axis labels, and the custom New York Times colorscale.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata14=Data([Heatmap(z=tab_vals14,\n                   y=factors,\n                   x=candidates,\n                   colorscale=newyorktimes_cs,\n                   showscale=False\n                   )])\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Soil Types Ternary Plot in Python\nDESCRIPTION: This snippet imports necessary libraries for creating a soil types ternary plot, including JSON handling and URL request capabilities.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport urllib2     # note this will only work in 2.7 now, will upload six package later for compatibility\n\ninit_notebook_mode()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plots with Plotly\nDESCRIPTION: Creates interactive visualizations showing market reactions during Labour and Conservative election wins using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/ukelectionbbg.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    title = ticker + ' during UK gen elect - Lab wins' + '<BR>' + source_label\n\n    fig = Figure(data=event_plot.convert_df_plotly(labour_wins_spot),\n                 layout=event_plot.create_layout(title, xaxis, yaxis)\n    )\n\n    py.iplot(fig, filename='labour-wins-' + ticker)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Error Bars in Plotly\nDESCRIPTION: Demonstrates how to add horizontal error bars to a scatter plot using percentage-based errors on the x-axis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/error-bar/error-bars.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ndata = [\n    go.Scatter(\n        x=[1, 2, 3, 4],\n        y=[2, 1, 3, 4],\n        error_x=dict(\n            type='percent',\n            value=10\n        )\n    )\n]\npy.iplot(data, filename='error-bar-horizontal')\n```\n\n----------------------------------------\n\nTITLE: Filtering Multiple Values with WHERE and IN\nDESCRIPTION: Demonstrates using the WHERE clause with IN operator to filter rows matching multiple specified values in a column.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/sqlite.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '\n                       'FROM data '\n                       'WHERE Agency IN (\"NYPD\", \"DOB\")'\n                       'LIMIT 10', disk_engine)\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Ratio 3D Subplots\nDESCRIPTION: Demonstrates how to create multiple 3D subplots with different aspect ratio settings including cube, manual ratio, data-driven, and auto-scaled proportions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-axes/3d-axes.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport numpy as np\n\nN = 50\n\nfig = tls.make_subplots(\n    rows=2, cols=2,\n    specs=[\n        [{'is_3d': True}, {'is_3d': True}],\n        [{'is_3d': True}, {'is_3d': True}]\n    ],\n    print_grid=False\n)\nfor i in [1,2]:\n    for j in [1,2]:\n        fig.append_trace(\n            go.Mesh3d(\n                x=(60*np.random.randn(N)),\n                y=(25*np.random.randn(N)),\n                z=(40*np.random.randn(N)),\n                opacity=0.5,\n              ), \n            row=i, col=j)\n\nfig['layout'].update(go.Layout(\n                    width=700,\n                    margin=dict(\n                    r=10, l=10,\n                    b=10, t=10)\n                  ))\n\nfig['layout'][].update(go.Layout(\n    go.layout.Scene(aspectmode='cube')),\n    \n\nfig['layout']['scene2'].update(go.layout.Scene(\n    aspectmode='manual',\n    aspectratio=go.layout.scene.Aspectratio(\n        x=1, y=1, z=2\n    )\n))\n\nfig['layout']['scene3'].update(go.layout.Scene(aspectmode='data'))\n\nfig['layout']['scene4'].update(go.layout.Scene(aspectmode='auto'))\n\npy.iplot(fig, filename='3d-axis-fixed-ratio-axes')\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Graph with Plotly in R\nDESCRIPTION: This snippet shows how to create a private graph using the api_create() function with the sharing parameter set to 'private'. Private graphs are only visible to the owner and require a Chart Studio Enterprise subscription.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-privacy.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')\nchart_link = api_create(p, filename = \"private-graph\", sharing = \"private\")\nchart_link\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Chart Studio Documentation\nDESCRIPTION: YAML frontmatter configuration for the documentation page, specifying metadata like description, display settings, language, layout and redirect information.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: How to download Chart Studio users' public graphs and data into an R session.\ndisplay_as: chart_studio\nlanguage: r\nlayout: base\nname: Working With Chart Studio Graphs\norder: 5\noutput:\n  html_document:\n    keep_md: true\npermalink: r/working-with-chart-studio-graphs/\nredirect_from:\n- r/get-requests/\nthumbnail: thumbnail/hover.jpg\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Peak Detection\nDESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, SciPy and PeakUtils for data analysis and visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\nimport peakutils\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to import Plotly and check its installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/dot/dot.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Surv Object in R\nDESCRIPTION: This R snippet involves creating a `Surv` object, essential for handling time-to-event data in R’s `survival` package. It illustrates the creation of a survival object needed to apply various survival analysis methods.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%%R\\nattach(tongue)\\n\\ntongue.surv <- Surv(time[type==1], delta[type==1])\\n\\ntongue.surv\n```\n\n----------------------------------------\n\nTITLE: Accessing Plotly Presentation API Reference Documentation\nDESCRIPTION: This code displays the help documentation for the presentation_ops module in the chart_studio.plotly package, providing reference information about available functions and parameters.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhelp(py.presentation_ops)\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Iris Dataset\nDESCRIPTION: Imports required libraries and loads the Iris dataset for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n\nimport copy\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')\n\ndf_table = ff.create_table(df.head())\npy.iplot(df_table, filename='iris-data-head')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subplot Titles with Cufflinks in Python\nDESCRIPTION: This code illustrates adding titles to subplots, using either a list or column names, and configuring legend display. Dependencies involve Cufflinks and Pandas.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(subplots=True, subplot_titles=True, legend=False)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Drop Statistics with Plotly\nDESCRIPTION: Creates a bar chart visualization of drop statistics using Plotly's graph objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.graph_objs import Data, Layout, Bar, YAxis, Figure\n\ndata = Data([\n    Bar(\n        x=ch_names[order],\n        y=counts[order]\n    )\n])\nlayout = Layout(title='Drop log statistics', yaxis=YAxis(title='% of epochs rejected'))\n\nfig = Figure(data=data, layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Data Columns\nDESCRIPTION: Creates and uploads multiple columns of random data to a Plotly grid.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolumn_1 = Column(np.random.randn(1000), 'column 1')\ncolumn_2 = Column(np.random.randn(1000)+1, 'column 2')\ncolumn_3 = Column(np.random.randn(1000)+2, 'column 3')\ncolumn_4 = Column(np.random.randn(1000)+3, 'column 4')\n\ngrid = Grid([column_1, column_2, column_3, column_4])\nurl = py.grid_ops.upload(grid, filename='randn_int_offset_'+str(dt.now()))\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Applying Q-Test to Wind Speed Dataset in Python\nDESCRIPTION: This snippet applies the Q-Test to a subset of the wind speed dataset, focusing on 30 values that include the minimum value of the full dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/outlier-test/python-Outlier-Test.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndataset = data[100:130]['10 Min Sampled Avg'].values.tolist()\ndataset.sort()\nq_test_for_smallest_point(dataset)\n```\n\n----------------------------------------\n\nTITLE: Setting up Heatmap Trace - Plotly Python\nDESCRIPTION: This snippet demonstrates how to create a heatmap trace using Plotly's graph objects, with specified data values and display options.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nheatmap = go.Heatmap(\n        z=[[1, 20, 30],\n           [20, 1, 60],\n           [30, 60, 1]],\n        showscale=False\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Array for Triangular Window Demonstration\nDESCRIPTION: Generates a sample array that represents a triangular window pattern, which will be used as a weighting function in the triangular moving average smoothing algorithm.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/smoothing/python-Smoothing.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnp.array(list(range(5)) + [5] + list(range(5)[::-1])) \n```\n\n----------------------------------------\n\nTITLE: Extracting Vertex Coordinates and Faces\nDESCRIPTION: Processes vertex coordinates and face indices from the PLY data into arrays for plotting\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npoints=np.array([plydata['vertex'][k] for k in range(nr_points)])\npoints[0]\n\nx,y,z=zip(*points)\n\nfaces=[plydata['face'][k][0] for k in range(nr_faces)]\nfaces[0]\n```\n\n----------------------------------------\n\nTITLE: Set Mailbox Path\nDESCRIPTION: Defines the file path to the downloaded Gmail .mbox file\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npath = '/Users/jack/Desktop/All mail Including Spam and Trash.mbox'\n```\n\n----------------------------------------\n\nTITLE: Opening Stream Connection in Plotly Python\nDESCRIPTION: Creates a Stream connection using the stream_id and opens it to enable data streaming to the chart. This establishes the communication channel for real-time updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#Now a Stream object is created w/ the same stream_id as the stream id object\n\ns = py.Stream(stream_id)\ns.open()                  \n```\n\n----------------------------------------\n\nTITLE: Importing pandas library\nDESCRIPTION: This code snippet imports the pandas library, which is commonly used for data manipulation and analysis in Python. This is necessary for creating and working with DataFrames.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/collaborate.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet is used to publish the documentation with custom styling and metadata. It sets up fonts, CSS, and uses a publisher module to format and upload the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/advanced/marker-style/marker-style.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'marker-style.ipynb', 'python/marker-style/', 'Styling Markers',\n    'How to style markers in Python with Plotly.',\n    title = 'Styling Markers | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/marker-style.gif',\n    language='python',\n    display_as='file_settings', order=21, ipynb='~notebook_demo/203')\n```\n\n----------------------------------------\n\nTITLE: Overwriting an Existing Plot in Chart Studio\nDESCRIPTION: This snippet shows how to update an existing plot in Chart Studio while keeping the same URL. By providing a filename parameter to the api_create() function, the existing plot with that name will be overwritten rather than creating a new plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-filenames.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\napi_create(p, filename = \"name-of-my-plotly-file\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly and Scientific Computing in Python\nDESCRIPTION: This snippet imports necessary libraries for plotting with Plotly and performing scientific computations using NumPy, Pandas, and SciPy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/numerical-differentiation/python_Numerical_Differentiation.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Adding Rating Data to Linear Gauge Chart in Python\nDESCRIPTION: Adds rating data points to the previously created linear gauge chart structure. Ratings are scaled between 0-6 to match the y-values of the scales.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/gauge-chart/linear-gauge.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nratings = [4.5, 5, 1, 2.75]\n\nfor i in range(len(ratings)):\n    traces.append(go.Scatter(\n            x=[0.5], y=[ratings[i]],\n            xaxis='x'+str(i+1), yaxis='y'+str(i+1),\n            mode='markers', marker={'size': 16, 'color': '#29ABD6'},\n            text=ratings[i], hoverinfo='text', showlegend=False\n    ))\n\nfig = dict(data=traces, layout=layout)\npy.iplot(fig, filename='linear-gauge')\n```\n\n----------------------------------------\n\nTITLE: Set Maximum Clusters and Initialize Inertias Array\nDESCRIPTION: This snippet sets the maximum number of clusters equal to the length of a DataFrame 'df' and initializes an array 'inertias' to store the inertia values for each cluster configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmax_clusters = len(df)\n# n_clusters = max_clusters would be trivial clustering.\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash App Code with IFrame in Python\nDESCRIPTION: This snippet demonstrates how to embed the source code of a Dash application within a Jupyter Notebook using an IFrame.  It imports `IFrame` from `IPython.display` and then creates an `IFrame` object pointing to the URL of the deployed Dash app code. The `width`, `height`, and `frameBorder` attributes are set to control the IFrame's appearance.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/axes/axes.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-axesplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Visualization\nDESCRIPTION: Imports the necessary libraries for creating Plotly visualizations in offline mode, including Pandas and NumPy for data manipulation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\n\nimport pandas as pd\nimport numpy as np\nimport ipywidgets as widgets\n```\n\n----------------------------------------\n\nTITLE: Drawing Eurovision Graph with NetworkX\nDESCRIPTION: Creates a circular layout visualization of the Eurovision voting graph using NetworkX and Matplotlib with custom styling.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nplt.figure(figsize=(18,18))            \nnx.draw_circular(G,node_color='g', edge_color='#909090', node_size=900)\nplt.axis('equal')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly. It's important to ensure you have version 1.8.7 or higher for dendrogram functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Activating Plotly 2.7 Virtualenv\nDESCRIPTION: Command to activate the Plotly 2.7 virtual environment, which modifies the shell's environment to use that environment's Python and packages.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/.virtualenvs/plotly2.7/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple snippet to import the Plotly library and check its version. This is useful to ensure you're using the latest version of Plotly for optimal functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/violin/violin.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Heatmap Example with IFrame in Python\nDESCRIPTION: Shows how to embed a Dash application that demonstrates a heatmap visualization using an IFrame. This provides an interactive example of a Dash heatmap.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/heatmap/heatmaps.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-heatmapplot/\", width=\"120%\", height=\"650px\", frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly and Scientific Libraries\nDESCRIPTION: Basic setup importing required libraries including Plotly, NumPy, Pandas and SciPy for data visualization and analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-2d/python_Interpolation_and_Extrapolation_in_2D.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Uploading and Visualizing Pandas DataFrame\nDESCRIPTION: Demonstrates how to upload a Pandas DataFrame to Plotly and create a preview table visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')\ndf_head = df.head()\ntable = ff.create_table(df_head)\npy.iplot(table, filename='dataframe_ex_preview')\n```\n\n----------------------------------------\n\nTITLE: Saving Epochs to File\nDESCRIPTION: Saves processed epochs data to a fif file format.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nepochs.save('sample-epo.fif')\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying DataFrame\nDESCRIPTION: Creates a sample DataFrame and displays it as a table using Plotly's FigureFactory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/simple-mathematics-operations/python_Simple_Mathematics_Operations.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataframe = pd.DataFrame([[1, 2],\n                          [3, 4],\n                          [5, 6],\n                          [7, 8]],\n                         columns=['A', 'B'])\n\ntable = FF.create_table(dataframe)\npy.iplot(table, filename='math-operations-dataframe')\n```\n\n----------------------------------------\n\nTITLE: Loading and Converting R Data to Python\nDESCRIPTION: This snippet demonstrates using rpy2 to load datasets from R into a Python environment. It shows how to retrieve and convert data ('tongue' dataset from 'KMsurv' package) into a pandas dataframe, facilitating further data manipulation and analysis in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Load in data\\n%R data(tongue)\\n# Pull data into python kernel\\n%Rpull tongue\\n# Convert into pandas dataframe\\nfrom rpy2.robjects import pandas2ri\\n\\ntongue = pandas2ri.ri2py_dataframe(tongue)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Auto-open Behavior When Publishing to Chart Studio\nDESCRIPTION: Code to suppress the default behavior of automatically opening the browser when publishing a chart to Chart Studio. This setting prevents the browser from opening each time api_create() is called.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2020-01-17-getting-started-with-chart-studio.md#2025-04-11_snippet_2\n\nLANGUAGE: r\nCODE:\n```\noptions(browser = 'false')\napi_create(p, filename = \"r-docs-midwest-boxplots\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: This code snippet sets up custom styling for the documentation and publishes the Jupyter notebook as part of the Plotly documentation. It uses the publisher module to specify metadata for the documentation page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/dot/dot.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'dot.ipynb', 'python/dot-plots/', 'Dot Plots',\n    'How to make dot plots in Python with Plotly.',\n    title = 'Python Dot Plots | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/dot-plot.jpg', \n    language='python',\n    display_as='basic', order=3.1,\n    ipynb= '~notebook_demo/2')\n```\n\n----------------------------------------\n\nTITLE: Displaying Dash Pie Chart Example in IPython\nDESCRIPTION: This code embeds a Dash pie chart example in an IPython notebook using an IFrame. It demonstrates how Plotly figures can be converted into interactive web applications.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/pie/pie-charts.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-pieplot\", width=\"100%\", height=\"650px\" ,frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Signal Convolution in Python\nDESCRIPTION: Imports the necessary Python libraries for signal processing and data visualization, including Plotly, NumPy, Pandas, and SciPy, which are essential for performing convolution operations on signal data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/signal-analysis/convolution/python-Convolution.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom scipy import signal\n```\n\n----------------------------------------\n\nTITLE: Querying HackerNews Data with BigQuery SQL\nDESCRIPTION: SQL queries to extract yearly counts of Python and PHP mentions in HackerNews post titles from BigQuery database.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython_query = \"\"\"\nSELECT\n  YEAR(time_ts) as years,\n  COUNT(YEAR(time_ts )) as trends\nFROM\n  [fh-bigquery:hackernews.stories]\nWHERE\n  LOWER(title) contains 'python'\nGROUP BY\n  years\nORDER BY\n  years\n\"\"\"\n\nphp_query = \"\"\"\nSELECT\n  YEAR(time_ts) as years,\n  COUNT(YEAR(time_ts )) as trends\nFROM\n  [fh-bigquery:hackernews.stories]\nWHERE\n  LOWER(title) contains 'php'\nGROUP BY\n  years\nORDER BY\n  years\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import and check the installed version of Plotly package. This is useful to ensure you're using an up-to-date version before creating visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/continuous-error-bars/cont-error-bars.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring you're using the latest version of the library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/waterfall/waterfall-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Plotly 3.3 Virtualenv\nDESCRIPTION: Command to create a new Python virtual environment specifically for Plotly version 3.3 using the venv module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv plotly3.3\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Plotly Data Visualization\nDESCRIPTION: Sets up the required Python libraries including Plotly, NumPy, Pandas, and SciPy for data visualization and analysis.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/normalization/python_Normalization.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tools\nfrom plotly.tools import FigureFactory as FF\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Reading PLY File Header\nDESCRIPTION: Extracts element information and counts the number of points and faces from the PLY file header\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor element in plydata.elements:\n    print element\n    \nnr_points=plydata.elements[0].count\nnr_faces=plydata.elements[1].count\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Scatter Plot\nDESCRIPTION: Creates a basic scatter plot with two traces and initializes it as a widget template\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl = py.plot({'data': [go.Scatter(x=[1, 2, 3], y=[4, 6, 9]), go.Scatter(x=[1, 2, 3], y=[10, 30, 20])]}, \n               filename = 'widget template', auto_open=False)\nprint url\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Documentation Examples\nDESCRIPTION: This snippet uses Liquid templating to generate the financial chart examples section. It assigns posts with specific attributes to a variable and then includes a template to render the examples. The filter selects R language posts related to financial charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2019-09-12-r-financial-charts-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"financial\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Welcome Header in HTML for Plotly.js Controls Documentation\nDESCRIPTION: This HTML snippet creates a welcome header for the Plotly.js custom controls documentation page. It includes a title, description, and a placeholder for additional content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/controls/2024-05-27-plotly_js-controls-index.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Add Custom Controls</h1>\n\t\t\t\t<p>{{page.description}}</p>\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Finding Channel Index\nDESCRIPTION: Looks up the index of the trigger channel 'STI 014' within the list of all available channels.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nraw.ch_names.index('STI 014')\n```\n\n----------------------------------------\n\nTITLE: Updating Colors in Plotly Parallel Categories Diagram\nDESCRIPTION: This function updates the colors of a Plotly figure containing a scatter plot and parallel categories diagram based on user selection. It uses numpy for array manipulation and Plotly's batch_update for efficient updates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef update_color(trace, points, state):\n    # Compute new color array\n    new_color = np.array(fig.data[0].marker.color)\n    new_color[points.point_inds] = color_toggle.index\n    \n    with fig.batch_update(): \n        # Update scatter color\n        fig.data[0].marker.color = new_color\n\n        # Update parcats colors\n        fig.data[1].line.color = new_color\n    \n# Register callback on scatter selection...\nfig.data[0].on_selection(update_color)\n# and parcats click\nfig.data[1].on_click(update_color)\n\n# Display figure\nwidgets.VBox([color_toggle, fig])\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Loading\nDESCRIPTION: Loads JSON data from local file and remote URL for Plotly schema configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom urllib.request import urlopen\n\norders = json.load(open(\"orderings.json\", \"r\"))\n\nschema = json.load(urlopen(\"https://raw.githubusercontent.com/plotly/plotly.js/master/dist/plot-schema.json\"))\n```\n\n----------------------------------------\n\nTITLE: Setting the Plotly Domain for Chart Studio Enterprise\nDESCRIPTION: Code for setting the plotly_domain environment variable for Chart Studio Enterprise users. This tells the plotly package to communicate with your company's Chart Studio Enterprise server instead of the public server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2020-01-17-getting-started-with-chart-studio.md#2025-04-11_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nSys.setenv(\"plotly_domain\"=\"https://plotly.your-company.com\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Custom Styling\nDESCRIPTION: Code for publishing the documentation with custom styling and metadata. Includes font loading, CSS customization, and publisher configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/line-plots/lines.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'lines.ipynb', 'python/line-charts/', 'Python Line Charts',\n    'How to make line charts in Python with Plotly. '\n    'Examples on creating and styling line charts in Python with Plotly.',\n    title = 'Python Line Charts | plotly',\n    name = 'Line Charts',\n    thumbnail='thumbnail/line-plot.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='basic', order=3.3,\n    ipynb= '~notebook_demo/3')\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Scatter Plot with 1 Million Points\nDESCRIPTION: Shows how to create a WebGL scatter plot with 1 million random data points. Configures marker styling with custom colors and line properties for enhanced visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/WebGL/webgl.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport numpy as np\n\nN = 1000000\ntrace = go.Scattergl(\n    x = np.random.randn(N),\n    y = np.random.randn(N),\n    mode = 'markers',\n    marker = dict(\n        color = 'rgb(152, 0, 0)',\n        line = dict(\n            width = 1,\n            color = 'rgb(0,0,0)')\n    )\n)\ndata = [trace]\npy.iplot(data, filename='WebGLmillion')\n```\n\n----------------------------------------\n\nTITLE: Configuring and Publishing Plotly Documentation in Python\nDESCRIPTION: Sets up custom fonts and styling for documentation display using IPython HTML, then publishes a getting started guide using the publisher module. Includes configuration for document metadata, layout settings and thumbnail details.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'getting-started.ipynb', 'python/getting-started/', 'Getting Started Plotly for Python',\n    'Installation and Initialization Steps for Using Plotly in Python.',\n    title = 'Getting Started with Plotly for Python | plotly',\n    name = 'Getting Started with Plotly for Python', display_as='chart_studio'\n    language='python', layout='user-guide', has_thumbnail='true', thumbnail='thumbnail/bubble.jpg',\n    ipynb= '~notebook_demo/123/installation', uses_plotly_offline=True)\n```\n\n----------------------------------------\n\nTITLE: Hiding Specific Dimensions\nDESCRIPTION: Shows how to hide specific dimensions in the scatterplot matrix.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntrace4 = copy.deepcopy(trace1)\ntrace4['dimensions'][2].update(visible=False)\nfig4 = dict(data=[trace4], layout=layout)\npy.iplot(fig4, filename='splom-invisible-custom-dimensions')\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram Contour Plot\nDESCRIPTION: Creates a 2D histogram contour plot using direct data input with random numbers.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = np.random.randn(1000)\ny = np.random.randn(1000) + 1\n\ndata = [\n    go.Histogram2dContour(\n        x=x,\n        y=y\n    )\n]\n\npy.iplot(data, filename='Example 2D Histogram Contour')\n```\n\n----------------------------------------\n\nTITLE: Basic Offline Plot\nDESCRIPTION: Create a standalone HTML plot using Plotly's offline plotting functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.graph_objs as go\n\nplotly.offline.plot({\n    \"data\": [go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1])],\n    \"layout\": go.Layout(title=\"hello world\")\n}, auto_open=True)\n```\n\n----------------------------------------\n\nTITLE: Python Connection Error Example\nDESCRIPTION: Example of the connection error that occurs when trying to use Plotly behind a corporate firewall without proper proxy configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/proxies/2015-07-27-proxy_index.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequests.exceptions.ConnectionError: ('Connection aborted.', TimeoutError(10060, ...))\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import the Plotly library and check its installed version. This helps ensure compatibility with examples and features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/multiple-transforms/multiple-transforms.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Example\nDESCRIPTION: Examples of embedding Dash applications using IFrames to display interactive Plotly visualizations and source code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/sizing/sizing.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-graphsizeplot/\", width=\"100%\", height=\"650px\", frameBorder=\"0\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-graphsizeplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Dendrogram Layout Properties in Plotly\nDESCRIPTION: This snippet shows how to access specific layout properties of a dendrogram, specifically the x-axis configuration of the side dendrogram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndendro_side['layout']['xaxis']\n```\n\n----------------------------------------\n\nTITLE: Statistical Testing of Survival Rates in Python\nDESCRIPTION: Implements logrank test using Python's lifelines library to compare survival rates between DNA types.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/survival_analysis.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom lifelines.statistics import logrank_test\nsummary_= logrank_test(T, T2, C, C2, alpha=99)\n\nprint summary_\n```\n\n----------------------------------------\n\nTITLE: YAML Redirect Configuration for R Plotly Streaming Docs\nDESCRIPTION: YAML front matter configuration that sets up a permalink and redirect path for R Plotly streaming documentation, directing users to the DashR platform.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/streaming/2017-07-17-streaming.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npermalink: r/streaming/\nredirect_to: https://dashr.plot.ly\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Imports the Plotly library and displays its current version. This helps ensure you're using the latest features and functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/mysql-ipython-notebook.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with IPython and Publisher\nDESCRIPTION: This code sets up custom styling for documentation notebooks and uses Plotly's publisher tool to publish the notebook as a documentation page. It configures metadata such as title, description, thumbnail, and categorization for the documentation website.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-ribbon/ribbon.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'ribbon.ipynb', 'python/ribbon-plots/', 'Python Ribbon Plots | plotly',\n    'How to make ribbon plots in Python. ',\n    title = 'Python Ribbon Plots | plotly',\n    name = 'Ribbon Plots',\n    has_thumbnail='true', thumbnail='thumbnail/ribbon-plot.jpg', \n    language='python', \n    display_as='3d_charts', order=4,\n    ipynb= '~notebook_demo/64')\n```\n\n----------------------------------------\n\nTITLE: Custom Labels Facet Grid\nDESCRIPTION: Creates a facet grid with custom mathematical labels using LaTeX notation for the mtcars dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.figure_factory as ff\n\nimport pandas as pd\nmtcars = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv')\n\nfig = ff.create_facet_grid(\n    mtcars,\n    x='wt',\n    y='mpg',\n    facet_col='cyl',\n    facet_col_labels={4: '$2^2 = 4$', 6: '$\\\\frac{18}{3} = 6$', 8: '$2\\cdot4 = 8$'},\n    marker={'color': 'rgb(240, 100, 2)'},\n)\n\npy.iplot(fig, filename='facet - custom labels')\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation\nDESCRIPTION: Code for setting up documentation styling and publishing configuration documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/config/config_opts.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n#!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'config_opts.ipynb', 'python/configuration-options/', 'Configuration',\n    'How to set configuration options of plotly graphs in python. Examples of both online and offline configurations.',\n    title = 'Configuration | plotly',\n    name = 'Configuration',\n    language='python', has_thumbnail= True,\n    thumbnail= 'thumbnail/modebar-icons.png',\n    display_as='file_settings', order=7, uses_plotly_offline=True,\n    ipynb= '~notebook_demo/97')\n```\n\n----------------------------------------\n\nTITLE: Creating a Heat Map with Plotly in R\nDESCRIPTION: This snippet demonstrates how to create a heat map using Plotly and the mlbench package in R. It uses the Sonar dataset to create two heat maps comparing rock and mine data, then combines them into a single plot using subplot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/Plotly-Jupyter-Example.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n# Heat map\nlibrary(plotly)\nlibrary(mlbench)\n\n# Get Sonar data\ndata(Sonar)\n\n# Use only numeric data\nrock <- as.matrix(subset(Sonar, Class == \"R\")[,1:59])\nmine <- as.matrix(subset(Sonar, Class == \"M\")[,1:59])\n\n# For rocks\np1 <- plot_ly(z = rock, type = \"heatmap\", showscale = F)\n  \n# For mines\np2 <- plot_ly(z = mine, type = \"heatmap\", name = \"test\") %>% \n  layout(title = \"Mine vs Rock\")\n\n# Plot together\np3 <- subplot(p1, p2)\nembed_notebook(p3)\n```\n\n----------------------------------------\n\nTITLE: Loading Bitcoin Mining Data from Excel in Python\nDESCRIPTION: Reads Bitcoin mining data from an Excel file named 'Mining-BTC-180.xls' into a Pandas DataFrame and displays the first few rows.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf=pd.read_excel('Mining-BTC-180.xls')\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation with Plotly Publisher\nDESCRIPTION: This code sets up the documentation page by configuring fonts, CSS, and using the Plotly publisher module to publish the notebook as part of the documentation. It specifies metadata like title, description, thumbnail, and display categories.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-filled-line/3d-filled-line.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    '3d-filled-line.ipynb', 'python/3d-filled-line-plots/', '3D Filled Line Plots in Python | plotly',\n    'How to make 3D Filled Line Plots in Python',\n    title = '3D Filled Line Plots in Python | plotly',\n    name = '3D Filled Line Plots',\n    has_thumbnail='true', thumbnail='thumbnail/3d-filled-line-plot.jpg', \n    language='python',\n    display_as='3d_charts', order=5,\n    ipynb= '~notebook_demo/65')\n```\n\n----------------------------------------\n\nTITLE: Replacing titlefont with title.font in Plotly.js\nDESCRIPTION: Example showing how to update code that uses the deprecated titlefont attribute to the recommended title.font attribute structure in Plotly.js layouts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    type: 'bar',\n    x: ['A', 'B', 'C', 'D'],\n    y: [10, 15, 13, 17]\n}];\n\nvar layout = {\n    title: {\n        text: 'Chart Title',\n    },\n    titlefont: {\n        size: 40\n    }\n};\n\nPlotly.newPlot('chart', data, layout);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    type: 'bar',\n    x: ['A', 'B', 'C', 'D'],\n    y: [10, 15, 13, 17]\n}];\n\nvar layout = {\n    title: {\n        text: 'Chart Title',\n        font: {\n            size: 40\n        }\n    },\n};\n\nPlotly.newPlot('chart', data, layout);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Vertices in Python\nDESCRIPTION: Creates a list of all vertices (nodes) in the Eurovision graph and lists available node attributes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/chord.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nV=list(G.vs) \nG.vs.attributes()# list node attributes\n```\n\n----------------------------------------\n\nTITLE: Importing IPython Widget Interaction\nDESCRIPTION: Imports the interact functionality from ipywidgets package for interactive widgets in Jupyter notebooks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import interact\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame to Plotly Grid\nDESCRIPTION: Shows how to convert a Pandas DataFrame into a Plotly Grid format and upload it to Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/data-api/grid-api.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngrid = Grid([Column(df[column_name], column_name) for column_name in df.columns])\nurl = py.grid_ops.upload(grid, filename='dataframe_ex_'+str(dt.now()), world_readable=True, auto_open=True)\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Applying Data Creation Function for Soil Types Ternary Plot in Python\nDESCRIPTION: This snippet applies the create_data function to the loaded JSON data to prepare it for plotting.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = create_data(json)\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean and Standard Deviation\nDESCRIPTION: Computes the mean and standard deviation of alcohol consumption data using NumPy functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/basic-statistics/python-Basic-Statistics.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmean = np.mean(data['alcohol'])\nst_dev = np.std(data['alcohol'])\n\nprint(\"The mean is %r\") %(mean)\nprint(\"The standard deviation is %r\") %(st_dev)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help in Jupyter Notebook\nDESCRIPTION: Shows how to access the help function in Jupyter Notebook for an introduction and overview of features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhelp\n```\n\n----------------------------------------\n\nTITLE: Jekyll Configuration for Full Documentation\nDESCRIPTION: YAML configuration example showing how to include all documentation directories when running Jekyll locally.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ---\n# Excludes no directory\n# ---\nstaticurl: http://localhost:4000/all_static\nexclude: []\n```\n\n----------------------------------------\n\nTITLE: Executing COPY Statements for Data Loading in Redshift\nDESCRIPTION: Python code snippet that executes a series of COPY statements to load data into Redshift tables. The code iterates through each statement and commits the changes to the database.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor copy_statement in copy_statements: # execute each COPY statement\n    cur.execute(copy_statement)\nconn.commit()\n```\n\n----------------------------------------\n\nTITLE: Create Inertia Plot Using Plotly\nDESCRIPTION: Uses Plotly's graph_objects to create a scatter plot of the inertias for each cluster configuration, aiding in optimal cluster number determination.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/baltimore.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndata6 = pgo.Data([\n    pgo.Scatter(\n            x=range(1, max_clusters),\n            y=inertias[1:]\n    )\n])\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML in IPython (Python)\nDESCRIPTION: This code uses `IPython.display` to render custom HTML content in a Jupyter Notebook. It loads CSS stylesheets from Google Fonts and a local URL to customize the appearance of the notebook. The code relies on the `display` function to render the HTML, requiring the `IPython.display` module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/selection-events-figure-widget.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of plotly Package in R\nDESCRIPTION: Installs the development version of the plotly R package from GitHub using the devtools package. This is necessary to access the plotly_IMAGE() function for static image export.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-04-09-static-image_r_index.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ndevtools::install_github(\"plotly/plotly.R\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pandas and Datetime Libraries in Python\nDESCRIPTION: Imports the Pandas library for data manipulation and the datetime module for handling date and time operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport datetime\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import plotly and check the installed version. This is useful for ensuring you're using the latest features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-coloring/3d_surface_coloring.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Spark and Plotly\nDESCRIPTION: Sets up the required dependencies including PySpark SQL context, Plotly visualization libraries, pandas for data manipulation, and requests for HTTP operations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/apachespark.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyspark.sql import SQLContext\nsqlContext = SQLContext(sc)\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport pandas as pd\nimport requests\nrequests.packages.urllib3.disable_warnings()\n```\n\n----------------------------------------\n\nTITLE: Computing Noise Covariance\nDESCRIPTION: Calculates and visualizes noise covariance matrix from epochs data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/mne-tutorial.ipynb#2025-04-11_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nnoise_cov = mne.compute_covariance(epochs, tmax=0.)\nprint(noise_cov.data.shape)\n\nfig = mne.viz.plot_cov(noise_cov, raw.info)\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrap Documentation Locally with Jekyll\nDESCRIPTION: Command for running the Bootstrap documentation locally using Jekyll, a static site generator. This allows developers to view the documentation at localhost:9001.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/bootstrap/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njekyll serve\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Python\nDESCRIPTION: A simple example of printing 'hello world' in a Jupyter Notebook code cell.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Importing Basemap Toolkit - Python\nDESCRIPTION: This code imports the Basemap toolkit necessary for drawing geographical boundaries and coastlines on the plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/basemap.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mpl_toolkits.basemap import Basemap\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connection Parameters\nDESCRIPTION: Sets up connection parameters for Amazon Redshift using environment variables for security.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/redshift.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nredshift_endpoint = os.getenv(\"REDSHIFT_ENDPOINT\")\nredshift_user = os.getenv(\"REDSHIFT_USER\")\nredshift_pass = os.getenv(\"REDSHIFT_PASS\")\nport = 5439\ndbname = 'dev'\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the correct version is installed for polynomial fits.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/polynomial-fit/Polynomial-Fits.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Updating Layout for Small Variance MCMC Plot in Python\nDESCRIPTION: Updates the layout of the small variance MCMC visualization with axis titles for each parameter and disables the legend.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfig5['layout'].update(showlegend=False,\n                     yaxis1=pgo.YAxis(title='intercept'),\n                     yaxis3=pgo.YAxis(title='slope'),\n                     yaxis5=pgo.YAxis(title='precision')\n)\n```\n\n----------------------------------------\n\nTITLE: Setting R Chunk Options for Documentation\nDESCRIPTION: R code for configuring knitr chunk options to suppress messages and warnings in the generated documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n```{r, echo = FALSE, message=FALSE}\nknitr::opts_chunk$set(message = FALSE, warning=FALSE)\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly for Jupyter Notebook in Python\nDESCRIPTION: Sets up Plotly for use in a Jupyter Notebook environment. This is required for interactive plotting within the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plotly.offline import download_plotlyjs, init_notebook_mode,  iplot, plot\ninit_notebook_mode(connected=True)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Plotly Notebook using Publisher Module\nDESCRIPTION: Code to set up custom styling for IPython notebook display and publish the notebook using the Plotly publisher module. This includes setting metadata like title, description, and thumbnail.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-coloring/3d_surface_coloring.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\n    \npublisher.publish(\n    '3d_surface_coloring.ipynb', 'python/3d-surface-coloring/', '3D Python Surface Coloring | plotly',\n    'How to Color 3D Surface Plots in Python with Plotly.',\n    title = '3D Surface Coloring in Python | plotly',\n    name = '3D Surface Coloring',\n    has_thumbnail='true', thumbnail='thumbnail/3d-surface-color.jpg', \n    language='python',\n    display_as='style_opt', order=7,\n    ipynb= '~notebook_demo/76')\n```\n\n----------------------------------------\n\nTITLE: Class Encoding\nDESCRIPTION: Creates a dictionary to encode flower classes as numerical values.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass_code={classes[k]: k for k in range(3)}\nclass_code\n```\n\n----------------------------------------\n\nTITLE: Cloning Plotly Documentation Repository\nDESCRIPTION: Commands to clone the Plotly graphing library documentation repository and verify the clone was successful.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:plotly/graphing-library-docs.git\ncd graphing-library-docs\n```\n\nLANGUAGE: bash\nCODE:\n```\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n```\n\n----------------------------------------\n\nTITLE: Horizontal Bar Chart Creation\nDESCRIPTION: Creates a horizontal bar chart using Plotly Express with dictionary data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npx.bar(\n    dict(a=[\"a\",\"b\"], b=[1,2]),\n    y=\"a\", x=\"b\", orientation=\"h\", color=\"a\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Plotly FigureWidget\nDESCRIPTION: Displays the FigureWidget in Jupyter notebook without requiring iplot. Shows the interactive visualization immediately.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/cars-exploration.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler for Graph Interactions\nDESCRIPTION: Defines a message handler function for graph click events\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\ndef message_handler(widget, msg):\n    clear_output()\n    print widget._graph_url\n    display(msg)\n    \n\ng.on_click(message_handler)\n# g.on_zoom(message_handler)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Plotly and IPython Libraries\nDESCRIPTION: Imports necessary modules from Plotly and IPython for graph widget functionality\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nfrom plotly.graph_objs import *\nfrom IPython.display import Image, display\nfrom plotly.widgets import GraphWidget\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Presentation in IPython\nDESCRIPTION: Code for displaying a Plotly presentation within an IPython notebook environment using iframe embedding.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\n\niframe_4 = url_to_iframe(pres_url_4, True)\nIPython.display.HTML(iframe_4)\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Notebook Mode\nDESCRIPTION: Configures the notebook to use Plotly in offline mode while maintaining connectivity for some features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/parcats/parcats.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninit_notebook_mode(connected=True)\n```\n\n----------------------------------------\n\nTITLE: HTML Layout Structure for Plotly R Fundamentals Page\nDESCRIPTION: HTML structure for the Plotly R fundamentals documentation page, including the header, title, description and includes for additional content like language switcher and dashboard plug.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-fundamental-index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library Fundamentals</h1>\n\t\t\t\t<p>{{page.description}}</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Applying Kamada-Kawai Layout Algorithm for 3D Graph in Python\nDESCRIPTION: Uses the Kamada-Kawai layout algorithm to determine optimal 3D positions for each node in the graph, creating a visually balanced network layout.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlayt=G.layout('kk', dim=3) \n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Plot Function Help\nDESCRIPTION: Shows the help documentation for the py.plot function, which provides detailed information about all available parameters including privacy settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/privacy.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nhelp(py.plot)\n```\n\n----------------------------------------\n\nTITLE: R Markdown YAML Front Matter for Plotly Tutorials\nDESCRIPTION: YAML header template for R documentation files. This defines metadata like permalink, description, and layout for the tutorial page.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Your-Tutorial-Chart\npermalink: r/your-tutorial-chart/\ndescription: How to create your-tutorial-chart in R. Short description of your tutorial.\nlayout: base\nthumbnail: thumbnail/your-tutorial-chart.jpg *see step 2 for further thumbnail instructions*\nlanguage: r\npage_type: example_index\ndisplay_as: chart_type\norder: 3 *see below for order instructions*\noutput:\n  html_document:\n    keep_md: true\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly, which is important as county choropleths are available in version 2.5.1 and above.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/county-choropleth/county_choropleth.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Meshgrid for 3D Surface Plot\nDESCRIPTION: Generates x and y coordinates using NumPy's linspace and meshgrid functions to prepare for plotting 3D surfaces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-surface-lighting/3d-camera-lighting.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(-np.pi, np.pi, 100)\ny = np.linspace(-np.pi, np.pi, 100)\n\nY, X = np.meshgrid(x, y)\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Sets up documentation styling and publishes the notebook using custom publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/linear-algebra/python_Linear_Algebra.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python_Linear_Algebra.ipynb', 'python/linear-algebra/', 'Linear Algebra | plotly',\n    'Learn how to perform several operations on matrices including inverse, eigenvalues, and determinents',\n    title='Linear Algebra in Python. | plotly',\n    name='Linear Algebra',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=10,\n    ipynb= '~notebook_demo/104')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly and Checking Version\nDESCRIPTION: Imports the Plotly package and checks the installed version to ensure compatibility with streaming functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import plotly package\nimport plotly\n \n# Check plolty version (if not latest, please upgrade)\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Color Value Assignment\nDESCRIPTION: Assigns color values based on flower classes for visualization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolor_vals=[class_code[cl] for cl in df['class']]\n```\n\n----------------------------------------\n\nTITLE: Plotting the Second Plotly Figure in Python\nDESCRIPTION: Uses the iplot function to display the second interactive Plotly figure in the Jupyter Notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\niplot(fig2)\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Code to import Plotly dependencies and check the installed version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\n\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Checks installed version of Plotly library to ensure compatibility with bullet charts (requires v2.2.2+)\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Exporting Plotly Figure to SVG Format\nDESCRIPTION: Demonstrates exporting a Plotly figure to SVG vector format using the write_image function.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/static-image/static-image-export.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, 'images/fig1.svg')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python\nDESCRIPTION: Simple version check to ensure Plotly is updated to 1.12.10+ for animation support\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/filled-area-animation/filled-area-animation.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Publishing Jupyter Notebooks with Custom Styling and Metadata\nDESCRIPTION: This code publishes a Jupyter notebook to Plotly with custom styling and metadata. It installs the publisher package, applies custom CSS and fonts, and sets various publishing parameters for appearance and categorization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/ipython-notebooks/jupyter_tutorial.ipynb#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n!pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'jupyter_tutorial.ipynb', 'python/ipython-notebook-tutorial/', 'Jupyter Notebook Tutorial',\n    'Jupyter notebook tutorial on how to install, run, and use Jupyter for interactive matplotlib plotting, data analysis, and publishing code',\n    title = 'Jupyter Notebook Tutorial | plotly',\n    name = 'Jupyter Notebook Tutorial',\n    thumbnail='thumbnail/ipythonnb.jpg', language='python',\n    page_type='example_index', has_thumbnail='true', display_as='chart_studio', order=11,\n    ipynb='~chelsea_lyn/14070')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to verify the installed version of Plotly. This is useful to ensure compatibility with the examples that follow.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/candlestick/candlestick-charts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Examples List for Plotly R Maps\nDESCRIPTION: This Liquid snippet filters and sorts R-specific map documentation examples, then includes a template to display them. It uses the 'site.posts' collection to gather relevant posts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-maps-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"maps\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Page Header Template with Liquid Tags in HTML\nDESCRIPTION: This snippet defines the header section of the financial charts documentation page. It includes the page title, description with Liquid template variable insertion, and includes for additional page components like language switcher and dashboard plug.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2019-09-12-r-financial-charts-index.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library Financial Charts</h1>\n\t\t\t\t<p>{{page.description}}</consectetur>\n\t\t\t\t</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple code to import the Plotly library and check its version. This is useful to ensure you have the latest version installed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/subplots/ff-subplots/ff-subplots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: A simple code snippet to check the installed version of Plotly's Python package. This is useful to verify you're using the latest version after upgrading.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-streamtube/streamtube.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This code checks the installed version of Plotly and imports the main package. It's useful for ensuring compatibility before using the streaming API features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import plotly package\nimport plotly\n \n# Check plolty version (if not latest, please upgrade)\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Classes\nDESCRIPTION: Extracts unique flower classes from the Iris dataset.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclasses=np.unique(df['class'].values).tolist()\nclasses\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Example in Python\nDESCRIPTION: Simple Python code example showing conditional logic with nested if statements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nx = 4\n\nif x < 2:\n    x = 2 * x\n    if x >= 2:\n        break\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple code to check the installed version of Plotly library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/tesla-supercharging-stations/tesla-supercharging-stations.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Viewing Stream Object Documentation\nDESCRIPTION: Displays help documentation for the Stream object, showing available parameters and usage information for creating stream ID objects.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhelp(Stream)  # call help() to see the specifications of the Stream object!\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Documentation with Python\nDESCRIPTION: This code snippet demonstrates how to publish Plotly documentation using a custom publisher module. It sets up display settings, installs the publisher, and configures various metadata for the documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet-scatter/scattercarpet.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'scattercarpet.ipynb', 'python/carpet-scatter/', 'Carpet Scatter Plot',\n    'How to make carpet scatter plots in Python with Plotly.',\n    title = 'Carpet Scatter Plots | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/scattercarpet.jpg', \n    language='python', \n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='scientific', order=28,\n    ipynb= '~notebook_demo/146')\n```\n\n----------------------------------------\n\nTITLE: Creating Subplot Layout with Plotly\nDESCRIPTION: Creates a 3x2 subplot layout using Plotly's make_subplots function to organize the trace and histogram plots for each parameter.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfig7 = tls.make_subplots(3, 2)\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Displaying R 3D Chart Examples\nDESCRIPTION: Liquid template code that filters and sorts posts to display only R language 3D chart examples. It assigns the filtered list to a variable and then includes a template to render the documentation examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-3d-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"3d_charts\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Installing and Reading PLY File Data\nDESCRIPTION: Installs plyfile package and reads 3D object data from a PLY file using urllib2\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/triangulation/triangulation.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n!pip install plyfile\nfrom plyfile import PlyData, PlyElement\n\nimport urllib2\nreq = urllib2.Request('http://people.sc.fsu.edu/~jburkardt/data/ply/chopper.ply') \nopener = urllib2.build_opener()\nf = opener.open(req)\nplydata = PlyData.read(f)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to import the Plotly library and check its installed version. It's useful for ensuring you're using the latest version of Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/bubble-maps/bubble-maps.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Trend Plot with Plotly\nDESCRIPTION: Configuring and generating an interactive line plot using Plotly to visualize programming language trends, including custom styling, annotations, and layout settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntrace1 = go.Scatter(\n    x=python_df['years'],\n    y=python_df['trends'],\n    mode='lines',\n    line=dict(color='rgba(115,115,115,1)', width=4),\n    connectgaps=True,\n)\n\ntrace2 = go.Scatter(\n    x=[python_df['years'][0], python_df['years'][8]],\n    y=[python_df['trends'][0], python_df['trends'][8]],\n    mode='markers',\n    marker=dict(color='rgba(115,115,115,1)', size=8)\n)\n\ntrace3 = go.Scatter(\n    x=php_df['years'],\n    y=php_df['trends'],\n    mode='lines',\n    line=dict(color='rgba(189,189,189,1)', width=4),\n    connectgaps=True,\n)\n\ntrace4 = go.Scatter(\n    x=[php_df['years'][0], php_df['years'][8]],\n    y=[php_df['trends'][0], php_df['trends'][8]],\n    mode='markers',\n    marker=dict(color='rgba(189,189,189,1)', size=8)\n)\n\ntraces = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        autotick=False,\n        ticks='outside',\n        tickcolor='rgb(204, 204, 204)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n)\n\nannotations = []\n\nannotations.append(\n    dict(xref='paper', x=0.95, y=python_df['trends'][8],\n    xanchor='left', yanchor='middle',\n    text='Python',\n    font=dict(\n        family='Arial',\n        size=14,\n        color='rgba(49,130,189, 1)'\n    ),\n    showarrow=False)\n)\n\nannotations.append(\n    dict(xref='paper', x=0.95, y=php_df['trends'][8],\n    xanchor='left', yanchor='middle',\n    text='PHP',\n    font=dict(\n        family='Arial',\n        size=14,\n        color='rgba(49,130,189, 1)'\n    ),\n    showarrow=False)\n)\n\nannotations.append(\n    dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n    xanchor='center', yanchor='top',\n    text='Source: Hacker News submissions with the title containing Python/PHP',\n    font=dict(\n        family='Arial',\n        size=12,\n        color='rgb(150,150,150)'\n    ),\n    showarrow=False)\n)\n\nlayout['annotations'] = annotations\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='programming-language-trends')\n```\n\n----------------------------------------\n\nTITLE: Generating Gaussian Test Data\nDESCRIPTION: Creates a test dataset by generating random normally distributed data using NumPy, with mean=50 and standard deviation=5.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Seed the random number generator\nnp.random.seed(10)\n\n# Generate Univariate Observations\ngauss_data = 5 * np.random.randn(100) + 50\nprint('mean=%.3f stdv=%.3f' % (np.mean(gauss_data), np.std(gauss_data)))\n```\n\n----------------------------------------\n\nTITLE: Version Check in Plotly\nDESCRIPTION: Simple code to check the installed version of Plotly library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/facet-trellis/facet-and-trellis-plots.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Simple version check for the Plotly Python package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/splom/splom.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Python Package\nDESCRIPTION: Simple version check for the Plotly package to ensure latest version is installed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/area/area.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Accessing Distribution Plot Function Help Documentation\nDESCRIPTION: Shows how to access the help documentation for the create_distplot function. This provides detailed information on all available parameters and options for creating distribution plots.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/distplot/distplots.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhelp(ff.create_distplot)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Axis Visualization of Complete System Response\nDESCRIPTION: Sets up a complex multi-axis plot that shows steering, roll, and heading angles simultaneously, clearly demonstrating the countersteering phenomenon in bicycle control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bicycle_control.ipynb#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nxaxis = gr.XAxis(title='Time [s]')\n    \nyaxis = gr.YAxis(title='Steer [deg]', domain=[0.0, 0.32])\nyaxis2 = gr.YAxis(title='Roll [deg]', domain=[0.33, 0.65])\nyaxis3 = gr.YAxis(title='Heading [deg]', domain=[0.66, 1.0])\n\nlayout = gr.Layout(title='Commanded Heading Response', showlegend=False,\n                   xaxis=xaxis, yaxis=yaxis, yaxis2=yaxis2, yaxis3=yaxis3)\n\nsteer_trace = gr.Scatter(x=time, y=np.rad2deg(delta))\nroll_trace = gr.Scatter(x=time, y=np.rad2deg(theta), yaxis='y2')\nheading_trace = gr.Scatter(x=time, y=np.rad2deg(psi), yaxis='y3')\ncommanded_heading_trace = gr.Scatter(x=time, y=np.rad2deg(psic), yaxis='y3')\n\ndata = gr.Data([steer_trace, roll_trace, heading_trace, commanded_heading_trace])\n    \nfig = gr.Figure(data=data, layout=layout)\n\npl.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Table Trace for Plotly in Python\nDESCRIPTION: Defines another table trace for Plotly, focusing on transaction data such as number of transactions, output volume, and cost per transaction.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntable_trace2=dict(type = 'table',\n                  domain=dict(x= [0.1, 0.9],\n                             y= [0.4, 1]),\n                 \n                 columnwidth= [30]+[ 33, 35, 33],\n                 columnorder=[0, 1, 2, 3, 4],\n                 header = dict(height = 50,\n                               values = [['<b>Date</b>'],['<b>Nr-transactions</b>'], \n                                         ['<b>Output-volume</b>'],\n                                           ['<b>Cost-per-trans</b>']],\n                               line = dict(color='rgb(50,50,50)'),\n                               align = ['left']*4,\n                               font = dict(color=['rgb(45,45,45)']*4, size=14),\n                               fill = dict( color = '#d562be' )#fill color for header\n                              ),\n                 cells = dict(values = [df['Date'][-60:-44], \n                                        df['Number-transactions'][-60:-44],\n                                        df['Output-volume(BTC)'][-60:-44],\n                                        df['Cost-per-trans-USD'][-60:-44]\n                                       ],\n                              line = dict(color='#506784'),\n                              align = ['left']*4,\n                              font = dict(color=['rgb(40,40,40)']*4, size=12),\n                              format = [None]+ ['d']+[\",.2f\"]*2,  \n                              prefix = [None]*2+[ u'\\u20BF', '$'],\n                              suffix=[None]*4,\n                              height = 27,\n                              fill = dict( color = ['rgb(235,193, 238', 'rgba(228, 222,249, 0.65)'] )\n                             )\n                  )\n```\n\n----------------------------------------\n\nTITLE: Filtering and displaying R statistical chart documentation examples with Liquid\nDESCRIPTION: This snippet uses Liquid templating to filter and sort documentation examples. It assigns posts that match specific criteria (language is R, display category is statistical, layout is base) to the languagelist variable, then includes a template to render these examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-statistical-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\" | where:\"display_as\",\"statistical\" | where: \"layout\",\"base\" | sort: \"order\" %}\n{% include posts/documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Trace Bar Charts with Custom Styling in Plotly\nDESCRIPTION: Demonstrates how to create a more complex bar chart with multiple data traces, custom colors, and titles using Plotly. This example compares men's and women's earnings and the gap between them.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.graph_objects as go\n\ntrace_women = go.Bar(x=df.School,\n                  y=df.Women,\n                  name='Women',\n                  marker=dict(color='#ffcdd2'))\n\ntrace_men = go.Bar(x=df.School,\n                y=df.Men,\n                name='Men',\n                marker=dict(color='#A2D5F2'))\n\ntrace_gap = go.Bar(x=df.School,\n                y=df.Gap,\n                name='Gap',\n                marker=dict(color='#59606D'))\n\ndata = [trace_women, trace_men, trace_gap]\n\nlayout = go.Layout(title=\"Average Earnings for Graduates\",\n                xaxis=dict(title='School'),\n                yaxis=dict(title='Salary (in thousands)'))\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, sharing='private', filename='jupyter-styled_bar')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to import Plotly and check its installed version. It's useful for ensuring compatibility with the latest features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/lines-on-maps/lines_on_maps.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart of Lead Statuses with Plotly\nDESCRIPTION: Creates an interactive bar chart visualizing the distribution of lead statuses using Plotly. Charts are displayed inline in the notebook and saved to Plotly's server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/salesforce.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndata = [go.Bar(x=status_counts.keys(), y=status_counts.values())]\npy.iplot(data, filename='salesforce/lead-distributions')\n```\n\n----------------------------------------\n\nTITLE: Saving Plotly Figure as Static Image\nDESCRIPTION: Shows how to save a Plotly figure as a static image file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npio.write_image(fig, file='plotly_static_image.png', format='png')\n```\n\n----------------------------------------\n\nTITLE: Shutdown Orca Server\nDESCRIPTION: Manually shutdown the Orca server and check its status.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npio.orca.shutdown_server()\npio.orca.status\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Graph Data\nDESCRIPTION: Retrieves graph data from a Plotly URL endpoint\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/onclick.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# get graph data\ncontour_data = py.get_figure('https://plotly.com/~bronsolo/63')\n```\n\n----------------------------------------\n\nTITLE: HTML Layout Structure for 3D Charts Documentation Page\nDESCRIPTION: HTML structure that defines the layout of the 3D charts documentation page, including the header section with title and description. The layout uses Liquid templating to include additional components and documentation examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-3d-index.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library 3D Charts</h1>\n\t\t\t\t<p>{{page.description}}</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of the Plotly library in Python. It's useful for ensuring you're using the latest version of Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/fileopt/fileopts.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly Dependencies\nDESCRIPTION: Initial imports required for Plotly graphing and IPython display functionality\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/plotly_widgets.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom IPython.display import Image\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Line Parsing in Scala\nDESCRIPTION: A Scala program demonstrating basic command line argument parsing with pattern matching and conditional output using println().\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/presentations/presentations-api.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n/** Basic command line parsing. */\nobject Main {\n  var verbose = false\n\n  def main(args: Array[String]) {\n    for (a <- args) a match {\n      case \"-h\" | \"-help\"    =>\n        println(\"Usage: scala Main [-help|-verbose]\")\n      case \"-v\" | \"-verbose\" =>\n        verbose = true\n      case x =>\n        println(\"Unknown option: '\" + x + \"'\")\n    }\n    if (verbose)\n      println(\"How are you today?\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Jekyll Posts for R Documentation\nDESCRIPTION: Liquid template code that filters site posts by the R language and sorts them by order. This creates a languagelist variable that will be used to render the main documentation examples.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2015-07-30-r-index.md#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign languagelist = site.posts | where:\"language\",\"r\"  | sort: \"order\"  %}\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Creating Tables with Plotly in Jupyter\nDESCRIPTION: Demonstrates how to import data from a CSV file using Pandas and display it as an interactive table using Plotly. This example reads data from a GitHub repository and formats it as a table.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/ipython-notebook-tutorial.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport plotly.figure_factory as ff\nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv\")\n\ntable = ff.create_table(df)\npy.iplot(table, filename='jupyter-table1')\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple code to verify the installed version of Plotly Python package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/maps/mapbox/mapbox.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Generating Histograms for Expression Breadth and Average Levels with Plotly in Python\nDESCRIPTION: Calculates expression breadth and average expression levels for genes, then creates two histograms using Plotly. The histograms are arranged side by side in a single figure to compare distributions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/bioinformatics.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf['breadth'] =  (df[df.columns[1:].values.tolist()].astype('float')\n\n>0).sum(axis=1)\n\ndf['avg'] = df[df.columns[1:].values.tolist()].astype('float').mean(axis=1)\n\ntrace1 = Histogram(\n        name=\"expression breadth\",\n        x = df['breadth'],\n        marker=Marker(\n        line=Line(\n            color='grey',\n            width=0\n        ),\n        opacity=0.75\n        ),\n)\n\ntrace2 = Histogram(\n        name=\"average expression\",\n        x = df['avg'],\n        marker=Marker(\n        line=Line(\n            color='grey',\n            width=0\n        ),\n        opacity=0.75\n        ),\n    xaxis='x2',\n    yaxis='y2'\n    )\n\n\nlayout = Layout(\n    title=\"Exploring the distributions\",\n    xaxis=XAxis(\n        title='breadth',\n         domain=[0, 0.45]\n    ),\n    xaxis2=XAxis(\n        title='average expression',\n        domain=[0.55, 1],\n    ), \n    yaxis2=YAxis(\n        anchor='x2'\n    )\n)\n\nfig = Figure(data=Data([trace1, trace2]), layout=layout)\npy.iplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Defining Color for Plotly Visualizations in Python\nDESCRIPTION: This snippet sets a color variable for use in Plotly visualizations. It defines a single hexadecimal color code.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncolor = '#3182bd'\n```\n\n----------------------------------------\n\nTITLE: Version Check in Plotly Python\nDESCRIPTION: Simple code to check the installed version of Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/scatterpolar/polar.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Orca Server Status\nDESCRIPTION: View the current status of the Orca server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npio.orca.status\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Styling for Jupyter Notebook\nDESCRIPTION: This code sets up custom styling for the Jupyter Notebook environment, including font styles and CSS. It also installs and uses a custom publisher for documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/dendrogram/dendrograms.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'dendrograms.ipynb', 'python/dendrogram/', 'Python Dendrograms',\n    'How to make a dendrogram in Python with Plotly. ',\n    name = 'Dendrograms',\n    title = \"Dendrograms | Plotly\",\n    thumbnail='thumbnail/dendrogram.jpg', language='python',\n    has_thumbnail='true', display_as='scientific', order=6,\n    ipynb= '~notebook_demo/262')\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plotly Visualizations\nDESCRIPTION: Creates two interactive plots: a scatter plot of cylinders vs weight and a bar chart of mpg by model. These plots will be linked through zoom events.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata1 = [{'x': df['cyl'], 'y': df['wt'], 'text': df['model'], 'type': 'scatter', 'mode': 'markers'}]\nlayout1 = {'xaxis': {'title': 'Cylinders'}, 'yaxis': {'title': 'Weight'}, 'hovermode': 'closest'}\nurl = py.plot({'data': data1, 'layout': layout1}, filename=\"mouseevent-scatter1\", auto_open=False)\n\ndata2 = [{'x': df['model'], 'y': df['mpg'], 'text': df['model'], 'type': 'bar', 'marker': {'color': 'pink'}}]\nlayout2 = {'xaxis': {'title': 'Model'}, 'yaxis': {'title': 'Miles per Gallon'}, 'hovermode': 'closest'}\n\nurl = py.plot({'data': data2}, filename=\"mouseevent-scatter2\", auto_open=False)\n```\n\n----------------------------------------\n\nTITLE: Computing Eigendecomposition using Raw Data Correlation Matrix\nDESCRIPTION: Calculates eigendecomposition using the correlation matrix of raw (non-standardized) data to compare with standardized results.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/principal_component_analysis.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncor_mat2 = np.corrcoef(X.T)\n\neig_vals, eig_vecs = np.linalg.eig(cor_mat2)\n\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for R Chart Events Redirect\nDESCRIPTION: This YAML front matter defines a permalink and redirect_to parameter. It sets up a redirect from the '/r/chart-events/' path to the 'https://dashr.plot.ly' documentation site.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-events/2019-09-12-r-chart-events-index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npermalink: r/chart-events/\nredirect_to: https://dashr.plot.ly\n---\n```\n\n----------------------------------------\n\nTITLE: Navigating to Virtualenv Directory\nDESCRIPTION: Command to change the current directory to the virtualenvs directory created in the previous step.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/.virtualenvs\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Time Series Plot\nDESCRIPTION: Creates a basic line plot of the milk production time series data using Plotly's Scatter plot.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrace = go.Scatter(\n    x = [j for j in range(len(time_series))],\n    y = time_series,\n    mode = 'lines'\n)\n\ndata = [trace]\npy.iplot(data, filename='milk-production-plot')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Subplots in Plotly\nDESCRIPTION: Shows how to create four subplots in a 2x2 grid layout using custom axis domains. Each subplot contains a scatter plot with different data ranges.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/subplots/subplots.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n    x=[1, 2, 3],\n    y=[4, 5, 6]\n)\ntrace2 = go.Scatter(\n    x=[20, 30, 40],\n    y=[50, 60, 70],\n    xaxis='x2',\n    yaxis='y2'\n)\ntrace3 = go.Scatter(\n    x=[300, 400, 500],\n    y=[600, 700, 800],\n    xaxis='x3',\n    yaxis='y3'\n)\ntrace4 = go.Scatter(\n    x=[4000, 5000, 6000],\n    y=[7000, 8000, 9000],\n    xaxis='x4',\n    yaxis='y4'\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='multiple-subplots')\n```\n\n----------------------------------------\n\nTITLE: Importing igraph and Reading Graph Data in Python\nDESCRIPTION: Imports the igraph library and reads a graph from a GML file containing Eurovision Song Contest voting data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/chord/EuroVision-Circular-Graph.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport igraph as ig\n\nG=ig.Graph.Read_GML('Eurovision15.gml')\n```\n\n----------------------------------------\n\nTITLE: Empty Python Code Block\nDESCRIPTION: An empty Python code block placeholder with no content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/embedding-charts.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Checking Orca Configuration\nDESCRIPTION: Display current Orca configuration settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/orca-management/orca-management.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npio.orca.config\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Studio Enterprise Connection\nDESCRIPTION: Python code to configure the connection to a Chart Studio Enterprise server instead of the public cloud, specifying the custom domains for API, web interface, and streaming.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nchart_studio.tools.set_config_file(\n    plotly_domain='https://plotly.your-company.com',\n    plotly_api_domain='https://plotly.your-company.com',\n    plotly_streaming_domain='https://stream-plotly.your-company.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Frames for Gapminder Animation\nDESCRIPTION: Comprehensive frame generation code that creates data points for each year and continent, including marker sizing and coloring configuration. Also includes slider step configuration for animation control.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/animations/gapminder-example/gapminder-example.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for continent in continents:\n        data_dict = {\n            'xsrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='lifeExp'\n            )),\n            'ysrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='gdpPercap'\n            )),\n            'mode': 'markers',\n            'textsrc': grid.get_column_reference(col_name_template.format(\n                year=year, continent=continent, header='country'\n                )),\n            'marker': {\n                'sizemode': 'area',\n                'sizeref': 200000,\n                'sizesrc': grid.get_column_reference(col_name_template.format(\n                    year=year, continent=continent, header='pop'\n                )),\n                'color': custom_colors[continent]\n            },\n            'name': continent\n        }\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\nfigure['layout']['sliders'] = [sliders_dict]\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-sized Placeholder\nDESCRIPTION: HTML for creating a placeholder without enforced dimensions using the auto flag.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<img data-src=\"holder.js/200x200/auto\">\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Trend Lines\nDESCRIPTION: Creates a faceted scatter plot with trend lines using happiness data, including custom styling and axis matching.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('/Users/nicolas/Downloads/World_Happiness_2015_2017_.csv')\npx.scatter(df, x=df.select_dtypes(np.float64).columns, y='Happiness Score', trendline='ols',\n           color=px.NO_COLOR, trendline_color_override=\"red\", render_mode=\"svg\",\n          facet_col=\"variable\", facet_col_wrap=3).update_xaxes(matches=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Replotting a Public Plotly Figure by ID in Python\nDESCRIPTION: This code demonstrates how to retrieve a public Plotly figure using its owner's username and figure ID, then replot it. It uses the chart_studio.plotly library to interact with the Plotly API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/get-requests.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nfig = py.get_figure(\"PlotBot\", 5)\n\nplot_url = py.plot(fig, filename=\"python-replot2\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook Configuration\nDESCRIPTION: Sets up the notebook styling and publishes it to Plotly's documentation platform with specific metadata and configuration.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/peak-analysis/peak-finding/python-Peak-Finding.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'python-Peak-Finding.ipynb', 'python/peak-finding/', 'Peak Finding | plotly',\n    'Learn how to find peaks and valleys on datasets in Python',\n    title='Peak Finding in Python | plotly',\n    name='Peak Finding',\n    language='python',\n    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=3,\n    ipynb= '~notebook_demo/120')\n```\n\n----------------------------------------\n\nTITLE: Jekyll Configuration for JavaScript Documentation\nDESCRIPTION: YAML configuration example showing how to exclude all directories except JavaScript documentation when running Jekyll locally.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ---\n# Excludes every directory except JavaScript\n# ---\nexclude: ['_posts/reference_pages', _posts/ggplot2','_posts/julia','_posts/matlab','_posts/node_js','_posts/r','_posts/python','_posts/python-v3','_posts/misc','_posts/dashboards',_posts/scala', '_posts/nodejs', 'node_modules']\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for API Access\nDESCRIPTION: Imports necessary libraries for using Plotly's REST API to manage plot privacy.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/privacy/privacy.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly Installation\nDESCRIPTION: Simple code to check the installed version of Plotly package\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/bigquery/BigQuery-Plotly.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Loading Historical Market Data with Zipline\nDESCRIPTION: Loads historical stock price data for multiple securities using Zipline's Yahoo data loader function. Fetches data for IBM, GLD, XOM, AAPL, MSFT, TLT, and SHY stocks over 2500 business days.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/markowitz.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom zipline.utils.factory import load_bars_from_yahoo\nend = pd.Timestamp.utcnow()\nstart = end - 2500 * pd.tseries.offsets.BDay()\n\ndata = load_bars_from_yahoo(stocks=['IBM', 'GLD', 'XOM', 'AAPL', \n                                    'MSFT', 'TLT', 'SHY'],\n                            start=start, end=end)\n```\n\n----------------------------------------\n\nTITLE: Interactive Plot in IPython Notebook\nDESCRIPTION: Code showing how to create an interactive plot embedded in an IPython notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s0_getting-started.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# (@) Sent data to Plotly and show result in notebook \npy.iplot(data, filename='s0_first_plot')\n```\n\n----------------------------------------\n\nTITLE: Plotly Scatter Plot Attribute Schema\nDESCRIPTION: Hierarchical documentation of all available attributes for configuring scatter plots in Plotly. Lists properties for styling markers, text, lines, hover behavior, and other visual elements.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/ref_names.txt#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nscatter > textfont > color\nscatter > textfont > family\nscatter > textfont > size\nscatter > textposition\nscatter > transforms\nscatter > transforms > items\nscatter > transforms > items > transform\nscatter > type\nscatter > unselected\nscatter > unselected > marker\nscatter > unselected > marker > color\nscatter > unselected > marker > opacity\nscatter > unselected > marker > size\nscatter > unselected > textfont\nscatter > unselected > textfont > color\nscatter > visible\nscatter > x\nscatter > x0\nscatter > xaxis\nscatter > xcalendar\nscatter > y\nscatter > y0\nscatter > yaxis\nscatter > ycalendar\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting a Plotly Plot Using API\nDESCRIPTION: This snippet shows the process of permanently deleting a plot. It first moves the plot to trash, then sends a DELETE request to permanently remove it. This action cannot be undone.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/delete-plots.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfid_permanent_delete = username+':661'\nfid_permanent_delete\n\nrequests.post('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/trash', auth=auth, headers=headers)\n\nrequests.delete('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/permanent_delete', auth=auth, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher\nDESCRIPTION: Sets up custom styling and publishes the notebook using Plotly's publisher tool. This code is used for internal Plotly documentation publishing and includes metadata about the notebook.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/figureWidgets/figurewidget-overview.ipynb#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n    \nimport publisher\npublisher.publish(\n    'figurewidget-overview.ipynb', 'python/figurewidget/', 'FigureWidget | Plotly',\n    'Introduction to the new Plotly FigureWidget',\n    title = 'Plotly FigureWidget Overview',\n    name = 'Plotly FigureWidget Overview',\n    uses_plotly_offline=True,\n    has_thumbnail='true', thumbnail='thumbnail/figurewidget-overview.gif', \n    language='python', page_type='example_index', \n    display_as='chart_events', order=0,\n    ipynb= '~notebook_demo/235')\n```\n\n----------------------------------------\n\nTITLE: 2D Spline Interpolation and Visualization\nDESCRIPTION: Demonstrates cubic spline interpolation on a 2D grid using SciPy, creating a 3D visualization with both original and interpolated data points using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/mathematics/interpolation-and-extrapolation-in-2d/python_Interpolation_and_Extrapolation_in_2D.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import interpolate\n\nx = np.arange(-5.0, 5.0, 0.25)\ny = np.arange(-5.0, 5.0, 0.25)\nxx, yy = np.meshgrid(x, y)\nz = np.sin(xx**2+yy**2)\nf = interpolate.interp2d(x, y, z, kind='cubic')\n\nxnew = np.arange(-5.0, 5.0, 1e-1)\nynew = np.arange(-5.0, 5.0, 1e-1)\nznew = f(xnew, ynew)\n\ntrace1 = go.Scatter3d(\n    x=x,\n    y=y,\n    z=z[0, :],\n    mode='markers',\n    name='Data',\n    marker = dict(\n        size = 7\n    )\n)\n\ntrace2 = go.Scatter3d(\n    x=ynew,\n    y=xnew,\n    z=znew[0, :],\n    marker=dict(\n        size=3,\n    ),\n    name='Interpolated Data'\n)\n\nlayout = go.Layout(\n    title='Interpolation and Extrapolation in 2D',\n    scene=dict(\n            camera= dict(\n                up=dict(x=0, y=0, z=1),\n                center=dict(x=0, y=0, z=0),\n                eye=dict(x=1, y=-1, z=0)\n            )\n    )\n)\n\ndata = [trace1, trace2]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='interpolation-and-extrapolation-2d')\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data for Soil Types Ternary Plot in Python\nDESCRIPTION: This code fetches JSON data from a URL for use in creating a soil types ternary plot. It uses urllib2 to make a request and load the JSON data.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json'\nreq = urllib2.Request(url)\nopener = urllib2.build_opener()\nf = opener.open(req)\njson = json.loads(f.read())\n```\n\n----------------------------------------\n\nTITLE: CSS Styling in IPython Notebook\nDESCRIPTION: Demonstrates how to apply custom CSS styling within an IPython notebook\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/s1_line-scatter.ipynb#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# CSS styling within IPython notebook\nfrom IPython.display import display, HTML\ndisplay(HTML(open('../custom.css').read()))\n```\n\n----------------------------------------\n\nTITLE: Publishing Sankey Diagram Tutorial with Plotly Publisher\nDESCRIPTION: This snippet demonstrates how to publish the Sankey diagram tutorial using Plotly's publisher tool. It sets up custom CSS, installs the publisher, and defines metadata for the tutorial.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/sankey/sankey.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'sankey.ipynb', 'python/sankey-diagram/', 'Sankey Diagram',\n    'How to make Sankey Diagrams in Python with Plotly.',\n    title = 'Sankey Diagram | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/sankey.jpg', \n    language='python',\n    display_as='basic', order=11,\n    ipynb= '~notebook_demo/151')\n```\n\n----------------------------------------\n\nTITLE: HTML Content Box with Redirect Notice\nDESCRIPTION: HTML markup for a content box containing redirect notice and link to current documentation on GitHub.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/nodejs/static-image/2015-04-09-static-image_node_js_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"content-box\">\n<p>These docs have moved!</p><br>\n\n<p><a href=\"https://github.com/plotly/plotly-nodejs#plotlygetimagefigure-options-callback\">Learn about image exporting Node.js on our GitHub docs.</a></p><br>\n</div><br>\n```\n\n----------------------------------------\n\nTITLE: Converting Stock Price Data to Pandas DataFrame\nDESCRIPTION: This snippet converts the list of stock prices into a Pandas DataFrame for easier manipulation and analysis. Each column in the DataFrame represents a different company's stock, and the column names are set to the corresponding ticker symbols.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/html-reports.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame( prices ).transpose()\ndf.columns = tickers\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Starting Python in Terminal\nDESCRIPTION: Simple command to start the Python interpreter in the terminal after installing the necessary packages.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Kernel Density Plot for Iris Dataset with Plotly in Python\nDESCRIPTION: This code reads the Iris dataset from a CSV file, filters for Iris-virginica, and creates a 2D kernel density plot for sepal length and width using Plotly.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/2d-kernel-density-distributions.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv')\nvirginica = df.loc[df.Name == \"Iris-virginica\"]\na, b=(5,8.5)\nc,d=(2,4)\nN=100\nfig=make_kdeplot(virginica.SepalLength, virginica.SepalWidth, (a,b), (c,d),\n    N, cubehelix_cs, 'kde plot of joint distribution for virginica SepalLength and SepalWidth')\npy.iplot(fig,  filename='virginica-sepal-length-vs-width')\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly and Checking Version in Python\nDESCRIPTION: This snippet imports the Plotly library and prints its version. It's a basic setup step for using Plotly in Python.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/ternary/ternary2examples.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Getting Help on Figure Object - Plotly Python\nDESCRIPTION: This snippet uses the help function to display the parameters and attributes available for the Figure object in Plotly's graphing library.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.Figure)\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Values to Carpet Plot in Python with Plotly\nDESCRIPTION: This snippet demonstrates how to add parameter values (a and b) to a carpet plot using Plotly in Python. It includes both a and b attributes along with y-coordinates.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/carpet/carpet_plot.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\ntrace1 = go.Carpet(\n    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n)\n\ndata = [trace1]\n\nfig = go.Figure(data = data)\npy.iplot(fig, filename = \"carpet/add-parameters\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Demo Animation\nDESCRIPTION: Embeds an HTML image showing a GIF demonstration of the zoom functionality.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/javascript-controls/ipython-widgets/mouse_events.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%%html\n<img src='https://cloud.githubusercontent.com/assets/12302455/16634428/9eb5ac92-439b-11e6-8ea4-a6478104c781.gif'>\n```\n\n----------------------------------------\n\nTITLE: Version Check for Plotly\nDESCRIPTION: Simple version check for Plotly library to ensure compatibility with table features (requires v2.1.0+).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table/table_sub.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Updating and Plotting the Annotated August 17 Scoreboard in Plotly\nDESCRIPTION: Updates the figure layout with a new title indicating the August 17 date and that it's an annotated heatmap, then plots the final annotated scoreboard.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/scoreboard-republican-candidates.ipynb#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfig['layout'].update(\ntitle=\"A scoreboard for republican candidates as of August 17, 2015 <br> Annotated heatmap\",\nannotations=annotations\n)    \n\npy.iplot(fig,filename='Annotated heatmap-republican-candidates-17')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Simple version check for the Plotly package.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Displaying a Dash App in IPython Notebook\nDESCRIPTION: This snippet shows how to embed a Dash application in an IPython notebook using IFrame. It references a 3D scatter plot implementation as a web-based application hosted on Plotly's server.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-scatter/3d_scatter.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-3dscatterplot/\", width=\"100%\", height=\"950px\",frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Trashing a Plotly Graph in Python\nDESCRIPTION: This snippet shows how to move a Plotly graph to the trash using the REST API. It sends a POST request to the API endpoint with the file ID of the plot to be trashed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/delete/delete.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfid = username+':18'\nfid\n\nrequests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Time-Series Graph with Category-Ordered X-Axis and Financial Data\nDESCRIPTION: This JSON snippet configures a Plotly visualization with financial time-series data. It defines the x-axis as a category type with ordered date values from 1967 to 2007, and includes numerical data points that likely represent financial metrics over time.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-get-requests.md#2025-04-11_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"xaxis\": {\n    \"domain\": [0, 1],\n    \"automargin\": true,\n    \"type\": \"category\",\n    \"categoryorder\": \"array\",\n    \"categoryarray\": [\"1967-06-30\", \"1967-07-31\", \"1967-08-31\", \"1967-09-30\", \"1967-10-31\", \"1967-11-30\", \"1967-12-31\", \"1968-01-31\", \"1968-02-29\", \"1968-03-31\", \"1968-04-30\", \"1968-05-31\", \"1968-06-30\", \"1968-07-31\", \"1968-08-31\", \"1968-09-30\", \"1968-10-31\", \"1968-11-30\", \"1968-12-31\", \"1969-01-31\", \"1969-02-28\", \"1969-03-31\", \"1969-04-30\", \"1969-05-31\", \"1969-06-30\", \"1969-07-31\", \"1969-08-31\", \"1969-09-30\", \"1969-10-31\", \"1969-11-30\", \"1969-12-31\", \"1970-01-31\", \"1970-02-28\", \"1970-03-31\", \"1970-04-30\", \"1970-05-31\", \"1970-06-30\", \"1970-07-31\", \"1970-08-31\", \"1970-09-30\", \"1970-10-31\", \"1970-11-30\", \"1970-12-31\", \"1971-01-31\", \"1971-02-28\", \"1971-03-31\", \"1971-04-30\", \"1971-05-31\", \"1971-06-30\", \"1971-07-31\", \"1971-08-31\", \"1971-09-30\", \"1971-10-31\", \"1971-11-30\", \"1971-12-31\", \"1972-01-31\", \"1972-02-29\", \"1972-03-31\", \"1972-04-30\", \"1972-05-31\", \"1972-06-30\", \"1972-07-31\", \"1972-08-31\", \"1972-09-30\", \"1972-10-31\", \"1972-11-30\", \"1972-12-31\", \"1973-01-31\", \"1973-02-28\", \"1973-03-31\", \"1973-04-30\", \"1973-05-31\", \"1973-06-30\", \"1973-07-31\", \"1973-08-31\", \"1973-09-30\", \"1973-10-31\", \"1973-11-30\", \"1973-12-31\", \"1974-01-31\", \"1974-02-28\", \"1974-03-31\", \"1974-04-30\", \"1974-05-31\", \"1974-06-30\", \"1974-07-31\", \"1974-08-31\", \"1974-09-30\", \"1974-10-31\", \"1974-11-30\", \"1974-12-31\", \"1975-01-31\", \"1975-02-28\", \"1975-03-31\", \"1975-04-30\", \"1975-05-31\", \"1975-06-30\", \"1975-07-31\", \"1975-08-31\", \"1975-09-30\", \"1975-10-31\", \"1975-11-30\", \"1975-12-31\", \"1976-01-31\", \"1976-02-29\", \"1976-03-31\", \"1976-04-30\", \"1976-05-31\", \"1976-06-30\", \"1976-07-31\", \"1976-08-31\", \"1976-09-30\", \"1976-10-31\", \"1976-11-30\", \"1976-12-31\", \"1977-01-31\", \"1977-02-28\", \"1977-03-31\", \"1977-04-30\", \"1977-05-31\", \"1977-06-30\", \"1977-07-31\", \"1977-08-31\", \"1977-09-30\", \"1977-10-31\", \"1977-11-30\", \"1977-12-31\", \"1978-01-31\", \"1978-02-28\", \"1978-03-31\", \"1978-04-30\", \"1978-05-31\", \"1978-06-30\", \"1978-07-31\", \"1978-08-31\", \"1978-09-30\", \"1978-10-31\", \"1978-11-30\", \"1978-12-31\", \"1979-01-31\", \"1979-02-28\", \"1979-03-31\", \"1979-04-30\", \"1979-05-31\", \"1979-06-30\", \"1979-07-31\", \"1979-08-31\", \"1979-09-30\", \"1979-10-31\", \"1979-11-30\", \"1979-12-31\", \"1980-01-31\", \"1980-02-29\", \"1980-03-31\", \"1980-04-30\", \"1980-05-31\", \"1980-06-30\", \"1980-07-31\", \"1980-08-31\", \"1980-09-30\", \"1980-10-31\", \"1980-11-30\", \"1980-12-31\", \"1981-01-31\", \"1981-02-28\", \"1981-03-31\", \"1981-04-30\", \"1981-05-31\", \"1981-06-30\", \"1981-07-31\", \"1981-08-31\", \"1981-09-30\", \"1981-10-31\", \"1981-11-30\", \"1981-12-31\", \"1982-01-31\", \"1982-02-28\", \"1982-03-31\", \"1982-04-30\", \"1982-05-31\", \"1982-06-30\", \"1982-07-31\", \"1982-08-31\", \"1982-09-30\", \"1982-10-31\", \"1982-11-30\", \"1982-12-31\", \"1983-01-31\", \"1983-02-28\", \"1983-03-31\", \"1983-04-30\", \"1983-05-31\", \"1983-06-30\", \"1983-07-31\", \"1983-08-31\", \"1983-09-30\", \"1983-10-31\", \"1983-11-30\", \"1983-12-31\", \"1984-01-31\", \"1984-02-29\", \"1984-03-31\", \"1984-04-30\", \"1984-05-31\", \"1984-06-30\", \"1984-07-31\", \"1984-08-31\", \"1984-09-30\", \"1984-10-31\", \"1984-11-30\", \"1984-12-31\", \"1985-01-31\", \"1985-02-28\", \"1985-03-31\", \"1985-04-30\", \"1985-05-31\", \"1985-06-30\", \"1985-07-31\", \"1985-08-31\", \"1985-09-30\", \"1985-10-31\", \"1985-11-30\", \"1985-12-31\", \"1986-01-31\", \"1986-02-28\", \"1986-03-31\", \"1986-04-30\", \"1986-05-31\", \"1986-06-30\", \"1986-07-31\", \"1986-08-31\", \"1986-09-30\", \"1986-10-31\", \"1986-11-30\", \"1986-12-31\", \"1987-01-31\", \"1987-02-28\", \"1987-03-31\", \"1987-04-30\", \"1987-05-31\", \"1987-06-30\", \"1987-07-31\", \"1987-08-31\", \"1987-09-30\", \"1987-10-31\", \"1987-11-30\", \"1987-12-31\", \"1988-01-31\", \"1988-02-29\", \"1988-03-31\", \"1988-04-30\", \"1988-05-31\", \"1988-06-30\", \"1988-07-31\", \"1988-08-31\", \"1988-09-30\", \"1988-10-31\", \"1988-11-30\", \"1988-12-31\", \"1989-01-31\", \"1989-02-28\", \"1989-03-31\", \"1989-04-30\", \"1989-05-31\", \"1989-06-30\", \"1989-07-31\", \"1989-08-31\", \"1989-09-30\", \"1989-10-31\", \"1989-11-30\", \"1989-12-31\", \"1990-01-31\", \"1990-02-28\", \"1990-03-31\", \"1990-04-30\", \"1990-05-31\", \"1990-06-30\", \"1990-07-31\", \"1990-08-31\", \"1990-09-30\", \"1990-10-31\", \"1990-11-30\", \"1990-12-31\", \"1991-01-31\", \"1991-02-28\", \"1991-03-31\", \"1991-04-30\", \"1991-05-31\", \"1991-06-30\", \"1991-07-31\", \"1991-08-31\", \"1991-09-30\", \"1991-10-31\", \"1991-11-30\", \"1991-12-31\", \"1992-01-31\", \"1992-02-29\", \"1992-03-31\", \"1992-04-30\", \"1992-05-31\", \"1992-06-30\", \"1992-07-31\", \"1992-08-31\", \"1992-09-30\", \"1992-10-31\", \"1992-11-30\", \"1992-12-31\", \"1993-01-31\", \"1993-02-28\", \"1993-03-31\", \"1993-04-30\", \"1993-05-31\", \"1993-06-30\", \"1993-07-31\", \"1993-08-31\", \"1993-09-30\", \"1993-10-31\", \"1993-11-30\", \"1993-12-31\", \"1994-01-31\", \"1994-02-28\", \"1994-03-31\", \"1994-04-30\", \"1994-05-31\", \"1994-06-30\", \"1994-07-31\", \"1994-08-31\", \"1994-09-30\", \"1994-10-31\", \"1994-11-30\", \"1994-12-31\", \"1995-01-31\", \"1995-02-28\", \"1995-03-31\", \"1995-04-30\", \"1995-05-31\", \"1995-06-30\", \"1995-07-31\", \"1995-08-31\", \"1995-09-30\", \"1995-10-31\", \"1995-11-30\", \"1995-12-31\", \"1996-01-31\", \"1996-02-29\", \"1996-03-31\", \"1996-04-30\", \"1996-05-31\", \"1996-06-30\", \"1996-07-31\", \"1996-08-31\", \"1996-09-30\", \"1996-10-31\", \"1996-11-30\", \"1996-12-31\", \"1997-01-31\", \"1997-02-28\", \"1997-03-31\", \"1997-04-30\", \"1997-05-31\", \"1997-06-30\", \"1997-07-31\", \"1997-08-31\", \"1997-09-30\", \"1997-10-31\", \"1997-11-30\", \"1997-12-31\", \"1998-01-31\", \"1998-02-28\", \"1998-03-31\", \"1998-04-30\", \"1998-05-31\", \"1998-06-30\", \"1998-07-31\", \"1998-08-31\", \"1998-09-30\", \"1998-10-31\", \"1998-11-30\", \"1998-12-31\", \"1999-01-31\", \"1999-02-28\", \"1999-03-31\", \"1999-04-30\", \"1999-05-31\", \"1999-06-30\", \"1999-07-31\", \"1999-08-31\", \"1999-09-30\", \"1999-10-31\", \"1999-11-30\", \"1999-12-31\", \"2000-01-31\", \"2000-02-29\", \"2000-03-31\", \"2000-04-30\", \"2000-05-31\", \"2000-06-30\", \"2000-07-31\", \"2000-08-31\", \"2000-09-30\", \"2000-10-31\", \"2000-11-30\", \"2000-12-31\", \"2001-01-31\", \"2001-02-28\", \"2001-03-31\", \"2001-04-30\", \"2001-05-31\", \"2001-06-30\", \"2001-07-31\", \"2001-08-31\", \"2001-09-30\", \"2001-10-31\", \"2001-11-30\", \"2001-12-31\", \"2002-01-31\", \"2002-02-28\", \"2002-03-31\", \"2002-04-30\", \"2002-05-31\", \"2002-06-30\", \"2002-07-31\", \"2002-08-31\", \"2002-09-30\", \"2002-10-31\", \"2002-11-30\", \"2002-12-31\", \"2003-01-31\", \"2003-02-28\", \"2003-03-31\", \"2003-04-30\", \"2003-05-31\", \"2003-06-30\", \"2003-07-31\", \"2003-08-31\", \"2003-09-30\", \"2003-10-31\", \"2003-11-30\", \"2003-12-31\", \"2004-01-31\", \"2004-02-29\", \"2004-03-31\", \"2004-04-30\", \"2004-05-31\", \"2004-06-30\", \"2004-07-31\", \"2004-08-31\", \"2004-09-30\", \"2004-10-31\", \"2004-11-30\", \"2004-12-31\", \"2005-01-31\", \"2005-02-28\", \"2005-03-31\", \"2005-04-30\", \"2005-05-31\", \"2005-06-30\", \"2005-07-31\", \"2005-08-31\", \"2005-09-30\", \"2005-10-31\", \"2005-11-30\", \"2005-12-31\", \"2006-01-31\", \"2006-02-28\", \"2006-03-31\", \"2006-04-30\", \"2006-05-31\", \"2006-06-30\", \"2006-07-31\", \"2006-08-31\", \"2006-09-30\", \"2006-10-31\", \"2006-11-30\", \"2006-12-31\", \"2007-01-31\", \"2007-02-28\", \"2007-03-31\"]\n  },\n  \"yaxis\": {\n    \"domain\": [0, 1],\n    \"automargin\": true\n  },\n  \"hovermode\": \"closest\",\n  \"showlegend\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Modifying a Public Plotly Figure in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a public Plotly figure using its URL, modify the title, and replot it. It uses the chart_studio.plotly library to interact with the Plotly API.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/get-requests.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\n# Learn about API authentication here: https://plotly.com/python/getting-started\n# Find your api_key here: https://plotly.com/settings/api\n\nfig = py.get_figure(\"https://plotly.com/~PlotBot/5\")\n\nfig['layout']['title'] = \"Never forget that title!\"\n\npy.iplot(fig, filename=\"python-change_plot\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Plotly Graphs with htmltools in R\nDESCRIPTION: This code snippet demonstrates how to use the tagList() function from the htmltools package to render multiple Plotly graphs in a single R Markdown code chunk. It's an alternative to using the subplot() function for displaying multiple graphs.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nhtmltools::tagList(list(p, p))\n```\n\n----------------------------------------\n\nTITLE: 3D Point Cloud Coordinates Dataset\nDESCRIPTION: A dataset containing 106 points with X, Y, Z coordinates for creating a 3D visualization. Each line represents a single point in 3D space with three floating-point values separated by spaces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-mesh/mesh_dataset.txt#2025-04-11_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0.689484 -0.014459 0.428751\n0.476483 0.162624 0.449488\n0.586770 0.102149 0.769481\n1.068768 0.678668 1.023915\n1.438060 0.683633 0.752397\n1.483567 0.140479 1.389489\n1.163844 0.125522 1.098527\n1.491083 0.317640 0.760376\n1.970356 0.389628 0.631279\n1.961689 0.144644 0.254462\n1.823355 0.309693 0.151225\n1.868743 0.171245 -0.160235\n1.437345 0.781093 -0.569670\n1.248269 0.429151 -0.795403\n1.108745 0.233132 -0.744953\n1.670774 -0.080785 -0.820339\n1.503391 -0.179939 -0.791839\n1.406028 0.025858 -0.967830\n1.971070 0.309369 -0.651420\n1.853437 0.658340 -0.661080\n1.361601 0.443953 -0.126488\n1.139926 1.295734 0.114152\n1.949556 1.032481 0.417303\n2.323108 0.665570 0.615544\n2.558936 0.227190 0.385185\n2.650508 0.817791 0.186861\n2.431305 1.189158 -0.085800\n2.026224 1.167509 -0.120976\n1.971259 0.499964 -0.035002\n1.168452 0.683057 -0.309909\n1.342775 0.672141 -0.208439\n1.129037 0.183479 -0.485355\n0.871781 0.069470 -0.734185\n0.855148 0.587134 -0.574637\n0.395625 0.606762 -1.004597\n1.051331 0.804046 -1.250838\n1.309558 0.672450 -1.174746\n1.876837 0.506276 -1.376205\n2.620561 0.556901 -1.528117\n2.508878 0.445584 -1.501028\n2.646833 0.160679 -1.605397\n2.448341 -0.003327 -1.875326\n1.610501 0.031129 -2.069439\n1.925691 -0.412504 -2.138976\n1.918400 -0.344678 -2.299420\n1.910517 -0.246417 -2.245133\n2.450736 -0.725501 -2.828320\n2.381144 -1.214003 -2.812268\n2.159600 -1.524586 -2.873087\n2.379856 -1.845657 -2.758474\n2.254824 -1.268736 -3.020816\n2.320000 -1.171255 -3.604322\n1.698536 -1.233225 -3.369023\n1.527831 -1.374688 -3.394583\n1.530377 -1.355630 -3.295790\n1.672040 -1.146433 -3.038195\n1.534793 -1.167195 -3.646896\n1.886021 -0.864813 -3.523450\n2.062097 -0.488551 -3.273344\n2.128729 0.153843 -3.081451\n2.057646 0.302593 -2.701675\n2.155564 0.568636 -2.718267\n2.698137 0.182249 -2.875416\n3.066121 0.562960 -2.909034\n3.925938 0.252966 -3.011479\n4.240422 -0.220912 -2.795740\n3.907132 -0.328587 -2.430246\n3.750647 -0.193345 -2.166711\n2.918651 -0.238123 -2.143549\n2.980647 0.261956 -2.218529\n2.992436 0.081961 -2.173249\n2.710340 -0.490590 -1.838208\n2.693541 -0.259896 -1.613949\n2.361263 -0.187197 -1.208869\n1.897547 -0.032457 -0.792615\n2.345557 0.049672 -1.164745\n2.007566 0.121710 -1.080368\n1.599818 -0.105825 -1.086920\n1.182395 -0.745416 -0.878417\n1.469907 -0.795117 -0.562867\n1.460792 -0.450440 -0.599801\n1.113180 -0.514758 -0.508419\n0.879555 -0.639992 -0.672436\n1.351152 -0.329654 -0.829762\n1.392628 -0.215191 -0.596751\n1.926062 -0.375350 -0.554818\n1.211311 -1.208597 -0.556275\n0.913065 -1.064432 -0.494078\n1.363192 -1.338370 -0.238343\n2.032102 -1.405084 -0.335621\n1.738637 -1.456743 0.028875\n1.249448 -1.299677 0.102270\n0.610179 -1.236958 0.315250\n0.853197 -0.482796 0.164532\n0.794531 -0.346327 -0.462431\n0.635271 -0.689043 -0.492473\n0.545627 -0.840409 -0.344744\n0.137978 -1.164410 -0.537114\n0.552325 -1.242295 -0.476395\n0.417952 -1.794645 -0.288381\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Configuration for publishing the documentation, including custom styling and metadata settings.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/hover-text/hover-text-and-formatting.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'hover-text-and-formatting.ipynb', 'python/hover-text-and-formatting/', 'Hover Text and Formatting',\n    'How to use hover text and formatting in Python with Plotly.',\n    title = 'Hover Text and Formatting | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/hover-text.png', \n    language='python', \n    display_as='file_settings', order=20, ipynb='~notebook_demo/198',\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Setup\nDESCRIPTION: Setting up custom styling and publishing the notebook as documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/databases/plot-csv/plotting-csv-data.ipynb#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'plotting-csv-data.ipynb', 'python/plot-data-from-csv/', 'Plot CSV Data',\n    'How to create charts from csv files with Plotly and Python',\n    title = 'Plot Data from CSV | plotly',\n    thumbnail='thumbnail/csv.jpg', language='python',\n    page_type='example_index', has_thumbnail='false', display_as='databases', order=1,\n    ipynb= '~notebook_demo/84')\n```\n\n----------------------------------------\n\nTITLE: Mapping Matrix Data to Ideogram Lengths in Python\nDESCRIPTION: Function that maps matrix entries to corresponding values in intervals associated with ideograms based on row sums and ideogram lengths. This is essential for determining the arc lengths in the chord diagram.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/filled-chord/filled-chord.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef map_data(data_matrix, row_value, ideogram_length):\n    mapped=np.zeros(data_matrix.shape)\n    for j  in range(L):\n        mapped[:, j]=ideogram_length*data_matrix[:,j]/row_value\n    return mapped \n\nmapped_data=map_data(matrix, row_sum, ideogram_length)\nmapped_data\n```\n\n----------------------------------------\n\nTITLE: Creating a Presentation with Web Images\nDESCRIPTION: This example demonstrates how to embed web images in a presentation using the Image() syntax in the markdown string. The presentation contains informational slides about animals with accompanying images.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio.plotly as py\nimport chart_studio.presentation_objs as pres\n\nfilename = 'pres-with-images'\nmarkdown_string = \"\"\"\n# Animals of the Wild\n---\n# The Lion\n\nPanthera leo is one of the big cats in the Felidae family and a member of genus Panthera. It has been listed as Vulnerable on the IUCN Red List since 1996, as populations in African range countries declined by about 43% since the early 1990s. Lion populations are untenable outside designated protected areas. Although the cause of the decline is not fully understood, habitat loss and conflicts with humans are the greatest causes of concern. The West African lion population is listed as Critically Endangered since 2016. The only lion population in Asia survives in and around India's Gir Forest National Park and is listed as Endangered since 1986.\n\nImage(https://i.pinimg.com/736x/da/af/73/daaf73960eb5a21d6bca748195f12052--lion-photography-lion-kings.jpg)\n---\n# The Giraffe\n\nThe giraffe is a genus of African even-toed ungulate mammals, the tallest living terrestrial animals and the largest ruminants. The genus currently consists of one species, Giraffa camelopardalis, the type species. Seven other species are extinct, prehistoric species known from fossils. Taxonomic classifications of one to eight extant giraffe species have been described, based upon research into the mitochondrial and nuclear DNA, as well as morphological measurements of Giraffa, but the IUCN currently recognizes only one species with nine subspecies.\n\nImage(https://img.purch.com/w/192/aHR0cDovL3d3dy5saXZlc2NpZW5jZS5jb20vaW1hZ2VzL2kvMDAwLzA2OC8wOTQvaTMwMC9naXJhZmZlLmpwZz8xNDA1MDA4NDQy)\nImage(https://upload.wikimedia.org/wikipedia/commons/9/9f/Giraffe_standing.jpg)\n\n\"\"\"\n\nmy_pres = pres.Presentation(markdown_string)\npres_url_2 = py.presentation_ops.upload(my_pres, filename)\n```\n\n----------------------------------------\n\nTITLE: Setting Plotly Credentials\nDESCRIPTION: Initialize Plotly credentials with username and API key for online plotting access.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/getting-started/getting-started.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly \nplotly.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')\n```\n\n----------------------------------------\n\nTITLE: Configuring Scatter Plot Data Points with Plotly in JSON\nDESCRIPTION: A JSON fragment containing data point coordinates and styling configuration for a Plotly scatter plot. The data points are configured as markers with specific color styling (rgba(31,119,180,1)). The plot includes event handling for interactions like hover, click, and selection.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-08-10-knitr.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n.0220361289476519,0.0230571960727422,0.0236750306283726,0.023462684893619,0.0253773699392287,0.0257541349772209,0.0286080372743157,0.0308964438360756,0.0348995724209165,0.0349661730174598,0.0370728352493982,0.0381234531211546,0.0391280744978494,0.0380964739905825,0.0376297037129641,0.0366705983024584,0.0366139385285106,0.0364610987732412,0.035954993979822,0.0356979869174991,0.0347037011446602,0.0337216742079365,0.0332595765039263,0.0336968114449634,0.0324000275627627,0.0336085852906211,0.0343522828903616,0.0344494187405205,0.0337850210584142,0.0339821810797461,0.0348209144831242,0.0344511109284677,0.0332148609127699,0.0339330002188343,0.0332886872221007,0.0321325176162124,0.0314337825606411,0.0324204938967307,0.0310072239703231,0.0314118789066398,0.0305906981802364,0.0306151088255532,0.0308219023196704,0.0288563643511385,0.0292987533694244,0.0285070997026562,0.0285718150339056,0.0278389664445856,0.0275772360651015,0.0271068760989122,0.0283442280477121,0.0272884360763897,0.0274598413829897,0.0266357923778726,0.0271929549797071,0.0278445924799928,0.0272887677841556,0.0275515168286075,0.0272437398265213,0.0270408754310767,0.0259980768545888,0.0265029376053513,0.0266423763080136,0.0280521094564904,0.0274443907478264,0.0278829588885789,0.0275984727488309,0.0279566660625964,0.0295119032373449,0.0295690385429903,0.0296629035173177,0.0324053888602622,0.0351329587108528,0.0355921625161523,0.036723957738686,0.0363276640360074,0.0351511486243678,0.0354089231537057,0.0350943957447553,0.0337356138456764,0.035254240249501,0.0351463083498129,0.0348218336648867,0.0343020797461236,0.0356049221387346,0.0352453201370119,0.0341920109929294,0.0349107464800358,0.0357186257660191,0.0374868301819711,0.0391167219762414,0.0401187935356229,0.0406520243816973,0.0419561373550125,0.0427485203266082,0.0442228409851281,0.0445841188219612,0.0454239801372461,0.0467250676176202,0.0468217494578127,0.0482246269330479,0.0495197924541269,0.051237590828909,0.0516855378281009,0.0494338296431541,0.0494489726863492,0.0488328988540877,0.0481989554326485,0.0476825608536179,0.0480356059764734,0.0450178611821243,0.0453004464799724,0.0438089313637351,0.0420889969221862,0.0404078646236568,0.0396667162624609,0.0382692185143488,0.0373248077715082,0.0371104274954917,0.0371524641810727,0.0358315712754192,0.0348323170731707,0.0361204664308562,0.0360136800409218,0.0353395843892549,0.0353664506110323,0.0345675264274179,0.035218864299078,0.0354700422793808,0.0350207489835944,0.0350773139501624,0.0352879361076082,0.0348715105387401,0.0355059386410375,0.0356990095024029,0.0343390076211146,0.0345251948530335,0.03470325745568,0.0339647398529922,0.033982386617504,0.0325282300803712,0.0350392847014863,0.034939648561235,0.0348363557606604,0.0351228404593147,0.0353823312914052,0.0345687323135994,0.0337756483180682,0.0344716013738862,0.0341644769017797,0.0337892962599444,0.03262561046271,0.0326407040995269,0.0325094035464804,0.0324770013094899,0.0311328699040668,0.0312429101199144,0.0304936358240454,0.0299336090014992,0.029879182921008,0.0291995411618145,0.02968625485734,0.0288746875500228,0.0284484986198213,0.0284981207553047,0.0283823029439113,0.0281481420834374,0.0270040295362965,0.0277135031274273,0.0267395406975319,0.0269568730843479,0.0279032784211385,0.0269041488772284,0.0267325483428506,0.026585707081388,0.026489904737133,0.0271378907011502,0.0258099343285521,0.0251693505861356,0.0262158470499066,0.0258195426599597,0.0266152464044935,0.0262591876834504,0.0262993137377662,0.0265923104238629,0.0267266504613673,0.0270862450207628,0.0268312412718982,0.027153652190349,0.0267294144124231,0.0264967150177501,0.0272636839867472,0.0270150061106325,0.0263759310623617,0.0276733884508979,0.0287015999904168,0.0293837312712611,0.0297103844943579,0.0308896899095271,0.0313997758578207,0.0318195713191128,0.0327800583021001,0.0340212067899767,0.0334028649121488,0.0345415221835177,0.0343276449703207,0.033870757772404,0.0341440543405028,0.0343215570228942,0.0347515082437558,0.0350623041952277,0.0360756812726503,0.0363733964437688,0.0370094892111115,0.0369960461942175,0.0367784930779087,0.0380201728544394,0.0391287233669409,0.0383426627324889,0.0380473658020775,0.0379773867395592,0.036445992220615,0.0370525320844325,0.0369834334959928,0.0360485389227575,0.0354666903548986,0.0349447428536149,0.0351176112314678,0.0352318237831177,0.0350857622046214,0.0343125012007454,0.0336306348487523,0.0334039951392855,0.0335039802728564,0.0326747633164387,0.0323952704510192,0.0329491178570474,0.0327441697218481,0.0322848691833872,0.0317213124117107,0.030109138494429,0.0301232747613547,0.0301629238221048,0.0300806904187711,0.0292935682171981,0.0288761677027329,0.0278765795153444,0.0273032129424027,0.0278255685848387,0.0270931503750895,0.0269421269703761,0.0287670975146281,0.0279325408461718,0.0278927404514215,0.0282378628210852,0.028046454282106,0.027991555369228,0.0273988992581957,0.0277384532058346,0.0277036533889671,0.0279357526169956,0.0272503018288593,0.0272454811146894,0.0275801274302314,0.0275837210339343,0.026337671593921,0.0272076301512606,0.0254911547693128,0.0258209882937947,0.0259848252464142,0.0267131328494747,0.0267514983863532,0.0263782429245283,0.0261501923891231,0.0257522413647216,0.0252606741325257,0.0244361868532948,0.0249392932338549,0.0243851497918743,0.0241841331884042,0.0243316651617785,0.0235674744022319,0.0230113159641916,0.0236029915589054,0.0231878991792474,0.0229444254433521,0.0233487367613535,0.0215797808967541,0.021944085584474,0.0225206281993648,0.0226680911938866,0.0223538264512441,0.022767189227867,0.0226712346075674,0.0219996609888307,0.0217349005138257,0.0215126534432485,0.021982646982647,0.0207873528925442,0.0215621419926666,0.0207952869756778,0.021329672653503,0.021572172792209,0.0208796789722534,0.0211323208397195,0.0206207642316463,0.0203800036367396,0.0201377905071318,0.0203149023404134,0.0208328887940538,0.020372482756415,0.0194601158162704,0.0204273495176974,0.0200300574920426,0.0203516475733484,0.0207073691062893,0.0198811021729603,0.0195408914516545,0.0198939506725983,0.0198592859962777,0.0212137221752606,0.0214298032287242,0.0215966238790223,0.0220359054188438,0.0218601874934167,0.0227459289558061,0.0230732293758697,0.024659453023777,0.024985743922363,0.0268928828583213,0.0279491934441802,0.0288166940014656,0.0285297850677155,0.0286242917970411,0.0289146558027786,0.0299202844845284,0.0292014199142628,0.0291561292832727,0.0291213272938686,0.0287973366625052,0.0285879605568606,0.0287568802575553,0.0294701597338001,0.0298638498788509,0.0294282220794562,0.0297465776593468,0.0296228842644812,0.0304765187419216,0.0308494003705923,0.0318875092916334,0.0309848015954886,0.0305628847845207,0.0306225778436845,0.0299478005583488,0.0293892881253705,0.0284820963809211,0.0286455481327346,0.0279339736222842,0.029023007167736,0.0279050068481688,0.0280275907261849,0.0282583562680963,0.0277241083202993,0.0272028707710431,0.0269652448710927,0.0273969343710703,0.0269368959404481,0.0269228419988191,0.0263941352394257,0.0270412226156792,0.0262016275691107,0.0259636535923382,0.0258738468197928,0.0254244160899654,0.0250045579466957,0.024777357981379,0.0254560896776955,0.0250966421076735,0.0254570047138863,0.0244729029590056,0.0237328110143895,0.0241191993392736,0.0237267664228679,0.023870109058237,0.023383897941681,0.0234351725084438,0.0239969765481812,0.0236948770813632,0.0228573145409509,0.0224356729534577,0.0228994914926656,0.02251448358527,0.0236747024027361,0.0230284373109221,0.0223605662063444,0.0227382872924509,0.0224423931034254,0.0231292607187006,0.0236718718957365,0.0233799918614999,0.0236988755428927,0.0238997116975499,0.0238901317916939,0.0252071470257545,0.0253207514843199,0.0246846508687535,0.0257381369958573,0.0251120456929405,0.0275858216434512,0.0281557414728326,0.0293210585371295,0.0309396974216919,0.0310963646666164,0.0329696223908049,0.0344620093791083,0.036881870825218,0.0393784616992371,0.0420950254893898,0.0437916682975198,0.0451551076153814,0.0472304745524197,0.0478734139307175,0.0474923480755532,0.0481466434827827,0.0487390646412033,0.0498135884149012,0.0493453689473377,0.0489189425628497,0.0487188869065158,0.048905111851068,0.0491636805816074,0.0495647982697671,0.0479976903184301,0.0467584236605351,0.0468513367375324,0.0472580499069591,0.0470022764396316,0.0467654702453278,0.0485550730176732,0.0461674537759551,0.0450635665454102,0.0444211051857828,0.0441327555952861,0.0448149518168788,0.0444630462183337,0.0447799648292216,0.0441125967188235,0.0442593288282581,0.044643726197121,0.0434807419511074,0.0425215621352976,0.0418293730131926,0.0408610706387906,0.0408918166602682,0.0405519157520218,0.0403166252101388,0.040340243506583,0.0404181174638259,0.040278693679217,0.0396632120998043,0.0385034965036299,0.0385067391462337,0.0381045954672202,0.0390124437323695,0.0395415707991254,0.0378739686359739,0.0370300882122658,0.0372366533868074,0.0368816546440722,0.0371665916197347,0.0358295732195552,0.0356276086605975,0.0355738071667648,0.0351268697937214,0.0340039312919975,0.0327776351151127,0.0321227808883484,0.0325692322066761,0.0326500104494188,0.0305008766439861,0.0309768917383398,0.0297050702271821,0.0301510343386389,0.0301009314744063,0.0290230831466271,0.0281506024288415,0.0284449877176327,0.0272622510362181,0.0278280801400947,0.026899986422224,0.0265558477566239,0.0266102962839264]\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates how to plot a stacked bar chart using Cufflinks by setting barmode to 'stack'. It requires a DataFrame and dependencies are Pandas and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf.iplot(kind='bar', barmode='stack', filename='cufflinks/grouped-bar-chart')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Placeholder Image in HTML\nDESCRIPTION: HTML for creating a basic placeholder image with specified dimensions (200x300 pixels).\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"holder.js/200x300\">\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Edges with Source, Target, and Value\nDESCRIPTION: This snippet shows the structure used to define edges in the graph. Each edge specifies a source node, target node, and a numeric value associated with the connection. The edges are defined sequentially, building up the overall graph structure.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n  edge\n  [\n    source 964\n    target 517\n    value 0.333333\n  ]\n```\n\n----------------------------------------\n\nTITLE: Plotting Plotly Figure in Python\nDESCRIPTION: This snippet uses Plotly to create an interactive plot of the figure, displaying the parameter visualizations. The plot is saved with the filename 'modelling_params'.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/montecarlo.ipynb#2025-04-11_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npy.iplot(fig4, filename='modelling_params')\n```\n\n----------------------------------------\n\nTITLE: Plotting Q-Q Plot with Plotly\nDESCRIPTION: Creates an interactive Q-Q plot using Plotly with both scatter points and reference line.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig = go.Figure()\n\nfig.add_trace({\n    'type': 'scatter',\n    'x': qqplot_data[0].get_xdata(),\n    'y': qqplot_data[0].get_ydata(),\n    'mode': 'markers',\n    'marker': {\n        'color': '#19d3f3'\n    }\n})\n\nfig.add_trace({\n    'type': 'scatter',\n    'x': qqplot_data[1].get_xdata(),\n    'y': qqplot_data[1].get_ydata(),\n    'mode': 'lines',\n    'line': {\n        'color': '#636efa'\n    }\n\n})\n\n\nfig['layout'].update({\n    'title': 'Quantile-Quantile Plot',\n    'xaxis': {\n        'title': 'Theoritical Quantities',\n        'zeroline': False\n    },\n    'yaxis': {\n        'title': 'Sample Quantities'\n    },\n    'showlegend': False,\n    'width': 800,\n    'height': 700,\n})\n\n\npy.iplot(fig, filename='normality-QQ')\n```\n\n----------------------------------------\n\nTITLE: Creating an iframe Display Function for Presentations in Jupyter\nDESCRIPTION: This function generates HTML code to display a Plotly presentation in an iframe directly in Jupyter notebooks. It creates a styled container with an optional text reminder about navigation controls.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/presentations-tool.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef url_to_iframe(url, text=True):\n    html = ''\n    # style\n    html += '''<head>\n    <style>\n    div.textbox {\n        margin: 30px;\n        font-weight: bold;\n    }\n    </style>\n    </head>'\n    '''\n    # iframe\n    html += '<iframe src=' + url + '.embed#{} width=750 height=400 frameBorder=\"0\"></iframe>'\n    if text:\n        html += '''<body>\n        <div class=\"textbox\">\n            <p>Click on the presentation above and use left/right arrow keys to flip through the slides.</p>\n        </div>\n        </body>\n        '''\n    return html\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream IDs from Credentials File\nDESCRIPTION: Gets the stream IDs from the Plotly credentials file for use in streaming plots. These IDs are unique identifiers that link data streams to specific plot traces.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_p1-first-stream.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream_ids = tls.get_credentials_file()['stream_ids']\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Studio Credentials in R Environment for plotly\nDESCRIPTION: Sets the environment variables for Chart Studio authentication using Sys.setenv(). This step is required before using the plotly_IMAGE() function to export graphs as static images.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-04-09-static-image_r_index.md#2025-04-11_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nSys.setenv(\"plotly_username\" = \"YOUR USER NAME\")\nSys.setenv(\"plotly_api_key\" = \"YOUR API KEY\")\n```\n\n----------------------------------------\n\nTITLE: Batch Converting Multiple Rmd Files to Markdown\nDESCRIPTION: Terminal command for converting all R Markdown files in a directory to Markdown files. Uses a loop to process multiple files at once.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfor i in R_FILE_PATH/*.Rmd; do Rscript -e \"rmarkdown::render('$i', output_dir='OUTPUT_DIRECTORY')\"; done\n```\n\n----------------------------------------\n\nTITLE: Defining Weighted Edges in Network Graph\nDESCRIPTION: This code defines connections (edges) between nodes in a network graph. Each edge connects a source node to a target node with a specific weight value. The weights range from fractional values like 0.25 to larger values like 2.7, indicating the strength or importance of connections.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/network/netscience.gml.txt#2025-04-11_snippet_11\n\nLANGUAGE: graph\nCODE:\n```\n  edge\n  [\n    source 665\n    target 662\n    value 0.25\n  ]\n  edge\n  [\n    source 665\n    target 663\n    value 0.25\n  ]\n  edge\n  [\n    source 665\n    target 664\n    value 0.25\n  ]\n  edge\n  [\n    source 666\n    target 662\n    value 0.25\n  ]\n  edge\n  [\n    source 666\n    target 663\n    value 0.25\n  ]\n  edge\n  [\n    source 666\n    target 664\n    value 0.25\n  ]\n  edge\n  [\n    source 666\n    target 665\n    value 0.25\n  ]\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to import Plotly and check its installed version. It's useful for ensuring the latest features are available.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/scientific/radar/radar.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Normality Testing\nDESCRIPTION: Import statements for required Python libraries including Plotly, NumPy, Pandas and SciPy for performing normality tests and visualizations.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistics/normality-test/python-Normality-Test.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Imports\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Columns to a Plotly Grid\nDESCRIPTION: Creates four columns of random data, uploads them to a Plotly grid, and prints the resulting URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/data-api.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolumn_1 = Column(np.random.randn(1000), 'column 1')\ncolumn_2 = Column(np.random.randn(1000)+1, 'column 2')\ncolumn_3 = Column(np.random.randn(1000)+2, 'column 3')\ncolumn_4 = Column(np.random.randn(1000)+3, 'column 4')\n\ngrid = Grid([column_1, column_2, column_3, column_4])\nurl = py.grid_ops.upload(grid, filename='randn_int_offset_'+str(dt.now()))\nprint(url)\n```\n\n----------------------------------------\n\nTITLE: Getting Help on Scatter Object - Plotly Python\nDESCRIPTION: This snippet demonstrates how to access the help information for the Scatter object, outlining its parameters and methods.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/fundamentals/user_guide_python/new_py_guide.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhelp(go.Scatter)\n```\n\n----------------------------------------\n\nTITLE: Sample Plotly Code for R Documentation\nDESCRIPTION: Example R code showing how to create a simple plot using the plotly library. This demonstrates the format for including code samples in documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_5\n\nLANGUAGE: r\nCODE:\n```\n```{r}\nlibrary(plotly)\n#Add your R Code Here i.e.:\np <- plot_ly(economics, x = ~date, y = ~uempmed, name = \"unemployment\")\np```\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data and Creating a Scatter Matrix with Cufflinks in Python\nDESCRIPTION: This snippet demonstrates the creation of a DataFrame with random data and the plotting of a scatter matrix using Cufflinks. It specifies filename and privacy settings. Dependencies are Pandas, NumPy, and Cufflinks.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/ipython-notebooks/cufflinks.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.random.randn(1000, 4), columns=['a', 'b', 'c', 'd'])\ndf.scatter_matrix(filename='cufflinks/scatter-matrix', world_readable=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Streaming Plot and Sending Data\nDESCRIPTION: A quickstart example showing how to create a Plotly figure with streaming capability and send a single data point through the stream.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import plotly.plotly as py\n>>> from plotly.graph_objs import *\n>>> # auto sign-in with credentials or use py.sign_in()\n>>> trace1 = Scatter(\n        x=[],\n        y=[], \n        stream=dict(token='my_stream_id')\n    )\n>>> data = Data([trace1])\n>>> py.plot(data)\n>>> s = py.Stream('my_stream_id')\n>>> s.open()\n>>> s.write(dict(x=1, y=2))\n>>> s.close()\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Studio Credentials for Online Plotting\nDESCRIPTION: Python code to set up your Chart Studio credentials including username and API key, which are required for online plotting. This saves the credentials to a file in your home directory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport chart_studio\nchart_studio.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')\n```\n\n----------------------------------------\n\nTITLE: Building CSS and Updating Version for Deployment\nDESCRIPTION: Command to run Gulp build task for updating main.css and cache busting version before deployment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/style_README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngulp build\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Object in Plotly Python\nDESCRIPTION: Sets up the necessary imports and creates a Stream object with a token and maximum points limit. This establishes the foundation for streaming data to a Plotly chart.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/bar_chart_stream.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.plotly as py  \nimport plotly.tools as tls   \nimport numpy as np\nimport time\n \nfrom plotly.graph_objs import *\n \nimport numpy as np  \n\nstream_id = 'jkc6d90yfw'   \n\n# Let's generate a new stream id object\nstream = Stream(\n    token=stream_id,  \n    maxpoints=80\n)\n```\n\n----------------------------------------\n\nTITLE: Including Main Documentation Examples Template\nDESCRIPTION: Liquid include statement that inserts the main documentation examples template for the R language. This template likely renders the list of documentation posts filtered above.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2015-07-30-r-index.md#2025-04-11_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% include posts/mainlang_documentation_eg.html %}\n```\n\n----------------------------------------\n\nTITLE: Embedding Dash Application Source Code in Python using IFrame\nDESCRIPTION: This snippet shows how to embed the source code of a Dash time series application using an IFrame in a Jupyter notebook. This allows viewers to see the implementation details of the Dash application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/time-series/time-series.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import IFrame\nIFrame(src= \"https://dash-simple-apps.plotly.host/dash-timeseriesplot/code\", width=\"100%\", height=500, frameBorder=\"0\")\n```\n\n----------------------------------------\n\nTITLE: Interactive Widget Implementation\nDESCRIPTION: Creates an interactive widget using the previously defined function g.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninteract(g)\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Datetime Objects in Python\nDESCRIPTION: Converts the 'Date' column in the DataFrame from string format to datetime.date objects using Pandas and lambda functions.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/table-subplots/Subplots-with-table-Plotly/Subplots-with-table-Plotly.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf['Date']=map(lambda x: x.date(),[pd.to_datetime(dr) for dr in df['Date']])\n```\n\n----------------------------------------\n\nTITLE: Upgrading Plotly Python Package\nDESCRIPTION: Command to upgrade the Plotly Python package to the latest version, ensuring you have the most recent features and bug fixes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install plotly --upgrade\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Notebook Mode\nDESCRIPTION: Initializes Plotly for use in Jupyter notebooks by injecting required JavaScript files.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/offline/plotly_offline.ipynb#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninit_notebook_mode(connected=True)\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving an R Plot to Chart Studio\nDESCRIPTION: This snippet demonstrates how to create a scatter plot using the plotly R package and save it to Chart Studio using the api_create() function. It creates a visualization based on the iris dataset, plotting Sepal.Length against Petal.Length.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2015-07-30-filenames.md#2025-04-11_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(plotly)\np <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)\napi_create(p)\n```\n\n----------------------------------------\n\nTITLE: Open Mailbox File\nDESCRIPTION: Opens the .mbox file using the mailbox library\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/report-generation/gmail.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmbox = mailbox.mbox(path)\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline Visualization with Plotly Express\nDESCRIPTION: Demonstrates creation of a timeline chart using Plotly Express with sample job schedule data stored in a Pandas DataFrame.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.express as px\n\ndf = pd.DataFrame([dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')])\n\npx.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Task\", color=\"Task\").show()\n```\n\n----------------------------------------\n\nTITLE: Deactivating Virtualenv\nDESCRIPTION: Command to deactivate the current virtual environment and return to the global Python environment.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python/chart-studio/getting-started-with-chart-studio.ipynb#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n(plotly2.7) $ deactivate\n```\n\n----------------------------------------\n\nTITLE: Publishing Funnel Chart Documentation with Plotly Publisher\nDESCRIPTION: Example code showing how to set up custom CSS and fonts for documentation and publish the notebook as a Plotly tutorial using the publisher module.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip3 install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'funnel-chart.ipynb', 'python/funnel-charts/', 'Funnel Chart',\n    'How to make funnel-chart plots in Python with Plotly.',\n    title = 'Python Funnel Chart | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/funnel.jpg',\n    language='python',\n    # page_type='example_index', // note this is only if you want the tutorial to appear on the main page: plot.ly/python\n    display_as='basic', order=6.3, ipynb='~notebook_demo/293',\n    uses_plotly_offline=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Plotly Authentication Environment Variables in R\nDESCRIPTION: Code for setting your Chart Studio username and API key as environment variables in your R session using Sys.setenv(). These credentials are required for publishing charts to Chart Studio.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2020-01-17-getting-started-with-chart-studio.md#2025-04-11_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nSys.setenv(\"plotly_username\"=\"your_plotly_username\")\nSys.setenv(\"plotly_api_key\"=\"your_api_key\")\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables\nDESCRIPTION: Commands to set HTTP and HTTPS proxy environment variables for configuring Plotly's requests module to work with corporate proxies.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/chart-studio/proxies/2015-07-27-proxy_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=\"http://10.10.1.10:3128\"\nexport HTTPS_PROXY=\"http://10.10.1.10:1080\"\n```\n\n----------------------------------------\n\nTITLE: Replacing bardir with orientation in Plotly.js bar charts\nDESCRIPTION: Example demonstrating how to update code that uses the deprecated bardir attribute to the recommended orientation attribute in Plotly.js bar charts.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    type: 'bar',\n    x: [1, 2, 3, 4],\n    y: [10, 15, 13, 17],\n    bardir: 'h',\n}];\n\nvar layout = {\n    title: 'Bar Chart with Horizontal Bars',\n    xaxis: {\n        title: 'X Axis'\n    },\n    yaxis: {\n        title: 'Y Axis'\n    }\n};\n\n\nPlotly.newPlot('bar-chart', data, layout);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [{\n    type: 'bar',\n    x: [1, 2, 3, 4],\n    y: [10, 15, 13, 17],\n    orientation: 'h',\n}];\n\nvar layout = {\n    title: 'Bar Chart with Horizontal Bars',\n    xaxis: {\n        title: 'X Axis'\n    },\n    yaxis: {\n        title: 'Y Axis'\n    }\n};\n\n\nPlotly.newPlot('bar-chart', data, layout);\n```\n\n----------------------------------------\n\nTITLE: Publishing Bullet Chart Documentation\nDESCRIPTION: Script to publish the bullet chart documentation to Plotly's documentation site\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/statistical/bullet/bullet-chart.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'bullet-chart.ipynb', 'python/bullet-charts/', 'Bullet Charts',\n    \"How to create Stephen Few Bullet Charts in Python with Plotly.\",\n    title = 'Python Bullet Charts | plotly',\n    has_thumbnail='true', thumbnail='thumbnail/bullet_charts.jpg',\n    language='python',\n    display_as='statistical', order=9)\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: Simple example showing how to import the Plotly library and check its version.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/financial/funnel/funnel-chart.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Documentation Search Index in Makefile\nDESCRIPTION: Make target for updating the plotly.js search index on Algolia. This index provides search functionality for the JavaScript documentation on plotly.com/javascript/.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/make_instructions.txt#2025-04-11_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nupdate_js_search -> update the plotly.js search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/js_docs\n```\n\n----------------------------------------\n\nTITLE: Removing Mode Bar from Plotly Graph in R\nDESCRIPTION: This snippet shows how to remove the mode bar from a Plotly graph by setting the displayModeBar parameter to FALSE in the config() function, and then saving the widget as an HTML file.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/chart-studio/2017-07-17-configuration-options.md#2025-04-11_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nhtmlwidgets::saveWidget(config(p, displayModeBar = FALSE), \"graph.html\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Plotly Content with Publisher in Python\nDESCRIPTION: Code to publish the notebook to the Plotly documentation site. This includes setting up custom styling, installing the publisher package, and configuring metadata for the published content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/transforms/multiple-transforms/multiple-transforms.ipynb#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\nimport publisher\npublisher.publish(\n    'multiple-transforms.ipynb', 'python/multiple-transforms/', 'Multiple Transforms',\n    'How to use multiple transforms (filter, group by, and aggregates) in Python with Plotly.',\n    title = 'Multiple Transforms | Plotly',\n    has_thumbnail='true', thumbnail='thumbnail/multiple-transforms.jpg', \n    language='python', uses_plotly_offline=True,\n    page_type='example_index',\n    display_as='transforms', order=4,\n    ipynb= '~notebook_demo/193')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Text to a Theme\nDESCRIPTION: JavaScript for creating a theme with predefined text to be used across multiple placeholders.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nHolder.add_theme(\"thumbnail\", { background: \"#fff\", text: \"Thumbnail\" })\n```\n\n----------------------------------------\n\nTITLE: Converting cameraposition to camera in Plotly.js 3D plots\nDESCRIPTION: Example showing how to convert from the deprecated cameraposition attribute to the camera attribute for 3D plots in Plotly.js. Uses the gl-mat4 library for quaternion to matrix conversion.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/plotly_js/fundamentals/plotly-js-3-changes/2024-10-09-plotly-js-3-changes.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar m4FromQuat = require('gl-mat4/fromQuat');\n\n// Original cameraposition\nvar cameraposition = <cameraposition>;\n\nvar rotation = cameraposition[0];\nvar center = cameraposition[1];\nvar radius = cameraposition[2];\nvar mat = m4FromQuat([], rotation);\nvar eye = [];\n\nfor(j = 0; j < 3; ++j) {\n    eye[j] = center[j] + radius * mat[2 + 4 * j];\n}\n\n// New camera\nvar camera = {\n    eye: {x: eye[0], y: eye[1], z: eye[2]},\n    center: {x: center[0], y: center[1], z: center[2]},\n    up: {x: 0, y: 0, z: 1}\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version in Python\nDESCRIPTION: This snippet demonstrates how to check the installed version of Plotly in Python. It's useful for ensuring compatibility with the latest features.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/basic/bar/bars.ipynb#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Setup Commands\nDESCRIPTION: Initial git commands to clone the documentation repository and navigate to the project directory.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/julia/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:plotly/graphing-library-docs.git\n$ cd graphing-library-docs\n```\n\n----------------------------------------\n\nTITLE: Publishing Notebook with Plotly Publisher in Python\nDESCRIPTION: Sets up custom styling for the notebook and uses the Plotly publisher package to publish the notebook with metadata for proper display in the Plotly documentation.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/3d/3d-network/Les-miserables-network.ipynb#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, HTML\n\ndisplay(HTML('<link href=\"//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700\" rel=\"stylesheet\" type=\"text/css\" />'))\ndisplay(HTML('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css\">'))\n\n! pip install git+https://github.com/plotly/publisher.git --upgrade\n\nimport publisher\npublisher.publish(\n    'Les-miserables-network.ipynb', 'python/3d-network-graph/', 'Python 3D Network Graphs',\n    'How to make 3D Network Graphs in Python. ',\n    title = '3D Network Graphs in Python | plotly',\n    name = '3D Network Graphs',\n    has_thumbnail='true', thumbnail='thumbnail/3dnetwork.jpg', \n    language='python', page_type='example_index', \n    display_as='3d_charts', order=13,\n    ipynb= '~notebook_demo/226')\n```\n\n----------------------------------------\n\nTITLE: Checking Plotly Version\nDESCRIPTION: Code snippet to check the installed version of Plotly package, with a recommendation to upgrade if needed.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/python-v3/streaming/old_examples/s7_streaming_part2.ipynb#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# (*) Import plotly package\nimport plotly\n \n# Check plolty version (if not latest, please upgrade)\nplotly.__version__\n```\n\n----------------------------------------\n\nTITLE: Generating Welcome Header for Plotly R Maps Documentation\nDESCRIPTION: This HTML snippet creates a welcome header section for the Plotly R Maps documentation page. It includes a title, description, and placeholders for additional content.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-maps-index.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library Maps</h1>\n\t\t\t\t<p>{{page.description}}</p>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: HTML Header Layout for Scientific Charts Documentation\nDESCRIPTION: HTML structure for the header section of the scientific charts documentation page. It creates a welcome section with a title, description placeholder using the page description from front matter, and includes templates for language switching and dashboard promotion.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/2017-02-24-r-scientific-index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"--welcome\">\n\t<div class=\"--welcome-body\">\n\t\t<!--div.--wrap-inner-->\n\t\t<div class=\"--title\">\n\n\t\t\t<div class=\"--body\">\n\t\t\t\t<h1>Plotly R Library Scientific Charts</h1>\n\t\t\t\t<p>{{page.description}}</p><br>\n        {% include layouts/page-another-language.html %}\n\t\t\t\t{% include layouts/dashplug.html %}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Documentation Development\nDESCRIPTION: Commands for installing Ruby dependencies using Bundler. These dependencies are required for the Jekyll-based documentation system.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_posts/r/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install bundler\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies\nDESCRIPTION: Commands to install Bundler and required dependencies for the Jekyll application.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngem install bundler\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Multi-line Plot with Facets\nDESCRIPTION: Creates a faceted line plot using the tips dataset from Plotly Express, with renamed columns and multiple y-axes.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/_data/Untitled.ipynb#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\ndf = px.data.tips()\ndf = df.rename(columns=dict(total_bill=\"profit\", tip=\"loss\", sex=\"product\"))\nprint(df.head())\n\nfig = px.line(df, x='time', y=['profit', 'loss'], color='product', facet_col='size')\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob Dynamic Configuration\nDESCRIPTION: Shows how to dynamically reconfigure jQuery Knob options after initialization.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('.dial')\n        .trigger(\n            'configure',\n            {\n            \"min\":10,\n            \"max\":40,\n            \"fgColor\":\"#FF0000\",\n            \"skin\":\"tron\",\n            \"cursor\":true\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: jQuery Knob Event Hooks\nDESCRIPTION: Example of implementing event hooks in jQuery Knob for handling value changes and releases.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/jquery-knob/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".dial\").knob({\n                        'release' : function (v) { /*make something*/ }\n                    });\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap with Bower\nDESCRIPTION: Command for installing Bootstrap using the Bower package manager.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/bootstrap/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbower install bootstrap\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme and Re-rendering Placeholders\nDESCRIPTION: JavaScript for adding a custom theme and re-rendering all existing placeholders to use it.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nHolder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12}).run()\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder with Custom Text\nDESCRIPTION: HTML for creating a placeholder with custom text using the text operator in the placeholder URL.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img data-src=\"holder.js/200x200/text:hello world\">\n```\n\n----------------------------------------\n\nTITLE: Including Custom Theme at Runtime\nDESCRIPTION: HTML and JavaScript to include Holder.js and add a custom theme at runtime for immediate use.\nSOURCE: https://github.com/plotly/graphing-library-docs/blob/master/all_static/javascripts/holderjs/README.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"holder.js\"></script>\n<script> Holder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12 })</script>\n```"
  }
]