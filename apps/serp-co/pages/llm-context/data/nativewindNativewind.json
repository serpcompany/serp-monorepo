[
  {
    "owner": "nativewind",
    "repo": "nativewind",
    "content": "TITLE: Implementing NativeWind with styled components in React Native\nDESCRIPTION: This snippet demonstrates how to use NativeWind's styled function to create styled components in React Native. It shows the basic setup for a simple app with styled View and Text components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/home.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className=\"text-slate-800\">\n        Try editing me! 🎉\n      </StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Native\nDESCRIPTION: Tailwind CSS configuration for React Native projects with NativeWind preset, specifying content paths and theme extensions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // NOTE: Update this to include the paths to all of your component files.\n  content: [\"./App.{js,jsx,ts,tsx}\"],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in React Native App\nDESCRIPTION: Example of importing the global CSS file in a React Native App component, required for NativeWind styles to work.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./global.css\"\n\nexport default App() {\n  /* Your App */\n}\n```\n\n----------------------------------------\n\nTITLE: Example React Native Component with NativeWind Styling\nDESCRIPTION: Demonstrates basic usage of NativeWind with React Native components, showing how to create styled components and apply Tailwind classes. The example creates a centered view with styled text using Tailwind utility classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/packages/nativewind/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { withExpoSnack } from 'nativewind';\n\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className=\"text-slate-800\">\n        Try editing me! 🎉\n      </StyledText>\n    </StyledView>\n  );\n}\n\n// This demo is using a external compiler that will only work in Expo Snacks.\n// You may see flashes of unstyled content, this will not occur under normal use!\n// Please see the documentation to setup your application\nexport default withExpoSnack(App);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Native with NativeWind\nDESCRIPTION: Configuration for the tailwind.config.js file that includes NativeWind preset and specifies content paths for component files. This setup allows Tailwind CSS to work with React Native components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/_tailwind.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // NOTE: Update this to include the paths to all of your component files.\n  content: [\"./app/**/*.{js,jsx,ts,tsx}\"],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS Configuration in JavaScript\nDESCRIPTION: Basic TailwindCSS configuration setup that specifies content paths for component files, theme extensions, and plugins. The configuration includes pattern matching for JavaScript and TypeScript component files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/_tailwind.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // NOTE: Update this to include the paths to all of your component files.\n  content: [\"./App.{js,jsx,ts,tsx}\", \"./components/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for NativeWind in JavaScript\nDESCRIPTION: This snippet outlines the Metro configuration options for NativeWind. It includes required and optional settings such as input path, project root, output directory, and various other customization options.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"input\": \"string\",\n  \"projectRoot\": \"process.cwd()\",\n  \"outputDir\": \"node_modules/.cache/nativewind\",\n  \"configFile\": \"tailwind.config.js\",\n  \"cliCommand\": \"node node_modules/tailwind/lib/cli.js\",\n  \"browserslist\": \"last 1 versions\",\n  \"browserslistEnv\": \"native\",\n  \"hotServerOptions\": { \"port\": \"<next-available>\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Framework-less React Native\nDESCRIPTION: Tailwind CSS configuration for framework-less React Native projects, including content paths and presets.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./App.{js,jsx,ts,tsx}\"],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Styles with NativeWind in React Native\nDESCRIPTION: Shows how to create dynamic styles using conditional logic to build class names. This pattern allows for component styling to be controlled through props, making components more reusable and flexible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/home.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\nexport function MyText({ bold, italic, lineThrough, ...props }) {\n  const classNames = [];\n\n  if (bold) classNames.push(\"font-bold\");\n  if (italic) classNames.push(\"italic\");\n  if (lineThrough) classNames.push(\"line-through\");\n\n  return <Text className={classNames.join(\" \")} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Color Scheme in React Native with NativeWind\nDESCRIPTION: Examples of how to control the color scheme both imperatively and with hooks in a React Native application using NativeWind. Shows how to set the theme to dark, light, or system.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/dark-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { colorScheme, useColorScheme } from \"nativewind\";\n\n// Use imperatively\ncolorScheme.set(\"dark\" | \"light\" | \"system\");\n\nexport default function App() {\n  // Or as a hook\n  const { setColorScheme } = useColorScheme();\n  setColorScheme(\"dark\" | \"light\" | \"system\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Metro Config for Framework-less React Native\nDESCRIPTION: Metro configuration for framework-less React Native that integrates NativeWind using React Native's Metro config utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig, mergeConfig } = require(\"@react-native/metro-config\");\nconst { withNativeWind } = require(\"nativewind/metro\");\n\nconst config = mergeConfig(getDefaultConfig(__dirname), {\n  /* your config */\n});\n\nmodule.exports = withNativeWind(config, { input: \"./global.css\" });\n```\n\n----------------------------------------\n\nTITLE: Converting StyleSheet to NativeWind className in React Native\nDESCRIPTION: This code diff shows how to replace React Native's StyleSheet with NativeWind's className approach. It demonstrates importing the styled HOC, wrapping the View component, and replacing style props with className props that use Tailwind CSS-like syntax.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/_start-coding-components.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\n- import { StyleSheet, Text, View } from 'react-native';\n+ import { Text, View as RNView } from 'react-native';\n+ import { styled } from 'nativewind';\n\n+ const View = styled(RNView)\n\nexport default function App() {\n  return (\n-   <View style={styles.container}>\n+   <View className=\"flex-1 items-center justify-center bg-white\">\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n- const styles = StyleSheet.create({\n-   container: {\n-     flex: 1,\n-     backgroundColor: '#fff',\n-     alignItems: 'center',\n-     justifyContent: 'center',\n-   },\n- });\n```\n\n----------------------------------------\n\nTITLE: Comparing Third-Party Components with and without className Support in JSX\nDESCRIPTION: Illustrates the difference between components that don't pass the className prop (picking props) and those that correctly spread remaining props, allowing NativeWind to work properly.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ❌ This component will not work with NativeWind\n// This component is 'picking' the props.\n// Any props that are not explicitly defined will not be passed down\nfunction ThirdPartyComponent({ style }) {\n  return <View style={style} />;\n}\n\n// ✅ This component will work with NativeWind\nfunction ThirdPartyComponent({ style, ...props }) {\n  return <View style={style} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Style Merging in NativeWind\nDESCRIPTION: Demonstrates how to merge multiple classes by concatenating className strings together using template literals.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  const classes = `text-black`;\n  return <Text className={`font-bold ${classes}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with NativeWind in React Native\nDESCRIPTION: Shows how to dynamically apply Tailwind CSS classes based on component props. The example builds a classNames array based on conditional logic and joins them into a single string.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/overview/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\nexport function MyText({ bold, italic, lineThrough, ...props }) {\n  const classNames = [];\n\n  if (bold) classNames.push(\"font-bold\");\n  if (italic) classNames.push(\"italic\");\n  if (lineThrough) classNames.push(\"line-through\");\n\n  return <Text className={classNames.join(\" \")} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NativeWind Usage with Third-Party Components in React Native\nDESCRIPTION: Demonstrates how to apply Tailwind CSS classes to third-party components in React Native using the className prop. The JSX transform allows this to work without custom wrappers.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CustomText } from \"third-party-text-component\";\n\nexport function BoldText(props) {\n  // You just need to write `className=\"<your styles>\"`\n  return <CustomText className=\"font-bold\" {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Third-Party Components with NativeWind in React Native\nDESCRIPTION: Demonstrates how to apply Tailwind CSS classes to third-party components using the className prop. This approach works with any third-party component that accepts and passes through the className prop.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/home.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CustomText } from \"third-party-text-component\";\n\nexport function BoldText(props) {\n  // You just need to write `className=\"<your styles>\"`\n  return <CustomText className=\"text-bold\" {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Styling with NativeWind in React Native\nDESCRIPTION: Illustrates how to apply conditional styling using NativeWind, allowing for dynamic class application based on component props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\nexport function MyText({ bold, italic, lineThrough, ...props }) {\n  const classNames = [];\n\n  if (bold) classNames.push(\"font-bold\");\n  if (italic) classNames.push(\"italic\");\n  if (lineThrough) classNames.push(\"line-through\");\n\n  return <Text className={classNames.join(\" \")} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Third-Party Library Compatibility with NativeWind in React Native\nDESCRIPTION: Shows how to improve compatibility with existing React Native libraries by using NativeWind's styled function with additional options for class props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { styled } from \"nativewind\";\nimport { Svg, Circle, Rect } from \"react-native-svg\";\n\n/**\n * These components can now use the \"stroke\" & \"fill\" props with Tailwind classes\n * They will use inline-props on native, and className on web.\n */\nconst StyledCircle = styled(Circle, { classProps: [\"stroke\", \"fill\"] });\nconst StyledRect = styled(Rect, { classProps: [\"stroke\", \"fill\"] });\n\nexport function BoldText(props) {\n  return (\n    <Svg height=\"50%\" width=\"50%\" viewBox=\"0 0 100 100\">\n      <StyledCircle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"45\"\n        stroke=\"stroke-blue-500 stroke-2\"\n        fill=\"color-green-500\"\n      />\n      <StyledRect\n        x=\"15\"\n        y=\"15\"\n        width=\"70\"\n        height=\"70\"\n        stroke=\"stroke-red-500 stroke-2\"\n        fill=\"color-yellow-500\"\n      />\n    </Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Styles with NativeWind in React Native\nDESCRIPTION: This example demonstrates how to use platform-specific class names in NativeWind to apply different text colors based on the platform (iOS, Android, or web). It uses styled components from NativeWind and platform variants in the className prop.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/platforms.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className={`\n        ios:text-red-500\n        android:text-blue-500\n        web:text-green-600\n      `}>\n        Text color changes per Platform! 🎉\n      </StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Colors in NativeWind\nDESCRIPTION: This snippet demonstrates how to extend the Tailwind CSS theme configuration to include platform-specific colors using NativeWind's platformSelect and platformColor utilities. It shows how to define a custom 'error' color that adapts to iOS, Android, and provides a default fallback value.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/colors.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { platformSelect, platformColor } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        error: platformSelect({\n          // Now you can provide platform specific values\n          ios: platformColor(\"systemRed\"),\n          android: platformColor(\"?android:colorError\"),\n          default: \"red\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewport Units with NativeWind in React Native\nDESCRIPTION: This code snippet demonstrates how to use viewport units (vh) with NativeWind in a React Native application. It creates a styled View component with a height of 25vh and width of 50vh, containing centered text. The example showcases the integration of NativeWind's styled function with React Native components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/units.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className={`\n      items-center\n      justify-center\n      bg-slate-300\n      m-auto\n      h-[25vh]\n      w-[50vh]\n    `}>\n      <StyledText\n        selectable={false}\n        className=\"text-slate-800\"\n      >\n        Rotate me! 🎉\n      </StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Theming in Tailwind\nDESCRIPTION: This snippet demonstrates how to use the platformSelect and platformColor functions from NativeWind to implement platform-specific theming in a Tailwind configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { platformSelect, platformColor } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        error: platformSelect({\n          ios: \"red\",\n          android: \"blue\",\n          default: \"green\",\n        }),\n        platformRed: platformSelect({\n          android: platformColor(\"systemRed\"),\n          web: \"red\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Basis with NativeWind in React Native\nDESCRIPTION: This example demonstrates how to use flex basis classes in NativeWind to control the initial size of flex items. It creates a row of three boxes with different flex basis values, showcasing the distribution of space.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-basis.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className, ...props }) => (\n  <StyledText className={`flex text-center h-14 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-row h-screen items-center space-x-2\">\n      <Box className=\"basis-1/4\">01</Box>\n      <Box className=\"basis-1/4\">02</Box>\n      <Box className=\"basis-1/2\">03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting React Native StyleSheet to NativeWind Styled Components\nDESCRIPTION: Demonstrates how to transform a basic React Native app from using StyleSheet to NativeWind styling. Shows the replacement of StyleSheet.create with className props and the setup of styled components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/_start-coding-components.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\n- import { StyleSheet, Text, View } from 'react-native';\n+ import { Text, View as RNView } from 'react-native';\n+ import { styled } from 'nativewind';\n\n+ const View = styled(RNView)\n\nexport default function App() {\n  return (\n-   <View style={styles.container}>\n+   <View className=\"flex-1 items-center justify-center bg-white\">\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n- const styles = StyleSheet.create({\n-   container: {\n-     flex: 1,\n-     backgroundColor: '#fff',\n-     alignItems: 'center',\n-     justifyContent: 'center',\n-   },\n- });\n```\n\n----------------------------------------\n\nTITLE: Default Styles with styled() in React Native\nDESCRIPTION: Shows how to apply default styles to components using styled() HOC, similar to Styled Components pattern. Demonstrates applying base styling to View and Text components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/styled.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { View, Text } from \"react-native\";\nimport { styled } from \"nativewind\";\n\nconst StyledView = styled(View, 'flex-1 items-center justify-center');\nconst StyledText = styled(Text, 'font-bold');\n\nfunction App() {\n  return (\n    <StyledView>\n      <StyledText>Hello world.</StyledText>;\n    </StyledView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic States in NativeWind React Native\nDESCRIPTION: Demonstrates how to implement hover and active states on a Pressable component using NativeWind styled components. Shows basic usage of hover and active classes for background color changes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/states.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, Pressable } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledPressable = styled(Pressable)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledPressable className={`\n      flex-1\n      items-center\n      justify-center\n      hover:bg-slate-300\n      active:bg-slate-500\n    `}>\n      <StyledText\n        selectable={false}\n        className=\"text-slate-800\"\n      >\n        Hover and click me! 🎉\n      </StyledText>\n    </StyledPressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeWind Styling in React Native App Component\nDESCRIPTION: This code demonstrates the migration from React Native's StyleSheet to NativeWind's className approach. It removes the StyleSheet import and definition, replacing inline styles with className strings for styling the View component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/_start-coding.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\n- import { StyleSheet, Text, View } from 'react-native';\n+ import { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n-   <View style={styles.container}>\n+   <View className=\"flex-1 items-center justify-center bg-white\">\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n- const styles = StyleSheet.create({\n-   container: {\n-     flex: 1,\n-     backgroundColor: '#fff',\n-     alignItems: 'center',\n-     justifyContent: 'center',\n-   },\n- });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Style Inconsistency in React Native Components\nDESCRIPTION: This snippet shows how different platforms can interpret styles differently, causing inconsistencies in React Native components. It demonstrates the problem using a custom MyText component and various styling approaches.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/style-specificity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyText({ style }) {\n  return <Text {...props} style={[{ color: 'black' }, style]} />;\n}\n\nremapProps(MyText, { className: 'style' })\n\n<MyText style={{ color: 'red' }}>The text will be red on all platforms</MyText>\n<MyText className=\"text-red-500\">What color should I render as?</MyText>\n```\n\n----------------------------------------\n\nTITLE: Using platformColor with platformSelect for Native Platform Colors\nDESCRIPTION: Shows how to use platformColor with platformSelect to access native platform colors in a Tailwind configuration. This is equivalent to React Native's PlatformColor API.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { platformColor } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        platformRed: platformSelect({\n          android: platformColor(\"systemRed\"),\n          web: \"red\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing NativeWind with Create Expo Stack\nDESCRIPTION: Command to initialize a new Expo project with NativeWind and Tailwind CSS, skipping manual setup.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-stack@latest --nativewind\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Tailwind Config\nDESCRIPTION: Setup for manually controlling dark mode in a NativeWind application by setting the darkMode strategy to 'class' in the tailwind configuration file.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/dark-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  darkMode: \"class\",\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Style Variants in NativeWind\nDESCRIPTION: Shows how to implement a component with multiple style variants using an object to store variant styles. This pattern enables creating components with different visual appearances based on props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/custom-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst variantStyles = {\n  default: \"rounded\",\n  primary: \"bg-blue-500 text-white\",\n  secondary: \"bg-white-500 text-black\",\n};\n\nfunction MyComponent({ variant, className, ...props }) {\n  return (\n    <Text\n      className={`\n        ${variantStyles.default}\n        ${variantStyles[variant]}\n        ${className}\n      `}\n      {....props }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web and Native Static Runtime for NativeWind in TypeScript\nDESCRIPTION: This snippet demonstrates how NativeWind implements static runtime functions for web and native platforms. It shows how styles are processed and applied differently for web and native environments, including handling of dynamic styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/how-it-works.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst globalStyles = new Map<string, StyleObject>();\n\nfunction webStaticRuntime(type, props, key) {\n  // React Native Web supports 'preprocessed' styles, so we don't need to do anything!\n  props.style = { $$css: true, [props.className]: props.className };\n  delete props.className;\n  return ReactJSXRuntime.jsx(type, props, key);\n}\n\nfunction nativeStaticRuntime(type, props, key) {\n  props.style = props.className\n    .split(\" \")\n    .map((className) => globalStyles.get(className))\n    .sort(specificityCompareFn);\n\n  delete props.className;\n\n  if (styles.some((style) => style.isDynamic)) {\n    // If the styles are dynamic, we need to include the runtime Higher Order Component\n    props.$$as = type;\n    return ReactJSXRuntime.jsx(NativeWindWrapper, props, key);\n  } else {\n    return ReactJSXRuntime.jsx(type, props, key);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useColorScheme Hook in React Native with NativeWind\nDESCRIPTION: Demonstrates how to implement a component that displays and toggles between light and dark color schemes using the useColorScheme hook. The hook provides access to the current colorScheme and methods to modify it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/use-color-scheme.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useColorScheme } from \"nativewind\";\nimport { Text } from \"react-native\";\n\nfunction MyComponent() {\n  const { colorScheme, setColorScheme } = useColorScheme();\n\n  return (\n    <Text\n      onPress={() => setColorScheme(colorScheme === \"light\" ? \"dark\" : \"light\")}\n    >\n      {`The color scheme is ${colorScheme}`}\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: NativeWind Gap Complex Implementation Example\nDESCRIPTION: A complete example showing how to implement gap spacing with styled components in a flex layout, including custom Box component and responsive grid-like layout.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/gap.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\nconst Box = ({ className, ...props }) => (\n  <StyledText className={`flex flex-1 text-center h-14 basis-[32] justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-row flex-wrap h-screen w-screen content-center items-center gap-2 overflow-hidden\">\n      <Box>01</Box>\n      <Box>02</Box>\n      <Box>03</Box>\n      <Box>04</Box>\n      <Box>05</Box>\n      <Box>06</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic styled() Component Usage in React Native\nDESCRIPTION: Demonstrates basic usage of styled() HOC with Text component using both tw and className props. Shows how to create a styled component that accepts Tailwind-style class names.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/styled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { styled } from \"nativewind\";\n\nconst StyledText = styled(Text);\n\nfunction App() {\n  return (\n    <>\n      <StyledText tw=\"font-bold\">Hello world.</StyledText>\n      <StyledText className=\"font-bold\">Hello world.</StyledText>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Remapping Props for Complex Components with NativeWind\nDESCRIPTION: Demonstrates how to remap className props to various style properties for complex components like FlatList. This allows applying Tailwind styles to different parts of a component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/overview/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nremapProps(FlatList, {\n  className: \"style\",\n  ListFooterComponentClassName: \"ListFooterComponentStyle\",\n  ListHeaderComponentClassName: \"ListHeaderComponentStyle\",\n  columnWrapperClassName: \"columnWrapperStyle\",\n  contentContainerClassName: \"contentContainerStyle\",\n});\n\n<FlatList\n  {...}\n  className=\"bg-black\"\n  ListHeaderComponentClassName=\"bg-black text-white\"\n  ListFooterComponentClassName=\"bg-black text-white\"\n  columnWrapperClassName=\"bg-black\"\n  contentContainerClassName=\"bg-black\"\n  indicatorClassName=\"bg-black\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Switching in React Native\nDESCRIPTION: This example demonstrates how to implement theme switching in React Native using NativeWind. It includes a Theme component that supports two themes with both light and dark modes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vars, useColorScheme } from 'nativewind'\n\nconst themes = {\n  brand: {\n    'light': vars({\n      '--color-primary': 'black'\n      '--color-secondary': 'white'\n    }),\n    'dark': vars({\n      '--color-primary': 'white'\n      '--color-secondary': 'dark'\n    })\n  },\n  christmas: {\n    'light': vars({\n      '--color-primary': 'red'\n      '--color-secondary': 'green'\n    }),\n    'dark': vars({\n      '--color-primary': 'green'\n      '--color-secondary': 'red'\n    })\n  }\n}\n\nfunction Theme(props) {\n  const { colorScheme } = useColorScheme()\n  return (\n    <View style={themes[props.name][colorScheme]}>\n      {props.children}\n    </View>\n  )\n}\n\nexport default App() {\n  return (\n    <Theme name=\"brand\">\n      <View className=\"text-primary\">{/* rgba(0, 0, 0, 1) */}>\n      <Theme name=\"christmas\">\n        <View className=\"text-primary\">{/* rgba(255, 0, 0, 1) */}>\n      </Theme>\n    </Theme>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State-Based Styling in React Native with NativeWind\nDESCRIPTION: This snippet shows the same component implemented using NativeWind. It demonstrates how NativeWind simplifies state-based styling by using className strings, reducing complexity and improving readability.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/universal-system.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/*\n The same component with NativeWind\n */\nexport function MyButton(props) {\n  return <Pressable className={`\n    bg-brand-600\n    active:bg-brand-700\n    dark:bg-brand-300\n    dark:active:bg-brand-300\n  `} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors for Tailwind and React Native\nDESCRIPTION: This set of snippets demonstrates how to define custom colors in a separate file, use them in a Tailwind configuration, and then access them in a React Native component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  tahiti: {\n    100: \"#cffafe\",\n    200: \"#a5f3fc\",\n    300: \"#67e8f9\",\n    400: \"#22d3ee\",\n    500: \"#06b6d4\",\n    600: \"#0891b2\",\n    700: \"#0e7490\",\n    800: \"#155e75\",\n    900: \"#164e63\",\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst colors = require(\"./colors\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors,\n    },\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport colors from \"./colors\";\n\nexport function MyActivityIndicator(props) {\n  return <ActivityIndicator color={colors.tahiti[500]} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using platformColor for Platform-Specific Colors in NativeWind\nDESCRIPTION: This snippet shows how to use the 'platformColor' function to set platform-specific colors in the Tailwind configuration. It's equivalent to using 'PlatformColor' in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { platformColor } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        platformRed: platformColor(\"systemRed\", \"red\"),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Package Manager Installation Commands Component in React/JSX\nDESCRIPTION: A tabbed interface component that displays installation commands for different package managers. It conditionally renders commands based on provided dependencies and dev dependencies, with special handling for Expo framework.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/_npm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport CodeBlock from \"@theme/CodeBlock\";\n\n<Tabs groupId=\"npm-install\">\n  <TabItem value=\"npm\" label=\"npm\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `npm install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `npm install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `yarn add ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `yarn add -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"pnpm\" label=\"pnpm\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `pnpm install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `pnpm install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"bun\" label=\"bun\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `bun install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `bun install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  {props.framework === 'expo' && (\n    <TabItem value=\"expo\" label=\"Expo\">\n      <CodeBlock language=\"bash\">\n        {[\n          props.deps?.length ? `npx expo install ${props.deps.join(\" \")}` : undefined,\n          props.devDeps?.length\n            ? `npx expo install -D ${props.devDeps.join(\" \")}`\n            : undefined,\n        ]\n          .filter(Boolean)\n          .join(\"\\n\")}\n      </CodeBlock>\n    </TabItem>\n  )}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Component with NativeWind's Component API\nDESCRIPTION: Demonstrates the use of NativeWind's Component API to create a styled component, providing more explicit control over styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { styled } from \"nativewind\";\n\nconst StyledText = styled(Text);\n\nexport function BoldText(props) {\n  return <StyledText className=\"font-bold\" {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending NativeWind Styles in React Native Components\nDESCRIPTION: This snippet demonstrates how to create a reusable button component with NativeWind that allows for style overrides. It shows how to combine base styles with additional className props for flexibility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/universal-system.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyButton({ className, ...props }) {\n  return (\n    <Pressable\n      className={`\n    bg-brand-600\n    active:bg-brand-700\n    dark:bg-brand-300\n    dark:active:bg-brand-300\n    ${className}\n  `}\n      {...props}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using vars() Function for CSS Variables in React Native with NativeWind\nDESCRIPTION: This example demonstrates how to use the vars() function to define a CSS variable ('--brand-color') and apply it to a Text component using NativeWind's className syntax. The vars() function converts the CSS variable into a React Native style object.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/vars.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<View style={vars({ '--brand-color': 'red'})}>\\n  { // style: { color: 'red' } }\\n  <Text className=\"text-[--brand-color]\" />\\n</View>\n```\n\n----------------------------------------\n\nTITLE: Applying NativeWind Specificity Rules in React Native\nDESCRIPTION: This example demonstrates the application of NativeWind's specificity rules, including the use of the !important modifier to ensure consistent styling across platforms for both basic and remapped components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/style-specificity.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic components\n<Text className=\"text-red-500\" style={{ color: 'green' }} /> // green text\n<Text className=\"!text-red-500\" style={{ color: 'green' }} /> // red text\n\n// Remapped components (reusing the initial problem example)\n<MyText className=\"text-red-500\" /> // Native: red, Web: black\n<MyText className=\"!text-red-500\" /> // Both platforms: red\n```\n\n----------------------------------------\n\nTITLE: Using remapProps with Third-Party Components in NativeWind\nDESCRIPTION: This example demonstrates how to use the remapProps utility to create a customized version of a third-party component with new class-based props that map to existing style props. The resulting component accepts Tailwind CSS classes that are applied to the appropriate style props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/remap-props.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { remapProps } from \"nativewind\";\n\n/**\n  ThirdPartyButton is a component with two \"style\" props, buttonStyle & labelStyle.\n  We can use remapProps to create new props that accept Tailwind CSS's classNames.\n */\nconst CustomizedButton = remapProps(ThirdPartyButton, {\n  buttonClass: \"buttonStyle\",\n  labelClass: \"labelStyle\",\n});\n\n<CustomizedButton buttonClass=\"bg-blue-500\" labelClass=\"text-white\" />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Component with Default Styles in NativeWind\nDESCRIPTION: Demonstrates how to create a simple component that merges default styles with props.className. This pattern allows for base styling while enabling style overrides from parent components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/custom-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent({ className }) {\n  const defaultStyles = \"text-black dark:text-white\";\n  return <Text className={`${defaultStyles} ${className}`} />;\n}\n\n<MyComponent className=\"font-bold\" />;\n```\n\n----------------------------------------\n\nTITLE: Accessing Tailwind Colors in React Native Component (TSX)\nDESCRIPTION: This snippet demonstrates how to import and use Tailwind colors directly in a React Native component. It creates a custom ActivityIndicator with a specific blue color from the Tailwind palette.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/theme-values.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport colors from \"tailwindcss/colors\";\n\nexport function MyActivityIndicator(props) {\n  return <ActivityIndicator size=\"small\" color={colors.blue.500} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for NativeWind in React Native\nDESCRIPTION: This snippet demonstrates how to use the withNativeWind higher-order component to update your Metro configuration for NativeWind support. It requires specifying the relative path to your CSS file as the input option.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/with-nativewind.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withNativeWind } from \"native-wind/metro\";\n\nmodule.exports = withNativeWind(config, {\n  input: \"<relative path to your .css file>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Property Styling with styled()\nDESCRIPTION: Demonstrates how to style multiple properties using styled() HOC, including handling additional props for runtime styles. Shows usage with a custom Wrapper component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/styled.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Wrapper({ innerStyle, children, ...props }) {\n  return (\n    <View {...props}>\n      <View style={innerStyle}>\n        { children }\n      </View>\n    </View>\n  )\n}\n\nconst StyledWrapper = styled(Wrapper, {\n  props: {\n    innerStyle: true\n  }\n})\n\n<StyledWrapper className=\"h-4\" innerStyle=\"p-4\"><Text>Hello, World!</Text></StyledWrapper>\n```\n\n----------------------------------------\n\nTITLE: Using pixelRatioSelect for Conditional Pixel Density Values\nDESCRIPTION: Demonstrates how to use pixelRatioSelect for conditionally selecting values based on the device's pixel ratio. This provides a select-like API similar to Platform.select but for pixel density.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { pixelRatio, hairlineWidth } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: pixelRatioSelect({\n        2: 1,\n        default: hairlineWidth(),\n      }),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Multiple Style Props in NativeWind\nDESCRIPTION: Shows how to create a component that accepts multiple style props for different child elements. This pattern is useful for creating flexible compound components where different parts need separate styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/custom-components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent({ className, textClassName }) {\n  return (\n    <View className={className}>\n      <Text className={textClassName}>Hello, NativeWind!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Components with cssInterop in NativeWind\nDESCRIPTION: Shows how to use cssInterop() to map Tailwind classes to specific style properties on SVG components. This technique allows for mapping CSS properties to native props when components expect style attributes directly as props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/home.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { cssInterop } from \"nativewind\";\nimport { Svg, Circle } from \"react-native-svg\";\n\n/**\n * Circle uses `height`/`width` props on native and className on web\n */\nconst StyledSVG = cssInterop(Svg, {\n  className: {\n\ttarget: \"style\",\n\tnativeStyleToProp: {\n\t  height: true,\n\t  width: true,\n\t},\n  },\n});\n/**\n * Circle uses `fill`/`stroke`/`strokeWidth` props on native and className on web\n */\nconst StyledCircle = cssInterop(Circle, {\n  className: {\n\ttarget: \"style\",\n\tnativeStyleToProp: {\n\t  fill: true,\n\t  stroke: true,\n\t  strokeWidth: true,\n\t},\n  },\n});\n\nexport function BoldText(props) {\n  return (\n\t<Svg className=\"w-1/2 h-1/2\" viewBox=\"0 0 100 100\">\n\t  <StyledCircle\n\t\tclassName=\"fill-green-500 stroke-blue-500 stroke-2\"\n\t\tcx=\"50\"\n\t\tcy=\"50\"\n\t\tr=\"45\"\n\t  />\n\t</Svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Support Status Table in React/JSX\nDESCRIPTION: Component that renders a table showing feature support status. Takes props for supported, experimental, native, partial, and web-only features. Each feature is displayed with its status indicator and associated comments. Includes a conditional legend rendering.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_compatibility-with-comments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Legend from \"./_legend.md\";\n\n<table>\n  <tbody style={{ display: \"table\", width: \"100%\" }}>\n    <tr>\n      <th style={{ whiteSpace: \"nowrap\" }}>Class</th>\n      <th>Support</th>\n      <th>Comments</th>\n    </tr>\n    {(props.supported || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td style={{ whiteSpace: \"nowrap\" }}>\n          <pre>\n            <code>{value[0]}</code>\n          </pre>\n        </td>\n        <td style={{ whiteSpace: \"nowrap\" }}>✅ Full Support</td>\n        <td>{value[1]}</td>\n      </tr>\n    ))}\n    {(props.experimental || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td style={{ whiteSpace: \"nowrap\" }}>\n          <pre>\n            <code>{value[0]}</code>\n          </pre>\n        </td>\n        <td>🧪 Experimental Support</td>\n        <td>{value[1]}</td>\n      </tr>\n    ))}\n    {(props.native || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td style={{ whiteSpace: \"nowrap\" }}>\n          <pre>\n            <code>{value[0]}</code>\n          </pre>\n        </td>\n        <td>📱 Native only</td>\n        <td>{value[1]}</td>\n      </tr>\n    ))}\n    {(props.partial || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td style={{ whiteSpace: \"nowrap\" }}>\n          <pre>\n            <code>{value[0]}</code>\n          </pre>\n        </td>\n        <td>✔️ Partial Support</td>\n        <td>{value[1]}</td>\n      </tr>\n    ))}\n    {(props.none || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td style={{ whiteSpace: \"nowrap\" }}>\n          <pre>\n            <code>{value[0]}</code>\n          </pre>\n        </td>\n        <td>🌐 Web only</td>\n        <td>{value[1]}</td>\n      </tr>\n    ))}\n  </tbody>\n</table>\n\n<>{props.legend || props.legend === undefined ? <Legend /> : <></>}</>\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS Content Paths for React Native\nDESCRIPTION: Configuration setup for tailwind.config.js that specifies which files should be scanned for Tailwind class names. The content array includes patterns for JavaScript, TypeScript, and React component files across screens, pages, and components directories.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/_tailwind.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    \"./screens/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating NativeWind in React Native App\nDESCRIPTION: This code snippet shows the modifications needed to integrate NativeWind into a React Native application. It removes the StyleSheet import and usage, replacing inline styles with NativeWind's className prop for styling the main container View.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/_start-coding.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\n- import { StyleSheet, Text, View } from 'react-native';\n+ import { Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n-   <View style={styles.container}>\n+   <View className=\"flex-1 items-center justify-center bg-white\">\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n- const styles = StyleSheet.create({\n-   container: {\n-     flex: 1,\n-     backgroundColor: '#fff',\n-     alignItems: 'center',\n-     justifyContent: 'center',\n-   },\n- });\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Scaling in NativeWind\nDESCRIPTION: This example shows how to use the 'fontScale' function in the Tailwind configuration to set font sizes that scale based on the device's font scale setting. It can accept a number or an object for different scale values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { getFontScale } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontSize: {\n        number: fontScale(2)\n        object: fontScale({\n          1: 10\n          1.5: 15\n          2: 20\n        })\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Column Layout with NativeWind in React Native\nDESCRIPTION: This snippet demonstrates how to create a vertical layout using flex-col in NativeWind. It creates a StyledView with flex-col class and renders three Box components inside it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-direction.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex text-center h-14 w-14 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-col h-screen\">\n      <Box>01</Box>\n      <Box>02</Box>\n      <Box>03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Styles to Components in NativeWind\nDESCRIPTION: Demonstrates how to pass styles between components using the style prop instead of className. Shows basic component style passing pattern.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent({ style }) {\n  return <Text style={style} />;\n}\n\n<MyComponent className=\"font-bold\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced TextInput cssInterop Mapping in NativeWind\nDESCRIPTION: Shows a real-world example of configuring cssInterop for React Native's TextInput component. It maps className to style prop, and extracts specific style attributes like textAlign, color for placeholders, and selection color to their corresponding native props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/css-interop.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ncssInterop(TextInput, {\n  className: {\n    target: \"style\", // map className->style\n    nativeStyleToProp: {\n      textAlign: true, // extract `textAlign` styles and pass them to the `textAlign` prop\n    },\n  },\n  placeholderClassName: {\n    target: false, // Don't pass this as a prop\n    nativeStyleToProp: {\n      color: \"placeholderTextColor\", // extract `color` and pass it to the `placeholderTextColor`prop\n    },\n  },\n  selectionClassName: {\n    target: false, // Don't pass this as a prop\n    nativeStyleToProp: {\n      color: \"selectionColor\", // extract `color` and pass it to the `selectionColor`prop\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Child Styles with NativeWindStyleSheet in React Native\nDESCRIPTION: Demonstrates how NativeWind handles styles that apply to child elements, such as the 'divide-x' utility. It uses atRules with selectors and a childClasses object to define these styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/how-it-works.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Text class=\"divide-x\" />;\n\nNativeWindStyleSheet.create({\n  styles: {\n    \"divide-x-2.children@0\": {\n      borderLeftWidth: 2,\n      borderRightWidth: 0,\n    },\n  },\n  atRules: {\n    \"divide-x-2.children\": [[\"selector\", \"(> *:not(:first-child))\"]],\n  },\n  childClasses: {\n    \"divide-x-2\": [\"divide-x-2.children\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Dark Mode Manually in React Native with NativeWind\nDESCRIPTION: This snippet demonstrates how to implement manual dark mode toggling in a React Native app using NativeWind. It uses the useColorScheme hook to control the color scheme and applies dark mode styles using the 'dark:' prefix in className props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/dark-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pressable, Text } from \"react-native\"\nimport { styled, useColorScheme } from \"nativewind\";\n\nconst StyledPressable = styled(Pressable)\nconst StyledText = styled(Text)\n\nfunction App() {\n  const { colorScheme, toggleColorScheme } = useColorScheme();\n\n  return (\n    <StyledPressable\n      onPress={toggleColorScheme}\n      className=\"flex-1 items-center justify-center dark:bg-slate-800\"\n    >\n      <StyledText\n        selectable={false}\n        className=\"dark:text-white\"\n      >\n        {`Try clicking me! ${colorScheme === \"dark\" ? \"🌙\" : \"🌞\"}`}\n      </StyledText>\n    </StyledPressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using pixelRatio for Device-Specific Sizing in NativeWind\nDESCRIPTION: This snippet illustrates how to use the 'pixelRatio' function in the Tailwind configuration to set sizes based on the device's pixel ratio. It can accept a number or an object for different pixel ratio values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { pixelRatio } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: {\n        number: pixelRatio(2)\n        object: pixelRatio({\n          1: 1\n          1.5: 2\n          2: 4\n        })\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic cssInterop Usage in NativeWind\nDESCRIPTION: Demonstrates three different usage patterns for the cssInterop function: mapping a new prop to an existing prop, overriding an existing prop, and creating complex prop mappings with nested configurations.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/css-interop.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cssInterop } from 'nativewind';\n\n// Create a new prop and map it to an existing prop\ncssInterop(component, { \"new-prop\": \"existing-prop\" });\n\n// Override an existing prop.\ncssInterop(component, { \"new-prop\": true });\n\n// Override an existing prop.\ncssInterop(component, {\n  \"new-prop\": {\n    target: \"existing-prop\", // string or boolean\n    nativeStyleToProp: {\n      \"style-attribute\": \"existing-prop\",\n    }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating NativeWind with SVG Components\nDESCRIPTION: Shows how to use cssInterop to map Tailwind CSS classes to specific style props on SVG components. This enables styling SVG elements with height, width, fill, stroke, and other SVG-specific properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/overview/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { cssInterop } from \"nativewind\";\nimport { Svg, Circle } from \"react-native-svg\";\n\n/**\n * Svg uses `height`/`width` props on native and className on web\n */\nconst StyledSVG = cssInterop(Svg, {\n  className: {\n    target: \"style\",\n    nativeStyleToProp: {\n      height: true,\n      width: true,\n    },\n  },\n});\n/**\n * Circle uses `fill`/`stroke`/`strokeWidth` props on native and className on web\n */\nconst StyledCircle = cssInterop(Circle, {\n  className: {\n    target: \"style\",\n    nativeStyleToProp: {\n      fill: true,\n      stroke: true,\n      strokeWidth: true,\n    },\n  },\n});\n\nexport function BoldText(props) {\n  return (\n    <StyledSVG className=\"w-1/2 h-1/2\" viewBox=\"0 0 100 100\">\n      <StyledCircle\n        className=\"fill-green-500 stroke-blue-500 stroke-2\"\n        cx=\"50\"\n        cy=\"50\"\n        r=\"45\"\n      />\n    </StyledSVG>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Tailwind Colors in React Native\nDESCRIPTION: This snippet shows how to import and use default Tailwind colors in a React Native component. It demonstrates accessing a specific color value from the Tailwind color palette.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport colors from \"tailwindcss/colors\";\n\nexport function MyActivityIndicator(props) {\n  return <ActivityIndicator size=\"small\" color={colors.blue[500]} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo SDK 50+\nDESCRIPTION: Babel configuration for Expo SDK 50+ projects using NativeWind, including the necessary preset and plugins.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n\tapi.cache(true);\n  \treturn {\n\t\tpresets: ['babel-preset-expo'],\n\t\tplugins: ['nativewind/babel'],\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Style Logic with clsx\nDESCRIPTION: Demonstrates using the clsx library for handling complex conditional styling logic in components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction A({ rounded, className }) {\n  const className = clsx(\n    \"font-bold\",\n    { rounded },\n    variant === \"primary\" && \"bg-blue-500 text-white\",\n    variant === \"secondary\" && \"bg-blue-500 text-white\",\n    className\n  );\n  return <B className={className} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Explicit Style Declaration in NativeWind\nDESCRIPTION: Examples showing incorrect and correct ways to declare styles for dark mode compatibility in React Native. The correct approach includes explicit style declarations for both light and dark modes to prevent conditional styling issues.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/differences.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n❌ <Text className=\"dark:text-white-500\" />\n✅ <Text className=\"text-black dark:text-red-500\" />\n```\n\n----------------------------------------\n\nTITLE: Component Variant Styling Pattern\nDESCRIPTION: Shows how to implement component variants using predefined style objects and string interpolation for dynamic styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst variantStyles = {\n  default: \"rounded\",\n  primary: \"bg-blue-500 text-white\",\n  secondary: \"bg-white-500 text-black\",\n};\n\nfunction MyComponent({ variant }) {\n  return (\n    <Text\n      className={`\n      font-bold\n      ${variantStyles.default}\n      ${variantStyles[variant]}\n    `}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component with Multiple Style-Related Props in TSX\nDESCRIPTION: Example of a component that has multiple style-related color props which need to be handled separately.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ThirdPartyComponent({ labelColor, inputColor, ...props }) {\n  return (\n    <>\n      <Text style={color: labelColor}>Label</Text>\n      <TextInput style={color: labelColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: remapProps Configuration Options in NativeWind\nDESCRIPTION: This snippet shows different configuration options for the remapProps utility. It demonstrates how to create new props mapped to existing ones and how to override existing props in a component to work with Tailwind CSS classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/remap-props.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Create a new prop and map it to an existing prop\nremapProps(component, { \"new-prop\": \"existing-prop\" });\n\n// Override an existing prop.\nremapProps(component, { prop: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo SDK 49\nDESCRIPTION: Babel configuration for Expo SDK 49 with NativeWind, including additional plugins for expo-router and react-native-reanimated.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\"babel-preset-expo\", { jsxImportSource: \"nativewind\" }],\n      \"nativewind/babel\",\n    ],\n    plugins: [\n      // Required for expo-router\n      \"expo-router/babel\",\n      \"react-native-reanimated/plugin\",\n    ]\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Animation Support in NativeWind\nDESCRIPTION: Demonstrates the experimental animation support in NativeWind v4, which integrates with react-native-reanimated and supports both predefined and custom animations.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Use an existing animation class\n<View className=\"animation-bounce\" />\n\n// Or define a custom animation in your .css\n@keyframes example {\n  from { background-color: red; }\n  to { background-color: yellow; }\n}\n\n.my-animation {\n  animation-name: example;\n  animation-duration: 4s;\n}\n\n<View className=\"my-animation\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating styled() to tw-classed in React Native\nDESCRIPTION: Example of how to migrate from NativeWind's styled() to tw-classed library for creating styled components with variants in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text as RNText } from \"react-native\";\nimport { classed } from \"@tw-classed/react\";\n\nexport const Text = classed(RNText, \"text-black\", {\n  variants: {\n    color: {\n      blue: \"text-blue-500\",\n      green: \"text-green-500\",\n    },\n  },\n});\n\nconst App = () => {\n  return <Text color=\"blue\">Hello, tw-classed!</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Colors in NativeWind\nDESCRIPTION: This code snippet shows how to extend the Tailwind configuration to include platform-specific colors using the platformSelect function from NativeWind. It demonstrates setting up an 'error' color that uses PlatformColor for iOS and Android, with a fallback for other platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/colors.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { platformSelect } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        error: platformSelect({\n          // Now you can provide platform specific values\n          ios: \"platformColor(systemRed)\",\n          android: \"platformColor(?android:colorError)\",\n          default: \"red\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Complex Components with remapProps in NativeWind\nDESCRIPTION: Demonstrates how to use remapProps() to map className props to specific style props on complex components like FlatList. This approach provides better performance for components with multiple styling points.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/home.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nremapProps(FlatList, {\n  className: \"style\",\n  ListFooterComponentClassName: \"ListFooterComponentStyle\",\n  ListHeaderComponentClassName: \"ListHeaderComponentStyle\",\n  columnWrapperClassName: \"columnWrapperStyle\",\n  contentContainerClassName: \"contentContainerStyle\",\n});\n\n<FlatList\n  {...}\n  className=\"bg-black\"\n  ListHeaderComponentClassName=\"bg-black text-white\"\n  ListFooterComponentClassName=\"bg-black text-white\"\n  columnWrapperClassName=\"bg-black\"\n  contentContainerClassName=\"bg-black\"\n  indicatorClassName=\"bg-black\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo SDK 50+\nDESCRIPTION: Babel configuration for Expo SDK 50+ with NativeWind, setting jsxImportSource to nativewind and adding the NativeWind babel preset.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\"babel-preset-expo\", { jsxImportSource: \"nativewind\" }],\n      \"nativewind/babel\",\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Styles\nDESCRIPTION: Example of importing the generated NativeWind styles into a React Native application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/postcss.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// App.jsx\nimport \"./nativewind-output\";\n```\n\n----------------------------------------\n\nTITLE: Creating a CSS file with Tailwind directives\nDESCRIPTION: A basic CSS file that imports Tailwind's base, components, and utilities using directives. This file serves as the entry point for Tailwind CSS styles in a NativeWind project.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/_tailwind.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Setting up NativeWind TypeScript Types with Triple-Slash Directive\nDESCRIPTION: This snippet shows how to reference NativeWind types in a TypeScript definition file using a triple-slash directive. This enables type support for NativeWind's styling system in a React Native project through declaration merging.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/// <reference types=\"nativewind/types\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in React Native Component (JavaScript)\nDESCRIPTION: This snippet shows how to use custom colors in a React Native component. It imports the custom color palette and uses a specific shade in an ActivityIndicator.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/theme-values.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// MyActivityIndicator.js\nimport colors from \"./colors\";\n\nexport function MyActivityIndicator(props) {\n  return <ActivityIndicator size=\"small\" color={colors.tahiti.500} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NativeWind TypeScript Types\nDESCRIPTION: Adds type definitions for NativeWind by creating a declaration file with a triple-slash directive reference. This enables TypeScript support for NativeWind features in React Native projects.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"nativewind/types\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Style Output in NativeWindStyleSheet\nDESCRIPTION: Uses the setOutput method to configure different style output formats per platform. This example sets web to use CSS output and defaults other platforms to native styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/api/native-wind-style-sheet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nNativeWindStyleSheet.setOutput({\n  web: 'css',\n  default: 'native'\n})\n```\n\n----------------------------------------\n\nTITLE: Using NativeWind with Babel plugin in React Native\nDESCRIPTION: This example shows how to use NativeWind with the Babel plugin, which automatically wraps components in styled(), reducing boilerplate. It demonstrates a simple app layout using Tailwind CSS classes directly on React Native components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/home.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View } from \"react-native\";\n\nconst App = () => {\n  return (\n    <View className=\"flex-1 items-center justify-center\">\n      <Text className=\"text-slate-800\">Styling just works! 🎉</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Metro Config for Expo SDK 50+\nDESCRIPTION: Metro configuration for Expo SDK 50+ that includes NativeWind integration using the withNativeWind helper function.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require(\"expo/metro-config\");\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname)\n\nmodule.exports = withNativeWind(config, { input: './global.css' })\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Components with NativeWind cssInterop\nDESCRIPTION: Example showing how to configure react-native-svg components with cssInterop and implement a basic SVG drawing with NativeWind styling. Demonstrates setup for Svg, Circle, and Rect components with proper style property mapping.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/_rn-svg.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Svg, { Circle, Rect } from 'react-native-svg';\nimport { cssInterop } from 'nativewind'\n\ncssInterop(Svg, {\n  className: {\n    target: \"style\",\n    nativeStyleToProp: { width: true, height: true }\n  },\n});\ncssInterop(Circle, {\n  className: {\n    target: \"style\",\n    nativeStyleToProp: { width: true, height: true, stroke: true, strokeWidth: true, fill: true }\n  },\n});\ncssInterop(Rect, {\n  className: {\n    target: \"style\",\n    nativeStyleToProp: { width: true, height: true, stroke: true, strokeWidth: true, fill: true }\n  },\n});\n\nexport function SvgExample () {\n  return (\n    <View className=\"inset-0 items-center content-center\">\n      <Svg className=\"h-1/2 w-1/2\" viewBox=\"0 0 100 100\" >\n        <Circle cx=\"50\" cy=\"50\" r=\"45\" className=\"stroke-blue-500 stroke-2 fill-green-500\" />\n        <Rect x=\"15\" y=\"15\" className=\"w-16 h-16 stroke-red-500 stroke-2 fill-yellow-500\" />\n      </Svg>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hairline Width in NativeWind\nDESCRIPTION: This example demonstrates how to use the 'hairlineWidth' function in the Tailwind configuration to set a border width equivalent to StyleSheet.hairlineWidth in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { hairlineWidth } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: {\n        hairline: hairlineWidth(),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring jsxImportSource in TypeScript for Next.js SWC\nDESCRIPTION: TSConfig JSON configuration for Next.js with SWC compiler to set jsxImportSource to nativewind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"nativewind\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative className Passing Pattern\nDESCRIPTION: Shows how to pass className as a string using a different prop name between components when direct style passing isn't desired.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction A({ style }) {\n  return <B textClassName=\"font-bold\" />;\n}\n\nfunction B({ textClassName }) {\n  return <Text className={textClassName} />;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with styled()\nDESCRIPTION: Shows how to use the styled() helper with TypeScript, including proper type definitions and props handling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyButtonProps extends PressableProps {\n  textStyle: TextProps[\"style\"]\n}\n\nfunction MyButton({ textStyle, children, ...props }: MyButtonProps) {\n  return (\n    <Pressable {...props}>\n      <Text style={textStyle}>{children}</Text>\n    </Pressable>\n  )\n}\n\nexport default styled(MyButton, {\n  props: {\n    textStyle: true\n  }\n})\n\n<MyButton textStyle=\"font-bold\">This text will be bold</MyButton>\n```\n\n----------------------------------------\n\nTITLE: Parent State Styling with group-isolate in NativeWind\nDESCRIPTION: Shows how to use group-isolate for parent state styling, demonstrating bounded scope state management and nested group-isolate implementations.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/states.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, Pressable } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledPressable = styled(Pressable)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledPressable className={`\n      flex-1\n      items-center\n      justify-center\n      group-isolate\n    `}>\n      <StyledText className={`\n        text-slate-800\n        group-isolate-hover:text-blue-500\n        group-isolate-active:text-red-500\n      `}>\n        Hover and click me! 🎉\n      </StyledText>\n      <StyledPressable className={`\n        group-isolate\n        bg-slate-300\n        h-20\n      `}>\n        <StyledText className={`\n          text-slate-800\n          group-isolate-hover:text-blue-500\n          group-isolate-active:text-red-500\n        `}>\n          Child group-isolate have their own state!\n        </StyledText>\n      </StyledPressable>\n    </StyledPressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families in Tailwind Config for NativeWind\nDESCRIPTION: Configuration example showing how to extend the Tailwind theme with custom font families in NativeWind. This setup adds a custom font family named 'example' that can be used in styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-family.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        example: [\"ExampleFontFamily\"],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying NativeWind Installation in React Component\nDESCRIPTION: This snippet demonstrates how to use the verifyInstallation() function from NativeWind to confirm correct package installation. It should be called within a React component, not in the global scope.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { verifyInstallation } from 'nativewind';\n\nfunction App() {\n    // Ensure to call inside a component, not globally\n    verifyInstallation();\n\n    return (\n      // Your component JSX here...\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Font Sizing in React Native Component with NativeWind\nDESCRIPTION: This React Native component example shows how to apply the dynamic font sizing using NativeWind classes. It uses the 'text-root' class to set the context and applies the dynamic font size to a Text component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default App() {\n  return (\n    <Text className=\"text-root\">\n      <Text className=\"text-[--font-size-dynamic]\">I scale with screen width</Text>\n    </Text>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Automatic Style Compilation\nDESCRIPTION: This diff shows how to modify the package.json file to use concurrently for running both the Tailwind CLI (with watch mode) and the Expo development server simultaneously.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n-   \"start\": \"expo start\"\n+   \"start\": \"concurrently \\\"tailwindcss -i input.css --postcss postcss.config.js --watch\\\" \\\"expo start\\\"\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Metro Config for Expo SDK 49\nDESCRIPTION: Metro configuration for Expo SDK 49 that includes NativeWind integration with CSS enabled.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require(\"expo/metro-config\");\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname, { isCSSEnabled: true })\n\nmodule.exports = withNativeWind(config, { input: './global.css' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for NativeWind in React Native\nDESCRIPTION: This snippet shows the correct way to apply withNativeWind to the Metro configuration. It emphasizes that withNativeWind should be called on the final configuration to avoid overriding NativeWind's required settings.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/troubleshooting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconfig = withNativeWind(config);\n\n// ❌ You are overriding NativeWind required config!\nconfig.resolver = {};\n\nreturn config;\n```\n\n----------------------------------------\n\nTITLE: Using remapProps for FlatList in NativeWind\nDESCRIPTION: Example of how to use the new remapProps API in NativeWind v4 to map className props to style props for a FlatList component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nremapProps(FlatList, {\n  style: \"className\",\n  ListFooterComponentStyle: \"ListFooterComponentClassName\",\n  ListHeaderComponentStyle: \"ListHeaderComponentClassName\",\n  columnWrapperStyle: \"columnWrapperClassName\",\n  contentContainerStyle: \"contentContainerClassName\",\n});\n\n// Now you can use FlatList with the added props\n<FlatList className=\"w-10\" ListHeaderComponentClassName=\"bg-black\" />;\n```\n\n----------------------------------------\n\nTITLE: Rendering NPM Component with Dynamic Dependencies\nDESCRIPTION: This JSX code renders the NPM component with dynamically set properties. It includes the framework type and an array of dependencies, with conditional logic for the 'react-native-reanimated' version based on the framework type.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/_install.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<NPM\n  framework={props.framework}\n  deps={[\n    \"nativewind\",\n    \"tailwindcss@^3.4.17\",\n    props.framework === 'framework-less' ? 'react-native-reanimated' : 'react-native-reanimated@3.16.2',\n    \"react-native-safe-area-context\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Themes in React Native\nDESCRIPTION: This React Native component demonstrates how to use dynamic themes with NativeWind. It shows how to access theme values and change variables inline using the 'vars' function from NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vars } from 'nativewind'\n\nconst userTheme = vars({\n  '--color-values': '0 255 0',\n  '--color-rgb': 'rbg(0 0 255)'\n});\n\nexport default App() {\n  return (\n    <View>\n      <Text className=\"text-primary\">Access as a theme value</Text>\n      <Text className=\"text-[--color-rgb]\">Or the variable directly</Text>\n\n      {/* Variables can be changed inline */}\n      <View style={userTheme}>\n        <Text className=\"text-primary\">I am now green!</Text>\n        <Text className=\"text-[--color-rgb]\">I am now blue!</Text>\n      </View>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using calc() Function in CSS\nDESCRIPTION: Examples of using the calc() CSS function for performing calculations in property values, including variable-based calculations and nested function calls.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n// Can be used to calculate a value\n.element {\n  width: calc(var(--my-variable) - (20px + 2rem));\n}\n\n// Or part of a value\n.element {\n  background-color: hsl(\n    calc(var(--H) + 20),\n    calc(var(--S) - 10%),\n    calc(var(--L) + 30%)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using StyledComponent with React Native Text in TypeScript/JSX\nDESCRIPTION: This snippet demonstrates how to use the StyledComponent from NativeWind with a React Native Text component. It shows two equivalent ways of applying styles using 'tw' and 'className' props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/StyledComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\nimport { StyledComponent } from \"nativewind\";\n\nexport function MyComponent() {\n  return (\n    <>\n      <StyledComponent component={Text} tw=\"font-bold\">\n        Hello world\n      </StyledComponent>\n      <StyledComponent component={Text} className=\"font-bold\">\n        Hello world\n      </StyledComponent>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors for Tailwind (JavaScript)\nDESCRIPTION: This snippet shows how to define custom colors in a separate file for use with Tailwind CSS. It exports a color palette named 'tahiti' with various shades.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/theme-values.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// colors.js\nmodule.exports = {\n  'tahiti': {\n    100: '#cffafe',\n    200: '#a5f3fc',\n    300: '#67e8f9',\n    400: '#22d3ee',\n    500: '#06b6d4',\n    600: '#0891b2',\n    700: '#0e7490',\n    800: '#155e75',\n    900: '#164e63',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic NativeWind Component in React Native\nDESCRIPTION: Demonstrates how to create a simple React Native component using NativeWind for styling. It shows the usage of styled components and Tailwind CSS classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className=\"text-slate-800\">Try editing me! 🎉</StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using platformSelect for Platform-Specific Colors in NativeWind\nDESCRIPTION: Demonstrates how to use platformSelect in a Tailwind configuration to set different color values based on the platform (iOS, Android, or default). This helper is equivalent to React Native's Platform.select().\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { platformSelect } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        error: platformSelect({\n          ios: \"red\",\n          android: \"blue\",\n          default: \"green\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Theme Values in NativeWind\nDESCRIPTION: This snippet demonstrates how to use the 'platformSelect' function to provide platform-specific theme values in the Tailwind configuration file. It allows setting different color values for iOS, Android, and a default option.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { platformSelect } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        error: platformSelect({\n          // Now you can provide platform specific values\n          ios: \"red\"\n          android: \"blue\"\n          default: \"green\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tailwind CLI for NativeWind Output\nDESCRIPTION: This bash command demonstrates how to run the Tailwind CLI to generate the NativeWind output file using the specified PostCSS configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss -i input.css --postcss postcss.config.js\n```\n\n----------------------------------------\n\nTITLE: Handling State-based Styles with NativeWindStyleSheet in React Native\nDESCRIPTION: Shows how NativeWind handles state-based styles, such as platform-specific styles. It uses a bitmask system for quick runtime evaluation of style conditions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/how-it-works.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Text class=\"text-black ios:text-blue-500\" />;\n\nNativeWindStyleSheet.create({\n  styles: {\n    \"text-black\": {\n      color: \"#000\",\n    },\n    \"ios:text-blue-500\": {\n      color: \"rgb(59 130 246)\",\n    },\n  },\n  masks: {\n    \"ios:text-blue-500\": 8192,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Container Queries in NativeWind\nDESCRIPTION: Demonstrates the subset of CSS Container Query specification supported in NativeWind, including media-based queries and named container contexts.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n// The @container atRule with media based queries\n@container (min-width: 700px) {\n  .my-view {\n  }\n}\n\n// Named container contexts\n.my-container {\n  container-name: sidebar;\n}\n\n@container sidebar (min-width: 700px) {\n  .my-view {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for NativeWind in JavaScript\nDESCRIPTION: Basic Babel configuration to enable NativeWind plugin. This setup compiles Tailwind CSS styles and transforms components with 'className' attributes into 'styled' versions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/babel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [\"nativewind/babel\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Using remapProps for Components with Multiple Style Props in TSX\nDESCRIPTION: Demonstrates how to handle components with multiple style properties using remapProps to create corresponding className props for each style property.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// This component has two 'style' props\nfunction ThirdPartyComponent({ style, contentContainerStyle, ...props }) {\n  return (\n    <FlatList\n      style={style}\n      contentContainerStyle={contentContainerStyle}\n      {...props}\n    />\n  );\n}\n\n// Call this once at the entry point of your app\nremapProps(ThirdPartyComponent, {\n  className: \"style\",\n  contentContainerClassName: \"contentContainerStyle\",\n});\n\n// Now you can use the component with NativeWind\n<ThirdPartyComponent className=\"p-5\" contentContainerClassName=\"p-2\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Themes in Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to set up dynamic themes using CSS variables in a Tailwind configuration file. It creates a custom color that uses a CSS custom value and sets default values on the :root element.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      // Create a custom color that uses a CSS custom value\n      primary: \"rgb(var(--color-values) / <alpha-value>)\",\n    },\n  },\n  plugins: [\n    // Set a default value on the `:root` element\n    ({ addBase }) =>\n      addBase({\n        \":root\": {\n          \"--color-values\": \"255 0 0\",\n          \"--color-rgb\": \"rgb(255 0 0)\",\n        },\n      }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config with Custom Colors (JavaScript)\nDESCRIPTION: This snippet demonstrates how to extend the Tailwind configuration to include custom colors. It imports the custom colors and adds them to the theme's color palette.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/theme-values.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\nconst colors = require(\"./colors\")\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global CSS File with Tailwind Directives\nDESCRIPTION: Basic CSS file with the three core Tailwind directives required for NativeWind to function properly.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Non-Style Property Mapping with styled()\nDESCRIPTION: Demonstrates how to map style properties to component properties using styled(). Shows configuration for handling non-style properties like placeholderTextColor.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/styled.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst StyledWrapper = styled(Wrapper, {\n  props: {\n    placeholderTextColor: \"color\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families in Tailwind CSS for React Native\nDESCRIPTION: This snippet demonstrates how to extend the Tailwind CSS theme configuration to include custom font families and platform-specific font selections using NativeWind's platformSelect utility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-family.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { platformSelect } from \"nativewind/theme\";\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        example: [\"ExampleFontFamily\"],\n        system: platformSelect({\n          ios: \"Georgia\",\n          android: \"sans-serif\",\n          default: \"ui-sans-serif\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache for React Native/Expo Projects\nDESCRIPTION: Commands to clear the project cache in React Native or Expo projects to resolve issues with NativeWind styles not updating.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexpo start -c\n```\n\nLANGUAGE: shell\nCODE:\n```\nreact-native start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: SVG Component Styling with styled()\nDESCRIPTION: Shows how to use styled() with SVG components, demonstrating the use of classProps for handling both inline props and CSS classes. Particularly useful for react-native-svg components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/styled.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from \"nativewind\";\nimport { Svg, Rect } from \"react-native-svg\";\n\nconst StyledRect = styled(Rect, {\n  classProps: [\"fill\", \"stroke\"],\n});\n\nfunction MyStyledSvg({ stroke, ...props }) {\n  return (\n    <Svg height=\"100\" width=\"100\" {...props}>\n      <StyledRect\n        x=\"0\"\n        y=\"0\"\n        width=\"100\"\n        height=\"100\"\n        fill={fill}\n        stroke={stroke}\n      />\n    </Svg>\n  );\n}\n\n<MyStyledSvg fill=\"fill-black\" stroke=\"stroke-2 stroke-blue-500\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Aspect Ratio Components with NativeWind in React Native\nDESCRIPTION: Example demonstrating how to create styled views with different aspect ratios using NativeWind's className prop. Shows implementation of both square (1:1) and video (16:9) aspect ratios with a centered layout.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 justify-center items-center space-y-2\">\n      <StyledView className=\"w-24 aspect-square bg-slate-500\" />\n      <StyledView className=\"w-24 aspect-video bg-slate-500\" />\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Components with Style Attribute Props in TSX\nDESCRIPTION: Shows a component that manipulates style props directly or uses style attributes as props, which requires special handling with NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/*\n * This component will not work as expected with NativeWind\n *   - borderColor will not work as it is a prop\n *   - backgroundColor will not work as it is based on the style.color value\n */\nfunction ThirdPartyComponent({ borderColor, style, ...props }) {\n  // The background color is based on the style prop\n  const backgroundColor = style.color === \"white\" ? \"black\" : \"white\";\n  return (\n    <View\n      style={{\n        ...style,\n        borderColor,\n        backgroundColor,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for NativeWind in React Native\nDESCRIPTION: This snippet shows how to set up the babel.config.js file to include the NativeWind preset. It ensures that the JSX runtime is set to 'automatic' and the jsxImportSource is set to 'nativewind'.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = function (api) {\n  return {\n    presets: [\"<existing presets>\", \"nativewind/babel\"],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for NativeWind Transform-Only Mode\nDESCRIPTION: This snippet shows how to configure babel.config.js to use NativeWind in transform-only mode. It sets up the NativeWind Babel plugin with the 'transformOnly' option, allowing the framework to handle style compilation while Babel transforms components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/babel-transform-only.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [[\"nativewind/babel\", { mode: \"transformOnly\" }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Shadows with NativeWind in React Native\nDESCRIPTION: This example demonstrates how to apply box shadows to components using NativeWind in a React Native application. It showcases the use of styled components and className props for styling, including the application of shadows.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/box-shadow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledView className=\"h-[50vh] items-center justify-center shadow\">\n        <StyledText className=\"text-slate-800 shadow\">Try editing me! 🎉</StyledText>\n      </StyledView>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Styles in React Native App\nDESCRIPTION: This code snippet shows how to import the generated NativeWind styles into a React Native application file.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// App.jsx\n+ import \"./nativewind-output\"\n```\n\n----------------------------------------\n\nTITLE: Implementing State-Based Styling in React Native with StyleSheet\nDESCRIPTION: This snippet demonstrates a framework-less React Native component that changes backgroundColor based on UI state, color scheme, and branding using StyleSheet. It showcases the complexity of managing multiple style states manually.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/universal-system.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/*\n  This is a framework-less React Native component that changes backgroundColor based upon\n  - UI State\n  - Color scheme\n  - Branding\n*/\nimport { Pressable } from \"react-native\";\nimport { colors } from \"./colors\";\n\nexport function MyButton(props) {\n  const pressableStyles = useCallback((pressed) => {\n    return pressed\n      ? styles[`pressable:active:${colorScheme}`]\n      : styles[`pressable:${colorScheme}`]\n  }, [colorScheme])\n\n  return (\n    <Pressable styles={pressableStyles} {...props} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  \"pressable:light\": { backgroundColor: colors[\"brand-600\"] },\n  \"pressable:active:light\": { backgroundColor: colors[\"brand-700\"] }\n  \"pressable:dark\": { backgroundColor: colors[\"brand-300\"] },\n  \"pressable:active:dark\": { backgroundColor: colors[\"brand-400\"] }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind with NativeWind Plugin\nDESCRIPTION: Configuration for adding the NativeWind plugin to tailwind.config.js for web applications. This enables CSS styling for React Native Web components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/postcss.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\n+ const nativewind = require(\"nativewind/tailwind/css\")\n+\nmodule.exports = {\n  content: [\n    './App.{js,ts,jsx,tsx}',\n  ],\n+ plugins: [nativewind()],\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Dynamic Class Name Usage\nDESCRIPTION: Shows the proper way to handle conditional class names in NativeWind, avoiding dynamic class name construction which is not supported by TailwindCSS.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <Text className=\"text-{{ error ? 'red' : 'green' }}-600\"></Text>\n+ <Text className=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></Text>\n```\n\n----------------------------------------\n\nTITLE: Configuring NativeWind Babel Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the NativeWind Babel plugin in a babel.config.js file. It shows how to set the plugin and specify a custom Tailwind configuration file.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/babel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [\n    [\"nativewind/babel\", { tailwindConfig: \"./tailwind.native.config.js\" }],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Variables with NativeWind\nDESCRIPTION: Example showing how to use CSS variables in React Native components with NativeWind, including inline variable definitions and using the vars() helper function.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// style: { color: \"red\" }\n<Text className=\"text-custom [--my-custom-color:red]\">\n\n// style: { color: \"green\" }\n<View style={vars({ \"--my-custom-color\": \"green\" })}>\n  <Text className=\"text-custom\">\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeAreaProvider in React Native\nDESCRIPTION: Setup example showing how to wrap a React Native app with SafeAreaProvider to enable safe area insets. Uses react-native-safe-area-context package and applies safe area padding through className.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/new-concepts/safe-area-insets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from \"react-native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nexport function MyApp(props) {\n  // Make sure you have the SafeAreaProvider at the root of your app\n  return (\n    <SafeAreaProvider>\n      <View className=\"p-safe\" {...props} />\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Divide Width in React Native with NativeWind\nDESCRIPTION: This snippet demonstrates how NativeWind handles divide width in React Native, which lacks native support for child selectors. The 'styled' component clones its children and appends child styles to achieve the desired effect.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/divide-width.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// With this code\n<View className=\"divide-x-2\">\n  <Text>0</Text>\n  <Text>1</Text>\n  <Text>2</Text>\n</View>\n\n// It will output as this\n<View>\n  <Text>0</Text>\n  <Text style={{ borderLeft: 2 }}>1</Text>\n  <Text style={{ borderLeft: 2 }}>2</Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Global Declaration for Third-Party Components in TSX\nDESCRIPTION: Example of extending TypeScript declarations for third-party components to include NativeWind's className props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module \"<3rd party package>\" {\n  interface 3rdPartyComponentProps {\n    customClassName?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Style Props with cssInterop in TSX\nDESCRIPTION: Shows a potential but cumbersome approach to handling multiple style props using separate className mappings.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// This is possible\ncssInterop(ThirdPartyComponent, {\n  labelColorClassName: {\n    target: false\n    nativeStyleToProps: { color: 'labelColor' }\n  }\n  inputColorClassName: {\n    target: false\n    nativeStyleToProps: { color: 'inputColor' }\n  }\n})\n\nfunction Wrapper() {\n  // Need to create a new className for each prop\n  const labelStyle = cva('color-black')\n  const inputStyle = cva('color-black')\n\n  return (\n    <ThirdPartyComponent\n      labelColorClassName={labelStyle}\n      inputColorClassName={inputStyle}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Styles with NativeWindStyleSheet in React Native\nDESCRIPTION: Demonstrates how NativeWind converts a simple Tailwind class to a React Native StyleSheet object. The static styles are cached using StyleSheet.create() under the hood.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/how-it-works.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text class=\"text-black\" />;\n\nNativeWindStyleSheet.create({\n  \"text-black\": {\n    color: \"#000\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for NativeWind in Native Projects\nDESCRIPTION: This code sets up the PostCSS configuration for native projects using NativeWind. It includes both tailwindcss and nativewind/postcss plugins.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: [require(\"tailwindcss\"), require(\"nativewind/postcss\")],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSX Transform for NativeWind in TypeScript\nDESCRIPTION: This code snippet shows how NativeWind implements a custom JSX transform to handle styling. It uses a WeakMap to store transform functions for different component types, allowing for efficient style processing only when necessary.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/how-it-works.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport ReactJSXRuntime from \"react/jsx-runtime\";\nimport { View, Text } from \"react-native\";\n\nconst transforms = new WeakMap<ReactComponent, TransformFn>();\n\ntransforms.set(View /* NativeWind runtime */);\ntransforms.set(Text /* NativeWind runtime */);\n\nexport function jsx(type, props, key) {\n  const transform = transforms.get(type);\n\n  if (transform) {\n    return transform(type, props, key);\n  } else {\n    return ReactJSXRuntime.jsx(type, props, key);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for Custom ClassNames in NativeWind\nDESCRIPTION: VS Code configuration example showing how to add custom className attributes for better editor support with NativeWind. This setup enables autocomplete and validation for both standard and custom className props like 'headerClassName'.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/editor-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  (...)\n  \"tailwindCSS.classAttributes\": [\n    \"class\",\n    \"className\",\n    \"headerClassName\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NativeWind Plugin to Tailwind Config for Native\nDESCRIPTION: This code modifies the tailwind.config.js file to include the NativeWind plugin for native React Native projects. It adds the nativewind plugin from the native-specific package.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\n+ const nativewind = require(\"nativewind/tailwind/native\")\n+\nmodule.exports = {\n  content: [\n    './App.{js,ts,jsx,tsx}',\n  ],\n+ plugins: [nativewind()],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Units with NativeWindStyleSheet in React Native\nDESCRIPTION: Demonstrates how NativeWind handles dynamic units like 'vw' (viewport width) in React Native. It uses topics for subscriptions and a units object to define the unit type.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/how-it-works.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<View class=\"w-screen\" />;\n\nNativeWindStyleSheet.create({\n  styles: {\n    \"w-screen\": {\n      width: 100,\n    },\n  },\n  topics: {\n    \"w-screen\": [\"width\"],\n  },\n  units: {\n    \"w-screen\": { width: \"vw\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Config for NativeWind Output\nDESCRIPTION: This snippet shows how to create a PostCSS configuration file that specifies the output file for NativeWind styles in native projects.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    \"nativewind/postcss\": {\n      output: \"nativewind-output.js\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rounding to Nearest Pixel in NativeWind\nDESCRIPTION: This example shows how to use the 'roundToNearestPixel' function in the Tailwind configuration to round sizes to the nearest pixel, equivalent to PixelRatio.roundToNearestPixel() in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { roundToNearestPixel } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      size: {\n        custom: roundToNearestPixel(8.4)\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Accessible className Prop in NativeWind v4\nDESCRIPTION: Example showing how components can now access the className prop directly, eliminating the need to wrap components. This fixes a major limitation in previous versions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// There is no need to wrap this component! `className` is accessible inside the component!\nexport function MyText({ className, ...props }: TextProps) {\n  return <Text className={`text-black ${className}`} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useColorScheme() Hook in React Native with NativeWind\nDESCRIPTION: This snippet demonstrates how to use the useColorScheme() hook from NativeWind in a React Native component. It shows how to access the current color scheme and toggle between light and dark modes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/use-color-scheme.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useColorScheme } from \"nativewind\";\nimport { Text } from \"react-native\";\n\nfunction MyComponent() {\n  const { colorScheme, setColorScheme } = useColorScheme();\n\n  return (\n    <Text\n      onPress={() => setColorScheme(colorScheme === \"light\" ? \"dark\" : \"light\")}\n    >\n      {`The color scheme is ${colorScheme}`}\n    </Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPixelSizeForLayoutSize for Pixel-Perfect Layouts\nDESCRIPTION: Shows how to use getPixelSizeForLayoutSize to convert a layout size to pixel size based on pixel density. This is equivalent to React Native's PixelRatio.getPixelSizeForLayoutSize().\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getPixelSizeForLayoutSize } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      size: {\n        custom: getPixelSizeForLayoutSize(2),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enhanced Theme Functions in NativeWind\nDESCRIPTION: Example of the improved theme functions in NativeWind v4, which now support nested functions for platform-specific styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { platformSelect, platformColor, pixelRatioSelect, hairlineWidth } from \"nativewind/theme\"\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        brand: platformSelect({\n          ios: platformColor('label'),\n          android: platformColor('?android:attr/textColor')\n          default: \"var(--brand-color, black)\n        })\n      }\n      borderWidth: {\n        \"hw\": pixelRatioSelect({\n          1: hairlineWidth(),\n          1.5: 1,\n          default: hairlineWidth()\n        })\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Manual Dark Mode Toggle on Web\nDESCRIPTION: This configuration snippet shows how to set up Tailwind CSS for manual dark mode toggling on web applications. It uses the 'class' strategy in the darkMode setting of the Tailwind configuration file.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/core-concepts/dark-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nmodule.exports = {\n  darkMode: 'class',\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complex TypeScript Declarations for React Native Components in TSX\nDESCRIPTION: Advanced example showing how to extend React Native's built-in component types to support NativeWind className props across multiple interfaces.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ScrollViewProps,\n  ScrollViewPropsAndroid,\n  ScrollViewPropsIOS,\n  Touchable,\n  VirtualizedListProps,\n} from \"react-native\";\n\ndeclare module \"@react-native/virtualized-lists\" {\n  export interface VirtualizedListWithoutRenderItemProps<ItemT>\n    extends ScrollViewProps {\n    ListFooterComponentClassName?: string;\n    ListHeaderComponentClassName?: string;\n  }\n}\n\ndeclare module \"react-native\" {\n  interface ScrollViewProps\n    extends ViewProps,\n      ScrollViewPropsIOS,\n      ScrollViewPropsAndroid,\n      Touchable {\n    contentContainerClassName?: string;\n    indicatorClassName?: string;\n  }\n  interface FlatListProps<ItemT> extends VirtualizedListProps<ItemT> {\n    columnWrapperClassName?: string;\n  }\n  interface ViewProps {\n    className?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Style Processing for NativeWind in TypeScript\nDESCRIPTION: This code snippet illustrates how NativeWind processes dynamic styles, particularly focusing on media queries. It demonstrates the logic for applying styles based on device dimensions and handling conditional styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/how-it-works.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = {\n  \"md:text-red\": {\n    style: { color: \"red\" },\n    conditions: {\n      media: {\n        minWidth: 768,\n        maxWidth: 1024,\n      },\n    },\n  },\n};\n\nconst getStyles = (classNames) =>\n  classNames\n    .split(\" \")\n    .map((className) => styles[className])\n    .sort(specificityCompareFn)\n    .filter((style) => {\n      if (style.conditions) {\n        if (style.conditions.media) {\n          const { minWidth, maxWidth } = style.conditions.media;\n\n          if (minWidth && maxWidth) {\n            return (\n              Dimensions.get(\"window\").width >= minWidth &&\n              Dimensions.get(\"window\").width <= maxWidth\n            );\n          } else if (minWidth) {\n            return Dimensions.get(\"window\").width >= minWidth;\n          } else if (maxWidth) {\n            return Dimensions.get(\"window\").width <= maxWidth;\n          }\n        }\n      }\n\n      return true;\n    });\n```\n\n----------------------------------------\n\nTITLE: Merging NativeWind Classes with Inline Styles\nDESCRIPTION: Demonstrates how NativeWind handles the combination of className styles with inline styles. This example shows how inline styles will override NativeWind styles due to style specificity.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/custom-components.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Text className=\"text-white\" style={{ color: \"black\" }} /> // Will be black\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind CSS Theme with Dynamic Font Size in JavaScript\nDESCRIPTION: This snippet shows how to extend the Tailwind CSS theme configuration to include a dynamic font size using a CSS variable. It adds a new 'dynamic' font size to the theme.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      fontSize: {\n        dynamic: \"var(--font-size-dynamic)\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using pixelRatio for Pixel Density-Aware Border Width\nDESCRIPTION: Shows how to use pixelRatio to create pixel density-aware measurements in a Tailwind configuration. This is equivalent to React Native's PixelRatio.get(), optionally multiplied by a provided value.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { pixelRatio } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: {\n        number: pixelRatio(2),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Including Tailwind Directives in Global CSS for NativeWind\nDESCRIPTION: This CSS snippet shows the necessary Tailwind directives that should be included in the global CSS file for NativeWind to function properly. It includes the base, components, and utilities layers.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/troubleshooting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Platform-Specific Style Interpretation\nDESCRIPTION: This code snippet demonstrates how different platforms (Native and Web) interpret style specificity rules differently, leading to inconsistent rendering of text color.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/style-specificity.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Native has red text\n<Text style={{ color: 'black' }, { color: 'red' }} />\n\n// Web has black text\n<Text className=\"text-red-500\" style={{ color: 'black'}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled SVG Rectangle with NativeWind Stroke Width\nDESCRIPTION: Creates a styled SVG rectangle component using NativeWind's styled utility. The component accepts stroke width styling through class props and demonstrates integration with react-native-svg. The StyledRect component is wrapped in an SVG container with configurable stroke properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/svg/stroke-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from \"nativewind\";\nimport { Svg, Rect } from \"react-native-svg\";\n\nconst StyledRect = styled(Rect, { classProps: [\"fill\", \"stroke\"] });\n\nfunction MyStyledSvg({ stroke, ...props }) {\n  return (\n    <Svg height=\"100\" width=\"100\" {...props}>\n      <StyledRect x=\"0\" y=\"0\" width=\"100\" height=\"100\" stroke={stroke} />\n    </Svg>\n  );\n}\n\n<MyStyledSvg stroke=\"stroke-1\" />;\n```\n\n----------------------------------------\n\nTITLE: Supported env() Function Values in NativeWind\nDESCRIPTION: List of the supported environment variables accessible through the env() CSS function in NativeWind, focusing on safe area insets.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nenv(safe-area-inset-top);\nenv(safe-area-inset-bottom);\nenv(safe-area-inset-left);\nenv(safe-area-inset-right);\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled SVG Stroke in React Native with NativeWind\nDESCRIPTION: Creates a styled SVG component with customizable stroke properties using NativeWind. The example shows how to create a styled rectangle component with stroke styling capabilities, demonstrating the integration between react-native-svg and NativeWind's styling system.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/svg/stroke.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from \"nativewind\";\nimport { Svg, Rect } from \"react-native-svg\";\n\nconst StyledRect = styled(Rect, { classProps: [\"fill\", \"stroke\"] });\n\nfunction MyStyledSvg({ stroke, ...props }) {\n  return (\n    <Svg height=\"100\" width=\"100\" {...props}>\n      <StyledRect x=\"0\" y=\"0\" width=\"100\" height=\"100\" stroke={stroke} />\n    </Svg>\n  );\n}\n\n<MyStyledSvg stroke=\"stroke-blue-500\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring rem Support in NativeWind\nDESCRIPTION: Shows how to configure rem unit support in NativeWind v4, with options to inline rem values or set custom rem values at runtime.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default withNativeWind(config, {\n  input: \"global.css\",\n  inlineNativeRem: false // Disable rem inlining\n  // OR\n  inlineNativeRem: 16 // Set a custom rem value\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Important Flag in Tailwind Config\nDESCRIPTION: Tailwind CSS configuration change to increase style specificity for Next.js projects by setting the important flag.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,jsx,ts,tsx}',\n  ],\n  plugins: [require('nativewind/tailwind/css')],\n+ important: 'html',\n  theme: {\n    extend: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: NativeWind Gap Basic Implementation Example\nDESCRIPTION: Demonstrates how NativeWind transforms gap className into margin-based layout in React Native, showing the input JSX and resulting output with margins.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/gap.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// With this code\n<View className=\"gap-4\">\n  <Text>0</Text>\n  <Text>1</Text>\n  <Text>2</Text>\n</View>\n\n// It will output as this\n<View style={{ marginLeft: -4, marginTop: -4 }}>\n    <Text style={{ marginLeft: 4, marginTop: 4  }}>0</Text>\n    <Text style={{ marginLeft: 4, marginTop: 4  }}>1</Text>\n    <Text style={{ marginLeft: 4, marginTop: 4  }}>2</Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Font Sizing with CSS Media Queries\nDESCRIPTION: This CSS snippet demonstrates how to create responsive font sizing using media queries and CSS variables. It defines different font sizes for various screen widths using the 'text-root' class.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@media (min-width: 640px) {\n  .text-root {\n    --font-size-dynamic: 16px;\n  }\n}\n\n@media (min-width: 768px) {\n  .text-root {\n    --font-size-dynamic: 18px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Styles with NativeWindStyleSheet in React Native\nDESCRIPTION: Shows how NativeWind handles dynamic styles like the 'container' class, which has responsive variations. It uses atRules to define media queries and topics for style subscriptions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/how-it-works.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View class=\"container\" />;\n\nNativeWindStyleSheet.create({\n  styles: {\n    container: {\n      width: \"100%\",\n    },\n    \"container@0\": {\n      maxWidth: 640,\n    },\n    \"container@1\": {\n      maxWidth: 768,\n    },\n    \"container@2\": {\n      maxWidth: 1024,\n    },\n    \"container@3\": {\n      maxWidth: 1280,\n    },\n    \"container@4\": {\n      maxWidth: 1536,\n    },\n    \"font-bold\": {\n      fontWeight: \"700\",\n    },\n  },\n  atRules: {\n    container: [\n      [[\"media\", \"(min-width: 640px)\"]],\n      [[\"media\", \"(min-width: 768px)\"]],\n      [[\"media\", \"(min-width: 1024px)\"]],\n      [[\"media\", \"(min-width: 1280px)\"]],\n      [[\"media\", \"(min-width: 1536px)\"]],\n    ],\n  },\n  topics: {\n    container: [\"width\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables in Tailwind Configuration\nDESCRIPTION: Example of defining CSS variables in the Tailwind configuration file as theme values that can be used throughout the application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// You can define them as a theme value\nmodule.exports = {\n  theme: {\n    extend: [\n      colors: {\n        brand: \"var(--brand-color)\"\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NativeWind Babel Preset to Existing Config\nDESCRIPTION: Diff showing how to add the NativeWind babel preset to an existing babel configuration for framework-less React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n- presets: ['<existing presets>'],\n+ presets: ['<existing presets>', 'nativewind/babel'],\n};\n```\n\n----------------------------------------\n\nTITLE: Testing JSX Runtime Configuration with NativeWind className in TSX\nDESCRIPTION: A code snippet to verify if the JSX runtime is correctly set to 'automatic' with 'jsxImportSource' set to 'nativewind' by using the className prop to style a blue square.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/other-bundlers.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View className=\"w-10 h-10 bg-blue-500\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Flex Wrap Classes in Markdown/JSX\nDESCRIPTION: This snippet renders the Compatibility component, passing an array of supported flex wrap classes as a prop. This component likely displays compatibility information for these classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-wrap.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"flex-wrap\",\n\"flex-wrap-reverse\",\n\"flex-nowrap\"\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling backgroundOpacity in Tailwind Configuration for NativeWind\nDESCRIPTION: This snippet shows how to enable the backgroundOpacity core plugin in your tailwind.config.js file. By default, NativeWind disables backgroundOpacity for performance reasons, but this configuration allows dynamic background opacity changes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* ...  */\n  corePlugins: {\n    backgroundOpacity: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Positioning Layout with NativeWind and React Native\nDESCRIPTION: Demonstrates creating a grid layout using absolute positioning and inset utilities in NativeWind. Shows how to use styled components with various position-related className combinations including top, right, bottom, left, and inset properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/top-right-bottom-left.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\n\nfunction Box({ className, children }) {\n  return (\n    <StyledView className=\"relative w-1/3 bg-violet-300\">\n      <StyledView className={`\n        absolute\n        bg-violet-600\n        justify-center\n        items-center\n        ${className}\n      `}>\n        {children}\n      </StyledView>\n    </StyledView>\n  )\n\n}\n\nconst App = () => {\n  return (\n    <StyledView className=\"w-screen h-screen shrink flex-row flex-wrap justify-between\">\n      <Box className=\"left-0 top-0 h-1/2 w-1/2\">01</Box>\n      <Box className=\"left-0 inset-x-0 h-1/2\">02</Box>\n      <Box className=\"top-0 right-0 h-1/2 w-1/2\">03</Box>\n      <Box className=\"inset-y-0 left-0 w-1/2\">04</Box>\n      <Box className=\"inset-0\">05</Box>\n      <Box className=\"inset-y-0 right-0 w-1/2\">06</Box>\n      <Box className=\"bottom-0 left-0 h-1/2 w-1/2\">07</Box>\n      <Box className=\"inset-x-0 bottom-0 h-1/2\">08</Box>\n      <Box className=\"bottom-0 right-0 h-1/2 w-1/2\">09</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom CSS Classes in Components\nDESCRIPTION: Example of using custom CSS classes defined in a global stylesheet within React Native components in NativeWind v4.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from \"react-native\";\n\nexport function Test() {\n  return (\n    <View className=\"container\">\n      <Text className=\"my-class\">Hello world!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline CSS Variables with NativeWind\nDESCRIPTION: Demonstrates how to define and use CSS variables inline within components using the vars utility function provided by NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vars } from \"nativewind\";\n<View style={vars({ \"--brand-color\": \"red\" })}>\n  <Text className=\"text-brand\">Red text!</Text>\n</View>;\n```\n\n----------------------------------------\n\nTITLE: Importing Usage and Compatibility Components in JSX\nDESCRIPTION: Imports two MDX components for documentation - _compatibility.mdx and _usage.mdx which are referenced later in the document.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overflow.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for NativeWind in NX Monorepo\nDESCRIPTION: This snippet shows how to modify the metro.config.js file to integrate NativeWind with an NX monorepo. It demonstrates using the withNativeWind function as part of a promise chain after the existing NX Metro configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/using-with-monorepos.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withNativeWind } = require(\"nativewind/metro\");\n\n// ... existing Nx configuration\n\nmodule.exports = withNxMetro(mergeConfig(defaultConfig, customConfig), {\n  // ... existing Nx config\n}).then((config) => withNativeWind(config, { input: \"./global.css\" }));\n```\n\n----------------------------------------\n\nTITLE: Using var() Function in Tailwind Configuration\nDESCRIPTION: Example of using the var() CSS function within a Tailwind configuration file to define custom colors using CSS variables.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      color: {\n        custom: \"var(--my-custom-color)\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Web Safe Area Height Configuration\nDESCRIPTION: CSS configuration for proper height rendering of safe area utilities on web platforms, particularly for Google Chrome compatibility. Sets up -webkit-fill-available height on html, body, and root elements.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/new-concepts/safe-area-insets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    height: -webkit-fill-available;\n  }\n\n  body {\n    height: -webkit-fill-available;\n  }\n\n  #root {\n    height: -webkit-fill-available;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for NativeWind Compile-Only Mode\nDESCRIPTION: Babel configuration setup that enables compile-only mode for NativeWind, optimizing build time by skipping the transform step when using styled() wrapper exclusively.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/babel-compile-only.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [[\"nativewind/babel\", { mode: \"compileOnly\" }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Component with NativeWind in React Native\nDESCRIPTION: Example of creating a responsive container component using NativeWind's styled components with React Native. The code demonstrates styling a container with height, justification, background color, and text alignment properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/container.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"container h-12 justify-center bg-slate-300 items-center\">\n      <StyledText className=\"text-slate-800\">Try resizing me! 🎉</StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with Babel Plugin in React Native\nDESCRIPTION: Shows how to create a styled component using the Babel plugin, which enables immediate use of Tailwind CSS classes without extra setup.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/overview/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\nexport function BoldText(props) {\n  return <Text className=\"font-bold\" {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Native Web Setup with NativeWind in TSX\nDESCRIPTION: A code snippet to test if React Native Web is properly configured with NativeWind by creating a blue square using the $$css property and test attribute for styling.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/other-bundlers.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<View style={{ $$css: true, test: \"w-10 h-10 bg-blue-500\" }} />\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Implementation\nDESCRIPTION: Renders a Compatibility component with supported and unsupported max-width utility classes for NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/max-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"max-w-0\",\n    \"max-w-[n]\",\n    \"max-w-{n}\",\n    \"max-w-full\",\n    \"max-w-screen-sm\",\n    \"max-w-screen-md\",\n    \"max-w-screen-lg\",\n    \"max-w-screen-xl\",\n    \"max-w-screen-2xl\",\n  ]}\n  none={[\"max-w-min\", \"max-w-max\", \"max-w-fit\", \"max-w-prose\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Opacity in NativeWind Configuration\nDESCRIPTION: This snippet shows how to enable the textOpacity core plugin in the Tailwind CSS configuration for NativeWind. By default, this plugin is disabled for performance reasons, but it can be enabled to allow dynamic text opacity changes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* ...  */\n  corePlugin: {\n    textOpacity: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building NativeWind\nDESCRIPTION: Commands for installing project dependencies and building the project locally.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Row Layout with NativeWind in React Native\nDESCRIPTION: This snippet demonstrates how to create a horizontal layout using flex-row in NativeWind. It creates a StyledView with flex-row class and renders three Box components inside it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-direction.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex text-center h-14 w-14 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-row h-screen space-x-2\">\n      <Box>01</Box>\n      <Box>02</Box>\n      <Box>03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: Renders the imported Usage component to display overflow usage documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overflow.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Implementing Device-Specific Theming in Tailwind\nDESCRIPTION: This snippet shows how to use various device-specific theming functions from NativeWind, such as hairlineWidth, pixelRatio, fontScale, and their respective select functions in a Tailwind configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/themes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { hairlineWidth, pixelRatio, pixelRatioSelect, fontScale, fontScaleSelect, getPixelSizeForLayoutSize, roundToNearestPixel } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: {\n        hairline: hairlineWidth(),\n        number: pixelRatio(2),\n        custom: pixelRatioSelect({\n          2: 1,\n          default: hairlineWidth(),\n        }),\n      },\n      fontSize: {\n        custom: fontScale(2),\n        adaptive: fontScaleSelect({\n          2: 14,\n          default: 16,\n        }),\n      },\n      size: {\n        custom: getPixelSizeForLayoutSize(2),\n        rounded: roundToNearestPixel(8.4)\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Container Queries with NativeWind\nDESCRIPTION: Example of using container queries in NativeWind, which allow styling based on the size of the parent container rather than the viewport.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<View class=\"@container\">\n  <Text class=\"@lg:underline\">\n    <!-- This text will be underlined when the container is larger than `32rem` -->\n  </Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Support in NativeWind\nDESCRIPTION: Demonstrates the experimental custom CSS support in NativeWind v4, which allows using Tailwind CSS alongside custom styles including media queries.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.my-class {\n  @apply text-base text-black\n}\n\n// Media queries are supported\n@media (prefers-color-scheme: dark) {\n  .my-class {\n    @apply text-base text-white\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Native Platform\nDESCRIPTION: Configuration for PostCSS in native applications using NativeWind and Tailwind CSS plugins.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/postcss.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: [require(\"tailwindcss\"), [require(\"nativewind/postcss\")]],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Between Elements in React Native with NativeWind\nDESCRIPTION: Demonstrates how NativeWind transforms space-between className utilities into React Native styles. The example shows how child elements receive appropriate margin styles automatically.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/spacing/space-between.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// With this code\n<View className=\"space-x-1\">\n  <Text>0</Text>\n  <Text>1</Text>\n  <Text>2</Text>\n</View>\n\n// It will output as this\n<View>\n  <Text>0</Text>\n  <Text style={{ marginLeft: 4 }}>1</Text>\n  <Text style={{ marginLeft: 4 }}>2</Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Redirecting Debug Output to File on Mac/Linux\nDESCRIPTION: This bash command enables NativeWind debug mode and redirects the output to a file named output.log for later analysis.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=nativewind script output.log <start-command>\n```\n\n----------------------------------------\n\nTITLE: calc() Function Limitations in NativeWind\nDESCRIPTION: Examples demonstrating the limitations of using calc() in NativeWind, specifically regarding mixing units and the constraints on what can be calculated.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.element {\n  // ❌ This mixes `numerical` and `percentage` units\n  width: calc(100% - 20px);\n}\n\n.element {\n  // ❌ This mixes `numerical` and `percentage` units\n  --width: 100%;\n  width: calc(var(--width) - 20px);\n}\n\n.element {\n  // ✅  This only uses `numerical` units\n  --width: 100rem;\n  width: calc(var(--width) - 20px);\n}\n\n.element {\n  // ✅  This only uses `percentage` units\n  --width: 100%;\n  width: calc(var(--width) - 20%);\n}\n```\n\n----------------------------------------\n\nTITLE: NativeWind Max-Height Component JSX Implementation\nDESCRIPTION: JSX component implementation showing supported and unsupported max-height values in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/max-height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"max-h-0\",\n    \"max-h-[n]\",\n    \"max-h-{n}\",\n    \"max-h-full\",\n    \"max-h-screen\",\n  ]}\n  none={[\"max-h-min\", \"max-h-max\", \"max-h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline Rem in Metro Config for NativeWind\nDESCRIPTION: This Metro configuration example shows how to disable the inline rem behavior in NativeWind. It sets the 'inlineRem' option to false using the 'withNativeWind' function.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withNativeWind({\n  inline: \"./global.css\"\n  inlineRem: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Border Width\nDESCRIPTION: This code renders the Compatibility component with a list of supported border width utility classes in NativeWind. It includes various border width classes for different sides and dimensions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-width.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"border\",\n\"border-{n}\",\n\"border-[n]\",\n\"border-x\",\n\"border-x-{n}\",\n\"border-x-[n]\",\n\"border-y\",\n\"border-y-{n}\",\n\"border-y-[n]\",\n\"border-t\",\n\"border-t-{n}\",\n\"border-t-[n]\",\n\"border-r\",\n\"border-r-{n}\",\n\"border-r-[n]\",\n\"border-b\",\n\"border-b-{n}\",\n\"border-b-[n]\",\n\"border-l\",\n\"border-l-{n}\",\n\"border-l-[n]\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Flex Grow in React Native with NativeWind\nDESCRIPTION: Example showing how to use the grow utility class to allow a middle element to expand while keeping other elements at their default size. Uses styled components from NativeWind with React Native View and Text components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-grow.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex h-14 w-2/5 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-1 flex-col justify-center items-center\">\n      <Box className=\"flex-none bg-fuchsia-200\">01</Box>\n      <Box className=\"grow\">02</Box>\n      <Box className=\"flex-none bg-fuchsia-200\">03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitions in NativeWind\nDESCRIPTION: Shows the experimental transition support in NativeWind v4, allowing for smooth style changes based on state or theme.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// The color will transition over 150ms when the color scheme changes\n<Text className=\"transition-colors text-black dark:text-white\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Overflow Compatibility Component\nDESCRIPTION: JSX component showing supported overflow properties and unsupported overflow utilities in NativeWind\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/overflow.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"visible\", \"hidden\", \"scroll\" ]}\nnone={[\n\"overflow-auto\",\n\"overflow-clip\",\n\"overflow-x-auto\",\n\"overflow-y-auto\",\n\"overflow-x-hidden\",\n\"overflow-y-hidden\",\n\"overflow-x-clip\",\n\"overflow-y-clip\",\n\"overflow-x-visible\",\n\"overflow-y-visible\",\n\"overflow-x-scroll\",\n\"overflow-y-scroll\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring font family defaults in Tailwind config for NativeWind\nDESCRIPTION: Example of how to set default font families for different platforms using the platformSelect function in the Tailwind configuration for NativeWind v4.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { platformSelect } from \"nativewind/theme\"\n\nmodule.exports = {\n  theme: {\n    fontFamily: {\n      sans: platformSelect({\n        android: 'san-serif',\n        ios: 'system font',\n        web: 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"'\n      }),\n      serif: platformSelect({\n        android: 'serif',\n        ios: 'Georgia'\n        web: 'ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif'\n      }),\n      mono: platformSelect({\n        android: 'mono',\n        ios: 'Courier New'\n        web: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace'\n      }),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Link to Tailwind CSS Documentation in JSX\nDESCRIPTION: This JSX snippet creates a paragraph with a dynamic link to the Tailwind CSS documentation. It uses the useLocation hook to extract the current path, splits it, and constructs a URL pointing to the corresponding Tailwind CSS documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_usage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<p>\n  Please refer to the{\" \"}\n  <a\n    href={`https://tailwindcss.com/docs/${useLocation()\n      .pathname.split(\"/\")\n      .pop()}`}\n  >\n    documentation on the Tailwind CSS website\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Generating Tailwind CSS Output File\nDESCRIPTION: Command to generate a CSS output file containing all Tailwind styles for the project, useful for verifying configuration and expected styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx tailwind -o output.css\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prop Picking Limitations with Accessibility Features in JSX\nDESCRIPTION: Shows how components that pick props can limit functionality beyond NativeWind, using the aria-label accessibility feature as an example.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ThirdPartyComponent({ style }) {\n  return <View style={style} />;\n}\n\n// aria-label was added in 0.71, but this component will not work with it!\n<ThirdPartyComponent aria-label=\"My Label\" />;\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting JSX Transform Options in Babel Config\nDESCRIPTION: This code demonstrates how to explicitly set the options for @babel/plugin-transform-react-jsx in the babel.config.js file. This is useful when another preset or plugin is overriding the jsxImportSource.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/troubleshooting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = function (api) {\n  return {\n    presets: [\"nativewind/babel\"],\n    plugins: [\n      \"<plugin-causing-issue>\",\n+     [\n+       \"@babel/plugin-transform-react-jsx\",\n+       {\n+         runtime: \"automatic\",\n+         importSource: \"nativewind\",\n+       },\n+     ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Padding Usage Examples\nDESCRIPTION: Includes the Usage component to display examples and instructions for using padding utilities in NativeWind applications.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/padding.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Module Transforms in Babel for NativeWind\nDESCRIPTION: Advanced Babel configuration that specifies which modules can be transformed by NativeWind. This example allows transformation for the 'moti' module.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/babel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [\n    [\n     \"nativewind/babel\"\n     { allowModuleTransform: [\"moti\"] }\n    ]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Justify Content Options in JSX/MDX\nDESCRIPTION: Renders the Compatibility component with a list of supported justify content options in NativeWind, showing which utilities are available for use in the framework.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-content.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"justify-start\",\n    \"justify-end\",\n    \"justify-center\",\n    \"justify-between\",\n    \"justify-around\",\n    \"justify-evenly\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Expo Snack HOC Component Wrapper\nDESCRIPTION: Higher-order component that wraps components to handle Tailwind script loading and component rendering based on script load state.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/snack.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function withExpoSnack(Component: any) {\n  return function () {\n    const [, rerender] = useState(false);\n    useEffect(() => {\n      return tailwindScript?.addEventListener(\"load\", () => {\n        rerender(true);\n      });\n    }, []);\n    return tailwindScriptLoaded ? <Component /> : <></>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Padding Compatibility Information\nDESCRIPTION: Renders a Compatibility component showing supported and unsupported padding utility classes in NativeWind. It lists all available padding classes and indicates which auto padding values are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/padding.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"p-{n}\",\n    \"p-[n]\",\n    \"px-{n}\",\n    \"px-[n]\",\n    \"py-{n}\",\n    \"py-[n]\",\n    \"pt-{n}\",\n    \"pt-[n]\",\n    \"pr-{n}\",\n    \"pr-[n]\",\n    \"pb-{n}\",\n    \"pb-[n]\",\n    \"pl-{n}\",\n    \"pl-[n]\",\n  ]}\n  none={[\n    \"p-auto\",\n    \"px-auto\",\n    \"py-auto\",\n    \"pt-auto\",\n    \"pr-auto\",\n    \"pb-auto\",\n    \"pl-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Expo SDK 49\nDESCRIPTION: Babel configuration for Expo SDK 49 projects with NativeWind, including JSX import source configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\"babel-preset-expo\", { jsxImportSource: \"nativewind\" }],\n    ],\n    plugins: ['nativewind/babel']\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Tailwind Script Loading\nDESCRIPTION: Conditional code for loading Tailwind CSS on web platform and handling style compilation on native platforms using fetch requests to a local development server.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/snack.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar tailwindScriptLoaded = Platform.OS !== \"web\";\nif (Platform.OS === \"web\") {\n  var tailwindScript = document.createElement(\"script\");\n  tailwindScript.addEventListener(\"load\", () => {\n    tailwindScriptLoaded = true;\n  });\n  tailwindScript.setAttribute(\"src\", \"https://cdn.tailwindcss.com\");\n  document.body.appendChild(tailwindScript);\n} else {\n  StyleSheet.unstable_hook_onClassName = (content) => {\n    fetch(`http://localhost:3000/api/compile`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ content }),\n    })\n      .then((response) => response.json())\n      .then((body) => {\n        StyleSheet.register(body);\n      })\n      .catch((error) => {\n        console.warn(error.message);\n      });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Overflow Options in JSX\nDESCRIPTION: Renders the Compatibility component with specific overflow options. Lists supported overflow values ('visible', 'hidden', 'scroll') and unsupported overflow utility classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overflow.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"visible\", \"hidden\", \"scroll\" ]}\nnone={[\n\"overflow-auto\",\n\"overflow-clip\",\n\"overflow-x-auto\",\n\"overflow-y-auto\",\n\"overflow-x-hidden\",\n\"overflow-y-hidden\",\n\"overflow-x-clip\",\n\"overflow-y-clip\",\n\"overflow-x-visible\",\n\"overflow-y-visible\",\n\"overflow-x-scroll\",\n\"overflow-y-scroll\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Height with NativeWind Styled Components\nDESCRIPTION: Example showing how to apply different line heights to text components using NativeWind's styled components and className props. Demonstrates the usage of leading-3 and leading-6 utility classes for text spacing.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/line-height.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className=\"leading-3\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras consectetur mattis velit at lobortis. Nullam commodo mi et ultricies placerat. Donec ac accumsan mi. Cras ac porttitor arcu. Maecenas molestie euismod nulla, eget vestibulum enim pharetra ac.</StyledText>\n      <StyledText className=\"leading-6\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras consectetur mattis velit at lobortis. Nullam commodo mi et ultricies placerat. Donec ac accumsan mi. Cras ac porttitor arcu. Maecenas molestie euismod nulla, eget vestibulum enim pharetra ac.</StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Border Radius Classes in JSX\nDESCRIPTION: This snippet renders the Compatibility component with a list of supported border radius classes and unsupported classes. It demonstrates the various border radius utilities available in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-radius.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"rounded-none\",\n\"rounded\",\n\"rounded-{n}\",\n\"rounded-[n]\",\n\"rounded-full\",\n\"rounded-t-none\",\n\"rounded-t-{n}\",\n\"rounded-t-[n]\",\n\"rounded-t-full\",\n\"rounded-r-none\",\n\"rounded-r-{n}\",\n\"rounded-r-[n]\",\n\"rounded-r-full\",\n\"rounded-b-none\",\n\"rounded-b-{n}\",\n\"rounded-b-[n]\",\n\"rounded-b-full\",\n\"rounded-l-none\",\n\"rounded-l-{n}\",\n\"rounded-l-[n]\",\n\"rounded-l-full\",\n\"rounded-tl-none\",\n\"rounded-tl-{n}\",\n\"rounded-tl-[n]\",\n\"rounded-tl-full\",\n\"rounded-tr-none\",\n\"rounded-tr-{n}\",\n\"rounded-tr-[n]\",\n\"rounded-tr-full\",\n\"rounded-br-none\",\n\"rounded-br-{n}\",\n\"rounded-br-[n]\",\n\"rounded-br-full\",\n\"rounded-bl-none\",\n\"rounded-bl-{n}\",\n\"rounded-bl-[n]\",\n\"rounded-bl-full\",\n]}\nnone={[\n\"border-inherit\",\n\"border-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Drop Shadow in JSX\nDESCRIPTION: This code renders the Usage and Compatibility components within the documentation. The Compatibility component is passed an array of drop shadow classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/drop-shadow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"drop-shadow-sm\",\n    \"drop-shadow\",\n    \"drop-shadow-md\",\n    \"drop-shadow-lg\",\n    \"drop-shadow-xl\",\n    \"drop-shadow-2xl\",\n    \"drop-shadow-none\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding NativeWind Plugin to Tailwind Config for Web\nDESCRIPTION: This snippet shows how to modify the tailwind.config.js file to include the NativeWind plugin for web projects. It adds the nativewind plugin to the configuration.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/cli-native.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\n+ const nativewind = require(\"nativewind/tailwind/css\")\n+\nmodule.exports = {\n  content: [\n    './App.{js,ts,jsx,tsx}',\n  ],\n+ plugins: [nativewind()],\n};\n```\n\n----------------------------------------\n\nTITLE: NativeWind Line Height Compatibility Component\nDESCRIPTION: JSX component showing supported and unsupported line height utilities in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/line-height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"leading-{n}\",\n\"leading-[n]\",\n]}\nnone={[\n\"leading-none\",\n\"leading-tight\",\n\"leading-snug\",\n\"leading-normal\",\n\"leading-relaxed\",\n\"leading-loose\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Border Opacity in NativeWind Configuration\nDESCRIPTION: This code snippet shows how to enable the borderOpacity core plugin in the Tailwind CSS configuration for NativeWind. By default, this plugin is disabled for performance reasons, but it can be enabled to allow dynamic opacity changes for border colors.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* ...  */\n  corePlugin: {\n    borderOpacity: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Properties with NativeWind and React Native\nDESCRIPTION: Example demonstrates using NativeWind's styled components with display properties. Shows how to create styled View and Text components with flex and hidden display values using className prop.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/display.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledText className=\"text-slate-800 flex\">\n        Try editing me! 🎉\n      </StyledText>\n      <StyledText className=\"text-slate-800 hidden\">\n         I'm hidden\n      </StyledText>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Positioning Documentation\nDESCRIPTION: Imports reusable MDX components for showing usage examples and compatibility information for the positioning properties in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/top-right-bottom-left.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Transpile NativeWind Packages\nDESCRIPTION: Next.js configuration to transpile NativeWind and related packages, required for proper functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n+  transpilePackages: [\"nativewind\", \"react-native-css-interop\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Skew Documentation Components\nDESCRIPTION: JSX implementation showing the usage of compatibility component with supported skew transformation options including both fixed and dynamic values\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/skew.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"skew-x-{n}\", \"skew-x-[n]\", \"skew-y-{n}\", \"skew-y-[n]\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Rect Component with NativeWind Fill\nDESCRIPTION: Creates a styled SVG rectangle component using NativeWind's styled function and React Native SVG. The example shows how to apply fill colors through class-based styling props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/svg/fill.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from \"nativewind\";\nimport { Svg, Rect } from \"react-native-svg\";\n\nconst StyledRect = styled(Rect, { classProps: [\"fill\", \"stroke\"] });\n\nfunction MyStyledSvg({ fill, ...props }) {\n  return (\n    <Svg height=\"100\" width=\"100\" {...props}>\n      <StyledRect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill={fill} />\n    </Svg>\n  );\n}\n\n<MyStyledSvg fill=\"fill-blue-500\" />;\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Aspect Ratio Compatibility Component\nDESCRIPTION: Renders the Compatibility component with supported aspect ratio classes including auto, video, square, and custom ratio options.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"aspect-auto\",\n    \"aspect-video\",\n    \"aspect-square\",\n    \"aspect-[n]\",\n    \"aspect-{n}\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Compatibility Table in JSX\nDESCRIPTION: Creates a table component that displays the compatibility of NativeWind classes across Native and Web platforms. It uses props to populate the table with supported, partially supported, and unsupported classes, using different emoji indicators for each category.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_compatibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Native (StyleSheet)</th>\n      <th>Web (CSS)</th>\n    </tr>\n    {(props.supported || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td>{value}</td>\n        <td>✅</td>\n        <td>✅</td>\n      </tr>\n    ))}\n    {(props.partial || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td>{value}</td>\n        <td>✔️</td>\n        <td>✅</td>\n      </tr>\n    ))}\n    {(props.none || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td>{value}</td>\n        <td>❌</td>\n        <td>✅</td>\n      </tr>\n    ))}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from relative paths. These components are then used within the document to provide specific information about the Invert component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/invert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../._compatibility.mdx\";\nimport Usage from \"../._usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for NativeWind on Windows\nDESCRIPTION: This Windows command prompt instruction sets the DEBUG environment variable to enable NativeWind debug mode before running the start command.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset \"DEBUG=nativewind\" <start-command>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Border Color in JSX\nDESCRIPTION: This snippet renders the Compatibility component with props specifying supported and unsupported border color utilities. It shows that numeric and custom border colors are supported, while 'inherit' and 'current' values are not.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"border-{n}\",\n\"border-[n]\",\n]}\nnone={[\n\"border-inherit\",\n\"border-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Rem Value in Metro Config for NativeWind\nDESCRIPTION: This Metro configuration snippet demonstrates how to change the default rem value for NativeWind. It uses the 'withNativeWind' function to set the 'inlineRem' value to 16.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withNativeWind({\n  input: \"./global.css\"\n  inlineRem: 16,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Aspect Ratio Components\nDESCRIPTION: Imports the compatibility and usage documentation components from parent directory for aspect ratio documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Style Output in NativeWindStyleSheet\nDESCRIPTION: Sets the style output format per platform using setOutput method. Allows specifying 'css' for web and 'native' for other platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/api/native-wind-style-sheet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nNativeWindStyleSheet.setOutput({\n  web: 'css',\n  default: 'native'\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Color Application in React Native\nDESCRIPTION: This example demonstrates an incorrect way of applying text color in React Native using NativeWind. The color class is applied to the View component, which doesn't support color styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  return (\n    <View className=\"text-red-500\">\n      <Text>Hello, World!</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Min-Height Usage and Compatibility Components in JSX\nDESCRIPTION: Renders the Usage component and Compatibility component which displays supported min-height utilities ('min-h-0', 'min-h-[n]', 'min-h-full') and unsupported utilities ('min-h-min', 'min-h-max', 'min-h-fit').\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/min-height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  supported={[\"min-h-0\", \"min-h-[n]\", \"min-h-full\"]}\n  none={[\"min-h-min\", \"min-h-max\", \"min-h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using fontScale for Scaling Font Sizes\nDESCRIPTION: Shows how to use fontScale to create font sizes that scale with the device's font scale setting. This is equivalent to React Native's PixelRatio.getFontScale(), optionally multiplied by a provided value.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fontScale } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontSize: {\n        custom: fontScale(2),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running NativeWind Tests\nDESCRIPTION: Command for running the test suite to ensure everything is working correctly.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Rendering Scale Component Documentation\nDESCRIPTION: Defines the component structure with usage and compatibility sections. The compatibility section lists supported scale transformation classes including numeric and custom values for both x and y axes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/scale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"scale-{n}\",\n    \"scale-[n]\",\n    \"scale-x-{n}\",\n    \"scale-x-[n]\",\n    \"scale-y-{n}\",\n    \"scale-y-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Sepia in NativeWind\nDESCRIPTION: This snippet imports reusable documentation components for the Sepia component. It includes a Usage component and a Compatibility component, which are likely used to maintain consistent documentation across different parts of the NativeWind project.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/sepia.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Adding New Folders to Tailwind Config\nDESCRIPTION: Demonstrates how to update the content configuration to include additional folders in the project structure.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    './pages/**/*.{html,js,jsx}',\n    './components/**/*.{html,js,jsx}',\n+   './util/**/*.{html,js}'\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Font Size in CSS for NativeWind\nDESCRIPTION: This CSS snippet demonstrates how to set a default root font size when inline rem is disabled in NativeWind. It sets the font size to 16px for the root element.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-size.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  font-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NativeWindStyleSheet for Web Output in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure NativeWindStyleSheet to use native output for web platforms instead of the default CSS output. This is useful when you want consistent behavior across all platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/tailwindcss-react-native.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nNativeWindStyleSheet.setOutput({ web: 'native' })\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for NativeWind on Mac/Linux\nDESCRIPTION: This bash command enables debug mode for NativeWind on Mac or Linux systems by setting the DEBUG environment variable before running the start command.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=nativewind <start-command>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to provide reusable documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-items.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Installing NativeWind 4.1\nDESCRIPTION: Command to install the latest version of NativeWind using npm package manager.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2024-10-28-v4-1-announcement.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nativewind@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Transform Origin Options in JSX\nDESCRIPTION: This snippet renders the Compatibility component, passing an array of transform origin options that are not supported. This helps developers understand which origin positions are unavailable in the current implementation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/transform-origin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"origin-center\",\n    \"origin-top\",\n    \"origin-top-right\",\n    \"origin-right\",\n    \"origin-bottom-right\",\n    \"origin-bottom\",\n    \"origin-bottom-left\",\n    \"origin-left\",\n    \"origin-top-left\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Padding Classes\nDESCRIPTION: Renders a Compatibility component that displays supported and unsupported padding utility classes. Includes all padding variations (p, px, py, pt, pr, pb, pl) with both numeric and custom values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/spacing/padding.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"p-{n}\",\n    \"p-[n]\",\n    \"px-{n}\",\n    \"px-[n]\",\n    \"py-{n}\",\n    \"py-[n]\",\n    \"pt-{n}\",\n    \"pt-[n]\",\n    \"pr-{n}\",\n    \"pr-[n]\",\n    \"pb-{n}\",\n    \"pb-[n]\",\n    \"pl-{n}\",\n    \"pl-[n]\",\n  ]}\n  none={[\n    \"p-auto\",\n    \"px-auto\",\n    \"py-auto\",\n    \"pt-auto\",\n    \"pr-auto\",\n    \"pb-auto\",\n    \"pl-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset\nDESCRIPTION: Command for creating a new changeset to document package version changes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Variables via Tailwind Plugins\nDESCRIPTION: Shows how to define CSS variables as part of your theme using a Tailwind plugin, making them available throughout your application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    plugin(function ({ addBase }) {\n      addBase({\n        \":root\": { \"--brand-color\": \"red\" },\n      });\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Components in JSX\nDESCRIPTION: This code imports Usage and Compatibility components from relative paths and renders them within the documentation structure. It sets up the layout for the Backdrop Contrast documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-contrast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n# Backdrop Contrast\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"backdrop-contrast-0\",\n    \"backdrop-contrast-50\",\n    \"backdrop-contrast-75\",\n    \"backdrop-contrast-100\",\n    \"backdrop-contrast-125\",\n    \"backdrop-contrast-150\",\n    \"backdrop-contrast-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Support Status Table in React JSX\nDESCRIPTION: A JSX component that generates a table showing feature support status with different indicators. The component accepts props for supported, experimental, native, partial, and web-only features, and includes an optional legend component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_compatibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Legend from \"./_legend.md\";\n\n<table>\n  <tbody style={{ display: \"table\", width: \"100%\" }}>\n    <tr>\n      <th style={{ width: \"40%\", whiteSpace: \"nowrap\" }}>Class</th>\n      <th>Support</th>\n    </tr>\n    {(props.supported || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td>\n          <pre>\n            <code>{value}</code>\n          </pre>\n        </td>\n        <td>✅ Full Support</td>\n      </tr>\n    ))}\n    {(props.experimental || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td>\n          <pre>\n            <code>{value}</code>\n          </pre>\n        </td>\n        <td>🧪 Experimental Support</td>\n      </tr>\n    ))}\n    {(props.native || []).map((value, index) => (\n      <tr key={`supported-${index}`}>\n        <td>\n          <pre>\n            <code>{value}</code>\n          </pre>\n        </td>\n        <td>📱 Native only</td>\n      </tr>\n    ))}\n    {(props.partial || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td>\n          <pre>\n            <code>{value}</code>\n          </pre>\n        </td>\n        <td>✔️ Partial Support</td>\n      </tr>\n    ))}\n    {(props.none || []).map((value, index) => (\n      <tr key={`partial-${index}`}>\n        <td>\n          <pre>\n            <code>{value}</code>\n          </pre>\n        </td>\n        <td>🌐 Web only</td>\n      </tr>\n    ))}\n  </tbody>\n</table>\n\n<>{props.legend || props.legend === undefined ? <Legend /> : <></>}</>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Opacity Props in JSX\nDESCRIPTION: This code renders the Compatibility component with a 'supported' prop. The prop is an array of strings representing supported opacity classes in NativeWind, including both numeric and dynamic values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/opacity.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"opacity-{n}\",\n\"opacity-[n]\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet demonstrates the usage of the imported Usage and Compatibility components. The Compatibility component is rendered with props specifying supported and unsupported border styles for native platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-style.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  supported={[\"border-solid\", \"border-dashed\", \"border-dotted\"]}\n  none={[\"border-none\", \"border-double\", \"border-hidden\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use the Align Items feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-items.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Using getPixelSizeForLayoutSize in NativeWind\nDESCRIPTION: This snippet demonstrates how to use the 'getPixelSizeForLayoutSize' function in the Tailwind configuration to convert layout sizes to pixel sizes, equivalent to PixelRatio.getPixelSizeForLayoutSize() in React Native.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/theme.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\n\nconst { getPixelSizeForLayoutSize } = require(\"nativewind\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      size: {\n        custom: getPixelSizeForLayoutSize(2),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Blank Expo Project\nDESCRIPTION: Command to quickly setup a new blank Expo project using create-expo-stack.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/getting-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-stack@latest --blank\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Text Overflow in JSX\nDESCRIPTION: This code renders the Compatibility component with specific props, indicating that certain text overflow properties ('truncate', 'text-ellipsis', 'text-clip') are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-overflow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility none={[\"truncate\", \"text-ellipsis\", \"text-clip\"]} />\n```\n\n----------------------------------------\n\nTITLE: Adding NativeWind Preset to Next.js Tailwind Config\nDESCRIPTION: Diff showing how to add the NativeWind preset to an existing Tailwind CSS configuration for Next.js projects.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,jsx,ts,tsx}',\n  ],\n+ presets: [require('nativewind/preset')],\n  theme: {\n    extend: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Text Decoration Options\nDESCRIPTION: Renders a Compatibility component that specifies supported and unsupported text decoration styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration-style.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"decoration-solid\",\n\"decoration-double\",\n\"decoration-dotted\",\n\"decoration-dashed\",\n]}\nnone={[\n\"decoration-wavy\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables in Global CSS\nDESCRIPTION: Example of defining CSS variables directly in CSS, including support for dark mode via media queries.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* in CSS */\n:root {\n  --my-brand-color: red;\n}\n\n/* including dark mode! */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --my-brand-color: blue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Backdrop GrayScale\nDESCRIPTION: This code renders the imported Usage and Compatibility components, with the Compatibility component configured to exclude certain backdrop grayscale classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-grayscale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"backdrop-grayscale-0\", \"backdrop-grayscale\"]} />\n```\n\n----------------------------------------\n\nTITLE: Styled Component Creation and Export\nDESCRIPTION: Custom component creation using unstable_styled helper for View, Text, and Pressable components with a render function that handles children and props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/snack.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(globalThis as any).isExpoSnack = true;\nconst render = (element: any, { children, ...props }: any, key?: string) => {\n  children = Array.isArray(children) ? children : [children];\n  return createElement(element, { key, ...props }, ...children);\n};\nexport const View = unstable_styled(RNView, render);\nexport const Text = unstable_styled(RNText, render);\nexport const Pressable = unstable_styled(RNPressable, render);\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains usage instructions for border radius utility classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-radius.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Margin Compatibility Information\nDESCRIPTION: This code renders the Compatibility component with a list of supported margin utility classes in NativeWind. It includes various margin classes for different directions and sizes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/margin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"m-{n}\",\n    \"m-[n]\",\n    \"mx-{n}\",\n    \"mx-[n]\",\n    \"my-{n}\",\n    \"my-[n]\",\n    \"mt-{n}\",\n    \"mt-[n]\",\n    \"mr-{n}\",\n    \"mr-[n]\",\n    \"mb-{n}\",\n    \"mb-[n]\",\n    \"ml-{n}\",\n    \"ml-[n]\",\n    \"m-auto\",\n    \"mx-auto\",\n    \"my-auto\",\n    \"mt-auto\",\n    \"mr-auto\",\n    \"mb-auto\",\n    \"ml-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Properties with calc() in NativeWind\nDESCRIPTION: Examples showing proper and improper ways to use calc() with custom properties in NativeWind, highlighting the need to keep operators inside calc() expressions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/functions-and-directives.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.element {\n  // ❌ Operators cannot be in a custom property\n  --width: 100% - 20%;\n  width: calc(var(--width));\n}\n\n.element {\n  // ✅  Operator is part of the `calc()` expression\n  --width: 100%;\n  width: calc(var(--width) - 20%);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: Imports required documentation components for the align-items documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-items.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Using fontScaleSelect for Conditional Font Scaling\nDESCRIPTION: Demonstrates how to use fontScaleSelect to conditionally set font sizes based on the device's font scale setting. This provides a select-like API for font scaling conditions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fontScaleSelect, hairlineWidth } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontSize: {\n        custom: fontScaleSelect({\n          2: 14,\n          default: 16,\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Font Weight Compatibility Component Usage\nDESCRIPTION: Renders a Compatibility component with supported font weight classes including thin, extralight, light, normal, medium, semibold, bold, extrabold, and black weights.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-weight.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"font-thin\",\n\"font-extralight\",\n\"font-light\",\n\"font-normal\",\n\"font-medium\",\n\"font-semibold\",\n\"font-bold\",\n\"font-extrabold\",\n\"font-black\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in MDX\nDESCRIPTION: This code renders the Compatibility component with a 'supported' prop containing an array of supported flex direction classes. It provides a clear list of compatible flex direction styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-direction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Compatibility\nsupported={[\n\"flex-row\",\n\"flex-row-reverse\",\n\"flex-col\",\n\"flex-col-reverse\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: NativeWind Stroke Component Structure\nDESCRIPTION: Defines the main documentation structure for stroke styling, including usage section and compatibility information with supported and unsupported stroke properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/stroke.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# Stroke\n\n## Usage\n\n<RNSVG />\n\n## Compatibility\n\n<Compatibility\n  supported={[\"stroke-{n}\", \"stroke-[n]\"]} \n  none={[\"stroke-inherit\", \"stroke-current\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using hairlineWidth for Thin Border Configuration\nDESCRIPTION: Demonstrates how to use hairlineWidth to create the thinnest possible border width on a device. This is equivalent to React Native's StyleSheet.hairlineWidth property.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { hairlineWidth } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      borderWidth: {\n        hairline: hairlineWidth(),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components within the documentation. The Compatibility component is passed props indicating that 'backdrop-invert-0' and 'backdrop-invert' are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-invert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"backdrop-invert-0\", \"backdrop-invert\"]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Column Reverse Layout with NativeWind in React Native\nDESCRIPTION: This snippet shows how to create a reversed vertical layout using flex-col-reverse in NativeWind. It creates a StyledView with flex-col-reverse class and renders three Box components inside it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-direction.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex text-center h-14 w-14 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-col-reverse h-screen\">\n      <Box>01</Box>\n      <Box>02</Box>\n      <Box>03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Flex Grow Documentation Components in JSX\nDESCRIPTION: This code imports and renders components for usage instructions and compatibility information for the Flex Grow utility in NativeWind. It includes support for 'grow' and 'grow-0' classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-grow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n\n# Flex Grow\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\nsupported={[\n\"grow\",\n\"grow-0\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Height Props in JSX\nDESCRIPTION: This code renders the Compatibility component with props specifying supported and unsupported height utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/height.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"h-{n}\", \"h-[n]\", \"h-full\", \"h-screen\"]}\n  none={[\"h-auto\", \"h-min\", \"h-max\", \"h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for the Flex Shrink property.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-shrink.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Using roundToNearestPixel for Pixel-Perfect Measurements\nDESCRIPTION: Demonstrates how to use roundToNearestPixel to ensure measurements are rounded to the nearest pixel. This is equivalent to React Native's PixelRatio.roundToNearestPixel().\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/customization/theme.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { roundToNearestPixel } = require(\"nativewind/theme\");\n\nmodule.exports = {\n  theme: {\n    extend: {\n      size: {\n        custom: roundToNearestPixel(8.4)\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Gap Component Usage and Compatibility in JSX/MDX\nDESCRIPTION: This snippet demonstrates how to render the Usage and Compatibility components within the Gap component documentation. It also includes a caution note about React Native version requirement.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/gap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n:::caution\n\n`gap` requires React Native 0.71\n\n:::\n\n## Compatibility\n\n<Compatibility\n  supported={[\n    \"gap-{n}\",\n    \"gap-[n]\",\n    \"gap-x-{n}\",\n    \"gap-x-[n]\",\n    \"gap-y-{n}\",\n    \"gap-y-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Border Style Props in JSX\nDESCRIPTION: This code renders the Compatibility component with props specifying supported and unsupported border style classes in NativeWind. It lists solid, dashed, and dotted as supported styles, while none, double, and hidden are marked as unsupported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/divide-style.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"divide-solid\",\n\"divide-dashed\",\n\"divide-dotted\",\n]}\nnone={[\n\"divide-none\",\n\"divide-double\",\n\"divide-hidden\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This snippet renders the Compatibility component with a 'supported' prop, which lists the supported alignment classes for the Align Items feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-items.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"items-start\",\n\"items-end\",\n\"items-center\",\n\"items-baseline\",\n\"items-stretch\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Line Clamp Classes in JSX\nDESCRIPTION: This snippet renders the Compatibility component, passing an array of supported line clamp classes as a prop. It shows which line clamp utilities are available in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/line-clamp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"line-clamp-1\",\n    \"line-clamp-2\",\n    \"line-clamp-3\",\n    \"line-clamp-4\",\n    \"line-clamp-5\",\n    \"line-clamp-6\",\n    \"line-clamp-none\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Next.js with NativeWind\nDESCRIPTION: Babel configuration for Next.js with NativeWind, adding the plugin to set jsxImportSource to nativewind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  presets: [\"next/babel\"],\n+  plugins: [\n+    [\n+      \"@babel/plugin-transform-react-jsx\",\n+      {\n+        runtime: \"automatic\",\n+        importSource: \"nativewind\",\n+      },\n+    ],\n+  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Invert Documentation in JSX\nDESCRIPTION: This code snippet imports two components: Compatibility from a relative path and Usage from another relative path. These components are used to provide usage instructions and compatibility information for the Invert component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/saturate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Using Grow-0 with NativeWind in React Native\nDESCRIPTION: Demonstrates the use of grow-0 utility class to prevent an element from growing while allowing adjacent elements to grow. Shows contrast between grow and grow-0 behaviors in a flex container.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-grow.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex h-14 w-2/5 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-1 flex-col justify-center items-center\">\n      <Box className=\"grow bg-fuchsia-200\">01</Box>\n      <Box className=\"grow-0\">02</Box>\n      <Box className=\"grow bg-fuchsia-200\">03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Display Components\nDESCRIPTION: Imports compatibility and usage components from parent directory for display documentation\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/display.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Align Items Props\nDESCRIPTION: Renders the Compatibility component with supported align-items values including start, end, center, baseline, and stretch options.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-items.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"items-start\",\n\"items-end\",\n\"items-center\",\n\"items-baseline\",\n\"items-stretch\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing Content Pattern Configuration\nDESCRIPTION: Shows how to correct broad content patterns that might cause module declaration conflicts by limiting the scope to source files only.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n-   './**/*.{html,js,jsx}',\n+   './src/**/*.{html,js,jsx}',\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This code snippet renders the Usage component and the Compatibility component with specific props. The Compatibility component is passed an array of supported flex shrink values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-shrink.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\nsupported={[\n\"shrink\",\n\"shrink-0\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Inline Style Merging\nDESCRIPTION: Demonstrates how NativeWind automatically merges with inline styles while maintaining inline style priority.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/custom-components.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyText({ style }) {\n  // style is [{ fontWeight: \"bold\" }, { color: \"black\" }]\n  return <Text style={style} />;\n}\n\n<MyText className={`font-bold`} style={{ color: \"black\" }} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This snippet renders the Compatibility component with a 'none' prop containing an array of border style classes that are not compatible. This provides information about which border styles are not supported in the current version.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-style.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"divide-solid\",\n    \"divide-dashed\",\n    \"divide-dotted\",\n    \"divide-none\",\n    \"divide-double\",\n    \"divide-hidden\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Flex Basis in JSX\nDESCRIPTION: This code renders the Compatibility component with specific props to show which Flex Basis properties are supported and which are not available in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-basis.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"basis-{n}\", \"basis-[n]\" ]}\nnone={[\n\"basis-auto\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Compatibility Component with Unsupported Place Content Classes\nDESCRIPTION: Renders the Compatibility component with a list of place-content utility classes that are not supported in NativeWind, displaying compatibility information for developers.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-items.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"place-content-center\",\n    \"place-content-start\",\n    \"place-content-end\",\n    \"place-content-between\",\n    \"place-content-around\",\n    \"place-content-evenly\",\n    \"place-content-baseline\",\n    \"place-content-stretch\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo app.json for Metro Web Bundling\nDESCRIPTION: JSON configuration for Expo's app.json to use Metro bundler for web support, required for NativeWind to work on web platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Align Content Documentation in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective files. These components are used to structure the documentation for the Align Content feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Wrap Styles with NativeWind in React Native\nDESCRIPTION: Example implementation showing different flex wrap behaviors using NativeWind styled components. Demonstrates flex-nowrap, flex-wrap, and flex-wrap-reverse properties with styled View and Text components arranged in a column layout.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-wrap.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex-none text-center h-14 w-2/5 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-1 flex-col justify-between\">\n      <StyledView className=\"flex p-1 justify-center\">\n        <Text>flex-nowrap</Text>\n        <StyledView className=\"flex flex-nowrap flex-row items-center\">\n          <Box>01</Box>\n          <Box>02</Box>\n          <Box>03</Box>\n        </StyledView>\n      </StyledView>\n\n\n      <StyledView className=\"flex p-1 justify-center\">\n        <Text>flex-wrap</Text>\n        <StyledView className=\"flex flex-wrap flex-row items-center\">\n          <Box>01</Box>\n          <Box>02</Box>\n          <Box>03</Box>\n        </StyledView>\n      </StyledView>\n\n      <StyledView className=\"flex p-1 justify-center\">\n        <Text>flex-wrap-reverse</Text>\n        <StyledView className=\"flex flex-wrap-reverse flex-row items-center\">\n          <Box>01</Box>\n          <Box>02</Box>\n          <Box>03</Box>\n        </StyledView>\n      </StyledView>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Ring Width Documentation Components in JSX\nDESCRIPTION: This code imports and renders components for displaying usage instructions and compatibility information for ring width utilities in NativeWind. It includes a Usage component and a Compatibility component with specific ring width classes listed.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n# Ring Width\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"ring-0\",\n    \"ring-1\",\n    \"ring-2\",\n    \"ring\",\n    \"ring-4\",\n    \"ring-8\",\n    \"ring-inset\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Font Size Compatibility Component\nDESCRIPTION: Renders the Compatibility component with supported font size utility classes including text-{n}, text-[n], and text-base variants.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-size.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"text-{n}\",\n\"text-[n]\",\n\"text-base\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX for NativeWind Place Self Documentation\nDESCRIPTION: Imports reusable MDX components for compatibility information and usage instructions that will be included in the Place Self documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-self.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Paragraph with Dynamic Tailwind CSS Documentation Link in JSX\nDESCRIPTION: This JSX snippet creates a paragraph with inline styling and a dynamic link to the Tailwind CSS documentation. It uses the useLocation hook to extract the current page name from the URL path and construct the documentation link.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_usage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<p>\n  <p style={{ display: \"inline-block\" }}>Please refer to the</p>{\" \"}\n  <a\n    style={{ display: \"inline-block\" }}\n    href={`https://tailwindcss.com/docs/${useLocation()\n      .pathname.split(\"/\")\n      .pop()}`}\n  >\n    documentation on the Tailwind CSS website\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Box Shadow Color\nDESCRIPTION: This code renders the Compatibility component with props indicating support for 'shadow-{n}' and 'shadow-[n]' utilities. It provides information about which shadow color utilities are compatible in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/box-shadow-color.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility supported={[\"shadow-{n}\", \"shadow-[n]\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Touch Action Properties in React\nDESCRIPTION: Renders the Compatibility component with a list of touch action properties that are not supported. This component displays which touch action utilities have no compatibility across platforms.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/touch-action.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"touch-auto\",\n    \"touch-none\",\n    \"touch-pan-x\",\n    \"touch-pan-left\",\n    \"touch-pan-right\",\n    \"touch-pan-y\",\n    \"touch-pan-up\",\n    \"touch-pan-down\",\n    \"touch-pinch-zoom\\t\",\n    \"touch-manipulation\\t\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Letter Spacing Classes in JSX\nDESCRIPTION: This code renders the Compatibility component with a prop 'supported' that lists various letter spacing utility classes available in NativeWind. These classes range from tighter to widest tracking.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/letter-spacing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"tracking-tighter\",\n\"tracking-tight\",\n\"tracking-normal\",\n\"tracking-wide\",\n\"tracking-wider\",\n\"tracking-widest\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Scroll Padding Classes in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with a list of scroll padding utility classes that are not compatible. It provides information about which scroll padding classes are not supported in the current context.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-padding.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"scroll-p-{n}\",\n    \"scroll-p-[n]\",\n    \"scroll-px-{n}\",\n    \"scroll-px-[n]\",\n    \"scroll-py-{n}\",\n    \"scroll-py-[n]\",\n    \"scroll-pt-{n}\",\n    \"scroll-pt-[n]\",\n    \"scroll-pr-{n}\",\n    \"scroll-pr-[n]\",\n    \"scroll-pb-{n}\",\n    \"scroll-pb-[n]\",\n    \"scroll-pl-{n}\",\n    \"scroll-pl-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring inlineNativeRem in Metro config for NativeWind\nDESCRIPTION: Example of how to set the inlineNativeRem option in the Metro configuration to revert to the previous rem scaling behavior in NativeWind v4.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// metro.config.js\nexport default withNativeWind(config, {\n  input: \"global.css\",\n  inlineNativeRem: 16 // Modify this\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Grid Template Columns in JSX\nDESCRIPTION: This code renders the Usage and Compatibility components. The Compatibility component is passed a prop 'none' with an array of grid column classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-template-columns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"grid-cols-1\",\n    \"grid-cols-2\",\n    \"grid-cols-3\",\n    \"grid-cols-4\",\n    \"grid-cols-5\",\n    \"grid-cols-6\",\n    \"grid-cols-7\",\n    \"grid-cols-8\",\n    \"grid-cols-9\",\n    \"grid-cols-10\",\n    \"grid-cols-11\",\n    \"grid-cols-12\",\n    \"grid-cols-none\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Shrink Compatibility Component\nDESCRIPTION: JSX configuration for the Compatibility component showing supported flex-shrink utility classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-shrink.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"shrink\",\n\"shrink-0\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Column Usage and Compatibility Components in JSX\nDESCRIPTION: This code snippet demonstrates how to render the Usage and Compatibility components within a markdown-like structure. The Compatibility component is passed props indicating that 'columns-[n]' and 'columns-{n}' are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/columns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility none={[\"columns-[n]\", \"columns-{n}\"]} />\n```\n\n----------------------------------------\n\nTITLE: NativeWind Justify Content Compatibility Component\nDESCRIPTION: Renders a compatibility component showing supported justify content options including start, end, center, between, around, and evenly.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/justify-items.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"justify-start\",\n\"justify-end\",\n\"justify-center\",\n\"justify-between\",\n\"justify-around\",\n\"justify-evenly\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: NativeWind v4 Migration Requirements Markdown\nDESCRIPTION: Lists the key changes and requirements for migrating to NativeWind v4, including Node.js version requirement and removal of the 'tw' functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/packages/nativewind/v4_MIGRATION.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v4 Migration\n\n- Requires Node v16+\n- `tw` has been removed\n  - Can restore the functionality by creating a new polyfill\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Compatibility Component with Align Content Options\nDESCRIPTION: Renders the Compatibility component with a list of supported alignment options for the Align Content feature. This includes various content distribution classes like center, start, end, between, around, and evenly.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-content.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"content-center\",\n\"content-start\",\n\"content-end\",\n\"content-between\",\n\"content-around\",\n\"content-evenly\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Background Attachment Props\nDESCRIPTION: This code renders the Compatibility component with a 'none' prop, indicating that certain background attachment styles (bg-fixed, bg-local, bg-scroll) are not supported or have compatibility issues in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-attachment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility none={[\"bg-fixed\", \"bg-local\", \"bg-scroll\"]} />\n```\n\n----------------------------------------\n\nTITLE: Z-Index Compatibility Component Implementation\nDESCRIPTION: Renders a Compatibility component that specifies supported z-index utilities and unsupported features in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/z-index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"z-{n}\", \"z-[n]\" ]}\nnone={[\n\"z-auto\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Z-Index Documentation in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are used to structure the documentation for z-index utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/z-index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Grid Template Rows Documentation\nDESCRIPTION: Imports required MDX components for rendering the grid template rows documentation, including compatibility and usage information components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-template-rows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: NativeWind Margin Compatibility Component\nDESCRIPTION: JSX component showing supported margin utility classes including fixed values, dynamic values, and auto margins for all directions and axes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/spacing/margin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"m-{n}\",\n    \"m-[n]\",\n    \"mx-{n}\",\n    \"mx-[n]\",\n    \"my-{n}\",\n    \"my-[n]\",\n    \"mt-{n}\",\n    \"mt-[n]\",\n    \"mr-{n}\",\n    \"mr-[n]\",\n    \"mb-{n}\",\n    \"mb-[n]\",\n    \"ml-{n}\",\n    \"ml-[n]\",\n    \"m-auto\",\n    \"mx-auto\",\n    \"my-auto\",\n    \"mt-auto\",\n    \"mr-auto\",\n    \"mb-auto\",\n    \"ml-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from separate MDX files. These components are likely used to display compatibility information and usage instructions for gradient color stops in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/gradient-color-stops.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Border Radius Classes in JSX\nDESCRIPTION: This snippet renders the Compatibility component with an extensive list of supported border radius utility classes and unsupported classes. It provides a comprehensive overview of the available border radius options in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-radius.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"rounded-none\",\n\"rounded\",\n\"rounded-{n}\",\n\"rounded-[n]\",\n\"rounded-full\",\n\"rounded-t-none\",\n\"rounded-t-{n}\",\n\"rounded-t-[n]\",\n\"rounded-t-full\",\n\"rounded-r-none\",\n\"rounded-r-{n}\",\n\"rounded-r-[n]\",\n\"rounded-r-full\",\n\"rounded-b-none\",\n\"rounded-b-{n}\",\n\"rounded-b-[n]\",\n\"rounded-b-full\",\n\"rounded-l-none\",\n\"rounded-l-{n}\",\n\"rounded-l-[n]\",\n\"rounded-l-full\",\n\"rounded-tl-none\",\n\"rounded-tl-{n}\",\n\"rounded-tl-[n]\",\n\"rounded-tl-full\",\n\"rounded-tr-none\",\n\"rounded-tr-{n}\",\n\"rounded-tr-[n]\",\n\"rounded-tr-full\",\n\"rounded-br-none\",\n\"rounded-br-{n}\",\n\"rounded-br-[n]\",\n\"rounded-br-full\",\n\"rounded-bl-none\",\n\"rounded-bl-{n}\",\n\"rounded-bl-[n]\",\n\"rounded-bl-full\",\n]}\nnone={[\n\"border-inherit\",\n\"border-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Grid Auto Rows in JSX\nDESCRIPTION: This code renders the Compatibility component with specific props, indicating which Grid Auto Rows features are not compatible. It lists 'auto-rows-auto', 'auto-rows-min', 'auto-rows-max', and 'auto-rows-fr' as incompatible features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-rows.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"auto-rows-auto\", \"auto-rows-min\", \"auto-rows-max\", \"auto-rows-fr\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Grid Auto Flow in JSX\nDESCRIPTION: Renders the imported MDX components to display usage instructions and compatibility information for Grid Auto Flow. The Compatibility component is configured to show which grid flow properties are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-flow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"grid-flow-row\",\n    \"grid-flow-col\",\n    \"grid-flow-dense\",\n    \"grid-flow-row-dense\",\n    \"grid-flow-col-dense\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Backdrop Blur in JSX\nDESCRIPTION: This snippet renders the Usage and Compatibility components. The Compatibility component is passed an array of backdrop blur classes that are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-blur.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"backdrop-blur-none\",\n    \"backdrop-blur-sm\",\n    \"backdrop-blur\",\n    \"backdrop-blur-md\",\n    \"backdrop-blur-lg\",\n    \"backdrop-blur-xl\",\n    \"backdrop-blur-2xl\",\n    \"backdrop-blur-3xl\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Text Decoration Compatibility Component Usage\nDESCRIPTION: Renders a Compatibility component that specifies supported and unsupported text decoration properties in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"underline\",\n\"line-through\",\n\"no-underline\",\n]}\nnone={[\n\"overline\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet renders the Usage component and the Compatibility component with a list of supported font weight classes. The Compatibility component receives an array of supported font weight utilities as a prop.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-weight.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\nsupported={[\n\"font-thin\",\n\"font-extralight\",\n\"font-light\",\n\"font-normal\",\n\"font-medium\",\n\"font-semibold\",\n\"font-bold\",\n\"font-extrabold\",\n\"font-black\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This code snippet shows how the Usage and Compatibility components are used within the document. The Compatibility component is passed props indicating which isolation features are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/isolation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"isolate\", \"isolation-auto\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Z-Index in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains information about how to use z-index utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/z-index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in NativeWind Justify Items Documentation\nDESCRIPTION: Renders the Usage component to display usage instructions for justify-items utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-items.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Max-Width Compatibility Component\nDESCRIPTION: Renders a Compatibility component that displays supported and unsupported max-width utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/max-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"max-w-0\",\n    \"max-w-[n]\",\n    \"max-w-{n}\",\n    \"max-w-full\",\n    \"max-w-screen-sm\",\n    \"max-w-screen-md\",\n    \"max-w-screen-lg\",\n    \"max-w-screen-xl\",\n    \"max-w-screen-2xl\",\n  ]}\n  none={[\"max-w-min\", \"max-w-max\", \"max-w-fit\", \"max-w-prose\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Background Origin Properties\nDESCRIPTION: This snippet renders the Compatibility component with a 'none' prop containing an array of background origin utility classes. This is likely used to indicate that these utilities are not supported or have specific compatibility considerations in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-origin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"bg-origin-border\", \"bg-origin-padding\", \"bg-origin-content\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Break Inside in JSX\nDESCRIPTION: This code renders the Usage component and the Compatibility component with specific props. The Compatibility component is given an array of break-inside utilities that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/break-inside.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"break-inside-auto\",\n    \"break-inside-avoid\",\n    \"break-inside-avoid-page\",\n    \"break-inside-avoid-column\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Polyfilled Units Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists and describes polyfilled units available in NativeWind. It includes the unit symbol, name, and a brief description of how it's implemented.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/units.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <tbody style={{ display: \"table\", width: \"100%\" }}>\n    <tr>\n      <th>Unit</th>\n      <th>Name</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>vw</td>\n      <td>View Width</td>\n      <td>Polyfilled using Dimensions.get('window')</td>\n    </tr>\n    <tr>\n      <td>vh</td>\n      <td>View height</td>\n      <td>Polyfilled using Dimensions.get('window')</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Border Width Compatibility Component\nDESCRIPTION: JSX component that displays compatibility information for various border width utilities including standard borders, x/y axes borders, and individual side borders.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-width.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"border\",\n\"border-{n}\",\n\"border-[n]\",\n\"border-x\",\n\"border-x-{n}\",\n\"border-x-[n]\",\n\"border-y\",\n\"border-y-{n}\",\n\"border-y-[n]\",\n\"border-t\",\n\"border-t-{n}\",\n\"border-t-[n]\",\n\"border-r\",\n\"border-r-{n}\",\n\"border-r-[n]\",\n\"border-b\",\n\"border-b-{n}\",\n\"border-b-[n]\",\n\"border-l\",\n\"border-l-{n}\",\n\"border-l-[n]\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for NativeWind Documentation\nDESCRIPTION: Renders the imported MDX components to display usage information and compatibility details, specifically excluding the 'appearance-none' style from compatibility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/appearance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"appearance-none\"]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Border Width Documentation\nDESCRIPTION: This code imports Compatibility and Usage components from relative paths. These components are used to structure the documentation for border width utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Legend Section with HTML and Markdown\nDESCRIPTION: This code snippet creates a collapsible 'Legend' section using HTML details and summary tags, with Markdown content inside. It explains class notations and icon meanings used in the NativeWind project documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_legend.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<details style={{ width: 500 }}>\n  <summary>Legend</summary>\n\n### Class\n\n`-{n}` Supports values from theme\n\n`-[n]` Supports arbitrary values\n\n### Icon\n\n:white_check_mark: Full support\n\n:heavy_check_mark: Partial support\n\n:x: Not supported\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Rendering Brightness Component Documentation in JSX\nDESCRIPTION: This code snippet renders the Brightness component documentation. It includes a Usage component and a Compatibility component with specific brightness values listed as incompatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/brightness.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"brightness-0\",\n    \"brightness-50\",\n    \"brightness-75\",\n    \"brightness-90\",\n    \"brightness-95\",\n    \"brightness-100\",\n    \"brightness-105\",\n    \"brightness-110\",\n    \"brightness-125\",\n    \"brightness-150\",\n    \"brightness-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for List Style Position in JSX\nDESCRIPTION: This snippet renders the Usage and Compatibility components within the documentation. The Compatibility component is passed supported list style position values as props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/list-style-position.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility supported={[\"list-inside\", \"list-outside\"]} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Components in JSX\nDESCRIPTION: This code imports and renders custom documentation components for usage and compatibility information. It utilizes MDX syntax to include reusable documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/break-before.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n\n# Break Before\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"break-before-auto\",\n    \"break-before-avoid\",\n    \"break-before-all\",\n    \"break-before-avoid-page\",\n    \"break-before-page\",\n    \"break-before-left\",\n    \"break-before-right\",\n    \"break-before-column\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Variant Numeric Compatibility Component\nDESCRIPTION: JSX component configuration for font variant numeric features, listing supported numeric variant styles including normal numbers, ordinal, slashed zero, and various numeric formats.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-variant-numeric.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"normal-nums\",\n    \"ordinal\",\n    \"slashed-zero\",\n    \"lining-nums\",\n    \"oldstyle-nums\",\n    \"proportional-nums\",\n    \"tabular-nums\",\n    \"diagonal-fractions\",\n    \"stacked-fractions\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Implementation for Text Decoration Styles\nDESCRIPTION: Renders the Compatibility component with supported and unsupported text decoration style options in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-style.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"decoration-solid\",\n\"decoration-double\",\n\"decoration-dotted\",\n\"decoration-dashed\",\n]}\nnone={[\n\"decoration-wavy\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Outline Width in JSX\nDESCRIPTION: This code renders the Compatibility component with props specifying which outline width styles are not available. It indicates that outline-0, outline-1, outline-2, outline-4, and outline-8 are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"outline-0\", \"outline-1\", \"outline-2\", \"outline-4\", \"outline-8\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Imports reusable MDX components for compatibility and usage documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/max-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering React Native SVG Component in NativeWind Documentation\nDESCRIPTION: This snippet renders the RNSVG component, which likely contains information about using fill with React Native SVG in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/fill.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RNSVG />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Scroll Margin in JSX\nDESCRIPTION: This code renders the Usage and Compatibility components. The Compatibility component is passed an array of scroll margin utility classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-margin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"scroll-m-{n}\",\n    \"scroll-m-[n]\",\n    \"scroll-mx-{n}\",\n    \"scroll-mx-[n]\",\n    \"scroll-my-{n}\",\n    \"scroll-my-[n]\",\n    \"scroll-mt-{n}\",\n    \"scroll-mt-[n]\",\n    \"scroll-mr-{n}\",\n    \"scroll-mr-[n]\",\n    \"scroll-mb-{n}\",\n    \"scroll-mb-[n]\",\n    \"scroll-ml-{n}\",\n    \"scroll-ml-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to render usage instructions and compatibility information for border radius utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-radius.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for NativeWind Flex in JSX\nDESCRIPTION: Imports reusable documentation components for the Flex component documentation page. The file includes both Usage and Compatibility components that are rendered in the page content.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n\n# Flex\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  supported={[\"flex-1\", \"basis-[n]\"]}\n  none={[\"flex-auto\", \"flex-initial\", \"flex-none\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This code snippet demonstrates how the Usage and Compatibility components are rendered within the document. The Compatibility component is passed props to indicate which invert classes are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/invert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"invert-0\", \"invert\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet shows how the Usage and Compatibility components are used within the document. The Compatibility component is passed a prop indicating support for 'list-image-none'.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/list-style-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility supported={[\"list-image-none\"]} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Information for Clear Utility with Unsupported Properties\nDESCRIPTION: Renders the Compatibility component to show which Clear-related CSS properties are not supported in NativeWind, including clear-left, clear-right, clear-both, and clear-none.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/clear.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"clear-left\", \"clear-right\", \"clear-both\", \"clear-none\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Supported Align Content Values in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with a prop that specifies the supported align-content values in NativeWind. It includes center, start, end, between, around, and evenly alignment options.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-content.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"content-center\",\n\"content-start\",\n\"content-end\",\n\"content-between\",\n\"content-around\",\n\"content-evenly\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components for Place Items in NativeWind\nDESCRIPTION: Renders the Usage component and the Compatibility component with specific configuration to show which place-items classes are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-content.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"place-items-start\",\n    \"place-items-end\",\n    \"place-items-center\",\n    \"place-items-baseline\",\n    \"place-items-stretch\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Information for Scroll Snap Align in NativeWind\nDESCRIPTION: This code renders the Compatibility component with props specifying which scroll snap align features are not supported in NativeWind. It lists 'snap-start', 'snap-end', 'snap-center', and 'snap-align-none' as incompatible features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-align.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"snap-start\", \"snap-end\", \"snap-center\", \"snap-align-none\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Mapping Modifier for Multiple Props in TSX\nDESCRIPTION: Demonstrates a more efficient approach using dynamic mapping modifier to manage multiple style props from a single className.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/third-party-components.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ncssInterop(ThirdPartyComponent, {\n  className: \"style\",\n});\n\nfunction Wrapper() {\n  // Need to create a new className for each prop\n  const style = cva(\"{}-[inputColor]:color-black {}-[labelColor]:color-black\");\n\n  return <ThirdPartyComponent className={style} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for NativeWind Border Width\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use border width utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX/MDX\nDESCRIPTION: Renders the imported Usage component to display justify content usage examples in the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-content.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Text Overflow Documentation in JSX\nDESCRIPTION: This snippet imports two components: Compatibility and Usage, which are likely used to display compatibility and usage information for text overflow in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-overflow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX for NativeWind Place Items Documentation\nDESCRIPTION: Imports reusable MDX documentation components that provide usage instructions and compatibility information for the Place Items utility in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Vertical Align in JSX\nDESCRIPTION: This code renders the Usage and Compatibility components. The Compatibility component is passed an array of unsupported vertical alignment properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/vertical-align.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"align-baseline\",\n    \"align-top\",\n    \"align-middle\",\n    \"align-bottom\",\n    \"align-text-top\",\n    \"align-text-bottom\",\n    \"align-sub\",\n    \"align-super\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Text Overflow in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains instructions on how to use text overflow features in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-overflow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Information for Overscroll Behavior in NativeWind\nDESCRIPTION: Renders the Compatibility component with a list of overscroll behavior utilities that are not supported in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overscroll-behavior.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"overscroll-auto\",\n    \"overscroll-contain\",\n    \"overscroll-none\",\n    \"overscroll-y-auto\",\n    \"overscroll-y-contain\",\n    \"overscroll-y-none\",\n    \"overscroll-x-auto\",\n    \"overscroll-x-contain\",\n    \"overscroll-x-none\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Justified Items Classes in NativeWind\nDESCRIPTION: Renders the Compatibility component with a list of justify-items classes that are not compatible with certain platforms in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-items.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"justify-items-start\",\n    \"justify-items-end\",\n    \"justify-items-center\",\n    \"justify-items-stretch\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet shows how the Usage and Compatibility components are rendered within the document. The Compatibility component is passed props indicating which hyphen-related properties are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/hyphens.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"hyphens-none\", \"hyphens-manual\", \"hyphens-auto\"]} />\n```\n\n----------------------------------------\n\nTITLE: Using Compatibility Component to Display Unsupported Justify Self Classes\nDESCRIPTION: This code uses the Compatibility component to display which justify-self utility classes are not supported in NativeWind. It passes an array of unsupported classes to the 'none' prop.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-self.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"justify-self-auto\",\n    \"justify-self-start\",\n    \"justify-self-end\",\n    \"justify-self-center\",\n    \"justify-self-stretch\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Border Style Props in JSX\nDESCRIPTION: This snippet renders the Compatibility component with props specifying supported and unsupported border style options in NativeWind. It lists solid, dashed, and dotted as supported styles, while none, double, and hidden are listed as unsupported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-style.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"border-solid\",\n\"border-dashed\",\n\"border-dotted\",\n]}\nnone={[\n\"border-none\",\n\"border-double\",\n\"border-hidden\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in MDX\nDESCRIPTION: This snippet demonstrates how to render the Usage and Compatibility components within the MDX file. The Compatibility component is passed supported rotate values as props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/rotate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility supported={[\"rotate-{n}\", \"rotate-[n]\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This snippet renders the Compatibility component with a 'none' prop. The prop contains an array of contrast classes that are not compatible or available in the current context.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/contrast.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"contrast-0\",\n    \"contrast-50\",\n    \"contrast-75\",\n    \"contrast-100\",\n    \"contrast-125\",\n    \"contrast-150\",\n    \"contrast-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Usage Documentation for NativeWind Clear Utility\nDESCRIPTION: Renders the Usage component to display instructions on how to use the Clear utility in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/clear.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Letter Spacing Documentation in JSX\nDESCRIPTION: This code imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for letter spacing utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/letter-spacing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use height utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: Renders the Usage and Compatibility components, with the Compatibility component configured to show unsupported grid row utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-row.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"row-auto\",\n    \"row-span-1\",\n    \"row-span-2\",\n    \"row-span-3\",\n    \"row-span-4\",\n    \"row-span-5\",\n    \"row-span-6\",\n    \"row-span-7\",\n    \"row-span-8\",\n    \"row-span-9\",\n    \"row-span-10\",\n    \"row-span-11\",\n    \"row-span-12\",\n    \"row-span-full\",\n    \"row-start-1\",\n    \"row-start-2\",\n    \"row-start-3\",\n    \"row-start-4\",\n    \"row-start-5\",\n    \"row-start-6\",\n    \"row-start-7\",\n    \"row-start-8\",\n    \"row-start-9\",\n    \"row-start-10\",\n    \"row-start-11\",\n    \"row-start-12\",\n    \"row-start-13\",\n    \"row-start-auto\",\n    \"row-end-1\",\n    \"row-end-2\",\n    \"row-end-3\",\n    \"row-end-4\",\n    \"row-end-5\",\n    \"row-end-6\",\n    \"row-end-7\",\n    \"row-end-8\",\n    \"row-end-9\",\n    \"row-end-10\",\n    \"row-end-11\",\n    \"row-end-12\",\n    \"row-end-13\",\n    \"row-end-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for NativeWind Padding\nDESCRIPTION: Imports reusable documentation components for NativeWind padding utilities, including Compatibility and Usage components that will be rendered in the padding documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/padding.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This code renders the Compatibility component with a 'supported' prop. The prop contains an array of supported opacity classes in NativeWind, including numeric and arbitrary values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/opacity.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"opacity-{n}\",\n\"opacity-[n]\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Blur Classes in JSX\nDESCRIPTION: This snippet renders the Compatibility component with a prop 'none' that lists various blur classes. This likely indicates which blur classes are not compatible or not available.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/blur.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"blur-none\",\n    \"blur-sm\",\n    \"blur\",\n    \"blur-md\",\n    \"blur-lg\",\n    \"blur-xl\",\n    \"blur-2xl\",\n    \"blur-3xl\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Margin Usage Documentation\nDESCRIPTION: This code renders the Usage component, which likely contains examples and explanations of how to use NativeWind margin utilities in a React Native application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/margin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Display Compatibility Component Implementation\nDESCRIPTION: Defines supported and unsupported display properties in NativeWind through a Compatibility component\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/display.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"flex\", \"hidden\" ]}\nnone={[\n\"block\",\n\"inline-block\",\n\"inline\",\n\"inline-flex\",\n\"table\",\n\"inline-table\",\n\"table-caption\",\n\"table-cell\",\n\"table-column\",\n\"table-column-group\",\n\"table-footer-group\",\n\"table-header-group\",\n\"table-row-group\",\n\"table-row\",\n\"flow-root\",\n\"grid\",\n\"inline-grid\",\n\"contents\",\n\"list-item\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Border Color Documentation in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are used to display information about the usage and compatibility of border color utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components in NativeWind Place Self Documentation\nDESCRIPTION: Renders the imported Usage and Compatibility components, with the Compatibility component receiving a prop specifying which place-self utility classes are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-self.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"place-self-auto\",\n    \"place-self-start\",\n    \"place-self-end\",\n    \"place-self-center\",\n    \"place-self-stretch\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Letter Spacing Documentation\nDESCRIPTION: Imports required MDX components for documenting letter spacing functionality and compatibility information in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/letter-spacing.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Flex Basis in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use the Flex Basis property in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-basis.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Positioning Properties\nDESCRIPTION: Renders the Compatibility component with supported and unsupported positioning properties in NativeWind. It shows which inset, top, right, bottom, and left utilities are available for use.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/top-right-bottom-left.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"inset-{n}\",\n    \"inset-[n]\",\n    \"inset-x-{n}\",\n    \"inset-y-[n]\",\n    \"top-{n}\",\n    \"top-[n]\",\n    \"bottom-{n}\",\n    \"bottom-[n]\",\n    \"left-{n}\",\n    \"left-[n]\",\n    \"right-{n}\",\n    \"right-[n]\",\n  ]}\n  none={[\n    \"inset-auto\",\n    \"inset-x-auto\",\n    \"inset-y-auto\",\n    \"top-auto\",\n    \"bottom-auto\",\n    \"left-auto\",\n    \"right-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains reusable documentation for how to use border style utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-style.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Background Clip Properties in JSX\nDESCRIPTION: This code renders a Compatibility component, passing an array of background clip properties as the 'none' prop. This likely indicates that these properties are not compatible or not implemented in the current version of NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-clip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Compatibility\n  none={[\n    \"bg-clip-border\",\n    \"bg-clip-padding\",\n    \"bg-clip-content\",\n    \"bg-clip-text\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Backdrop Opacity in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with a 'none' prop containing an array of backdrop opacity utility classes. This likely indicates that these classes are not compatible or not available in the current context.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-opacity.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"backdrop-opacity-0\",\n    \"backdrop-opacity-5\",\n    \"backdrop-opacity-10\",\n    \"backdrop-opacity-20\",\n    \"backdrop-opacity-25\",\n    \"backdrop-opacity-30\",\n    \"backdrop-opacity-40\",\n    \"backdrop-opacity-50\",\n    \"backdrop-opacity-60\",\n    \"backdrop-opacity-70\",\n    \"backdrop-opacity-75\",\n    \"backdrop-opacity-80\",\n    \"backdrop-opacity-90\",\n    \"backdrop-opacity-95\",\n    \"backdrop-opacity-100\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Sepia in NativeWind\nDESCRIPTION: This snippet shows the usage of the imported documentation components. The Usage component is rendered directly, while the Compatibility component is rendered with specific props to indicate incompatibility with 'sepia-0' and 'sepia'.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/sepia.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"sepia-0\", \"sepia\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains instructions on how to use opacity styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/opacity.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for border styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/divide-style.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Configuration\nDESCRIPTION: Configuration for the Compatibility component showing supported shadow properties including numeric and custom values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/box-shadow-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"shadow-{n}\",\n\"shadow-[n]\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet demonstrates the usage of the imported Usage and Compatibility components. The Compatibility component is passed an array of supported align-self values as props.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-self.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\nsupported={[\n\"self-auto\",\n\"self-start\",\n\"self-end\",\n\"self-center\",\n\"self-stretch\",\n\"self-baseline\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Gap Component Documentation in JSX/MDX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from external MDX files, which are used to provide documentation for the Gap component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/gap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Text Decoration Documentation\nDESCRIPTION: Imports required MDX components for rendering compatibility and usage documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Skew Components\nDESCRIPTION: Import statements for compatibility and usage components used in the skew transformation documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/skew.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and TwDocs Components in JSX\nDESCRIPTION: This snippet shows the import statements for two custom components used throughout the documentation: Compatibility and TwDocs. These components likely provide additional functionality or styling for the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/core-concepts/states.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../tailwind/_compatibility.mdx\";\nimport TwDocs from \"../tailwind/_tw-docs.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Border Spacing in JSX\nDESCRIPTION: This code snippet renders the Usage component, which likely contains instructions on how to use border spacing in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/border-spacing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Backdrop Invert in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components. The Compatibility component is passed props indicating which backdrop saturate classes are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-saturate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"backdrop-saturate-0\",\n    \"backdrop-saturate-50\",\n    \"backdrop-saturate-100\",\n    \"backdrop-saturate-150\",\n    \"backdrop-saturate-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Smoothing Components\nDESCRIPTION: JSX markup for rendering the usage and compatibility components with font smoothing options\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-smoothing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility supported={[\"antialiased\", \"subpixel-antialiased\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely provides instructions on how to use border styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-style.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Position Compatibility Component\nDESCRIPTION: Renders the Compatibility component showing supported position values (absolute, relative) and unsupported values (fixed, sticky).\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/position.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"absolute\", \"relative\" ]}\nnone={[\n\"fixed\",\n\"sticky\"\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Documentation\nDESCRIPTION: Imports shared MDX documentation components for compatibility and usage sections from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/divide-color.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Configuration for Text Decoration\nDESCRIPTION: Defines the supported and unsupported text decoration color properties using the Compatibility component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"decoration-{n}\",\n\"decoration-[n]\",\n]}\nnone={[\n\"decoration-inherit\",\n\"decoration-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Grid Auto Columns Documentation\nDESCRIPTION: Imports the Compatibility and Usage MDX components to be used in the Grid Auto Columns documentation page. These components provide reusable documentation sections across the NativeWind documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Overflow Components\nDESCRIPTION: Imports compatibility and usage components for the overflow documentation page\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/overflow.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display compatibility information and usage instructions for background size styling in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-size.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Flex Basis Documentation in JSX\nDESCRIPTION: This code imports two components: Compatibility and Usage, which are used to structure the documentation for the Flex Basis property in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-basis.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Border Spacing in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with props specifying unsupported border spacing classes. It provides information about which border spacing classes are not compatible or available in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/border-spacing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"border-spacing-[n]\",\n    \"border-spacing-{n}\",\n    \"border-spacing-x-[n]\",\n    \"border-spacing-x-{n}\",\n    \"border-spacing-y-[n]\",\n    \"border-spacing-y-{n}\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Word Break Documentation in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from their respective files to be used in the Word Break documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/word-break.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Grid Auto Rows in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains instructions on how to use the Grid Auto Rows feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-rows.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Outline Color Documentation\nDESCRIPTION: Imports the Compatibility and Usage components from relative paths to be used in the documentation for outline color configuration in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Ring Color Documentation Components in JSX\nDESCRIPTION: This code imports Usage and Compatibility components from relative paths and renders them within a JSX structure. It also defines a list of incompatible ring color classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n# Ring Color\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\n    \"ring-inherit\",\n    \"ring-current\",\n    \"ring-transparent\",\n    \"ring-black\",\n    \"ring-white\",\n    \"ring-{n}\",\n    \"ring-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Divide Width Documentation in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for the Divide Width feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Outline Offset in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components. The Compatibility component is passed props indicating which outline offset classes are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-style.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"outline-offset-0\",\n    \"outline-offset-1\",\n    \"outline-offset-2\",\n    \"outline-offset-4\",\n    \"outline-offset-8\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Unsupported Utilities in JSX\nDESCRIPTION: This snippet renders the Compatibility component, passing an array of object position utilities that are not supported in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/object-position.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"object-bottom\",\n    \"object-center\",\n    \"object-left\",\n    \"object-left-bottom\",\n    \"object-left-top\",\n    \"object-right\",\n    \"object-right-bottom\",\n    \"object-right-top\",\n    \"object-top\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to render documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-radius.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet demonstrates how to render the Usage and Compatibility components within the documentation. The Compatibility component is passed an array of unsupported ring offset classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-offset-color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"ring-offset-0\",\n    \"ring-offset-1\",\n    \"ring-offset-2\",\n    \"ring-offset-4\",\n    \"ring-offset-8\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Blur Documentation in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective files. These components are used to display usage instructions and compatibility information for backdrop blur functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-blur.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for NativeWind Clear Utility\nDESCRIPTION: Imports reusable MDX components for showing compatibility information and usage instructions for the NativeWind Clear utility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/clear.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components: Compatibility from the _compatibility.mdx file and Usage from the _usage.mdx file. These components are likely used to display compatibility information and usage instructions for border styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/border-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports reusable documentation components for compatibility and usage sections related to text alignment in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-transform.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Brightness Documentation in JSX\nDESCRIPTION: This snippet imports reusable components for usage instructions and compatibility information. These components are likely used to provide consistent documentation across different utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-brightness.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Column Components in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective MDX files. These components are likely used to display compatibility and usage information for NativeWind columns.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component\nDESCRIPTION: Renders the Compatibility component with a list of unsupported break-after properties\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/break-after.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"break-after-auto\",\n    \"break-after-avoid\",\n    \"break-after-all\",\n    \"break-after-avoid-page\",\n    \"break-after-page\",\n    \"break-after-left\",\n    \"break-after-right\",\n    \"break-after-column\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for Z-Index in JSX\nDESCRIPTION: This code renders the Compatibility component with props specifying supported and unsupported z-index classes in NativeWind. It shows that numeric and custom z-index values are supported, while 'z-auto' is not.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/z-index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"z-{n}\", \"z-[n]\" ]}\nnone={[\n\"z-auto\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This code renders the Compatibility component with specific props. It indicates that certain divide width classes are not compatible, likely with the current version of NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\"divide-x-{n}\", \"divide-x-[n]\", \"divide-y-{n}\", \"divide-y-[n]\"]\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for NativeWind Outline Styles in JSX\nDESCRIPTION: This code snippet renders the Usage component, which likely contains instructions on how to use outline styles in NativeWind. The component is self-closing, indicating it doesn't have any child elements or props passed to it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-offset.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to render specific sections of the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/blur.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Background Size Props\nDESCRIPTION: This code renders the Compatibility component with a 'none' prop specifying background size classes that are not supported. It indicates that 'bg-auto', 'bg-cover', and 'bg-contain' classes are not compatible in the current context.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-size.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility none={[\"bg-auto\", \"bg-cover\", \"bg-contain\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Ring Offset Width in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components. The Compatibility component is provided with a prop 'none' that lists ring offset width classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-offset-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"ring-offset-0\",\n    \"ring-offset-1\",\n    \"ring-offset-2\",\n    \"ring-offset-4\",\n    \"ring-offset-8\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Min-Height Documentation in JSX\nDESCRIPTION: Imports reusable MDX components for displaying usage patterns and compatibility information for min-height utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/min-height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Flex Shrink Documentation Components\nDESCRIPTION: Imports reusable documentation components for usage and compatibility information related to flex-shrink utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-shrink.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Transition Properties in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with specific transition-related properties. It lists experimental properties and indicates that 'transition-shadow' is not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/transition-property.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  experimental={[\n    \"transition\",\n    \"transition-all\",\n    \"transition-colors\",\n    \"transition-opacity\",\n    \"transition-transform\",\n    \"transition-{n}\",\n    \"transition-[n]\",\n  ]}\n  none={[\"transition-shadow\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective files. These components are likely used to provide reusable documentation sections across different utility pages.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/contrast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from relative paths. These components are likely used to display compatibility information and usage instructions for the object fit feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/object-fit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Min-Height Documentation Components\nDESCRIPTION: Imports required documentation components for min-height utilities from compatibility and usage files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/min-height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective files. These components are used to display usage instructions and compatibility information for the Ring Offset Color feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-offset-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for NativeWind Box Shadow Color\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use box shadow color utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/box-shadow-color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code snippet renders the Usage component, which likely contains instructions on how to use scroll padding utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-padding.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Font Smoothing Components in JSX\nDESCRIPTION: Imports required components Compatibility and Usage from parent directory MDX files for font smoothing documentation\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-smoothing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component\nDESCRIPTION: Renders the Compatibility component with a list of unsupported text decoration thickness classes\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-thickness.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"decoration-auto\",\n    \"decoration-from-font\",\n    \"decoration-0\",\n    \"decoration-1\",\n    \"decoration-2\",\n    \"decoration-4\",\n    \"decoration-8\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Box Shadow Color Documentation\nDESCRIPTION: This code imports two components, Compatibility and Usage, from relative paths. These components are likely used to render the usage instructions and compatibility information for box shadow color utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/box-shadow-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Font Style Components\nDESCRIPTION: Imports reusable documentation components for usage instructions and compatibility information for font styling features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-style.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components: Compatibility from a '_compatibility.mdx' file and Usage from a '_usage.mdx' file. These components are likely used to display usage instructions and compatibility information for font weight utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-weight.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Information for Stroke Width Syntax\nDESCRIPTION: This snippet renders the Compatibility component with props indicating support for 'stroke-{n}' and 'stroke-[n]' syntax in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/stroke-width.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility supported={[\"stroke-{n}\", \"stroke-[n]\"]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components for NativeWind Documentation in JSX\nDESCRIPTION: Imports reusable documentation components for compatibility and usage information that will be used in the screen readers documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/accessibility/screen-readers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains information on how to use object position utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/object-position.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Min-Width Documentation\nDESCRIPTION: Imports the Compatibility and Usage components for displaying min-width documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/min-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing NativeWind Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the NativeWind website project using npm package manager.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Outline Styles in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with a 'none' prop. The prop is an array of outline-related style properties that are not compatible or not supported. This provides developers with information about which outline styles cannot be used in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-offset.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"outline-none\",\n    \"outline\",\n    \"outline-dashed\",\n    \"outline-dotted\",\n    \"outline-double\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains information on how to use the Blur component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/blur.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Imports required MDX components for documentation layout - Compatibility and Usage components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/accent-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Package Installation Commands in JSX\nDESCRIPTION: This snippet defines a JSX component that displays installation commands for different package managers. It uses conditional rendering and props to customize the output based on dependencies and the selected framework.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/_npm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs groupId=\"npm-install\">\n  <TabItem value=\"npm\" label=\"npm\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `npm install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `npm install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"yarn\" label=\"yarn\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `yarn add ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `yarn add -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"pnpm\" label=\"pnpm\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `pnpm install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `pnpm install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  <TabItem value=\"bun\" label=\"bun\">\n    <CodeBlock language=\"bash\">\n      {[\n        props.deps?.length ? `bun install ${props.deps.join(\" \")}` : undefined,\n        props.devDeps?.length\n          ? `bun install -D ${props.devDeps.join(\" \")}`\n          : undefined,\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")}\n    </CodeBlock>\n  </TabItem>\n  {props.framework === 'expo' && (\n    <TabItem value=\"expo\" label=\"Expo\">\n      <CodeBlock language=\"bash\">\n        {[\n          props.deps?.length ? `npx expo install ${props.deps.join(\" \")}` : undefined,\n          props.devDeps?.length\n            ? `npx expo install -D ${props.devDeps.join(\" \")}`\n            : undefined,\n        ]\n          .filter(Boolean)\n          .join(\"\\n\")}\n      </CodeBlock>\n    </TabItem>\n  )}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Props\nDESCRIPTION: JSX component implementation showing unsupported accent color values in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/accent-color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"accent-{n}\",\n    \"accent-[n]\",\n    \"accent-black\",\n    \"accent-white\",\n    \"accent-transparent\",\n    \"accent-inherit\",\n    \"accent-current\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in MDX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective MDX files. These components are used to provide usage instructions and compatibility information for the Rotate component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/rotate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vertical Align Documentation in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from relative paths. These components are used to structure the documentation for vertical alignment in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/vertical-align.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../._compatibility.mdx\";\nimport Usage from \"../._usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Outline Color\nDESCRIPTION: Renders the Compatibility component with a list of unsupported outline color options in NativeWind, including inherit, current, transparent, black, white, and custom numeric values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-color.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"outline-inherit\",\n    \"outline-current\",\n    \"outline-transparent\",\n    \"outline-black\",\n    \"outline-white\",\n    \"outline-{n}\",\n    \"outline-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Text Alignment Components\nDESCRIPTION: Imports compatibility and usage components from parent directory MDX files for text alignment documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-transform.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from relative paths. These components are likely used to render specific sections of the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/isolation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Transition Components\nDESCRIPTION: Import statements for compatibility, usage, and animation warning components used in the transition timing function documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/transition-timing-function.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\nimport AnimationWarning from \"./_animation-warning.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component for NativeWind Text Transform\nDESCRIPTION: This JSX code renders the Compatibility component with props specifying supported and unsupported text transform utilities. It lists 'uppercase', 'lowercase', and 'capitalize' as supported, while 'normal-case' is listed under 'none' (unsupported).\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-align.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"uppercase\",\n\"lowercase\",\n\"capitalize\",\n]}\nnone={[\n\"normal-case\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Scroll Snap Props\nDESCRIPTION: Renders the Compatibility component with a list of unsupported scroll snap type classes, including snap-none, snap-x, snap-y, snap-both, snap-mandatory, and snap-proximity.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-type.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"snap-none\",\n    \"snap-x\",\n    \"snap-y\",\n    \"snap-both\",\n    \"snap-mandatory\",\n    \"snap-proximity\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Overscroll Behavior in NativeWind\nDESCRIPTION: Renders the Usage component that likely contains examples of how to use overscroll behavior utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overscroll-behavior.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display compatibility information and usage instructions for background attachment styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-attachment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Sepia Documentation in JavaScript/MDX\nDESCRIPTION: This snippet imports external MDX components for Usage and Compatibility sections of the Backdrop Sepia documentation in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-sepia.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for Backdrop Opacity in JSX\nDESCRIPTION: This code snippet renders the Usage component, which likely provides instructions on how to use backdrop opacity utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-opacity.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Hue Rotate Documentation in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective files. These components are used to display usage instructions and compatibility information for the Hue Rotate feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/hue-rotate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Text Decoration Documentation\nDESCRIPTION: Imports required MDX components for compatibility and usage documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Touch Action Documentation in React\nDESCRIPTION: Imports reusable MDX components for documenting touch action utilities in NativeWind. The file imports Usage and Compatibility components to display implementation examples and platform support information.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/touch-action.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Documentation Components\nDESCRIPTION: Imports required documentation components for text color functionality from parent directory files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Table Layout Components\nDESCRIPTION: Imports the compatibility and usage documentation components for table layout implementation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/table-layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Component Dependencies for Box Sizing Documentation\nDESCRIPTION: Imports the Compatibility and Usage MDX components from parent directory files to be used in the Box Sizing documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/box-sizing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Background Color Compatibility Component\nDESCRIPTION: Renders a Compatibility component showing supported background color utilities and unsupported ones.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/backgrounds/background-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"bg-{n}\",\n\"bg-[n]\",\n]}\nnone={[\n\"bg-inherit\",\n\"bg-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Compatibility Component Implementation\nDESCRIPTION: JSX component implementation showing supported text alignment classes in NativeWind including left, center, right, justify, start and end alignments.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-transform.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"text-left\",\n\"text-center\",\n\"text-right\",\n\"text-justify\",\n\"text-start\",\n\"text-end\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Props in JSX\nDESCRIPTION: This code snippet renders the Compatibility component with a 'none' prop. The prop contains an array of 'will-change' values that are likely not supported or have special considerations in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/will-change.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"will-change-auto\",\n    \"will-change-scroll\",\n    \"will-change-contents\",\n    \"will-change-transform\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports Compatibility and Usage components from relative paths. These components are likely used to display compatibility information and usage instructions for scroll padding utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-padding.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use the backdrop hue rotate feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-hue-rotate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX\nDESCRIPTION: Imports reusable documentation components for usage and compatibility sections from external MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Opacity Documentation in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for backdrop opacity utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-opacity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Border Collapse Documentation\nDESCRIPTION: Imports reusable MDX components for compatibility and usage documentation related to border collapse functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/border-collapse.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Improved Core Component Support in NativeWind\nDESCRIPTION: Demonstrates the improved handling of React Native core components in NativeWind v4, which now maps styles to props more intelligently.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/blog/2023-11-01-v4-announcement.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// You write\n<ActivityIndicator className=\"bg-black text-white\" />\n\n// ❌ NativeWind v2\n<ActivityIndicator style={{ backgroundColor: \"rgba(0, 0, 0, 1)\", color: \"rgba(255, 255, 255, 1)\" }}/>\n\n// ✅ NativeWind v4\n<ActivityIndicator color=\"rgba(255, 255, 255, 1)\" style={{ backgroundColor: \"rgba(0, 0, 0, 1)\" }}/>\n```\n\n----------------------------------------\n\nTITLE: Importing Font Weight Components in JSX\nDESCRIPTION: Imports required compatibility and usage components for font weight documentation from relative MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-weight.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Justify Items Documentation in MDX\nDESCRIPTION: Imports the Compatibility and Usage components from parent directory files to be used in the Justify Items documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-items.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in MDX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display compatibility information and usage guidelines for background origin utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-origin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: NativeWind Text Color Compatibility Component\nDESCRIPTION: JSX component that specifies supported and unsupported text color features in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"text-{n}\",\n\"text-[n]\",\n]}\nnone={[\n\"text-inherit\",\n\"text-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Backdrop Hue Rotate Classes in JSX\nDESCRIPTION: This snippet renders the Compatibility component, passing an array of backdrop hue rotate classes that are not compatible. This provides information about which backdrop hue rotate classes are not supported in the current context.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-hue-rotate.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"backdrop-hue-rotate-0\",\n    \"backdrop-hue-rotate-15\",\n    \"backdrop-hue-rotate-30\",\n    \"backdrop-hue-rotate-60\",\n    \"backdrop-hue-rotate-90\",\n    \"backdrop-hue-rotate-180\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Mix Blend Mode in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components. The Compatibility component is passed an array of mix blend mode values that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/mix-blend-mode.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"mix-blend-normal\",\n    \"mix-blend-multiply\",\n    \"mix-blend-screen\",\n    \"mix-blend-overlay\",\n    \"mix-blend-darken\",\n    \"mix-blend-lighten\",\n    \"mix-blend-color-dodge\",\n    \"mix-blend-color-burn\",\n    \"mix-blend-hard-light\",\n    \"mix-blend-soft-light\",\n    \"mix-blend-difference\",\n    \"mix-blend-exclusion\",\n    \"mix-blend-hue\",\n    \"mix-blend-saturation\",\n    \"mix-blend-color\",\n    \"mix-blend-luminosity\",\n    \"mix-blend-plus-lighter\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Compatibility and Usage Components\nDESCRIPTION: Imports reusable Compatibility and Usage components from relative paths. These components are likely used to provide consistent documentation across different NativeWind features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-content.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Float Documentation Components\nDESCRIPTION: Imports reusable documentation components for compatibility and usage information related to float styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/floats.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Gradient Color Stop Props\nDESCRIPTION: This JSX code renders the Compatibility component with a 'none' prop containing an array of gradient color stop utility classes that are not compatible. It includes 'from-', 'via-', and 'to-' prefixed classes with various color values and placeholders.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/gradient-color-stops.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"from-inherit\",\n    \"from-current\",\n    \"from-transparent\",\n    \"from-black\",\n    \"from-white\",\n    \"from-{n}\",\n    \"from-[n]\",\n    \"via-inherit\",\n    \"via-current\",\n    \"via-transparent\",\n    \"via-black\",\n    \"via-white\",\n    \"via-{n}\",\n    \"via-[n]\",\n    \"to-inherit\",\n    \"to-current\",\n    \"to-transparent\",\n    \"to-black\",\n    \"to-white\",\n    \"to-{n}\",\n    \"to-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Font Variant Components\nDESCRIPTION: Imports Compatibility and Usage components from parent directory for font variant numeric documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-variant-numeric.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Scale Component Dependencies\nDESCRIPTION: Imports required compatibility and usage components from parent directory MDX files for the Scale documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/scale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Running NativeWind Website Locally\nDESCRIPTION: Alternative command to start the NativeWind website local development server by navigating to the website directory and using Docusaurus directly. This is the current working method.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd apps/website; npx docusaurus start\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Text Decoration Documentation\nDESCRIPTION: Imports compatibility and usage components from parent directory for text decoration documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Order Components\nDESCRIPTION: Import statements for compatibility and usage components used in the Order documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/order.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX for NativeWind Grid Auto Flow\nDESCRIPTION: Imports reusable MDX components for displaying usage examples and compatibility information for Grid Auto Flow functionality in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Background Image Compatibility Component Usage\nDESCRIPTION: Renders a Compatibility component that specifies unsupported background-related utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-image.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"bg-none\",\n    \"bg-gradient-to-t\",\n    \"bg-gradient-to-tr\",\n    \"bg-gradient-to-r\",\n    \"bg-gradient-to-br\",\n    \"bg-gradient-to-b\",\n    \"bg-gradient-to-bl\",\n    \"bg-gradient-to-l\",\n    \"bg-gradient-to-tl\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Font Style Compatibility Component Usage\nDESCRIPTION: Renders a Compatibility component that specifies supported font style utilities including 'italic' and 'not-italic' classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-style.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"italic\",\n\"not-italic\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX/MDX\nDESCRIPTION: Imports reusable documentation components for the justify content page, including compatibility information and usage examples that will be rendered in the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Max-Height Components\nDESCRIPTION: Imports required compatibility and usage components for max-height documentation\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/max-height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Documentation\nDESCRIPTION: This code imports MDX components for documentation purposes in NativeWind. It imports a Compatibility component and a Usage component from relative paths to be used in the Justify Self documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/justify-self.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Documentation Components\nDESCRIPTION: Imports required documentation components for compatibility and usage information.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/line-height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from their respective files. These components are used to render usage instructions and compatibility information for the line clamp feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/line-clamp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Fill Documentation\nDESCRIPTION: This code snippet imports necessary components for the fill documentation page in NativeWind. It includes a Compatibility component and a custom RNSVG component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/fill.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport RNSVG from \"./_rn-svg.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Documents version changes and dependency updates for nativewind-expo-router package, showing its relationship with nativewind core package versions.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/examples/expo-router/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# nativewind-expo-router\n\n## 1.0.61\n\n### Patch Changes\n\n- Updated dependencies [0bb61b4]\n  - nativewind@4.1.23\n\n## 1.0.60\n\n### Patch Changes\n\n- Updated dependencies [5510db3]\n- Updated dependencies [6fdf899]\n- Updated dependencies [04212e8]\n  - nativewind@4.1.22\n\n## 1.0.1\n\n### Patch Changes\n\n- Updated dependencies\n  - nativewind@4.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing Scale Component Dependencies\nDESCRIPTION: Imports required compatibility and usage components from parent directory MDX files\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/scale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports reusable documentation components for compatibility and usage information to be displayed on the cursor styling documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from specific files. These components are likely used to render the usage instructions and compatibility information for hyphens in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/hyphens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use the line clamp feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/line-clamp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Position Components\nDESCRIPTION: Imports compatibility and usage documentation components for position styling in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/position.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Usage Component\nDESCRIPTION: Renders the imported Usage component, which likely contains standardized usage instructions for the Align Content feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-content.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Font Size Components\nDESCRIPTION: Imports the compatibility and usage components for font size documentation in NativeWind using MDX imports.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/font-size.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Transition Duration Documentation\nDESCRIPTION: Imports required MDX components for building the transition duration documentation page, including compatibility, usage, and animation warning components.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/transition-duration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\nimport AnimationWarning from \"./_animation-warning.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing useLocation Hook from Docusaurus Router in JavaScript\nDESCRIPTION: This snippet imports the useLocation hook from the Docusaurus router, which is used to access the current URL path.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useLocation } from \"@docusaurus/router\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Outline Width Documentation in JSX\nDESCRIPTION: This code imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for outline width styles.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Animation Documentation Components\nDESCRIPTION: Imports required MDX components for the animation documentation page, including compatibility info, usage instructions, and animation warnings.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/animation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\nimport AnimationWarning from \"./_animation-warning.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Using Twitter Tweet Embed Component\nDESCRIPTION: Shows how to implement the TwitterTweetEmbed component with a specific tweet ID for embedding a tweet in the application interface.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/goals.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<TwitterTweetEmbed tweetId={\"1251635173445304321\"} />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Imports shared MDX components for compatibility and usage documentation sections that are reused across the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/caption-side.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to render specific sections of the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/will-change.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: Imports the Compatibility and Usage components from parent directory files that are used to display usage instructions and compatibility information for caret color styling in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/caret-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Min-Width Compatibility Component\nDESCRIPTION: Renders the Compatibility component showing supported min-width utilities (min-w-0, min-w-[n], min-w-full) and unsupported utilities (min-w-min, min-w-max, min-w-fit).\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/min-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"min-w-0\", \"min-w-[n]\", \"min-w-full\"]}\n  none={[\"min-w-min\", \"min-w-max\", \"min-w-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Imports required MDX components for compatibility and usage documentation sections\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-thickness.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Grid Template Columns Documentation in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from relative paths. These components are used to render usage instructions and compatibility information for grid template columns in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-template-columns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Outline Style Documentation in JSX\nDESCRIPTION: This code snippet imports two components: Compatibility from a relative path '../_compatibility.mdx' and Usage from '../_usage.mdx'. These components are used to provide usage instructions and compatibility information for outline styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-offset.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Compatibility Component\nDESCRIPTION: Renders the Compatibility component with supported translation properties for both x and y axes, including fixed and arbitrary values.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/translate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"translate-x-{n}\",\n    \"translate-x-[n]\",\n    \"translate-y-{n}\",\n    \"translate-y-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This code renders the Usage and Compatibility components within the Word Break documentation. The Compatibility component is passed props indicating unsupported word break properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/word-break.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"break-normal\",\n    \"word-break: normal\",\n    \"break-words\",\n    \"break-all\",\n    \"break-keep\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Transition Property Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components for the transition property documentation page. It includes Compatibility and Usage components, as well as a specific AnimationWarning component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/transition-property.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\nimport AnimationWarning from \"./_animation-warning.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Height Documentation in JSX\nDESCRIPTION: This code imports two components, Compatibility and Usage, from separate files to be used in the height utility documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Twitter Tweet Embed Component\nDESCRIPTION: Demonstrates importing the TwitterTweetEmbed component from the react-twitter-embed package for embedding tweets in the application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/goals.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Imports shared MDX components for usage and compatibility documentation sections\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/break-after.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Scroll Snap Align in NativeWind\nDESCRIPTION: This code imports reusable documentation components (Compatibility and Usage) from parent directory files. These components are then used to build the Scroll Snap Align documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-align.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX\nDESCRIPTION: Imports reusable documentation components for compatibility and usage sections from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/spacing/padding.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Text Decoration Documentation\nDESCRIPTION: Imports reusable MDX components for compatibility and usage documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration-style.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for NativeWind Text Transform Documentation\nDESCRIPTION: This code imports the Compatibility and Usage components from relative paths. These components are likely used to render usage instructions and compatibility information for text transform utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-align.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Min-Height Compatibility Component\nDESCRIPTION: Renders a compatibility matrix showing supported and unsupported min-height values in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/min-height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"min-h-0\", \"min-h-[n]\", \"min-h-full\"]}\n  none={[\"min-h-min\", \"min-h-max\", \"min-h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Border Spacing Documentation in JSX\nDESCRIPTION: This code snippet imports two components: Compatibility from a relative path and Usage from another relative path. These components are likely used to display usage instructions and compatibility information for border spacing in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/tables/border-spacing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Documentation Components\nDESCRIPTION: Imports required documentation components for compatibility and usage sections from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/spacing/margin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Height Documentation Components\nDESCRIPTION: Renders the compatibility component with supported and unsupported height utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"h-{n}\", \"h-[n]\", \"h-full\", \"h-screen\"]}\n  none={[\"h-auto\", \"h-min\", \"h-max\", \"h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Translation Components\nDESCRIPTION: Imports necessary components for translation documentation, including compatibility and usage components from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/translate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Width Documentation\nDESCRIPTION: Imports reusable MDX components for displaying usage examples and compatibility information in the NativeWind width documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n\n# Width\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  supported={[\"w-{n}\", \"w-[n]\", \"w-full\", \"w-screen\"]}\n  none={[\"w-auto\", \"w-min\", \"w-max\", \"w-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Twitter Tweet Embed Component\nDESCRIPTION: Demonstrates the import of TwitterTweetEmbed component from react-twitter-embed package for embedding tweets in the application.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/goals.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n```\n\n----------------------------------------\n\nTITLE: Cloning NativeWind Repository\nDESCRIPTION: Commands for cloning the forked NativeWind repository and navigating to the project directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/<YOUR_GITHUB_USERNAME>/nativewind\n\n$ cd nativewind\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Documentation Components\nDESCRIPTION: Renders the Usage and Compatibility components with specific props for scroll snap stop functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-stop.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility none={[\"snap-normal\", \"snap-always\"]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for opacity styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/opacity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Max-Height Component Documentation\nDESCRIPTION: Renders the compatibility component with supported and unsupported max-height values in NativeWind\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/max-height.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"max-h-0\",\n    \"max-h-[n]\",\n    \"max-h-{n}\",\n    \"max-h-full\",\n    \"max-h-screen\",\n  ]}\n  none={[\"max-h-min\", \"max-h-max\", \"max-h-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports reusable Compatibility and Usage components from relative paths. These components are likely used to provide consistent documentation across different features in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/transform-origin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Scale Component Compatibility Definition\nDESCRIPTION: Defines supported scale transformation properties including numeric and custom values for both x and y axes\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/scale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\n    \"scale-{n}\",\n    \"scale-[n]\",\n    \"scale-x-{n}\",\n    \"scale-x-[n]\",\n    \"scale-y-{n}\",\n    \"scale-y-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Text Indent Components\nDESCRIPTION: Imports required components for text indentation documentation, including compatibility and usage components from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-indent.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This JSX code renders the Usage and Compatibility components. The Compatibility component is passed a 'none' prop with an array of grid column-related classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-column.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"col-auto\",\n    \"col-span-1\",\n    \"col-span-2\",\n    \"col-span-3\",\n    \"col-span-4\",\n    \"col-span-5\",\n    \"col-span-6\",\n    \"col-span-7\",\n    \"col-span-8\",\n    \"col-span-9\",\n    \"col-span-10\",\n    \"col-span-11\",\n    \"col-span-12\",\n    \"col-span-full\",\n    \"col-start-1\",\n    \"col-start-2\",\n    \"col-start-3\",\n    \"col-start-4\",\n    \"col-start-5\",\n    \"col-start-6\",\n    \"col-start-7\",\n    \"col-start-8\",\n    \"col-start-9\",\n    \"col-start-10\",\n    \"col-start-11\",\n    \"col-start-12\",\n    \"col-start-13\",\n    \"col-start-auto\",\n    \"col-end-1\",\n    \"col-end-2\",\n    \"col-end-3\",\n    \"col-end-4\",\n    \"col-end-5\",\n    \"col-end-6\",\n    \"col-end-7\",\n    \"col-end-8\",\n    \"col-end-9\",\n    \"col-end-10\",\n    \"col-end-11\",\n    \"col-end-12\",\n    \"col-end-13\",\n    \"col-end-auto\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Box Decoration Break Documentation in JSX\nDESCRIPTION: Imports reusable documentation components for Usage and Compatibility sections that are used to build the Box Decoration Break documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/box-decoration-break.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Pod Dependencies for Framework-less RN\nDESCRIPTION: Command to install iOS pod dependencies after adding react-native-reanimated for framework-less React Native projects.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/installation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions in Tailwind Config\nDESCRIPTION: Shows how to properly configure the content section in tailwind.config.js to include all necessary file extensions for component transformation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n-   './src/**/*.{html,js}',\n+   './src/**/*.{html,js,jsx}'\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Transition Delay Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components for the Transition Delay documentation page. It includes a Compatibility component, a Usage component, and an AnimationWarning component.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/transition-delay.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../usage.mdx\";\nimport AnimationWarning from \"./_animation-warning.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in Markdown/JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to render specific sections of the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-wrap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing GrayScale Component Dependencies in JSX\nDESCRIPTION: This code snippet imports the necessary components for the GrayScale documentation. It includes a Compatibility component and a Usage component from relative paths.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/grayscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JavaScript\nDESCRIPTION: This snippet imports two components: Compatibility from a relative path and Usage from another relative path. These components are likely used to display compatibility information and usage instructions for NativeWind features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-clip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Whitespace Components with Compatibility Props\nDESCRIPTION: Renders the Compatibility component with a list of unsupported whitespace properties in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/whitespace.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"whitespace-normal\",\n    \"whitespace-nowrap\",\n    \"whitespace-pre\",\n    \"whitespace-pre-line\",\n    \"whitespace-pre-wrap\",\n    \"whitespace-break-spaces\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Documentation\nDESCRIPTION: Imports reusable MDX components for handling compatibility and usage documentation sections in the NativeWind scroll behavior documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-behaviour.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Documentation\nDESCRIPTION: Imports shared MDX components for compatibility and usage documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-stop.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing useLocation Hook from Docusaurus Router in JavaScript\nDESCRIPTION: This snippet imports the useLocation hook from the Docusaurus router, which is used to access the current URL path.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useLocation } from \"@docusaurus/router\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Backdrop GrayScale Documentation\nDESCRIPTION: This code imports external MDX components for usage instructions and compatibility information related to the Backdrop GrayScale feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-grayscale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: This snippet imports two documentation components: Compatibility and Usage. These components are likely used to render specific sections of the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/list-style-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet demonstrates how to render the Usage and Compatibility components within the documentation. The Compatibility component is passed props to specify supported translate properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/translate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  supported={[\n    \"translate-x-{n}\",\n    \"translate-x-[n]\",\n    \"translate-y-{n}\",\n    \"translate-y-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective MDX files. These components are likely used to render the usage instructions and compatibility information for the backdrop hue rotate feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-hue-rotate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Stroke Documentation Components\nDESCRIPTION: Imports required components for stroke documentation, including compatibility information and React Native SVG specific content.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/stroke.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport RNSVG from \"./_rn-svg.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Module Declaration Error Example\nDESCRIPTION: Shows an example of the module declaration error that can occur when node_modules are unexpectedly processed.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/node_modules/react-native-web/dist/vendor/react-native/FlatList/index.js 105:7\nModule parse failed: Identifier 'StyleSheet' has already been declared (105:7)\nFile was processed with these loaders:\n\n./node_modules/@expo/webpack-config/node_modules/babel-loader/lib/index.js\nYou may need an additional loader to handle the result of these loaders.\n| import deepDiffer from \"../deepDiffer\";\n| import * as React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Transform Origin Documentation\nDESCRIPTION: Imports shared MDX components for compatibility and usage documentation sections related to transform origin utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/transform-origin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing External Link with Image in React/JSX\nDESCRIPTION: Creates an external link component that opens in a new tab, containing an SVG image with specific styling for vertical alignment and display properties. The image width is fixed at 20 pixels while height maintains aspect ratio.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_tw-docs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a target=\"_blank\" href={props.href}><img src=\"/img/tw.svg\" width={20}  style={{ display: \"inline-block\", verticalAlign: \"middle\", height: \"100%\"}} /></a>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Website\nDESCRIPTION: Command for running the NativeWind documentation website locally.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run website\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Invert Documentation in JSX\nDESCRIPTION: This code snippet imports two components: Compatibility and Usage. These components are likely used to render specific sections of the documentation for the Backdrop Invert feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-invert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Max-Height Documentation Components\nDESCRIPTION: Import statements for Compatibility and Usage components used in the max-height documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/sizing/max-height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Twitter Tweet Embed Component Usage\nDESCRIPTION: Shows how to use the TwitterTweetEmbed component to embed a specific tweet using its tweet ID.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/guides/goals.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<TwitterTweetEmbed tweetId={\"1251635173445304321\"} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Collapsible Legend with HTML and Markdown\nDESCRIPTION: This code snippet creates a collapsible details element containing a legend that explains NativeWind's styling support indicators. It uses a combination of HTML for structure and Markdown for content formatting.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/_legend.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<details style={{ width: 500 }}>\n  <summary>Legend</summary>\n\n### Class\n\n`-{n}` Supports values from theme\n\n`-[n]` Supports arbitrary values\n\n### Icon\n\n✅ Full support\n\n✔️ Partial support on native\n\n🧪 Experimental support on native\n\n:iphone: Native only\n\n🌐 Web only\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components in Grid Auto Columns Documentation\nDESCRIPTION: Renders the imported Usage component and Compatibility component with specific configuration for Grid Auto Columns. The Compatibility component is configured to indicate that certain auto-cols utilities are not supported.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-columns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n## Compatibility\n\n<Compatibility\n  none={[\"auto-cols-auto\", \"auto-cols-min\", \"auto-cols-max\", \"auto-cols-fr\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Legend Component in JSX\nDESCRIPTION: Renders the imported Legend component at the end of the table.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_compatibility.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Legend />\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch for Changes\nDESCRIPTION: Command for creating and checking out a new branch for development work.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b <@YOUR_GITHUB_USERNAME>/<MEANINGFUL_DESCRIPTOR>\n```\n\n----------------------------------------\n\nTITLE: Displaying Fill Compatibility in NativeWind Documentation\nDESCRIPTION: This code renders the Compatibility component with specific props to show which fill utilities are supported and which are not available in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/fill.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"fill-{n}\", \"fill-[n]\"]}\n  none={[\"fill-inherit\", \"fill-current\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to provide reusable documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/translate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Documentation Components\nDESCRIPTION: Imports required documentation components including compatibility and usage information for background image functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-image.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and RNSVG Components in MDX\nDESCRIPTION: This snippet imports the Compatibility component from a relative path and the RNSVG component from a local file. These components are used to provide compatibility information and React Native SVG usage examples in the documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/stroke-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport RNSVG from \"./_rn-svg.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for List Style Position Documentation in JSX\nDESCRIPTION: This snippet imports two components: Compatibility and Usage, which are used to provide information about list style position utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/list-style-position.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Border Width Component Dependencies\nDESCRIPTION: Imports required compatibility and usage components from parent directory MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-width.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Margin Documentation Components\nDESCRIPTION: This code snippet imports two components: Compatibility and Usage, which are used to display documentation for NativeWind margin utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/spacing/margin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component for NativeWind Outline Color\nDESCRIPTION: Renders the Usage component to provide instructions on how to use outline colors in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering RNSVG Component for Usage Examples\nDESCRIPTION: This code renders the RNSVG component, which likely contains examples of how to use stroke width with React Native SVG.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/svg/stroke-width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RNSVG />\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to display usage instructions and compatibility information for border styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/border-style.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Grid Auto Rows Documentation in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to render specific sections of the Grid Auto Rows documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-auto-rows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Documentation Components\nDESCRIPTION: Imports required documentation components for Compatibility and Usage sections from parent directory.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/justify-items.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Flex Direction Documentation in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to provide reusable documentation sections for the flex direction feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-direction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in Markdown/JSX\nDESCRIPTION: This snippet renders the Usage component, which likely contains instructions on how to use the Flex Wrap utility in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-wrap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Text Alignment Compatibility Information\nDESCRIPTION: Renders a Compatibility component that lists all supported text alignment classes in NativeWind, including left, center, right, justify, start, and end alignments.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-transform.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"text-left\",\n\"text-center\",\n\"text-right\",\n\"text-justify\",\n\"text-start\",\n\"text-end\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Component for React Native Installation\nDESCRIPTION: This code imports a custom NPM component, likely used for rendering installation instructions. The component is imported from a relative path '../_npm.mdx'.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/getting-started/_install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NPM from \"../_npm.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Transform Compatibility Component\nDESCRIPTION: Renders a Compatibility component with supported and unsupported text transform utilities for NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-align.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"uppercase\",\n\"lowercase\",\n\"capitalize\",\n]}\nnone={[\n\"normal-case\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running NativeWind Website from Monorepo Root\nDESCRIPTION: Command to start the NativeWind website from the root of the monorepo using the npm script. This is the preferred method but noted as currently not working.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run website\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Text Decoration Documentation in MDX\nDESCRIPTION: Imports the Compatibility and Usage components from parent directory for documenting text decoration styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-decoration-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Scroll Margin Documentation in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from external files. These components are used to display usage instructions and compatibility information for scroll margin utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-margin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Text Decoration Props\nDESCRIPTION: Renders a Compatibility component with supported and unsupported text decoration color options. Specifies which decoration values are supported and which ones are not available.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"decoration-{n}\",\n\"decoration-[n]\",\n]}\nnone={[\n\"decoration-inherit\",\n\"decoration-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports compatibility and usage components from parent directory MDX files for background position documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/backgrounds/background-position.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n# Background Position\n\n<Compatibility\n  none={[\n    \"bg-bottom\",\n    \"bg-center\",\n    \"bg-left\",\n    \"bg-left-bottom\",\n    \"bg-left-top\",\n    \"bg-right\",\n    \"bg-right-bottom\",\n    \"bg-right-top\",\n    \"bg-top\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports required documentation components for handling usage and compatibility sections of text underline offset documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-underline-offset.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Mix Blend Mode Documentation in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective files. These components are used to display usage instructions and compatibility information for Mix Blend Mode.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/mix-blend-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Configuration\nDESCRIPTION: Configuration for the Compatibility component specifying supported font style properties including italic and not-italic.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-style.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"italic\",\n\"not-italic\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in MDX\nDESCRIPTION: This snippet renders the Usage component, which likely contains reusable usage instructions for flex direction styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/flex-direction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Grid Row Start/End Documentation in JSX\nDESCRIPTION: Imports the Compatibility and Usage components from parent directories to be used in the grid row start/end documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-row.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet imports custom components for displaying usage and compatibility information related to object position styling in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/object-position.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Whitespace Components in JSX\nDESCRIPTION: Imports compatibility and usage components for whitespace documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/whitespace.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Letter Spacing Compatibility Component\nDESCRIPTION: Renders a Compatibility component that lists all supported letter spacing (tracking) utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/letter-spacing.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"tracking-tighter\",\n\"tracking-tight\",\n\"tracking-normal\",\n\"tracking-wide\",\n\"tracking-wider\",\n\"tracking-widest\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Component Dependencies in JSX\nDESCRIPTION: This code snippet imports the necessary components for the Brightness documentation. It includes a Compatibility component and a Usage component from relative paths.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/brightness.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains reusable content explaining how to use the Transform Origin feature in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/transform-origin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Importing Font Style Components in MDX\nDESCRIPTION: Imports compatibility and usage components for font style documentation in NativeWind framework.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/font-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Row Reverse Layout with NativeWind in React Native\nDESCRIPTION: This snippet shows how to create a reversed horizontal layout using flex-row-reverse in NativeWind. It creates a StyledView with flex-row-reverse class and renders three Box components inside it.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/flex-direction.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst Box = ({ className = '', ...props }) => (\n  <StyledText className={`flex text-center h-14 w-14 m-2 justify-center items-center text-white bg-fuchsia-500 rounded ${className}`} {...props}/>\n)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex flex-row-reverse h-screen\">\n      <Box>01</Box>\n      <Box>02</Box>\n      <Box>03</Box>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Outline Offset Documentation in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective files. These components are used to structure the documentation for outline offset in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/outline-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../compatibility.mdx\";\nimport Usage from \"../usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Animation Documentation Components\nDESCRIPTION: Renders the imported MDX components with compatibility information for various animation classes. Includes experimental animation features like spin, ping, and bounce.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transitions-animation/animation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  experimental={[\n    \"animate-none\",\n    \"animate-spin\",\n    \"animate-ping\",\n    \"animate-bounce\",\n    \"animate-[n]\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing List Style Type Documentation Components\nDESCRIPTION: Imports required documentation components for list style type functionality, including compatibility and usage information from separate MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/list-style-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Shadows with NativeWind in React Native\nDESCRIPTION: Example demonstrating how to apply box shadows to React Native components using NativeWind's styled components and className props. The code shows shadow implementation on both View and Text components with proper styling hierarchy.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/box-shadow.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text, View } from 'react-native';\nimport { styled } from 'nativewind';\n\nconst StyledView = styled(View)\nconst StyledText = styled(Text)\n\nconst App = () => {\n  return (\n    <StyledView className=\"flex-1 items-center justify-center\">\n      <StyledView className=\"h-[50vh] items-center justify-center shadow\">\n        <StyledText className=\"text-slate-800 shadow\">Try editing me! 🎉</StyledText>\n      </StyledView>\n    </StyledView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Appearance Documentation\nDESCRIPTION: Imports MDX components for displaying compatibility and usage information related to appearance styling in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/appearance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing Rotate Documentation Components\nDESCRIPTION: Imports reusable documentation components for displaying compatibility and usage information for the rotate utility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/rotate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for NativeWind Place Content Documentation\nDESCRIPTION: Imports reusable MDX components for usage instructions and compatibility information that will be used in the documentation page for Place Content utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/place-items.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Resize Documentation Components\nDESCRIPTION: Imports reusable documentation components for compatibility and usage information to be displayed on the resize utility documentation page.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/resize.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Grid Column Documentation in JavaScript\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are likely used to render usage instructions and compatibility information for grid column utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/grid-column.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Scroll Snap Documentation\nDESCRIPTION: Imports the required MDX components for displaying compatibility and usage information for scroll snap type functionality.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/scroll-snap-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from relative paths. These components are likely used to provide reusable documentation sections across multiple files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/flexbox/align-self.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Enabling divideOpacity in tailwind.config.js for NativeWind\nDESCRIPTION: This code snippet shows how to enable the divideOpacity core plugin in the tailwind.config.js file for NativeWind. This is necessary if you need to use dynamic opacity changes for divide colors in native implementations.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /* ...  */\n  corePlugin: {\n    divideOpacity: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tailwind Config for NativeWind\nDESCRIPTION: This code snippet demonstrates how to configure the tailwind.config.js file for use with NativeWind. It includes the nativewind/preset and sets up the content sources.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/troubleshooting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"<content>\"],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Drop Shadow Documentation in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from relative paths. These components are used to structure the documentation for the Drop Shadow feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/drop-shadow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Align Self Documentation Components in JSX\nDESCRIPTION: This code snippet imports and renders components for Usage and Compatibility information related to Align Self in NativeWind. It includes a list of supported align-self properties.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/align-self.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n\n# Align Self\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility\nsupported={[\n\"self-auto\",\n\"self-start\",\n\"self-end\",\n\"self-center\",\n\"self-stretch\",\n\"self-baseline\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Compatibility and Usage Components\nDESCRIPTION: Imports the compatibility and usage documentation components from parent directory for the Justify Content feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/justify-content.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Backdrop Invert Documentation in JSX\nDESCRIPTION: This code snippet imports the Compatibility and Usage components from their respective files. These components are used to display usage instructions and compatibility information for the Backdrop Invert feature.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-saturate.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocked Module Transforms in Babel for NativeWind\nDESCRIPTION: Advanced Babel configuration that specifies which modules should not be transformed by NativeWind. This example blocks transformation for the 'react-select' module.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/guides/babel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// babel.config.js\nmodule.exports = {\n  plugins: [\n    [\n     \"nativewind/babel\"\n     { blockModuleTransform: [\"react-select\"] }\n    ]\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Invert in JSX\nDESCRIPTION: This code snippet renders the Usage component and the Compatibility component with specific props. The Compatibility component is given a 'none' prop with an array of saturate values that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/saturate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"saturate-0\",\n    \"saturate-50\",\n    \"saturate-100\",\n    \"saturate-150\",\n    \"saturate-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This code imports the Compatibility and Usage components from relative paths. These components are likely used to render documentation sections for opacity styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/opacity.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Break Inside Documentation in JSX\nDESCRIPTION: This snippet imports two components, Compatibility and Usage, from relative paths. These components are used to provide reusable content for the break-inside utility documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/break-inside.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Width Compatibility Component Implementation\nDESCRIPTION: Renders a compatibility matrix showing supported and unsupported width utilities in NativeWind. Demonstrates which width classes are available for use.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/width.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"w-{n}\", \"w-[n]\", \"w-full\", \"w-screen\"]}\n  none={[\"w-auto\", \"w-min\", \"w-max\", \"w-fit\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Justify Content Compatibility\nDESCRIPTION: Renders the Compatibility component with supported justify content properties including start, end, center, between, around, and evenly options.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/flexbox/justify-content.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"justify-start\",\n\"justify-end\",\n\"justify-center\",\n\"justify-between\",\n\"justify-around\",\n\"justify-evenly\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Hue Rotate in JSX\nDESCRIPTION: This code snippet renders the Usage and Compatibility components. The Compatibility component is passed an array of hue-rotate classes that are not compatible.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/hue-rotate.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"hue-rotate-0\",\n    \"hue-rotate-15\",\n    \"hue-rotate-30\",\n    \"hue-rotate-60\",\n    \"hue-rotate-90\",\n    \"hue-rotate-180\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code snippet renders the Usage component, which likely contains information about how to use the 'will-change' property in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/interactivity/will-change.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Skew Component Documentation\nDESCRIPTION: JSX markup for rendering the skew transformation documentation, including usage examples and compatibility information with supported skew classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/skew.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  supported={[\"skew-x-{n}\", \"skew-x-[n]\", \"skew-y-{n}\", \"skew-y-[n]\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility and Usage Components in JSX\nDESCRIPTION: This snippet imports the Compatibility and Usage components from their respective files. These components are likely used to render reusable documentation sections.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/divide-style.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage Component in JSX\nDESCRIPTION: This code renders the Usage component, which likely contains common usage instructions for the contrast utility.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/contrast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Component with Transform Origin Classes\nDESCRIPTION: Renders the Compatibility component with a list of unsupported transform origin utility classes in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/transforms/transform-origin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"origin-center\",\n    \"origin-top\",\n    \"origin-top-right\",\n    \"origin-right\",\n    \"origin-bottom-right\",\n    \"origin-bottom\",\n    \"origin-bottom-left\",\n    \"origin-left\",\n    \"origin-top-left\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: NativeWind Position Compatibility Component\nDESCRIPTION: Renders compatibility information for position properties, showing supported values (absolute, relative) and unsupported values (fixed, sticky)\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/position.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[ \"absolute\", \"relative\" ]}\nnone={[\n\"fixed\",\n\"sticky\"\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Overscroll Behavior in NativeWind\nDESCRIPTION: Imports reusable MDX components for displaying compatibility information and usage examples for NativeWind's overscroll behavior utilities.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/layout/overscroll-behavior.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"..//_compatibility.mdx\";\nimport Usage from \"..//_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Z-Index Documentation\nDESCRIPTION: Imports required MDX components for documenting z-index functionality, including compatibility and usage information.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/z-index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Rendering NativeWind Compatibility Component\nDESCRIPTION: JSX component that displays compatibility information for divide color utilities, showing supported and unsupported features.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/borders/divide-color.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"divide-{n}\",\n\"divide-[n]\",\n]}\nnone={[\n\"divide-inherit\",\n\"divide-current\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Content Documentation Components\nDESCRIPTION: Imports the Usage and Compatibility components from MDX files to compose the Content documentation page\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/content.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n# Content\n\n## Usage\n\n<Usage />\n\n## Compatibility\n\n<Compatibility none={[\"content-none\"]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Usage and Compatibility Components for Backdrop Brightness in JSX\nDESCRIPTION: This code renders the imported Usage and Compatibility components. The Compatibility component is provided with a 'none' prop containing an array of backdrop brightness classes that are not compatible or available.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/filters/backdrop-brightness.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Usage />\n\n<Compatibility\n  none={[\n    \"backdrop-brightness-0\",\n    \"backdrop-brightness-50\",\n    \"backdrop-brightness-75\",\n    \"backdrop-brightness-90\",\n    \"backdrop-brightness-95\",\n    \"backdrop-brightness-100\",\n    \"backdrop-brightness-105\",\n    \"backdrop-brightness-110\",\n    \"backdrop-brightness-125\",\n    \"backdrop-brightness-150\",\n    \"backdrop-brightness-200\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Configuration for Text Decorations\nDESCRIPTION: JSX component configuration specifying supported and unsupported text decoration styles in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-decoration.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\nsupported={[\n\"underline\",\n\"line-through\",\n\"no-underline\",\n]}\nnone={[\n\"overline\",\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Width Documentation Components\nDESCRIPTION: Imports shared MDX components for compatibility and usage documentation related to width utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Max-Width Documentation Components\nDESCRIPTION: Imports required components for rendering max-width documentation, including compatibility and usage information from separate MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/max-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Usage and Compatibility Components in JSX\nDESCRIPTION: This snippet imports Usage and Compatibility components from relative paths and renders them within the document. The Compatibility component is passed an array of supported background blend mode classes.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/effects/background-blend-mode.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n\n<Usage />\n\n<Compatibility\n  supported={[\n    \"bg-blend-normal\",\n    \"bg-blend-multiply\",\n    \"bg-blend-screen\",\n    \"bg-blend-overlay\",\n    \"bg-blend-darken\",\n    \"bg-blend-lighten\",\n    \"bg-blend-color-dodge\",\n    \"bg-blend-color-burn\",\n    \"bg-blend-hard-light\",\n    \"bg-blend-soft-light\",\n    \"bg-blend-difference\",\n    \"bg-blend-exclusion\",\n    \"bg-blend-hue\",\n    \"bg-blend-saturation\",\n    \"bg-blend-color\",\n    \"bg-blend-luminosity\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Screen Directory Header in Markdown\nDESCRIPTION: Simple markdown header indicating a screens documentation section\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/customization/screens.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Screens\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Skew Components\nDESCRIPTION: Imports for compatibility and usage components from NativeWind documentation system\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/transforms/skew.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Ring Offset Width Documentation in JSX\nDESCRIPTION: This code snippet imports two components, Compatibility and Usage, from relative paths. These components are used to structure the documentation for Ring Offset Width in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/borders/ring-offset-width.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Components\nDESCRIPTION: Imports required compatibility and usage components from relative MDX files.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/effects/box-shadow-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Background Color Components\nDESCRIPTION: Imports compatibility and usage components from relative MDX files for background color documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/backgrounds/background-color.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Height Documentation Components\nDESCRIPTION: Imports the necessary documentation components for displaying height-related compatibility and usage information in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/sizing/height.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\";\nimport Usage from \"../_usage.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing NativeWind Position Documentation Components\nDESCRIPTION: Imports required documentation components for NativeWind position styles, including compatibility and usage information\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/layout/position.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Legend Component in JavaScript\nDESCRIPTION: Imports a Legend component from a local Markdown file.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/_compatibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Legend from \"./_legend.md\";\n```\n\n----------------------------------------\n\nTITLE: Compatibility Component Implementation\nDESCRIPTION: Renders the Compatibility component with a list of unsupported text underline offset utilities in NativeWind.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/docs/tailwind/typography/text-underline-offset.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Compatibility\n  none={[\n    \"underline-offset-auto\",\n    \"underline-offset-0\",\n    \"underline-offset-1\",\n    \"underline-offset-2\",\n    \"underline-offset-4\",\n    \"underline-offset-8\",\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Text Transform Documentation Components\nDESCRIPTION: Imports reusable MDX documentation components for usage and compatibility sections of text transform documentation.\nSOURCE: https://github.com/nativewind/nativewind/blob/main/apps/website/versioned_docs/version-v2/tailwind/typography/text-align.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Compatibility from \"../_compatibility.mdx\"\nimport Usage from \"../_usage.mdx\"\n```"
  }
]