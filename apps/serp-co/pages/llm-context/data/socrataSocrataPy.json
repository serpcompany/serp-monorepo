[
  {
    "owner": "socrata",
    "repo": "socrata-py",
    "content": "TITLE: Create Dataset from CSV, Transform, Validate, Apply\nDESCRIPTION: Demonstrates creating a new dataset from a CSV, applying transformations like changing metadata, dropping columns, and adding calculated columns. It includes error validation using `wait_for_finish()` and `schema_errors_csv()`, and applies the changes via revision application. Required dependencies: `socrata.authorization.Authorization` and `socrata.Socrata`\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith open('cool_dataset.csv', 'rb') as file:\n    # Upload + Transform step\n\n    # revision is the *change* to the view in the catalog, which has not yet been applied.\n    # output is the OutputSchema, which is a change to data which can be applied via the revision\n    (revision, output) = Socrata(auth).create(\n        name = \"cool dataset\",\n        description = \"a description\"\n    ).csv(file)\n\n    # Transformation step\n    # We want to add some metadata to our column, drop another column, and add a new column which will\n    # be filled with values from another column and then transformed\n    output = output\\\n        .change_column_metadata('a_column', 'display_name').to('A Column!')\\\n        .change_column_metadata('a_column', 'description').to('Here is a description of my A Column')\\\n        .drop_column('b_column')\\\n        .add_column('a_column_squared', 'A Column, but times itself', 'to_number(`a_column`) * to_number(`a_column`)', 'this is a column squared')\\\n        .run()\n\n\n    # Validation of the results step\n    output = output.wait_for_finish()\n    # The data has been validated now, and we can access errors that happened during validation. For example, if one of the cells in `a_column` couldn't be converted to a number in the call to `to_number`, that error would be reflected in this error_count\n    assert output.attributes['error_count'] == 0\n\n    # If you want, you can get a csv stream of all the errors\n    errors = output.schema_errors_csv()\n    for line in errors.iter_lines():\n        print(line)\n\n    # Update step\n\n    # Apply the revision - this will make it public and available to make\n    # visualizations from\n    job = revision.apply(output_schema = output)\n\n    # This opens a browser window to your revision, and you will see the progress\n    # of the job\n    revision.open_in_browser()\n\n    # Application is async - this will block until all the data\n    # is in place and readable\n    job.wait_for_finish()\n```\n\n----------------------------------------\n\nTITLE: Create Dataset from CSV\nDESCRIPTION: Creates a new dataset from a CSV file using the Socrata API. It opens a local CSV file, uploads it to Socrata, and applies a revision to make the dataset public. The code demonstrates handling output schema transformations, error validation, and job completion.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith open('cool_dataset.csv', 'rb') as file:\n    (revision, output) = Socrata(auth).create(\n        name = \"cool dataset\",\n        description = \"a description\"\n    ).csv(file)\n\n    revision.apply(output_schema = output)\n```\n\n----------------------------------------\n\nTITLE: Create Dataset from Pandas DataFrame\nDESCRIPTION: Creates a new Socrata dataset from a Pandas DataFrame. It reads a CSV file into a Pandas DataFrame, then uploads this data structure to Socrata to create a new dataset. Requires the `pandas` library.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv('socrata-py/test/fixtures/simple.csv')\n# Do various Pandas-y changes and modifications, then...\n(revision, output) = Socrata(auth).create(\n    name = \"Pandas Dataset\",\n    description = \"Dataset made from a Pandas Dataframe\"\n).df(df)\n\n# Same code as above to apply the revision.\n```\n\n----------------------------------------\n\nTITLE: Uploading a Pandas DataFrame to a Source in Socrata-py (Python)\nDESCRIPTION: This code shows how to upload a Pandas DataFrame to a data source using the socrata-py library.  It first reads a CSV file into a Pandas DataFrame and then passes the DataFrame to the `df` method of the upload object. This method handles the conversion and upload of the DataFrame.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport pandas\ndf = pandas.read_csv('test/fixtures/simple.csv')\nupload = upload.df(df)\n```\n\n----------------------------------------\n\nTITLE: Transforming Data\nDESCRIPTION: This snippet showcases how to transform data within a Socrata dataset. It demonstrates changing column metadata (field name, description, display name), changing column transforms (data type conversion), and adding a new column with a calculated value. The `.run()` method applies the changes.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnew_output_schema = output\\\n    # Change the field_name of date to the_date\n    .change_column_metadata('date', 'field_name').to('the_date')\\\n    # Change the description of the celsius column\n    .change_column_metadata('celsius', 'description').to('the temperature in celsius')\\\n    # Change the display name of the celsius column\n    .change_column_metadata('celsius', 'display_name').to('Degrees (Celsius)')\\\n    # Change the transform of the_date column to to_fixed_timestamp(`date`)\n    .change_column_transform('the_date').to('to_fixed_timestamp(`date`)')\\\n    # Make the celsius column all numbers\n    .change_column_transform('celsius').to('to_number(`celsius`)')\\\n    # Add a new column, which is computed from the `celsius` column\n    .add_column('fahrenheit', 'Degrees (Fahrenheit)', '(to_number(`celsius`) * (9 / 5)) + 32', 'the temperature in celsius')\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Running OutputSchema Transformations (Python)\nDESCRIPTION: Demonstrates how to apply a series of changes to an OutputSchema, including modifying column metadata (field name, description, display name) and transforms, adding new columns, and then running all the changes using the `run` method. Method chaining is used for brevity.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\nnew_output_schema = output\\\n    # Change the field_name of date to the_date\\\n    .change_column_metadata('date', 'field_name').to('the_date')\\\n    # Change the description of the celsius column\\\n    .change_column_metadata('celsius', 'description').to('the temperature in celsius')\\\n    # Change the display name of the celsius column\\\n    .change_column_metadata('celsius', 'display_name').to('Degrees (Celsius)')\\\n    # Change the transform of the_date column to to_fixed_timestamp(`date`)\\\n    .change_column_transform('the_date').to('to_fixed_timestamp(`date`)')\\\n    # Make the celsius column all numbers\\\n    .change_column_transform('celsius').to('to_number(`celsius`)')\\\n    # Add a new column, which is computed from the `celsius` column\\\n    .add_column('fahrenheit', 'Degrees (Fahrenheit)', '(to_number(`celsius`) * (9 / 5)) + 32', 'the temperature in celsius')\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Applying the Upsert Job\nDESCRIPTION: This snippet shows how to apply the transformed data to a Socrata dataset using an upsert operation. It creates an upsert job, retrieves its progress, and waits for it to complete, printing progress updates along the way.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Now we have transformed our data into the shape we want, let's do an upsert\njob = revision.apply(output_schema = output_schema)\n\n# This will complete the upsert behind the scenes. If we want to\n# re-fetch the current state of the upsert job, we can do so\njob = job.show()\n\n# To get the progress\nprint(job.attributes['log'])\n\n# So maybe we just want to wait here, printing the progress, until the job is done\njob.wait_for_finish(progress = lambda job: print(job.attributes['log']))\n```\n\n----------------------------------------\n\nTITLE: Changing Column Transform in OutputSchema (Python)\nDESCRIPTION: Demonstrates how to change the transform of a specific column within an OutputSchema object using the `change_column_transform` method and the `.to` function for applying the new transform. This includes transforming a date column to a fixed timestamp and converting a celsius column to a number.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nnew_output_schema = output\\\n    .change_column_transform('the_date').to('to_fixed_timestamp(`date`)')\\\n    # Make the celsius column all numbers\\\n    .change_column_transform('celsius').to('to_number(`celsius`)')\\\n    # Add a new column, which is computed from the `celsius` column\\\n    .add_column('fahrenheit', 'Degrees (Fahrenheit)', '(to_number(`celsius`) * (9 / 5)) + 32', 'the temperature in celsius')\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Dropping a Column from OutputSchema (Python)\nDESCRIPTION: Shows how to remove a column from an OutputSchema using the `drop_column` method. This method returns the OutputSchema object itself, allowing for method chaining. The `run` method is called to apply the changes.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\nnew_output_schema = output\\\n    .drop_column('foo')\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Adding New Column based on Conditional Logic\nDESCRIPTION: This snippet shows how to add a new column to a dataset based on a conditional expression. It adds a 'is_hot' column, indicating whether the day was hot based on the 'celsius' value.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nnew_output_schema = output\n    .add_column('is_hot', 'Was the day hot?', 'to_number(`celsius`) >= 23')\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Geocoding Transformation\nDESCRIPTION: This snippet demonstrates how to geocode address data using the `geocode` function.  It combines address, city, state, and zip code columns into a single 'location' column of type Point, then removes the original address columns.  Requires valid address information in the source columns.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\noutput = output\\\n    .add_column('location', 'Incident Location', 'geocode(`address`, `city`, `state`, `zip`)')\\\n    .drop_column('address')\\\n    .drop_column('city')\\\n    .drop_column('state')\\\n    .drop_column('zip')\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Adding Column to OutputSchema Python\nDESCRIPTION: This function adds a new column to an OutputSchema.  It takes the new column's `field_name`, `display_name`, `transform_expr`, and `description`.  The `field_name` must be unique. The function returns the OutputSchema itself, allowing for easy method chaining.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: field_name, display_name, transform_expr, description\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_output_schema = output\n    # Add a new column, which is computed from the `celsius` column\n    .add_column('fahrenheit', 'Degrees (Fahrenheit)', '(to_number(`celsius`) * (9 / 5)) + 32', 'the temperature in celsius')\n    # Add a new column, which is computed from the `celsius` column\n    .add_column('kelvin', 'Degrees (Kelvin)', '(to_number(`celsius`) + 273.15')\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Update Dataset Using Configuration\nDESCRIPTION: Demonstrates updating a Socrata dataset using a pre-existing configuration. It builds a config from an output, then later it uses that config to update a view with new data. The config encapsulates settings, parsing and transformation rules. Requires socrata authentication and knowledge of the configuration name and view ID.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# This is how we create our view initially\nwith open('cool_dataset.csv', 'rb') as file:\n    (revision, output) = Socrata(auth).create(\n        name = \"cool dataset\",\n        description = \"a description\"\n    ).csv(file)\n\n    revision.apply(output_schema = output)\n\n# This will build a configuration using the same settings (file parsing and\n# data transformation rules) that we used to get our output. The action\n# that we will take will be \"update\", though it could also be \"replace\"\nconfig = output.build_config(\"cool-dataset-config\", \"update\")\n\n# Now we need to save our configuration name and view id somewhere so we\n# can update the view using our config\nconfiguration_name = \"cool-dataset-config\"\nview_id = revision.view_id()\n\n# Now later, if we want to use that config to update our view, we just need the view and the configuration_name\nsocrata = Socrata(auth)\nview = socrata.views.lookup(view_id) # View will be the view we are updating with the new data\n\nwith open('updated-cool-dataset.csv', 'rb') as my_file:\n    (revision, job) = socrata.using_config(\n        configuration_name,\n        view\n    ).csv(my_file)\n    print(job) # Our update job is now running\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset with CSV in Socrata Python\nDESCRIPTION: This snippet demonstrates how to create a new dataset using the Socrata API with a CSV file.  It utilizes the `create` method to initiate the dataset creation and the `csv` method to upload the CSV data. The `apply` method is then used to finalize the data into a view, requiring a revision and an output schema. Requires the 'auth' and 'file' variables to be defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n(revision, output_schema) Socrata(auth).create(\n    name = \"cool dataset\",\n    description = \"a description\"\n).csv(file)\n\njob = revision.apply(output_schema = output_schema)\n```\n\n----------------------------------------\n\nTITLE: Changing Column Metadata Python\nDESCRIPTION: This function changes the metadata of a specified column in an OutputSchema. It accepts the column's `field_name` and the `attribute` to be changed. The function returns a ColumnChange object, which implements a `.to()` method to set the new value for the attribute. Method chaining is also supported.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: field_name, attribute\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_output_schema = output\n        # Change the field_name of date to the_date\n        .change_column_metadata('date', 'field_name').to('the_date')\n        # Change the description of the celsius column\n        .change_column_metadata('celsius', 'description').to('the temperature in celsius')\n        # Change the display name of the celsius column\n        .change_column_metadata('celsius', 'display_name').to('Degrees (Celsius)')\n        .run()\n```\n\n----------------------------------------\n\nTITLE: Uploading a CSV File to a Source in Socrata-py (Python)\nDESCRIPTION: This code snippet demonstrates uploading a CSV file to a source using the socrata-py library. The file is opened in binary read mode ('rb') and the file handle is passed to the `csv` method of the upload object, which handles the upload process.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-file.csv', 'rb') as f:\n        upload = upload.csv(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading a File\nDESCRIPTION: This snippet demonstrates how to upload the contents of a local file to a Socrata dataset using an upload object. It opens a CSV file in binary read mode ('rb') and uploads its contents using the `upload.csv()` method. Requires the prior creation of an upload object.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# And using that upload we just created, we can put bytes into it\nwith open('test/fixtures/simple.csv', 'rb') as f:\n    source = upload.csv(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading a GeoJSON File to a Source in Socrata-py (Python)\nDESCRIPTION: This code snippet demonstrates uploading a GeoJSON file to a source using the socrata-py library. The file is opened in binary read mode ('rb'), and the file handle is passed to the `geojson` method of the upload object, which handles the upload process.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-geojson-file.geojson', 'rb') as f:\n        upload = upload.geojson(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading a TSV File to a Source in Socrata-py (Python)\nDESCRIPTION: This code snippet shows how to upload a TSV (Tab Separated Values) file to a source using the socrata-py library. The TSV file is opened in binary read mode ('rb'), and the file handle is then passed to the `tsv` method of the upload object. The `tsv` method handles the actual upload process.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-file.tsv', 'rb') as f:\n        upload = upload.tsv(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading a Shapefile to a Source in Socrata-py (Python)\nDESCRIPTION: This code shows how to upload a Shapefile (as a zipped archive) to a source using the socrata-py library.  The zipped archive containing the shapefile is opened in binary read mode ('rb'), and the file handle is passed to the `shapefile` method of the upload object, which handles the upload process.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-shapefile-archive.zip', 'rb') as f:\n        upload = upload.shapefile(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading XLS File Python\nDESCRIPTION: This function uploads an XLS file and returns the new input schema. It takes a file handle as an argument, which should be obtained using the python `open()` function with the 'rb' flag. It also accepts optional retry limits and backoff seconds for chunk uploads.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: file_handle\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-file.xls', 'rb') as f:\n        upload = upload.xls(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading XLSX File Python\nDESCRIPTION: This function uploads an XLSX file and returns the new input schema. It requires a file handle opened in binary read mode ('rb') using the `open()` function. It also takes optional retry limits and backoff seconds for handling potential chunk upload failures.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: file_handle\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-file.xlsx', 'rb') as f:\n        upload = upload.xlsx(f)\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob File to a Source in Socrata-py (Python)\nDESCRIPTION: This code snippet shows how to upload a blob file (e.g., an image) to a source using the socrata-py library.  It opens the file in binary read mode ('rb') and passes the file handle to the `blob` method of the upload object. This method is designed for non-data files like images and videos.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-blob.jpg', 'rb') as f:\n        upload = upload.blob(f)\n```\n\n----------------------------------------\n\nTITLE: Updating Dataset with Config in Socrata Python\nDESCRIPTION: This snippet demonstrates updating an existing dataset using a previously saved configuration. It reads a CSV file and updates the specified view using the named configuration. This process is often used within a context manager to create and immediately launch the ConfiguredJob. Requires the 'p', 'name', and 'view' variables to be defined, and a file named 'my-file.csv' to exist.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-file.csv', 'rb') as my_file:\n    (rev, job) = p.using_config(name, view).csv(my_file)\n```\n\n----------------------------------------\n\nTITLE: Create Update Revision Example in Socrata Python\nDESCRIPTION: This code snippet demonstrates how to create a revision to update data in a Socrata view. It assumes you have a `view` object and allows you to modify the dataset's metadata such as name and description.  It's an upsert operation.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nview.revisions.create_update_revision(metadata = {\n        'name': 'new dataset name',\n        'description': 'updated description'\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting Row ID in OutputSchema (Python)\nDESCRIPTION: Shows how to set a column as the row ID for an OutputSchema using the `set_row_id` method. It's noted that `validate_row_id` must be called before this method is used.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\nnew_output_schema = output.set_row_id('the_id_column')\n```\n\n----------------------------------------\n\nTITLE: Setting Sort By Columns in OutputSchema (Python)\nDESCRIPTION: Illustrates how to replace the existing sort configuration with new columns using the `set_sort_by` method, followed by adding individual sort orders using `.on` (specifying ascending or descending order) and finalizing the sort using `.end_sort`.  The `.run()` method applies the changes.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nnew_output_schema = output\\\n    .set_sort_by()\\\n    .on('column_one', ascending = True)\\\n    .on('column_two', ascending = False)\\\n    .on('column_three') # ascending = True is the default\\\n    .end_sort()\\\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Changing Parse Options for a Source in Socrata-py (Python)\nDESCRIPTION: This snippet illustrates how to modify the parse options of a data source using the socrata-py library. Specifically, it sets the 'header_count' and 'column_header' parse options to 2. This example assumes that the first two rows of the data are headers and that the second row is used for column headers. The `run()` function executes the parsing with the new parameters.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nsource = source            .change_parse_option('header_count').to(2)            .change_parse_option('column_header').to(2)            .run()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transformation to Finish\nDESCRIPTION: This snippet shows how to wait for an asynchronous data transformation to complete.  The `wait_for_finish()` method blocks execution until the transformation is finished and returns the output schema. It handles asynchronous transformations.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\noutput_schema = new_output_schema.wait_for_finish()\n```\n\n----------------------------------------\n\nTITLE: Checking for Transformation Errors\nDESCRIPTION: This snippet explains how to check for errors after a data transformation.  It retrieves the error count from the output schema attributes and demonstrates how to access detailed error information via schema_errors() and schema_errors_csv().\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nprint(output_schema.attributes['error_count'])\nerrors = output_schema.schema_errors()\ncsv_stream = output_schema.schema_errors_csv()\n```\n\n----------------------------------------\n\nTITLE: Getting Output Schema\nDESCRIPTION: This snippet demonstrates how to retrieve the input and output schemas from a source object.  It gets the latest input schema and then uses it to obtain the latest output schema.  This is often used before transforming data.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith open('temps.csv', 'rb') as f:\n    source = upload.csv(f)\n    input_schema = source.get_latest_input_schema()\noutput_schema = input_schema.get_latest_output_schema()\n```\n\n----------------------------------------\n\nTITLE: Creating Revision with Metadata in Socrata Python\nDESCRIPTION: This snippet shows how to create an empty revision on a view that doesn't yet exist.  It uses the Socrata class to create a new view with initial metadata such as name, description, and custom metadata fields. The view will be created, and the initial revision will be returned.  Requires the 'auth' variable to be defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nrev = Socrata(auth).new({\n        'name': 'hi',\n        'description': 'foo!',\n        'metadata': {\n            'view': 'metadata',\n            'anything': 'is allowed here'\n\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Applying Revision in Socrata Python\nDESCRIPTION: This code applies a given revision to the view it was opened on. If the revision includes data changes, then an output schema needs to be passed in. If the revision is only for updating metadata, then the `output_schema` parameter is not required. Requires that the `revision` and `my_output_schema` variables are defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\njob = revision.apply(output_schema = my_output_schema)\n```\n\n----------------------------------------\n\nTITLE: Validating Rows\nDESCRIPTION: This snippet shows how to retrieve and validate rows from the output schema. It retrieves a limited number of rows with an offset, allowing for inspection of the transformed data.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrows = output_schema.rows(offset = 0, limit = 20)\n\nself.assertEqual(rows, [\n    {'b': {'ok': ' bfoo'}},\n    {'b': {'ok': ' bfoo'}},\n    {'b': {'ok': ' bfoo'}},\n    {'b': {'ok': ' bfoo'}}\n])\n```\n\n----------------------------------------\n\nTITLE: Creating an Upload\nDESCRIPTION: This snippet shows how to create an upload using a previously created revision.  It takes a revision object and creates an upload associated with a specific filename (foo.csv). The created upload object is then printed to the console.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Using that revision, we can create an upload\nupload = revision.create_upload('foo.csv')\n\n# And print it\nprint(upload)\n```\n\n----------------------------------------\n\nTITLE: Updating Revision Metadata in Socrata-py (Python)\nDESCRIPTION: This code snippet demonstrates how to update the metadata of a revision within the Socrata platform using the socrata-py library. It updates the name and description of the revision by passing a dictionary containing the desired changes to the `update` method.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nrevision = revision.update({\n        'metadata': {\n            'name': 'new name',\n            'description': 'new description'\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Create Replace Revision Example in Socrata Python\nDESCRIPTION: This snippet illustrates how to create a revision that, when applied, will completely replace the data in a Socrata view. It requires a pre-existing `view` object. The `metadata` parameter allows updating dataset metadata like name and description.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nview.revisions.create_replace_revision(metadata = {'name': 'new dataset name', 'description': 'updated description'})\n```\n\n----------------------------------------\n\nTITLE: Creating a new Revision\nDESCRIPTION: This snippet demonstrates how to create a new revision using the socrata-py library. It initializes a Socrata object with authentication details and then creates a new revision with a specified name. The revision object and its attributes are then printed to the console.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This is our socrata object, using the auth variable from above\nsocrata = Socrata(auth)\n\n# This will make our initial revision, on a view that doesn't yet exist\nrevision = socrata.new({'name': 'cool dataset'})\n\n# revision is a Revision object, we can print it\nprint(revision)\nprint(revision.attributes['metadata']['name'])\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset Example in Socrata Python\nDESCRIPTION: This snippet showcases creating a new dataset from a CSV file using the Socrata API. It uses the Socrata class with initialized authentication to create a new dataset with a specified name and description, then uploads the CSV file provided. Requires the 'auth' variable to be defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nSocrata(auth).create(\n    name = \"cool dataset\",\n    description = \"a description\"\n).csv(open('my-file.csv'))\n```\n\n----------------------------------------\n\nTITLE: Set Output Schema ID in Socrata Python\nDESCRIPTION: This snippet sets the output schema ID on a revision.  The `output_schema_id` specifies which output schema to apply when the revision is applied, if one isn't supplied explicitly when the revision is applied. Requires that the `revision` variable is defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nrevision = revision.set_output_schema(42)\n```\n\n----------------------------------------\n\nTITLE: Socrata Authorization Boilerplate\nDESCRIPTION: This code snippet shows the boilerplate code required to set up authorization with the Socrata API. It imports necessary classes and creates an Authorization object using environment variables for the Socrata username and password.  The Authorization object is then used when instantiating the Socrata class.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Import some stuff\nfrom socrata.authorization import Authorization\nfrom socrata import Socrata\nimport os\n\n# Boilerplate...\n# Make an auth object\nauth = Authorization(\n  \"pete-test.test-socrata.com\",\n  os.environ['SOCRATA_USERNAME'],\n  os.environ['SOCRATA_PASSWORD']\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Revision Example in Socrata Python\nDESCRIPTION: This snippet shows how to create a revision on the view to delete rows of data. This requires a `view` object and the metadata to be changed in the revision.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nview.revisions.create_delete_revision(metadata = {\n        'name': 'new dataset name',\n        'description': 'description'\n    })\n```\n\n----------------------------------------\n\nTITLE: Changing Parse Option Python\nDESCRIPTION: This function changes a parse option on the source. If no bytes are uploaded, these options will be used to parse the file. If bytes exist, it triggers a re-parsing and a new InputSchema creation. Returns a ParseOptionChange that implements a `.to(value)` function to set the value.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: name\n```\n\nLANGUAGE: python\nCODE:\n```\nsource = source            .change_parse_option('header_count').to(2)            .change_parse_option('column_header').to(2)            .run()\n```\n\n----------------------------------------\n\nTITLE: Uploading a KML File to a Source in Socrata-py (Python)\nDESCRIPTION: This code snippet demonstrates uploading a KML file to a source using the socrata-py library. The file is opened in binary read mode ('rb') and the file handle is passed to the `kml` method of the upload object. The library then manages the upload of the KML data.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nwith open('my-kml-file.kml', 'rb') as f:\n        upload = upload.kml(f)\n```\n\n----------------------------------------\n\nTITLE: Set Revision Notes in Socrata Python\nDESCRIPTION: This code sets notes on a given revision. The notes is displayed in the dataset changelog if the dataset is enrolled in archiving. Requires that the `revision` variable is defined.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nrevision = revision.set_notes(\"Just updating my dataset\")\n```\n\n----------------------------------------\n\nTITLE: Listing Operations on a Resource (Python)\nDESCRIPTION: Describes how to retrieve a list of available operations for a resource using the `list_operations` method. These operations correspond to the links section in the API response for each resource.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\n# Get a list of the operations that you can perform on this\n# object. These map directly onto what's returned from the API\n# in the `links` section of each resource\n```\n\n----------------------------------------\n\nTITLE: Waiting for Schema Python\nDESCRIPTION: This function waits for a data source to have at least one schema present. It accepts a progress function, a timeout value, and a sleep time. The default timeout is set to 12 hours, providing ample time for the schema to become available.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nArgSpec\n    Args: progress, timeout, sleeptime\n    Defaults: progress=<function noop at 0x7fa34fb57040>, timeout=43200, sleeptime=1\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata-Only Revisions\nDESCRIPTION: This snippet demonstrates how to create revisions for updating only the metadata of an existing Socrata view. It creates a replace revision, retrieves the output schema, modifies the metadata, and applies the changes.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nview = socrata.views.lookup('abba-cafe')\n\nrevision = view.revisions.create_replace_revision()\nsource = revision.source_from_dataset()\noutput_schema = source.get_latest_input_schema().get_latest_output_schema()\nnew_output_schema = output_schema\\\n    .change_column_metadata('a', 'description').to('meh')\\\n    .change_column_metadata('b', 'display_name').to('bbbb')\\\n    .change_column_metadata('c', 'field_name').to('ccc')\\\n    .run()\n\n\nrevision.apply(output_schema = new_output_schema)\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This snippet shows how to execute the tests for the project. It sets the environment variables for the Socrata domain, username, and password and then runs the test script.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nSOCRATA_DOMAIN=localhost SOCRATA_USERNAME=$SOCRATA_LOCAL_USER SOCRATA_PASSWORD=$SOCRATA_LOCAL_PASS bin/test\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: This snippet demonstrates how to generate the project documentation using the `make docs` command.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Transforming Data with coalesce and error\nDESCRIPTION: This snippet demonstrates how to use `coalesce` function within a transformation to handle null values. It converts null values in the 'celsius' column to an error, preventing them from being imported.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnew_output_schema = output\n    .change_column_transform('celsius').to('coalesce(to_number(`celsius`), error(\"Celsius was null!\"))')\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Creating an Upload Source in Socrata-py (Python)\nDESCRIPTION: This code snippet demonstrates how to create a new upload source within a revision using the socrata-py library. It requires specifying the filename of the file to be uploaded and uses the `create_upload` method to initiate the source creation.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nupload = revision.create_upload('foo.csv')\n```\n\n----------------------------------------\n\nTITLE: Releasing a new version\nDESCRIPTION: This snippet shows how to release a new version of the project. It involves building the distribution package and uploading it to a repository using twine. Requires twine and a .pypirc file with credentials.\nSOURCE: https://github.com/socrata/socrata-py/blob/main/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npython3 setup.py sdist\ntwine upload dist/<your distribution file>\n```"
  }
]