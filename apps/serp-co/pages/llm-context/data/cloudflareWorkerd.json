[
  {
    "owner": "cloudflare",
    "repo": "workerd",
    "content": "TITLE: Promise Handling in JSG\nDESCRIPTION: Demonstrates how to use jsg::Promise<T> to wrap JavaScript promises in C++, showing promise resolution and error handling patterns.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Lock& js = // ...\njsg::Promise<int> promise = // ...\n\npromise.then(js, [&](jsg::Lock& js, int value) {\n  // Do something with value.\n}, [&](jsg::Lock& js, jsg::Value exception) {\n  // There was an error! Handle it!\n})\n```\n\n----------------------------------------\n\nTITLE: Static Method Binding\nDESCRIPTION: Shows how to bind static C++ methods to JavaScript class methods.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static void bar();\n  static void delete_();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_STATIC_METHOD(bar);\n    JSG_STATIC_METHOD_NAMED(delete, delete_);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.bar();\nFoo.delete();\n```\n\n----------------------------------------\n\nTITLE: Resource Type Definition\nDESCRIPTION: Shows how to define a basic resource type that maps C++ classes to JavaScript objects with properties and constructors.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  Foo(int value): value(value) {}\n\n  static jsg::Ref<Foo> constructor(int value);\n\n  int getValue();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_READONLY_PROTOTYPE_PROPERTY(value, getValue);\n  }\n\nprivate:\n  int value;\n};\n```\n\n----------------------------------------\n\nTITLE: V8Ref Usage Example\nDESCRIPTION: Demonstrates how to use jsg::V8Ref<T> for maintaining references to JavaScript values and handling reference counting.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Lock& js = // ...\n\njsg::V8Ref<v8::Boolean> boolRef1 = js.v8Ref(v8::True(js.v8Isolate));\n\njsg::V8Ref<v8::Boolean> boolRef2 = boolRef1.addRef(js);\n\nKJ_DBG(boolRef1 == boolRef2);  // prints \"true\"\n\n// Getting the v8::Local<T> from the V8Ref requires a v8::HandleScope to be\n// on the stack. We provide a convenience method on jsg::Lock to ensure that:\nv8::Local<v8::Boolean> boolLocal = js.withinHandleScope([&] { return boolRef1.getHandle(js); });\n```\n\n----------------------------------------\n\nTITLE: Type Inheritance\nDESCRIPTION: Demonstrates how to implement inheritance between JSG resource types.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_28\n\nLANGUAGE: cpp\nCODE:\n```\nclass Bar: public jsg::Object {\npublic:\n  static jsg::Ref<Bar> constructor();\n\n  JSG_RESOURCE_TYPE(Bar) {}\n};\n\nclass Foo: public Bar {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_INHERIT(Bar);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfoo instanceof Bar; // true\n```\n\n----------------------------------------\n\nTITLE: Extended JSG Isolate Type Declaration Example\nDESCRIPTION: More complex example showing how to organize multiple isolate type declarations using macro shortcuts for better maintainability.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\nJSG_DECLARE_ISOLATE_TYPE(JsgSserveIsolate,\n  EW_GLOBAL_SCOPE_ISOLATE_TYPES,\n  EW_ACTOR_ISOLATE_TYPES,\n  EW_ACTOR_STATE_ISOLATE_TYPES,\n  EW_ANALYTICS_ENGINE_ISOLATE_TYPES,\n  ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition Example - KVNamespace Overrides\nDESCRIPTION: Examples of TypeScript override syntax for customizing KVNamespace type definitions, showing different override patterns including method overloading and type renaming.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nKVNamespace {\n  get(key: string, type: \"string\"): Promise<string | null>;\n  get(key: string, type: \"arrayBuffer\"): Promise<ArrayBuffer | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Callable Objects\nDESCRIPTION: Demonstrates how to make objects callable as functions using JSG_CALLABLE.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyAssert: public jsg::Object {\npublic:\n  static jsg::Ref<MyAssert> constructor();\n\n  void ok(boolean condition) {\n    JSG_REQUIRE(condition, Error, \"Condition failed!\");\n  }\n\n  JSG_RESOURCE_TYPE(MyAssert) {\n    JSG_CALLABLE(ok);\n    JSG_METHOD(ok);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = new MyAssert();\n\nassert.ok(true); // No error\n\nassert(true);  // error\n```\n\n----------------------------------------\n\nTITLE: Struct Definition with JSG_STRUCT\nDESCRIPTION: Shows how to define struct mappings between C++ and JavaScript objects using the JSG_STRUCT macro.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nstruct Foo {\n  kj::String abc;\n  jsg::Optional<bool> xyz;\n  jsg::Value val;\n\n  JSG_STRUCT(abc, xyz, val);\n\n  int onlyInternal = 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Standard vs Internal ReadableStream Read Operations in JavaScript\nDESCRIPTION: Illustrates the difference between Standard and Internal ReadableStream implementations. Standard streams allow multiple pending reads while Internal streams only permit a single pending read at a time.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst readable = new ReadableStream(); // This is always a standard stream\nconst reader = readable.getReader();\nreader.read();\nreader.read();  // A second read() works! And is just queued as a pending read.\n\nconst readable = request.body;  // This is always an internal stream\nconst reader = readable.getReader();\nreader.read();\nreader.read();  // Fails with an error!\n```\n\n----------------------------------------\n\nTITLE: Basic JSG Resource Type Declaration in C++\nDESCRIPTION: Shows the basic structure of declaring a JSG_RESOURCE_TYPE block for C++ class bindings.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nJSG_RESOURCE_TYPE(Foo) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Service Worker Environment Bindings Configuration\nDESCRIPTION: TypeScript global scope augmentation for Service Workers environment bindings, declaring global variables and KV namespace types.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  const MY_ENV_VAR: string;\n  const MY_SECRET: string;\n  const myKVNamespace: KVNamespace;\n}\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript-to-JavaScript Pipe Loop Function\nDESCRIPTION: Simplified JavaScript implementation that demonstrates how data is piped from a Standard Readable to a Standard Writable using async/await with JavaScript promises. This loop runs entirely within the JavaScript isolate lock.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function pipe(reader, writer) {\n  for await (const chunk of reader) {\n    await writer.write(chunk);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clang/LLVM Compiler Configuration Options\nDESCRIPTION: Complete set of compiler flags including C++20 standard, include paths, system includes, preprocessor definitions, and warning configurations for building the Workerd project. Includes dependencies for V8, ICU, SQLite, and other core libraries.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/compile_flags.txt#2025-04-12_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n-std=c++20\n-stdlib=libc++\n-xc++\n-nostdinc\n-Ibazel-bin/external/com_cloudflare_lol_html/_virtual_includes/lolhtml\n-Ibazel-bin/external/perfetto/\n-Iexternal/perfetto-sdk/sdk/\n-Iexternal/ada-url/\n-Iexternal/com_google_absl/\n-Iexternal/simdutf/\n-Iexternal/nbytes/include/\n-Iexternal/com_google_benchmark/include/\n-Iexternal/perfetto/include/\n-Iexternal/perfetto/include/perfetto/base/build_configs/bazel/\n-Iexternal/ssl/include\n-Iexternal/ncrypto/include\n-isystembazel-bin/external/sqlite3\n-Isrc\n-isystem/usr/lib/llvm-18/include/c++/v1\n-isystem/usr/lib/llvm-18/lib/clang/18/include\n-isystem/usr/include/x86_64-linux-gnu\n-isystem/usr/include/aarch64-linux-gnu\n-isystem/usr/include\n-isystem/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1\n-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/17/include\n-isystem/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\n-isystem/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers\n-isystembazel-bin/_virtual_includes/icudata-embed\n-isystembazel-bin/external/capnp-cpp/src\n-isystembazel-bin/external/capnp-cpp/src/capnp/_virtual_includes/capnp\n-isystembazel-bin/external/capnp-cpp/src/capnp/_virtual_includes/capnp-rpc\n-isystembazel-bin/external/capnp-cpp/src/capnp/compat/_virtual_includes/http-over-capnp\n-isystembazel-bin/external/capnp-cpp/src/capnp/compat/_virtual_includes/json\n-isystembazel-bin/external/capnp-cpp/src/kj/_virtual_includes/kj\n-isystembazel-bin/external/capnp-cpp/src/kj/_virtual_includes/kj-async\n-isystembazel-bin/external/capnp-cpp/src/kj/compat/_virtual_includes/kj-brotli\n-isystembazel-bin/external/capnp-cpp/src/kj/compat/_virtual_includes/kj-gzip\n-isystembazel-bin/external/capnp-cpp/src/kj/compat/_virtual_includes/kj-http\n-isystembazel-bin/external/capnp-cpp/src/kj/compat/_virtual_includes/kj-tls\n-isystembazel-bin/external/v8\n-isystembazel-bin/external/v8/icu\n-isystembazel-bin/src\n-isystemexternal/brotli/c/include\n-isystemexternal/com_googlesource_chromium_icu/source/common\n-isystemexternal/icu\n-isystemexternal/v8\n-isystemexternal/v8/include\n-isystemexternal/zlib\n-isystemexternal/perfetto-sdk/sdk\n-isystembazel-bin/src/rust/cxx-integration/_virtual_includes/cxx-include/\n-isystembazel-bin/src/rust/cxx-integration/_virtual_includes/cxx-integration@cxx\n-isystembazel-bin/src/rust/cxx-integration-test/_virtual_includes/cxx-integration-test@cxx\n-isystembazel-bin/src/rust/dns/_virtual_includes/dns@cxx\n-D_FORTIFY_SOURCE=1\n-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES\n-D_LIBCPP_NO_ABI_TAG\n-D_LIBCPP_HAS_NO_INCOMPLETE_PSTL\n-DCAPNP_VERSION=11000\n-DDEBUG\n-DGOOGLE3\n-DHAVE_DLOPEN=0\n-DKJ_HAS_LIBDL\n-DKJ_HAS_OPENSSL\n-DKJ_HAS_ZLIB\n-DKJ_SAVE_ACQUIRED_LOCK_INFO=0\n-DKJ_TRACK_LOCK_BLOCKING=0\n-DSQLITE_ENABLE_FTS5\n-DSQLITE_ENABLE_NORMALIZE\n-DSQLITE_MAX_ALLOCATION_SIZE=16777216\n-DSQLITE_PRINTF_PRECISION_LIMIT=100000\n-DUCONFIG_ONLY_HTML_CONVERSION=1\n-DUNISTR_FROM_CHAR_EXPLICIT=\n-DUNISTR_FROM_STRING_EXPLICIT=\n-DUSE_CHROMIUM_ICU=1\n-DU_CHARSET_IS_UTF8=1\n-DU_COMMON_IMPLEMENTATION\n-DU_ENABLE_DYLOAD=0\n-DU_ENABLE_RESOURCE_TRACING=0\n-DU_ENABLE_TRACING=1\n-DU_I18N_IMPLEMENTATION\n-DU_ICUDATAENTRY_IN_COMMON\n-DU_USING_ICU_NAMESPACE=0\n-DV8_31BIT_SMIS_ON_64BIT_ARCH\n-DV8_ADVANCED_BIGINT_ALGORITHMS\n-DV8_COMPRESS_POINTERS\n-DV8_COMPRESS_POINTERS_IN_SHARED_CAGE\n-DV8_CONCURRENT_MARKING\n-DV8_DEPRECATION_WARNINGS\n-DV8_ENABLE_CHECKS\n-DV8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA\n-DV8_ENABLE_LAZY_SOURCE_POSITIONS\n-DV8_ENABLE_MAGLEV\n-DV8_ENABLE_SPARKPLUG\n-DV8_ENABLE_TURBOFAN\n-DV8_ENABLE_WEBASSEMBLY\n-DV8_HAVE_TARGET_OS\n-DV8_IMMINENT_DEPRECATION_WARNINGS\n-DV8_SHORT_BUILTIN_CALLS\n-DV8_TARGET_ARCH_X64\n-DV8_TARGET_OS_LINUX\n-DV8_TYPED_ARRAY_MAX_SIZE_IN_HEAP=64\n-DWORKERD_USE_PERFETTO\n-DPERFETTO_ENABLE_LEGACY_TRACE_EVENTS=1\n-DWORKERD_ICU_DATA_EMBED\n-Wall\n-Werror=dangling\n-Werror=implicit-fallthrough\n-Werror=return-stack-address\n-Werror=return-type\n-Werror=switch\n-Werror=uninitialized\n-Werror=unreachable-code\n-Werror=unused-function\n-Werror=unused-lambda-capture\n-Werror=unused-variable\n-Wextra\n-Wno-builtin-macro-redefined\n-Wno-free-nonheap-object\n-Wno-ignored-qualifiers\n-Wno-missing-field-initializers\n-Wno-sign-compare\n-Wno-strict-aliasing\n-Wno-unused-parameter\n-Wself-assign\n-Wthread-safety\n-Wunused-but-set-parameter\n-Wunused-function\n-Wunused-lambda-capture\n-Wunused-variable\n-no-canonical-prefixes\n-fbracket-depth=512\n```\n\n----------------------------------------\n\nTITLE: Using JSG Generator in C++\nDESCRIPTION: Demonstrates using jsg::Generator<T> in C++ to process items one at a time with a forEach callback function.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doSomething(jsg::Generator<kj::String> strings) {\n  // Called for each item produced by the generator.\n  strings.forEach([](jsg::Lock& js, kj::String value, jsg::GeneratorContext<kj::String> ctx) {\n    KJ_DBG(value);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for ReadableStream Tee Implementation\nDESCRIPTION: ASCII diagram showing how the tee() method handles data flow between branches, including how data is pushed to each branch and how pending reads are managed in each branch.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n   +----------------+\n   | pull algorithm |\n   +----------------+\n           |\n           ⊽          ..........................................................\n   +---------------+  .   +---------------------+      +-------------------+\n   | enqueue(data) | ---> | push data to branch | ---> | has pending read? |\n   +---------------+  .   +---------------------+      +-------------------+\n               |      .                                no |    yes |\n               |      .       +-------------------+       |  +--------------+\n               |      .       | add data to queue | <-----+  | fulfill read |\n               |      .       +-------------------+          +--------------+\n               |      ............................................................\n               |      .   +---------------------+      +-------------------+\n               +--------> | push data to branch | ---> | has pending read? |\n                      .   +---------------------+      +-------------------+\n                      .                                no |    yes |\n                      .       +-------------------+       |  +--------------+\n                      .       | add data to queue | <-----+  | fulfill read |\n                      .       +-------------------+          +--------------+\n                      ............................................................\n\n```\n\n----------------------------------------\n\nTITLE: Declaring JSG Isolate Types in C++\nDESCRIPTION: Example of using JSG_DECLARE_ISOLATE_TYPE macro to set up base isolate types. The macro defines supported resource types that can be used in the application.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\nJSG_DECLARE_ISOLATE_TYPE(MyIsolate, api::Foo, api::Bar)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TransformStream with Transform Function\nDESCRIPTION: Shows how to create a custom TransformStream with a transform function that converts input text to uppercase and adds an exclamation mark. Unlike the Internal TransformStream, the Standard implementation doesn't block writes on reads.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { writable, readable } = new TransformStream({\n  transform(chunk, controller) {\n    controller.enqueue(`${chunk}!`.toUpperCase());\n  }\n});\n\nconst writer = writable.getWriter();\nconst reader = readable.getReader();\n\n// The write promise does not wait for a read.\nawait writer.write('hello');\n\nawait reader.read();  // Outputs 'HELLO!'\n```\n\n----------------------------------------\n\nTITLE: Implementing Symbol.iterator in JavaScript\nDESCRIPTION: Example showing how to implement the Symbol.iterator generator pattern in JavaScript with yield statements. Demonstrates creation and usage of an iterable object.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst iterableObject = {\n  [Symbol.iterator]* () {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n};\n\nconst iter = iterableObject[Symbol.iterator]();\n```\n\n----------------------------------------\n\nTITLE: Using kj::Array with JavaScript Arrays\nDESCRIPTION: Demonstrates how to pass JavaScript arrays to C++ functions expecting kj::Array<T>, showing the one-to-one mapping between the array elements.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doSomething(kj::Array<kj::String> strings) {\n  KJ_DBG(strings[0]);  // a\n  KJ_DBG(strings[1]);  // b\n  KJ_DBG(strings[2]);  // c\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ndoSomething(['a', 'b', 'c']);\n```\n\n----------------------------------------\n\nTITLE: Using IdentityTransformStream with Concurrent Read and Write Operations\nDESCRIPTION: Demonstrates how to use IdentityTransformStream with concurrent read and write operations. This implementation requires coordination between reads and writes, as write promises won't resolve until corresponding reads are made.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { readable, writable } = new IdentityTransformStream();\nconst enc = new TextEncoder();\n\nconst writer = writable.getWriter();\nconst reader = readable.getReader();\n\n// The write promise will not resolve until read() is called!\nawait Promise.all([\n  writer.write(enc.encode('hello')),\n  reader.read(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading from a ReadableStream in JavaScript\nDESCRIPTION: This snippet demonstrates how to acquire a ReadableStream, obtain a default reader, and read chunks of data from the stream. It shows the basic flow of consuming a ReadableStream using async/await syntax.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst readableStream = getReadableSomehow();\n\nconst reader = readableStream.getReader();\n\nconst chunk = await reader.read();\n\nconsole.log(chunk.value); // the data that was read.\nconsole.log(chunk.done);  // true or false if the stream has completed.\n```\n\n----------------------------------------\n\nTITLE: Using kj::HashSet with JavaScript Sets\nDESCRIPTION: Demonstrates how to use kj::HashSet<T> to map JavaScript Set objects to C++ HashSet collections, showing a basic membership test.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doSomething(kj::HashSet<kj::String> strings) {\n  KJ_DBG(strings.has(\"a\"));\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ndoSomething(new Set(['a', 'b', 'c']));\n```\n\n----------------------------------------\n\nTITLE: JavaScript Generator Usage Example\nDESCRIPTION: Shows how to use generators and arrays with the C++ doSomething function from JavaScript side.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething({\n  *[Symbol.iterator] () {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n});\n\n// or\n\ndoSomething(['a', 'b', 'c']);\n```\n\n----------------------------------------\n\nTITLE: C++ Function Wrapper Example\nDESCRIPTION: Shows how to wrap a C++ lambda function to make it callable from JavaScript.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Function<void(int)> getFunction() {\n  return jsg::Function<void(int)>([](jsg::Lock& js, int val) {\n    KJ_DBG(val);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using WritableStream with Multiple Write Operations\nDESCRIPTION: Demonstrates writing multiple chunks of data to a WritableStream. The Standard WritableStream implementation maintains a queue of pending writes and uses backpressure mechanisms to regulate data flow.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst writable = getWritableSomehow();\nconst writer = writable.getWriter();\n\nawait writer.write(\"chunk of data\");\nawait writer.write(\"another chunk of data\");\n```\n\n----------------------------------------\n\nTITLE: Method Arguments and Return Values\nDESCRIPTION: Demonstrates automatic marshalling of arguments and return values between C++ and JavaScript.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor(kj::String abc);\n\n  kj::String bar(int x, kj::String y);\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_METHOD(bar);\n  }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo('hello');\nconst result = foo.bar(123, 'there');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Usage Example\nDESCRIPTION: Shows how to use a C++ wrapped function from JavaScript.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst func = getFunction();\nfunc(1);  // prints 1\n```\n\n----------------------------------------\n\nTITLE: Implementing GC Visitation in Resource Types\nDESCRIPTION: Example showing how to implement garbage collection visitation for resource types that contain reference types. Demonstrates proper usage of visitForGc method.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\nclass Bar: public jsg::Object {\npublic:\n  static jsg::Ref<Bar> constructor();\n\n  JSG_RESOURCE_TYPE(Bar) {}\n};\n\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  jsg::Ref<Bar> getBar();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_READONLY_PROTOTYPE_PROPERTY(bar, getBar);\n  }\n\nprivate:\n  jsg::Ref<Bar> bar;\n\n  void visitForGc(jsg::GcVisitor& visitor) {\n    visitor.visit(bar);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Named Method Binding with JSG_METHOD_NAMED\nDESCRIPTION: Shows how to bind C++ methods to JavaScript with different names using JSG_METHOD_NAMED.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  void delete_();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_METHOD_NAMED(delete, delete_);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfoo.delete();\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for ReadableStream Reader Read Method\nDESCRIPTION: ASCII diagram showing the flow when reader.read() is called, illustrating the decision path for checking the queue for data, adding pending reads, and calling the pull algorithm when necessary.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n    +---------------+\n    | reader.read() |\n    +---------------+\n           |\n           ⊽\n   +-----------------+       +------------------+       +---------------------+\n   | queue has data? | ----> | add pending read | ----> | call pull algorithm |\n   +-----------------+  no   +------------------+       +---------------------+\n           |\n       yes |\n           ⊽\n    +--------------+\n    | fulfill read |\n    +--------------+\n           |\n           |\n           ⊽\n         (done)\n\n```\n\n----------------------------------------\n\nTITLE: Module Worker Environment Bindings Configuration\nDESCRIPTION: TypeScript interface definition for Module Workers environment bindings, defining custom environment variables and KV namespace types.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Env {\n  MY_ENV_VAR: string;\n  MY_SECRET: string;\n  myKVNamespace: KVNamespace;\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World Service Worker for workerd\nDESCRIPTION: A minimal JavaScript service worker that responds to fetch events with a simple 'Hello World' message. This is used in the workerd configuration example.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"fetch\", event => {\n  event.respondWith(new Response(\"Hello World\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Property Binding\nDESCRIPTION: Demonstrates binding C++ getters/setters to JavaScript properties using various JSG property macros.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  kj::String getAbc();\n  int getXyz();\n  void setXyz(int value);\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_READONLY_PROTOTYPE_PROPERTY(abc, getAbc);\n    JSG_PROTOTYPE_PROPERTY(xyz, getXyz, setXyz);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfoo.abc; // 'hello'\nfoo.xyz; // 123\nfoo.xyz = 456;\n```\n\n----------------------------------------\n\nTITLE: Visualizing pipeTo/pipeThrough Flow in ASCII Diagram\nDESCRIPTION: ASCII diagram showing the decision tree of how readable.pipeTo(writable) is implemented based on whether the streams are internal or standard. It illustrates the different pipe loop types that get triggered depending on the stream types.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_8\n\nLANGUAGE: ascii\nCODE:\n```\n         +---------------------------+\n         | readable.pipeTo(writable) |\n         +---------------------------+\n                       |\n                       |\n                       ⊽\n   +------------------------------------------+\n   | writableController.tryPipeFrom(readable) |\n   +------------------------------------------+\n                       |\n                       |\n                       ⊽\n           +-----------------------+       +-----------------------+\n           | is internal writable? | ----> | is internal readable? |\n           +-----------------------+  yes  +-----------------------+\n                       |                      no |         yes |\n                    no |                         |             |\n                       ⊽                    +----+     +---------------+\n           +-----------------------+        |          | kj-to-kj pipe |\n           | is internal readable? |        |          |      loop     |\n           +-----------------------+        |          +---------------+\n            no  |           yes |           |\n                |               |           |\n                ⊽               |           ⊽\n         +---------------+      |   +---------------+\n         | JS-to-JS pipe |      |   | JS-to-kj pipe |\n         |      loop     |      |   |     loop      |\n         +---------------+      |   +---------------+\n                                ⊽\n                        +---------------+\n                        | kj-to-JS pipe |\n                        |     loop      |\n                        +---------------+\n```\n\n----------------------------------------\n\nTITLE: Defining a JSG Resource Type Method with Lock Parameter\nDESCRIPTION: Demonstrates how to define a method on a JSG Resource Type that takes a jsg::Lock parameter to access JavaScript functionality. The jsg::Lock represents the current lock on the v8::Isolate.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nconst Foo: public jsg::Object {\npublic:\n  void foo(jsg::Lock& js, int x, int y) {\n    // ...\n  }\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_METHOD(foo);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Method Binding with JSG_METHOD\nDESCRIPTION: Demonstrates how to bind C++ class methods to JavaScript using JSG_METHOD macro.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  void bar();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_METHOD(bar);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfoo.bar();\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Bazel in workerd\nDESCRIPTION: This command runs all unit tests in the src directory using Bazel. It's a crucial step for verifying code changes in the workerd project.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel test //src/...\n```\n\n----------------------------------------\n\nTITLE: Iterable Objects\nDESCRIPTION: Shows how to implement JavaScript iterables using JSG_ITERATOR and JSG_ITERABLE macros.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\nprivate:\n  using EntryIteratorType = kj::Array<kj::String>;\n\n  struct IteratorState final {\n    // ...\n    void visitForGc(jsg::GcVisitor& visitor) {\n      // ...\n    }\n  };\n\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  JSG_ITERATOR(Iterator, entries,\n               EntryIteratorType,\n               IteratorState,\n               iteratorNext);\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_METHOD(entries);\n    JSG_ITERABLE(entries);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfor (const entry of foo) {\n  // Each entry is a string provided by the entries() method.\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Async Local Storage Implementation\nDESCRIPTION: Demonstrates the usage of AsyncLocalStorage API for context tracking in JavaScript, showing how to maintain context across async operations.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { default as async_hooks } from 'node:async_hooks';\nconst { AsyncLocalStorage } = async_hooks;\n\nconst als = new AsyncLocalStorage();\n\nals.run(123, () => scheduler.wait(10)).then(() => {\n  console.log(als.getStore());  // 123\n});\nconsole.log(als.getStore());  // undefined\n```\n\n----------------------------------------\n\nTITLE: Automating Test Runs with watchexec for workerd Development\nDESCRIPTION: This command uses watchexec to automatically re-run Bazel tests whenever files in the src directory change. It's useful for continuous testing during development.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwatchexec --restart --watch src bazel test //src/...\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Memory Info Methods in C++\nDESCRIPTION: Demonstrates the implementation of the three required methods for including a type in the memory graph: jsgGetMemoryName(), jsgGetMemorySelfSize(), and jsgGetMemoryInfo(). This snippet shows how to manually implement these methods for a class.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\n  kj::StringPtr jsgGetMemoryName() const { return \"Foo\"_kjc; }\n\n  size_t jsgGetMemorySelfSize() const { return sizeof(Foo); }\n\n  void jsgGetMemoryInfo(jsg::MemoryTracker& tracker) const {\n    tracker.trackField(\"bar\", bar);\n  }\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example\nDESCRIPTION: Demonstrates how to implement validation logic for struct properties using a validate() method.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nstruct ValidatingFoo {\n  kj::String abc;\n\n  void validate(jsg::Lock& lock) {\n    JSG_REQUIRE(abc.size() != 0, TypeError, \"Field 'abc' had no length in 'ValidatingFoo'.\");\n  }\n\n  JSG_STRUCT(abc);\n};\n```\n\n----------------------------------------\n\nTITLE: Using jsg::Sequence with Iterables in JavaScript\nDESCRIPTION: Shows how to use jsg::Sequence<T> to accept any JavaScript object implementing Symbol.iterator, demonstrating both array syntax and custom iterator object syntax.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doSomething(jsg::Sequence<kj::String> strings) {\n  KJ_DBG(strings[0]);  // a\n  KJ_DBG(strings[1]);  // b\n  KJ_DBG(strings[2]);  // c\n}\n```\n\nLANGUAGE: js\nCODE:\n```\ndoSomething({\n  *[Symbol.iterator] () {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n});\n\n// or\n\ndoSomething(['a', 'b', 'c']);\n```\n\n----------------------------------------\n\nTITLE: Importing Cloudflare Workers Types Example\nDESCRIPTION: Example showing how to import specific Cloudflare Workers types directly in a TypeScript file without modifying tsconfig.json.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Request as WorkerRequest, ExecutionContext } from \"@cloudflare/workers-types/experimental\"\n\nexport default {\n  fetch(request: WorkerRequest, env: unknown, ctx: ExecutionContext) {\n    return new Response(\"OK\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Async Context Management\nDESCRIPTION: Shows how to handle async context tracking in C++ code using AsyncContextFrame, demonstrating scope management and context propagation.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Lock& js = ...;\n\nauto maybeAsyncContext = jsg::AsyncContextFrame::current(js);\n                   // or jsg::AsyncContextFrame::currentRef(js) to get a jsg::Ref\n\n// enter the async resource scope whenever necessary...\n{\n  jsg::AsyncContextFrame::Scope asyncScope(js, maybeAsyncContext);\n  // run some code synchronously that requires the async context\n}\n// The async scope will exit automatically...\n```\n\n----------------------------------------\n\nTITLE: Configuring workerd with Cap'n Proto\nDESCRIPTION: Example configuration file for workerd written in Cap'n Proto text format. It defines a simple HTTP service running on port 8080 that serves a hello world worker.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: capnp\nCODE:\n```\nusing Workerd = import \"/workerd/workerd.capnp\";\n\nconst config :Workerd.Config = (\n  services = [\n    (name = \"main\", worker = .mainWorker),\n  ],\n\n  sockets = [\n    # Serve HTTP on port 8080.\n    ( name = \"http\",\n      address = \"*:8080\",\n      http = (),\n      service = \"main\"\n    ),\n  ]\n);\n\nconst mainWorker :Workerd.Worker = (\n  serviceWorkerScript = embed \"hello.js\",\n  compatibilityDate = \"2023-02-28\",\n  # Learn more about compatibility dates at:\n  # https://developers.cloudflare.com/workers/platform/compatibility-dates/\n);\n```\n\n----------------------------------------\n\nTITLE: Building workerd with Bazel\nDESCRIPTION: Command to build the workerd binary using Bazel. This builds the core runtime executable from source code.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbazel build //src/workerd/server:workerd\n```\n\n----------------------------------------\n\nTITLE: Function Type Usage in C++\nDESCRIPTION: Example showing how to use jsg::Function to handle JavaScript callbacks in C++ code.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doSomething(jsg::Lock& js, jsg::Function<void(int)> callback) {\n  callback(js, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for ReadableStream Pull Algorithm\nDESCRIPTION: ASCII diagram showing the flow of the pull algorithm in a ReadableStream, illustrating the decision path from data enqueuing through pending read checks and queue management to determining if more data should be pulled.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/api/streams/README.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n        +----------------+\n        | pull algorithm | <------------------------------------------+\n        +----------------+                                            |\n                |                                                     |\n                ⊽                                                     |\n        +---------------+                                             |\n        | enqueue(data) |                                             |\n        +---------------+                                             |\n                |                                                     |\n                ⊽                                                     |\n      +--------------------+       +-------------------+              |\n      | has a pending read | ----> | has data in queue |              |\n      +--------------------+  yes  +-------------------+              |\n                |                     |      no|                      |\n              no|                     |        ⊽                      |\n                ⊽                     |  +----------------------+     |\n       +-------------------+    yes   |  | fulfill pending read |     |\n       | add data to queue | <--------+  +----------------------+     |\n       +-------------------+                    |                     |\n                       |                        |                     |\n                       |                        ⊽                     |\n                       |    +-----------------------------+     no    |\n                       +--> | is queue at highwater mark? | -----------\n                            +-----------------------------+\n                                      yes |\n                                          |\n                                          ⊽\n                                        (done)\n\n```\n\n----------------------------------------\n\nTITLE: Building Optimized workerd\nDESCRIPTION: Command to build a more performant release version of workerd using thin link-time optimization.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbazel build --config=thin-lto //src/workerd/server:workerd\n```\n\n----------------------------------------\n\nTITLE: Function Callback Example in JavaScript\nDESCRIPTION: Demonstrates using a JavaScript callback function with the C++ doSomething function.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething((arg) => { console.log(arg); });  // prints \"1\"\n```\n\n----------------------------------------\n\nTITLE: Using Generator next() Method\nDESCRIPTION: Shows how to use the next() method of a generator object to iterate through yielded values and check completion status.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = iter.next();\nconsole.log(result.done);  // false!\nconsole.log(result.value); // 'a'\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Workerd\nDESCRIPTION: Systemd service configuration file that defines how workerd should run in production, including socket handling, security measures, and service dependencies.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# /etc/systemd/system/workerd.service\n[Unit]\nDescription=workerd runtime\nAfter=local-fs.target remote-fs.target network-online.target\nRequires=local-fs.target remote-fs.target workerd.socket\nWants=network-online.target\n\n[Service]\nType=exec\nExecStart=/usr/bin/workerd serve /etc/workerd/config.capnp --socket-fd http=3 --socket-fd https=4\nSockets=workerd.socket\n\n# If workerd crashes, restart it.\nRestart=always\n\n# Run under an unprivileged user account.\nUser=nobody\nGroup=nogroup\n\n# Hardening measure: Do not allow workerd to run suid-root programs.\nNoNewPrivileges=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Lazy Property Binding\nDESCRIPTION: Shows how to create lazy-evaluated properties that are cached after first access.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  kj::String getAbc();\n  int getXyz();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_LAZY_READONLY_INSTANCE_PROPERTY(abc, getAbc);\n    JSG_LAZY_INSTANCE_PROPERTY(xyz, getXyz);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nfoo.abc; // 'hello'\nfoo.abc = 1; // ignored\nfoo.abc;  // 'hello'\nfoo.xyz; // 123\nfoo.xyz = \"hello\";\nfoo.xyz; // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Info for jsg::Object in C++\nDESCRIPTION: Demonstrates how to implement memory info methods for a class derived from jsg::Object. This approach requires only implementing the visitForMemoryInfo method to track additional fields.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo : public jsg::Object {\npublic:\n  JSG_RESOURCE_TYPE(Foo) {}\n  void visitForMemoryInfo(jsg::MemoryTracker& tracker) const {\n    tracker.trackField(\"bar\", bar);\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Systemd Socket Configuration for Workerd\nDESCRIPTION: Systemd socket configuration file that defines the listening ports and socket settings for workerd service.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# /etc/systemd/system/workerd.socket\n[Unit]\nDescription=sockets for workerd\nPartOf=workerd.service\n\n[Socket]\nListenStream=0.0.0.0:80\nListenStream=0.0.0.0:443\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Nested Type Exposure\nDESCRIPTION: Shows how to expose nested resource types through a parent type.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\nclass Bar: public jsg::Object {\npublic:\n  static jsg::Ref<Bar> constructor();\n\n  JSG_RESOURCE_TYPE(Bar) {}\n};\n\nclass OtherBar: public jsg::Object {\npublic:\n  static jsg::Ref<OtherBar> constructor();\n\n  JSG_RESOURCE_TYPE(OtherBar) {}\n};\n\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_NESTED_TYPE(Bar);\n    JSG_NESTED_TYPE_NAMED(OtherBar, Baz);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = new Foo();\nconst bar = new Foo.Bar();\nconst baz = new Foo.Baz();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Binding Entrypoint Function\nDESCRIPTION: Example of creating a non-default entrypoint function for a binding. This function initializes and returns a BurritoShop instance using environment variables.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function makeMagicBurritoBinding(env) {\n    return new BurritoShop(env.recipes);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Hello World Example\nDESCRIPTION: This command runs the Hello World example using the workerd serve command with a configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: C++ Storage Scope Implementation\nDESCRIPTION: Demonstrates the implementation of storage scope management in C++ using AsyncContextFrame::StorageScope for maintaining context-specific storage.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Lock& js = ...\njsg::Value value = ...\n\n// The storage key must be kj::Refcounted.\nkj::Own<AsyncContextFrame::StorageKey> key =\n    kj::refcounted<AsyncContextFrame::StorageKey>();\n// When you're done with the storage key and know it will not be reused,\n// reset it to clear the storage cell.\nKJ_DEFER(key->reset());\n\n{\n  jsg::AsyncContextFrame::StorageScope(js, *key, value);\n  // run some code synchronously. The relevant parts of the code\n  // will capture the current async context as necessary.\n}\n\n// The storage cell will be automatically reset to the previous context\n// with the scope exits.\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Entrypoint in Cap'n Proto Configuration\nDESCRIPTION: Configuration that specifies a custom entrypoint function name instead of using the default export. This demonstrates how to customize the initialization function for a binding.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_6\n\nLANGUAGE: capnp\nCODE:\n```\n(\n  name = \"shop\",\n  wrapped = (\n    ...\n    entrypoint = \"makeMagicBurritoBinding\" # The new entrypoint name\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Hello World Locally\nDESCRIPTION: Command to run the Hello World example on localhost:8080 using the workerd serve command with a configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld_esm/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with Specific Compatibility Date\nDESCRIPTION: Example tsconfig.json configuration using a specific compatibility date (2022-08-04) entrypoint for Cloudflare Workers types.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"esnext\",\n    \"lib\": [\"esnext\"],\n    \"types\": [\"@cloudflare/workers-types/2022-08-04\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing an Environment Variable Binding in JavaScript\nDESCRIPTION: Example of accessing the 'shop' binding from the environment object in a worker. This shows how to use environment variables passed to the worker's entrypoint function.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn new Response(env.shop.makeBurrito(burritoType).price());\n```\n\n----------------------------------------\n\nTITLE: Serving Node.js Compatible Worker Locally with workerd\nDESCRIPTION: Command to run the Node.js compatibility example on localhost:8080 using the workerd CLI tool.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Configuration for Cloudflare Workers\nDESCRIPTION: Minimal tsconfig.json configuration required for using Cloudflare Workers types, targeting modern JavaScript features and including the workers-types package.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"esnext\",\n    \"lib\": [\"esnext\"],\n    \"types\": [\"@cloudflare/workers-types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Node.js Compatibility Example\nDESCRIPTION: This curl command tests the Node.js compatibility example by sending a request to the local server.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams-split2/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Running EventSource with workerd direct command\nDESCRIPTION: Command to run the EventSource example using workerd server directly on localhost:8080\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/eventsource/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Importing a Burrito Shop Module in JavaScript\nDESCRIPTION: Example of importing the BurritoShop class from the custom burrito-shop extension module. This demonstrates how custom modules can be imported in workerd applications.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BurritoShop } from \"burrito-shop:burrito-shop\";\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Compat Example with Bazel\nDESCRIPTION: This command uses Bazel to run the workerd server with the Node.js compatibility example configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/nodejs-compat/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Workers Types Package\nDESCRIPTION: Commands to install @cloudflare/workers-types package using npm or yarn package managers as a development dependency.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workers-types/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @cloudflare/workers-types\n-- Or\nyarn add -D @cloudflare/workers-types\n```\n\n----------------------------------------\n\nTITLE: Defining an Importable Module in Cap'n Proto\nDESCRIPTION: Example of defining an importable ES module in Cap'n Proto configuration. This snippet shows how to name and embed a JavaScript file as a module in the workerd configuration.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_2\n\nLANGUAGE: capnp\nCODE:\n```\n( name = \"burrito-shop:burrito-shop\", esModule = embed \"burrito-shop.js\" )\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Compatible Worker with Bazel\nDESCRIPTION: Command to run the Node.js compatibility example using Bazel build system, specifying the path to the configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/nodejs-compat/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Hashes\nDESCRIPTION: Defines exact versions and cryptographic hashes for Python package dependencies. Includes Jinja2 3.1.6 and MarkupSafe 3.0.2 with their respective SHA-256 hashes for security verification during installation.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/build/deps/requirements.txt#2025-04-12_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\njinja2==3.1.6 \\\n    --hash=sha256:0137fb05990d35f1275a587e9aee6d56da821fc83491a0fb838183be43f66d6d \\\n    --hash=sha256:85ece4451f492d0c13c5dd7c13a64681a86afae63a5f347908daf103ce6d2f67\n    # via -r requirements.in\nmarkupsafe==3.0.2 \\\n    --hash=sha256:0bff5e0ae4ef2e1ae4fdf2dfd5b76c75e5c2fa4132d05fc1b0dabcd20c7e28c4 \\\n    --hash=sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30 \\\n    --hash=sha256:1225beacc926f536dc82e45f8a4d68502949dc67eea90eab715dea3a21c1b5f0 \\\n    --hash=sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9 \\\n    --hash=sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396 \\\n    --hash=sha256:1a9d3f5f0901fdec14d8d2f66ef7d035f2157240a433441719ac9a3fba440b13 \\\n    --hash=sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028 \\\n    --hash=sha256:1e084f686b92e5b83186b07e8a17fc09e38fff551f3602b249881fec658d3eca \\\n    --hash=sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557 \\\n    --hash=sha256:2cb8438c3cbb25e220c2ab33bb226559e7afb3baec11c4f218ffa7308603c832\"\n    # via jinja2\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types Using Bazel\nDESCRIPTION: Command to build and generate TypeScript types for Cloudflare Workers, outputting them to the bazel-bin/types directory.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/types/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Generates types to `../bazel-bin/types/api.d.ts`\n$ bazel build //types:types\n```\n\n----------------------------------------\n\nTITLE: Testing Node.js Compatible Worker with curl\nDESCRIPTION: Command to test the running Node.js compatibility example by making an HTTP request to localhost:8080, which should return 'Hello World'.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\nHello World\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Hello World Example with Bazel\nDESCRIPTION: This command uses Bazel to run the Hello World example, specifying the Workerd server and configuration file path.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/helloworld/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Development Setup for Generator Scripts\nDESCRIPTION: Commands for setting up a development environment for the generator scripts, including generating Cap'n Proto files, installing dependencies, building types, and running tests.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/types/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Generates JSG RTTI Cap'n Proto JavaScript/TypeScript files\n$ bazel build //src/workerd/jsg:rtti_capnp_js\n# Install dependencies (note pnpm is required by https://github.com/aspect-build/rules_js)\n$ pnpm install\n# Generates types to `../bazel-bin/types/api.d.ts`\n$ bazel build //types:types\n# Run tests\n$ bazel test //types:all\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Binary for Node.js Compatibility Example\nDESCRIPTION: These commands compile the configuration into a standalone binary named 'nodejs-compat' and then run it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams-split2/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > nodejs-compat\n\n$ ./nodejs-compat\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Hello World with Bazel\nDESCRIPTION: Command to run the Hello World example using Bazel build system, specifying the path to the workerd server and configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld_esm/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/helloworld_esm/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Using JSG_MEMORY_INFO Macro for Memory Info in C++\nDESCRIPTION: Shows the usage of the JSG_MEMORY_INFO macro, which provides a shortcut for implementing basic memory info methods. This macro simplifies the process of adding memory tracking to a class.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\nJSG_MEMORY_INFO(Foo) {\n  tracker.trackField(\"bar\", bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Server Locally\nDESCRIPTION: Command to start the Workerd server locally using the configuration file to serve content on port 8080.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-crypto/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Running EventSource with Bazel\nDESCRIPTION: Command to run the EventSource example using Bazel build system, specifying the workerd server path and config file\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/eventsource/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/eventsource/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Symbol Handling with jsg::Name\nDESCRIPTION: Shows usage of jsg::Name for handling JavaScript property names that can be either strings or symbols.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\njsg::Name doSomething(jsg::Name name) {\n  // The name can be stored and used as a hashmap key, etc.\n  // When returned back to JavaScript, it will be the same type as was passed in.\n  return kj::mv(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Node.js Compatibility Example to Standalone Binary\nDESCRIPTION: These commands compile the Node.js compatibility example into a standalone binary and then run it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-diagnosticschannel/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > nodejs-compat\n\n$ ./nodejs-compat\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Server Locally\nDESCRIPTION: Command to run the Workerd server locally on port 8080 using the config file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/hello-wasm/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Record Type Example in JavaScript\nDESCRIPTION: Example of a JavaScript object matching the jsg::Dict<bool> record type with string keys and boolean values.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"abc\": true,\n  \"xyz\": false,\n  \"foo\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Running REPL Server and Client for Cloudflare Workers\nDESCRIPTION: Commands to start the REPL server using workerd and run the Node.js client. The server is launched with experimental features enabled, and the client is executed using Node.js.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/repl-server/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bazel-bin/src/workerd/server/workerd serve samples/repl-server/config.capnp --experimental\nnode samples/repl-server/client.js\n```\n\n----------------------------------------\n\nTITLE: Running workerd serve command using Bazel for memory-cache example\nDESCRIPTION: This command uses Bazel to run the workerd serve command, specifying the path to the config.capnp file and including the --experimental flag. It demonstrates how to execute the memory-cache example using the Bazel build system.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/memory-cache/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/helloworld_esm/config.capnp --experimental\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable Bindings in Cap'n Proto\nDESCRIPTION: A snippet showing how to define a named binding in Cap'n Proto configuration that will be accessible from the worker's environment.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_4\n\nLANGUAGE: capnp\nCODE:\n```\nbindings = [\n( \n    ...\n    name = \"shop\"\n    ...\n)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Binary for Module Fallback Example\nDESCRIPTION: Commands to compile the example into a standalone executable binary and then run it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/module_fallback/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > helloworld\n\n$ ./helloworld\n```\n\n----------------------------------------\n\nTITLE: Compiling Workerd Hello World Example as Standalone Binary\nDESCRIPTION: These commands compile the Hello World example into a standalone binary and then execute it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > helloworld\n\n$ ./helloworld\n```\n\n----------------------------------------\n\nTITLE: Running the Extensions Example with Bazel and Testing with cURL\nDESCRIPTION: Commands to build and run the extensions example using Bazel, followed by a cURL command to test the API by sending a POST request with 'veggie' as the payload to localhost:8080.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/extensions/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve $(pwd)/samples/extensions/config.capnp\n$ curl localhost:8080 -X POST -d 'veggie'\n9\n```\n\n----------------------------------------\n\nTITLE: Testing Workerd Hello World Example\nDESCRIPTION: This curl command tests the running Hello World example by sending a request to the local server.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Binary for Node.js Compat Example\nDESCRIPTION: These commands compile the configuration into a standalone binary named 'nodejs-compat' and then execute it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > nodejs-compat\n\n$ ./nodejs-compat\n```\n\n----------------------------------------\n\nTITLE: Building WASM Binary with worker-build\nDESCRIPTION: Instructions for installing worker-build and building the WASM binary in release mode.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/hello-wasm/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install worker-build\n$ worker-build --release\n```\n\n----------------------------------------\n\nTITLE: Running Workerd with Bazel\nDESCRIPTION: Command to run the Workerd server using Bazel build system with the provided configuration.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/hello-wasm/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve $(pwd)/samples/hello-wasm/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Compiling Node.js Compatible Worker to Standalone Binary\nDESCRIPTION: Commands to compile the Node.js compatibility example into a standalone binary file and then execute it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > nodejs-compat\n\n$ ./nodejs-compat\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Standalone Binary\nDESCRIPTION: Commands to compile Workerd configuration into a standalone binary and execute it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-crypto/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./workerd compile config.capnp > nodejs-compat\n\n./nodejs-compat\n```\n\n----------------------------------------\n\nTITLE: Testing the Server\nDESCRIPTION: Command to test the running server using curl to verify the 'Hello World' response.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-crypto/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Testing Workerd Hello World with curl\nDESCRIPTION: Command to test the Hello World example by making an HTTP request to localhost:8080 using curl, which should return 'Hello World'.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld_esm/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\nHello World\n```\n\n----------------------------------------\n\nTITLE: Compiling Workerd Hello World to Standalone Binary\nDESCRIPTION: Commands to compile the Hello World example into a standalone executable binary and then run it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/helloworld_esm/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > helloworld\n\n$ ./helloworld\n```\n\n----------------------------------------\n\nTITLE: Initializing V8 Repository Setup\nDESCRIPTION: Commands to create a new directory, fetch and initialize a local copy of the V8 codebase.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir v8\ncd v8\nfetch v8\n```\n\n----------------------------------------\n\nTITLE: Testing Node.js Compat Example Output\nDESCRIPTION: This command tests the running Node.js compatibility example by sending a curl request to localhost and expecting a 'Hello World' response.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\nHello World\n```\n\n----------------------------------------\n\nTITLE: Generating compile_commands.json for IDE language support\nDESCRIPTION: Command to generate the compile_commands.json file which enables project-level operations like 'Find References' in IDEs with clangd integration.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/development.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njust compile-commands\n```\n\n----------------------------------------\n\nTITLE: Syncing V8 to Workerd Version\nDESCRIPTION: Commands to checkout and sync V8 to the specific version currently used by Workerd.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <path_to_v8>/v8\ngit checkout <old_version>\ngclient sync\n```\n\n----------------------------------------\n\nTITLE: Testing Node.js Compatibility Example with cURL\nDESCRIPTION: This command tests the running Node.js compatibility example by sending a GET request to localhost:8080 using cURL.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-diagnosticschannel/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Building Benchmarks with Bazel Configuration\nDESCRIPTION: Command for building benchmarks using the benchmark configuration, which creates a release binary with additional debug information for performance testing.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/benchmarking.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--config=benchmark\n```\n\n----------------------------------------\n\nTITLE: Referencing Workerd Runtime Package\nDESCRIPTION: Package name reference for the Cloudflare workerd runtime that powers Cloudflare Workers platform.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workerd/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nworkerd\n```\n\n----------------------------------------\n\nTITLE: Rebasing Workerd V8 Changes\nDESCRIPTION: Command to rebase Workerd's V8 patches onto the new V8 version.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit rebase --onto <new_version> <old_version>\n```\n\n----------------------------------------\n\nTITLE: Running Micro Benchmarks with Bazel\nDESCRIPTION: Command for running micro benchmarks defined using the wd_cc_benchmark bazel macro to obtain benchmarking results.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/benchmarking.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbazel run --config=benchmark\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Sphinx Documentation\nDESCRIPTION: A comprehensive list of Python packages required for building documentation using Sphinx with Markdown support. The file specifies exact versions for each dependency to ensure consistency and compatibility across different development environments.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/requirements-doc.txt#2025-04-12_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nalabaster==1.0.0\nbabel==2.16.0\ncertifi==2024.12.14\ncharset-normalizer==3.4.1\ndocutils==0.21.2\nidna==3.10\nimagesize==1.4.1\nJinja2==3.1.6\nmarkdown-it-py==3.0.0\nMarkupSafe==3.0.2\nmdit-py-plugins==0.4.2\nmdurl==0.1.2\nmyst-parser==4.0.0\npackaging==24.2\nPygments==2.19.1\nPyYAML==6.0.2\nrequests==2.32.3\nsnowballstemmer==2.2.0\nSphinx==8.1.3\nsphinx-markdown-builder==0.6.7\nsphinxcontrib-applehelp==2.0.0\nsphinxcontrib-devhelp==2.0.0\nsphinxcontrib-htmlhelp==2.1.0\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==2.0.0\nsphinxcontrib-serializinghtml==2.0.0\ntabulate==0.9.0\nurllib3==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Generating Updated V8 Patches\nDESCRIPTION: Command to generate new patch files from the updated V8 changes.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit format-patch --full-index -k --no-signature --no-stat --zero-commit <new_version>\n```\n\n----------------------------------------\n\nTITLE: Serving Node.js Compatibility Example with workerd\nDESCRIPTION: This command serves the Node.js compatibility example on http://localhost:8080 using the workerd server and a configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-diagnosticschannel/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Updating Generated TypeScript Types\nDESCRIPTION: Command to build the current types and update the snapshot directory with the latest generated definitions.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/types/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbazel build //types:types && rm -rf types/generated-snapshot && cp -r bazel-bin/types/definitions types/generated-snapshot\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Tests\nDESCRIPTION: Command to verify that Workerd's tests pass with the updated V8 version.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbazel test //...\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Compatibility Example with Bazel\nDESCRIPTION: This command uses Bazel to run the workerd server and serve the Node.js compatibility example using a specific configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-diagnosticschannel/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/nodejs-compat/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Regenerating SQLite patch files in bash\nDESCRIPTION: Command to create a new patch file by comparing the pristine and modified SQLite source directories. This is used when a patch needed modifications to work with a newer SQLite version.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/patches/sqlite/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndiff -u5 -r sqlite-src-pristine sqlite-src-modified \\\n    | grep -v \"Only in sqlite-src-modified\" \\\n    > /path/to/workerd/patches/sqlite/0001-row-counts-plain.patch\n```\n\n----------------------------------------\n\nTITLE: Cleaning Bazel Cache\nDESCRIPTION: Command to completely clear the Bazel build cache when encountering persistent build issues.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbazel clean --expunge\n```\n\n----------------------------------------\n\nTITLE: Serving Module Fallback Example Locally with workerd\nDESCRIPTION: Command to run the example on localhost port 8080 using workerd's serve command with a configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/module_fallback/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Referencing workerd Runtime\nDESCRIPTION: Code block showing the project name and runtime reference for Cloudflare's JavaScript/Wasm server implementation.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workerd-darwin-arm64/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 👷 `workerd` for macOS ARM 64-bit, Cloudflare's JavaScript/Wasm Runtime\n```\n\n----------------------------------------\n\nTITLE: Setting Miniflare Workerd Path in Shell\nDESCRIPTION: Sets environment variable to configure Miniflare to use a specific workerd build path.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport MINIFLARE_WORKERD_PATH=\"<WORKERD_REPO_DIR>/bazel-bin/src/workerd/server/workerd\"\n```\n\n----------------------------------------\n\nTITLE: Running Module Fallback Example with Bazel\nDESCRIPTION: Command to run the example using Bazel build system, specifying the workerd server and the configuration file path.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/module_fallback/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/module_fallback/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for Workerd SDK Documentation\nDESCRIPTION: A ReStructuredText toctree directive that defines the documentation structure for the Workerd SDK with a maximum depth of 4 levels. It includes links to 'asgi' and 'workers' documentation sections.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/docs/modules.rst#2025-04-12_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   asgi\n   workers\n```\n\n----------------------------------------\n\nTITLE: Static Constants\nDESCRIPTION: Demonstrates how to expose C++ static constants to JavaScript.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/workerd/jsg/README.md#2025-04-12_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo: public jsg::Object {\npublic:\n  static jsg::Ref<Foo> constructor();\n\n  static const int ABC = 123;\n\n  JSG_RESOURCE_TYPE(Foo) {\n    JSG_STATIC_CONSTANT(ABC);\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nFoo.ABC; // 123\n```\n\n----------------------------------------\n\nTITLE: Testing the Module Fallback Example with curl\nDESCRIPTION: Command to test the running example by making an HTTP request to the localhost endpoint, which should return 'Hello World'.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/module_fallback/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\nHello World\n```\n\n----------------------------------------\n\nTITLE: Installing gen-compile-commands tool for workerd development\nDESCRIPTION: Command to install the gen-compile-commands utility needed for clangd integration. This is run as part of the project setup process.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/development.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njust prepare\n```\n\n----------------------------------------\n\nTITLE: Running REPL Server and Client\nDESCRIPTION: Commands to start the Python REPL server using Bazel and connect to it using a Node.js client. The server requires the experimental flag to be enabled.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/repl-server-python/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bazel-bin/src/workerd/server/workerd serve samples/repl-server-python/config.capnp --experimental\nnode samples/repl-server/client.js\n```\n\n----------------------------------------\n\nTITLE: Running Workerd with Bazel\nDESCRIPTION: Command to run the Workerd server using Bazel build system, specifying the configuration file path.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-crypto/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbazel run //src/workerd/server:workerd -- serve ~/cloudflare/workerd/samples/nodejs-compat/config.capnp\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Server with Node.js Compatibility Example\nDESCRIPTION: This command runs the Workerd server with experimental features enabled, serving the Node.js compatibility example configuration.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams-split2/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel-bin/src/workerd/server/workerd serve --experimental $(realpath samples/nodejs-compat-streams-split2/config.capnp)\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Workerd Binary\nDESCRIPTION: Commands to compile the configuration into a standalone binary and execute it.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/hello-wasm/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd compile config.capnp > hellowasm\n\n$ ./hellowasm\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite version and extracting source files for patching in bash\nDESCRIPTION: Commands to download, extract and prepare both pristine and modifiable copies of SQLite source code for applying patches. This creates two directories - one unmodified reference and one for applying patches.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/patches/sqlite/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=3470000\nunzip sqlite-src-$VERSION.zip\nmv sqlite-src-$VERSION sqlite-src-pristine\nunzip sqlite-src-$VERSION.zip  # yes, again\nmv sqlite-src-$VERSION sqlite-src-modified\n```\n\n----------------------------------------\n\nTITLE: Testing WASM Endpoint\nDESCRIPTION: Command to test the running WASM application using curl, which should return 'Hello WASM!'.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/hello-wasm/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n% curl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Displaying workerd Project Title in Markdown\nDESCRIPTION: This code snippet uses Markdown syntax to display the project title for workerd, emphasizing its compatibility with macOS 64-bit and its role as Cloudflare's JavaScript/Wasm runtime.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workerd-darwin-64/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# 👷 `workerd` for macOS 64-bit, Cloudflare's JavaScript/Wasm Runtime\n```\n\n----------------------------------------\n\nTITLE: Running Workerd Server Using Bazel\nDESCRIPTION: This command uses Bazel to run the Workerd server, serving the Node.js compatibility example configuration.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams-split2/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ bazel run //src/workerd/server:workerd -- serve $(realpath samples/nodejs-compat-streams-split2/config.capnp)\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Compat Example on Localhost with workerd\nDESCRIPTION: This command runs the Node.js compatibility example on http://localhost:8080 using the workerd serve command with a configuration file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/nodejs-compat-streams/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve config.capnp\n```\n\n----------------------------------------\n\nTITLE: Running workerd serve command for memory-cache example\nDESCRIPTION: This command runs the workerd serve command with the --experimental flag to execute the memory-cache example on localhost:8080 using the config.capnp file.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/samples/memory-cache/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./workerd serve --experimental config.capnp\n```\n\n----------------------------------------\n\nTITLE: Resynchronizing Bazel Toolchains\nDESCRIPTION: Command to resync locally cached toolchains when encountering build issues after installing dependencies.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbazel sync --configure\n```\n\n----------------------------------------\n\nTITLE: Setting up Table of Contents in reStructuredText for Python Workers API\nDESCRIPTION: This snippet demonstrates how to set up a table of contents directive in reStructuredText. It specifies a maximum depth of 2 levels and includes a caption labeled 'Contents:'.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/index.rst#2025-04-12_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Python SDK Documentation Generator\nDESCRIPTION: Commands to set up a Python virtual environment, install documentation dependencies, and generate markdown documentation files using Sphinx.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements-doc.txt\nmake markdown\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for ASGI module\nDESCRIPTION: Sphinx documentation directive that configures how the ASGI module should be automatically documented. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/docs/asgi.rst#2025-04-12_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: asgi\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for Workers Module\nDESCRIPTION: A Sphinx directive that automatically generates documentation for the 'workers' Python module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/src/pyodide/internal/sphinx/docs/workers.rst#2025-04-12_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: workers\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Referencing Workerd Runtime\nDESCRIPTION: Code snippet showing the package name and reference to the workerd runtime used in Cloudflare Workers.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/npm/workerd-linux-64/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 👷 `workerd` for Linux 64-bit, Cloudflare's JavaScript/Wasm Runtime\n```\n\n----------------------------------------\n\nTITLE: Applying and testing SQLite patches in bash\nDESCRIPTION: Commands to apply a patch to the modified SQLite source, then configure and test to ensure it works correctly. This verifies that existing patches still apply cleanly to the new SQLite version.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/patches/sqlite/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd sqlite-src-modified\npatch -p1 < /path/to/workerd/patches/sqlite/0001-row-counts-plain.patch\n./configure && make test\n```\n\n----------------------------------------\n\nTITLE: Creating V8 Branch for Workerd Patches\nDESCRIPTION: Commands to create a new branch for Workerd's V8 patches and apply them.\nSOURCE: https://github.com/cloudflare/workerd/blob/main/docs/v8-updates.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b workerd-patches\ngit am <path_to_workerd>/patches/v8/*\n```"
  }
]