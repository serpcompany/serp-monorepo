[
  {
    "owner": "lambda-fairy",
    "repo": "maud",
    "content": "TITLE: Generating HTML with Maud Macro in Rust\nDESCRIPTION: This snippet demonstrates how to use the Maud macro to generate HTML in Rust. It creates a simple HTML structure with a heading and a paragraph containing a link.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    h1 { \"Hello, world!\" }\n    p.intro {\n        \"This is an example of the \"\n        a href=\"https://github.com/lambda-fairy/maud\" { \"Maud\" }\n        \" template language.\"\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Basic Maud templating example in Rust\nDESCRIPTION: A simple Rust program that demonstrates using Maud's html! macro to create an HTML paragraph with dynamic content and then print it to console.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::html;\n\nfn main() {\n    let name = \"Lyra\";\n    let markup = html! {\n        p { \"Hi, \" (name) \"!\" }\n    };\n    println!(\"{}\", markup.into_string());\n}\n```\n\n----------------------------------------\n\nTITLE: Branching with @if/@else in Maud Templates\nDESCRIPTION: Demonstrates conditional rendering in Maud templates using @if, @else if, and @else branching. The example shows how to render different HTML content based on a user's identity.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/control-structures.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(PartialEq)]\nenum Princess { Celestia, Luna, Cadance, TwilightSparkle }\n\nlet user = Princess::Celestia;\n\n# let _ = maud::\nhtml! {\n    @if user == Princess::Luna {\n        h1 { \"Super secret woona to-do list\" }\n        ul {\n            li { \"Nuke the Crystal Empire\" }\n            li { \"Kick a puppy\" }\n            li { \"Evil laugh\" }\n        }\n    } @else if user == Princess::Celestia {\n        p { \"Sister, please stop reading my diary. It's rude.\" }\n    } @else {\n        p { \"Nothing to see here; move along.\" }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Template Components in Maud\nDESCRIPTION: Demonstrates creation of reusable template components using Rust functions that return Markup. Includes a header function with dynamic title, static footer function, and a page composition function that combines these components with additional content.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/partials.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{DOCTYPE, html, Markup};\n\n/// A basic header with a dynamic `page_title`.\nfn header(page_title: &str) -> Markup {\n    html! {\n        (DOCTYPE)\n        meta charset=\"utf-8\";\n        title { (page_title) }\n    }\n}\n\n/// A static footer.\nfn footer() -> Markup {\n    html! {\n        footer {\n            a href=\"rss.atom\" { \"RSS Feed\" }\n        }\n    }\n}\n\n/// The final Markup, including `header` and `footer`.\n///\n/// Additionally takes a `greeting_box` that's `Markup`, not `&str`.\npub fn page(title: &str, greeting_box: Markup) -> Markup {\n    html! {\n        // Add the header markup to the page\n        (header(title))\n        h1 { (title) }\n        (greeting_box)\n        (footer())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Looping with @for in Maud Templates\nDESCRIPTION: Demonstrates how to iterate over collections using @for loops in Maud templates. The example shows creating an ordered list by iterating over an array of names.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/control-structures.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet names = [\"Applejack\", \"Rarity\", \"Fluttershy\"];\n# let _ = maud::\nhtml! {\n    p { \"My favorite ponies are:\" }\n    ol {\n        @for name in &names {\n            li { (name) }\n        }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rocket Handler with Maud\nDESCRIPTION: Shows how to create a Rocket handler that returns a Maud Markup directly. The example sets up a route with a dynamic parameter and launches the Rocket application.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{html, Markup};\nuse rocket::{get, routes};\nuse std::borrow::Cow;\n\n#[get(\"/<name>\")]\nfn hello(name: &str) -> Markup {\n    html! {\n        h1 { \"Hello, \" (name) \"!\" }\n        p { \"Nice to meet you!\" }\n    }\n}\n\n#[rocket::launch]\nfn launch() -> _ {\n    rocket::build().mount(\"/\", routes![hello])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elements with Contents in Maud\nDESCRIPTION: Demonstrates how to create HTML elements with content using Maud's curly brace syntax. The example shows a heading and paragraph with nested strong element.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    h1 { \"Poem\" }\n    p {\n        strong { \"Rock,\" }\n        \" you are a rock.\"\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Splices in Attributes with Maud (Rust)\nDESCRIPTION: Demonstrates how to use splices within HTML attributes. The example shows setting a title attribute using a variable.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet secret_message = \"Surprise!\";\n# let _ = maud::\nhtml! {\n    p title=(secret_message) {\n        \"Nothing to see here, move along.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Escaping with PreEscaped in Maud\nDESCRIPTION: Demonstrates automatic HTML escaping in Maud and how to disable it using PreEscaped. HTML special characters are escaped by default for security, but PreEscaped allows rendering raw HTML.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/text-escaping.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::PreEscaped;\nhtml! {\n    \"<script>alert(\\\"XSS\\\")</script>\"                // &lt;script&gt;...\n    (PreEscaped(\"<script>alert(\\\"XSS\\\")</script>\"))  // <script>...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actix-web Handler with Maud\nDESCRIPTION: Demonstrates how to create an Actix-web handler that returns a Maud Markup, which implements the Responder trait. The example sets up a simple HTTP server with a single route.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{get, App, HttpServer, Result as AwResult};\nuse maud::{html, Markup};\nuse std::io;\n\n#[get(\"/\")]\nasync fn index() -> AwResult<Markup> {\n    Ok(html! {\n        html {\n            body {\n                h1 { \"Hello World!\" }\n            }\n        }\n    })\n}\n\n#[actix_web::main]\nasync fn main() -> io::Result<()> {\n    HttpServer::new(|| App::new().service(index))\n        .bind((\"127.0.0.1\", 8080))?\n        .run()\n        .await\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with @match in Maud Templates\nDESCRIPTION: Demonstrates using @match for pattern matching in Maud templates. The example shows rendering different HTML content based on matching against enum variants.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/control-structures.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nenum Princess { Celestia, Luna, Cadance, TwilightSparkle }\n\nlet user = Princess::Celestia;\n\n# let _ = maud::\nhtml! {\n    @match user {\n        Princess::Luna => {\n            h1 { \"Super secret woona to-do list\" }\n            ul {\n                li { \"Nuke the Crystal Empire\" }\n                li { \"Kick a puppy\" }\n                li { \"Evil laugh\" }\n            }\n        },\n        Princess::Celestia => {\n            p { \"Sister, please stop reading my diary. It's rude.\" }\n        },\n        _ => p { \"Nothing to see here; move along.\" }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Axum Handler with Maud\nDESCRIPTION: Demonstrates how to create an Axum handler that returns Maud-generated HTML. The example sets up a simple route and starts the Axum server.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{html, Markup};\nuse axum::{Router, routing::get};\n\nasync fn hello_world() -> Markup {\n    html! {\n        h1 { \"Hello, World!\" }\n    }\n}\n\n#[tokio::main]\nasync fn main() {\n    // build our application with a single route\n    let app = Router::new().route(\"/\", get(hello_world));\n\n    // run it with hyper on localhost:3000\n    let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n\n    axum::serve(listener, app.into_make_service()).await.unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maud dependency to Cargo.toml\nDESCRIPTION: Configuration for adding the Maud templating library as a dependency in the Cargo.toml file.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nmaud = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Render for CSS Stylesheet Links in Rust\nDESCRIPTION: Creates a custom Css struct that implements the Render trait to provide a shorthand for linking CSS stylesheets. The implementation generates HTML link tags with appropriate attributes.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/render-trait.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{html, Markup, Render};\n\n/// Links to a CSS stylesheet at the given path.\nstruct Css(&'static str);\n\nimpl Render for Css {\n    fn render(&self) -> Markup {\n        html! {\n            link rel=\"stylesheet\" type=\"text/css\" href=(self.0);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Attributes in Maud (Rust)\nDESCRIPTION: Demonstrates how to use attr=[value] syntax to conditionally render attributes with values. Attributes are only rendered if the value is Some<T>, and omitted if None.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    p title=[Some(\"Good password\")] { \"Correct horse\" }\n\n    @let value = Some(42);\n    input value=[value];\n\n    @let title: Option<&str> = None;\n    p title=[title] { \"Battery staple\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Elements and Data Attributes in Maud\nDESCRIPTION: Demonstrates support for hyphenated elements and attributes including custom elements, data attributes, and ARIA annotations. Shows an article with a data attribute and a custom tag-cloud element.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    article data-index=\"12345\" {\n        h1 { \"My blog\" }\n        tag-cloud { \"pinkie pie pony cute\" }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rouille Handler with Maud\nDESCRIPTION: Demonstrates how to use Maud with Rouille without any additional features. The example sets up a server with a dynamic route that returns HTML generated by Maud.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::html;\nuse rouille::{Response, router};\n\nfn main() {\n    rouille::start_server(\"localhost:8000\", move |request| {\n        router!(request,\n            (GET) (/{name: String}) => {\n                Response::html(html! {\n                    h1 { \"Hello, \" (name) \"!\" }\n                    p { \"Nice to meet you!\" }\n                })\n            },\n            _ => Response::empty_404()\n        )\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-empty Attributes in Maud\nDESCRIPTION: Shows how to add attributes with values to elements using attr=\"value\" syntax. The example creates an unordered list with links and various attributes on list items.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    ul {\n        li {\n            a href=\"about:blank\" { \"Apple Bloom\" }\n        }\n        li class=\"lower-middle\" {\n            \"Sweetie Belle\"\n        }\n        li dir=\"rtl\" {\n            \"Scootaloo \"\n            small { \"(also a chicken)\" }\n        }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Complex Expressions in Maud Splices (Rust)\nDESCRIPTION: Shows how to include arbitrary Rust code in a splice using a block. This is useful for complex expressions that would be difficult to read otherwise. The example demonstrates formatting a time value.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n# struct Foo;\n# impl Foo { fn time(self) -> Bar { Bar } }\n# struct Bar;\n# impl Bar { fn format(self, _: &str) -> &str { \"\" } }\n# fn something_convertible_to_foo() -> Option<Foo> { Some(Foo) }\n# fn test() -> Option<()> {\n# let _ = maud::\nhtml! {\n    p {\n        ({\n            let f: Foo = something_convertible_to_foo()?;\n            f.time().format(\"%H%Mh\")\n        })\n    }\n}\n# ;\n# Some(())\n# }\n```\n\n----------------------------------------\n\nTITLE: Using @if let in Maud Templates\nDESCRIPTION: Shows how to use @if let pattern matching in Maud templates. This example demonstrates conditional rendering based on an Option value, with different output depending on whether a user name is available.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/control-structures.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet user = Some(\"Pinkie Pie\");\n# let _ = maud::\nhtml! {\n    p {\n        \"Hello, \"\n        @if let Some(name) = user {\n            (name)\n        } @else {\n            \"stranger\"\n        }\n        \"!\"\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Toggles for Classes in Maud (Rust)\nDESCRIPTION: Shows how to use [foo] syntax to conditionally apply classes based on a boolean expression. The example demonstrates adding a 'cute' class based on a cuteness score.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet cuteness = 95;\n# let _ = maud::\nhtml! {\n    p.cute[cuteness > 50] { \"Squee!\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Classes and IDs in Maud\nDESCRIPTION: Shows the shorthand syntax for adding classes (.class) and IDs (#id) to elements. The example demonstrates chaining multiple classes and combining them with other attributes.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    input #cannon .big.scary.bright-red type=\"button\" value=\"Launch Party Cannon\";\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Submillisecond Handler with Maud\nDESCRIPTION: Demonstrates how to create a Submillisecond handler that returns Maud-generated HTML. The example sets up a simple route and starts the Submillisecond server.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{html, Markup};\nuse std::io::Result;\nuse submillisecond::{router, Application};\n\nfn main() -> Result<()> {\n    Application::new(router! {\n\n        GET \"/hello\" => helloworld\n    })\n    .serve(\"0.0.0.0:3000\")\n}\n\nfn helloworld() -> Markup {\n    html! {\n        h1 { \"Hello, World!\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Warp Handler with Maud\nDESCRIPTION: Shows how to create a Warp handler that returns Maud-generated HTML. The example sets up a simple route and starts the Warp server.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::html;\nuse warp::Filter;\n\n#[tokio::main]\nasync fn main() {\n    let hello = warp::any().map(|| html! { h1 { \"Hello, world!\" } });\n    warp::serve(hello).run(([127, 0, 0, 1], 8000)).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tide Handler with Maud\nDESCRIPTION: Shows how to create a Tide handler that returns Maud-generated HTML directly. The example sets up a route with a dynamic parameter and starts the Tide server.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::html;\nuse tide::Request;\nuse tide::prelude::*;\n\n#[async_std::main]\nasync fn main() -> tide::Result<()> {\n    let mut app = tide::new();\n    app.at(\"/hello/:name\").get(|req: Request<()>| async move {\n        let name: String = req.param(\"name\")?.parse()?;\n        Ok(html! {\n            h1 { \"Hello, \" (name) \"!\" }\n            p { \"Nice to meet you!\" }\n        })\n    });\n    app.listen(\"127.0.0.1:8080\").await?\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with @let in Maud Templates\nDESCRIPTION: Shows how to declare and use local variables within a Maud template using @let. This example demonstrates creating a variable within a loop to compute a derived value for each iteration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/control-structures.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet names = [\"Applejack\", \"Rarity\", \"Fluttershy\"];\n# let _ = maud::\nhtml! {\n    @for name in &names {\n        @let first_letter = name.chars().next().unwrap();\n        p {\n            \"The first letter of \"\n            b { (name) }\n            \" is \"\n            b { (first_letter) }\n            \".\"\n        }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Poem Handler with Maud\nDESCRIPTION: Shows how to create a Poem handler that returns Maud-generated HTML. The example sets up a simple route and starts the Poem server.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{html, Markup};\nuse poem::{get, handler, listener::TcpListener, Route, Server};\n\n#[handler]\nfn hello_world() -> Markup {\n    html! {\n        h1 { \"Hello, World!\" }\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), std::io::Error> {\n    let app = Route::new().at(\"/hello\", get(hello_world));\n    Server::new(TcpListener::bind(\"0.0.0.0:3000\"))\n        .name(\"hello-world\")\n        .run(app)\n        .await\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Void Elements in Maud\nDESCRIPTION: Shows how to declare void elements like br and link using semicolons. The example demonstrates multiple line breaks in a poem and includes a stylesheet link.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    link rel=\"stylesheet\" href=\"poetry.css\";\n    p {\n        \"Rock, you are a rock.\"\n        br;\n        \"Gray, you are gray,\"\n        br;\n        \"Like a rock, which you are.\"\n        br;\n        \"Rock.\"\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Implicit div Elements in Maud\nDESCRIPTION: Demonstrates how Maud automatically inserts a div element when a class or ID is provided without an element name.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    #main {\n        \"Main content!\"\n        .tip { \"Storing food in a refrigerator can make it 20% cooler.\" }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Toggles for Boolean Attributes in Maud (Rust)\nDESCRIPTION: Demonstrates how to use [foo] syntax to conditionally render boolean attributes based on a boolean expression. The example shows toggling the contenteditable attribute.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet allow_editing = true;\n# let _ = maud::\nhtml! {\n    p contenteditable[allow_editing] {\n        \"Edit me, I \"\n        em { \"dare\" }\n        \" you.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Values with Splices in Maud (Rust)\nDESCRIPTION: Demonstrates how to use (foo) syntax to insert values into HTML templates at runtime. Special characters are automatically escaped. The example shows inserting a string and numeric values from an array.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet best_pony = \"Pinkie Pie\";\nlet numbers = [1, 2, 3, 4];\n# let _ = maud::\nhtml! {\n    p { \"Hi, \" (best_pony) \"!\" }\n    p {\n        \"I have \" (numbers.len()) \" numbers, \"\n        \"and the first one is \" (numbers[0])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Splices in Classes and IDs with Maud (Rust)\nDESCRIPTION: Demonstrates how to use splices within class names and IDs. The example shows setting an ID and a class name using variables.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet name = \"rarity\";\nlet severity = \"critical\";\n# let _ = maud::\nhtml! {\n    aside #(name) {\n        p.{ \"color-\" (severity) } { \"This is the worst! Possible! Thing!\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PreEscaped Content in Maud (Rust)\nDESCRIPTION: Shows how to use the PreEscaped wrapper type to insert content without escaping. This is useful for including pre-formatted HTML content.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::PreEscaped;\nlet post = \"<p>Pre-escaped</p>\";\n# let _ = maud::\nhtml! {\n    h1 { \"My super duper blog post\" }\n    (PreEscaped(post))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Attributes in Maud\nDESCRIPTION: Demonstrates how to declare empty attributes by omitting the value. The example shows a checkbox with the checked attribute and associated label.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    form {\n        input type=\"checkbox\" name=\"cupcakes\" checked;\n        \" \"\n        label for=\"cupcakes\" { \"Do you like cupcakes?\" }\n    }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Render with pulldown-cmark in Rust\nDESCRIPTION: Implements the Render trait for Markdown content using pulldown-cmark for parsing and ammonia for sanitization. Converts Markdown text to safe HTML output.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/render-trait.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ammonia;\nuse maud::{Markup, PreEscaped, Render};\nuse pulldown_cmark::{Parser, html};\n\n/// Renders a block of Markdown using `pulldown-cmark`.\nstruct Markdown<T>(T);\n\nimpl<T: AsRef<str>> Render for Markdown<T> {\n    fn render(&self) -> Markup {\n        // Generate raw HTML\n        let mut unsafe_html = String::new();\n        let parser = Parser::new(self.0.as_ref());\n        html::push_html(&mut unsafe_html, parser);\n        // Sanitize it with ammonia\n        let safe_html = ammonia::clean(&unsafe_html);\n        PreEscaped(safe_html)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug-based Render in Rust\nDESCRIPTION: Creates a Debug wrapper struct that implements Render to display debug output of any type implementing fmt::Debug. Uses render_to() for efficient string manipulation and includes proper escaping.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/render-trait.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::{Escaper, html, Render};\nuse std::fmt;\nuse std::fmt::Write as _;\n\n/// Renders the given value using its `Debug` implementation.\nstruct Debug<T: fmt::Debug>(T);\n\nimpl<T: fmt::Debug> Render for Debug<T> {\n    fn render_to(&self, output: &mut String) {\n        let mut escaper = Escaper::new(output);\n        write!(escaper, \"{:?}\", self.0).unwrap();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Strings in Maud Templates\nDESCRIPTION: Shows how to use raw strings (r#\"...\"#) in Maud templates for multi-line content or text with special characters, which avoids the need for escape sequences.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/text-escaping.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nhtml! {\n    pre {\n        r#\"\n            Rocks, these are my rocks.\n            Sediments make me sedimental.\n            Smooth and round,\n            Asleep in the ground.\n            Shades of brown\n            And gray.\n        \"#\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Actix-web in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'actix-web' feature enabled in the project's Cargo.toml file.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"actix-web\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Concatenating Values in Attributes with Maud (Rust)\nDESCRIPTION: Shows how to concatenate multiple values within an attribute by wrapping the whole expression in braces. This is particularly useful for building URLs.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/splices-toggles.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconst GITHUB: &'static str = \"https://github.com\";\n# let _ = maud::\nhtml! {\n    a href={ (GITHUB) \"/lambda-fairy/maud\" } {\n        \"Fork me on GitHub\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Composed Maud Template Functions\nDESCRIPTION: Shows how to use the composed page function with custom content. Demonstrates passing a title and greeting box markup to generate a complete page.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/partials.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n# use maud::{html, Markup};\n# fn page(title: &str, greeting_box: Markup) -> Markup { greeting_box }\npage(\"Hello!\", html! {\n    div { \"Greetings, Maud.\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Rocket in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'rocket' feature enabled in the project's Cargo.toml file for Rocket integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"rocket\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Tide in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'tide' feature enabled in the project's Cargo.toml file for Tide integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"tide\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Axum in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'axum' feature enabled in the project's Cargo.toml file for Axum integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"axum\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Warp in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'warp' feature enabled in the project's Cargo.toml file for Warp integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"warp\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Submillisecond in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'submillisecond' feature enabled in the project's Cargo.toml file for Submillisecond integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"submillisecond\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maud with Poem in Cargo.toml\nDESCRIPTION: Adds the Maud dependency with the 'poem' feature enabled in the project's Cargo.toml file for Poem integration.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/web-frameworks.md#2025-04-23_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n# ...\n[dependencies]\nmaud = { version = \"*\", features = [\"poem\"] }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Syntax Differences Between Rust Editions for IDs\nDESCRIPTION: Demonstrates the different syntax requirements for ID selectors between Rust editions, as Rust 2021 requires a space before the # symbol.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    // Works on all Rust editions\n    input #pinkie;\n\n    // Works on Rust 2018 and older only\n    input#pinkie;\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Classes and IDs in Maud\nDESCRIPTION: Shows how to use quoted class and ID names for cases where names contain numbers or symbols that wouldn't parse normally.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/elements-attributes.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n# let _ = maud::\nhtml! {\n    div.\"col-sm-2\" { \"Bootstrap column!\" }\n}\n# ;\n```\n\n----------------------------------------\n\nTITLE: Using Literal Strings in Maud Templates\nDESCRIPTION: Demonstrates how to use literal strings in Maud HTML templates. Strings are wrapped in double quotes and support standard Rust escape sequences.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/text-escaping.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nhtml! {\n    \"Oatmeal, are you crazy?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Rust project with Cargo\nDESCRIPTION: Commands to create a new Rust binary project using Cargo and navigate to the project directory.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo new --bin pony-greeter\ncd pony-greeter\n```\n\n----------------------------------------\n\nTITLE: HTML output from Maud template\nDESCRIPTION: The resulting HTML output generated from running the Maud example program, showing a paragraph with greeting text.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Hi, Lyra!</p>\n```\n\n----------------------------------------\n\nTITLE: Building Maud Documentation with Make\nDESCRIPTION: Commands for building the Maud documentation and cleaning build artifacts using Make.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake\n```\n\nLANGUAGE: makefile\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Adding a New Page to Maud Documentation\nDESCRIPTION: Diff showing how to add a new page to the Maud documentation by modifying the 'slugs' variable in the Makefile.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-slugs := index getting-started basic-syntax partials ...\n+slugs := index getting-started basic-syntax my-awesome-new-page partials ...\n```\n\n----------------------------------------\n\nTITLE: Git Tagging and Pushing Release Tags Command\nDESCRIPTION: Terminal command for creating an annotated Git tag for a release version and pushing it to the remote repository. The tag should include a My Little Pony quote in its description.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/RELEASE_PROCESS.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a vX.Y.Z && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Documentation Update and Cargo Package Command\nDESCRIPTION: Command to update documentation dependencies and prepare for release by running cargo update in the docs directory.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/RELEASE_PROCESS.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd docs && cargo update\n```\n\n----------------------------------------\n\nTITLE: Using the DOCTYPE Constant in Maud Templates\nDESCRIPTION: Shows how to add a DOCTYPE declaration to HTML pages using Maud's built-in DOCTYPE constant, which inserts '<!DOCTYPE html>' into the output.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/docs/content/text-escaping.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse maud::DOCTYPE;\nhtml! {\n    (DOCTYPE)  // <!DOCTYPE html>\n}\n```\n\n----------------------------------------\n\nTITLE: Package Publishing Command\nDESCRIPTION: Command to publish the Maud crates to crates.io after completing all other release steps.\nSOURCE: https://github.com/lambda-fairy/maud/blob/main/RELEASE_PROCESS.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo publish\n```"
  }
]