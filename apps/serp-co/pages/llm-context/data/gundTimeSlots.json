[
  {
    "owner": "gund",
    "repo": "time-slots",
    "content": "TITLE: Generating Basic Time Slots for a Date Range\nDESCRIPTION: Demonstrates how to generate time slots for a specific date range and time period using the generateTimeSlots function. This example creates slots from November 15-20, 2020, for each day from 9:00 AM to 5:30 PM.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateTimeSlots, DateRange, TimeRange } from '@gund/time-slots';\n\nconst slots = generateTimeSlots(\n  DateRange.fromDates(new Date(2020, 10, 15), new Date(2020, 10, 20)),\n  TimeRange.fromTimeStrings('9:00', '17:30'),\n);\n\n// Now slots will contain array of `TimeRange`\n// between 15.11.2020 to 20.11.2020\n// with every day from 9am till 5:30pm\nconsole.log(slots);\n```\n\n----------------------------------------\n\nTITLE: Excluding Booked Time Slots from Available Slots\nDESCRIPTION: Demonstrates how to exclude already booked time slots from a list of all available slots using the excludeTimeSlots function. This returns only the slots that don't intersect with any booked slots.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { excludeTimeSlots } from '@gund/time-slots';\n\nconst allSlots = [...];\nconst bookedSlots = [...];\n\nconst availableSlots = excludeTimeSlots(allSlots, bookedSlots);\n\n// Result will have only slots from `allSlots` that\n// do not intersect with any slots in `bookedSlots`\nconsole.log(availableSlots);\n```\n\n----------------------------------------\n\nTITLE: Generating Time Slots with Time Intervals\nDESCRIPTION: Shows how to generate time slots with specific time intervals using the TimeInterval class. This example creates 30-minute time slots from November 15-16, 2020, between 9:00 AM and 5:30 PM.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  generateTimeSlots,\n  DateRange,\n  TimeRange,\n  TimeInterval,\n} from '@gund/time-slots';\n\nconst slots = generateTimeSlots(\n  DateRange.fromDates(new Date(2020, 10, 15), new Date(2020, 10, 16)),\n  TimeRange.fromTimeStrings('9:00', '17:30'),\n  TimeInterval.minutes(30),\n);\n\n// Now slots will contain array of `TimeRange`\n// between 15.11.2020 to 20.11.2020\n// with every day sliced in 30 mins intervals from 9am till 5:30pm\nconsole.log(slots);\n```\n\n----------------------------------------\n\nTITLE: Setting up the DateAdapter for Time Slots\nDESCRIPTION: Example showing how to initialize the time-slots library by providing a DateAdapter implementation, which is required for the library's date operations.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { provideDateAdapter } from '@gund/time-slots';\n\nprovideDateAdapter(...); // Your DateAdapter is here\n```\n\n----------------------------------------\n\nTITLE: Setting up the Date-fns Adapter for Time Slots\nDESCRIPTION: Example showing how to use the built-in date-fns adapter with the time-slots library for date operations.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { provideDateAdapter } from '@gund/time-slots';\nimport { dateFnsAdapter } from '@gund/time-slots/date-adapter/date-fns';\n\nprovideDateAdapter(dateFnsAdapter);\n```\n\n----------------------------------------\n\nTITLE: Installing the time-slots Library with npm\nDESCRIPTION: Commands for installing the @gund/time-slots library and optionally the date-fns dependency for using the built-in date adapter.\nSOURCE: https://github.com/gund/time-slots/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @gund/time-slots\n\n$ npm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Jest in Nx\nDESCRIPTION: Command for executing unit tests for the time-slots library using Jest as the testing framework within an Nx workspace.\nSOURCE: https://github.com/gund/time-slots/blob/master/packages/time-slots/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test time-slots\n```"
  }
]