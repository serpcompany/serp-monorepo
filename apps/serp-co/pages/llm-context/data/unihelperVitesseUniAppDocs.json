[
  {
    "owner": "uni-helper",
    "repo": "vitesse-uni-app-docs",
    "content": "TITLE: Creating a Pinia Store: counter.ts\nDESCRIPTION: This code defines a Pinia store named 'counter' using the defineStore function. It includes a reactive 'count' ref and an 'increment' function to update the count. This store can be used to manage a simple counter state across the application.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia';\n\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  function increment() {\n    count.value++\n  }\n  return { count, increment }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in index.vue\nDESCRIPTION: This code demonstrates how to use the 'counter' Pinia store within a Vue component. It imports the useCounterStore function, calls it to access the store instance, and then uses the store's properties (count) and methods (increment) within the component's template.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useCounterStore } from '../../stores/counter'\n\nconst counterStore = useCounterStore()\ncounterStore.count // 0\ncounterStore.increment()\ncounterStore.count // 1\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios with uni-app Adapter (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure axios to work with uni-app using the @uni-helper/axios-adapter. It imports axios and the adapter, then sets the adapter as the default for axios. Finally it uses useAxios to fetch data.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/data-fetching.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios'\nimport { createUniAppAxiosAdapter } from '@uni-helper/axios-adapter'\n\naxios.defaults.adapter = createUniAppAxiosAdapter()\nconst { data, isFinished } = useAxios('/user?ID=12345')\n```\n\n----------------------------------------\n\nTITLE: Global State with VueUse's createGlobalState\nDESCRIPTION: This code demonstrates using VueUse's `createGlobalState` and `useStorage` for global state management with persistence. It creates a `useAuth` composable that manages an authentication token stored using `useStorage`. The composable provides properties for the token, login status, and functions for logging in and out.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useAuth = createGlobalState(() => {\n  const token = useStorage('token', '', uniStorage)\n  const isLogin = computed(() => !!token.value)\n  const login = (_token: string) => {\n    token.value = _token\n  }\n  const logout = () => {\n    token.value = ''\n  }\n  return {\n    token,\n    isLogin,\n    login,\n    logout,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia in main.ts\nDESCRIPTION: This code snippet demonstrates how to configure Pinia in the main.ts file of a Vue application. It imports the necessary modules, creates a Pinia instance, and attaches it to the Vue app. This allows components to access and use the Pinia store.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSSRApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\n\nexport function createApp() {\n  const app = createSSRApp(App).use(pinia);\n  return {\n    app,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Importing Example with Vue, VueUse, and Uni-app\nDESCRIPTION: This code snippet demonstrates the usage of auto-imported functions and APIs from Vue, VueUse, and Uni-app without explicit imports. It shows how to use `ref` from Vue, `useToggle` from VueUse, and `onLoad` from Uni-app.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/guide/concepts/auto-imports.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOpen = ref(false) // 来自 vue\nconst [value, toggle] = useToggle() // 来自 vueuse\n\n// 来自 uni-app\nonLoad(() => {\n  toggle()\n  console.log(value)\n})\n```\n\n----------------------------------------\n\nTITLE: Using ref-based state in index.vue\nDESCRIPTION: This code snippet shows how to use the composable `useCount` in a Vue component. It imports and calls the `useCount` function, destructures the returned values (globalCount, localCount, increment), and then uses them in the template to display and update the state.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// 自动导入\nconst { globalCount, localCount, increment } = useCount()\n</script>\n\n<template>\n  <button @click=\"increment()\">\n    {{ globalCount }}\n    {{ localCount }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Styling with UnoCSS HTML\nDESCRIPTION: This code snippet demonstrates how to use the @uni-helper/unocss-preset-uni to apply styles conditionally based on the target platform (H5, APP, Mini Program, WeChat Mini Program, Alipay Mini Program). The `uni-h5:`, `uni-app:`, `uni-mp:`, `uni-weixin:`, and `uni-mp-alipay:` prefixes are used to specify the platform for which the style should be applied. This snippet requires the @uni-helper/unocss-preset-uni package.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/styling.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- 只在 H5 编译时生成 mx-auto 类 -->\n<view class='uni-h5:mx-auto'></view>\n<!-- 只在 APP 编译时生成 mx-auto 类 -->\n<view class='uni-app:mx-auto'></view>\n<!-- 只在小程序编译时生成 mx-auto 类 -->\n<view class='uni-mp:mx-auto'></view>\n<!-- 只在微信小程序编译时生成 mx-auto 类 -->\n<view class='uni-weixin:mx-auto'></view>\n<!-- 只在支付宝小程序编译时生成 mx-auto 类 -->\n<view class='uni-mp-alipay:mx-auto'></view>\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Adapter for uni-app\nDESCRIPTION: This code defines a custom storage adapter `uniStorage` that uses uni-app's `uni.getStorageSync`, `uni.setStorageSync`, and `uni.removeStorageSync` to interact with the storage.  This adapter is designed for use with libraries like `useStorage` from VueUse when working in a uni-app environment.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// storage adapter\nexport const uniStorage = {\n  getItem(key: string) {\n    return uni.getStorageSync(key) || null\n  },\n  setItem(key: string, value: any) {\n    return uni.setStorageSync(key, value)\n  },\n  removeItem(key: string) {\n    return uni.removeStorageSync(key)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with @uni-helper/uni-network (TypeScript)\nDESCRIPTION: This snippet shows how to fetch data using the @uni-helper/uni-network library, which is a Promise-based HTTP client for uni-app. It imports the `un` object and uses it to make a GET request. The response is logged to the console, and any errors are caught and logged as well.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/data-fetching.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { un } from '@uni-helper/uni-network'\n\ntry {\n  const response = await un.get('/user?ID=12345')\n  console.log(response)\n} catch (error) {\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Simple State Management with ref\nDESCRIPTION: This code demonstrates simple state management using Vue's `ref` API.  It creates a composable function `useCount` that manages both a global and a local count using `ref`. The function returns these counts and an `increment` function, which are then used in a Vue component to display and update the counts.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 全局状态\nconst globalCount = ref(1)\nexport function useCount() {\n  // 本地状态\n  const localCount = ref(1)\n  function increment() {\n    globalCount.value++\n    localCount.value++\n  }\n  return {\n    globalCount,\n    localCount,\n    increment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Vue Page Component\nDESCRIPTION: This code defines a simple Vue page component located at src/pages/about.vue. This page displays a message indicating its route is `/pages/about`. The page is automatically routed thanks to @uni-helper/vite-plugin-uni-pages.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <section>\n    <p>通过 `/pages/about` 来访问这个页面</p>\n  </section>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using reactive-based state in index.vue\nDESCRIPTION: This code snippet demonstrates how to use the `countStore` (created with `reactive`) within a Vue component. It accesses the store's `count` property and `increment` method directly in the template. Clicking the button triggers the `increment` method, updating the displayed count.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- 自动导入 -->\n  <button @click=\"countStore.increment()\">\n    {{ countStore.count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout with Route Block\nDESCRIPTION: This code snippet demonstrates how to define a custom layout for a specific page using the `route` block. The layout property specifies the name of the layout to be used for the page.  Requires @uni-helper/vite-plugin-uni-layouts.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<route lang=\"json\">\n{\n  \"layout\": \"custom\"\n}\n</route>\n```\n\n----------------------------------------\n\nTITLE: Vue Page Component with Title\nDESCRIPTION: This code defines a Vue page component located at src/pages/index.vue.  It contains a title and uses the AppAlert component. The page is automatically routed thanks to @uni-helper/vite-plugin-uni-pages.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>欢迎使用 vitess-uni-app </h1>\n    <AppAlert>\n      这个组件会自动导入\n    </AppAlert>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Imported Component in Vue\nDESCRIPTION: This code demonstrates how to use a globally registered component (AppAlert) within a Vue page. The component is automatically imported thanks to @uni-helper/vite-plugin-uni-components. It's used within the template of src/pages/index.vue to display a message.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>欢迎使用 vitess-uni-app </h1>\n    <AppAlert>\n      这个组件会自动导入\n    </AppAlert>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Simple State Management with reactive\nDESCRIPTION: This code demonstrates simple state management using Vue's `reactive` API.  It creates a reactive object `countStore` that holds a count and an increment function. This object serves as a simple store that can be used to manage and update the count.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const countStore = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Vue Component\nDESCRIPTION: This code defines a simple Vue component named AppAlert located in src/components/AppAlert.vue.  It uses a slot to allow content to be passed in from the parent component. The component is automatically registered globally by @uni-helper/vite-plugin-uni-components.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <span>\n    <slot />\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating PostCSS into Vite Configuration\nDESCRIPTION: This code snippet integrates the PostCSS configuration into the Vite build process for a uni-app project. By specifying the `postcss` property within the `css` options, Vite will use the custom PostCSS configuration defined in `postcss.config.ts` when processing CSS files. Additionally, `cssTarget` is set to `chrome61`\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport uni from '@dcloudio/vite-plugin-uni'\nimport postcssConfig from './postcss.config'\n\nexport default defineConfig({\n  build: {\n    cssTarget: 'chrome61'\n  },\n  css: {\n    postcss: postcssConfig\n  },\n  plugins: [uni()]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite build target for compatibility\nDESCRIPTION: This configuration shows how to set the `build.target` and `build.cssTarget` options in Vite to control the JavaScript and CSS syntax compatibility.  Setting the target to 'es6' ensures compatibility with browsers that support ES6 and later.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport uni from '@dcloudio/vite-plugin-uni'\n\nexport default defineConfig({\n  build: {\n    // esbuild 最低支持 es6\n    target: 'es6', // JavaScript 语法支持\n    cssTarget: 'es6' // CSS 语法支持\n  },\n  plugins: [uni()]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Uni App Project\nDESCRIPTION: This command creates a new Uni App project using the Vitesse template. It uses the `pnpm create uni` command with the specified project name and template option.  The `<project-name>` should be replaced with the desired name for the project directory.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create uni <project-name> -t vitesse\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with postcss-preset-env\nDESCRIPTION: This code shows how to configure PostCSS with postcss-preset-env to handle CSS compatibility.  It sets the `browsers` option to target specific browser versions, ensuring that the generated CSS is compatible with those browsers.  The configuration is only applied in production.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport postcssPresetEnv from 'postcss-preset-env';\n\nconst plugins = []\nif (process.env.NODE_ENV === 'production') {\n  plugins.push(\n    postcssPresetEnv({\n      // 自定义相应目标\n      // 微信小程序 2.11.2 开始支持 Vue3，对应 chrome53 和 ios10\n      browsers: ['chrome>=53', 'ios>=10']\n    })\n  )\n}\n\nexport default {\n  plugins\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally injecting Polyfills for H5 with vite-plugin-legacy\nDESCRIPTION: This code demonstrates how to conditionally inject Polyfills for H5 builds in a uni-app using the `vite-plugin-legacy`. It checks the `isH5` environment variable and applies the `legacy` plugin only when building for H5. This enables automatic injection of polyfills to support older browsers.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport uni from '@dcloudio/vite-plugin-uni'\nimport { isH5 } from '@uni-helper/uni-env'\nimport legacy from 'vite-plugin-legacy'\n// 或者使用 vite-plugin-legacy-swc\n// import legacy from 'vite-plugin-legacy-swc'\n\nexport default defineConfig({\n  build: {\n    // 最低支持 es6\n    target: 'es6', // JavaScript 语法支持\n    cssTarget: 'es6' // CSS 语法支持\n  },\n  plugins: [\n    uni(),\n    // 只有构建 H5 时应用插件自动注入 Polyfills\n    // 可以按实际情况调整\n    isH5 ? legacy() : null\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Manually injecting Polyfills for Mini-Program\nDESCRIPTION: This code snippet demonstrates how to manually inject Polyfills for a uni-app Mini-Program.  It imports specific polyfills from `core-js` based on the application's requirements. This ensures compatibility with older devices that lack certain JavaScript API support.  The code is conditionally included using `#ifdef MP` to target Mini-Program builds only.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** #ifdef MP */\n// 只有构建小程序时手动注入 Polyfills\n// 可以按实际情况调整\nimport 'core-js/actual/array/at'\n// ❌ 不要像下面这样做，会占用大量小程序体积且没有必要\n// import 'core-js/actual'\n/** #endif */\nimport { createSSRApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\n\nexport function createApp() {\n  const app = createSSRApp(App).use(pinia);\n  return {\n    app,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Uni App Project using degit\nDESCRIPTION: This command creates a new Uni App project using `degit`. It clones the Vitesse Uni App template from the specified GitHub repository.  The `<project-name>` should be replaced with the desired name for the project directory.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpx degit uni-helper/vitesse-uni-app <project-name>\n```\n\n----------------------------------------\n\nTITLE: Type Checking with vue-tsc\nDESCRIPTION: This command uses the vue-tsc tool to perform type checking within the project. It's recommended for ensuring type safety and catching potential errors during development and build processes. This command is executed from the project's root directory.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/guide/concepts/typescript.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm type-check\n```\n\n----------------------------------------\n\nTITLE: Building a Web application with pnpm\nDESCRIPTION: This command builds a uni-app for the web platform. The output is located in the `dist/build/h5` directory, which can be deployed like a traditional SPA.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:h5\n```\n\n----------------------------------------\n\nTITLE: Creating a Uni App Project using giget\nDESCRIPTION: This command creates a new Uni App project using `giget`. It downloads the Vitesse Uni App template from the specified GitHub repository.  The `<project-name>` should be replaced with the desired name for the project directory.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpx giget gh:uni-helper/vitesse-uni-app <project-name>\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS and postcss-preset-env\nDESCRIPTION: This command installs PostCSS and postcss-preset-env as development dependencies. PostCSS is a tool for transforming CSS, and postcss-preset-env allows you to use future CSS syntax today.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install postcss postcss-preset-env -D\n```\n\n----------------------------------------\n\nTITLE: Install Pinia Package with pnpm\nDESCRIPTION: This command installs the Pinia state management library version 2.0.36 using the pnpm package manager. Pinia is used for managing application state in Vue applications.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/state-management.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install pinia@2.0.36\n```\n\n----------------------------------------\n\nTITLE: Opening Project in VS Code\nDESCRIPTION: This command opens the newly created project directory in Visual Studio Code. It uses the `code` command followed by the name of the project directory.  The `<project-name>` should be replaced with the actual project name.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncode <project-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm\nDESCRIPTION: This command installs the project dependencies using the `pnpm` package manager. It uses the `pnpm install` command to fetch and install all required packages specified in the `package.json` file.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using yarn\nDESCRIPTION: This command installs the project dependencies using the `yarn` package manager.  It first removes `pnpm-lock.yaml` to avoid conflicts, then uses `yarn install` to install the dependencies.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx rimraf pnpm-lock.yaml\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm\nDESCRIPTION: This command installs the project dependencies using the `npm` package manager. It first removes `pnpm-lock.yaml` to avoid conflicts, then uses `npm install` to install the dependencies.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx rimraf pnpm-lock.yaml\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building a WeChat Mini-Program with pnpm\nDESCRIPTION: This command builds a uni-app for the WeChat Mini-Program platform. The output is located in the `dist/build/mp-weixin` directory.  The resulting files can be uploaded using the WeChat Developer Tools.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/deployment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:mp-weixin\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using bun\nDESCRIPTION: This command installs the project dependencies using the `bun` package manager. It first removes `pnpm-lock.yaml` to avoid conflicts, then uses `bun install` to install the dependencies.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx rimraf pnpm-lock.yaml\nbun install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server using pnpm\nDESCRIPTION: This command starts the development server in `h5` mode using the `pnpm` package manager. It executes the `dev` script defined in the `package.json` file.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server using yarn\nDESCRIPTION: This command starts the development server in `h5` mode using the `yarn` package manager. It executes the `dev` script defined in the `package.json` file.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server using npm\nDESCRIPTION: This command starts the development server in `h5` mode using the `npm` package manager. It executes the `dev` script defined in the `package.json` file.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server using bun\nDESCRIPTION: This command starts the development server in `h5` mode using the `bun` package manager. It executes the `dev` script defined in the `package.json` file.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for a specific platform with pnpm\nDESCRIPTION: This command starts the development server for a specific platform using the `pnpm` package manager.  The `<platform>` placeholder should be replaced with the desired platform identifier (e.g., `mp-weixin`).\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:<platform>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for a specific platform with yarn\nDESCRIPTION: This command starts the development server for a specific platform using the `yarn` package manager.  The `<platform>` placeholder should be replaced with the desired platform identifier (e.g., `mp-weixin`).\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev:<platform>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for a specific platform with npm\nDESCRIPTION: This command starts the development server for a specific platform using the `npm` package manager.  The `<platform>` placeholder should be replaced with the desired platform identifier (e.g., `mp-weixin`).\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm dev:<platform>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for a specific platform with bun\nDESCRIPTION: This command starts the development server for a specific platform using the `bun` package manager.  The `<platform>` placeholder should be replaced with the desired platform identifier (e.g., `mp-weixin`).\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/installation.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbun dev:<platform>\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Layout in Vue\nDESCRIPTION: This code defines a default layout component located at src/layouts/default.vue. It includes an AppHeader, a slot for page content, and an AppFooter. Pages will be rendered inside this layout by default using @uni-helper/vite-plugin-uni-layouts.\nSOURCE: https://github.com/uni-helper/vitesse-uni-app-docs/blob/main/getting-started/views.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <AppHeader />\n    <!-- src/pages/index.vue 和 src/pages/about.vue 内容展示 -->\n    <slot />\n    <AppFooter />\n  </div>\n</template>\n```"
  }
]