[
  {
    "owner": "ultrafunkamsterdam",
    "repo": "nodriver",
    "content": "TITLE: NoDriver Example: Automating Twitter Account Creation\nDESCRIPTION: A complete example showing how to automate the Twitter account creation process using NoDriver. Demonstrates form filling, handling dynamic elements, clicking buttons, and more complex automation flows.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    # wait for text to appear instead of a static number of seconds to wait\n    # this does not always work as expected, due to speed.\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    # sometimes, email field is not shown, because phone is being asked instead\n    # when this occurs, find the small text which says \"use email instead\"\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        # and click it\n        await use_mail_instead.click()\n\n        # now find the email field again\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    # send keys to email field\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    # find the name input field\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    # again, send random text\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    # since there are 3 select fields on the tab, we can use unpacking\n    # to assign each field\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    # await sel_month.focus()\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    # await sel_day.focus()\n    # i don't want to bother with month-lengths and leap years\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    # await sel_year.focus()\n    # i don't want to bother with age restrictions\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    # let's handle the cookie nag as well\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    # for btn in reversed(next_btns):\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)  # visually see what part we're actually in\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    # just wait for some button, before we continue\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    # we need the second one\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    # further implementation outside of scope\n    await tab.sleep(10)\n    driver.stop()\n\n    # verification code per mail\n\n\nif __name__ == \"__main__\":\n    # since asyncio.run never worked (for me)\n    # i use\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Complete NoDriver Browser Control Example\nDESCRIPTION: Extended example demonstrating multiple browser operations including screenshots, scrolling, element selection, and tab management\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver\n\nasync def main():\n    browser = await nodriver.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Twitter Account Creation with NODRIVER\nDESCRIPTION: A complete script that demonstrates creating a Twitter account using NODRIVER. Shows practical usage of element selection, text searching with best_match, form filling, and handling dynamic content like cookie consent dialogs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/readme.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    # wait for text to appear instead of a static number of seconds to wait\n    # this does not always work as expected, due to speed.\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    # sometimes, email field is not shown, because phone is being asked instead\n    # when this occurs, find the small text which says \"use email instead\"\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        # and click it\n        await use_mail_instead.click()\n\n        # now find the email field again\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    # send keys to email field\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    # find the name input field\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    # again, send random text\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    # since there are 3 select fields on the tab, we can use unpacking\n    # to assign each field\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    # await sel_month.focus()\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    # await sel_day.focus()\n    # i don't want to bother with month-lengths and leap years\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    # await sel_year.focus()\n    # i don't want to bother with age restrictions\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    # let's handle the cookie nag as well\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    # for btn in reversed(next_btns):\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)  # visually see what part we're actually in\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    # just wait for some button, before we continue\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    # we need the second one\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    # further implementation outside of scope\n    await tab.sleep(10)\n    driver.stop()\n\n    # verification code per mail\n\n\nif __name__ == \"__main__\":\n    # since asyncio.run never worked (for me)\n    # i use\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Basic Element Selection in NODRIVER\nDESCRIPTION: Examples of element selection methods using text search and CSS selectors. These methods support iframe content and include automatic retry with timeout functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntab.find(\"sometext\")\ntab.find_all(\"sometext\")\ntab.select(\"a[class*=something]\")\ntab.select_all(\"a[href] > div > img\")\n```\n\n----------------------------------------\n\nTITLE: Navigating to URLs in Python\nDESCRIPTION: This asynchronous method navigates to a specified URL, with options to open in a new tab or window. It handles waits and DOM event detection for safe navigation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get(url='chrome://welcome', new_tab=False, new_window=False):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Recording Video from HTML5 Elements in Python\nDESCRIPTION: An asynchronous function to record video from HTML5 video nodes. It allows specifying filename, folder, and duration. The recording stops and downloads when the video ends, is paused, or stops playing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/element.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def record_video(filename=None, folder=None, duration=None):\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of NODRIVER Browser Automation\nDESCRIPTION: Demonstrates the core functionality of NODRIVER including starting a browser, navigating to multiple websites, capturing screenshots, selecting elements, and performing basic interactions across multiple tabs and windows.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/readme.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport nodriver as uc\n\nasync def main():\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\n\nif __name__ == '__main__':\n\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Basic NoDriver Usage Example\nDESCRIPTION: Simple example showing how to initialize a browser and open a webpage using NoDriver's async interface\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver as uc\n\nasync def main():\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    ... further code ...\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Wait for Element Detection\nDESCRIPTION: Async method that blocks until specified elements are found using either CSS selector or text content. Throws TimeoutError if elements aren't found within timeout period.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync wait_for(selector='', text='', timeout=10)\n```\n\n----------------------------------------\n\nTITLE: Configuring NoDriver with Custom Start Options\nDESCRIPTION: Example showing how to customize NoDriver initialization with options like headless mode, custom user data directory, browser executable path, and additional browser arguments.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\n\nbrowser = await start(\n    headless=False,\n    user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\n    browser_executable_path=\"/path/to/some/other/browser\",\n    browser_args=['--some-browser-arg=true', '--some-other-option'],\n    lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\ntab = await browser.get('https://somewebsite.com')\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Text in Python\nDESCRIPTION: This asynchronous method searches for elements containing specific text, optionally filtered by tag name. It returns matching elements, including potential non-visible elements like inline scripts.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def find_elements_by_text(text, tag_hint=None):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Twitter Account Creation Automation Example\nDESCRIPTION: Complete example showing how to automate Twitter account creation using NoDriver with element selection, form filling, and interaction handling\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        await use_mail_instead.click()\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    await tab.sleep(10)\n    driver.stop()\n\n\nif __name__ == \"__main__\":\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Basic NoDriver Usage Example\nDESCRIPTION: Demonstrates basic browser automation including opening pages, taking screenshots, selecting elements and handling multiple tabs\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/readme.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport nodriver as uc\n\nasync def main():\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Basic NoDriver Usage Example\nDESCRIPTION: Simple example of using NoDriver to start a browser session, visit a website, and perform actions. Uses async/await pattern with a main function and loop execution.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver as uc\n\nasync def main():\n\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    ... further code ...\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Twitter Account with nodriver in Python\nDESCRIPTION: A detailed example script demonstrating how to use nodriver to automate the process of creating a Twitter account, including handling form inputs and navigation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    # wait for text to appear instead of a static number of seconds to wait\n    # this does not always work as expected, due to speed.\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    # sometimes, email field is not shown, because phone is being asked instead\n    # when this occurs, find the small text which says \"use email instead\"\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        # and click it\n        await use_mail_instead.click()\n\n        # now find the email field again\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    # send keys to email field\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    # find the name input field\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    # again, send random text\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    # since there are 3 select fields on the tab, we can use unpacking\n    # to assign each field\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    # await sel_month.focus()\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    # await sel_day.focus()\n    # i don't want to bother with month-lengths and leap years\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    # await sel_year.focus()\n    # i don't want to bother with age restrictions\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    # let's handle the cookie nag as well\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    # for btn in reversed(next_btns):\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)  # visually see what part we're actually in\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    # just wait for some button, before we continue\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    # we need the second one\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    # further implementation outside of scope\n    await tab.sleep(10)\n    driver.stop()\n\n    # verification code per mail\n\n\nif __name__ == \"__main__\":\n    # since asyncio.run never worked (for me)\n    # i use\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Twitter/X Account Creation Automation with NoDriver\nDESCRIPTION: Complete example script demonstrating how to automate Twitter/X account creation using NoDriver. Shows practical usage of element finding, form filling, and complex interactions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    # wait for text to appear instead of a static number of seconds to wait\n    # this does not always work as expected, due to speed.\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    # sometimes, email field is not shown, because phone is being asked instead\n    # when this occurs, find the small text which says \"use email instead\"\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        # and click it\n        await use_mail_instead.click()\n\n        # now find the email field again\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    # send keys to email field\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    # find the name input field\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    # again, send random text\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    # since there are 3 select fields on the tab, we can use unpacking\n    # to assign each field\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    # await sel_month.focus()\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    # await sel_day.focus()\n    # i don't want to bother with month-lengths and leap years\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    # await sel_year.focus()\n    # i don't want to bother with age restrictions\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    # let's handle the cookie nag as well\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    # for btn in reversed(next_btns):\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)  # visually see what part we're actually in\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    # just wait for some button, before we continue\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    # we need the second one\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    # further implementation outside of scope\n    await tab.sleep(10)\n    driver.stop()\n\n    # verification code per mail\n\n\nif __name__ == \"__main__\":\n    # since asyncio.run never worked (for me)\n    # i use\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Exporting Browser Cookies for Use with Requests Library\nDESCRIPTION: Exports browser cookies in a format compatible with the Python requests library, allowing session sharing between NoDriver and requests.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/browser.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# export for requests or other library\nrequests_style_cookies = await browser.cookies.get_all(requests_cookie_format=True)\n\n# use in requests:\nsession = requests.Session()\nfor cookie in requests_style_cookies:\n    session.cookies.set_cookie(cookie)\n```\n\n----------------------------------------\n\nTITLE: Getting Node at Coordinates\nDESCRIPTION: Function to get node ID at specified x,y coordinates. Returns backend node ID, frame ID and optional node ID. Includes options for handling shadow DOM and pointer events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef get_node_for_location(x, y, include_user_agent_shadow_dom=None, ignore_pointer_events_none=None)\n```\n\n----------------------------------------\n\nTITLE: Event Handling in NODRIVER\nDESCRIPTION: Method for adding event handlers with support for single or dual argument callbacks.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntab.add_handler(someEvent, callback)\n```\n\n----------------------------------------\n\nTITLE: Local Storage Operations in NODRIVER\nDESCRIPTION: Methods for getting and setting local storage content in the browser.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntab.get_local_storage()\ntab.set_local_storage(dict)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive NoDriver Browser Automation Example\nDESCRIPTION: A more complete example demonstrating multiple browser operations including taking screenshots, getting page content, scrolling, selecting elements, flashing elements, and handling multiple tabs and windows.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver\n\nasync def main():\n\n    browser = await nodriver.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\nif __name__ == '__main__':\n\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with Runtime API\nDESCRIPTION: Method to run scripts in a specified execution context with various configuration options like silent mode, command line API access, and promise handling.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef run_script(script_id, execution_context_id=None, object_group=None, silent=None, include_command_line_api=None, return_by_value=None, generate_preview=None, await_promise=None)\n```\n\n----------------------------------------\n\nTITLE: Twitter Account Creation Example\nDESCRIPTION: Complete example showing how to automate Twitter account creation using NoDriver, including form filling and handling dynamic elements\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/readme.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        await use_mail_instead.click()\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    await tab.sleep(10)\n    driver.stop()\n\n\nif __name__ == \"__main__\":\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of nodriver in Python\nDESCRIPTION: A simple example demonstrating how to start a browser, navigate to a website, and perform further actions using nodriver.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver as uc\n\nasync def main():\n\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    ... further code ...\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Installing nodriver via pip\nDESCRIPTION: Instructions for installing nodriver package using pip. It can be installed either as part of undetected-chromedriver or as a separate package.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: default\nCODE:\n```\n# todo. use pip install nodriver instead\npip install undetected-chromedriver\n```\n\nLANGUAGE: default\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: Configuring NoDriver with Custom Options\nDESCRIPTION: Example of starting NoDriver with custom browser configuration options including headless mode, user data directory, browser path, arguments, and language settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\n\nbrowser = await start(\n    headless=False,\n    user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\n    browser_executable_path=\"/path/to/some/other/browser\",\n    browser_args=['--some-browser-arg=true', '--some-other-option'],\n    lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\ntab = await browser.get('https://somewebsite.com')\n```\n\n----------------------------------------\n\nTITLE: Setting URL-based JavaScript Breakpoints\nDESCRIPTION: Method to set breakpoints based on URL or URL regex patterns. Supports script hash matching and conditional expressions. Returns breakpoint ID and resolved locations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef set_breakpoint_by_url(line_number, url=None, url_regex=None, script_hash=None, column_number=None, condition=None):\n    \"\"\"Sets JavaScript breakpoint at given location specified either by URL or URL regex.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Attributes\nDESCRIPTION: Returns an array of attribute names and values for a specified node ID. Returns a Generator of Dict objects containing the attribute list.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_attributes(node_id):\n    # Returns attributes for the specified node\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using the NoDriver Config Object for Configuration\nDESCRIPTION: Example of configuring NoDriver using the Config object instead of passing parameters directly to the start function.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\n\nconfig = Config()\nconfig.headless = False\nconfig.user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\nconfig.browser_executable_path=\"/path/to/some/other/browser\",\nconfig.browser_args=['--some-browser-arg=true', '--some-other-option'],\nconfig.lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\n```\n\n----------------------------------------\n\nTITLE: Basic NoDriver Usage Example\nDESCRIPTION: A minimal example showing how to start a browser, navigate to a website, and handle the asyncio event loop. This demonstrates the essential functionality of nodriver.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver as uc\n\nasync def main():\n\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    ... further code ...\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Executing Custom CDP Commands in Python\nDESCRIPTION: Demonstrates how to send a CDP navigation command to a browser tab using the send() method.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait tab.send(cdp.page.navigate(url='https://yoururlhere'))\n```\n\n----------------------------------------\n\nTITLE: Comprehensive nodriver Usage Example in Python\nDESCRIPTION: A more detailed example showing various nodriver operations including opening multiple tabs, scrolling, selecting elements, and taking screenshots.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: default\nCODE:\n```\nimport nodriver\n\nasync def main():\n\n    browser = await nodriver.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\nif __name__ == '__main__':\n\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom nodriver Options in Python\nDESCRIPTION: Examples of how to set custom options when starting nodriver, including headless mode, user data directory, and browser arguments.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: default\nCODE:\n```\nfrom nodriver import *\n\nbrowser = await start(\n    headless=False,\n    user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\n    browser_executable_path=\"/path/to/some/other/browser\",\n    browser_args=['--some-browser-arg=true', '--some-other-option'],\n    lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\ntab = await browser.get('https://somewebsite.com')\n```\n\nLANGUAGE: default\nCODE:\n```\nfrom nodriver import *\n\nconfig = Config()\nconfig.headless = False\nconfig.user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\nconfig.browser_executable_path=\"/path/to/some/other/browser\",\nconfig.browser_args=['--some-browser-arg=true', '--some-other-option'],\nconfig.lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Element Class in Python\nDESCRIPTION: Defines the Element class with various properties and methods for interacting with DOM elements. This class is central to the nodriver project for web automation and scraping.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/element.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Element(node, tab, tree=None):\n    # Various properties and methods defined here\n    # ...\n\n    async def click(self):\n        \"\"\"Click the element.\"\"\"\n        # Implementation not shown\n\n    async def get_position(self, abs=False):\n        # Implementation not shown\n\n    async def mouse_click(self, button='left', buttons=1, modifiers=0, hold=False, _until_event=None):\n        \"\"\"native click (on element) . note: this likely does not work atm, use click() instead\"\"\"\n        # Implementation not shown\n\n    async def send_keys(self, text):\n        \"\"\"send text to an input field, or any other html element.\"\"\"\n        # Implementation not shown\n\n    async def query_selector_all(self, selector):\n        \"\"\"like js querySelectorAll()\"\"\"\n        # Implementation not shown\n\n    async def save_screenshot(self, filename='auto', format='jpeg', scale=1):\n        \"\"\"Saves a screenshot of this element (only)\"\"\"\n        # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Installing NoDriver with pip\nDESCRIPTION: Command to install the NoDriver package using pip package manager\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/readme.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: Dumping JavaScript Object Properties in Python\nDESCRIPTION: This asynchronous method dumps the properties and values of a specified JavaScript object as a dictionary. It can handle complex objects but may not always serialize them correctly.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def js_dumps(obj_name, return_by_value=True):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Emulating Network Conditions in Python\nDESCRIPTION: Activates the emulation of various network conditions such as offline mode, latency, throughput limitations, and connection type. Can also emulate WebRTC-specific packet behaviors like loss and reordering.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nemulate_network_conditions(offline, latency, download_throughput, upload_throughput, connection_type=None, packet_loss=None, packet_queue_length=None, packet_reordering=None)\n```\n\n----------------------------------------\n\nTITLE: Multi-tab and Window NoDriver Example\nDESCRIPTION: A more complex example showing multiple NoDriver capabilities including screenshots, content retrieval, element selection, tab management, and window operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport nodriver\n\nasync def main():\n\n    browser = await nodriver.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\nif __name__ == '__main__':\n\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Document Content in Python using NoDriver CDP\nDESCRIPTION: This method sets the given markup as the document's HTML for a specified frame. It takes frame_id and html as parameters and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef set_document_content(frame_id, html):\n    \"\"\"Sets given markup as the document's HTML.\n\n    Parameters:\n      frame_id (FrameId): Frame id to set HTML for.\n      html (str): HTML content to set.\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expression on Call Frame in Python\nDESCRIPTION: This function evaluates an expression on a given call frame. It accepts various parameters to control the evaluation process and returns a generator that yields the evaluation result and optional exception details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef evaluate_on_call_frame(call_frame_id: CallFrameId, expression: str, object_group: Optional[str] = None, include_command_line_api: Optional[bool] = None, silent: Optional[bool] = None, return_by_value: Optional[bool] = None, generate_preview: Optional[bool] = None, throw_on_side_effect: Optional[bool] = None, timeout: Optional[TimeDelta] = None) -> Generator[Dict[str, Any], Dict[str, Any], Tuple[RemoteObject, Optional[ExceptionDetails]]]:\n```\n\n----------------------------------------\n\nTITLE: Alternative Configuration Method for NoDriver\nDESCRIPTION: Another approach to configuring NoDriver using a Config object instead of direct parameters to the start function.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\n\nconfig = Config()\nconfig.headless = False\nconfig.user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\nconfig.browser_executable_path=\"/path/to/some/other/browser\",\nconfig.browser_args=['--some-browser-arg=true', '--some-other-option'],\nconfig.lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Timeline Monitoring in CDP\nDESCRIPTION: This code snippet shows how to enable performance timeline event monitoring by specifying the types of events to report. It overrides any previous filters, and passing an empty filter disables recording.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/performance_timeline.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nenable(event_types)\n```\n\n----------------------------------------\n\nTITLE: NoDriver Custom Configuration\nDESCRIPTION: Example showing how to start NoDriver with custom configuration options including headless mode, user data directory, and browser arguments\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\n\nbrowser = await start(\n    headless=False,\n    user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\n    browser_executable_path=\"/path/to/some/other/browser\",\n    browser_args=['--some-browser-arg=true', '--some-other-option'],\n    lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Download Behavior\nDESCRIPTION: This experimental function sets the behavior for file downloads, allowing control over download permissions, default paths, and event emission. It returns a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_download_behavior(behavior, browser_context_id=None, download_path=None, events_enabled=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Setting Window Size and Position in Browser\nDESCRIPTION: Async method to set browser window dimensions and position on screen. Takes pixel values for left and top positioning, along with width and height dimensions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync set_window_size(left=0, top=0, width=1280, height=1024)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension to Config in Python\nDESCRIPTION: Method to add a browser extension to the Config object. It accepts either a folder path containing the manifest or a .crx extension file.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/others_and_helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add_extension(extension_path):\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Bindings - Python Runtime Method\nDESCRIPTION: Method to add JavaScript bindings to execution contexts. Can target specific contexts or apply globally. Bindings survive page reloads and accept a single string argument.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef add_binding(name, execution_context_id=None, execution_context_name=None)\n```\n\n----------------------------------------\n\nTITLE: Highlighting DOM Nodes in NoDriver Python API\nDESCRIPTION: A generator function that highlights a specified DOM node. Returns dictionary objects containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_node():\n    \"\"\"Highlights DOM node.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Basic Nodriver Usage Example\nDESCRIPTION: Demonstrates core functionality including browser initialization, page navigation, screenshots, and element manipulation using async/await patterns\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport nodriver as uc\n\nasync def main():\n    browser = await uc.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n       await p.bring_to_front()\n       await p.scroll_down(200)\n       await p   # wait for events to be processed\n       await p.reload()\n       if p != page3:\n           await p.close()\n\n\nif __name__ == '__main__':\n    # since asyncio.run never worked (for me)\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Tracking in Python\nDESCRIPTION: Enables network tracking so that network events will be delivered to the client. Allows configuration of buffer sizes for network payloads and post data size limitations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nenable(max_total_buffer_size=None, max_resource_buffer_size=None, max_post_data_size=None)\n```\n\n----------------------------------------\n\nTITLE: Saving Browser Cookies in NoDriver\nDESCRIPTION: Saves all cookies from the browser to a file. When no filepath is provided, cookies are saved to '.session.dat' by default.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/browser.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save. when no filepath is given, it is saved in '.session.dat'\nawait browser.cookies.save()\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Requests in Python\nDESCRIPTION: Toggles ignoring cache for each request. When set to true, the cache will not be used for any requests.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ndef set_cache_disabled(cache_disabled):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Twitter Account Creation Example\nDESCRIPTION: Complete example showing automated Twitter account creation using Nodriver's advanced features including element selection, text matching, and form interaction\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport string\nimport logging\n\nlogging.basicConfig(level=30)\n\nimport nodriver as uc\n\nmonths = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\",\n]\n\n\nasync def main():\n    driver = await uc.start()\n\n    tab = await driver.get(\"https://twitter.com\")\n\n    # wait for text to appear instead of a static number of seconds to wait\n    # this does not always work as expected, due to speed.\n    print('finding the \"create account\" button')\n    create_account = await tab.find(\"create account\", best_match=True)\n\n    print('\"create account\" => click')\n    await create_account.click()\n\n    print(\"finding the email input field\")\n    email = await tab.select(\"input[type=email]\")\n\n    # sometimes, email field is not shown, because phone is being asked instead\n    # when this occurs, find the small text which says \"use email instead\"\n    if not email:\n        use_mail_instead = await tab.find(\"use email instead\")\n        # and click it\n        await use_mail_instead.click()\n\n        # now find the email field again\n        email = await tab.select(\"input[type=email]\")\n\n    randstr = lambda k: \"\".join(random.choices(string.ascii_letters, k=k))\n\n    # send keys to email field\n    print('filling in the \"email\" input field')\n    await email.send_keys(\"\".join([randstr(8), \"@\", randstr(8), \".com\"]))\n\n    # find the name input field\n    print(\"finding the name input field\")\n    name = await tab.select(\"input[type=text]\")\n\n    # again, send random text\n    print('filling in the \"name\" input field')\n    await name.send_keys(randstr(8))\n\n    # since there are 3 select fields on the tab, we can use unpacking\n    # to assign each field\n    print('finding the \"month\" , \"day\" and \"year\" fields in 1 go')\n    sel_month, sel_day, sel_year = await tab.select_all(\"select\")\n\n    # await sel_month.focus()\n    print('filling in the \"month\" input field')\n    await sel_month.send_keys(months[random.randint(0, 11)].title())\n\n    # await sel_day.focus()\n    # i don't want to bother with month-lengths and leap years\n    print('filling in the \"day\" input field')\n    await sel_day.send_keys(str(random.randint(0, 28)))\n\n    # await sel_year.focus()\n    # i don't want to bother with age restrictions\n    print('filling in the \"year\" input field')\n    await sel_year.send_keys(str(random.randint(1980, 2005)))\n\n    await tab\n\n    # let's handle the cookie nag as well\n    cookie_bar_accept = await tab.find(\"accept all\", best_match=True)\n    if cookie_bar_accept:\n        await cookie_bar_accept.click()\n\n    await tab.sleep(1)\n\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    # for btn in reversed(next_btns):\n    await next_btn.mouse_click()\n\n    print(\"sleeping 2 seconds\")\n    await tab.sleep(2)  # visually see what part we're actually in\n\n    print('finding \"next\" button')\n    next_btn = await tab.find(text=\"next\", best_match=True)\n    print('clicking \"next\" button')\n    await next_btn.mouse_click()\n\n    # just wait for some button, before we continue\n    await tab.select(\"[role=button]\")\n\n    print('finding \"sign up\"  button')\n    sign_up_btn = await tab.find(\"Sign up\", best_match=True)\n    # we need the second one\n    print('clicking \"sign up\"  button')\n    await sign_up_btn.click()\n\n    print('the rest of the \"implementation\" is out of scope')\n    # further implementation outside of scope\n    await tab.sleep(10)\n    driver.stop()\n\n    # verification code per mail\n\n\nif __name__ == \"__main__\":\n    # since asyncio.run never worked (for me)\n    # i use\n    uc.loop().run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: AddScriptToEvaluateOnNewDocument Command Implementation in Python\nDESCRIPTION: Evaluates a given script in every frame upon creation before loading frame scripts. Supports optional parameters for isolated world creation, command line API availability, and immediate execution in existing contexts.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef add_script_to_evaluate_on_new_document(source, world_name=None, include_command_line_api=None, run_immediately=None):\n    \"\"\"\n    Evaluates given script in every frame upon creation (before loading frame's scripts).\n\n    * **Parameters:**\n      * **source** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **world_name** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]) – **(EXPERIMENTAL)**  *(Optional)* If specified, creates an isolated world with the given name and evaluates given script in it. This world name will be used as the ExecutionContextDescription::name when the corresponding event is emitted.\n      * **include_command_line_api** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) – **(EXPERIMENTAL)**  *(Optional)* Specifies whether command line API should be available to the script, defaults to false.\n      * **run_immediately** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) – **(EXPERIMENTAL)**  *(Optional)* If true, runs the script immediately on existing execution contexts or worlds. Default: false.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`ScriptIdentifier`](#nodriver.cdp.page.ScriptIdentifier)]\n    * **Returns:**\n      Identifier of the added script.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Scroll Gestures in Python with CDP\nDESCRIPTION: Method to synthesize scroll gestures by generating touch events over time. Supports configurable start coordinates, scroll distances, overscroll, speed, and repeat behavior. Returns a Generator of input event dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef synthesize_scroll_gesture(x, y, x_distance=None, y_distance=None, x_overscroll=None, y_overscroll=None, prevent_fling=None, speed=None, gesture_source_type=None, repeat_count=None, repeat_delay_ms=None, interaction_marker_name=None):\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Class Definition\nDESCRIPTION: Comprehensive class for handling HTTP response data including headers, security details, and various metadata.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Response(url, status, status_text, headers, mime_type, charset, connection_reused, connection_id, encoded_data_length, security_state, headers_text=None, request_headers=None, request_headers_text=None, remote_ip_address=None, remote_port=None, from_disk_cache=None, from_service_worker=None, from_prefetch_cache=None, from_early_hints=None, service_worker_router_info=None, timing=None, service_worker_response_source=None, response_time=None, cache_storage_cache_name=None, protocol=None, alternate_protocol_usage=None, security_details=None):\n```\n\n----------------------------------------\n\nTITLE: Getting Node HTML Markup\nDESCRIPTION: Function to retrieve the outer HTML markup of a node specified by various ID types (node ID, backend node ID, or object ID).\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef get_outer_html(node_id=None, backend_node_id=None, object_id=None)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All URLs from Page in Python\nDESCRIPTION: This asynchronous method collects all URLs from various HTML elements (a, link, img, script, meta) on the page. It can return absolute or relative URLs as specified.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def get_all_urls(absolute=True):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Overriding Device Metrics in Python\nDESCRIPTION: This function overrides device screen dimensions and other properties. It takes parameters for width, height, scale factor, mobile emulation, and various optional screen and viewport settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nset_device_metrics_override(width, height, device_scale_factor, mobile, scale=None, screen_width=None, screen_height=None, position_x=None, position_y=None, dont_set_visible_size=None, screen_orientation=None, viewport=None, display_feature=None, device_posture=None)\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Tap Gestures in Python with CDP\nDESCRIPTION: Method to synthesize tap gestures by generating touch events over a specified duration. Supports configurable coordinates, duration, tap count and gesture source type. Returns a Generator of input event dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef synthesize_tap_gesture(x, y, duration=None, tap_count=None, gesture_source_type=None):\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript Expressions in Runtime\nDESCRIPTION: Function to evaluate JavaScript expressions in the global context with extensive configuration options. Supports various execution modes, context specification, and evaluation settings like CSP bypassing and promise resolution.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nevaluate(expression, object_group=None, include_command_line_api=None, silent=None, context_id=None, return_by_value=None, generate_preview=None, user_gesture=None, await_promise=None, throw_on_side_effect=None, timeout=None, disable_breaks=None, repl_mode=None, allow_unsafe_eval_blocked_by_csp=None, unique_context_id=None, serialization_options=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Isolated World for Frame in Python CDP\nDESCRIPTION: Creates an isolated world for the specified frame with options for naming and access control. Returns the execution context ID of the isolated world.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ncreate_isolated_world(frame_id, world_name=None, grant_univeral_access=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Window State and Dimensions\nDESCRIPTION: Async method to control window state (normal/minimized/maximized/fullscreen) and dimensions. Dimension parameters are ignored for non-normal states.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync set_window_state(left=0, top=0, width=1280, height=720, state='normal')\n```\n\n----------------------------------------\n\nTITLE: Installing NODRIVER with pip\nDESCRIPTION: Simple pip command to install the NODRIVER package for web scraping and browser automation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/readme.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for CustomPreview in CDP Runtime\nDESCRIPTION: Defines the CustomPreview class for representing custom-formatted previews of JavaScript objects with potentially lazy-loaded body content.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPreview(header, body_getter_id=None):\n\n    header *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    body_getter_id *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`RemoteObjectId`](#nodriver.cdp.runtime.RemoteObjectId)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Moving DOM Nodes in NoDriver Python API\nDESCRIPTION: Moves a node to a new container, optionally placing it before a specified anchor node. Returns the new ID of the moved node.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\ndef move_to(node_id, target_node_id, insert_before_node_id=None):\n    \"\"\"Moves node into the new container, places it before the given anchor.\n\n    Parameters:\n      node_id (NodeId): Id of the node to move.\n      target_node_id (NodeId): Id of the element to drop the moved node into.\n      insert_before_node_id (Optional[NodeId]): (Optional) Drop node before this one (if absent, the moved node becomes the last child of ``targetNodeId``).\n    Return type: Generator[Dict[str, Any], Dict[str, Any], NodeId]\n    Returns: New id of the moved node.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Saving Browser Cookies in Python\nDESCRIPTION: Demonstrates how to save browser cookies to a file. If no filepath is specified, cookies are saved to '.session.dat' by default.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/browser.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save. when no filepath is given, it is saved in '.session.dat'\nawait browser.cookies.save()\n```\n\n----------------------------------------\n\nTITLE: Getting DOM Document in Python\nDESCRIPTION: Retrieves the root DOM node and optionally its subtree. Takes depth and pierce parameters to control traversal depth and iframe/shadow root handling.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef get_document(depth=None, pierce=None)\n```\n\n----------------------------------------\n\nTITLE: Page Navigation in Python using NoDriver CDP\nDESCRIPTION: Function that navigates the current page to a given URL. It accepts parameters for the target URL, referrer, transition type, frame ID, and referrer policy. Returns a tuple containing the navigated frame ID, loader identifier, and any error messages.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef navigate(url, referrer=None, transition_type=None, frame_id=None, referrer_policy=None):\n    \"\"\"\n    Navigates current page to the given URL.\n    \n    Parameters:\n        url (str): URL to navigate the page to.\n        referrer (Optional[str]): Referrer URL.\n        transition_type (Optional[TransitionType]): Intended transition type.\n        frame_id (Optional[FrameId]): Frame id to navigate, if not specified navigates the top frame.\n        referrer_policy (Optional[ReferrerPolicy]): Referrer-policy used for the navigation.\n    \n    Returns:\n        Tuple containing:\n        - frameId: Frame id that has navigated (or failed to navigate)\n        - loaderId: Loader identifier (optional)\n        - errorText: User friendly error message if navigation failed (optional)\n    \"\"\"\n    # Implementation not shown in documentation\n```\n\n----------------------------------------\n\nTITLE: Loading Browser Cookies in NoDriver\nDESCRIPTION: Loads cookies from a file into the browser. When no filepath is provided, cookies are loaded from '.session.dat' by default.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/browser.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# load. when no filepath is given, it is loaded from '.session.dat'\nawait browser.cookies.load()\n```\n\n----------------------------------------\n\nTITLE: Page Reload Method in Python CDP\nDESCRIPTION: Method to reload a page with options to ignore cache and inject scripts. Supports experimental loader ID verification to prevent unintended target reloading.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nreload(ignore_cache=None, script_to_evaluate_on_load=None, loader_id=None)\n```\n\n----------------------------------------\n\nTITLE: Take Coverage Delta Method\nDESCRIPTION: Method to obtain list of rules that became used since last call. Returns a Generator yielding coverage data and timestamp information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntake_coverage_delta()\n```\n\n----------------------------------------\n\nTITLE: Live JavaScript Source Editing in Python\nDESCRIPTION: Method to edit JavaScript source code live. Includes options for dry run and top frame editing. Returns a Generator with detailed status information about the edit operation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef set_script_source(script_id: ScriptId, script_source: str, dry_run: Optional[bool] = None, allow_top_frame_editing: Optional[bool] = None) -> Generator\n```\n\n----------------------------------------\n\nTITLE: Touch Emulation Control Method\nDESCRIPTION: Enables touch event emulation on platforms that don't support touch. Configurable maximum touch points.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef set_touch_emulation_enabled(enabled: bool, max_touch_points: Optional[int] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Loading Browser Cookies in Python\nDESCRIPTION: Shows how to load browser cookies from a file. If no filepath is specified, cookies are loaded from '.session.dat' by default.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/browser.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# load. when no filepath is given, it is loaded from '.session.dat'\nawait browser.cookies.load()\n```\n\n----------------------------------------\n\nTITLE: Viewport Size Control Method\nDESCRIPTION: Method to resize the frame/viewport of the page. Useful for producing screenshots of specific sizes. Not supported on Android.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef set_visible_size(width, height)\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Python\nDESCRIPTION: Demonstrates how to retrieve all browser cookies using the get_all_cookies command. This function is a generator that returns a list of Cookie objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/network.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncookies = yield from network.get_all_cookies()\n```\n\n----------------------------------------\n\nTITLE: Stopping Page Loading in Python\nDESCRIPTION: Forces the page to stop all navigations and pending resource fetches.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ndef stop_loading() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Adding Network Traffic Event Handler in Python\nDESCRIPTION: Shows how to add a handler function to monitor network requests using CDP events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npage.add_handler(cdp.network.RequestWillBeSent, lambda event: print('network event => %s' % event.request))\n```\n\n----------------------------------------\n\nTITLE: DOM Snapshot Capture Command - Python\nDESCRIPTION: Generator function for capturing a document snapshot including the full DOM tree. Returns nodes and layout information in a flattened array format. Includes options for computed styles, paint orders, and DOM rectangles.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef capture_snapshot(computed_styles, include_paint_order=None, include_dom_rects=None, \n                  include_blended_background_colors=None, include_text_color_opacities=None):\n    \"\"\"Returns a document snapshot with DOM tree and layout information\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Timezone Override Method\nDESCRIPTION: Method to override system timezone. Takes timezone identifier as parameter, empty string disables override.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef set_timezone_override(timezone_id: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Getting Top Layer Elements\nDESCRIPTION: Experimental function to retrieve NodeIds of elements in the top layer, which are rendered closest to the user in the viewport.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef get_top_layer_elements()\n```\n\n----------------------------------------\n\nTITLE: Focusing DOM Elements\nDESCRIPTION: Focuses a specified DOM element using either node ID, backend node ID, or object ID. Returns a Generator of Dict objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef focus(node_id=None, backend_node_id=None, object_id=None):\n    # Focuses the given element\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Target in Python\nDESCRIPTION: Creates a new browser page with configurable window properties, context settings, and frame control options.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncreate_target(url, width=None, height=None, browser_context_id=None, enable_begin_frame_control=None, new_window=None, background=None, for_tab=None)\n```\n\n----------------------------------------\n\nTITLE: Emulating Media Type and Features in Python\nDESCRIPTION: This function emulates a given media type or media feature for CSS media queries. It takes optional parameters for the media type to emulate and a list of media features to emulate.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nset_emulated_media(media=None, features=None)\n```\n\n----------------------------------------\n\nTITLE: Cookie Parameter Class Definition in Python\nDESCRIPTION: Defines the CookieParam class that represents cookie parameters including name, value, domain, path and various security attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass CookieParam(name, value, url=None, domain=None, path=None, secure=None, http_only=None, same_site=None, expires=None, priority=None, same_party=None, source_scheme=None, source_port=None, partition_key=None):\n    name : str\n    value : str\n    url : Optional[str] = None\n    domain : Optional[str] = None\n    path : Optional[str] = None\n    secure : Optional[bool] = None\n    http_only : Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Class for DOM Representation in Python\nDESCRIPTION: Defines a comprehensive Node class representing DOM nodes with various properties including identifiers, attributes, and relationships to other nodes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Node(node_id, backend_node_id, node_type, node_name, local_name, node_value, parent_id=None, child_node_count=None, children=None, attributes=None, document_url=None, base_url=None, public_id=None, system_id=None, internal_subset=None, xml_version=None, name=None, value=None, pseudo_type=None, pseudo_identifier=None, shadow_root_type=None, frame_id=None, content_document=None, shadow_roots=None, template_content=None, pseudo_elements=None, imported_document=None, distributed_nodes=None, is_svg=None, compatibility_mode=None, assigned_slot=None, is_scrollable=None):\n    \"\"\"DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\n    DOMNode is a base node mirror type.\"\"\"\n\n    node_id: NodeId\n    \"\"\"Node identifier that is passed into the rest of the DOM messages as the nodeId. Backend\n    will only push node with given id once. It is aware of all requested nodes and will only\n    fire DOM events for nodes known to the client.\"\"\"\n\n    backend_node_id: BackendNodeId\n    \"\"\"The BackendNodeId for this node.\"\"\"\n\n    node_type: int\n    \"\"\"Node's nodeType.\"\"\"\n\n    node_name: str\n    \"\"\"Node's nodeName.\"\"\"\n\n    local_name: str\n    \"\"\"Node's localName.\"\"\"\n\n    node_value: str\n    \"\"\"Node's nodeValue.\"\"\"\n\n    parent_id: Optional[NodeId] = None\n    \"\"\"The id of the parent node if any.\"\"\"\n\n    child_node_count: Optional[int] = None\n    \"\"\"Child count for Container nodes.\"\"\"\n\n    children: Optional[List[Node]] = None\n    \"\"\"Child nodes of this node when requested with children.\"\"\"\n\n    attributes: Optional[List[str]] = None\n    \"\"\"Attributes of the Element node in the form of flat array [name1, value1, name2, value2].\"\"\"\n\n    document_url: Optional[str] = None\n    \"\"\"Document URL that Document or FrameOwner node points to.\"\"\"\n\n    base_url: Optional[str] = None\n    \"\"\"Base URL that Document or FrameOwner node uses for URL completion.\"\"\"\n\n    public_id: Optional[str] = None\n    \"\"\"DocumentType's publicId.\"\"\"\n\n    system_id: Optional[str] = None\n    \"\"\"DocumentType's systemId.\"\"\"\n\n    internal_subset: Optional[str] = None\n    \"\"\"DocumentType's internalSubset.\"\"\"\n\n    xml_version: Optional[str] = None\n    \"\"\"Document's XML version in case of XML documents.\"\"\"\n\n    name: Optional[str] = None\n    \"\"\"Attr's name.\"\"\"\n\n    value: Optional[str] = None\n    \"\"\"Attr's value.\"\"\"\n\n    pseudo_type: Optional[PseudoType] = None\n    \"\"\"Pseudo element type for this node.\"\"\"\n\n    pseudo_identifier: Optional[str] = None\n    \"\"\"Pseudo element identifier for this node. Only present if there is a\n    valid pseudoType.\"\"\"\n\n    shadow_root_type: Optional[ShadowRootType] = None\n    \"\"\"Shadow root type.\"\"\"\n\n    frame_id: Optional[FrameId] = None\n    \"\"\"Frame ID for frame owner elements.\"\"\"\n\n    content_document: Optional[Node] = None\n    \"\"\"Content document for frame owner elements.\"\"\"\n\n    shadow_roots: Optional[List[Node]] = None\n    \"\"\"Shadow root list for given element host.\"\"\"\n\n    template_content: Optional[Node] = None\n    \"\"\"Content document fragment for template elements.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Possible Breakpoints in Python\nDESCRIPTION: This function returns possible locations for breakpoints within a specified range. It accepts start and end locations, with an option to restrict the search to a specific function. Returns a generator that yields a list of possible breakpoint locations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_possible_breakpoints(start: Location, end: Optional[Location] = None, restrict_to_function: Optional[bool] = None) -> Generator[Dict[str, Any], Dict[str, Any], List[BreakLocation]]:\n```\n\n----------------------------------------\n\nTITLE: Expert Mode Initialization in NODRIVER\nDESCRIPTION: Starting the browser in expert mode which disables web security and origin-trials while ensuring open shadow-roots.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstart(expert=True)\n```\n\n----------------------------------------\n\nTITLE: Get Request Post Data Method\nDESCRIPTION: Retrieves post data sent with a specific request. Takes a request ID parameter and returns a Generator containing the request body string.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef get_request_post_data(request_id: RequestId) -> Generator[Dict[str, Any], Dict[str, Any], str]\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with CSS in Python\nDESCRIPTION: This asynchronous method finds elements using CSS selectors. It can wait for elements to appear and optionally include results from iframes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def select_all(selector, timeout=10, include_frames=False):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Deleting Browser Cookies in Python\nDESCRIPTION: Deletes browser cookies that match specific criteria such as name, URL, domain, path, or partition key. This function allows targeted removal of cookies from the browser.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndelete_cookies(name, url=None, domain=None, path=None, partition_key=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Extra HTTP Headers in NoDriver\nDESCRIPTION: Method for configuring extra HTTP headers to be sent with all requests from the page.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nset_extra_http_headers(headers)\n```\n\n----------------------------------------\n\nTITLE: CaptureScreenshot Command Implementation in Python\nDESCRIPTION: Captures a page screenshot with various optional parameters for format, quality, and region selection. Supports additional experimental options like capturing beyond viewport and optimizing for speed.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef capture_screenshot(format_=None, quality=None, clip=None, from_surface=None, capture_beyond_viewport=None, optimize_for_speed=None):\n    \"\"\"\n    Capture page screenshot.\n\n    * **Parameters:**\n      * **format** –  *(Optional)* Image compression format (defaults to png).\n      * **quality** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]) –  *(Optional)* Compression quality from range [0..100] (jpeg only).\n      * **clip** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`Viewport`](#nodriver.cdp.page.Viewport)]) –  *(Optional)* Capture the screenshot of a given region only.\n      * **from_surface** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) – **(EXPERIMENTAL)**  *(Optional)* Capture the screenshot from the surface, rather than the view. Defaults to true.\n      * **capture_beyond_viewport** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) – **(EXPERIMENTAL)**  *(Optional)* Capture the screenshot beyond the viewport. Defaults to false.\n      * **optimize_for_speed** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) – **(EXPERIMENTAL)**  *(Optional)* Optimize image encoding for speed, not for resulting size (defaults to false)\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`str`](https://docs.python.org/3/library/stdtypes.html#str)]\n    * **Returns:**\n      Base64-encoded image data. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Clearing IndexedDB Object Store\nDESCRIPTION: Command generator function to clear all entries from an IndexedDB object store. Takes database name, object store name, and optional security parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/indexed_db.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef clear_object_store(database_name, object_store_name, security_origin=None, storage_key=None, storage_bucket=None):\n    # Command implementation details\n```\n\n----------------------------------------\n\nTITLE: Setting Page Scale Factor in Python\nDESCRIPTION: Experimental method to set a specified page scale factor. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef set_page_scale_factor(page_scale_factor):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Network API Command Generator Functions in NoDriver\nDESCRIPTION: Examples of generator functions for network operations including clearing cache/cookies, checking capabilities, and handling intercepted requests. These functions are part of the Chrome DevTools Protocol implementation in NoDriver.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ncan_clear_browser_cache()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], bool]\n# Returns: True if browser cache can be cleared.\n```\n\nLANGUAGE: python\nCODE:\n```\ncan_clear_browser_cookies()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], bool]\n# Returns: True if browser cookies can be cleared.\n```\n\nLANGUAGE: python\nCODE:\n```\ncan_emulate_network_conditions()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], bool]\n# Returns: True if emulation of network conditions is supported.\n```\n\nLANGUAGE: python\nCODE:\n```\nclear_accepted_encodings_override()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\nLANGUAGE: python\nCODE:\n```\nclear_browser_cache()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\nLANGUAGE: python\nCODE:\n```\nclear_browser_cookies()\n\n# Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\nLANGUAGE: python\nCODE:\n```\ncontinue_intercepted_request(interception_id, error_reason=None, raw_response=None, url=None, method=None, post_data=None, headers=None, auth_challenge_response=None)\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Functions - Python Runtime Method\nDESCRIPTION: Method to call JavaScript functions on remote objects or in specific execution contexts. Supports various execution options including silent mode, promise handling, and result serialization.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef call_function_on(function_declaration, object_id=None, arguments=None, silent=None, return_by_value=None, generate_preview=None, user_gesture=None, await_promise=None, execution_context_id=None, object_group=None, throw_on_side_effect=None, unique_context_id=None, serialization_options=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Cookies\nDESCRIPTION: Sets cookies in the browser context. Accepts a list of cookie parameters and optional browser context ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef set_cookies(cookies: List[CookieParam], browser_context_id: Optional[BrowserContextID] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Error Ignore Flag in Python\nDESCRIPTION: This function enables or disables ignoring all certificate errors. It takes a boolean parameter and returns a Generator yielding dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_ignore_certificate_errors(ignore: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Dispatching Mouse Events in NoDriver Python\nDESCRIPTION: This function dispatches a mouse event to the page. It provides control over the mouse event type, coordinates, modifiers, and various mouse-specific parameters like button states and pressure. It returns a Generator object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef dispatch_mouse_event(type_, x, y, modifiers=None, timestamp=None, button=None, buttons=None, click_count=None, force=None, tangential_pressure=None, tilt_x=None, tilt_y=None, twist=None, delta_x=None, delta_y=None, pointer_type=None):\n```\n\n----------------------------------------\n\nTITLE: BringToFront Command Implementation in Python\nDESCRIPTION: Brings the page to front by activating its tab in the browser. This is useful for simulating user interaction with the browser's tabbed interface.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef bring_to_front():\n    \"\"\"\n    Brings page to front (activates tab).\n\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing NoDriver as a separate package\nDESCRIPTION: Direct installation command for the nodriver package via pip.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: Getting Layout Metrics in Python using CDP\nDESCRIPTION: Method to retrieve metrics related to page layout including viewport bounds and scale. Returns layout viewport, visual viewport and content size information in both device and CSS pixels.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef get_layout_metrics():\n```\n\n----------------------------------------\n\nTITLE: Getting JavaScript Exception Details\nDESCRIPTION: Experimental function to retrieve detailed exception information for JavaScript Error objects. Requires Runtime domain to be enabled for complete stack trace information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nget_exception_details(error_object_id)\n```\n\n----------------------------------------\n\nTITLE: Executing querySelector in NoDriver Python API\nDESCRIPTION: Executes the querySelector method on a specified node to find a single matching element. Returns the node ID of the matched element.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\ndef query_selector(node_id, selector):\n    \"\"\"Executes `querySelector` on a given node.\n\n    Parameters:\n      node_id (NodeId): Id of the node to query upon.\n      selector (str): Selector string.\n    Return type: Generator[Dict[str, Any], Dict[str, Any], NodeId]\n    Returns: Query selector result.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nodriver Package\nDESCRIPTION: Simple pip command to install the Nodriver package\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: default\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: PDF Generation Method in Python CDP\nDESCRIPTION: Method to print a webpage as PDF with extensive customization options including page orientation, margins, headers/footers and more. Returns base64-encoded PDF data or a stream handle.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nprint_to_pdf(landscape=None, display_header_footer=None, print_background=None, scale=None, paper_width=None, paper_height=None, margin_top=None, margin_bottom=None, margin_left=None, margin_right=None, page_ranges=None, header_template=None, footer_template=None, prefer_css_page_size=None, transfer_mode=None, generate_tagged_pdf=None, generate_document_outline=None)\n```\n\n----------------------------------------\n\nTITLE: Capturing Page Screenshots in Python\nDESCRIPTION: This asynchronous method saves a screenshot of the current page. It supports capturing the full page or just the viewport, and can save in JPEG or PNG format.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def save_screenshot(filename='auto', format='jpeg', full_page=False):\n    # Implementation not shown\n```\n\n----------------------------------------\n\nTITLE: Setting Node Value in Python\nDESCRIPTION: Sets the value for a node with a given id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\ndef set_node_value(node_id, value):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Function Call Breakpoints in JavaScript\nDESCRIPTION: Experimental method to set breakpoints before function calls. Takes a function object ID and optional condition. Returns breakpoint ID for future reference.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef set_breakpoint_on_function_call(object_id, condition=None):\n    \"\"\"Sets JavaScript breakpoint before each call to the given function.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Idle State in Python\nDESCRIPTION: Overrides the Idle state by setting mock values for user activity and screen lock status. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef set_idle_override(is_user_active, is_screen_unlocked):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Getting Resource Content in Python using CDP\nDESCRIPTION: Experimental method to retrieve the content of a specific resource given its frame ID and URL. Returns the resource content and whether it was base64 encoded.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef get_resource_content(frame_id, url):\n```\n\n----------------------------------------\n\nTITLE: Get Browser Cookies - Python\nDESCRIPTION: Function to retrieve all browser cookies. Optionally takes a browser context ID parameter and returns a list of cookie objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef get_cookies(browser_context_id: Optional[BrowserContextID] = None) -> Generator[Dict[str, Any], Dict[str, Any], List[Cookie]]\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in CDP Database\nDESCRIPTION: This command executes an SQL query on a specified database. It takes database_id and query parameters and returns column names, values, and any SQL errors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/database.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef execute_sql(database_id, query):\n    # Parameters:\n    #   database_id (DatabaseId) – \n    #   query (str) – \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], Tuple[Optional[List[str]], Optional[List[Any]], Optional[Error]]]\n```\n\n----------------------------------------\n\nTITLE: Highlighting Quad Coordinates Function\nDESCRIPTION: Function to highlight a quadrilateral shape using absolute coordinates relative to the main frame viewport. Allows customization of fill and outline colors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_quad(quad, color=None, outline_color=None):\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Breakpoint Types in Python for CDP\nDESCRIPTION: Enumeration for DOM breakpoint types that specifies different categories of DOM mutations that can trigger breakpoints: subtree modifications, attribute changes, and node removal.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DOMBreakpointType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    SUBTREE_MODIFIED = 'subtree-modified'\n\n    ATTRIBUTE_MODIFIED = 'attribute-modified'\n\n    NODE_REMOVED = 'node-removed'\n```\n\n----------------------------------------\n\nTITLE: Performing DOM Search in NoDriver Python API\nDESCRIPTION: An experimental function that searches for a string in the DOM tree using plain text, query selector, or XPath. Returns a search session ID and result count.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\ndef perform_search(query, include_user_agent_shadow_dom=None):\n    \"\"\"Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or\n    `cancelSearch` to end this search session.\n\n    EXPERIMENTAL\n\n    Parameters:\n      query (str): Plain text or query selector or XPath search query.\n      include_user_agent_shadow_dom (Optional[bool]): (Optional) True to search in user agent shadow DOM.\n    Return type: Generator[Dict[str, Any], Dict[str, Any], Tuple[str, int]]\n    Returns: A tuple with the following items:\n      1. **searchId** - Unique search session identifier.\n      2. **resultCount** - Number of search results.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseReceived Event Class in Python for NoDriver CDP\nDESCRIPTION: This class represents the event fired when an HTTP response is available. It includes properties such as request identifier, loader identifier, timestamp, resource type, response data, and frame identifier.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass ResponseReceived(request_id, loader_id, timestamp, type_, response, has_extra_info, frame_id):\n    \"\"\"Fired when HTTP response is available.\"\"\"\n\n    request_id: RequestId\n    \"\"\"Request identifier.\"\"\"\n\n    loader_id: LoaderId\n    \"\"\"Loader identifier. Empty string if the request is fetched from worker.\"\"\"\n\n    timestamp: MonotonicTime\n    \"\"\"Timestamp.\"\"\"\n\n    type_: ResourceType\n    \"\"\"Resource type.\"\"\"\n\n    response: Response\n    \"\"\"Response data.\"\"\"\n\n    has_extra_info: bool\n    \"\"\"Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be\n    or were emitted for this request.\"\"\"\n\n    frame_id: Optional[FrameId]\n    \"\"\"Frame identifier.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Overriding User Agent in NoDriver\nDESCRIPTION: Method for overriding the browser's user agent string, along with optional language, platform, and user agent metadata.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nset_user_agent_override(user_agent, accept_language=None, platform=None, user_agent_metadata=None)\n```\n\n----------------------------------------\n\nTITLE: Installing NoDriver with pip\nDESCRIPTION: Basic pip command to install the NoDriver library.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: default\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: DOM Storage Command Functions\nDESCRIPTION: Generator functions for DOM storage operations including clear, disable, enable, get_dom_storage_items, remove_dom_storage_item, and set_dom_storage_item.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_storage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear():\n    # Implementation details documented separately\n    pass\n\ndef disable():\n    # Implementation details documented separately\n    pass\n\ndef enable():\n    # Implementation details documented separately\n    pass\n\ndef get_dom_storage_items():\n    # Implementation details documented separately\n    pass\n\ndef remove_dom_storage_item():\n    # Implementation details documented separately\n    pass\n\ndef set_dom_storage_item():\n    # Implementation details documented separately\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing NoDriver Package\nDESCRIPTION: Installation instructions for NoDriver package through pip, either as part of undetected-chromedriver or as a separate package\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install undetected-chromedriver\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install nodriver\n```\n\n----------------------------------------\n\nTITLE: Executing querySelectorAll in NoDriver Python API\nDESCRIPTION: Executes the querySelectorAll method on a specified node to find all matching elements. Returns a list of node IDs for the matched elements.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\ndef query_selector_all(node_id, selector):\n    \"\"\"Executes `querySelectorAll` on a given node.\n\n    Parameters:\n      node_id (NodeId): Id of the node to query upon.\n      selector (str): Selector string.\n    Return type: Generator[Dict[str, Any], Dict[str, Any], List[NodeId]]\n    Returns: Query selector result.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting File Input Files in Python\nDESCRIPTION: Sets files for a given file input element. It takes a list of file paths and optional node identifiers.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\ndef set_file_input_files(files, node_id=None, backend_node_id=None, object_id=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Layer Snapshot in Python\nDESCRIPTION: Creates a snapshot of a layer identified by its ID and returns the snapshot identifier. This function is a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef make_snapshot(layer_id):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Defining BoxModel Class in Python\nDESCRIPTION: Class representing the box model of a DOM element including content, padding, border, margin boxes and dimensions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BoxModel(content, padding, border, margin, width, height, shape_outside=None):\n    content: Quad  # Content box\n    padding: Quad  # Padding box\n    border: Quad   # Border box\n    margin: Quad   # Margin box\n    width: int     # Node width\n    height: int    # Node height\n    shape_outside: Optional[ShapeOutsideInfo] = None  # Shape outside coordinates\n```\n\n----------------------------------------\n\nTITLE: Managing Precise Code Coverage in CDP\nDESCRIPTION: Methods for controlling precise code coverage including start_precise_coverage(), stop_precise_coverage(), and take_precise_coverage(). These methods enable/disable precise code coverage and collect coverage data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef start_precise_coverage(call_count=None, detailed=None, allow_triggered_updates=None):\n    \"\"\"Enable precise code coverage with optional parameters for call counting and detailed coverage.\"\"\"\n    pass\n\ndef stop_precise_coverage():\n    \"\"\"Disable precise code coverage and release execution count records.\"\"\"\n    pass\n\ndef take_precise_coverage():\n    \"\"\"Collect coverage data for current isolate and reset execution counters.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Remove Attribute Method - Python\nDESCRIPTION: Removes an attribute with the specified name from a DOM element identified by node_id. Returns a Generator that yields dictionary results.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef remove_attribute(node_id, name)\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Storage Entry in Python\nDESCRIPTION: Sets an entry with key and value for a specified origin's shared storage. Includes an optional parameter to ignore the operation if the key already exists.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nset_shared_storage_entry(owner_origin, key, value, ignore_if_present=None)\n```\n\n----------------------------------------\n\nTITLE: CaptureSnapshot Command Implementation in Python\nDESCRIPTION: Captures a snapshot of the page as a string, with comprehensive serialization for MHTML format that includes iframes, shadow DOM, external resources, and inline styles. This function is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef capture_snapshot(format_=None):\n    \"\"\"\n    Returns a snapshot of the page as a string. For MHTML format, the serialization includes\n    iframes, shadow DOM, external resources, and element-inline styles.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      **format** –  *(Optional)* Format (defaults to mhtml).\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`str`](https://docs.python.org/3/library/stdtypes.html#str)]\n    * **Returns:**\n      Serialized page data.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Cookies in Python\nDESCRIPTION: This function retrieves all cookies. It returns a generator that yields a list of Cookie objects representing all browser cookies.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/network.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_all_cookies() -> Generator[Dict[str, Any], Dict[str, Any], List[Cookie]]: ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Listeners Command in CDP DOMDebugger\nDESCRIPTION: Command that retrieves all event listeners attached to a specified DOM object. It can traverse the DOM tree with configurable depth and handle iframes/shadow roots if pierce is enabled.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_event_listeners(object_id, depth=None, pierce=None):\n\n    # Returns event listeners of the given object.\n\n    # Parameters:\n    #   object_id (RemoteObjectId) – Identifier of the object to return listeners for.\n    #   depth (Optional[int]) –  (Optional) The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    #   pierce (Optional[bool]) –  (Optional) Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], List[EventListener]]\n    # Returns:\n    #   Array of relevant listeners.\n```\n\n----------------------------------------\n\nTITLE: Initializing Config Class in Python\nDESCRIPTION: The Config class manages browser configuration settings for NoDriver. It handles user data directories, headless mode, browser executable paths, and other browser-related settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/others_and_helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Config(user_data_dir=None, headless=False, browser_executable_path=None, browser_args=None, sandbox=True, lang='en-US', host=None, port=None, expert=None, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Cookies in NoDriver\nDESCRIPTION: Method for setting a cookie with specified attributes like name, value, domain, path, and security options. Returns a boolean indicating success.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nset_cookie(name, value, url=None, domain=None, path=None, secure=None, http_only=None, same_site=None, expires=None, priority=None, same_party=None, source_scheme=None, source_port=None, partition_key=None)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Key Events in NoDriver Python\nDESCRIPTION: This function dispatches a key event to the page. It allows for detailed control over the key event, including modifiers, timestamps, and various key identifiers. It returns a Generator object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef dispatch_key_event(type_, modifiers=None, timestamp=None, text=None, unmodified_text=None, key_identifier=None, code=None, key=None, windows_virtual_key_code=None, native_virtual_key_code=None, auto_repeat=None, is_keypad=None, is_system_key=None, location=None, commands=None):\n```\n\n----------------------------------------\n\nTITLE: Detaching Target Session in Python\nDESCRIPTION: Detaches a debugging session from a target using session ID or target ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndetach_from_target(session_id=None, target_id=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Context in Python\nDESCRIPTION: Creates a new empty BrowserContext similar to an incognito profile. Supports configuration of proxy settings and network access controls.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncreate_browser_context(dispose_on_detach=None, proxy_server=None, proxy_bypass_list=None, origins_with_universal_network_access=None)\n```\n\n----------------------------------------\n\nTITLE: Saving Browser Cookies in Python\nDESCRIPTION: Demonstrates how to save browser cookies to a file. By default, cookies are saved to '.session.dat' if no filepath is specified.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/classes/browser.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save. when no filepath is given, it is saved in '.session.dat'\nawait browser.cookies.save()\n```\n\n----------------------------------------\n\nTITLE: Get Cookies for URLs Method\nDESCRIPTION: Returns browser cookies for specified URLs or current URL. Takes optional list of URLs and returns a Generator containing Cookie objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef get_cookies(urls: Optional[List[str]] = None) -> Generator[Dict[str, Any], Dict[str, Any], List[Cookie]]\n```\n\n----------------------------------------\n\nTITLE: Removing DOM Breakpoint Command in CDP DOMDebugger\nDESCRIPTION: Command that removes a previously set DOM breakpoint from a specific node and breakpoint type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef remove_dom_breakpoint(node_id, type_):\n\n    # Removes DOM breakpoint that was set using `setDOMBreakpoint`.\n\n    # Parameters:\n    #   node_id (NodeId) – Identifier of the node to remove breakpoint from.\n    #   type – Type of the breakpoint to remove.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Disposing Browser Context in Python\nDESCRIPTION: Deletes a BrowserContext and closes all belonging pages without calling beforeunload hooks.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndispose_browser_context(browser_context_id)\n```\n\n----------------------------------------\n\nTITLE: Fetching Child AX Nodes in CDP with Python\nDESCRIPTION: This experimental command fetches a particular accessibility node's children by AXNodeId. It requires enable() to have been called previously and accepts an optional frame_id parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_child_ax_nodes(id_, frame_id=None):\n    \"\"\"\n    Fetches a particular accessibility node by AXNodeId.\n    Requires `enable()` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **id** – \n      * **frame_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`FrameId`](page.md#nodriver.cdp.page.FrameId)]) –  *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], List[AXNode]]\n```\n\n----------------------------------------\n\nTITLE: Defining Request Class in Python for CDP Network Domain\nDESCRIPTION: Defines a class Request representing HTTP request data. It includes attributes for URL, method, headers, priority, and various other request-related information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Request(url, method, headers, initial_priority, referrer_policy, url_fragment=None, post_data=None, has_post_data=None, post_data_entries=None, mixed_content_type=None, is_link_preload=None, trust_token_params=None, is_same_site=None):\n    url: str\n    method: str\n    headers: Headers\n    initial_priority: ResourcePriority\n    referrer_policy: str\n    url_fragment: Optional[str] = None\n    post_data: Optional[str] = None\n    has_post_data: Optional[bool] = None\n    post_data_entries: Optional[List[PostDataEntry]] = None\n    mixed_content_type: Optional[MixedContentType] = None\n    is_link_preload: Optional[bool] = None\n    trust_token_params: Optional[TrustTokenParams] = None\n    is_same_site: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Target Management Function: get_targets\nDESCRIPTION: Retrieves a list of available targets. Optional filter parameter to filter returned targets. Returns a generator of target information dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndef get_targets(filter_=None)\n```\n\n----------------------------------------\n\nTITLE: Setting XMLHttpRequest Breakpoint in Python\nDESCRIPTION: This method sets a breakpoint on XMLHttpRequests. It takes a URL substring as a parameter, and all XHRs with this substring in the URL will be stopped. It returns a Generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef set_xhr_breakpoint(url):\n    # Implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Setting DOM Breakpoint Command in CDP DOMDebugger\nDESCRIPTION: Command that sets a breakpoint on a specific DOM operation for a particular node, causing script execution to pause when the operation occurs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef set_dom_breakpoint(node_id, type_):\n\n    # Sets breakpoint on particular operation with DOM.\n\n    # Parameters:\n    #   node_id (NodeId) – Identifier of the node to set breakpoint on.\n    #   type – Type of the operation to stop upon.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Requesting Nodes by Backend IDs in NoDriver Python API\nDESCRIPTION: An experimental function that retrieves multiple nodes given their backend node IDs. Returns an array of node IDs that correspond to the specified backend IDs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\ndef push_nodes_by_backend_ids_to_frontend(backend_node_ids):\n    \"\"\"Requests that a batch of nodes is sent to the caller given their backend node ids.\n\n    EXPERIMENTAL\n\n    Parameters:\n      backend_node_ids (List[BackendNodeId]): The array of backend node ids.\n    Return type: Generator[Dict[str, Any], Dict[str, Any], List[NodeId]]\n    Returns: The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Capturing DOM Snapshot in Python using CDP\nDESCRIPTION: This function is used to capture a snapshot of the document. It's a generator function that yields and resumes with specific argument types, and returns a snapshot of the document.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_snapshot.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: capture_snapshot\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Breakpoints at Specific Locations\nDESCRIPTION: Method to set JavaScript breakpoints at given locations with optional conditional expressions. Returns breakpoint ID and actual resolved location.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef set_breakpoint(location, condition=None):\n    \"\"\"Sets JavaScript breakpoint at a given location.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Form Issues in Python\nDESCRIPTION: This function is used to check for issues related to forms on a page. It is part of the Audits domain and is implemented as a generator function.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: check_forms_issues\n```\n\n----------------------------------------\n\nTITLE: Enable Reporting API Method\nDESCRIPTION: Method to enable/disable tracking for the Reporting API. When enabled, triggers 'reportingApiReportAdded' for existing reports. Takes a boolean parameter and returns a Generator of dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef enable_reporting_api(enable: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Commands in Python\nDESCRIPTION: Defines browser control commands including close() for graceful browser shutdown and cancel_download() for canceling downloads in progress.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef close():\n    \"\"\"Close browser gracefully.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef cancel_download(guid, browser_context_id=None):\n    \"\"\"Cancel a download if in progress\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Tracking in Python\nDESCRIPTION: Shows how to enable network tracking using the enable command. This function is a generator that can take optional parameters for maximum total buffer size and maximum resource buffer size.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/network.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nyield from network.enable(max_total_buffer_size=10000000, max_resource_buffer_size=5000000)\n```\n\n----------------------------------------\n\nTITLE: Tracking IndexedDB for Origin in Python\nDESCRIPTION: Registers a security origin to be notified when an update occurs to its IndexedDB.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ntrack_indexed_db_for_origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Exposing DevTools Protocol in Python\nDESCRIPTION: Injects communication channel object into target's main frame for DevTools protocol interaction.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nexpose_dev_tools_protocol(target_id, binding_name=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing cancel_dragging Command in Python\nDESCRIPTION: Generator function that cancels any active dragging operations in the page. Returns None upon completion.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef cancel_dragging():\n```\n\n----------------------------------------\n\nTITLE: Resolve Node Method - Python\nDESCRIPTION: Resolves the JavaScript node object for a given NodeId or BackendNodeId with optional context parameters. Returns a JavaScript object wrapper.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndef resolve_node(node_id=None, backend_node_id=None, object_group=None, execution_context_id=None)\n```\n\n----------------------------------------\n\nTITLE: Querying Accessibility Tree in Python CDP\nDESCRIPTION: Method to query a DOM node's accessibility subtree for accessible name and role. Takes optional parameters for node identification and search criteria, returns matching AXNode objects including ignored accessibility nodes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery_ax_tree(node_id=None, backend_node_id=None, object_id=None, accessible_name=None, role=None)\n```\n\n----------------------------------------\n\nTITLE: Creating ContraDict Factory Function in Python\nDESCRIPTION: A factory function 'cdict' for creating ContraDict objects. It simplifies the instantiation of ContraDict objects throughout the project.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/others_and_helpers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef cdict(*args, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Defining LogEntry Class in Python CDP Implementation\nDESCRIPTION: Defines the LogEntry class representing log entries in the browser. It contains properties such as source, level, text, timestamp, and optional fields like category, URL, line number, stack trace, network request ID, worker ID, and arguments.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass LogEntry(source, level, text, timestamp, category=None, url=None, line_number=None, stack_trace=None, network_request_id=None, worker_id=None, args=None)\n```\n\n----------------------------------------\n\nTITLE: Debugging Step Function - Python\nDESCRIPTION: Method signatures and documentation for debugger stepping operations (step_into, step_out, step_over). These methods allow control of program execution during debugging.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef step_into(break_on_async_call=None, skip_list=None):\n    \"\"\"Steps into the function call.\"\"\"\n    pass\n\ndef step_out():\n    \"\"\"Steps out of the function call.\"\"\"\n    pass\n\ndef step_over(skip_list=None):\n    \"\"\"Steps over the statement.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Highlighting DOM Node API Function\nDESCRIPTION: Function to highlight a DOM node using various identification methods including node ID, backend node ID, object ID or selector. Takes a HighlightConfig parameter to customize the highlight appearance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_node(highlight_config, node_id=None, backend_node_id=None, object_id=None, selector=None):\n```\n\n----------------------------------------\n\nTITLE: FPS Counter Configuration in Python\nDESCRIPTION: Method to toggle FPS counter visibility. Takes a boolean parameter to control visibility and returns a Generator of Dict mappings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef set_show_fps_counter(show: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Updating NoDriver with pip\nDESCRIPTION: Command to update the NoDriver library to the latest version.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: default\nCODE:\n```\npip install -U nodriver\n```\n\n----------------------------------------\n\nTITLE: Starting Trace Events Collection in Python\nDESCRIPTION: Defines the start function for trace events collection with various optional parameters. It returns a generator of dictionaries containing trace event data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef start(categories=None, options=None, buffer_usage_reporting_interval=None, transfer_mode=None, stream_format=None, stream_compression=None, trace_config=None, perfetto_config=None, tracing_backend=None):\n    # Function implementation not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Set Attributes as Text Method - Python\nDESCRIPTION: Sets multiple attributes on an element by parsing HTML-formatted text. Useful for bulk attribute updates from user input.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndef set_attributes_as_text(node_id, text, name=None)\n```\n\n----------------------------------------\n\nTITLE: Dispatching Touch Events in Python CDP\nDESCRIPTION: Method to dispatch touch events to a page with support for multiple touch points and modifiers. Handles TouchEnd, TouchCancel, TouchStart and TouchMove events with timestamp control.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef dispatch_touch_event(type_, touch_points, modifiers=None, timestamp=None)\n```\n\n----------------------------------------\n\nTITLE: NoDriver Proxy Configuration\nDESCRIPTION: Example demonstrating how to configure and use proxies with NoDriver, including support for authenticated SOCKS5 proxies\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver import *\nbrowser = await start()\nproxied_tab = await browser.create_context(\n    url: ...\n    proxy_server = \"socks5://myuser:mypass@myproxyhost.local\"\n    proxy_bypass_list = [\"localhost\"]\n)\nawait proxied_tab.get('https://whatismyip.com')\n```\n\n----------------------------------------\n\nTITLE: Script Execution Control Method\nDESCRIPTION: Method to enable or disable script execution in the page. Takes a boolean parameter and returns a Generator of Dict[str, Any].\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef set_script_execution_disabled(value: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Setting Local Storage in Python Browser Automation\nDESCRIPTION: Async method to set values in browser's local storage. Takes a dictionary of key-value pairs where both keys and values must be strings or simple types that can be converted to strings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/tab.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync set_local_storage(items)\n```\n\n----------------------------------------\n\nTITLE: Setting Node Name in Python\nDESCRIPTION: Sets the name for a node with a given id. Returns the new node's id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\ndef set_node_name(node_id, name):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting File Chooser Interception in Python using NoDriver CDP\nDESCRIPTION: This method enables or disables file chooser request interception. It takes an enabled boolean parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ndef set_intercept_file_chooser_dialog(enabled):\n    \"\"\"Intercept file chooser requests and transfer control to protocol clients.\n    When file chooser interception is enabled, native file chooser dialog is not shown.\n    Instead, a protocol event `Page.fileChooserOpened` is emitted.\n\n    Parameters:\n      enabled (bool)\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cache in CDP Cache Storage Domain\nDESCRIPTION: Command function to delete a cache by its cache ID. This generator function takes a CacheId parameter and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef delete_cache(cache_id):\n    \"\"\"Deletes a cache.\n\n    * **Parameters:**\n      **cache_id** ([`CacheId`](#nodriver.cdp.cache_storage.CacheId)) – Id of cache for deletion.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Window State Class in Python\nDESCRIPTION: Defines the WindowState enum class that represents different states a browser window can be in: normal, minimized, maximized, and fullscreen.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass WindowState(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NORMAL = 'normal'\n    MINIMIZED = 'minimized'\n    MAXIMIZED = 'maximized'\n    FULLSCREEN = 'fullscreen'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Tree Structure in Python using NoDriver CDP\nDESCRIPTION: Function that returns the present frame/resource tree structure. This is marked as EXPERIMENTAL. It returns a Generator that yields a FrameResourceTree object containing the structure of frames and resources on the page.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef get_resource_tree():\n    \"\"\"\n    Returns present frame / resource tree structure.\n    \n    **EXPERIMENTAL**\n    \n    Returns:\n        Generator: Present frame / resource tree structure.\n    \"\"\"\n    # Implementation not shown in documentation\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Promises - Python Runtime Method\nDESCRIPTION: Method to add a handler to a JavaScript promise using its object ID. Can control result formatting through return_by_value and generate_preview flags.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef await_promise(promise_object_id, return_by_value=None, generate_preview=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint Activity Status in Python\nDESCRIPTION: Method to enable or disable all breakpoints on the page. Takes a boolean parameter to control breakpoint state and returns a Generator containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef set_breakpoints_active(active: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Blocking URLs from Loading in Python\nDESCRIPTION: Blocks specified URLs from loading. Allows the use of wildcards in URL patterns. This method is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef set_blocked_ur_ls(urls):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enabling Execution Context Reporting in Python\nDESCRIPTION: Method that enables reporting of execution context creation through events. Immediately sends events for all existing execution contexts when enabled. Returns a Generator that resolves to None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef enable()\n```\n\n----------------------------------------\n\nTITLE: Setting Blackboxed Ranges in JavaScript Scripts\nDESCRIPTION: Method to configure the debugger to skip steps in specified ranges of a script. Takes a script ID and a list of positions where blackbox state changes should occur.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef set_blackboxed_ranges(script_id, positions):\n    \"\"\"Makes backend skip steps in the script in blackboxed ranges.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Request Child Nodes Method - Python\nDESCRIPTION: Requests children of a specified node with optional depth and pierce parameters. Returns child nodes through setChildNodes events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndef request_child_nodes(node_id, depth=None, pierce=None)\n```\n\n----------------------------------------\n\nTITLE: Overriding Geolocation in Python\nDESCRIPTION: Overrides the Geolocation Position or Error. Allows setting mock latitude, longitude, and accuracy. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef set_geolocation_override(latitude=None, longitude=None, accuracy=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Discarding Console Entries in Python\nDESCRIPTION: Method that clears collected exceptions and console API calls from memory. Returns a Generator that resolves to None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef discard_console_entries()\n```\n\n----------------------------------------\n\nTITLE: Setting Dock Tile Details\nDESCRIPTION: This experimental function sets platform-specific dock tile details, including an optional badge label and image. It returns a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef set_dock_tile(badge_label=None, image=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Get Computed Style Method\nDESCRIPTION: Retrieves the computed CSS style properties for a specified DOM node identified by nodeId. Returns a list of computed style properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nget_computed_style_for_node(node_id)\n```\n\n----------------------------------------\n\nTITLE: Close Target Command in CDP Python API\nDESCRIPTION: Generator function to close a target by its ID. If the target is a page, the page will be closed as well. Returns a boolean indicating success.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef close_target(target_id):\n    \"\"\"Closes the target. If the target is a page that gets closed too.\n\n    * **Parameters:**\n      **target_id** ([`TargetID`](#nodriver.cdp.target.TargetID)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`bool`](https://docs.python.org/3/library/functions.html#bool)]\n    * **Returns:**\n      Always set to true. If an error occurs, the response indicates protocol error.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Autofill on Form Fields in Python CDP\nDESCRIPTION: Command that triggers autofill on a form identified by a field ID. Takes the field ID, credit card information, and optional frame ID as parameters. Returns an error if the form cannot be autofilled.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/autofill.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef trigger(field_id, card, frame_id=None):\n    \"\"\"Trigger autofill on a form identified by the fieldId.\n    If the field and related form cannot be autofilled, returns an error.\"\"\"\n    # Parameters:\n    #   field_id (BackendNodeId) – Identifies a field that serves as an anchor for autofill.\n    #   frame_id (Optional[FrameId]) –  *(Optional)* Identifies the frame that field belongs to.\n    #   card (CreditCard) – Credit card information to fill out the form. Credit card data is not saved.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Enabling WebAuthn Domain - Python\nDESCRIPTION: Enables WebAuthn domain and starts credential interception with optional UI support for debugging.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef enable(enable_ui=None)\n```\n\n----------------------------------------\n\nTITLE: Target Discovery Control: set_discover_targets\nDESCRIPTION: Controls target discovery and event notification. Takes a boolean to enable/disable discovery and optional filter parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef set_discover_targets(discover, filter_=None)\n```\n\n----------------------------------------\n\nTITLE: Fetching Root AX Node in CDP with Python\nDESCRIPTION: This experimental command fetches the root accessibility node. It requires enable() to have been called previously and accepts an optional frame_id parameter to specify which frame's document to use.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_root_ax_node(frame_id=None):\n    \"\"\"\n    Fetches the root node.\n    Requires `enable()` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      **frame_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`FrameId`](page.md#nodriver.cdp.page.FrameId)]) –  *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], AXNode]\n```\n\n----------------------------------------\n\nTITLE: Defining MouseButton Enumeration in Python\nDESCRIPTION: Enumeration class for MouseButton that defines constants for different mouse buttons used in mouse events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MouseButton(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n```\n\n----------------------------------------\n\nTITLE: Search Script Content Function\nDESCRIPTION: Function to search for strings in script content with options for case sensitivity and regex matching. Returns list of search matches.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef search_in_content(script_id, query, case_sensitive=None, is_regex=None):\n    \"\"\"Searches for given string in script content.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing EventListener Class for DOM Debugging in CDP\nDESCRIPTION: Data class representing a DOM event listener with information about its type, capture phase, script details, and node attachment. This class stores all relevant information about registered event handlers in the browser.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass EventListener(type_, use_capture, passive, once, script_id, line_number, column_number, handler=None, original_handler=None, backend_node_id=None):\n\n    type_ : str\n\n    use_capture : bool\n\n    passive : bool\n\n    once : bool\n\n    script_id : ScriptId\n\n    line_number : int\n\n    column_number : int\n\n    handler : Optional[RemoteObject] = None\n\n    original_handler : Optional[RemoteObject] = None\n\n    backend_node_id : Optional[BackendNodeId] = None\n```\n\n----------------------------------------\n\nTITLE: Target Attachment Command in CDP Python API\nDESCRIPTION: Generator function to attach to a target with a given ID, with optional flatten parameter for flat access. Returns a session ID assigned to the created session.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef attach_to_target(target_id, flatten=None):\n    \"\"\"Attaches to the target with given id.\n\n    * **Parameters:**\n      * **target_id** ([`TargetID`](#nodriver.cdp.target.TargetID)) – \n      * **flatten** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) –  *(Optional)* Enables \"flat\" access to the session via specifying sessionId attribute in the commands. We plan to make this the default, deprecate non-flattened mode, and eventually retire it. See crbug.com/991325.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`SessionID`](#nodriver.cdp.target.SessionID)]\n    * **Returns:**\n      Id assigned to the session.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canvas Log from Layer Snapshot in Python\nDESCRIPTION: Replays a layer snapshot and returns the canvas log as an array of canvas function calls.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef snapshot_command_log(snapshot_id):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Get Items Command in Python\nDESCRIPTION: Generator function that retrieves all items from the specified DOM storage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_dom_storage_items(storage_id):\n\n* **Parameters:**\n  **storage_id** ([`StorageId`](#nodriver.cdp.dom_storage.StorageId)) – \n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Item`](#nodriver.cdp.dom_storage.Item)]]\n* **Returns:**\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame Tree Structure in Python using CDP\nDESCRIPTION: Method that returns the current frame tree structure of the page.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef get_frame_tree():\n```\n\n----------------------------------------\n\nTITLE: CSS Style Management Commands\nDESCRIPTION: Generator functions for interacting with CSS stylesheets including adding rules, collecting class names, creating stylesheets, and enabling/disabling the CSS agent.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_rule(style_sheet_id, rule_text, location, node_for_property_syntax_validation=None):\n    # Generator implementation\n    pass\n\ndef collect_class_names(style_sheet_id):\n    # Generator implementation\n    pass\n\ndef create_style_sheet(frame_id):\n    # Generator implementation\n    pass\n\ndef disable():\n    # Generator implementation\n    pass\n\ndef enable():\n    # Generator implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Resetting Navigation History in Python\nDESCRIPTION: Method to reset the navigation history for the current page. Returns a Generator of Dict objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ndef reset_navigation_history():\n    \"\"\"Resets navigation history for the current page.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing Credential - Python\nDESCRIPTION: Removes a specific credential from an authenticator using authenticator_id and credential_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef remove_credential(authenticator_id, credential_id)\n```\n\n----------------------------------------\n\nTITLE: Getting Box Model\nDESCRIPTION: Retrieves box model information for a specified node using various identification methods. Returns a BoxModel object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef get_box_model(node_id=None, backend_node_id=None, object_id=None):\n    # Returns boxes for the given node\n    pass\n```\n\n----------------------------------------\n\nTITLE: Resume JavaScript Execution Function\nDESCRIPTION: Function to resume JavaScript execution with optional termination parameter. Can trigger termination when resumed code is reached.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef resume(terminate_on_resume=None):\n    \"\"\"Resumes JavaScript execution.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Clear Shared Storage - Python\nDESCRIPTION: Function to clear all entries for a given origin's shared storage. Takes owner_origin as string parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef clear_shared_storage_entries(owner_origin: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Querying Node Position in Python\nDESCRIPTION: Method to get quads describing a node's position on the page. Takes optional node_id, backend_node_id, or object_id parameters and returns position quads relative to viewport.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef get_content_quads(node_id=None, backend_node_id=None, object_id=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Issues Check Command in Python\nDESCRIPTION: Generator function to check for form issues on the target page and report findings through the Audits.issueAdded event.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef check_forms_issues():\n    \"\"\"Runs the form issues check for the target page. Found issues are reported using Audits.issueAdded event.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceTiming Class in Python for CDP Network Domain\nDESCRIPTION: Defines a class ResourceTiming representing timing information for a network request. It includes various timing attributes like requestTime, proxyStart, dnsStart, connectStart, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ResourceTiming(request_time, proxy_start, proxy_end, dns_start, dns_end, connect_start, connect_end, ssl_start, ssl_end, worker_start, worker_ready, worker_fetch_start, worker_respond_with_settled, send_start, send_end, push_start, push_end, receive_headers_start, receive_headers_end, worker_router_evaluation_start=None, worker_cache_lookup_start=None):\n    request_time: float\n    proxy_start: float\n    proxy_end: float\n    dns_start: float\n    dns_end: float\n    connect_start: float\n    connect_end: float\n    ssl_start: float\n    ssl_end: float\n    worker_start: float\n    worker_ready: float\n    worker_fetch_start: float\n    worker_respond_with_settled: float\n    send_start: float\n    send_end: float\n    push_start: float\n    push_end: float\n    receive_headers_start: float\n    receive_headers_end: float\n    worker_router_evaluation_start: Optional[float] = None\n    worker_cache_lookup_start: Optional[float] = None\n```\n\n----------------------------------------\n\nTITLE: Visual Viewport Class Definition in Python\nDESCRIPTION: Defines a class for visual viewport properties including offset, page coordinates, dimensions, and scaling factors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass VisualViewport(offset_x, offset_y, page_x, page_y, client_width, client_height, scale, zoom=None):\n    offset_x: float  # Horizontal offset relative to layout viewport\n    offset_y: float  # Vertical offset relative to layout viewport\n    page_x: float    # Horizontal offset relative to document\n    page_y: float    # Vertical offset relative to document\n    client_width: float  # Width in CSS pixels\n    client_height: float # Height in CSS pixels\n    scale: float     # Scale relative to ideal viewport\n    zoom: Optional[float] = None  # Page zoom factor\n```\n\n----------------------------------------\n\nTITLE: Getting Container for Node\nDESCRIPTION: Retrieves the query container of a node based on container query conditions including name, axes, and scroll state.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_container_for_node(node_id, container_name=None, physical_axes=None, logical_axes=None, queries_scroll_state=None):\n    # Returns the query container of the given node\n    pass\n```\n\n----------------------------------------\n\nTITLE: Cached Resource Class Definition in Python\nDESCRIPTION: Class for storing information about cached network resources including URL, resource type, size, and response data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass CachedResource(url, type_, body_size, response=None):\n    url: str\n    type_: ResourceType\n    body_size: float\n    response: Optional[Response] = None\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes by Computed Style\nDESCRIPTION: Experimental function to find nodes matching given computed styles within a subtree. Can optionally traverse iframes and shadow roots.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef get_nodes_for_subtree_by_style(node_id, computed_styles, pierce=None)\n```\n\n----------------------------------------\n\nTITLE: DOM Node Collection Command in Python\nDESCRIPTION: Generator function to collect class names from a DOM node and its children.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef collect_class_names_from_subtree(node_id):\n    \"\"\"Collects class names for the node with given id and all of it's child nodes.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], List[str]]\n```\n\n----------------------------------------\n\nTITLE: Waiting for Debugger in Python\nDESCRIPTION: Pauses page execution, which can be resumed using the generic Runtime.runIfWaitingForDebugger method. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ndef wait_for_debugger() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Scroll Into View Method - Python\nDESCRIPTION: Scrolls a specified element into view if not already visible, with support for different node identification methods and custom scroll rectangle.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef scroll_into_view_if_needed(node_id=None, backend_node_id=None, object_id=None, rect=None)\n```\n\n----------------------------------------\n\nTITLE: Enabling Security State Tracking in Python\nDESCRIPTION: This function enables tracking of security state changes. It returns a Generator that yields dictionaries containing string keys and any values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef enable() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Overriding Storage Quota for Origin\nDESCRIPTION: Overrides or resets the storage quota for a specified security origin. Allows setting custom quota size in bytes or resetting to default.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef override_quota_for_origin(origin: str, quota_size: Optional[float] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Cookie Class Definition in Python\nDESCRIPTION: Comprehensive cookie object implementation with properties for name, value, domain, path, security settings, and additional metadata.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Cookie(name, value, domain, path, size, http_only, secure, session, priority, same_party, source_scheme, source_port, expires=None, same_site=None, partition_key=None, partition_key_opaque=None):\n    name: str\n    value: str\n    domain: str\n    path: str\n    size: int\n    http_only: bool\n    secure: bool\n    session: bool\n    priority: CookiePriority\n    same_party: bool\n    source_scheme: CookieSourceScheme\n    source_port: int\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Playback Rate in Python using CDP\nDESCRIPTION: This function sets the playback rate for animations. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: set_playback_rate\n```\n\n----------------------------------------\n\nTITLE: Implementing DeviceAccess Command Functions in Python\nDESCRIPTION: Generator functions for handling device access operations like canceling prompts, enabling/disabling events, and selecting devices.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/device_access.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef cancel_prompt(id_):\n    \"\"\"Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef disable():\n    \"\"\"Disable events in this domain.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef enable():\n    \"\"\"Enable events in this domain.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef select_prompt(id_, device_id):\n    \"\"\"Select a device in response to a DeviceAccess.deviceRequestPrompted event.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Dialogs in Python using NoDriver CDP\nDESCRIPTION: Function to accept or dismiss JavaScript-initiated dialogs (alerts, confirms, prompts, or onbeforeunload). It takes parameters for whether to accept the dialog and optional text to enter into prompt dialogs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef handle_java_script_dialog(accept, prompt_text=None):\n    \"\"\"\n    Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).\n    \n    Parameters:\n        accept (bool): Whether to accept or dismiss the dialog.\n        prompt_text (Optional[str]): The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.\n    \"\"\"\n    # Implementation not shown in documentation\n```\n\n----------------------------------------\n\nTITLE: Retrieving Script Source in Python\nDESCRIPTION: This function returns the source code for a script with a given ID. It returns a generator that yields the script source and optional bytecode for WASM scripts.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_script_source(script_id: ScriptId) -> Generator[Dict[str, Any], Dict[str, Any], Tuple[str, Optional[str]]]:\n```\n\n----------------------------------------\n\nTITLE: Resetting Permissions in Browser Context\nDESCRIPTION: This function resets all permission management for all origins in a specified browser context or the default context if not provided. It returns a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef reset_permissions(browser_context_id=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Enabling Autofill Domain Notifications in Python CDP\nDESCRIPTION: Command that enables Autofill domain notifications in the Chrome DevTools Protocol. Returns a generator with no output value.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/autofill.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    \"\"\"Enables autofill domain notifications.\"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenshotParams Class for HeadlessExperimental Domain in Python\nDESCRIPTION: Class definition for ScreenshotParams that specifies encoding options for screenshots in the HeadlessExperimental domain. It includes parameters for format, quality, and optimization settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/headless_experimental.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ScreenshotParams(format_=None, quality=None, optimize_for_speed=None):\n    \"\"\"\n    Encoding options for a screenshot.\n    \"\"\"\n\n    format_ : Optional[str] = None\n    \"\"\"Image compression format (defaults to png).\"\"\"\n\n    quality : Optional[int] = None\n    \"\"\"Compression quality from range [0..100] (jpeg and webp only).\"\"\"\n\n    optimize_for_speed : Optional[bool] = None\n    \"\"\"Optimize image encoding for speed, not for resulting size (defaults to false)\"\"\"\n```\n\n----------------------------------------\n\nTITLE: History Entry Navigation in Python using NoDriver CDP\nDESCRIPTION: Function that navigates the current page to a specified history entry. It takes an entry_id parameter that uniquely identifies the history entry to navigate to.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef navigate_to_history_entry(entry_id):\n    \"\"\"\n    Navigates current page to the given history entry.\n    \n    Parameters:\n        entry_id (int): Unique id of the entry to navigate to.\n    \"\"\"\n    # Implementation not shown in documentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackbox Patterns for JavaScript Debugging\nDESCRIPTION: Method to replace previous blackbox patterns with new ones. Enables skipping of script execution based on URL patterns. Takes a list of regex patterns and an optional flag for handling anonymous scripts.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef set_blackbox_patterns(patterns, skip_anonymous=None):\n    \"\"\"Replace previous blackbox patterns with passed ones.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Nodes by Path in NoDriver Python API\nDESCRIPTION: An experimental function that retrieves a node given its path in a proprietary format. Returns the node ID for the specified path.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\ndef push_node_by_path_to_frontend(path):\n    \"\"\"Requests that the node is sent to the caller given its path. // FIXME, use XPath\n\n    EXPERIMENTAL\n\n    Parameters:\n      path (str): Path to node in the proprietary format.\n    Return type: Generator[Dict[str, Any], Dict[str, Any], NodeId]\n    Returns: Id of the node for given path.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Set Attribute Value Method - Python\nDESCRIPTION: Sets a single attribute value for an element identified by node_id. Takes attribute name and value as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndef set_attribute_value(node_id, name, value)\n```\n\n----------------------------------------\n\nTITLE: Setting Accepted Encodings in Python\nDESCRIPTION: Sets a list of content encodings that will be accepted. An empty list means no encoding is accepted. This method is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef set_accepted_encodings(encodings):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Requesting Data from CDP Cache Storage\nDESCRIPTION: Command function to request data entries from a specified cache with pagination and filtering options. Returns a tuple containing a list of data entries and a count.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef request_entries(cache_id, skip_count=None, page_size=None, path_filter=None):\n    \"\"\"Requests data from cache.\n\n    * **Parameters:**\n      * **cache_id** ([`CacheId`](#nodriver.cdp.cache_storage.CacheId)) – ID of cache to get entries from.\n      * **skip_count** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]) –  *(Optional)* Number of records to skip.\n      * **page_size** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]) –  *(Optional)* Number of records to fetch.\n      * **path_filter** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]) –  *(Optional)* If present, only return the entries containing this substring in the path\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Tuple`](https://docs.python.org/3/library/typing.html#typing.Tuple)[[`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`DataEntry`](#nodriver.cdp.cache_storage.DataEntry)], [`float`](https://docs.python.org/3/library/functions.html#float)]]\n    * **Returns:**\n      A tuple with the following items:\n      1. **cacheDataEntries** - Array of object store data entries.\n      2. **returnCount** - Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Dispatching Periodic Sync Events to Service Workers in Python\nDESCRIPTION: Command function to trigger a periodic sync event on a service worker. It requires the origin, registration ID, and a tag that identifies the sync operation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef dispatch_periodic_sync_event(origin, registration_id, tag):\n    * **Parameters:**\n      * **origin** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **registration_id** ([`RegistrationID`](#nodriver.cdp.service_worker.RegistrationID)) – \n      * **tag** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Set Async Call Stack Depth Function\nDESCRIPTION: Function to enable/disable async call stack tracking by setting maximum depth. Setting depth to 0 disables collection.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef set_async_call_stack_depth(max_depth):\n    \"\"\"Enables or disables async call stacks tracking.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Network API Data Classes in NoDriver\nDESCRIPTION: Definitions of data classes used in the NoDriver Network API, including LoadNetworkResourcePageResult and LoadNetworkResourceOptions. These classes represent structured data for network operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass LoadNetworkResourcePageResult(success, net_error=None, net_error_name=None, http_status_code=None, stream=None, headers=None)\n\n# An object providing the result of a network resource load.\n# success: bool\n# net_error: Optional[float] = None\n# net_error_name: Optional[str] = None\n# http_status_code: Optional[float] = None\n# stream: Optional[StreamHandle] = None\n# headers: Optional[Headers] = None\n```\n\nLANGUAGE: python\nCODE:\n```\nclass LoadNetworkResourceOptions(disable_cache, include_credentials)\n\n# An options object that may be extended later to better support CORS,\n# CORB and streaming.\n# disable_cache: bool\n# include_credentials: bool\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Media Rules in Python\nDESCRIPTION: Function to modify CSS media rule selectors. Takes style sheet ID, range and text parameters. Returns a Generator containing the modified CSS media rule.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef set_media_text(style_sheet_id: StyleSheetId, range_, text: str) -> Generator[Dict[str, Any], Dict[str, Any], CSSMedia]\n```\n\n----------------------------------------\n\nTITLE: Auto-Attach Related Targets Command in CDP Python API\nDESCRIPTION: Experimental generator function that adds a specified target to monitoring list for related target creation. It auto-attaches to targets and can optionally pause new targets when attaching.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef auto_attach_related(target_id, wait_for_debugger_on_start, filter_=None):\n    \"\"\"Adds the specified target to the list of targets that will be monitored for any related target\n    creation (such as child frames, child workers and new versions of service worker) and reported\n    through `attachedToTarget`. The specified target is also auto-attached.\n    This cancels the effect of any previous `setAutoAttach` and is also cancelled by subsequent\n    `setAutoAttach`. Only available at the Browser target.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **target_id** ([`TargetID`](#nodriver.cdp.target.TargetID)) – \n      * **wait_for_debugger_on_start** ([`bool`](https://docs.python.org/3/library/functions.html#bool)) – Whether to pause new targets when attaching to them. Use ``Runtime.runIfWaitingForDebugger`` to run paused targets.\n      * **filter** – **(EXPERIMENTAL)**  *(Optional)* Only targets matching filter will be attached.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for RemoteObject in CDP Runtime\nDESCRIPTION: Defines the RemoteObject class which mirrors JavaScript objects and provides access to their properties, type information, and serialized values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RemoteObject(type_, subtype=None, class_name=None, value=None, unserializable_value=None, description=None, deep_serialized_value=None, object_id=None, preview=None, custom_preview=None):\n\n    type_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    subtype *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    class_name *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`Any`](https://docs.python.org/3/library/typing.html#typing.Any)]* *= None*\n\n    unserializable_value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`UnserializableValue`](#nodriver.cdp.runtime.UnserializableValue)]* *= None*\n\n    description *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    deep_serialized_value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`DeepSerializedValue`](#nodriver.cdp.runtime.DeepSerializedValue)]* *= None*\n\n    object_id *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`RemoteObjectId`](#nodriver.cdp.runtime.RemoteObjectId)]* *= None*\n\n    preview *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`ObjectPreview`](#nodriver.cdp.runtime.ObjectPreview)]* *= None*\n\n    custom_preview *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`CustomPreview`](#nodriver.cdp.runtime.CustomPreview)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Inspecting Service Workers in Python\nDESCRIPTION: Command function to inspect a service worker by its version ID. This allows examination of the worker's state and properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef inspect_worker(version_id):\n    * **Parameters:**\n      **version_id** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Credential - Python\nDESCRIPTION: Fetches a specific credential from a virtual authenticator using authenticator_id and credential_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_credential(authenticator_id, credential_id)\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutTreeNode Class in Python\nDESCRIPTION: Class definition for representing DOM tree elements with LayoutObject details including bounding box and style information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LayoutTreeNode(dom_node_index, bounding_box, layout_text=None, inline_text_nodes=None, style_index=None, paint_order=None, is_stacking_context=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing ContraDict Class in Python\nDESCRIPTION: ContraDict is a custom dictionary class that allows attribute access, is JSON serializable, and converts keys to snake_case. It's used as a base class for many components in the NoDriver package.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/others_and_helpers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ContraDict(*args, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Inspection Mode Setup Function\nDESCRIPTION: Function to enable inspection mode where hovered elements are highlighted. Generates inspectNodeRequested events on element selection.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\ndef set_inspect_mode(mode, highlight_config=None):\n```\n\n----------------------------------------\n\nTITLE: IndexedDB Type Definitions\nDESCRIPTION: Defines core IndexedDB types including DatabaseWithObjectStores, ObjectStore, ObjectStoreIndex, Key, KeyRange, DataEntry, and KeyPath. These types are automatically instantiated by the API and used as command arguments and return values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/indexed_db.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DatabaseWithObjectStores:\n    # Members and undocumented members\n    pass\n\nclass ObjectStore:\n    # Members and undocumented members\n    pass\n\nclass ObjectStoreIndex:\n    # Members and undocumented members\n    pass\n\nclass Key:\n    # Members and undocumented members\n    pass\n\nclass KeyRange:\n    # Members and undocumented members\n    pass\n\nclass DataEntry:\n    # Members and undocumented members\n    pass\n\nclass KeyPath:\n    # Members and undocumented members\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Override in Python\nDESCRIPTION: Experimental method to override the default host system locale. Accepts an ICU style C locale string. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef set_locale_override(locale=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Container Query Overlay Function\nDESCRIPTION: Function to set container query highlight configurations for multiple nodes using an array of highlight descriptors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\ndef set_show_container_query_overlays(container_query_highlight_configs):\n```\n\n----------------------------------------\n\nTITLE: Emulating Vision Deficiency in Python\nDESCRIPTION: Sets the emulation for a specific vision deficiency type. Returns a generator that yields dictionaries containing configuration details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef set_emulated_vision_deficiency(type_):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Force Pseudo State Method\nDESCRIPTION: Method that forces specified pseudo-classes on a DOM element when computing its style. Takes node ID and list of pseudo-classes as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nforce_pseudo_state(node_id, forced_pseudo_classes)\n```\n\n----------------------------------------\n\nTITLE: Enable ServiceWorker Domain Command in Python\nDESCRIPTION: Command function to enable the ServiceWorker domain. This starts monitoring service worker-related events and activities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Owner in Python\nDESCRIPTION: Experimental method that returns the iframe node owning an iframe with the given domain. Takes a frame_id parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef get_frame_owner(frame_id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Window Bounds Class in Python\nDESCRIPTION: Defines the Bounds class that stores information about browser window position and dimensions, including left and top offsets, width, height, and window state.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Bounds(left=None, top=None, width=None, height=None, window_state=None):\n    left: Optional[int] = None\n    top: Optional[int] = None\n    width: Optional[int] = None\n    height: Optional[int] = None\n    window_state: Optional[WindowState] = None\n```\n\n----------------------------------------\n\nTITLE: Setting Font Sizes in Python using NoDriver CDP\nDESCRIPTION: This experimental method sets default font sizes. It takes font_sizes as a parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\ndef set_font_sizes(font_sizes):\n    \"\"\"Set default font sizes.\n\n    Parameters:\n      font_sizes (FontSizes): Specifies font sizes to set. If a font size is not specified, it won't be changed.\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Managing Drag and Drop Interception in Python\nDESCRIPTION: Experimental method to control drag and drop behavior by intercepting default actions and emitting custom drag events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef set_intercept_drags(enabled)\n```\n\n----------------------------------------\n\nTITLE: Enabling DOM Agent\nDESCRIPTION: Enables the DOM agent for a page with optional whitespace inclusion in node children arrays. Returns a Generator of Dict objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef enable(include_whitespace=None):\n    # Enables DOM agent for the given page\n    pass\n```\n\n----------------------------------------\n\nTITLE: Disabling Execution Context Reporting in Python\nDESCRIPTION: Method that disables the reporting of execution contexts creation. Returns a Generator that resolves to None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef disable()\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Visibility Control Method\nDESCRIPTION: Experimental method to control scrollbar visibility. Takes a boolean parameter to hide/show scrollbars.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef set_scrollbars_hidden(hidden: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Taking Heap Snapshot in Python\nDESCRIPTION: Captures a heap snapshot with optional parameters for progress reporting and snapshot configuration. Returns a generator for managing the snapshot process.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntake_heap_snapshot(report_progress=None, treat_global_objects_as_roots=None, capture_numeric_value=None, expose_internals=None)\n```\n\n----------------------------------------\n\nTITLE: Modifying Variable Values in Python\nDESCRIPTION: Method to change variable values in a callframe. Supports local, closure and catch scope types. Takes scope number, variable name, new value and callframe ID as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef set_variable_value(scope_number: int, variable_name: str, new_value: CallArgument, call_frame_id: CallFrameId) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Remove Node Method - Python\nDESCRIPTION: Removes a DOM node identified by the given node_id from the document. Returns a Generator that yields dictionary results.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndef remove_node(node_id)\n```\n\n----------------------------------------\n\nTITLE: Security Module Type Definitions\nDESCRIPTION: Various security-related type definitions including CertificateId, MixedContentType, SecurityState, and other security state classes that represent different aspects of browser security.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/security.rst#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Frame Class for Web Page Structure in Python\nDESCRIPTION: This class represents a frame on a web page, containing information about its ID, URL, security context, and other properties. It is used to analyze the structure and properties of individual frames within a page.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass Frame(id_, loader_id, url, domain_and_registry, security_origin, mime_type, secure_context_type, cross_origin_isolated_context_type, gated_api_features, parent_id=None, name=None, url_fragment=None, unreachable_url=None, ad_frame_status=None):\n\n    Information about the Frame on the page.\n\n    id_ : FrameId\n        Frame unique identifier.\n\n    loader_id : LoaderId\n        Identifier of the loader associated with this frame.\n\n    url : str\n        Frame document's URL without fragment.\n\n    domain_and_registry : str\n        Frame document's registered domain, taking the public suffixes list into account.\n        Extracted from the Frame's url.\n        Example URLs: http://www.google.com/file.html -> \"google.com\"\n                      http://a.b.co.uk/file.html      -> \"b.co.uk\"\n\n    security_origin : str\n        Frame document's security origin.\n\n    mime_type : str\n        Frame document's mimeType as determined by the browser.\n\n    secure_context_type : SecureContextType\n        Indicates whether the main document is a secure context and explains why that is the case.\n\n    cross_origin_isolated_context_type : CrossOriginIsolatedContextType\n        Indicates whether this is a cross origin isolated context.\n\n    gated_api_features : List[GatedAPIFeatures]\n        Indicated which gated APIs / features are available.\n\n    parent_id : Optional[FrameId] = None\n        Parent frame identifier.\n\n    name : Optional[str] = None\n        Frame's name as specified in the tag.\n\n    url_fragment : Optional[str] = None\n        Frame document's URL fragment including the '#'.\n\n    unreachable_url : Optional[str] = None\n        If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.\n\n    ad_frame_status : Optional[AdFrameStatus] = None\n        Indicates whether this frame was tagged as an ad and why.\n```\n\n----------------------------------------\n\nTITLE: WebSocket Classes Definition\nDESCRIPTION: Classes for handling WebSocket request and response data with HTTP headers and status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass WebSocketRequest(headers):\n    headers: Headers\n\nclass WebSocketResponse(status, status_text, headers, headers_text=None, request_headers=None, request_headers_text=None):\n    status: int\n    status_text: str\n    headers: Headers\n    headers_text: Optional[str] = None\n    request_headers: Optional[Headers] = None\n    request_headers_text: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Starting Heap Object Tracking in Python\nDESCRIPTION: Begins tracking heap objects with an optional parameter to track allocations. Returns a generator for managing the tracking process.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstart_tracking_heap_objects(track_allocations=None)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Animation Time in Python\nDESCRIPTION: Illustrates the use of the get_current_time() command generator function to retrieve the current time of an animation. This function yields arguments and returns the current time.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/animation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncurrent_time = yield get_current_time()\n```\n\n----------------------------------------\n\nTITLE: Implementing Call and Stack Trace Classes in Python\nDESCRIPTION: Defines classes for representing JavaScript call frames and stack traces with detailed location and context information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CallFrame(function_name, script_id, url, line_number, column_number):\n    function_name: str\n    script_id: ScriptId\n    url: str \n    line_number: int\n    column_number: int\n```\n\nLANGUAGE: python\nCODE:\n```\nclass StackTrace(call_frames, description=None, parent=None, parent_id=None):\n    call_frames: List[CallFrame]\n    description: Optional[str] = None\n    parent: Optional[StackTrace] = None\n    parent_id: Optional[StackTraceId] = None\n```\n\n----------------------------------------\n\nTITLE: Getting Container Query Descendants\nDESCRIPTION: Experimental function to get descendant nodes that have container queries against a specified container node.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef get_querying_descendants_for_container(node_id)\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Media Query in Python\nDESCRIPTION: Class definition for MediaQuery and MediaQueryExpression to handle CSS media query conditions and expressions. Includes attributes for storing query expressions and active state.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MediaQuery(expressions, active):\n    expressions: List[MediaQueryExpression]\n    active: bool\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting page elements, including options for showing info, styles, rulers, and various color settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass HighlightConfig(show_info=None, show_styles=None, show_rulers=None, show_accessibility_info=None, show_extension_lines=None, content_color=None, padding_color=None, border_color=None, margin_color=None, event_target_color=None, shape_color=None, shape_margin_color=None, css_grid_color=None, color_format=None, grid_highlight_config=None, flex_container_highlight_config=None, flex_item_highlight_config=None, contrast_algorithm=None, container_query_container_highlight_config=None):\n\n    show_info: Optional[bool] = None\n\n    show_styles: Optional[bool] = None\n\n    show_rulers: Optional[bool] = None\n\n    show_accessibility_info: Optional[bool] = None\n\n    show_extension_lines: Optional[bool] = None\n\n    content_color: Optional[RGBA] = None\n\n    padding_color: Optional[RGBA] = None\n\n    border_color: Optional[RGBA] = None\n\n    margin_color: Optional[RGBA] = None\n\n    event_target_color: Optional[RGBA] = None\n\n    shape_color: Optional[RGBA] = None\n\n    shape_margin_color: Optional[RGBA] = None\n\n    css_grid_color: Optional[RGBA] = None\n\n    color_format: Optional[ColorFormat] = None\n\n    grid_highlight_config: Optional[GridHighlightConfig] = None\n\n    flex_container_highlight_config: Optional[FlexContainerHighlightConfig] = None\n\n    flex_item_highlight_config: Optional[FlexItemHighlightConfig] = None\n\n    contrast_algorithm: Optional[ContrastAlgorithm] = None\n\n    container_query_container_highlight_config: Optional[ContainerQueryContainerHighlightConfig] = None\n```\n\n----------------------------------------\n\nTITLE: Sensor Override Control Method\nDESCRIPTION: Method to override platform sensors. Enables virtual sensor data instead of real hardware sensor data when enabled.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef set_sensor_override_enabled(enabled: bool, type_, metadata: Optional[SensorMetadata] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Deleting IndexedDB Database\nDESCRIPTION: Command generator function to delete an entire IndexedDB database. Takes database name and optional security parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/indexed_db.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef delete_database(database_name, security_origin=None, storage_key=None, storage_bucket=None):\n    # Command implementation details\n```\n\n----------------------------------------\n\nTITLE: Highlighting Rectangle Function\nDESCRIPTION: Function to highlight a rectangular area using x, y coordinates and dimensions. Supports custom fill and outline colors with coordinates relative to main viewport.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_rect(x, y, width, height, color=None, outline_color=None):\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Storage Tracking in Python\nDESCRIPTION: Enables or disables the issuing of sharedStorageAccessed events for monitoring shared storage access.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nset_shared_storage_tracking(enable)\n```\n\n----------------------------------------\n\nTITLE: Implementing start_violations_report Command for Violation Reporting\nDESCRIPTION: Generator function that starts violation reporting with the specified configuration settings. Takes a list of ViolationSetting objects as input.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef start_violations_report(config):\n    \"\"\"start violation reporting.\"\"\"\n    # Parameters: config (List[ViolationSetting]) – Configuration for violations.\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Restart Frame Function\nDESCRIPTION: Function to restart a particular call frame from the beginning. Requires mode parameter set to 'StepInto'. Returns new stack trace information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef restart_frame(call_frame_id, mode=None):\n    \"\"\"Restarts particular call frame from the beginning.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution Pause Function\nDESCRIPTION: Function that stops execution at the next JavaScript statement. Returns a Generator containing debugger state information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef pause():\n    \"\"\"Stops on the next JavaScript statement.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Rule Selectors in Python\nDESCRIPTION: Function to modify CSS rule selectors. Takes style sheet ID, range and new selector text as parameters. Returns a Generator containing the modified selector list.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef set_rule_selector(style_sheet_id: StyleSheetId, range_, selector: str) -> Generator[Dict[str, Any], Dict[str, Any], SelectorList]\n```\n\n----------------------------------------\n\nTITLE: Defining TouchPoint Class in Python for Input Handling\nDESCRIPTION: Class definition for TouchPoint which represents touch input coordinates and properties. It captures various aspects of touch input including position, pressure, tilt, and rotation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TouchPoint(x, y, radius_x=None, radius_y=None, rotation_angle=None, force=None, tangential_pressure=None, tilt_x=None, tilt_y=None, twist=None, id_=None)\n```\n\n----------------------------------------\n\nTITLE: Starting Heap Sampling in Python\nDESCRIPTION: Initiates heap sampling with optional parameters for interval and GC object inclusion. Returns a generator for managing the sampling process.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstart_sampling(sampling_interval=None, include_objects_collected_by_major_gc=None, include_objects_collected_by_minor_gc=None)\n```\n\n----------------------------------------\n\nTITLE: DOM Snapshot Control Commands - Python\nDESCRIPTION: Enable and disable commands for controlling the DOM snapshot agent on a given page\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables DOM snapshot agent for the given page.\"\"\"\n\ndef enable():\n    \"\"\"Enables DOM snapshot agent for the given page.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Storage Management Commands - Python\nDESCRIPTION: Generator functions for managing browser storage, including commands to clear cookies and storage data for specific origins or storage keys.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef clear_cookies(browser_context_id=None):\n    \"\"\"Clears cookies.\"\"\"\n    pass\n\ndef clear_data_for_origin(origin, storage_types):\n    \"\"\"Clears storage for origin.\"\"\"\n    pass\n\ndef clear_data_for_storage_key(storage_key, storage_types):\n    \"\"\"Clears storage for storage key.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Remove JavaScript Breakpoint Function\nDESCRIPTION: Function to remove a JavaScript breakpoint identified by breakpoint_id. Returns a Generator with operation result.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef remove_breakpoint(breakpoint_id):\n    \"\"\"Removes JavaScript breakpoint.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Events for Mouse Input in Python\nDESCRIPTION: This experimental function enables or disables touch emulation based on mouse input. It takes parameters for enabling the feature and optionally specifying the touch/gesture events configuration.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nset_emit_touch_events_for_mouse(enabled, configuration=None)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Service Worker in Python\nDESCRIPTION: Toggles ignoring of service worker for each request, allowing direct network loading instead of using the service worker.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef set_bypass_service_worker(bypass):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Cookies in NoDriver\nDESCRIPTION: Method for setting multiple cookies at once by passing a list of CookieParam objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nset_cookies(cookies)\n```\n\n----------------------------------------\n\nTITLE: Running Bounce Tracking Mitigations\nDESCRIPTION: Experimental method to immediately delete state for sites identified as potential bounce trackers.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef run_bounce_tracking_mitigations() -> Generator[Dict[str, Any], Dict[str, Any], List[str]]\n```\n\n----------------------------------------\n\nTITLE: get_feature_state Command Function in Python CDP API\nDESCRIPTION: Generator function that returns information about a specific feature state. Takes a feature state string parameter and returns a boolean result.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_feature_state(feature_state)\n```\n\n----------------------------------------\n\nTITLE: Getting Anchor Elements\nDESCRIPTION: Retrieves target anchor elements according to W3C CSS Anchor Position specification. Takes a node ID and optional anchor specifier.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_anchor_element(node_id, anchor_specifier=None):\n    # Returns the target anchor element\n    pass\n```\n\n----------------------------------------\n\nTITLE: Command function to start tab mirroring to a Cast sink\nDESCRIPTION: A generator function that initiates mirroring of the current browser tab to a specified Cast sink device.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef start_tab_mirroring(sink_name):\n    \"\"\"\n    Starts mirroring the tab to the sink.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Ad Highlight Toggle Function\nDESCRIPTION: Function to toggle highlighting of elements detected as advertisements within frames.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndef set_show_ad_highlights(show):\n```\n\n----------------------------------------\n\nTITLE: Get Background Colors Method\nDESCRIPTION: Retrieves background colors, computed font size and weight for a DOM node. Returns background colors array, font size and font weight as CSS computed values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nget_background_colors(node_id)\n```\n\n----------------------------------------\n\nTITLE: Enabling the CDP Accessibility Domain in Python\nDESCRIPTION: This command enables the accessibility domain in CDP, which causes AXNodeId's to remain consistent between method calls. This can impact performance until accessibility is disabled.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    \"\"\"\n    Enables the accessibility domain which causes `AXNodeId`'s to remain consistent between method calls.\n    This turns on accessibility for the page, which can impact performance until accessibility is disabled.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Disabling the CDP Accessibility Domain in Python\nDESCRIPTION: This command disables the accessibility domain in CDP, which stops AXNodeId's from being consistently maintained between calls. It returns a generator that yields and accepts dictionaries and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"\n    Disables the accessibility domain.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Signed Exchange Signature Class Definition in Python\nDESCRIPTION: Defines the SignedExchangeSignature class for handling signed exchange signatures with validation and certificate information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass SignedExchangeSignature(label, signature, integrity, validity_url, date, expires, cert_url=None, cert_sha256=None, certificates=None):\n    label : str\n    signature : str\n    integrity : str\n    validity_url : str\n    date : int\n    expires : int\n    cert_url : Optional[str] = None\n    cert_sha256 : Optional[str] = None\n    certificates : Optional[List[str]] = None\n```\n\n----------------------------------------\n\nTITLE: Getting Browser Contexts in Python\nDESCRIPTION: Returns all browser contexts created with Target.createBrowserContext method.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nget_browser_contexts()\n```\n\n----------------------------------------\n\nTITLE: Declaring Console Commands in Python\nDESCRIPTION: These snippets show the declaration of console-related commands: clear_messages, disable, and enable. Each command is implemented as a generator function with specific yield and return types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/console.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: clear_messages\n```\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n```\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining Tracing Commands in Python\nDESCRIPTION: Defines various commands for controlling tracing operations, including ending trace collection, getting supported categories, recording clock sync markers, and requesting memory dumps.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef end():\n    # Stop trace events collection\n    ...\n\ndef get_categories():\n    # Gets supported tracing categories\n    ...\n\ndef record_clock_sync_marker(sync_id):\n    # Record a clock sync marker in the trace\n    ...\n\ndef request_memory_dump(deterministic=None, level_of_detail=None):\n    # Request a global memory dump\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Storage Items in CDP\nDESCRIPTION: Command function to set values in extension storage in a specified storage area. The provided values are merged with existing values in the storage area.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef set_storage_items(id_, storage_area, values):\n    \"\"\"Sets `values` in extension storage in the given `storageArea`. The provided `values`\n    will be merged with existing values in the storage area.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining InspectorIssue Class in Python\nDESCRIPTION: Class definition for representing inspector issues reported from the back-end, including issue code, details, and optional unique identifier.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass InspectorIssue(code, details, issue_id=None):\n    code: InspectorIssueCode\n    details: InspectorIssueDetails\n    issue_id: Optional[IssueId] = None\n```\n\n----------------------------------------\n\nTITLE: Enabling Focus Emulation in Python\nDESCRIPTION: Enables or disables the simulation of a focused and active page. This is an experimental feature that returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef set_focus_emulation_enabled(enabled):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: AddCompilationCache Command Implementation in Python\nDESCRIPTION: Seeds compilation cache for a given URL. This function takes a URL and base64-encoded data and adds it to the compilation cache, which doesn't survive cross-process navigation. Marked as EXPERIMENTAL.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef add_compilation_cache(url, data):\n    \"\"\"\n    Seeds compilation cache for given url. Compilation cache does not survive\n    cross-process navigation.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **url** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **data** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – Base64-encoded data (Encoded as a base64 string when passed over JSON)\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Timing in Python using CDP\nDESCRIPTION: This function sets the timing properties of animations. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: set_timing\n```\n\n----------------------------------------\n\nTITLE: Delivering Push Messages to Service Workers in Python\nDESCRIPTION: Command function for delivering push messages to a service worker. It requires an origin, registration ID, and the message data to be delivered.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef deliver_push_message(origin, registration_id, data):\n    * **Parameters:**\n      * **origin** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **registration_id** ([`RegistrationID`](#nodriver.cdp.service_worker.RegistrationID)) – \n      * **data** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Defining FrameResourceTree Class for Web Page Structure Analysis in Python\nDESCRIPTION: This class represents the hierarchy of frames and their associated resources on a web page. It is used to analyze the overall structure of a page, including nested frames and their resources.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass FrameResourceTree(frame, resources, child_frames=None):\n\n    Information about the Frame hierarchy along with their cached resources.\n\n    frame : Frame\n        Frame information for this tree item.\n\n    resources : List[FrameResource]\n        Information about frame resources.\n\n    child_frames : Optional[List[FrameResourceTree]] = None\n        Child frames.\n```\n\n----------------------------------------\n\nTITLE: Network Event Classes - Python\nDESCRIPTION: Collection of event classes for handling various network events including data reception, EventSource messages, loading states, and request interception. These classes provide structured access to network event data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass DataReceived:\n    def __init__(self, request_id, timestamp, data_length, encoded_data_length, data):\n        pass\n\nclass EventSourceMessageReceived:\n    def __init__(self, request_id, timestamp, event_name, event_id, data):\n        pass\n\nclass LoadingFailed:\n    def __init__(self, request_id, timestamp, type_, error_text, canceled, blocked_reason, cors_error_status):\n        pass\n\nclass LoadingFinished:\n    def __init__(self, request_id, timestamp, encoded_data_length):\n        pass\n\nclass RequestIntercepted:\n    def __init__(self, interception_id, request, frame_id, resource_type, is_navigation_request, is_download, redirect_url, auth_challenge, response_error_reason, response_status_code, response_headers, request_id):\n        pass\n\nclass RequestServedFromCache:\n    def __init__(self, request_id):\n        pass\n\nclass RequestWillBeSent:\n    def __init__(self, request_id, loader_id, document_url, request, timestamp, wall_time, initiator, redirect_has_extra_info, redirect_response, type_, frame_id, has_user_gesture):\n        pass\n\nclass ResourceChangedPriority:\n    def __init__(self, request_id, new_priority, timestamp):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Removing Instrumentation Breakpoint in Python\nDESCRIPTION: A generator function that removes a breakpoint on a particular native event. Takes an event_name parameter and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/event_breakpoints.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef remove_instrumentation_breakpoint(event_name):\n    # Removes breakpoint on particular native event.\n    \n    # Parameters:\n    #   event_name (str) – Instrumentation name to stop on.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining AddDatabase Event in Python\nDESCRIPTION: Defines the AddDatabase event class, which is likely triggered when a new database is added. The class includes members and undocumented members, but excludes from_json and to_json methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: AddDatabase\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing dispatch_drag_event Command in Python\nDESCRIPTION: Generator function that dispatches a drag event into the page with specified coordinates, drag data, and optional modifier keys. This is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef dispatch_drag_event(type_, x, y, data, modifiers=None):\n```\n\n----------------------------------------\n\nTITLE: Setting Response Override Bits for Web Authentication in Python\nDESCRIPTION: This method resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present. It allows overriding specific bits in the authenticator response for testing purposes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndef set_response_override_bits(authenticator_id, is_bogus_signature=None, is_bad_uv=None, is_bad_up=None):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Flex Overlay Configuration in Python\nDESCRIPTION: Method to configure flex node highlight overlays. Accepts a list of FlexNodeHighlightConfig objects to define node identifiers and highlight appearance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef set_show_flex_overlays(flex_node_highlight_configs: List[FlexNodeHighlightConfig]) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Deleting Browser Cookie via CDP in Python\nDESCRIPTION: Deletes a browser cookie matching the specified name and URL. This method is deprecated since version 1.3 and marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndelete_cookie(cookie_name, url)\n```\n\n----------------------------------------\n\nTITLE: SignedExchangeHeader Class Definition\nDESCRIPTION: Class representing header information for signed HTTP exchanges including request URL, response code, headers, signatures and integrity hash.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass SignedExchangeHeader(request_url, response_code, response_headers, signatures, header_integrity)\n```\n\n----------------------------------------\n\nTITLE: CDP Profiler Event Classes\nDESCRIPTION: Event classes for handling console profile events and coverage updates including ConsoleProfileFinished, ConsoleProfileStarted, and PreciseCoverageDeltaUpdate.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ConsoleProfileFinished:\n    def __init__(self, id_, location, profile, title):\n        self.id_ = id_\n        self.location = location\n        self.profile = profile\n        self.title = title\n\nclass ConsoleProfileStarted:\n    def __init__(self, id_, location, title):\n        self.id_ = id_\n        self.location = location\n        self.title = title\n\nclass PreciseCoverageDeltaUpdate:\n    def __init__(self, timestamp, occasion, result):\n        self.timestamp = timestamp\n        self.occasion = occasion\n        self.result = result\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Set Item Command in Python\nDESCRIPTION: Generator function that sets a specific key-value pair in DOM storage, either creating a new item or updating an existing one.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef set_dom_storage_item(storage_id, key, value):\n\n* **Parameters:**\n  * **storage_id** ([`StorageId`](#nodriver.cdp.dom_storage.StorageId)) – \n  * **key** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n  * **value** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Console Domain Command Implementations\nDESCRIPTION: Generator functions implementing console domain commands including clear_messages(), disable(), and enable(). These commands manage console message handling and domain state.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/console.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_messages() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n    \"\"\"Does nothing.\"\"\"\n    pass\n\ndef disable() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n    \"\"\"Disables console domain, prevents further console messages from being reported to the client.\"\"\"\n    pass\n\ndef enable() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n    \"\"\"Enables console domain, sends the messages collected so far to the client.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Loading Unpacked Extensions in CDP\nDESCRIPTION: Command function to install an unpacked extension from the filesystem. Requires the client to be connected with specific debugging flags enabled. Returns the extension ID upon successful installation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef load_unpacked(path):\n    \"\"\"Installs an unpacked extension from the filesystem similar to\n    –load-extension CLI flags. Returns extension ID once the extension\n    has been installed. Available if the client is connected using the\n    –remote-debugging-pipe flag and the –enable-unsafe-extension-debugging\n    flag is set.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Lifecycle Events in Python using NoDriver CDP\nDESCRIPTION: This method controls whether the page will emit lifecycle events. It takes an enabled boolean parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ndef set_lifecycle_events_enabled(enabled):\n    \"\"\"Controls whether page will emit lifecycle events.\n\n    Parameters:\n      enabled (bool): If true, starts emitting lifecycle events.\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Searching Response Body in Python\nDESCRIPTION: Searches for a given string in the response content. It allows for case-sensitive and regex searches. Returns a list of search matches.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef search_in_response_body(request_id, query, case_sensitive=None, is_regex=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Script Cache Production Method in Python CDP\nDESCRIPTION: Experimental method that requests backend to produce compilation cache for specified scripts. Scripts are added to a cache production list that may be reset during navigation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nproduce_compilation_cache(scripts)\n```\n\n----------------------------------------\n\nTITLE: Request Pattern Class Definition in Python\nDESCRIPTION: Defines a class for specifying URL patterns and resource types for request interception. Supports wildcards and request stage specification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass RequestPattern(url_pattern=None, resource_type=None, request_stage=None):\n    url_pattern: Optional[str] = None\n    resource_type: Optional[ResourceType] = None\n    request_stage: Optional[RequestStage] = None\n```\n\n----------------------------------------\n\nTITLE: Dispatching Sync Events to Service Workers in Python\nDESCRIPTION: Command function to trigger a sync event on a service worker. It requires the origin, registration ID, a tag that identifies the sync operation, and a boolean indicating if this is the last chance for synchronization.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef dispatch_sync_event(origin, registration_id, tag, last_chance):\n    * **Parameters:**\n      * **origin** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **registration_id** ([`RegistrationID`](#nodriver.cdp.service_worker.RegistrationID)) – \n      * **tag** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n      * **last_chance** ([`bool`](https://docs.python.org/3/library/functions.html#bool)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Disable ServiceWorker Domain Command in Python\nDESCRIPTION: Command function to disable the ServiceWorker domain. This stops the monitoring of service worker-related events and activities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Pause State in Python\nDESCRIPTION: Function to set the paused state of a set of animations. It takes a list of animations and a boolean paused state as parameters, and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef set_paused(animations, paused):\n    \"\"\"Sets the paused state of a set of animations.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining HeapProfiler SamplingHeapProfileNode Class\nDESCRIPTION: Class representing a node in the heap sampling profile tree. Contains function location, allocation statistics, node ID and child nodes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SamplingHeapProfileNode(call_frame, self_size, id_, children):\n    call_frame: CallFrame  # Function location\n    self_size: float      # Allocations size in bytes excluding children\n    id_: int              # Unique node id across profiles\n    children: List[SamplingHeapProfileNode]  # Child nodes\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Storage Items Cleared Event in Python\nDESCRIPTION: Event class for when all items are cleared from DOM storage, containing only the storage identifier.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass DomStorageItemsCleared(storage_id):\n\n    storage_id *: [`StorageId`](#nodriver.cdp.dom_storage.StorageId)*\n```\n\n----------------------------------------\n\nTITLE: CSS Rule Class Definitions\nDESCRIPTION: Class definitions for various CSS rule types including position-try rules, keyframes rules, property registrations, and font palette values rules.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CSSPositionTryRule:\n    def __init__(self, name, origin, style, active, style_sheet_id=None):\n        pass\n\nclass CSSKeyframesRule:\n    def __init__(self, animation_name, keyframes):\n        pass\n\nclass CSSPropertyRegistration:\n    def __init__(self, property_name, inherits, syntax, initial_value=None):\n        pass\n\nclass CSSFontPaletteValuesRule:\n    def __init__(self, origin, font_palette_name, style, style_sheet_id=None):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Resolving Animation in Python using CDP\nDESCRIPTION: This function resolves an animation, potentially preparing it for playback. It is a generator function that yields and resumes with specific types, returning the resolved animation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: resolve_animation\n```\n\n----------------------------------------\n\nTITLE: Stopping Heap Sampling in Python\nDESCRIPTION: Halts the heap sampling process and returns the recorded sampling heap profile. Returns a generator that yields the profile data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstop_sampling()\n```\n\n----------------------------------------\n\nTITLE: WebSocket Frame Class Definition in Python\nDESCRIPTION: Class for representing WebSocket message data including opcode, mask, and payload information. Handles both text and binary message types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass WebSocketFrame(opcode, mask, payload_data):\n    # WebSocket message opcode\n    opcode: float\n    # WebSocket message mask\n    mask: bool\n    # WebSocket message payload data\n    payload_data: str\n```\n\n----------------------------------------\n\nTITLE: Implementing BluetoothEmulation Commands in Python\nDESCRIPTION: Defines generator functions for BluetoothEmulation commands, including disable(), enable(), simulate_advertisement(), and simulate_preconnected_peripheral().\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/bluetooth_emulation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    # Implementation details\n\ndef enable(state):\n    # Implementation details\n\ndef simulate_advertisement(entry):\n    # Implementation details\n\ndef simulate_preconnected_peripheral(address, name, manufacturer_data, known_service_uuids):\n    # Implementation details\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundServiceEvent class for CDP\nDESCRIPTION: A comprehensive data class that represents an event from a background service, containing details like timestamp, origin, service worker ID, and event metadata.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BackgroundServiceEvent(timestamp, origin, service_worker_registration_id, service, event_name, instance_id, event_metadata, storage_key):\n    timestamp: TimeSinceEpoch\n    \"\"\"\n    Timestamp of the event (in seconds).\n    \"\"\"\n\n    origin: str\n    \"\"\"\n    The origin this event belongs to.\n    \"\"\"\n\n    service_worker_registration_id: RegistrationID\n    \"\"\"\n    The Service Worker ID that initiated the event.\n    \"\"\"\n\n    service: ServiceName\n    \"\"\"\n    The Background Service this event belongs to.\n    \"\"\"\n\n    event_name: str\n    \"\"\"\n    A description of the event.\n    \"\"\"\n\n    instance_id: str\n    \"\"\"\n    An identifier that groups related events together.\n    \"\"\"\n\n    event_metadata: List[EventMetadata]\n    \"\"\"\n    A list of event-specific information.\n    \"\"\"\n\n    storage_key: str\n    \"\"\"\n    Storage key this event belongs to.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CookieIssueDetails Class in Python\nDESCRIPTION: Class containing detailed information about cookie-related issues including warning reasons, exclusion reasons, and operation type. Used to convey specific error information about cookies.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CookieIssueDetails(cookie_warning_reasons, cookie_exclusion_reasons, operation, cookie=None, raw_cookie_line=None, site_for_cookies=None, cookie_url=None, request=None):\n    cookie_warning_reasons: List[CookieWarningReason]\n    cookie_exclusion_reasons: List[CookieExclusionReason]\n    operation: CookieOperation\n    cookie: Optional[AffectedCookie] = None\n    raw_cookie_line: Optional[str] = None\n    site_for_cookies: Optional[str] = None\n    cookie_url: Optional[str] = None\n    request: Optional[AffectedRequest] = None\n```\n\n----------------------------------------\n\nTITLE: Importing CDP Fetch Module in Python\nDESCRIPTION: This snippet shows how to import the Fetch module from the nodriver.cdp package. It provides access to types, commands, and events related to network requests interception and modification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/fetch.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import fetch\n```\n\n----------------------------------------\n\nTITLE: Defining Autofill Commands in Python\nDESCRIPTION: Defines command functions for the Autofill domain including disable, enable, set_addresses, and trigger. These commands are generator functions used to interact with the Autofill functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/autofill.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: set_addresses\n\n.. autofunction:: trigger\n```\n\n----------------------------------------\n\nTITLE: Emulating Touch Events from Mouse Input in Python\nDESCRIPTION: Experimental method that converts mouse events to touch events with support for coordinates, buttons, and modifiers. Handles mouse wheel events and click counting.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef emulate_touch_from_mouse_event(type_, x, y, button, timestamp=None, delta_x=None, delta_y=None, modifiers=None, click_count=None)\n```\n\n----------------------------------------\n\nTITLE: Setting IME Composition in Python\nDESCRIPTION: Experimental method for handling IME (Input Method Editor) composition, allowing text insertion with selection and replacement range control.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndef ime_set_composition(text, selection_start, selection_end, replacement_start=None, replacement_end=None)\n```\n\n----------------------------------------\n\nTITLE: Defining AuthRequired Class in Python CDP Module\nDESCRIPTION: Class definition for handling authentication requests in the CDP Fetch module. The class represents an authentication challenge issued when handleAuthRequests is enabled, pausing the request until client responds with continueWithAuth.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fetch.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AuthRequired(request_id, request, frame_id, resource_type, auth_challenge):\n    \"\"\"Issued when the domain is enabled with handleAuthRequests set to true.\n    The request is paused until client responds with continueWithAuth.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Get Layers Method\nDESCRIPTION: Experimental method that returns all rendering engine layers for a node's tree scope, providing the root layer containing the full layer tree and ordering.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nget_layers_for_node(node_id)\n```\n\n----------------------------------------\n\nTITLE: Adding WebAuthn Credential Command\nDESCRIPTION: Generator function that adds a credential to a specified authenticator, taking authenticator ID and credential object as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_credential(authenticator_id, credential):\n    # Adds the credential to the specified authenticator\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Cache Data Entry Class in CDP Cache Storage\nDESCRIPTION: Class representing a data entry in a cache with properties for request and response details including URL, method, headers, time, status, and type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass DataEntry(request_url, request_method, request_headers, response_time, response_status, response_status_text, response_type, response_headers):\n    \"\"\"Data entry.\n\n    #### request_url *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    Request URL.\n\n    #### request_method *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    Request method.\n\n    #### request_headers *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Header`](#nodriver.cdp.cache_storage.Header)]*\n\n    Request headers\n\n    #### response_time *: [`float`](https://docs.python.org/3/library/functions.html#float)*\n\n    Number of seconds since epoch.\n\n    #### response_status *: [`int`](https://docs.python.org/3/library/functions.html#int)*\n\n    HTTP response status code.\n\n    #### response_status_text *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    HTTP response status text.\n\n    #### response_type *: [`CachedResponseType`](#nodriver.cdp.cache_storage.CachedResponseType)*\n\n    HTTP response type\n\n    #### response_headers *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Header`](#nodriver.cdp.cache_storage.Header)]*\n\n    Response headers\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileNode Class in Python\nDESCRIPTION: Class representing a profile node that holds callsite information, execution statistics and child nodes. Contains properties for node ID, call frame, hit count, children, deoptimization reason and position ticks.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ProfileNode(id_, call_frame, hit_count=None, children=None, deopt_reason=None, position_ticks=None)\n```\n\n----------------------------------------\n\nTITLE: Defining disable Command in Python for CDP Debugger\nDESCRIPTION: Defines the disable command which disables the debugger for the given page. It takes no parameters and returns a generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables debugger for given page.\"\"\"\n\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Initializing IsolationModeHighlightConfig Class in Python\nDESCRIPTION: Class for configuring the appearance of elements in isolation mode. Defines colors for resizers, handles and masks with optional RGBA values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass IsolationModeHighlightConfig(resizer_color=None, resizer_handle_color=None, mask_color=None):\n    resizer_color: Optional[RGBA] = None\n    resizer_handle_color: Optional[RGBA] = None\n    mask_color: Optional[RGBA] = None\n```\n\n----------------------------------------\n\nTITLE: Seeking Animations in Python using CDP\nDESCRIPTION: This function seeks to a specific point in animations. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: seek_animations\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Details Class in Python\nDESCRIPTION: Implements a class for detailed exception information including location, stack trace and context data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ExceptionDetails(exception_id, text, line_number, column_number, script_id=None, url=None, stack_trace=None, exception=None, execution_context_id=None, exception_meta_data=None):\n    exception_id: int\n    text: str\n    line_number: int\n    column_number: int\n    script_id: Optional[ScriptId] = None\n    url: Optional[str] = None\n    stack_trace: Optional[StackTrace] = None\n    exception: Optional[RemoteObject] = None\n    execution_context_id: Optional[ExecutionContextId] = None\n    exception_meta_data: Optional[dict] = None\n```\n\n----------------------------------------\n\nTITLE: Command function to set a default Cast sink\nDESCRIPTION: A generator function that specifies a sink to be used when a web page requests browser selection via Presentation API, Remote Playback API, or Cast SDK.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_sink_to_use(sink_name):\n    \"\"\"\n    Sets a sink to be used when the web page requests the browser to choose a\n    sink via Presentation API, Remote Playback API, or Cast SDK.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CallFrame Class in Python for CDP Debugger\nDESCRIPTION: Defines the CallFrame class representing a JavaScript call frame. It includes various properties such as call frame ID, function name, location, and scope chain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CallFrame(call_frame_id, function_name, location, url, scope_chain, this, function_location=None, return_value=None, can_be_restarted=None):\n    \"\"\"JavaScript call frame. Array of call frames form the call stack.\"\"\"\n\n    call_frame_id: CallFrameId\n    \"\"\"Call frame identifier. This identifier is only valid while the virtual machine is paused.\"\"\"\n\n    function_name: str\n    \"\"\"Name of the JavaScript function called on this call frame.\"\"\"\n\n    location: Location\n    \"\"\"Location in the source code.\"\"\"\n\n    url: str\n    \"\"\"JavaScript script name or url.\n    Deprecated in favor of using the `location.scriptId` to resolve the URL via a previously\n    sent `Debugger.scriptParsed` event.\"\"\"\n\n    scope_chain: List[Scope]\n    \"\"\"Scope chain for this call frame.\"\"\"\n\n    this: RemoteObject\n    \"`this` object for this call frame.\"\"\"\n\n    function_location: Optional[Location] = None\n    \"\"\"Location in the source code.\"\"\"\n\n    return_value: Optional[RemoteObject] = None\n    \"\"\"The value being returned, if the function is at return point.\"\"\"\n\n    can_be_restarted: Optional[bool] = None\n    \"\"\"Valid only while the VM is paused and indicates whether this frame\n    can be restarted or not. Note that a `true` value here does not\n    guarantee that Debugger#restartFrame with this CallFrameId will be\n    successful, but it is very likely.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing Virtual Authenticator - Python\nDESCRIPTION: Removes an entire virtual authenticator instance identified by authenticator_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef remove_virtual_authenticator(authenticator_id)\n```\n\n----------------------------------------\n\nTITLE: Setting User Verification Status for Web Authentication in Python\nDESCRIPTION: This method sets whether User Verification succeeds or fails for an authenticator. The default is true. It's used to control the behavior of the user verification process during authentication.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef set_user_verified(authenticator_id, is_user_verified):\n    # Implementation details not provided in the documentation\n```\n\n----------------------------------------\n\nTITLE: Source Order Highlighting Function\nDESCRIPTION: Function to highlight the source order of DOM node children using various node identification methods. Requires a SourceOrderConfig parameter to control overlay appearance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_source_order(source_order_config, node_id=None, backend_node_id=None, object_id=None):\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Authenticator - Python\nDESCRIPTION: Creates and adds a virtual authenticator using VirtualAuthenticatorOptions. Returns a Generator containing AuthenticatorId.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add_virtual_authenticator(options)\n```\n\n----------------------------------------\n\nTITLE: Finding Relayout Boundary\nDESCRIPTION: Experimental function to get the ID of the nearest ancestor that serves as a relayout boundary for a given node.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef get_relayout_boundary(node_id)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Animation Time in Python using CDP\nDESCRIPTION: This function retrieves the current time of the animation. It is a generator function that yields and resumes with specific types, returning the current time.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: get_current_time\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityDetails Class in Python\nDESCRIPTION: Class containing security details about a request including protocol, cipher, certificate information and transparency compliance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SecurityDetails(protocol, key_exchange, cipher, certificate_id, subject_name, san_list, issuer, valid_from, valid_to, signed_certificate_timestamp_list, certificate_transparency_compliance, encrypted_client_hello, key_exchange_group=None, mac=None, server_signature_algorithm=None):\n    protocol: str                     # Protocol name\n    key_exchange: str                 # Key Exchange used\n    cipher: str                       # Cipher name\n    certificate_id: CertificateId     # Certificate ID\n    subject_name: str                 # Certificate subject name\n    san_list: List[str]              # SAN DNS names and IPs\n    issuer: str                      # Issuing CA name\n```\n\n----------------------------------------\n\nTITLE: Enabling Pressure Source Override in Python\nDESCRIPTION: Experimental method to override a pressure source for the Compute Pressure API. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef set_pressure_source_override_enabled(enabled, source, metadata=None):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Enable Command in Python\nDESCRIPTION: Generator function that enables storage tracking, allowing storage events to be delivered to the client.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n\nEnables storage tracking, storage events will now be delivered to the client.\n\n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Retrieving JavaScript Heap Usage\nDESCRIPTION: Experimental function to get JavaScript heap usage statistics for the entire isolate. Returns used and total heap size in bytes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nget_heap_usage()\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Cache in Python\nDESCRIPTION: This function clears the browser cache. It returns a generator that yields nothing and completes the operation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/network.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef clear_browser_cache() -> Generator[Dict[str, Any], Dict[str, Any], None]: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Class in Python\nDESCRIPTION: Defines the Layer class representing information about a compositing layer, including properties like layer ID, offset, dimensions, and various optional attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Layer(layer_id, offset_x, offset_y, width, height, paint_count, draws_content, parent_layer_id=None, backend_node_id=None, transform=None, anchor_x=None, anchor_y=None, anchor_z=None, invisible=None, scroll_rects=None, sticky_position_constraint=None):\n    \"\"\"Information about a compositing layer.\"\"\"\n\n    layer_id : LayerId\n        \"\"\"The unique id for this layer.\"\"\"\n\n    offset_x : float\n        \"\"\"Offset from parent layer, X coordinate.\"\"\"\n\n    offset_y : float\n        \"\"\"Offset from parent layer, Y coordinate.\"\"\"\n\n    width : float\n        \"\"\"Layer width.\"\"\"\n\n    height : float\n        \"\"\"Layer height.\"\"\"\n\n    paint_count : int\n        \"\"\"Indicates how many time this layer has painted.\"\"\"\n\n    draws_content : bool\n        \"\"\"Indicates whether this layer hosts any content, rather than being used for\n        transform/scrolling purposes only.\"\"\"\n\n    parent_layer_id : Optional[LayerId] = None\n        \"\"\"The id of parent (not present for root).\"\"\"\n\n    backend_node_id : Optional[BackendNodeId] = None\n        \"\"\"The backend id for the node associated with this layer.\"\"\"\n\n    transform : Optional[List[float]] = None\n        \"\"\"Transformation matrix for layer, default is identity matrix\"\"\"\n\n    anchor_x : Optional[float] = None\n        \"\"\"Transform anchor point X, absent if no transform specified\"\"\"\n\n    anchor_y : Optional[float] = None\n        \"\"\"Transform anchor point Y, absent if no transform specified\"\"\"\n\n    anchor_z : Optional[float] = None\n        \"\"\"Transform anchor point Z, absent if no transform specified\"\"\"\n\n    invisible : Optional[bool] = None\n        \"\"\"Set if layer is not visible.\"\"\"\n\n    scroll_rects : Optional[List[ScrollRect]] = None\n        \"\"\"Rectangles scrolling on main thread only.\"\"\"\n\n    sticky_position_constraint : Optional[StickyPositionConstraint] = None\n        \"\"\"Sticky position constraint information\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Disable Command in Python\nDESCRIPTION: Generator function that disables storage tracking and prevents storage events from being sent to the client.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n\nDisables storage tracking, prevents storage events from being sent to the client.\n\n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Streaming Resource Content in NoDriver\nDESCRIPTION: Experimental method for enabling streaming of the response for a given request. When enabled, data received events will contain streaming data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nstream_resource_content(request_id)\n```\n\n----------------------------------------\n\nTITLE: Documenting Runtime Domain Classes\nDESCRIPTION: Sphinx documentation directives for various Runtime domain classes like ScriptId, RemoteObject, etc. Uses autoclass directive to automatically generate class documentation while excluding certain methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/runtime.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ScriptId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting DOM Event Listener Breakpoint in Python\nDESCRIPTION: This method sets a breakpoint on a particular DOM event. It takes the event name as a required parameter and an optional target name. It returns a Generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef set_event_listener_breakpoint(event_name, target_name=None):\n    # Implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: User Agent Override Method\nDESCRIPTION: Method to override browser user agent with custom string. Supports language, platform and metadata configuration.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef set_user_agent_override(user_agent: str, accept_language: Optional[str] = None, platform: Optional[str] = None, user_agent_metadata: Optional[UserAgentMetadata] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining Web Authentication Events in Python\nDESCRIPTION: This section defines several event classes related to credential management in Web Authentication. These events are triggered for various credential operations like addition, deletion, update, and assertion.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nclass CredentialAdded:\n    def __init__(self, authenticator_id, credential):\n        self.authenticator_id = authenticator_id\n        self.credential = credential\n\nclass CredentialDeleted:\n    def __init__(self, authenticator_id, credential_id):\n        self.authenticator_id = authenticator_id\n        self.credential_id = credential_id\n\nclass CredentialUpdated:\n    def __init__(self, authenticator_id, credential):\n        self.authenticator_id = authenticator_id\n        self.credential = credential\n\nclass CredentialAsserted:\n    def __init__(self, authenticator_id, credential):\n        self.authenticator_id = authenticator_id\n        self.credential = credential\n```\n\n----------------------------------------\n\nTITLE: Defining DragData Class in Python\nDESCRIPTION: Class that represents the full data for a drag operation, including the items being dragged, allowed operations, and optional file information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DragData(items, drag_operations_mask, files=None)\n```\n\n----------------------------------------\n\nTITLE: Defining RuleSet Class in Python for Preload CDP Domain\nDESCRIPTION: This class represents a SpeculationRuleSet with properties for id, loader_id, source_text, and optional fields for backend_node_id, url, request_id, error_type, and error_message. It includes detailed documentation for each field.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass RuleSet(id_, loader_id, source_text, backend_node_id=None, url=None, request_id=None, error_type=None, error_message=None):\n\n    id_ : RuleSetId\n\n    loader_id : LoaderId\n    # Identifies a document which the rule set is associated with.\n\n    source_text : str\n    # Source text of JSON representing the rule set. If it comes from\n    # `<script>` tag, it is the textContent of the node. Note that it is\n    # a JSON for valid case.\n    #\n    # See also:\n    # - https://wicg.github.io/nav-speculation/speculation-rules.html\n    # - https://github.com/WICG/nav-speculation/blob/main/triggers.md\n\n    backend_node_id : Optional[BackendNodeId] = None\n    # A speculation rule set is either added through an inline\n    # `<script>` tag or through an external resource via the\n    # 'Speculation-Rules' HTTP header. For the first case, we include\n    # the BackendNodeId of the relevant `<script>` tag. For the second\n    # case, we include the external URL where the rule set was loaded\n    # from, and also RequestId if Network domain is enabled.\n    #\n    # See also:\n    # - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n    # - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header\n\n    url : Optional[str] = None\n\n    request_id : Optional[RequestId] = None\n\n    error_type : Optional[RuleSetErrorType] = None\n    # Error information\n    # `errorMessage` is null iff `errorType` is null.\n\n    error_message : Optional[str] = None\n    # Replace this property with structured error.\n    # Type: TODO(https://crbug.com/1425354)\n```\n\n----------------------------------------\n\nTITLE: Implementing clear_device_metrics_override Command in Python\nDESCRIPTION: Defines a generator function to clear overridden device metrics in the emulation environment.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef clear_device_metrics_override():\n    \"\"\"Clears the overridden device metrics.\"\"\"\n    # Implementation details omitted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Credential Properties - Python\nDESCRIPTION: Configures credential properties including backup eligibility and state for a specific credential.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef set_credential_properties(authenticator_id, credential_id, backup_eligibility=None, backup_state=None)\n```\n\n----------------------------------------\n\nTITLE: Getting App Manifest Data in Python using CDP\nDESCRIPTION: Method to retrieve the processed manifest for the current document. Takes an optional manifest_id parameter and returns manifest location, errors, content and parsed properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef get_app_manifest(manifest_id=None):\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Remove Item Command in Python\nDESCRIPTION: Generator function that removes a specific item from DOM storage identified by key.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef remove_dom_storage_item(storage_id, key):\n\n* **Parameters:**\n  * **storage_id** ([`StorageId`](#nodriver.cdp.dom_storage.StorageId)) – \n  * **key** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Service Worker Control Methods\nDESCRIPTION: Core API methods for managing service worker lifecycle including starting, stopping, registration and updates. All methods return Generator objects containing dictionaries of string keys and any values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef skip_waiting(scope_url: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef start_worker(scope_url: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef stop_all_workers() -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef stop_worker(version_id: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef unregister(scope_url: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef update_registration(scope_url: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Removing Extension Storage Items in CDP\nDESCRIPTION: Command function to remove specific keys from extension storage in a given storage area. Takes an extension ID, storage area, and a list of keys to remove.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef remove_storage_items(id_, storage_area, keys):\n    \"\"\"Removes `keys` from extension storage in the given `storageArea`.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Target Auto-Attach Configuration: set_auto_attach\nDESCRIPTION: Controls automatic attachment to related targets. Parameters control auto-attach behavior, debugger pausing, and filtering of targets.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndef set_auto_attach(auto_attach, wait_for_debugger_on_start, flatten=None, filter_=None)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Families in Python using NoDriver CDP\nDESCRIPTION: This experimental method sets generic font families. It takes font_families and an optional for_scripts parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndef set_font_families(font_families, for_scripts=None):\n    \"\"\"Set generic font families.\n\n    Parameters:\n      font_families (FontFamilies): Specifies font families to set. If a font family is not specified, it won't be changed.\n      for_scripts (Optional[List[ScriptFontFamilies]]): Specifies font families to set for individual scripts.\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: IndexedDB Command Functions\nDESCRIPTION: Generator functions for interacting with IndexedDB, including operations like clearing stores, deleting databases, managing entries, and retrieving metadata. Each command yields and accepts specific argument types while returning operation-specific results.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/indexed_db.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_object_store(): ...\ndef delete_database(): ...\ndef delete_object_store_entries(): ...\ndef disable(): ...\ndef enable(): ...\ndef get_metadata(): ...\ndef request_data(): ...\ndef request_database(): ...\ndef request_database_names(): ...\n```\n\n----------------------------------------\n\nTITLE: Defining FrameId Class in Python for CDP Page Domain\nDESCRIPTION: Defines the FrameId class as a unique frame identifier for the Page domain in CDP.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FrameId:\n    \"\"\"Unique frame identifier.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugger in Python\nDESCRIPTION: This function enables the debugger for a given page. It accepts an optional parameter for setting the maximum size of the scripts cache. Returns a generator that yields a unique identifier for the debugger.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef enable(max_scripts_cache_size: Optional[float] = None) -> Generator[Dict[str, Any], Dict[str, Any], UniqueDebuggerId]:\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerQueryHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting container query containers, including a container query container highlight config and node ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nclass ContainerQueryHighlightConfig(container_query_container_highlight_config, node_id):\n\n    container_query_container_highlight_config: ContainerQueryContainerHighlightConfig\n\n    node_id: NodeId\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Clear Command in Python\nDESCRIPTION: Generator function that implements the clear command for DOM Storage, which removes all items from the specified storage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef clear(storage_id):\n\n* **Parameters:**\n  **storage_id** ([`StorageId`](#nodriver.cdp.dom_storage.StorageId)) – \n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Virtual Time Policy Control Method\nDESCRIPTION: Experimental method to enable virtual time for all frames, replacing real-time with synthetic time source.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef set_virtual_time_policy(policy: VirtualTimePolicy, budget: Optional[float] = None, max_virtual_time_task_starvation_count: Optional[int] = None, initial_virtual_time: Optional[TimeSinceEpoch] = None) -> Generator[Dict[str, Any], Dict[str, Any], float]\n```\n\n----------------------------------------\n\nTITLE: Documenting Runtime Domain Events\nDESCRIPTION: Documentation for Runtime domain events using Sphinx autoclass directive. Events represent various runtime occurrences like binding calls, console API calls, and execution context changes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/runtime.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: BindingCalled\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting Instrumentation Breakpoint in Python\nDESCRIPTION: Method to set an instrumentation breakpoint. Takes an instrumentation name as input and returns a Generator containing the breakpoint ID for future reference.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef set_instrumentation_breakpoint(instrumentation: str) -> Generator[Dict[str, Any], Dict[str, Any], BreakpointId]\n```\n\n----------------------------------------\n\nTITLE: Extension Commands Documentation in CDP\nDESCRIPTION: Lists the available commands in the Extensions domain including clear_storage_items, get_storage_items, load_unpacked, remove_storage_items, set_storage_items, and uninstall.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/extensions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: clear_storage_items\n\n.. autofunction:: get_storage_items\n\n.. autofunction:: load_unpacked\n\n.. autofunction:: remove_storage_items\n\n.. autofunction:: set_storage_items\n\n.. autofunction:: uninstall\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Node Timing in Python\nDESCRIPTION: Function to set the timing of an animation node. It takes animation_id, duration, and delay as parameters, and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef set_timing(animation_id, duration, delay):\n    \"\"\"Sets the timing of an animation node.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Location Class in Python for CDP Debugger\nDESCRIPTION: Defines the Location class representing a location in the source code. It includes script identifier, line number, and optional column number.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Location(script_id, line_number, column_number=None):\n    \"\"\"Location in the source code.\"\"\"\n\n    script_id: ScriptId\n    \"\"\"Script identifier as reported in the `Debugger.scriptParsed`.\"\"\"\n\n    line_number: int\n    \"\"\"Line number in the script (0-based).\"\"\"\n\n    column_number: Optional[int] = None\n    \"\"\"Column number in the script (0-based).\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Preload Command Generators\nDESCRIPTION: Defines generator functions for enabling and disabling preload functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef disable() -> Generator[Dict[str, Any], Dict[str, Any], None]: pass\n\ndef enable() -> Generator[Dict[str, Any], Dict[str, Any], None]: pass\n```\n\n----------------------------------------\n\nTITLE: Cached Response Type Enumeration in CDP Cache Storage\nDESCRIPTION: Enumeration class defining the types of HTTP responses that can be cached, such as basic, CORS, default, error, opaqueResponse, and opaqueRedirect.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CachedResponseType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    \"\"\"type of HTTP response cached\n\n    #### BASIC *= 'basic'*\n\n    #### CORS *= 'cors'*\n\n    #### DEFAULT *= 'default'*\n\n    #### ERROR *= 'error'*\n\n    #### OPAQUE_RESPONSE *= 'opaqueResponse'*\n\n    #### OPAQUE_REDIRECT *= 'opaqueRedirect'*\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling All Event Breakpoints in Python\nDESCRIPTION: A generator function that removes all breakpoints in the EventBreakpoints domain. Returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/event_breakpoints.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    # Removes all breakpoints\n    \n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Credentials - Python\nDESCRIPTION: Returns all credentials stored in a specified virtual authenticator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_credentials(authenticator_id)\n```\n\n----------------------------------------\n\nTITLE: Web App Manifest Main Class Definition\nDESCRIPTION: Comprehensive WebAppManifest class that defines all possible manifest properties including background color, icons, file handlers, and more. Includes type hints and documentation for non-standard fields.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass WebAppManifest(background_color=None, description=None, dir_=None, display=None, display_overrides=None, file_handlers=None, icons=None, id_=None, lang=None, launch_handler=None, name=None, orientation=None, prefer_related_applications=None, protocol_handlers=None, related_applications=None, scope=None, scope_extensions=None, screenshots=None, share_target=None, short_name=None, shortcuts=None, start_url=None, theme_color=None):\n    background_color: Optional[str] = None\n    description: Optional[str] = None\n    dir_: Optional[str] = None\n    display: Optional[str] = None\n    # Additional properties omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Get Media Queries Function Signature\nDESCRIPTION: Function that returns all media queries parsed by the rendering engine.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef get_media_queries() -> Generator[Dict[str, Any], Dict[str, Any], List[CSSMedia]]\n```\n\n----------------------------------------\n\nTITLE: Managing Attribution Reports\nDESCRIPTION: Methods for handling Attribution Reports including immediate sending of pending reports and configuring testing mode.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef send_pending_attribution_reports() -> Generator[Dict[str, Any], Dict[str, Any], int]\n\ndef set_attribution_reporting_local_testing_mode(enabled: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef set_attribution_reporting_tracking(enable: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Cached Response Class in CDP Cache Storage\nDESCRIPTION: Class representing a cached response with a body property containing the base64-encoded entry content.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CachedResponse(body):\n    \"\"\"Cached response\n\n    #### body *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    Entry content, base64-encoded. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining FrameResource Class for Web Page Resources in Python\nDESCRIPTION: This class represents a resource associated with a frame on a web page. It includes information about the resource's URL, type, MIME type, and loading status. It is used to analyze individual resources within a frame.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass FrameResource(url, type_, mime_type, last_modified=None, content_size=None, failed=None, canceled=None):\n\n    Information about the Resource on the page.\n\n    url : str\n        Resource URL.\n\n    type_ : ResourceType\n        Type of this resource.\n\n    mime_type : str\n        Resource mimeType as determined by the browser.\n\n    last_modified : Optional[TimeSinceEpoch] = None\n        last-modified timestamp as reported by server.\n\n    content_size : Optional[float] = None\n        Resource content size.\n\n    failed : Optional[bool] = None\n        True if the resource failed to load.\n\n    canceled : Optional[bool] = None\n        True if the resource was canceled during loading.\n```\n\n----------------------------------------\n\nTITLE: Modifying Return Value in Python\nDESCRIPTION: Experimental method to change the return value in the top frame at a return break position. Takes a new return value parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef set_return_value(new_value: CallArgument) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Response Body Interception Stream Handler - Python\nDESCRIPTION: Experimental function that returns a stream handle for intercepted response bodies. The stream only supports sequential reads and requires either cancellation or providing a response body after use.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef take_response_body_for_interception_as_stream(interception_id):\n    # Returns Generator[Dict[str, Any], Dict[str, Any], StreamHandle]\n```\n\n----------------------------------------\n\nTITLE: Python Attribution Reporting Core Classes\nDESCRIPTION: Core classes for managing attribution reporting including aggregation keys, event report windows, and trigger specifications\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AttributionReportingAggregationKeysEntry:\n    def __init__(self, key: str, value: UnsignedInt128AsBase16):\n        self.key = key\n        self.value = value\n\nclass AttributionReportingEventReportWindows:\n    def __init__(self, start: int, ends: List[int]):\n        self.start = start\n        self.ends = ends\n\nclass AttributionReportingTriggerSpec:\n    def __init__(self, trigger_data: List[float], event_report_windows: AttributionReportingEventReportWindows):\n        self.trigger_data = trigger_data\n        self.event_report_windows = event_report_windows\n```\n\n----------------------------------------\n\nTITLE: Loading Browser Cookies in Python\nDESCRIPTION: Shows how to load previously saved browser cookies from a file. By default, cookies are loaded from '.session.dat' if no filepath is specified.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/classes/browser.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# load. when no filepath is given, it is loaded from '.session.dat'\nawait browser.cookies.load()\n```\n\n----------------------------------------\n\nTITLE: Defining InspectMode Enumeration in Python\nDESCRIPTION: Enumeration class defining different inspection modes for the overlay system including node search, shadow DOM search, screenshot capture, and distance display.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass InspectMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    SEARCH_FOR_NODE = 'searchForNode'\n    SEARCH_FOR_UA_SHADOW_DOM = 'searchForUAShadowDOM'\n    CAPTURE_AREA_SCREENSHOT = 'captureAreaScreenshot'\n    SHOW_DISTANCES = 'showDistances'\n    NONE = 'none'\n```\n\n----------------------------------------\n\nTITLE: Implementing stop_observing command for CDP Background Service\nDESCRIPTION: A generator function that disables event updates for a specific background service. Takes a ServiceName parameter to specify which service to stop observing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef stop_observing(service):\n    \"\"\"\n    Disables event updates for the service.\n    \"\"\"\n    # Parameters:\n    #   service (ServiceName): \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Setting Accepted Encodings in Python\nDESCRIPTION: Shows how to set accepted content encodings using the set_accepted_encodings command. This function takes a list of ContentEncoding values as an argument.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/network.rst.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nyield from network.set_accepted_encodings([network.ContentEncoding.GZIP, network.ContentEncoding.BR])\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerError Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerError class with error_type, code, stack, cause, and data attributes, corresponding to kMediaError.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerError(error_type, code, stack, cause, data)\n```\n\n----------------------------------------\n\nTITLE: Process Information Retrieval in Python\nDESCRIPTION: Function that returns information about all running processes as a Generator. The return type is a Generator of Dictionaries containing process information blocks. Each dictionary maps strings to Any type values, and the final output is a List of ProcessInfo objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_process_info() -> Generator[Dict[str, Any], Dict[str, Any], List[ProcessInfo]]:\n    \"\"\"Returns information about all running processes.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Layout Viewport Class Definition in Python\nDESCRIPTION: Defines a class to represent layout viewport position and dimensions with page coordinates and client dimensions in CSS pixels.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass LayoutViewport(page_x, page_y, client_width, client_height):\n    # Horizontal offset relative to the document (CSS pixels)\n    page_x: int\n    # Vertical offset relative to the document (CSS pixels)\n    page_y: int\n    # Width (CSS pixels), excludes scrollbar if present\n    client_width: int\n    # Height (CSS pixels), excludes scrollbar if present\n    client_height: int\n```\n\n----------------------------------------\n\nTITLE: AddScriptToEvaluateOnLoad Command Implementation in Python\nDESCRIPTION: Deprecated function to add scripts for evaluation on page load. Returns a script identifier. This has been replaced by addScriptToEvaluateOnNewDocument since version 1.3.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef add_script_to_evaluate_on_load(script_source):\n    \"\"\"\n    Deprecated, please use addScriptToEvaluateOnNewDocument instead.\n\n    #### Deprecated\n    Deprecated since version 1.3.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      **script_source** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`ScriptIdentifier`](#nodriver.cdp.page.ScriptIdentifier)]\n    * **Returns:**\n      Identifier of the added script.\n\n    #### Deprecated\n    Deprecated since version 1.3.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Opening Current Page in Web App (Python)\nDESCRIPTION: This function opens the current page in a web app identified by the manifest ID. It returns immediately without waiting for the app to finish loading. The function takes a manifest_id as a string parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/pwa.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef open_current_page_in_app(manifest_id: str) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Defining Optional ExecutionContextId Parameter in NoDriver CDP Runtime Module\nDESCRIPTION: Defines the execution_context_id parameter that identifies the context where a call was made. It's an Optional type that references the ExecutionContextId type from the NoDriver CDP runtime module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nexecution_context_id *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`ExecutionContextId`](#nodriver.cdp.runtime.ExecutionContextId)]\n```\n\n----------------------------------------\n\nTITLE: Track Computed Style Updates For Node Method\nDESCRIPTION: Experimental method that tracks computed style updates for a specific node. Takes an optional node ID parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ntrack_computed_style_updates_for_node(node_id=None)\n```\n\n----------------------------------------\n\nTITLE: Hiding DOM Highlights in NoDriver Python API\nDESCRIPTION: A generator function that hides any highlighted elements in the DOM. Returns dictionary objects containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\ndef hide_highlight():\n    \"\"\"Hides any highlight.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Getting Target Information in Python\nDESCRIPTION: Retrieves information about a specific target using its ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nget_target_info(target_id=None)\n```\n\n----------------------------------------\n\nTITLE: Highlighting Rectangle Areas in NoDriver Python API\nDESCRIPTION: A generator function that highlights a specified rectangular area on the page. Returns dictionary objects containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\ndef highlight_rect():\n    \"\"\"Highlights given rectangle.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Compiling Scripts with Runtime API in Python\nDESCRIPTION: Method that compiles a given expression with optional persistence and execution context. Returns script ID and exception details. Takes expression string, source URL, persistence flag, and optional execution context ID as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef compile_script(expression, source_url, persist_script, execution_context_id=None)\n```\n\n----------------------------------------\n\nTITLE: QuirksModeIssueDetails Class Definition\nDESCRIPTION: Class representing details for issues about documents in Quirks Mode or Limited Quirks Mode that affects page layouting. Contains fields for quirks mode status, document node ID, URL, frame ID and loader ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass QuirksModeIssueDetails(is_limited_quirks_mode, document_node_id, url, frame_id, loader_id):\n    is_limited_quirks_mode: bool\n    document_node_id: BackendNodeId\n    url: str\n    frame_id: FrameId\n    loader_id: LoaderId\n```\n\n----------------------------------------\n\nTITLE: Setting RPH Registration Mode in Python\nDESCRIPTION: Sets the RPH (Registered Protocol Handler) registration mode. This is an experimental feature related to Custom Handlers API.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ndef set_rph_registration_mode(mode: AutoResponseMode) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Search Results\nDESCRIPTION: Experimental function to get search results within a specified index range for a given search session.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef get_search_results(search_id, from_index, to_index)\n```\n\n----------------------------------------\n\nTITLE: Fetching AX Node and Ancestors in CDP with Python\nDESCRIPTION: This experimental command fetches a node and all ancestors up to and including the root. It requires enable() to have been called previously and supports targeting nodes by node_id, backend_node_id, or object_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_ax_node_and_ancestors(node_id=None, backend_node_id=None, object_id=None):\n    \"\"\"\n    Fetches a node and all ancestors up to and including the root.\n    Requires `enable()` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **node_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`NodeId`](dom.md#nodriver.cdp.dom.NodeId)]) –  *(Optional)* Identifier of the node to get.\n      * **backend_node_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`BackendNodeId`](dom.md#nodriver.cdp.dom.BackendNodeId)]) –  *(Optional)* Identifier of the backend node to get.\n      * **object_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`RemoteObjectId`](runtime.md#nodriver.cdp.runtime.RemoteObjectId)]) –  *(Optional)* JavaScript object id of the node wrapper to get.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], List[AXNode]]\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Usage and Quota Information\nDESCRIPTION: Gets storage usage and quota information for a specified security origin. Returns usage in bytes, quota limits, override status, and detailed usage breakdown by type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_usage_and_quota(origin: str) -> Generator[Dict[str, Any], Dict[str, Any], Tuple[float, float, bool, List[UsageForType]]]\n```\n\n----------------------------------------\n\nTITLE: Creating AdFrameExplanation Enum in Python for CDP Page Domain\nDESCRIPTION: Implements the AdFrameExplanation enum to provide reasons for identifying a frame as an ad, including PARENT_IS_AD, CREATED_BY_AD_SCRIPT, and MATCHED_BLOCKING_RULE.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AdFrameExplanation(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    PARENT_IS_AD = 'ParentIsAd'\n    CREATED_BY_AD_SCRIPT = 'CreatedByAdScript'\n    MATCHED_BLOCKING_RULE = 'MatchedBlockingRule'\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenOrientation Type in Python\nDESCRIPTION: Defines a ScreenOrientation class with type and angle attributes to represent screen orientation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ScreenOrientation(type_, angle):\n    type_ : str  # Orientation type\n    angle : int  # Orientation angle\n```\n\n----------------------------------------\n\nTITLE: Delete Storage Bucket - Python\nDESCRIPTION: Function to delete a Storage Bucket using its storage key and bucket name. Takes a StorageBucket parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef delete_storage_bucket(bucket: StorageBucket) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerEventsAdded Event Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerEventsAdded event class with player_id and events attributes, used to send a list of events in chronological order.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerEventsAdded(player_id, events)\n```\n\n----------------------------------------\n\nTITLE: Python FileSystem Class Definitions\nDESCRIPTION: Core class definitions for the FileSystem domain including File, Directory, and BucketFileSystemLocator classes. These classes are used for file system operations and are typically instantiated by the API rather than directly.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/file_system.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass File:\n    pass\n\nclass Directory:\n    pass\n\nclass BucketFileSystemLocator:\n    pass\n\ndef get_directory() -> Generator:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Device Orientation Override in CDP\nDESCRIPTION: Command that overrides the Device Orientation with mock alpha, beta, and gamma values. Takes three float parameters and returns a Generator that yields and accepts Dict[str, Any] and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/device_orientation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nset_device_orientation_override(alpha, beta, gamma)\n```\n\n----------------------------------------\n\nTITLE: Type Classes Documentation\nDESCRIPTION: Documentation blocks for various input-related type classes including TouchPoint, GestureSourceType, MouseButton, TimeSinceEpoch, DragDataItem, and DragData.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/input_.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: TouchPoint\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: GestureSourceType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: MouseButton\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: TimeSinceEpoch\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DragDataItem\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DragData\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Python Attribution Reporting Filter Classes\nDESCRIPTION: Classes for defining attribution reporting filters and configurations including filter entries, lookback windows, and filter pairs\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AttributionReportingFilterDataEntry:\n    def __init__(self, key: str, values: List[str]):\n        self.key = key\n        self.values = values\n\nclass AttributionReportingFilterConfig:\n    def __init__(self, filter_values: List[AttributionReportingFilterDataEntry], lookback_window: Optional[int] = None):\n        self.filter_values = filter_values\n        self.lookback_window = lookback_window\n\nclass AttributionReportingFilterPair:\n    def __init__(self, filters: List[AttributionReportingFilterConfig], not_filters: List[AttributionReportingFilterConfig]):\n        self.filters = filters\n        self.not_filters = not_filters\n```\n\n----------------------------------------\n\nTITLE: Cache Storage Content Updated Event Class in Python\nDESCRIPTION: Event class that represents updates to a cache's contents. Contains properties for origin, storage key, bucket ID, and cache name that were modified.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass CacheStorageContentUpdated(origin, storage_key, bucket_id, cache_name)\n```\n\n----------------------------------------\n\nTITLE: Starting Memory Sampling in Python\nDESCRIPTION: Method to initiate native memory profile collection with optional sampling interval and randomness control. Returns a Generator that yields dictionaries containing sampling data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef start_sampling(sampling_interval=None, suppress_randomness=None)\n```\n\n----------------------------------------\n\nTITLE: Disabling Network Tracking in Python\nDESCRIPTION: Disables network tracking functionality which prevents network events from being sent to the client. This method is used when network monitoring is no longer needed.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndisable()\n```\n\n----------------------------------------\n\nTITLE: Profile Management Methods in CDP\nDESCRIPTION: Methods for managing profiling operations including stop() which returns recorded profile data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef stop():\n    \"\"\"Stop profiling and return recorded profile data.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: CDP DragIntercepted Event Class Definition\nDESCRIPTION: Event class for handling intercepted drag events when Input.setInterceptDrags is enabled. Contains drag event data that can be used with Input.dispatchDragEvent.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass DragIntercepted(data):\n```\n\n----------------------------------------\n\nTITLE: Navigation and Cache Enums in Python\nDESCRIPTION: Enum definitions for navigation types, auto-response modes, and back-forward cache restoration reasons. Includes comprehensive list of possible values and their string representations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass AutoResponseMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NONE = 'none'\n    AUTO_ACCEPT = 'autoAccept'\n    AUTO_REJECT = 'autoReject'\n    AUTO_OPT_OUT = 'autoOptOut'\n\nclass NavigationType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NAVIGATION = 'Navigation'\n    BACK_FORWARD_CACHE_RESTORE = 'BackForwardCacheRestore'\n\nclass BackForwardCacheNotRestoredReason(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NOT_PRIMARY_MAIN_FRAME = 'NotPrimaryMainFrame'\n    BACK_FORWARD_CACHE_DISABLED = 'BackForwardCacheDisabled'\n    # Additional reasons omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Command Functions Documentation\nDESCRIPTION: Documentation blocks for input-related command functions including drag handling, key events, mouse events, touch events, and gesture synthesis.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/input_.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: cancel_dragging\n\n.. autofunction:: dispatch_drag_event\n\n.. autofunction:: dispatch_key_event\n\n.. autofunction:: dispatch_mouse_event\n\n.. autofunction:: dispatch_touch_event\n\n.. autofunction:: emulate_touch_from_mouse_event\n\n.. autofunction:: ime_set_composition\n\n.. autofunction:: insert_text\n\n.. autofunction:: set_ignore_input_events\n\n.. autofunction:: set_intercept_drags\n\n.. autofunction:: synthesize_pinch_gesture\n\n.. autofunction:: synthesize_scroll_gesture\n\n.. autofunction:: synthesize_tap_gesture\n```\n\n----------------------------------------\n\nTITLE: Setting Download Behavior in Python using NoDriver CDP\nDESCRIPTION: This deprecated method sets the behavior when downloading a file. It takes behavior and an optional download_path as parameters and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndef set_download_behavior(behavior, download_path=None):\n    \"\"\"Set the behavior when downloading a file.\n\n    Parameters:\n      behavior (str): Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny).\n      download_path (Optional[str]): The default path to save downloaded files to. This is required if behavior is set to 'allow'\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Discarding Search Results in DOM API\nDESCRIPTION: Method to discard search results from a session using a unique search identifier. Returns a Generator of Dict objects containing string keys and Any values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef discard_search_results(search_id):\n    # Discards search results from the session with the given id\n    pass\n```\n\n----------------------------------------\n\nTITLE: Replaying XMLHttpRequest in Python\nDESCRIPTION: This method sends a new XMLHttpRequest identical to the original one, maintaining all original parameters. It is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef replay_xhr(request_id):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Permission for Origin\nDESCRIPTION: This experimental function sets permission settings for a given origin or all origins if not specified. It allows overriding permissions in a specific browser context. Returns a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef set_permission(permission, setting, origin=None, browser_context_id=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Defining ContentSecurityPolicyViolationType Enum in Python\nDESCRIPTION: This enum lists various types of Content Security Policy violations, including inline, eval, and URL violations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass ContentSecurityPolicyViolationType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    K_INLINE_VIOLATION = 'kInlineViolation'\n\n    K_EVAL_VIOLATION = 'kEvalViolation'\n\n    K_URL_VIOLATION = 'kURLViolation'\n\n    K_TRUSTED_TYPES_SINK_VIOLATION = 'kTrustedTypesSinkViolation'\n\n    K_TRUSTED_TYPES_POLICY_VIOLATION = 'kTrustedTypesPolicyViolation'\n\n    K_WASM_EVAL_VIOLATION = 'kWasmEvalViolation'\n```\n\n----------------------------------------\n\nTITLE: NavigatorUserAgentIssueDetails Class Definition\nDESCRIPTION: Class for handling navigator user agent related issues. Contains URL and optional source code location.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass NavigatorUserAgentIssueDetails(url, location=None):\n    url: str\n    location: Optional[SourceCodeLocation] = None\n```\n\n----------------------------------------\n\nTITLE: Defining FlexContainerHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing configuration data for highlighting Flex container elements. It includes optional parameters for customizing various aspects of the flex container visualization.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FlexContainerHighlightConfig(container_border=None, line_separator=None, item_separator=None, main_distributed_space=None, cross_distributed_space=None, row_gap_space=None, column_gap_space=None, cross_alignment=None):\n    \"\"\"Configuration data for the highlighting of Flex container elements.\"\"\"\n\n    # ... (property definitions omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Defining Web App Manifest Classes in Python\nDESCRIPTION: Core classes for representing web app manifest components including RelatedApplication, Screenshot, ShareTarget, and Shortcut. Each class defines properties for manifest attributes with type hints.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass RelatedApplication(url, id_=None):\n    url: str\n    id_: Optional[str] = None\n\nclass Screenshot(image, form_factor, label=None):\n    image: ImageResource\n    form_factor: str\n    label: Optional[str] = None\n\nclass ShareTarget(action, method, enctype, title=None, text=None, url=None, files=None):\n    action: str\n    method: str\n    enctype: str\n    title: Optional[str] = None\n    text: Optional[str] = None\n    url: Optional[str] = None\n    files: Optional[List[FileFilter]] = None\n\nclass Shortcut(name, url):\n    name: str\n    url: str\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityStateExplanation Class in Python\nDESCRIPTION: This class provides an explanation of factors contributing to the security state of a page. It includes properties like security state, title, summary, and certificate information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SecurityStateExplanation(security_state, title, summary, description, mixed_content_type, certificate, recommendations=None):\n    # ... property definitions ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining TracingComplete Event Class in Python\nDESCRIPTION: Defines the TracingComplete event class with attributes for data loss, stream handle, trace format, and stream compression. Signals the end of tracing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TracingComplete(data_loss_occurred, stream, trace_format, stream_compression):\n    data_loss_occurred: bool\n    stream: Optional[StreamHandle]\n    trace_format: Optional[StreamFormat]\n    stream_compression: Optional[StreamCompression]\n```\n\n----------------------------------------\n\nTITLE: Implementing stop_violations_report Command for Violation Reporting\nDESCRIPTION: Generator function that stops violation reporting that was previously started.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef stop_violations_report():\n    \"\"\"Stop violation reporting.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Setting Inspected Node in Python\nDESCRIPTION: Enables console to refer to a node with a given id via $x command line API. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\ndef set_inspected_node(node_id):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthn AuthenticatorTransport Enum\nDESCRIPTION: Enumerates the possible transport methods for virtual authenticators including USB, NFC, BLE, CABLE and INTERNAL.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AuthenticatorTransport:\n    USB = 'usb'\n    NFC = 'nfc'\n    BLE = 'ble'\n    CABLE = 'cable'\n    INTERNAL = 'internal'\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Control Commands in Python\nDESCRIPTION: Generator functions for controlling overlay behavior including enable/disable functionality and highlight manipulation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables domain notifications.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef enable():\n    \"\"\"Enables domain notifications.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef hide_highlight():\n    \"\"\"Hides any highlight.\"\"\"\n    return Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining AXNode Class Structure in Python\nDESCRIPTION: Python class representing a node in the accessibility tree with properties like ID, role, name, and relationships to other nodes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AXNode(node_id, ignored, ignored_reasons=None, role=None, chrome_role=None, name=None, description=None, value=None, properties=None, parent_id=None, child_ids=None, backend_dom_node_id=None, frame_id=None):\n    node_id: AXNodeId\n    ignored: bool\n    ignored_reasons: Optional[List[AXProperty]] = None\n    role: Optional[AXValue] = None\n    chrome_role: Optional[AXValue] = None\n    name: Optional[AXValue] = None\n    description: Optional[AXValue] = None\n    value: Optional[AXValue] = None\n    properties: Optional[List[AXProperty]] = None\n    parent_id: Optional[AXNodeId] = None\n```\n\n----------------------------------------\n\nTITLE: Defining the TargetCrashed Event Class in CDP Inspector Domain\nDESCRIPTION: Event class that fires when the debugging target has crashed. This class has no parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/inspector.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n### *class* TargetCrashed\n\nFired when debugging target has crashed\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Pause State in Python using CDP\nDESCRIPTION: This function sets the paused state of animations. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: set_paused\n```\n\n----------------------------------------\n\nTITLE: Enabling Inspector Domain Notifications in CDP\nDESCRIPTION: A generator function that enables notifications from the Inspector domain in Chrome DevTools Protocol. Returns None and operates with dictionary arguments containing string keys and any values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/inspector.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n### enable()\n\nEnables inspector domain notifications.\n\n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Request Interception Stage Enumeration in Python\nDESCRIPTION: Defines the InterceptionStage enum class for specifying at which stage request interception should occur.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass InterceptionStage(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    REQUEST = 'Request'\n    HEADERS_RECEIVED = 'HeadersReceived'\n```\n\n----------------------------------------\n\nTITLE: Set Effective Property Function Signature\nDESCRIPTION: Function to find a rule with given active property for a node and set new value. Takes node ID, property name and value as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef set_effective_property_value_for_node(node_id: NodeId, property_name: str, value: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Cache Class Definition in CDP Cache Storage\nDESCRIPTION: Class representing a cache identifier with properties for cache ID, security origin, storage key, cache name, and optional storage bucket.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Cache(cache_id, security_origin, storage_key, cache_name, storage_bucket=None):\n    \"\"\"Cache identifier.\n\n    #### cache_id *: [`CacheId`](#nodriver.cdp.cache_storage.CacheId)*\n\n    An opaque unique id of the cache.\n\n    #### security_origin *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    Security origin of the cache.\n\n    #### storage_key *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    Storage key of the cache.\n\n    #### cache_name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    The name of the cache.\n\n    #### storage_bucket *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`StorageBucket`](storage.md#nodriver.cdp.storage.StorageBucket)]* *= None*\n\n    Storage bucket of the cache.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Full AX Tree in CDP with Python\nDESCRIPTION: This experimental command fetches the entire accessibility tree for the root Document. It accepts optional depth and frame_id parameters to limit the depth or specify the frame.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_full_ax_tree(depth=None, frame_id=None):\n    \"\"\"\n    Fetches the entire accessibility tree for the root Document\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **depth** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]) –  *(Optional)* The maximum depth at which descendants of the root node should be retrieved. If omitted, the full tree is returned.\n      * **frame_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`FrameId`](page.md#nodriver.cdp.page.FrameId)]) –  *(Optional)* The frame for whose document the AX tree should be retrieved. If omitted, the root frame is used.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], List[AXNode]]\n```\n\n----------------------------------------\n\nTITLE: Auth Challenge Response Class Definition in Python\nDESCRIPTION: Defines a class for responding to authentication challenges with credentials. Includes username/password fields and response type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fetch.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AuthChallengeResponse(response, username=None, password=None):\n    response: str\n    username: Optional[str] = None\n    password: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining BufferUsage Event Class in Python\nDESCRIPTION: Defines the BufferUsage event class with attributes for buffer fullness, event count, and value. This class is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BufferUsage(percent_full, event_count, value):\n    percent_full: Optional[float]\n    event_count: Optional[float]\n    value: Optional[float]\n```\n\n----------------------------------------\n\nTITLE: Storage Type Enumeration Definition in Python\nDESCRIPTION: Defines an enumeration of possible browser storage types including appcache, cookies, file systems, indexeddb, local storage and others.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass StorageType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    APPCACHE = 'appcache'\n    COOKIES = 'cookies'\n    FILE_SYSTEMS = 'file_systems'\n    INDEXEDDB = 'indexeddb'\n    LOCAL_STORAGE = 'local_storage'\n    SHADER_CACHE = 'shader_cache'\n    WEBSQL = 'websql'\n    SERVICE_WORKERS = 'service_workers'\n    CACHE_STORAGE = 'cache_storage'\n    INTEREST_GROUPS = 'interest_groups'\n    SHARED_STORAGE = 'shared_storage'\n    STORAGE_BUCKETS = 'storage_buckets'\n    ALL_ = 'all'\n    OTHER = 'other'\n```\n\n----------------------------------------\n\nTITLE: Implementing AdFrameType Enum in Python for CDP Page Domain\nDESCRIPTION: Defines the AdFrameType enum to indicate whether a frame has been identified as an ad, with options for NONE, CHILD, and ROOT.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AdFrameType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    \"\"\"Indicates whether a frame has been identified as an ad.\"\"\"\n\n    NONE = 'none'\n    CHILD = 'child'\n    ROOT = 'root'\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessage Class in Python\nDESCRIPTION: A Python class representing a console message with properties for source, level, text, URL, line number, and column number. Used to structure console message data within the CDP implementation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/console.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ConsoleMessage(source, level, text, url=None, line=None, column=None):\n    source: str  # Message source\n    level: str   # Message severity\n    text: str    # Message text\n    url: Optional[str] = None    # URL of message origin\n    line: Optional[int] = None    # Line number (1-based)\n    column: Optional[int] = None  # Column number (1-based)\n```\n\n----------------------------------------\n\nTITLE: Defining JavascriptDialogOpening Event Class in Python\nDESCRIPTION: This class represents an event fired when a JavaScript-initiated dialog is about to open. It includes details about the dialog type, message, and browser handling capabilities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nclass JavascriptDialogOpening(url, message, type_, has_browser_handler, default_prompt):\n    \"\"\"\n    Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to\n    open.\n    \"\"\"\n\n    url: str\n    message: str\n    type_: DialogType\n    has_browser_handler: bool\n    default_prompt: Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Defining FrameRequestedNavigation Event Class in Python\nDESCRIPTION: This class represents an event fired when a renderer-initiated navigation is requested. It includes details about the frame, reason, URL, and disposition of the navigation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nclass FrameRequestedNavigation(frame_id, reason, url, disposition):\n    \"\"\"\n    EXPERIMENTAL\n\n    Fired when a renderer-initiated navigation is requested.\n    Navigation may still be cancelled after the event is issued.\n    \"\"\"\n\n    frame_id: FrameId\n    reason: ClientNavigationReason\n    url: str\n    disposition: ClientNavigationDisposition\n```\n\n----------------------------------------\n\nTITLE: Controlling Input Event Processing in Python\nDESCRIPTION: Method to enable or disable input event processing, useful during page auditing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndef set_ignore_input_events(ignore)\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: enable\nDESCRIPTION: Command function to enable the FedCM domain functionality. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for SerializationOptions in CDP Runtime\nDESCRIPTION: Defines the SerializationOptions class for controlling how objects are serialized when working with the Runtime domain. It includes parameters for serialization depth and embedder-specific settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SerializationOptions(serialization, max_depth=None, additional_parameters=None):\n\n    serialization *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    max_depth *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]* *= None*\n\n    additional_parameters *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`dict`](https://docs.python.org/3/library/stdtypes.html#dict)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for PropertyDescriptor in CDP Runtime\nDESCRIPTION: Defines the PropertyDescriptor class representing JavaScript object property descriptors with configuration details like enumerable, configurable, and value information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass PropertyDescriptor(name, configurable, enumerable, value=None, writable=None, get=None, set_=None, was_thrown=None, is_own=None, symbol=None):\n\n    name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    configurable *: [`bool`](https://docs.python.org/3/library/functions.html#bool)*\n\n    enumerable *: [`bool`](https://docs.python.org/3/library/functions.html#bool)*\n\n    value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`RemoteObject`](#nodriver.cdp.runtime.RemoteObject)]* *= None*\n\n    writable *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Inserting Non-Keyboard Text in Python\nDESCRIPTION: Experimental method for inserting text that doesn't originate from keyboard input, such as emoji keyboard or IME input.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef insert_text(text)\n```\n\n----------------------------------------\n\nTITLE: Requesting Cache Names in CDP Cache Storage\nDESCRIPTION: Command function to request cache names based on security origin, storage key, or storage bucket. Returns a list of Cache objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef request_cache_names(security_origin=None, storage_key=None, storage_bucket=None):\n    \"\"\"Requests cache names.\n\n    * **Parameters:**\n      * **security_origin** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]) –  *(Optional)* At least and at most one of securityOrigin, storageKey, storageBucket must be specified. Security origin.\n      * **storage_key** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]) –  *(Optional)* Storage key.\n      * **storage_bucket** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`StorageBucket`](storage.md#nodriver.cdp.storage.StorageBucket)]) –  *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Cache`](#nodriver.cdp.cache_storage.Cache)]]\n    * **Returns:**\n      Caches for the security origin.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: BackForwardCacheNotRestoredReasonType Enum Class Definition\nDESCRIPTION: Enum class defining the types of reasons why content cannot be restored from back-forward cache. Includes support status and circumstantial reasons.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass BackForwardCacheNotRestoredReasonType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    SUPPORT_PENDING = 'SupportPending'\n    PAGE_SUPPORT_NEEDED = 'PageSupportNeeded'\n    CIRCUMSTANTIAL = 'Circumstantial'\n```\n\n----------------------------------------\n\nTITLE: Defining CertificateSecurityState Class in Python\nDESCRIPTION: This class represents details about the security state of a page certificate. It includes properties such as protocol, key exchange, cipher, and various certificate attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CertificateSecurityState(protocol, key_exchange, cipher, certificate, subject_name, issuer, valid_from, valid_to, certificate_has_weak_signature, certificate_has_sha1_signature, modern_ssl, obsolete_ssl_protocol, obsolete_ssl_key_exchange, obsolete_ssl_cipher, obsolete_ssl_signature, key_exchange_group=None, mac=None, certificate_network_error=None):\n    # ... property definitions ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceName enumeration in Python for CDP Background Services\nDESCRIPTION: An enumeration class that defines the different types of background services supported by the Chrome DevTools Protocol. Each service operates independently but shares the same API.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ServiceName(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    \"\"\"\n    The Background Service that will be associated with the commands/events.\n    Every Background Service operates independently, but they share the same\n    API.\n    \"\"\"\n\n    BACKGROUND_FETCH = 'backgroundFetch'\n    BACKGROUND_SYNC = 'backgroundSync'\n    PUSH_MESSAGING = 'pushMessaging'\n    NOTIFICATIONS = 'notifications'\n    PAYMENT_HANDLER = 'paymentHandler'\n    PERIODIC_BACKGROUND_SYNC = 'periodicBackgroundSync'\n```\n\n----------------------------------------\n\nTITLE: Take Computed Style Updates Method\nDESCRIPTION: An experimental method that polls the next batch of computed style updates and returns a list of node IDs with updated tracked computed styles. Returns a Generator that yields dictionaries mapping strings to various types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntake_computed_style_updates()\n```\n\n----------------------------------------\n\nTITLE: Setting Hardware Concurrency Override in Python\nDESCRIPTION: Experimental method to override the reported hardware concurrency. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef set_hardware_concurrency_override(hardware_concurrency):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Request Node Method - Python\nDESCRIPTION: Converts a JavaScript node object reference to a node and requests it be sent to the caller. Returns the node ID for the given object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndef request_node(object_id)\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthn AuthenticatorProtocol Enum\nDESCRIPTION: Defines the supported authenticator protocols (U2F and CTAP2) for virtual authenticators.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AuthenticatorProtocol:\n    U2F = 'u2f'\n    CTAP2 = 'ctap2'\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceAccess Types in Python\nDESCRIPTION: Defines core device access types including RequestId, DeviceId and PromptDevice for identifying and managing device information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/device_access.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass RequestId:\n    \"\"\"Device request id.\"\"\"\n    pass\n\nclass DeviceId:\n    \"\"\"A device id.\"\"\"\n    pass\n\nclass PromptDevice(id_, name):\n    \"\"\"Device information displayed in a user prompt to select a device.\"\"\"\n    id_: DeviceId\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Class in Python\nDESCRIPTION: Defines the Metric class representing a run-time execution metric with name and value attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Metric(name, value):\n    \"\"\"\n    Run-time execution metric.\n    \n    name : str\n        Metric name.\n    \n    value : float\n        Metric value.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SignedCertificateTimestamp Class in Python\nDESCRIPTION: Class representing signed certificate timestamp (SCT) details including validation status, origin, log information, and signature data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SignedCertificateTimestamp(status, origin, log_description, log_id, timestamp, hash_algorithm, signature_algorithm, signature_data):\n    status: str               # Validation status\n    origin: str               # Origin\n    log_description: str      # Log name/description \n    log_id: str              # Log ID\n    timestamp: float          # Issuance date in milliseconds since epoch\n    hash_algorithm: str       # Hash algorithm\n    signature_algorithm: str  # Signature algorithm \n    signature_data: str       # Signature data\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationEntry Class for Browser History Analysis in Python\nDESCRIPTION: This class represents an entry in the browser's navigation history. It includes information about the URL, title, and transition type. It is used to analyze the user's browsing history and navigation patterns.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass NavigationEntry(id_, url, user_typed_url, title, transition_type):\n\n    Navigation history entry.\n\n    id_ : int\n        Unique id of the navigation history entry.\n\n    url : str\n        URL of the navigation history entry.\n\n    user_typed_url : str\n        URL that the user typed in the url bar.\n\n    title : str\n        Title of the navigation history entry.\n\n    transition_type : TransitionType\n        Transition type.\n```\n\n----------------------------------------\n\nTITLE: PWA Domain Command Functions\nDESCRIPTION: Generator functions for PWA operations including changing settings, getting app state, installing, launching, and uninstalling PWAs. Each command yields control flow for async operation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/pwa.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef change_app_user_settings(): pass\ndef get_os_app_state(): pass\ndef install(): pass\ndef launch(): pass\ndef launch_files_in_app(): pass\ndef open_current_page_in_app(): pass\ndef uninstall(): pass\n```\n\n----------------------------------------\n\nTITLE: Setting Document Timeline Playback Rate in Python\nDESCRIPTION: Function to set the playback rate of the document timeline. It takes a float playback_rate as a parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef set_playback_rate(playback_rate):\n    \"\"\"Sets the playback rate of the document timeline.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Device Posture Override in Python\nDESCRIPTION: This experimental function starts reporting a given posture value to the Device Posture API. It takes a single parameter for the posture to be set.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nset_device_posture_override(posture)\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Class in Python\nDESCRIPTION: Class representing an Animation instance with properties for ID, name, state, timing, and playback controls.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Animation(id_, name, paused_state, play_state, playback_rate, start_time, current_time, type_, source=None, css_id=None, view_or_scroll_timeline=None):\n    # Animation properties\n    id_ : str  # Animation's id\n    name : str  # Animation's name\n    paused_state : bool  # Animation's internal paused state\n    play_state : str  # Animation's play state\n    playback_rate : float  # Animation's playback rate\n    start_time : float  # Animation's start time\n    current_time : float  # Animation's current time\n    type_ : str  # Animation type\n    source : Optional[AnimationEffect]  # Source animation node\n    css_id : Optional[str]  # Unique CSS animation ID\n    view_or_scroll_timeline : Optional[ViewOrScrollTimeline]  # Timeline info\n```\n\n----------------------------------------\n\nTITLE: Auth Challenge Class Definition in Python\nDESCRIPTION: Defines a class representing HTTP authentication challenges for status codes 401/407. Contains authentication scheme, realm and origin information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fetch.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AuthChallenge(origin, scheme, realm, source=None):\n    origin: str\n    scheme: str\n    realm: str\n    source: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerId Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerId class, which represents a unique identifier for players within the agent context.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerId\n```\n\n----------------------------------------\n\nTITLE: Getting Extension Storage Items in CDP\nDESCRIPTION: Command function to retrieve data from extension storage in a specified storage area. Can optionally filter results by providing specific keys to retrieve.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_storage_items(id_, storage_area, keys=None):\n    \"\"\"Gets data from extension storage in the given `storageArea`. If `keys` is\n    specified, these are used to filter the result.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Storage Domain Events Documentation in RST\nDESCRIPTION: Sphinx/RST documentation defining CDP storage event classes for cache storage updates, IndexedDB changes, interest group access, shared storage access and attribution reporting events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/storage.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: CacheStorageContentUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorReason Enum in Python for CDP Network Domain\nDESCRIPTION: Defines an enumeration class ErrorReason representing network-level fetch failure reasons. It includes constants for various error types such as Failed, Aborted, TimedOut, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ErrorReason(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    FAILED = 'Failed'\n    ABORTED = 'Aborted'\n    TIMED_OUT = 'TimedOut'\n    ACCESS_DENIED = 'AccessDenied'\n    CONNECTION_CLOSED = 'ConnectionClosed'\n    CONNECTION_RESET = 'ConnectionReset'\n    CONNECTION_REFUSED = 'ConnectionRefused'\n    CONNECTION_ABORTED = 'ConnectionAborted'\n    CONNECTION_FAILED = 'ConnectionFailed'\n    NAME_NOT_RESOLVED = 'NameNotResolved'\n    INTERNET_DISCONNECTED = 'InternetDisconnected'\n    ADDRESS_UNREACHABLE = 'AddressUnreachable'\n    BLOCKED_BY_CLIENT = 'BlockedByClient'\n    BLOCKED_BY_RESPONSE = 'BlockedByResponse'\n```\n\n----------------------------------------\n\nTITLE: Replaying Layer Snapshot in Python\nDESCRIPTION: Replays a layer snapshot with optional parameters for start and end steps, and scale. Returns a data URL for the resulting image.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef replay_snapshot(snapshot_id, from_step=None, to_step=None, scale=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Related Website Set Class Definition - Python\nDESCRIPTION: Class definition for managing related website sets, including primary sites, associated sites, and service sites. Used to group and organize related web properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass RelatedWebsiteSet(primary_sites, associated_sites, service_sites):\n    \"\"\"A single Related Website Set object.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceType Enum in Python for CDP Network Domain\nDESCRIPTION: Defines an enumeration class ResourceType representing different types of network resources as perceived by the rendering engine. It includes constants for various resource types like Document, Stylesheet, Image, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ResourceType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    DOCUMENT = 'Document'\n    STYLESHEET = 'Stylesheet'\n    IMAGE = 'Image'\n    MEDIA = 'Media'\n    FONT = 'Font'\n    SCRIPT = 'Script'\n    TEXT_TRACK = 'TextTrack'\n    XHR = 'XHR'\n    FETCH = 'Fetch'\n    PREFETCH = 'Prefetch'\n    EVENT_SOURCE = 'EventSource'\n    WEB_SOCKET = 'WebSocket'\n    MANIFEST = 'Manifest'\n    SIGNED_EXCHANGE = 'SignedExchange'\n    PING = 'Ping'\n    CSP_VIOLATION_REPORT = 'CSPViolationReport'\n    PREFLIGHT = 'Preflight'\n    OTHER = 'Other'\n```\n\n----------------------------------------\n\nTITLE: Defining Attribution Reporting Classes - Python\nDESCRIPTION: Class definitions for handling Attribution Reporting data structures including trigger data, dedup keys, and registration information. These classes manage data for attribution tracking and reporting.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AttributionReportingAggregatableTriggerData(key_piece, source_keys, filters):\n    pass\n\nclass AttributionReportingAggregatableDedupKey(filters, dedup_key=None):\n    pass\n\nclass AttributionReportingTriggerRegistration(filters, aggregatable_dedup_keys, event_trigger_data, aggregatable_trigger_data, aggregatable_values, aggregatable_filtering_id_max_bytes, debug_reporting, source_registration_time_config, aggregatable_debug_reporting_config, scopes, debug_key=None, aggregation_coordinator_origin=None, trigger_context_id=None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing clear_events command for CDP Background Service\nDESCRIPTION: A generator function that clears all stored data for a specific background service. Takes a ServiceName parameter to specify which service to clear.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef clear_events(service):\n    \"\"\"\n    Clears all stored data for the service.\n    \"\"\"\n    # Parameters:\n    #   service (ServiceName): \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Pause Behavior in Python\nDESCRIPTION: Method to control whether the page interrupts on any pauses including breakpoints and exceptions. Takes a boolean parameter to set skip state.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef set_skip_all_pauses(skip: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Alternate Protocol Usage Enum Definition\nDESCRIPTION: Enum class specifying reasons for Chrome's transport protocol selection for HTTP semantics.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AlternateProtocolUsage(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ALTERNATIVE_JOB_WON_WITHOUT_RACE = 'alternativeJobWonWithoutRace'\n    ALTERNATIVE_JOB_WON_RACE = 'alternativeJobWonRace'\n    MAIN_JOB_WON_RACE = 'mainJobWonRace'\n    MAPPING_MISSING = 'mappingMissing'\n    BROKEN = 'broken'\n    DNS_ALPN_H3_JOB_WON_WITHOUT_RACE = 'dnsAlpnH3JobWonWithoutRace'\n    DNS_ALPN_H3_JOB_WON_RACE = 'dnsAlpnH3JobWonRace'\n    UNSPECIFIED_REASON = 'unspecifiedReason'\n```\n\n----------------------------------------\n\nTITLE: Service Worker Event Classes\nDESCRIPTION: Event classes for handling service worker state changes and errors. These classes are instantiated by the API and expose attributes for accessing event details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass WorkerErrorReported:\n    error_message: ServiceWorkerErrorMessage\n\nclass WorkerRegistrationUpdated:\n    registrations: List[ServiceWorkerRegistration]\n\nclass WorkerVersionUpdated:\n    versions: List[ServiceWorkerVersion]\n```\n\n----------------------------------------\n\nTITLE: Managing Async Call Stack Depth\nDESCRIPTION: Method to enable or disable async call stacks tracking by setting maximum depth. Setting depth to 0 disables collection.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef set_async_call_stack_depth(max_depth)\n```\n\n----------------------------------------\n\nTITLE: Defining NodeParamConnected Event Class in Python\nDESCRIPTION: Class that represents the event when an AudioNode is connected to an AudioParam, including source and destination identifiers.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass NodeParamConnected(context_id, source_id, destination_id, source_output_index):\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: Optional[float]\n```\n\n----------------------------------------\n\nTITLE: Defining Network Enums in Python\nDESCRIPTION: Collection of enums defining various network-related constants including BlockedReason, CorsError, and ServiceWorkerResponseSource.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass BlockedReason(Enum):\n    OTHER = 'other'\n    CSP = 'csp'\n    MIXED_CONTENT = 'mixed-content'\n    ORIGIN = 'origin'\n    INSPECTOR = 'inspector'\n\nclass CorsError(Enum):\n    DISALLOWED_BY_MODE = 'DisallowedByMode'\n    INVALID_RESPONSE = 'InvalidResponse'\n    WILDCARD_ORIGIN_NOT_ALLOWED = 'WildcardOriginNotAllowed'\n\nclass ServiceWorkerResponseSource(Enum):\n    CACHE_STORAGE = 'cache-storage'\n    HTTP_CACHE = 'http-cache'\n    FALLBACK_CODE = 'fallback-code'\n    NETWORK = 'network'\n```\n\n----------------------------------------\n\nTITLE: Disassembling WASM Module in Python\nDESCRIPTION: This function disassembles a WASM module given a script ID. It returns a generator with information about the disassembled module, including stream ID, total number of lines, function body offsets, and the first chunk of disassembly.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef disassemble_wasm_module(script_id: ScriptId) -> Generator[Dict[str, Any], Dict[str, Any], Tuple[Optional[str], int, List[int], WasmDisassemblyChunk]]:\n```\n\n----------------------------------------\n\nTITLE: Defining clear_events Command in Python\nDESCRIPTION: This snippet defines the clear_events command as an autofunction. It's likely used to clear stored events for background services.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: clear_events\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Class in Python\nDESCRIPTION: Class representing a complete profile with nodes, timestamps, samples and time deltas.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Profile(nodes, start_time, end_time, samples=None, time_deltas=None)\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerMessage Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerMessage class with level and message attributes, corresponding to the kMessage type in MediaLogRecord.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerMessage(level, message)\n```\n\n----------------------------------------\n\nTITLE: Clearing Extension Storage Items in CDP\nDESCRIPTION: Command function to clear extension storage in a specified storage area. Takes an extension ID and a storage area as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_storage_items(id_, storage_area):\n    \"\"\"Clears extension storage in the given `storageArea`.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Domain Class Definition for CDP Schema\nDESCRIPTION: The Domain class represents a protocol domain in CDP with name and version properties. This class is used to describe individual domains returned by the get_domains() command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/schema.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Domain(name, version):\n    # Description of the protocol domain.\n    # name: str - Domain name.\n    # version: str - Domain version.\n```\n\n----------------------------------------\n\nTITLE: Get Matched Styles Function Signature\nDESCRIPTION: Function that returns requested styles for a DOM node identified by nodeId. Returns inline styles, attribute styles, matched CSS rules, pseudo elements, inherited styles and more.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_matched_styles_for_node(node_id: NodeId) -> Generator[Dict[str, Any], Dict[str, Any], Tuple[Optional[CSSStyle], ...]]\n```\n\n----------------------------------------\n\nTITLE: Defining compositing_reasons Command in Python\nDESCRIPTION: Defines the compositing_reasons command function that provides reasons why a given layer was composited.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef compositing_reasons(layer_id):\n    \"\"\"Provides the reasons why the given layer was composited.\n\n    Args:\n        layer_id (LayerId): The id of the layer for which we want to get the reasons it was composited.\n\n    Returns:\n        A tuple with the following items:\n        1. compositingReasons: A list of strings specifying reasons for the given layer to become composited.\n        2. compositingReasonIds: A list of strings specifying reason IDs for the given layer to become composited.\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Fetching Partial AX Tree in CDP with Python\nDESCRIPTION: This experimental command fetches the accessibility node and partial tree for a DOM node. It accepts different identification parameters (node_id, backend_node_id, object_id) and an optional parameter to control fetching relatives.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_partial_ax_tree(node_id=None, backend_node_id=None, object_id=None, fetch_relatives=None):\n    \"\"\"\n    Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.\n\n    **EXPERIMENTAL**\n\n    * **Parameters:**\n      * **node_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`NodeId`](dom.md#nodriver.cdp.dom.NodeId)]) –  *(Optional)* Identifier of the node to get the partial accessibility tree for.\n      * **backend_node_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`BackendNodeId`](dom.md#nodriver.cdp.dom.BackendNodeId)]) –  *(Optional)* Identifier of the backend node to get the partial accessibility tree for.\n      * **object_id** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`RemoteObjectId`](runtime.md#nodriver.cdp.runtime.RemoteObjectId)]) –  *(Optional)* JavaScript object id of the node wrapper to get the partial accessibility tree for.\n      * **fetch_relatives** ([`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`bool`](https://docs.python.org/3/library/functions.html#bool)]) –  *(Optional)* Whether to fetch this node's ancestors, siblings and children. Defaults to true.\n    \"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], List[AXNode]]\n    # Returns:\n    # The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Pause Behavior in Python\nDESCRIPTION: Method to define how the debugger pauses on exceptions. Can be configured to stop on all, uncaught, or caught exceptions. Takes a state parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef set_pause_on_exceptions(state: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocketClosed Event Class in Python for NoDriver CDP\nDESCRIPTION: This class represents the event fired when a WebSocket is closed. It includes properties for the request identifier and timestamp.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nclass WebSocketClosed(request_id, timestamp):\n    \"\"\"Fired when WebSocket is closed.\"\"\"\n\n    request_id: RequestId\n    \"\"\"Request identifier.\"\"\"\n\n    timestamp: MonotonicTime\n    \"\"\"Timestamp.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Helper Functions in Python\nDESCRIPTION: Autodocumentation for all members and inherited members in the nodriver.core._contradict module, which contains helper functions for the NoDriver project.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/others_and_helpers.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: nodriver.core._contradict\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationEffect Class in Python\nDESCRIPTION: Class representing animation effects with timing, iteration, and keyframe properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AnimationEffect(delay, end_delay, iteration_start, iterations, duration, direction, fill, easing, backend_node_id=None, keyframes_rule=None):\n    delay : float  # Effect delay\n    end_delay : float  # Effect end delay\n    iteration_start : float  # Effect iteration start\n    iterations : float  # Effect iterations\n    duration : float  # Effect duration\n    direction : str  # Playback direction\n    fill : str  # Fill mode\n    easing : str  # Timing function\n    backend_node_id : Optional[BackendNodeId]  # Target node\n    keyframes_rule : Optional[KeyframesRule]  # Effect keyframes\n```\n\n----------------------------------------\n\nTITLE: Defining ContrastAlgorithm Enum in Python for CDP Overlay\nDESCRIPTION: Defines an enum class ContrastAlgorithm with values for different contrast algorithms used in accessibility testing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass ContrastAlgorithm(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    AA = 'aa'\n\n    AAA = 'aaa'\n\n    APCA = 'apca'\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for DeepSerializedValue in CDP Runtime\nDESCRIPTION: Defines the DeepSerializedValue class that represents deeply serialized JavaScript values. It includes type information and references for object identification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass DeepSerializedValue(type_, value=None, object_id=None, weak_local_object_reference=None):\n\n    type_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`Any`](https://docs.python.org/3/library/typing.html#typing.Any)]* *= None*\n\n    object_id *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    weak_local_object_reference *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`int`](https://docs.python.org/3/library/functions.html#int)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Defining AXPropertyName Enum in Python\nDESCRIPTION: Python enum class defining all possible accessibility property names including states and relationships.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AXPropertyName(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ACTIONS = 'actions'\n    BUSY = 'busy'\n    DISABLED = 'disabled'\n    EDITABLE = 'editable'\n    FOCUSABLE = 'focusable'\n    FOCUSED = 'focused'\n    HIDDEN = 'hidden'\n    HIDDEN_ROOT = 'hiddenRoot'\n    INVALID = 'invalid'\n    KEYSHORTCUTS = 'keyshortcuts'\n    SETTABLE = 'settable'\n    ROLEDESCRIPTION = 'roledescription'\n```\n\n----------------------------------------\n\nTITLE: Delete Shared Storage Entry - Python\nDESCRIPTION: Function to delete a specific key-value entry from an origin's shared storage. Takes owner_origin and key as string parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef delete_shared_storage_entry(owner_origin: str, key: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining NodeParamDisconnected Event Class in Python\nDESCRIPTION: Class that represents the event when an AudioNode is disconnected from an AudioParam, with source and destination details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass NodeParamDisconnected(context_id, source_id, destination_id, source_output_index):\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: Optional[float]\n```\n\n----------------------------------------\n\nTITLE: Defining SourceCodeLocation Class in Python\nDESCRIPTION: This class represents a location in the source code, including URL, line number, column number, and optional script ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass SourceCodeLocation(url, line_number, column_number, script_id=None):\n\n    url : str\n\n    line_number : int\n\n    column_number : int\n\n    script_id : Optional[ScriptId] = None\n```\n\n----------------------------------------\n\nTITLE: Generating Test Report via CDP in Python\nDESCRIPTION: Generates a testing report with a custom message that can be displayed. Optionally specifies an endpoint group for report delivery. This method is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ngenerate_test_report(message, group=None)\n```\n\n----------------------------------------\n\nTITLE: Commands Documentation in RST\nDESCRIPTION: Documentation for profiler commands including disable, enable, get_best_effort_coverage, set_sampling_interval, start, start_precise_coverage, stop, stop_precise_coverage, and take_precise_coverage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/profiler.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: get_best_effort_coverage\n\n.. autofunction:: set_sampling_interval\n\n.. autofunction:: start\n```\n\n----------------------------------------\n\nTITLE: Defining Coverage Classes in Python\nDESCRIPTION: Classes for representing code coverage data including ranges, function coverage and script coverage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CoverageRange(start_offset, end_offset, count)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass FunctionCoverage(function_name, ranges, is_block_coverage)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ScriptCoverage(script_id, url, functions)\n```\n\n----------------------------------------\n\nTITLE: Storage Domain Types Documentation in RST\nDESCRIPTION: Sphinx/RST documentation defining various storage-related CDP types including serialized storage keys, storage types, usage metrics, trust tokens, interest groups, shared storage, and attribution reporting classes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/storage.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SerializedStorageKey\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportingApiReportAdded Class in Python for NoDriver CDP\nDESCRIPTION: This class represents an event sent when a new report is added or after 'enableReportingApi' for all existing reports. It includes the report data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\nclass ReportingApiReportAdded(report):\n\n    report : ReportingApiReport\n```\n\n----------------------------------------\n\nTITLE: Redoing DOM Actions in NoDriver Python API\nDESCRIPTION: An experimental generator function that redoes the last undone action in the DOM. Returns dictionary objects containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\ndef redo():\n    \"\"\"Re-does the last undone action.\n\n    EXPERIMENTAL\n    \"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining NodesDisconnected Event Class in Python\nDESCRIPTION: Class that represents the event when AudioNodes are disconnected, with optional destination and connection indices.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass NodesDisconnected(context_id, source_id, destination_id, source_output_index, destination_input_index):\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: Optional[float]\n    destination_input_index: Optional[float]\n```\n\n----------------------------------------\n\nTITLE: Managing Interest Group Tracking\nDESCRIPTION: Methods to enable/disable Interest Group tracking features including auction events and access tracking.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef set_interest_group_auction_tracking(enable: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n\ndef set_interest_group_tracking(enable: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Storage Item Updated Event in Python\nDESCRIPTION: Event class for when an item is updated in DOM storage, containing storage identifier, key, old value, and new value.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass DomStorageItemUpdated(storage_id, key, old_value, new_value):\n\n    storage_id *: [`StorageId`](#nodriver.cdp.dom_storage.StorageId)*\n\n    key *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    old_value *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    new_value *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n```\n\n----------------------------------------\n\nTITLE: Stopping Screencast in Python\nDESCRIPTION: Stops sending each frame in the screencastFrame event. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ndef stop_screencast() -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Defining Module Information Structure in Python\nDESCRIPTION: Defines a class representing executable module information including name, UUID, base address and size.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Module(name, uuid, base_address, size):\n    name: str            # Name of the module\n    uuid: str            # UUID of the module\n    base_address: str    # Base address where module is loaded\n    size: float          # Size of the module in bytes\n```\n\n----------------------------------------\n\nTITLE: Console MessageAdded Event Class\nDESCRIPTION: Event class definition for console message notifications. Triggered when new console messages are added and contains the message details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/console.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MessageAdded(message):\n    \"\"\"Issued when new console message is added.\"\"\"\n    message: ConsoleMessage  # Console message that has been added\n```\n\n----------------------------------------\n\nTITLE: Documenting Security Event Classes in RST\nDESCRIPTION: ReStructuredText documentation for security event classes including certificate errors and security state changes\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/security.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: CertificateError\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: VisibleSecurityStateChanged\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: SecurityStateChanged\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining Autofill Types in Python\nDESCRIPTION: Defines various Autofill-related types such as CreditCard, AddressField, AddressFields, Address, AddressUI, FillingStrategy, and FilledField. These classes are used to represent different aspects of autofill functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/autofill.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: CreditCard\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: AddressField\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: AddressFields\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: Address\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: AddressUI\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: FillingStrategy\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: FilledField\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: BackForwardCacheNotRestoredExplanation Class Definition\nDESCRIPTION: Class containing detailed explanation of why content could not be restored from back-forward cache, including type, reason, context and blocking details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass BackForwardCacheNotRestoredExplanation(type_, reason, context=None, details=None):\n    type_: BackForwardCacheNotRestoredReasonType\n    reason: BackForwardCacheNotRestoredReason\n    context: Optional[str] = None\n    details: Optional[List[BackForwardCacheBlockingDetails]] = None\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerQueryContainerHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting container query containers, including border styles for the container and its descendants.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nclass ContainerQueryContainerHighlightConfig(container_border=None, descendant_border=None):\n\n    container_border: Optional[LineStyle] = None\n\n    descendant_border: Optional[LineStyle] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Rectangle Class in Python\nDESCRIPTION: Class representing a rectangle with x,y coordinates and width/height dimensions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Rect(x, y, width, height):\n    x: float      # X coordinate\n    y: float      # Y coordinate \n    width: float  # Rectangle width\n    height: float # Rectangle height\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundServiceEventReceived event class for CDP\nDESCRIPTION: An event class that is fired with all existing background service events when enabled, and for all new events afterward if enabled and recording.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BackgroundServiceEventReceived(background_service_event):\n    \"\"\"\n    Called with all existing backgroundServiceEvents when enabled, and all new\n    events afterwards if enabled and recording.\n    \"\"\"\n\n    background_service_event: BackgroundServiceEvent\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentOpened Event Class in Python\nDESCRIPTION: This class represents an event fired when a document is opened for writing. It contains a frame object as its attribute.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nclass DocumentOpened(frame):\n    \"\"\"\n    EXPERIMENTAL\n\n    Fired when opening document to write to.\n    \"\"\"\n\n    frame: Frame\n```\n\n----------------------------------------\n\nTITLE: Font Families Class Definition in Python\nDESCRIPTION: Defines a class for managing generic font family collections with optional font family settings for different styles.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass FontFamilies(standard=None, fixed=None, serif=None, sans_serif=None, cursive=None, fantasy=None, math=None):\n    standard: Optional[str] = None   # Standard font-family\n    fixed: Optional[str] = None      # Fixed font-family\n    serif: Optional[str] = None      # Serif font-family\n    sans_serif: Optional[str] = None # Sans-serif font-family\n    cursive: Optional[str] = None    # Cursive font-family\n    fantasy: Optional[str] = None    # Fantasy font-family\n    math: Optional[str] = None       # Math font-family\n```\n\n----------------------------------------\n\nTITLE: Disabling Image Types in Python\nDESCRIPTION: This experimental function allows disabling specific image types. It takes a list of image types to be disabled as a parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nset_disabled_image_types(image_types)\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Storage Item Removed Event in Python\nDESCRIPTION: Event class for when an item is removed from DOM storage, containing the storage identifier and the key of the removed item.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass DomStorageItemRemoved(storage_id, key):\n\n    storage_id *: [`StorageId`](#nodriver.cdp.dom_storage.StorageId)*\n\n    key *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Storage Item Added Event in Python\nDESCRIPTION: Event class for when an item is added to DOM storage, containing the storage identifier, key, and new value.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass DomStorageItemAdded(storage_id, key, new_value):\n\n    storage_id *: [`StorageId`](#nodriver.cdp.dom_storage.StorageId)*\n\n    key *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    new_value *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n```\n\n----------------------------------------\n\nTITLE: Memory Domain Commands Declaration\nDESCRIPTION: Lists available memory-related commands including forcibly_purge_java_script_memory, get_sampling_profile, start_sampling, and others. Each command is implemented as a generator function with specific yield and return types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/memory.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: forcibly_purge_java_script_memory\n\n.. autofunction:: get_all_time_sampling_profile\n\n.. autofunction:: get_browser_sampling_profile\n\n.. autofunction:: get_dom_counters\n\n.. autofunction:: get_dom_counters_for_leak_detection\n\n.. autofunction:: get_sampling_profile\n\n.. autofunction:: prepare_for_leak_detection\n\n.. autofunction:: set_pressure_notifications_suppressed\n\n.. autofunction:: simulate_pressure_notification\n\n.. autofunction:: start_sampling\n\n.. autofunction:: stop_sampling\n```\n\n----------------------------------------\n\nTITLE: Resetting Shared Storage Budget\nDESCRIPTION: Experimental method to reset the shared storage budget for a specified owner origin by clearing all budget withdrawals.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef reset_shared_storage_budget(owner_origin: str) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Command function to stop casting to a sink\nDESCRIPTION: A generator function that stops the active Cast session on a specified sink device.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef stop_casting(sink_name):\n    \"\"\"\n    Stops the active Cast session on the sink.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Layer Painted Event Class Definition in Python\nDESCRIPTION: Defines a LayerPainted event class with attributes for the painted layer ID and clip rectangle.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass LayerPainted:\n    layer_id: LayerId\n    clip: Rect\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for EntryPreview in CDP Runtime\nDESCRIPTION: Defines the EntryPreview class for representing entries in map-like collections, containing a value preview and an optional key preview.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass EntryPreview(value, key=None):\n\n    value *: [`ObjectPreview`](#nodriver.cdp.runtime.ObjectPreview)*\n\n    key *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`ObjectPreview`](#nodriver.cdp.runtime.ObjectPreview)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Implementing begin_frame Command for HeadlessExperimental Domain in Python\nDESCRIPTION: Generator function that sends a BeginFrame to the target and returns when the frame is completed. It can optionally capture a screenshot and requires the target to be created with enabled BeginFrameControl.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/headless_experimental.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef begin_frame(frame_time_ticks=None, interval=None, no_display_updates=None, screenshot=None):\n    \"\"\"\n    Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a\n    screenshot from the resulting frame. Requires that the target was created with enabled\n    BeginFrameControl. Designed for use with –run-all-compositor-stages-before-draw, see also\n    [https://goo.gle/chrome-headless-rendering](https://goo.gle/chrome-headless-rendering) for more background.\n    \"\"\"\n    # Parameters documentation omitted for brevity\n    # Return type documentation omitted for brevity\n    # Returns documentation omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Seeking Animations in Python\nDESCRIPTION: Function to seek a set of animations to a particular time. It takes a list of animation ids and a current time as parameters, and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef seek_animations(animations, current_time):\n    \"\"\"Seek a set of animations to a particular time within each animation.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Grid Overlay Configuration in Python\nDESCRIPTION: Method to highlight elements with CSS Grid overlay. Takes a list of GridNodeHighlightConfig objects to define node identifiers and highlight appearance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef set_show_grid_overlays(grid_node_highlight_configs: List[GridNodeHighlightConfig]) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: CDP Audits Domain Commands\nDESCRIPTION: Generator function commands for the CDP Audits domain that handle contrast checking, form validation, and enabling/disabling audits. Commands yield and receive arguments while returning specific types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/audits.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: check_contrast\n\n.. autofunction:: check_forms_issues\n\n.. autofunction:: disable\n\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Setting Instrumentation Breakpoint in Python (Deprecated)\nDESCRIPTION: This deprecated method sets a breakpoint on a particular native event. It takes the event name as a parameter and returns a Generator that yields dictionaries. It is marked as experimental and deprecated since version 1.3.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef set_instrumentation_breakpoint(event_name):\n    # Implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Removing XHR Breakpoint Command in CDP DOMDebugger\nDESCRIPTION: Command that removes a breakpoint from XMLHttpRequest calls matching a specific URL substring pattern.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef remove_xhr_breakpoint(url):\n\n    # Removes breakpoint from XMLHttpRequest.\n\n    # Parameters:\n    #   url (str) – Resource URL substring.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: SystemInfo Command Function References\nDESCRIPTION: Generator functions for querying system information: get_feature_state, get_info, and get_process_info. These commands return system-level information through the CDP protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/system_info.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_feature_state()\ndef get_info()\ndef get_process_info()\n```\n\n----------------------------------------\n\nTITLE: Defining GestureSourceType Enumeration in Python\nDESCRIPTION: Enumeration class for GestureSourceType that defines constants for different input sources for gesture events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GestureSourceType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n```\n\n----------------------------------------\n\nTITLE: Background Service Command Generators in Python\nDESCRIPTION: Implementation of command generator functions for clearing events, setting recording state, and managing service observation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/background_service.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef clear_events()\ndef set_recording()\ndef start_observing()\ndef stop_observing()\n```\n\n----------------------------------------\n\nTITLE: Implementing DOM Storage Item Class in Python\nDESCRIPTION: Python class definition for Item representing a DOM Storage item. It inherits from an iterable type to support collection behaviors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Item(iterable=(), /):\n\n    DOM Storage item.\n```\n\n----------------------------------------\n\nTITLE: BackForwardCacheNotRestoredExplanationTree Class Definition\nDESCRIPTION: Class representing a tree structure of explanations for why content could not be restored from back-forward cache, organized by frame URLs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass BackForwardCacheNotRestoredExplanationTree(url, explanations, children):\n    url: str\n    explanations: List[BackForwardCacheNotRestoredExplanation]\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Scope Rules in Python\nDESCRIPTION: Experimental function to modify CSS scope at-rule expressions. Takes style sheet ID, range and new text as parameters. Returns a Generator with the modified CSS Scope rule.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef set_scope_text(style_sheet_id: StyleSheetId, range_, text: str) -> Generator[Dict[str, Any], Dict[str, Any], CSSScope]\n```\n\n----------------------------------------\n\nTITLE: Defining GridHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing configuration data for highlighting Grid elements. It includes numerous optional parameters for customizing the grid visualization.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GridHighlightConfig(show_grid_extension_lines=None, show_positive_line_numbers=None, show_negative_line_numbers=None, show_area_names=None, show_line_names=None, show_track_sizes=None, grid_border_color=None, cell_border_color=None, row_line_color=None, column_line_color=None, grid_border_dash=None, cell_border_dash=None, row_line_dash=None, column_line_dash=None, row_gap_color=None, row_hatch_color=None, column_gap_color=None, column_hatch_color=None, area_border_color=None, grid_background_color=None):\n    \"\"\"Configuration data for the highlighting of Grid elements.\"\"\"\n\n    # ... (property definitions omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Getting File Information in Python\nDESCRIPTION: Experimental method that returns file information for a given File wrapper object. Takes a RemoteObjectId parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef get_file_info(object_id)\n```\n\n----------------------------------------\n\nTITLE: Defining TraceConfig Class in Python\nDESCRIPTION: Defines the TraceConfig class for configuring tracing operations. It includes various optional parameters for controlling trace buffer size, sampling, categories, and memory dump configuration.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TraceConfig(record_mode=None, trace_buffer_size_in_kb=None, enable_sampling=None, enable_systrace=None, enable_argument_filter=None, included_categories=None, excluded_categories=None, synthetic_delays=None, memory_dump_config=None):\n\n    record_mode: Optional[str] = None\n    trace_buffer_size_in_kb: Optional[float] = None\n    enable_sampling: Optional[bool] = None\n    enable_systrace: Optional[bool] = None\n    enable_argument_filter: Optional[bool] = None\n    included_categories: Optional[List[str]] = None\n    excluded_categories: Optional[List[str]] = None\n    synthetic_delays: Optional[List[str]] = None\n    memory_dump_config: Optional[MemoryDumpConfig] = None\n```\n\n----------------------------------------\n\nTITLE: Untracking Cache Storage for Storage Key in Python\nDESCRIPTION: Unregisters a storage key from receiving notifications for cache storage updates.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nuntrack_cache_storage_for_storage_key(storage_key)\n```\n\n----------------------------------------\n\nTITLE: Custom Object Formatter Configuration\nDESCRIPTION: Experimental method to enable or disable custom object formatter functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef set_custom_object_formatter_enabled(enabled)\n```\n\n----------------------------------------\n\nTITLE: Defining NodeId and BackendNodeId Types in Python\nDESCRIPTION: Defines custom types for unique DOM node identifiers, including NodeId for frontend references and BackendNodeId for backend references.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass NodeId:\n    \"\"\"Unique DOM node identifier.\"\"\"\n    pass\n\nclass BackendNodeId:\n    \"\"\"Unique DOM node identifier used to reference a node that may not have been pushed to the\n    front-end.\"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Untracking IndexedDB for Origin in Python\nDESCRIPTION: Unregisters a security origin from receiving notifications for IndexedDB updates.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nuntrack_indexed_db_for_origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Authentication Challenge Class Definition in Python\nDESCRIPTION: Defines the AuthChallenge class for handling HTTP 401/407 authentication challenges with origin, scheme and realm information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass AuthChallenge(origin, scheme, realm, source=None):\n    origin : str\n    scheme : str\n    realm : str\n    source : Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: click_dialog_button\nDESCRIPTION: Command function for clicking buttons in the FedCM dialog. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: click_dialog_button\n```\n\n----------------------------------------\n\nTITLE: Setting Blackbox Execution Contexts in JavaScript Debugger\nDESCRIPTION: Method to replace previous blackbox execution contexts with new ones. Forces the debugger backend to skip stepping/pausing in specified execution contexts. Takes a list of execution context unique IDs and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef set_blackbox_execution_contexts(unique_ids):\n    \"\"\"Replace previous blackbox execution contexts with passed ones.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Cache Entries in CDP Cache Storage\nDESCRIPTION: Command function to fetch a specific cache entry. Takes cache ID, request URL, and request headers, and returns a CachedResponse object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef request_cached_response(cache_id, request_url, request_headers):\n    \"\"\"Fetches cache entry.\n\n    * **Parameters:**\n      * **cache_id** ([`CacheId`](#nodriver.cdp.cache_storage.CacheId)) – Id of cache that contains the entry.\n      * **request_url** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – URL spec of the request.\n      * **request_headers** ([`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Header`](#nodriver.cdp.cache_storage.Header)]) – headers of the request.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`CachedResponse`](#nodriver.cdp.cache_storage.CachedResponse)]\n    * **Returns:**\n      Response read from the cache.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx Command Documentation\nDESCRIPTION: Documentation for CDP tracing commands using Sphinx autofunction directives. Includes commands for ending traces, getting categories, recording clock sync markers, requesting memory dumps and starting traces.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/tracing.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: end\n\n.. autofunction:: get_categories\n\n.. autofunction:: record_clock_sync_marker\n\n.. autofunction:: request_memory_dump\n\n.. autofunction:: start\n```\n\n----------------------------------------\n\nTITLE: CDP Audits Domain Class Definitions\nDESCRIPTION: Comprehensive list of class definitions for the CDP Audits domain including classes for handling cookies, mixed content, security policies, and various issue types. Each class includes serialization methods from_json and to_json.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/audits.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: AffectedCookie\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: AffectedRequest\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Color Class in Python\nDESCRIPTION: Class representing an RGBA color with red, green, blue components in 0-255 range and optional alpha in 0-1 range.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass RGBA(r, g, b, a=None):\n    r: int  # The red component, in the [0-255] range\n    g: int  # The green component, in the [0-255] range\n    b: int  # The blue component, in the [0-255] range\n    a: Optional[float] = None  # The alpha component, in the [0-1] range\n```\n\n----------------------------------------\n\nTITLE: Defining WebAudio AutomationRate Enum\nDESCRIPTION: Defines enum class for AudioParam::AutomationRate with a-rate and k-rate options.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AutomationRate(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    A_RATE = 'a-rate'\n    K_RATE = 'k-rate'\n```\n\n----------------------------------------\n\nTITLE: Defining AffectedCookie Class in Python\nDESCRIPTION: Class representing information about a cookie affected by an inspector issue. Contains properties to uniquely identify a cookie including name, path and domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AffectedCookie(name, path, domain):\n    name: str    # Cookie name\n    path: str    # Cookie path\n    domain: str  # Cookie domain\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Web App (Python)\nDESCRIPTION: This function uninstalls a web app identified by the given manifest ID and closes any opened app windows. It takes a manifest_id as a string parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/pwa.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef uninstall(manifest_id: str) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Defining GridNodeHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting grid nodes, including a grid highlight config and node ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass GridNodeHighlightConfig(grid_highlight_config, node_id):\n\n    grid_highlight_config: GridHighlightConfig\n\n    node_id: NodeId\n```\n\n----------------------------------------\n\nTITLE: Defining TimeSinceEpoch Class in Python\nDESCRIPTION: Class definition for TimeSinceEpoch which represents UTC time in seconds counted from January 1, 1970.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TimeSinceEpoch(x=0, /)\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Property Names in Python\nDESCRIPTION: Function to modify property rule names in a stylesheet. Takes style sheet ID, range and new property name as parameters. Returns a Generator with the modified key text.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef set_property_rule_property_name(style_sheet_id: StyleSheetId, range_, property_name: str) -> Generator[Dict[str, Any], Dict[str, Any], Value]\n```\n\n----------------------------------------\n\nTITLE: Defining LineStyle Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing style information for drawing a line. It includes optional parameters for color and pattern.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass LineStyle(color=None, pattern=None):\n    \"\"\"Style information for drawing a line.\"\"\"\n\n    color : Optional[RGBA] = None\n        \"\"\"The color of the line (default: transparent)\"\"\"\n\n    pattern : Optional[str] = None\n        \"\"\"The line pattern (default: solid)\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting CSP Violation Breakpoints Command in CDP DOMDebugger\nDESCRIPTION: Experimental command that sets breakpoints to trigger on specific Content Security Policy violations, allowing debugging of security policy issues.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef set_break_on_csp_violation(violation_types):\n\n    # Sets breakpoint on particular CSP violations.\n\n    # EXPERIMENTAL\n\n    # Parameters:\n    #   violation_types (List[CSPViolationType]) – CSP Violations to stop upon.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Implementing get_directory Command in FileSystem CDP Domain\nDESCRIPTION: Command definition for get_directory in the FileSystem CDP domain that retrieves a directory object at a specified path using a BucketFileSystemLocator parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/file_system.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_directory(bucket_file_system_locator):\n\n* **Parameters:**\n  **bucket_file_system_locator** ([`BucketFileSystemLocator`](#nodriver.cdp.file_system.BucketFileSystemLocator)) – \n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Directory`](#nodriver.cdp.file_system.Directory)]\n* **Returns:**\n  Returns the directory object at the path.\n```\n\n----------------------------------------\n\nTITLE: Untracking IndexedDB for Storage Key in Python\nDESCRIPTION: Unregisters a storage key from receiving notifications for IndexedDB updates.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nuntrack_indexed_db_for_storage_key(storage_key)\n```\n\n----------------------------------------\n\nTITLE: Importing Network Domain in Python\nDESCRIPTION: This snippet shows how to import the Network domain module in Python. It provides access to various network-related functionalities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/network.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import network\n```\n\n----------------------------------------\n\nTITLE: Device Orientation CDP Command Signatures\nDESCRIPTION: Generator function signatures for CDP device orientation commands. These commands allow clearing and setting device orientation overrides through the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/device_orientation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclear_device_orientation_override()\nset_device_orientation_override()\n```\n\n----------------------------------------\n\nTITLE: Defining InlineTextBox Class in Python\nDESCRIPTION: Class definition for storing details of post layout rendered text positions including bounding box and character index information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass InlineTextBox(bounding_box, start_character_index, num_characters)\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: open_url\nDESCRIPTION: Command function to open a URL in the FedCM context. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: open_url\n```\n\n----------------------------------------\n\nTITLE: Defining UserAgentMetadata Class in Python\nDESCRIPTION: Creates a UserAgentMetadata class to specify User Agent Client Hints for emulation, including platform, version, and device details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UserAgentMetadata(platform, platform_version, architecture, model, mobile, brands=None, full_version_list=None, full_version=None, bitness=None, wow64=None):\n    platform : str\n    platform_version : str\n    architecture : str\n    model : str\n    mobile : bool\n    brands : Optional[List[UserAgentBrandVersion]] = None\n    full_version_list : Optional[List[UserAgentBrandVersion]] = None\n    full_version : Optional[str] = None\n    bitness : Optional[str] = None\n    wow64 : Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Target Activation Command in CDP Python API\nDESCRIPTION: Generator function to activate (focus) a target by its ID. It takes a target_id parameter and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef activate_target(target_id):\n    \"\"\"Activates (focuses) the target.\n\n    * **Parameters:**\n      **target_id** ([`TargetID`](#nodriver.cdp.target.TargetID)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining KeyframeStyle Class in Python\nDESCRIPTION: Class representing individual keyframe styles with timing and easing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass KeyframeStyle(offset, easing):\n    offset : str  # Keyframe's time offset\n    easing : str  # AnimationEffect's timing function\n```\n\n----------------------------------------\n\nTITLE: Enabling Audits in Python\nDESCRIPTION: This function is used to enable the Audits domain. It is implemented as a generator function in the Audits module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceAccess Event Class in Python\nDESCRIPTION: Event class for handling device request prompts that require user selection of a device.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/device_access.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DeviceRequestPrompted:\n    \"\"\"A device request opened a user prompt to select a device.\n    Respond with the selectPrompt or cancelPrompt command.\"\"\"\n    id_: RequestId\n    devices: List[PromptDevice]\n```\n\n----------------------------------------\n\nTITLE: Defining WebAudio ContextType Enum\nDESCRIPTION: Defines enum class for BaseAudioContext types in Web Audio API with realtime and offline options.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ContextType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    REALTIME = 'realtime'\n    OFFLINE = 'offline'\n```\n\n----------------------------------------\n\nTITLE: Defining HeavyAdIssueDetails Class in Python\nDESCRIPTION: This class represents the details of a heavy ad issue, including resolution status, reason, and affected frame.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass HeavyAdIssueDetails(resolution, reason, frame):\n\n    resolution : HeavyAdResolutionStatus\n\n    reason : HeavyAdReason\n\n    frame : AffectedFrame\n```\n\n----------------------------------------\n\nTITLE: Deleting IndexedDB Object Store Entries\nDESCRIPTION: Command generator function to delete a range of entries from an IndexedDB object store based on a key range. Takes database name, object store name, key range, and optional security parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/indexed_db.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef delete_object_store_entries(database_name, object_store_name, key_range, security_origin=None, storage_key=None, storage_bucket=None):\n    # Command implementation details\n```\n\n----------------------------------------\n\nTITLE: Shared Storage Access Type Enumeration in Python\nDESCRIPTION: Defines an enumeration of possible shared storage access types including document operations, worklet operations and header operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SharedStorageAccessType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    DOCUMENT_ADD_MODULE = 'documentAddModule'\n    DOCUMENT_SELECT_URL = 'documentSelectURL'\n    DOCUMENT_RUN = 'documentRun'\n    DOCUMENT_SET = 'documentSet'\n    DOCUMENT_APPEND = 'documentAppend'\n    DOCUMENT_DELETE = 'documentDelete'\n    DOCUMENT_CLEAR = 'documentClear'\n    DOCUMENT_GET = 'documentGet'\n    WORKLET_SET = 'workletSet'\n    WORKLET_APPEND = 'workletAppend'\n    WORKLET_DELETE = 'workletDelete'\n    WORKLET_CLEAR = 'workletClear'\n    WORKLET_GET = 'workletGet'\n    WORKLET_KEYS = 'workletKeys'\n    WORKLET_ENTRIES = 'workletEntries'\n    WORKLET_LENGTH = 'workletLength'\n    WORKLET_REMAINING_BUDGET = 'workletRemainingBudget'\n    HEADER_SET = 'headerSet'\n    HEADER_APPEND = 'headerAppend'\n    HEADER_DELETE = 'headerDelete'\n    HEADER_CLEAR = 'headerClear'\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientHintIssueDetails Class in Python\nDESCRIPTION: Class for tracking client hints related issues, used for feature deprecation notices and guidance. Contains source code location and issue reason properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass ClientHintIssueDetails(source_code_location, client_hint_issue_reason):\n    source_code_location : SourceCodeLocation\n    client_hint_issue_reason : ClientHintIssueReason\n```\n\n----------------------------------------\n\nTITLE: Defining continue_to_location Command in Python for CDP Debugger\nDESCRIPTION: Defines the continue_to_location command which continues execution until a specific location is reached. It takes a Location object and an optional target_call_frames parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef continue_to_location(location, target_call_frames=None):\n    \"\"\"Continues execution until specific location is reached.\"\"\"\n\n    # Parameters:\n    #   location (Location): Location to continue to.\n    #   target_call_frames (Optional[str]): Optional\n\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: DOM Storage Types Class Definitions\nDESCRIPTION: Class definitions for DOM storage types including SerializedStorageKey, StorageId, and Item. These classes represent data structures used in DOM storage operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_storage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SerializedStorageKey:\n    # Members and functionality documented separately\n    pass\n\nclass StorageId:\n    # Members and functionality documented separately\n    pass\n\nclass Item:\n    # Members and functionality documented separately\n    pass\n```\n\n----------------------------------------\n\nTITLE: Resolving Animation Objects in Python\nDESCRIPTION: Function to get the remote object of an Animation. It takes an animation_id as a string parameter and returns a Generator containing the corresponding remote object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef resolve_animation(animation_id):\n    \"\"\"Gets the remote object of the Animation.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing enable Command for Log Management\nDESCRIPTION: Generator function that enables the log domain, sending collected entries to the client via the entryAdded notification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    \"\"\"Enables log domain, sends the entries collected so far to the client by means of the\n    `entryAdded` notification.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Querying Element Relations in Python\nDESCRIPTION: Experimental method that finds and returns the NodeId of an element based on its relation to another node. Takes node_id and relation type as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef get_element_by_relation(node_id, relation)\n```\n\n----------------------------------------\n\nTITLE: ImageDecodeAcceleratorCapability Class Definition in Python CDP API\nDESCRIPTION: Defines a class that describes supported image decoding profiles with associated dimensions and subsampling capabilities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ImageDecodeAcceleratorCapability(image_type, max_dimensions, min_dimensions, subsamplings)\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundServiceEventReceived Event in Python\nDESCRIPTION: This snippet defines the BackgroundServiceEventReceived event class. It represents the reception of a background service event. It excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: BackgroundServiceEventReceived\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining RequestWillBeSentExtraInfo Event Class in Python for NoDriver CDP\nDESCRIPTION: This experimental class represents additional information about a requestWillBeSent event. It includes properties for request identifier, associated cookies, headers, connection timing, client security state, and site cookie information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nclass RequestWillBeSentExtraInfo(request_id, associated_cookies, headers, connect_timing, client_security_state, site_has_cookie_in_other_partition):\n    \"\"\"EXPERIMENTAL\n\n    Fired when additional information about a requestWillBeSent event is available from the\n    network stack. Not every requestWillBeSent event will have an additional\n    requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent\n    or requestWillBeSentExtraInfo will be fired first for the same request.\"\"\"\n\n    request_id: RequestId\n    \"\"\"Request identifier. Used to match this information to an existing requestWillBeSent event.\"\"\"\n\n    associated_cookies: List[AssociatedCookie]\n    \"\"\"A list of cookies potentially associated to the requested URL. This includes both cookies sent with\n    the request and the ones not sent; the latter are distinguished by having blockedReasons field set.\"\"\"\n\n    headers: Headers\n    \"\"\"Raw request headers as they will be sent over the wire.\"\"\"\n\n    connect_timing: ConnectTiming\n    \"\"\"Connection timing information for the request.\"\"\"\n\n    client_security_state: Optional[ClientSecurityState]\n    \"\"\"The client security state set for the request.\"\"\"\n\n    site_has_cookie_in_other_partition: Optional[bool]\n    \"\"\"Whether the site has partitioned cookies stored in a partition different than the current one.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining FlexItemHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing configuration data for highlighting Flex item elements. It includes optional parameters for customizing the visualization of flex items.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FlexItemHighlightConfig(base_size_box=None, base_size_border=None, flexibility_arrow=None):\n    \"\"\"Configuration data for the highlighting of Flex item elements.\"\"\"\n\n    # ... (property definitions omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Unbinding Browser Port in Python using nodriver CDP\nDESCRIPTION: This command requests browser port unbinding. It takes a port number as an argument and returns a generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tethering.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef unbind(port):\n    \"\"\"Request browser port unbinding.\n\n    Parameters:\n        port (int): Port number to unbind.\n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Pressure State Override in Python\nDESCRIPTION: Experimental method to provide a pressure state for PressureObserver users. Requires the source to be previously overridden. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef set_pressure_state_override(source, state):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Tracking Cache Storage for Origin in Python\nDESCRIPTION: Registers a security origin to be notified when an update occurs to its cache storage list.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntrack_cache_storage_for_origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Defining ViewOrScrollTimeline Class in Python\nDESCRIPTION: Class representing timeline configuration for scroll-driven and view-based animations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ViewOrScrollTimeline(axis, source_node_id=None, start_offset=None, end_offset=None, subject_node_id=None):\n    axis : ScrollOrientation  # Scroll orientation\n    source_node_id : Optional[BackendNodeId]  # Scroll container node\n    start_offset : Optional[float]  # Starting scroll position\n    end_offset : Optional[float]  # Ending scroll position \n    subject_node_id : Optional[BackendNodeId]  # Element whose visibility defines progress\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation Tracking in Python\nDESCRIPTION: Demonstrates the use of the disable() command generator function to turn off animation tracking. This function yields no arguments and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/animation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nyield disable()\n```\n\n----------------------------------------\n\nTITLE: ImageType Enum Definition in Python CDP API\nDESCRIPTION: Defines an enumeration for image formats, supporting JPEG, WEBP, and UNKNOWN types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ImageType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n```\n\n----------------------------------------\n\nTITLE: RST Function Documentation Structure\nDESCRIPTION: ReStructuredText directive for documenting Python functions, specifically used for CDP command documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fetch.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: continue_request\n```\n\n----------------------------------------\n\nTITLE: Defining IssueAdded Event Class in Python\nDESCRIPTION: Event class for handling when new inspector issues are added, containing the inspector issue instance.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass IssueAdded(issue):\n    issue: InspectorIssue\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cache Entry in CDP Cache Storage\nDESCRIPTION: Command function to delete a specific entry from a cache. Takes a cache ID and request URL, and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef delete_entry(cache_id, request):\n    \"\"\"Deletes a cache entry.\n\n    * **Parameters:**\n      * **cache_id** ([`CacheId`](#nodriver.cdp.cache_storage.CacheId)) – Id of cache where the entry will be deleted.\n      * **request** ([`str`](https://docs.python.org/3/library/stdtypes.html#str)) – URL spec of the request.\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CentralState Enumeration in Python\nDESCRIPTION: Defines an enumeration class CentralState with three possible states for a Bluetooth Central: ABSENT, POWERED_OFF, and POWERED_ON.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/bluetooth_emulation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CentralState(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ABSENT = 'absent'\n    POWERED_OFF = 'powered-off'\n    POWERED_ON = 'powered-on'\n```\n\n----------------------------------------\n\nTITLE: Layer Tree Change Event Class Definition in Python\nDESCRIPTION: Defines a LayerTreeDidChange event class with an optional attribute for the updated layer tree.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass LayerTreeDidChange:\n    layers: Optional[List[Layer]]\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollRect Class in Python\nDESCRIPTION: Defines the ScrollRect class representing a rectangle where scrolling happens on the main thread, with properties for the rectangle and scroll type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScrollRect(rect, type_):\n    \"\"\"Rectangle where scrolling happens on the main thread.\"\"\"\n\n    rect : Rect\n        \"\"\"Rectangle itself.\"\"\"\n\n    type_ : str\n        \"\"\"Reason for rectangle to force scrolling on the main thread\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining AffectedRequest Class in Python\nDESCRIPTION: Class representing information about a request affected by an inspector issue. Contains a unique request ID and optional URL.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AffectedRequest(request_id, url=None):\n    request_id: RequestId  # The unique request id\n    url: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining HeapProfiler SamplingHeapProfile Class\nDESCRIPTION: Class representing a complete sampling profile containing the root node and list of samples.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SamplingHeapProfile(head, samples):\n    head: SamplingHeapProfileNode\n    samples: List[SamplingHeapProfileSample]\n```\n\n----------------------------------------\n\nTITLE: Undoing Last Action in Python\nDESCRIPTION: Undoes the last performed action. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_55\n\nLANGUAGE: Python\nCODE:\n```\ndef undo():\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: VideoEncodeAcceleratorCapability Class Definition in Python CDP API\nDESCRIPTION: Defines a class that describes supported video encoding profiles with maximum resolution and framerate capabilities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass VideoEncodeAcceleratorCapability(profile, max_resolution, max_framerate_numerator, max_framerate_denominator)\n```\n\n----------------------------------------\n\nTITLE: Defining PaintProfile Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the PaintProfile type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PaintProfile\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing BackendNode Class in Python\nDESCRIPTION: Defines a BackendNode class representing a backend DOM node with type, name, and identifier properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BackendNode(node_type, node_name, backend_node_id):\n    \"\"\"Backend node with a friendly name.\"\"\"\n\n    node_type: int\n    \"\"\"Node's nodeType.\"\"\"\n\n    node_name: str\n    \"\"\"Node's nodeName.\"\"\"\n\n    backend_node_id: BackendNodeId\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for PropertyPreview in CDP Runtime\nDESCRIPTION: Defines the PropertyPreview class for representing abbreviated views of object properties, including their name, type, and optional value information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PropertyPreview(name, type_, value=None, value_preview=None, subtype=None):\n\n    name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    type_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    value *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    value_preview *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`ObjectPreview`](#nodriver.cdp.runtime.ObjectPreview)]* *= None*\n\n    subtype *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Clear Trust Tokens - Python\nDESCRIPTION: Function to remove Trust Tokens issued by a specific origin while preserving other stored data. Returns boolean indicating if tokens were deleted.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef clear_trust_tokens(issuer_origin: str) -> Generator[Dict[str, Any], Dict[str, Any], bool]\n```\n\n----------------------------------------\n\nTITLE: Tracking IndexedDB for Storage Key in Python\nDESCRIPTION: Registers a storage key to be notified when an update occurs to its IndexedDB.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ntrack_indexed_db_for_storage_key(storage_key)\n```\n\n----------------------------------------\n\nTITLE: Defining DOM Counter Structure in Python\nDESCRIPTION: Defines a class for tracking DOM object counter data with a name and count.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass DOMCounter(name, count):\n    name: str    # Object name (volatile across runs)\n    count: int    # Object count\n```\n\n----------------------------------------\n\nTITLE: Defining EventMetadata class for CDP Background Service events\nDESCRIPTION: A data class that represents a key-value pair for additional event information passed along with background service events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass EventMetadata(key, value):\n    \"\"\"\n    A key-value pair for additional event information to pass along.\n    \"\"\"\n\n    key: str\n    value: str\n```\n\n----------------------------------------\n\nTITLE: Setting Force Update on Page Load for Service Workers in Python\nDESCRIPTION: Command function to set whether service workers should be force-updated when a page loads. This can be useful for development and testing scenarios.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/service_worker.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef set_force_update_on_page_load(force_update_on_page_load):\n    * **Parameters:**\n      **force_update_on_page_load** ([`bool`](https://docs.python.org/3/library/functions.html#bool)) – \n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Sphinx Event Documentation\nDESCRIPTION: Documentation for CDP tracing events using Sphinx autoclass directives. Covers buffer usage, data collection and tracing completion events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/tracing.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: BufferUsage\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DataCollected\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: TracingComplete\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining SourceOrderConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing configuration data for drawing the source order of an element's children. It includes properties for parent and child outline colors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SourceOrderConfig(parent_outline_color, child_outline_color):\n    \"\"\"Configuration data for drawing the source order of an elements children.\"\"\"\n\n    parent_outline_color : RGBA\n        \"\"\"the color to outline the given element in.\"\"\"\n\n    child_outline_color : RGBA\n        \"\"\"the color to outline the child elements in.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Domain in Python\nDESCRIPTION: This function enables the network domain, allowing tracking of network events. It returns a generator that yields nothing and completes the operation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/network.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef enable(\n    max_total_buffer_size: Optional[int] = None,\n    max_resource_buffer_size: Optional[int] = None,\n    max_post_data_size: Optional[int] = None\n) -> Generator[Dict[str, Any], Dict[str, Any], None]: ...\n```\n\n----------------------------------------\n\nTITLE: Defining StreamFormat Enum in Python\nDESCRIPTION: Defines the StreamFormat enum for specifying the data format of a trace. It includes options for JSON and protocol buffer formats.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass StreamFormat(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    JSON = 'json'\n    PROTO = 'proto'\n```\n\n----------------------------------------\n\nTITLE: EventListener Class Reference\nDESCRIPTION: Class documentation for EventListener that represents DOM event listeners that can be monitored and debugged.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_debugger.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: EventListener\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining FileHandler Class in Python\nDESCRIPTION: Class representing file handler configuration for PWAs, containing action, accepts list, and display name.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/pwa.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FileHandler(action, accepts, display_name):\n    action: str\n    accepts: List[FileHandlerAccept]\n    display_name: str\n```\n\n----------------------------------------\n\nTITLE: Defining DOMNode Class in Python\nDESCRIPTION: Class definition for representing a Node in the DOM tree with properties like node type, name, value and various optional attributes for specific element types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DOMNode(node_type, node_name, node_value, backend_node_id, text_value=None, input_value=None, input_checked=None, option_selected=None, child_node_indexes=None, attributes=None, pseudo_element_indexes=None, layout_node_index=None, document_url=None, base_url=None, content_language=None, document_encoding=None, public_id=None, system_id=None, frame_id=None, content_document_index=None, pseudo_type=None, shadow_root_type=None, is_clickable=None, event_listeners=None, current_source_url=None, origin_url=None, scroll_offset_x=None, scroll_offset_y=None)\n```\n\n----------------------------------------\n\nTITLE: Documenting Security Classes in RST\nDESCRIPTION: ReStructuredText documentation for security-related classes including certificate handling, security states, and content security types\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/security.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: CertificateId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: MixedContentType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: SecurityState\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining ScreencastFrame Event Class in Python\nDESCRIPTION: This experimental class represents a compressed image data frame requested by the startScreencast method. It includes the image data, metadata, and session ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nclass ScreencastFrame(data, metadata, session_id):\n    \"\"\"\n    EXPERIMENTAL\n\n    Compressed image data requested by the `startScreencast`.\n    \"\"\"\n\n    data: str\n    metadata: ScreencastFrameMetadata\n    session_id: int\n```\n\n----------------------------------------\n\nTITLE: Set Container Query Function Signature\nDESCRIPTION: Experimental function that modifies the expression of a container query. Returns the modified CSS container query rule.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef set_container_query_text(style_sheet_id: StyleSheetId, range_: Any, text: str) -> Generator[Dict[str, Any], Dict[str, Any], CSSContainerQuery]\n```\n\n----------------------------------------\n\nTITLE: SystemInfo Domain Type Definitions\nDESCRIPTION: Class definitions for various system information types including GPU devices, video capabilities, and process information. These classes are used as return values and command arguments in the CDP API.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/system_info.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGPUDevice\nSize\nVideoDecodeAcceleratorCapability\nVideoEncodeAcceleratorCapability\nSubsamplingFormat\nImageType\nImageDecodeAcceleratorCapability\nGPUInfo\nProcessInfo\n```\n\n----------------------------------------\n\nTITLE: Trust Token Operation Type Enum Definition\nDESCRIPTION: Enum class defining types of trust token operations including issuance, redemption and signing.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass TrustTokenOperationType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ISSUANCE = 'Issuance'\n    REDEMPTION = 'Redemption'\n    SIGNING = 'Signing'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detached DOM Nodes in Python\nDESCRIPTION: Experimental method that returns a list of detached DOM nodes as DetachedElementInfo objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef get_detached_dom_nodes()\n```\n\n----------------------------------------\n\nTITLE: Defining NodesConnected Event Class in Python\nDESCRIPTION: Class that represents the event when two AudioNodes are connected, including source and destination details with optional input/output indices.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass NodesConnected(context_id, source_id, destination_id, source_output_index, destination_input_index):\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: Optional[float]\n    destination_input_index: Optional[float]\n```\n\n----------------------------------------\n\nTITLE: Sensor Reading Update Method\nDESCRIPTION: Updates sensor readings for previously overridden sensor types. Takes sensor type and reading parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef set_sensor_override_readings(type_, reading: SensorReading) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining StorageId Class in Python CDP Implementation\nDESCRIPTION: Python class definition for StorageId that identifies DOM Storage. It includes properties to specify whether it's local storage, the security origin, and storage key.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_storage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass StorageId(is_local_storage, security_origin=None, storage_key=None):\n\n    DOM Storage identifier.\n\n    is_local_storage *: [`bool`](https://docs.python.org/3/library/functions.html#bool)*\n\n    Whether the storage is local storage (not session storage).\n\n    security_origin *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    Security origin for the storage.\n\n    storage_key *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`SerializedStorageKey`](#nodriver.cdp.dom_storage.SerializedStorageKey)]* *= None*\n\n    Represents a key by which DOM Storage keys its CachedStorageAreas\n```\n\n----------------------------------------\n\nTITLE: Disabling Document Cookie API in Python\nDESCRIPTION: This experimental function enables or disables the document.cookie API. It takes a boolean parameter to indicate whether the API should be disabled.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nset_document_cookie_disabled(disabled)\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerProperty Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerProperty class with name and value attributes, corresponding to kMediaPropertyChange.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerProperty(name, value)\n```\n\n----------------------------------------\n\nTITLE: Importing CacheStorage Module in Python\nDESCRIPTION: Shows how to import the CacheStorage module from the nodriver.cdp package. This module provides access to the experimental CacheStorage domain in CDP.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.cache_storage\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Tracking in CDP\nDESCRIPTION: This command disables database tracking and prevents database events from being sent to the client. It's implemented as a generator function returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/database.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables database tracking, prevents database events from being sent to the client.\"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Disabling DOMSnapshot Domain in Python using CDP\nDESCRIPTION: This function is used to disable the DOMSnapshot domain. It's a generator function that yields and resumes with specific argument types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_snapshot.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: Defining BackForwardCacheNotRestoredReason Constants in Python\nDESCRIPTION: A comprehensive set of string constants representing different reasons why a page could not be restored from back-forward cache. Includes network, security, API usage and browser feature related reasons.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nRENDER_FRAME_HOST_REUSED_CROSS_SITE = 'RenderFrameHostReused_CrossSite'\nSERVICE_WORKER_CLAIM = 'ServiceWorkerClaim'\nIGNORE_EVENT_AND_EVICT = 'IgnoreEventAndEvict'\n# ... additional constants\n```\n\n----------------------------------------\n\nTITLE: EntryAdded Event Documentation (Python)\nDESCRIPTION: Event class for handling log entry additions in the CDP log module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/log.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: EntryAdded\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Prerender Mismatched Headers Class Definition\nDESCRIPTION: Defines a class to store information about mismatched headers during prerendering operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PrerenderMismatchedHeaders(header_name, initial_value=None, activation_value=None):\n    header_name: str\n    initial_value: Optional[str] = None\n    activation_value: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: TextBoxSnapshot Class Definition - Python\nDESCRIPTION: A class representing post-layout rendered text positions. Contains properties for layout index, bounding box coordinates, and text position information. The layout should not be considered stable between versions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_snapshot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TextBoxSnapshot(layout_index, bounds, start, length):\n    layout_index: List[int]  # Index of layout tree node owner\n    bounds: List[Rectangle]    # Absolute position bounding box\n    start: List[int]          # Starting character index\n    length: List[int]         # Number of characters in substring\n```\n\n----------------------------------------\n\nTITLE: Defining StorageArea Enum in Python for CDP Extensions\nDESCRIPTION: An enumeration class defining the various storage areas available for browser extensions in the Chrome DevTools Protocol. The storage areas include session, local, sync, and managed storage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass StorageArea(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    SESSION *= 'session'*\n\n    LOCAL *= 'local'*\n\n    SYNC *= 'sync'*\n\n    MANAGED *= 'managed'*\n```\n\n----------------------------------------\n\nTITLE: Remote Location Configuration: set_remote_locations\nDESCRIPTION: Experimental function to enable target discovery for specified remote locations. Takes a list of RemoteLocation objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndef set_remote_locations(locations)\n```\n\n----------------------------------------\n\nTITLE: Set Keyframe Key Function Signature\nDESCRIPTION: Function that modifies the keyframe rule key text. Returns the resulting key text after modification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef set_keyframe_key(style_sheet_id: StyleSheetId, range_: Any, key_text: str) -> Generator[Dict[str, Any], Dict[str, Any], Value]\n```\n\n----------------------------------------\n\nTITLE: Debug Border Overlay Configuration in Python\nDESCRIPTION: Method to toggle debug border visibility on layers. Takes a boolean parameter to control visibility and returns a Generator of Dict mappings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef set_show_debug_borders(show: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining ColorFormat Enum in Python for CDP Overlay\nDESCRIPTION: Defines an enum class ColorFormat with values for different color format options used in the overlay configuration.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass ColorFormat(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    RGB = 'rgb'\n\n    HSL = 'hsl'\n\n    HWB = 'hwb'\n\n    HEX_ = 'hex'\n```\n\n----------------------------------------\n\nTITLE: Defining AudioParamWillBeDestroyed Event Class in Python\nDESCRIPTION: Class that represents the event when an AudioParam is destroyed, taking context_id, node_id, and param_id as GraphObjectId parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AudioParamWillBeDestroyed(context_id, node_id, param_id):\n    context_id: GraphObjectId\n    node_id: GraphObjectId\n    param_id: GraphObjectId\n```\n\n----------------------------------------\n\nTITLE: Implementing VirtualTimePolicy Enum in Python\nDESCRIPTION: Defines a VirtualTimePolicy enum class with options for controlling virtual time advancement in the scheduler.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass VirtualTimePolicy(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ADVANCE = 'advance'\n    PAUSE = 'pause'\n    PAUSE_IF_NETWORK_FETCHES_PENDING = 'pauseIfNetworkFetchesPending'\n```\n\n----------------------------------------\n\nTITLE: Starting Screencast in Python\nDESCRIPTION: Initiates sending each frame using the screencastFrame event. This is an experimental feature with optional parameters for image format, quality, and dimensions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\ndef start_screencast(format_=None, quality=None, max_width=None, max_height=None, every_nth_frame=None) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerErrorSourceLocation Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerErrorSourceLocation class with file and line attributes, representing logged source line numbers reported in an error.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerErrorSourceLocation(file, line)\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenshotParams Type\nDESCRIPTION: Specifies the structure for screenshot parameters in headless mode. This is an auto-generated class documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/headless_experimental.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ScreenshotParams:\n    \"\"\"Screenshot parameters for headless mode\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Commands in Python\nDESCRIPTION: Defines generator functions for performance-related commands such as disable, enable, get_metrics, and set_time_domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"\n    Disable collecting and reporting metrics.\n    \n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n\ndef enable(time_domain=None):\n    \"\"\"\n    Enable collecting and reporting metrics.\n    \n    Parameters:\n        time_domain (Optional[str]): Time domain to use for collecting and reporting duration metrics.\n    \n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n\ndef get_metrics():\n    \"\"\"\n    Retrieve current values of run-time metrics.\n    \n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], List[Metric]]\n    \n    Returns:\n        Current values for run-time metrics.\n    \"\"\"\n\ndef set_time_domain(time_domain):\n    \"\"\"\n    Sets time domain to use for collecting and reporting duration metrics.\n    Note that this must be called before enabling metrics collection. Calling\n    this method while metrics collection is enabled returns an error.\n    \n    Deprecated since version 1.3.\n    \n    EXPERIMENTAL\n    \n    Parameters:\n        time_domain (str): Time domain\n    \n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling DOMSnapshot Domain in Python using CDP\nDESCRIPTION: This function is used to enable the DOMSnapshot domain. It's a generator function that yields and resumes with specific argument types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_snapshot.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining WebTransportCreated Event Class in Python for NoDriver CDP\nDESCRIPTION: This class represents the event fired upon WebTransport creation. It includes properties for the transport identifier, URL, timestamp, and initiator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nclass WebTransportCreated(transport_id, url, timestamp, initiator):\n    \"\"\"Fired upon WebTransport creation.\"\"\"\n\n    transport_id: RequestId\n    \"\"\"WebTransport identifier.\"\"\"\n\n    url: str\n    \"\"\"WebTransport request URL.\"\"\"\n\n    timestamp: MonotonicTime\n    \"\"\"Timestamp.\"\"\"\n\n    initiator: Optional[Initiator]\n    \"\"\"Request initiator.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerPropertiesChanged Event Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerPropertiesChanged event class with player_id and properties attributes, used to set, override, or remove player properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerPropertiesChanged(player_id, properties)\n```\n\n----------------------------------------\n\nTITLE: Defining SubresourceWebBundleMetadataReceived Class in Python for NoDriver CDP\nDESCRIPTION: This class represents an event fired when parsing a .wbn file has succeeded. It includes the request identifier and a list of URLs of resources in the web bundle.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nclass SubresourceWebBundleMetadataReceived(request_id, urls):\n\n    request_id : RequestId\n\n    urls : List[str]\n```\n\n----------------------------------------\n\nTITLE: Events Documentation\nDESCRIPTION: Documentation block for the DragIntercepted event class used for handling intercepted drag operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/input_.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: DragIntercepted\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Using received_ in Response Handling for NoDriver CDP\nDESCRIPTION: Code snippet showing a partial text reference used to identify requests paused in the 'redirect received' state. This is referenced in the documentation for the get_response_body method.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fetch.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreceived_\n```\n\n----------------------------------------\n\nTITLE: Marking Undoable State in NoDriver Python API\nDESCRIPTION: An experimental generator function that marks the last undoable state in the DOM. Returns dictionary objects containing status information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\ndef mark_undoable_state():\n    \"\"\"Marks last undoable state.\n\n    EXPERIMENTAL\n    \"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Debugger Event Classes - Python\nDESCRIPTION: Class definitions for debugging events including BreakpointResolved, Paused, Resumed, ScriptFailedToParse, and ScriptParsed. These classes handle various debugging events and their associated data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass BreakpointResolved:\n    def __init__(self, breakpoint_id, location):\n        self.breakpoint_id = breakpoint_id\n        self.location = location\n\nclass Paused:\n    def __init__(self, call_frames, reason, data, hit_breakpoints, async_stack_trace,\n                 async_stack_trace_id, async_call_stack_trace_id):\n        self.call_frames = call_frames\n        self.reason = reason\n        self.data = data\n        self.hit_breakpoints = hit_breakpoints\n        self.async_stack_trace = async_stack_trace\n        self.async_stack_trace_id = async_stack_trace_id\n        self.async_call_stack_trace_id = async_call_stack_trace_id\n\nclass Resumed:\n    pass\n\nclass ScriptFailedToParse:\n    def __init__(self, script_id, url, start_line, start_column, end_line, end_column,\n                 execution_context_id, hash_, execution_context_aux_data, source_map_url,\n                 has_source_url, is_module, length, stack_trace, code_offset,\n                 script_language, embedder_name):\n        # Initialize attributes\n        pass\n\nclass ScriptParsed:\n    def __init__(self, script_id, url, start_line, start_column, end_line, end_column,\n                 execution_context_id, hash_, execution_context_aux_data, is_live_edit,\n                 source_map_url, has_source_url, is_module, length, stack_trace,\n                 code_offset, script_language, debug_symbols, embedder_name):\n        # Initialize attributes\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining BucketFileSystemLocator Class Type in FileSystem CDP Domain\nDESCRIPTION: Class definition for the BucketFileSystemLocator type in the FileSystem CDP domain, containing properties for storage key, path components, and optional bucket name.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/file_system.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BucketFileSystemLocator(storage_key, path_components, bucket_name=None):\n\n    storage_key *: [`SerializedStorageKey`](storage.md#nodriver.cdp.storage.SerializedStorageKey)*\n\n    path_components *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]*\n\n    bucket_name *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Debug Message Display Function\nDESCRIPTION: Function to set a message displayed during debugger paused state. Controls resume and step over functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\ndef set_paused_in_debugger_message(message=None):\n```\n\n----------------------------------------\n\nTITLE: Python Class Definition for ObjectPreview in CDP Runtime\nDESCRIPTION: Defines the ObjectPreview class for abbreviated representations of JavaScript objects, including their type, properties, and entries for collection types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ObjectPreview(type_, overflow, properties, subtype=None, description=None, entries=None):\n\n    type_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    overflow *: [`bool`](https://docs.python.org/3/library/functions.html#bool)*\n\n    properties *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`PropertyPreview`](#nodriver.cdp.runtime.PropertyPreview)]*\n\n    subtype *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    description *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n\n    entries *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`EntryPreview`](#nodriver.cdp.runtime.EntryPreview)]]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Command Documentation - enable\nDESCRIPTION: Documentation for the enable generator function command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/headless_experimental.rst#2025-04-21_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Storage Event Classes Definition in Python\nDESCRIPTION: Class definitions for storage events including CacheStorageListUpdated, IndexedDBContentUpdated, IndexedDBListUpdated, InterestGroupAccessed, InterestGroupAuctionEventOccurred, and others. Each class represents a specific storage-related event with its associated properties and type annotations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass CacheStorageListUpdated(origin, storage_key, bucket_id):\n    origin: str\n    storage_key: str\n    bucket_id: str\n\nclass IndexedDBContentUpdated(origin, storage_key, bucket_id, database_name, object_store_name):\n    origin: str\n    storage_key: str\n    bucket_id: str\n    database_name: str\n    object_store_name: str\n\nclass IndexedDBListUpdated(origin, storage_key, bucket_id):\n    origin: str\n    storage_key: str\n    bucket_id: str\n\nclass InterestGroupAccessed(access_time, type_, owner_origin, name, component_seller_origin, bid, bid_currency, unique_auction_id):\n    access_time: TimeSinceEpoch\n    type_: InterestGroupAccessType\n    owner_origin: str\n    name: str\n    component_seller_origin: Optional[str]\n    bid: Optional[float]\n    bid_currency: Optional[str]\n    unique_auction_id: Optional[InterestGroupAuctionId]\n\nclass InterestGroupAuctionEventOccurred(event_time, type_, unique_auction_id, parent_auction_id, auction_config):\n    event_time: TimeSinceEpoch\n    type_: InterestGroupAuctionEventType\n    unique_auction_id: InterestGroupAuctionId\n    parent_auction_id: Optional[InterestGroupAuctionId]\n    auction_config: Optional[dict]\n```\n\n----------------------------------------\n\nTITLE: Implementing set_recording command for CDP Background Service\nDESCRIPTION: A generator function that enables or disables recording for a background service. Takes a boolean parameter for recording state and a ServiceName parameter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef set_recording(should_record, service):\n    \"\"\"\n    Set the recording state for the service.\n    \"\"\"\n    # Parameters:\n    #   should_record (bool): \n    #   service (ServiceName): \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Screencast Frame in Python\nDESCRIPTION: Experimental method to acknowledge receipt of a screencast frame. Takes a session_id parameter representing the frame number.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndef screencast_frame_ack(session_id):\n    \"\"\"Acknowledges that a screencast frame has been received by the frontend.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing start_observing command for CDP Background Service\nDESCRIPTION: A generator function that enables event updates for a specific background service. Takes a ServiceName parameter to specify which service to observe.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef start_observing(service):\n    \"\"\"\n    Enables event updates for the service.\n    \"\"\"\n    # Parameters:\n    #   service (ServiceName): \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Implementing enable Command in Python for CDP Media Domain\nDESCRIPTION: Implements the enable command to enable the Media domain. Returns a generator with None as the final return type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    # Implementation details\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Cast Domain Commands in Python\nDESCRIPTION: Defines generator functions for Cast domain commands. These functions yield and resume with specific argument types, returning command-specific result types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/cast.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: set_sink_to_use\n\n.. autofunction:: start_desktop_mirroring\n\n.. autofunction:: start_tab_mirroring\n\n.. autofunction:: stop_casting\n```\n\n----------------------------------------\n\nTITLE: Defining Property Descriptor Classes in Python\nDESCRIPTION: Defines classes for internal and private property descriptors that represent JavaScript object properties. Includes getters, setters, and value fields with typing information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass InternalPropertyDescriptor(name, value=None):\n    name: str\n    value: Optional[RemoteObject] = None\n```\n\nLANGUAGE: python\nCODE:\n```\nclass PrivatePropertyDescriptor(name, value=None, get=None, set_=None):\n    name: str\n    value: Optional[RemoteObject] = None\n    get: Optional[RemoteObject] = None\n    set_: Optional[RemoteObject] = None\n```\n\n----------------------------------------\n\nTITLE: Disabling Autofill Domain Notifications in Python CDP\nDESCRIPTION: Command that disables Autofill domain notifications in the Chrome DevTools Protocol. Returns a generator with no output value.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/autofill.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables autofill domain notifications.\"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseReceivedEarlyHints Class in Python for NoDriver CDP\nDESCRIPTION: This class represents an event fired when 103 Early Hints headers are received. It includes the request identifier and raw response headers.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nclass ResponseReceivedEarlyHints(request_id, headers):\n\n    request_id : RequestId\n\n    headers : Headers\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerEvent Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerEvent class with timestamp and value attributes, corresponding to kMediaEventTriggered.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerEvent(timestamp, value)\n```\n\n----------------------------------------\n\nTITLE: Python Attribution Reporting Constants and Base Classes\nDESCRIPTION: Defines basic constant EVENT and base classes for handling unsigned and signed integers in different bases\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEVENT = 'event'\n\nclass UnsignedInt64AsBase10:\n    pass\n\nclass UnsignedInt128AsBase16:\n    pass\n\nclass SignedInt64AsBase10:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotId Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the SnapshotId type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: SnapshotId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Command function to enable Cast sink observation\nDESCRIPTION: A generator function that starts observing for Cast sinks compatible with tab mirroring or a specific presentation URL. It also observes for issue messages.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef enable(presentation_url=None):\n    \"\"\"\n    Starts observing for sinks that can be used for tab mirroring, and if set,\n    sinks compatible with `presentationUrl` as well. When sinks are found, a\n    `sinksUpdated` event is fired.\n    Also starts observing for issue messages. When an issue is added or removed,\n    an `issueUpdated` event is fired.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining RecordingStateChanged Event in Python\nDESCRIPTION: This snippet defines the RecordingStateChanged event class. It likely represents a change in the recording state of background services. It excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: RecordingStateChanged\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining LayerPainted Event in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the LayerPainted event in the LayerTree domain. This event is automatically instantiated by the API when a layer has been painted.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LayerPainted\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Tracking in CDP\nDESCRIPTION: This command enables database tracking, allowing database events to be delivered to the client. It's implemented as a generator function returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/database.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    \"\"\"Enables database tracking, database events will now be delivered to the client.\"\"\"\n    # Return type:\n    # Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Defining AdFrameStatus Class in Python for CDP Page Domain\nDESCRIPTION: Creates the AdFrameStatus class to indicate whether a frame has been identified as an ad and why, including ad_frame_type and optional explanations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AdFrameStatus(ad_frame_type, explanations=None):\n    \"\"\"Indicates whether a frame has been identified as an ad and why.\"\"\"\n\n    ad_frame_type: AdFrameType\n    explanations: Optional[List[AdFrameExplanation]] = None\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthn Credential Class\nDESCRIPTION: Defines the Credential class that represents a WebAuthn credential with properties like credential ID, resident status, private key and signature counter.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Credential:\n    def __init__(self, credential_id, is_resident_credential, private_key, sign_count,\n                 rp_id=None, user_handle=None, large_blob=None, backup_eligibility=None,\n                 backup_state=None, user_name=None, user_display_name=None):\n        self.credential_id = credential_id\n        self.is_resident_credential = is_resident_credential\n        self.private_key = private_key\n        self.sign_count = sign_count\n```\n\n----------------------------------------\n\nTITLE: Command function to start desktop mirroring to a Cast sink\nDESCRIPTION: A generator function that initiates mirroring of the desktop to a specified Cast sink device.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef start_desktop_mirroring(sink_name):\n    \"\"\"\n    Starts mirroring the desktop to the sink.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Font Face Properties Definition\nDESCRIPTION: Class defining web font properties including font family, style, variant, weight and other specifications according to W3C standards.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FontFace(font_family, font_style, font_variant, font_weight, font_stretch, font_display, unicode_range, src, platform_font_family, font_variation_axes=None):\n    font_family: str\n    font_style: str\n    font_variant: str\n    font_weight: str\n    font_stretch: str\n    font_display: str\n    unicode_range: str\n    src: str\n    platform_font_family: str\n    font_variation_axes: Optional[List[FontVariationAxis]]\n```\n\n----------------------------------------\n\nTITLE: Querying System Info Commands\nDESCRIPTION: Command functions in the SystemInfo domain for retrieving system information. These are generator functions that return specific system details like feature states, general system info, and process information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/system_info.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nget_feature_state\nget_info\nget_process_info\n```\n\n----------------------------------------\n\nTITLE: Defining ScanRecord Class in Python\nDESCRIPTION: Defines a class to store byte data of advertisement packets sent by Bluetooth devices, including optional fields for name, UUIDs, appearance, TX power, and manufacturer data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/bluetooth_emulation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ScanRecord(name=None, uuids=None, appearance=None, tx_power=None, manufacturer_data=None):\n    name: Optional[str] = None\n    uuids: Optional[List[str]] = None\n    appearance: Optional[int] = None\n    tx_power: Optional[int] = None\n    manufacturer_data: Optional[List[ManufacturerData]] = None\n```\n\n----------------------------------------\n\nTITLE: Stopping Memory Sampling in Python\nDESCRIPTION: Method to stop the collection of native memory profile. Returns a Generator that yields dictionaries containing final sampling data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef stop_sampling()\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Event Class in Python\nDESCRIPTION: Defines the Metrics event class representing current values of metrics with metrics list and title attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Metrics(metrics, title):\n    \"\"\"\n    Current values of the metrics.\n    \n    metrics : List[Metric]\n        Current values of the metrics.\n    \n    title : str\n        Timestamp title.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module in Python\nDESCRIPTION: This snippet shows how to import the CSS module from the NoDriver CDP implementation. It's a prerequisite for using any of the CSS-related functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/css.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.css\n```\n\n----------------------------------------\n\nTITLE: Defining WebAudio ChannelCountMode Enum\nDESCRIPTION: Defines enum class for AudioNode::ChannelCountMode with clamped-max, explicit and max modes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ChannelCountMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    CLAMPED_MAX = 'clamped-max'\n    EXPLICIT = 'explicit'\n    MAX_ = 'max'\n```\n\n----------------------------------------\n\nTITLE: Setting Outer HTML in Python\nDESCRIPTION: Sets node HTML markup and returns the new node id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\ndef set_outer_html(node_id, outer_html):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing Console Module in Python\nDESCRIPTION: This snippet shows how to import the console module from the nodriver.cdp package. It's important to note that this module is deprecated and users should consider using Runtime or Log instead.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/console.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.console\n```\n\n----------------------------------------\n\nTITLE: Implementing TrustTokenOperationDone Class in Python for NoDriver CDP\nDESCRIPTION: This class represents an event fired for each Trust Token operation. It includes details about the operation status, type, and associated data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\nclass TrustTokenOperationDone(status, type_, request_id, top_level_origin, issuer_origin, issued_token_count):\n\n    status : str\n\n    type_ : TrustTokenOperationType\n\n    request_id : RequestId\n\n    top_level_origin : Optional[str]\n\n    issuer_origin : Optional[str]\n\n    issued_token_count : Optional[int]\n```\n\n----------------------------------------\n\nTITLE: Defining Media Domain Commands in Python for NoDriver CDP\nDESCRIPTION: This snippet shows the structure of command definitions for the Media domain. It includes two commands: disable and enable. These are generator functions that yield and return specific types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/media.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining start_observing Command in Python\nDESCRIPTION: This snippet defines the start_observing command as an autofunction. It's likely used to begin observation of background service events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: start_observing\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerMessagesLogged Event Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerMessagesLogged event class with player_id and messages attributes, used to send a list of messages that need to be delivered.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerMessagesLogged(player_id, messages)\n```\n\n----------------------------------------\n\nTITLE: Defining set_recording Command in Python\nDESCRIPTION: This snippet defines the set_recording command as an autofunction. It's likely used to start or stop recording of background service events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: set_recording\n```\n\n----------------------------------------\n\nTITLE: Defining DataCollected Event Class in Python\nDESCRIPTION: Defines the DataCollected event class with a value attribute containing a list of collected trace events. This class is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tracing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DataCollected(value):\n    value: List[dict]\n```\n\n----------------------------------------\n\nTITLE: Implementing AdScriptId Class in Python for CDP Page Domain\nDESCRIPTION: Defines the AdScriptId class to identify the bottom-most script that caused a frame to be labeled as an ad, including script_id and debugger_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AdScriptId(script_id, debugger_id):\n    \"\"\"Identifies the bottom-most script which caused the frame to be labelled\n    as an ad.\"\"\"\n\n    script_id: ScriptId\n    debugger_id: UniqueDebuggerId\n```\n\n----------------------------------------\n\nTITLE: Defining KeyframesRule Class in Python\nDESCRIPTION: Class representing keyframe animation rules and styles.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass KeyframesRule(keyframes, name=None):\n    keyframes : List[KeyframeStyle]  # List of animation keyframes\n    name : Optional[str]  # CSS keyframed animation name\n```\n\n----------------------------------------\n\nTITLE: Setting Local Font Rendering in Python\nDESCRIPTION: Function to enable or disable rendering of local CSS fonts. Takes a boolean parameter and returns a Generator of dictionaries. This is marked as experimental functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef set_local_fonts_enabled(enabled: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Command function to disable Cast sink observation\nDESCRIPTION: A generator function that stops observing for sinks and issues in the Cast domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"\n    Stops observing for sinks and issues.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: CSS Container Query Implementation\nDESCRIPTION: Python class for handling CSS container query rules with properties for query text, range, stylesheet ID and container specifications.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CSSContainerQuery(text, range_=None, style_sheet_id=None, name=None, physical_axes=None, logical_axes=None, queries_scroll_state=None):\n    text: str\n    range_: Optional[SourceRange]\n    style_sheet_id: Optional[StyleSheetId]\n    name: Optional[str]\n    physical_axes: Optional[PhysicalAxes]\n    logical_axes: Optional[LogicalAxes]\n    queries_scroll_state: Optional[bool]\n```\n\n----------------------------------------\n\nTITLE: Releasing Animations in Python using CDP\nDESCRIPTION: This function releases animations, potentially freeing up resources. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: release_animations\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Class Type in FileSystem CDP Domain\nDESCRIPTION: Class definition for the Directory type in the FileSystem CDP domain, containing properties for directory name, nested directories list, and nested files list.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/file_system.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Directory(name, nested_directories, nested_files):\n\n    name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    nested_directories *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]*\n\n    nested_files *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`File`](#nodriver.cdp.file_system.File)]*\n```\n\n----------------------------------------\n\nTITLE: Target Messaging Function: send_message_to_target\nDESCRIPTION: Deprecated function to send protocol messages to a target. Takes message content, optional session ID and target ID. Returns a generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef send_message_to_target(message, session_id=None, target_id=None)\n```\n\n----------------------------------------\n\nTITLE: GPUInfo Class Definition in Python CDP API\nDESCRIPTION: Defines a class that provides comprehensive information about the system's GPUs, including devices, driver workarounds, and video/image acceleration capabilities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass GPUInfo(devices, driver_bug_workarounds, video_decoding, video_encoding, image_decoding, aux_attributes=None, feature_status=None)\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollRect Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the ScrollRect type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ScrollRect\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Importing Performance Timeline Module in Python\nDESCRIPTION: Shows how to import the performance_timeline module from the nodriver.cdp package. This module provides access to the Performance Timeline CDP domain functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/performance_timeline.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.performance_timeline\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Window Bounds\nDESCRIPTION: This experimental function sets the position and/or size of the browser window. It takes a window ID and new bounds as parameters. Returns a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/browser.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef set_window_bounds(window_id, bounds):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Markdown Truth Table Example\nDESCRIPTION: Demonstrates markdown table formatting using a logical OR truth table with inputs and outputs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/style.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|       | Inputs   | Output   |\n|-------|----------|----------|\n| A     | B        | A or B   |\n| False | False    | False    |\n| True  | False    | True     |\n| False | True     | True     |\n| True  | True     | True     |\n```\n\n----------------------------------------\n\nTITLE: Defining the Detached Event Class in CDP Inspector Domain\nDESCRIPTION: Event class representing a termination of the remote debugging connection. It includes a reason parameter explaining why the connection was terminated.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/inspector.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n### *class* Detached(reason)\n\nFired when remote debugging connection is about to be terminated. Contains detach reason.\n\n#### reason *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\nThe reason why connection has been terminated.\n```\n\n----------------------------------------\n\nTITLE: Input Module Commands Definition in RST\nDESCRIPTION: ReStructuredText markup listing the available input-related commands like cancel_dragging, dispatch_drag_event, dispatch_key_event, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/input_.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: cancel_dragging\n\n.. autofunction:: dispatch_drag_event\n\n.. autofunction:: dispatch_key_event\n\n.. autofunction:: dispatch_mouse_event\n\n.. autofunction:: dispatch_touch_event\n\n.. autofunction:: emulate_touch_from_mouse_event\n\n.. autofunction:: ime_set_composition\n\n.. autofunction:: insert_text\n\n.. autofunction:: set_ignore_input_events\n\n.. autofunction:: set_intercept_drags\n\n.. autofunction:: synthesize_pinch_gesture\n\n.. autofunction:: synthesize_scroll_gesture\n\n.. autofunction:: synthesize_tap_gesture\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayMode Enum in Python\nDESCRIPTION: Enum class defining possible display modes for PWAs, either standalone or browser mode.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/pwa.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DisplayMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    STANDALONE = 'standalone'\n    BROWSER = 'browser'\n```\n\n----------------------------------------\n\nTITLE: Disabling Audits in Python\nDESCRIPTION: This function is used to disable the Audits domain. It is implemented as a generator function in the Audits module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: Defining PlayersCreated Event Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayersCreated event class with players attribute, called when a player is created or when a new agent joins and receives a list of active players.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass PlayersCreated(players)\n```\n\n----------------------------------------\n\nTITLE: Defining ManufacturerData Class in Python\nDESCRIPTION: Creates a class to store manufacturer data for Bluetooth devices, including a company identifier key and manufacturer-specific data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/bluetooth_emulation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ManufacturerData(key, data):\n    key: int\n    data: str\n```\n\n----------------------------------------\n\nTITLE: Profiling Layer Snapshot in Python\nDESCRIPTION: Profiles a layer snapshot with optional parameters for repeat count, duration, and clip rectangle. Returns an array of paint profiles for each run.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef profile_snapshot(snapshot_id, min_repeat_count=None, min_duration=None, clip_rect=None):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Defining DragDataItem Class in Python\nDESCRIPTION: Class that represents an item being dragged during drag operations, containing the MIME type, data content, and optional metadata for links and HTML content.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DragDataItem(mime_type, data, title=None, base_url=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing FailedRequestInfo Class in Python\nDESCRIPTION: Class representing information about failed network requests, including URL, failure message and optional request ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass FailedRequestInfo(url, failure_message, request_id=None):\n    url : str\n    failure_message : str \n    request_id : Optional[RequestId] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Media Domain Events in Python for NoDriver CDP\nDESCRIPTION: This snippet shows the structure of event definitions for the Media domain. It includes classes for PlayerPropertiesChanged, PlayerEventsAdded, PlayerMessagesLogged, PlayerErrorsRaised, and PlayersCreated events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/media.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PlayerPropertiesChanged\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerEventsAdded\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerMessagesLogged\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerErrorsRaised\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayersCreated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Enabling Animation Tracking in Python\nDESCRIPTION: Shows how to use the enable() command generator function to turn on animation tracking. This function yields no arguments and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/animation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nyield enable()\n```\n\n----------------------------------------\n\nTITLE: Defining Sink Type for Cast Domain in Python\nDESCRIPTION: Defines the Sink class for representing Cast sinks. This class is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/cast.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Sink\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: SubsamplingFormat Enum Definition in Python CDP API\nDESCRIPTION: Defines an enumeration for YUV subsampling types used in image processing, including YUV420, YUV422, and YUV444 formats.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SubsamplingFormat(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n```\n\n----------------------------------------\n\nTITLE: GPUDevice Class Definition in Python CDP API\nDESCRIPTION: Defines a class that represents a single graphics processor (GPU) with properties for vendor and device information, driver details, and hardware identifiers.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GPUDevice(vendor_id, device_id, vendor_string, device_string, driver_vendor, driver_version, sub_sys_id=None, revision=None)\n```\n\n----------------------------------------\n\nTITLE: Importing Browser Domain Module in Python\nDESCRIPTION: This snippet shows how to import the Browser domain module in NoDriver's CDP implementation. It provides access to browser management functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/browser.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.browser\n```\n\n----------------------------------------\n\nTITLE: Importing Audits Module in Python\nDESCRIPTION: This snippet shows how to import the Audits module from the nodriver.cdp package. The Audits domain allows investigation of page violations and possible improvements.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.audits\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Class in CDP Cache Storage\nDESCRIPTION: Simple class representing an HTTP header with name and value properties.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cache_storage.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Header(name, value):\n    \"\"\"#### name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    #### value *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring CacheStorage Command Functions in Python\nDESCRIPTION: Declares command functions for the CacheStorage domain. These are generator functions that yield and resume with specific argument types, returning command-specific result types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: delete_cache\n\n.. autofunction:: delete_entry\n\n.. autofunction:: request_cache_names\n\n.. autofunction:: request_cached_response\n\n.. autofunction:: request_entries\n```\n\n----------------------------------------\n\nTITLE: Class definition for Sink class in the Cast CDP domain\nDESCRIPTION: Defines a Sink class representing a Cast-capable device or software surface. It contains properties for the sink name, ID, and optional session information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Sink(name, id_, session=None):\n\n    name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    id_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    session *: [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional)[[`str`](https://docs.python.org/3/library/stdtypes.html#str)]* *= None*\n```\n\n----------------------------------------\n\nTITLE: Track Computed Style Updates Method\nDESCRIPTION: Experimental method that starts tracking specified computed styles for updates. Takes a list of CSS computed style properties and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntrack_computed_style_updates(properties_to_track)\n```\n\n----------------------------------------\n\nTITLE: Events Documentation in RST\nDESCRIPTION: Documentation for CDP events including ConsoleProfileFinished, ConsoleProfileStarted, and PreciseCoverageDeltaUpdate classes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/profiler.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ConsoleProfileFinished\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: ConsoleProfileStarted\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Documenting Cast Domain Commands in reStructuredText\nDESCRIPTION: Documents various commands available in the Cast domain using autofunction directives. These commands are generator functions that yield and return specific types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cast.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: set_sink_to_use\n\n.. autofunction:: start_desktop_mirroring\n\n.. autofunction:: start_tab_mirroring\n\n.. autofunction:: stop_casting\n```\n\n----------------------------------------\n\nTITLE: Security Event Handlers\nDESCRIPTION: Event classes for handling certificate errors, security state changes, and visible security state changes in the browser.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/security.rst#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining Inspector Issue Enums and Details Classes in Python\nDESCRIPTION: Collection of enums and classes for handling various inspector issues including stylesheet loading, property rules, and general inspector details.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass InspectorIssueCode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    COOKIE_ISSUE = 'CookieIssue'\n    MIXED_CONTENT_ISSUE = 'MixedContentIssue'\n    BLOCKED_BY_RESPONSE_ISSUE = 'BlockedByResponseIssue'\n    HEAVY_AD_ISSUE = 'HeavyAdIssue'\n    CONTENT_SECURITY_POLICY_ISSUE = 'ContentSecurityPolicyIssue'\n    SHARED_ARRAY_BUFFER_ISSUE = 'SharedArrayBufferIssue'\n    LOW_TEXT_CONTRAST_ISSUE = 'LowTextContrastIssue'\n    CORS_ISSUE = 'CorsIssue'\n    ATTRIBUTION_REPORTING_ISSUE = 'AttributionReportingIssue'\n    QUIRKS_MODE_ISSUE = 'QuirksModeIssue'\n    NAVIGATOR_USER_AGENT_ISSUE = 'NavigatorUserAgentIssue'\n    GENERIC_ISSUE = 'GenericIssue'\n    DEPRECATION_ISSUE = 'DeprecationIssue'\n    CLIENT_HINT_ISSUE = 'ClientHintIssue'\n    FEDERATED_AUTH_REQUEST_ISSUE = 'FederatedAuthRequestIssue'\n    BOUNCE_TRACKING_ISSUE = 'BounceTrackingIssue'\n    COOKIE_DEPRECATION_METADATA_ISSUE = 'CookieDeprecationMetadataIssue'\n    STYLESHEET_LOADING_ISSUE = 'StylesheetLoadingIssue'\n    FEDERATED_AUTH_USER_INFO_REQUEST_ISSUE = 'FederatedAuthUserInfoRequestIssue'\n    PROPERTY_RULE_ISSUE = 'PropertyRuleIssue'\n    SHARED_DICTIONARY_ISSUE = 'SharedDictionaryIssue'\n```\n\n----------------------------------------\n\nTITLE: Defining the TargetReloadedAfterCrash Event Class in CDP Inspector Domain\nDESCRIPTION: Event class that fires when the debugging target has reloaded after a crash. This class has no parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/inspector.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n### *class* TargetReloadedAfterCrash\n\nFired when debugging target has reloaded after crash\n```\n\n----------------------------------------\n\nTITLE: Defining Enumeration Classes for Preload CDP Domain in Python\nDESCRIPTION: This snippet defines several enumeration classes used in the Preload CDP domain, including RuleSetErrorType, SpeculationAction, SpeculationTargetHint, and PrerenderFinalStatus. These enums represent various states and types related to preloading and prerendering.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass RuleSetErrorType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    SOURCE_IS_NOT_JSON_OBJECT = 'SourceIsNotJsonObject'\n    INVALID_RULES_SKIPPED = 'InvalidRulesSkipped'\n\nclass SpeculationAction(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    PREFETCH = 'Prefetch'\n    PRERENDER = 'Prerender'\n\nclass SpeculationTargetHint(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    BLANK = 'Blank'\n    SELF = 'Self'\n\nclass PrerenderFinalStatus(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ACTIVATED = 'Activated'\n    DESTROYED = 'Destroyed'\n    LOW_END_DEVICE = 'LowEndDevice'\n    # ... (many more status values)\n```\n\n----------------------------------------\n\nTITLE: NodesUpdated Event Class Definition\nDESCRIPTION: Experimental event class that triggers when previously requested nodes change in the accessibility tree. Contains a nodes property that is a list of updated AXNode objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass NodesUpdated(nodes):\n    nodes: List[AXNode]\n```\n\n----------------------------------------\n\nTITLE: Event class for Cast sink updates\nDESCRIPTION: Defines an event class that is fired whenever the list of available Cast sinks changes, providing an updated list of available devices.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass SinksUpdated(sinks):\n    \"\"\"\n    This is fired whenever the list of available sinks changes. A sink is a\n    device or a software surface that you can cast to.\n    \"\"\"\n\n    sinks *: [`List`](https://docs.python.org/3/library/typing.html#typing.List)[[`Sink`](#nodriver.cdp.cast.Sink)]*\n```\n\n----------------------------------------\n\nTITLE: RST Events Documentation\nDESCRIPTION: Documentation for CDP event class DeviceRequestPrompted\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/device_access.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: DeviceRequestPrompted\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing Contrast Check Command in Python\nDESCRIPTION: Generator function to run contrast checks on a target page, with optional WCAG AAA level reporting.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef check_contrast(report_aaa=None):\n    \"\"\"Runs the contrast check for the target page. Found issues are reported using Audits.issueAdded event.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Device Orientation Override in CDP\nDESCRIPTION: Command that clears any previously set overridden Device Orientation values. Returns a Generator that yields and accepts Dict[str, Any] and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/device_orientation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclear_device_orientation_override()\n```\n\n----------------------------------------\n\nTITLE: Disabling Inspector Domain Notifications in CDP\nDESCRIPTION: A generator function that disables notifications from the Inspector domain in Chrome DevTools Protocol. Returns None and operates with dictionary arguments containing string keys and any values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/inspector.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n### disable()\n\nDisables inspector domain notifications.\n\n* **Return type:**\n  [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n```\n\n----------------------------------------\n\nTITLE: Defining FlexNodeHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting flex nodes, including a flex container highlight config and node ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass FlexNodeHighlightConfig(flex_container_highlight_config, node_id):\n\n    flex_container_highlight_config: FlexContainerHighlightConfig\n\n    node_id: NodeId\n```\n\n----------------------------------------\n\nTITLE: Untracking Cache Storage for Origin in Python\nDESCRIPTION: Unregisters a security origin from receiving notifications for cache storage updates.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nuntrack_cache_storage_for_origin(origin)\n```\n\n----------------------------------------\n\nTITLE: Getting Encoded Response in Python\nDESCRIPTION: This function is used to get an encoded response in the Audits domain. It is implemented as a generator function in the Audits module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: get_encoded_response\n```\n\n----------------------------------------\n\nTITLE: Defining Autofill Events in Python\nDESCRIPTION: Defines the AddressFormFilled event class for the Autofill domain. This event is triggered when an address form is filled using the autofill functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/autofill.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: AddressFormFilled\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Get Certificate Method\nDESCRIPTION: Experimental method that returns the DER-encoded certificate for a given origin. Takes an origin string parameter and returns a Generator of string lists.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef get_certificate(origin: str) -> Generator[Dict[str, Any], Dict[str, Any], List[str]]\n```\n\n----------------------------------------\n\nTITLE: StorageArea Type Definition in CDP Extensions Domain\nDESCRIPTION: Documents the StorageArea type used in the Extensions domain. This is an auto-documented class that excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/extensions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: StorageArea\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining LayerTreeDidChange Event in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the LayerTreeDidChange event in the LayerTree domain. This event is automatically instantiated by the API when the layer tree has changed.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LayerTreeDidChange\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Bucket Tracking in Python\nDESCRIPTION: Sets tracking for a specified storage key's buckets, enabling or disabling monitoring of activity.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nset_storage_bucket_tracking(storage_key, enable)\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Block for Preload Events\nDESCRIPTION: RestructuredText documentation defining event classes for the CDP Preload domain, including status updates and rule set changes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/preload.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: RuleSetUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: RuleSetRemoved\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing BackgroundService Types in Python\nDESCRIPTION: Defines core types including ServiceName, EventMetadata, and BackgroundServiceEvent classes for handling background service operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/background_service.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ServiceName\nclass EventMetadata\nclass BackgroundServiceEvent\n```\n\n----------------------------------------\n\nTITLE: Input Module Events Definition in RST\nDESCRIPTION: ReStructuredText markup defining the documentation for the DragIntercepted event class.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/input_.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: DragIntercepted\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: ClearDeviceMetricsOverride Command Implementation in Python\nDESCRIPTION: Clears any previously set device metrics override. This function is deprecated since version 1.3 and is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef clear_device_metrics_override():\n    \"\"\"\n    Clears the overridden device metrics.\n    :rtype: [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n\n    #### Deprecated\n    Deprecated since version 1.3.\n\n    **EXPERIMENTAL**\n\n    #### Deprecated\n    Deprecated since version 1.3.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Node Stack Traces in Python\nDESCRIPTION: Sets whether stack traces should be captured for Nodes. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\ndef set_node_stack_traces_enabled(enable):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Log Commands Documentation (Python)\nDESCRIPTION: Command functions for log operations including clear, disable, enable, and violation report management.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/log.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: clear\n\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: start_violations_report\n\n.. autofunction:: stop_violations_report\n```\n\n----------------------------------------\n\nTITLE: Defining FederatedAuthUserInfoRequestIssueReason Enumeration in Python\nDESCRIPTION: Enum class representing possible failure reasons for getUserInfo() calls in federated authentication. Used in conjunction with FederatedAuthUserInfoRequestResult in the DevTools inspector.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass FederatedAuthUserInfoRequestIssueReason(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NOT_SAME_ORIGIN = 'NotSameOrigin'\n    NOT_IFRAME = 'NotIframe'\n    NOT_POTENTIALLY_TRUSTWORTHY = 'NotPotentiallyTrustworthy'\n    NO_API_PERMISSION = 'NoApiPermission'\n    NOT_SIGNED_IN_WITH_IDP = 'NotSignedInWithIdp'\n    NO_ACCOUNT_SHARING_PERMISSION = 'NoAccountSharingPermission'\n    INVALID_CONFIG_OR_WELL_KNOWN = 'InvalidConfigOrWellKnown'\n    INVALID_ACCOUNTS_RESPONSE = 'InvalidAccountsResponse'\n    NO_RETURNING_USER_FROM_FETCHED_ACCOUNTS = 'NoReturningUserFromFetchedAccounts'\n```\n\n----------------------------------------\n\nTITLE: Interest Group Access Type Enumeration in Python\nDESCRIPTION: Defines an enumeration of possible interest group access types for protected audience operations including join, leave, update, bid and others.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass InterestGroupAccessType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    JOIN = 'join'\n    LEAVE = 'leave'\n    UPDATE = 'update'\n    LOADED = 'loaded'\n    BID = 'bid'\n    WIN = 'win'\n    ADDITIONAL_BID = 'additionalBid'\n    ADDITIONAL_BID_WIN = 'additionalBidWin'\n    TOP_LEVEL_BID = 'topLevelBid'\n    TOP_LEVEL_ADDITIONAL_BID = 'topLevelAdditionalBid'\n    CLEAR = 'clear'\n```\n\n----------------------------------------\n\nTITLE: Defining LoginState Enumeration in Python\nDESCRIPTION: Defines the login state enum representing whether an account is being used for sign-in or sign-up.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fed_cm.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass LoginState(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    SIGN_IN = 'SignIn'\n    SIGN_UP = 'SignUp'\n```\n\n----------------------------------------\n\nTITLE: Execution Termination\nDESCRIPTION: Experimental method to terminate current or next JavaScript execution, with cancellation when outer-most script execution ends.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef terminate_execution()\n```\n\n----------------------------------------\n\nTITLE: Implementing disable Command for HeadlessExperimental Domain in Python\nDESCRIPTION: Generator function that disables headless events for the target. This command is marked as deprecated since version 1.3 of the protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/headless_experimental.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"\n    Disables headless events for the target.\n    :rtype: Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n\n    # Deprecated\n    # Deprecated since version 1.3.\n\n    # Deprecated\n    # Deprecated since version 1.3.\n```\n\n----------------------------------------\n\nTITLE: DOM Debugger Module Definition\nDESCRIPTION: Module definition for DOM debugger functionality in the nodriver.cdp package. This module provides capabilities for DOM debugging and breakpoint management.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_debugger.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.dom_debugger\n```\n\n----------------------------------------\n\nTITLE: Input Module Type Classes Definition in RST\nDESCRIPTION: ReStructuredText markup defining the documentation structure for various input-related type classes like TouchPoint, GestureSourceType, MouseButton, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/input_.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: TouchPoint\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: GestureSourceType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: MouseButton\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: TimeSinceEpoch\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DragDataItem\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DragData\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing disable() Command for Security Module in Python\nDESCRIPTION: This command disables tracking of security state changes. It's a generator function that returns None when executed.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables tracking security state changes.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n\n```\n\n----------------------------------------\n\nTITLE: Documenting ContraDict Class in Python\nDESCRIPTION: Autodocumentation for the ContraDict class from the nodriver.core._contradict module. It includes all members and inherited members. ContraDict is a dictionary with attribute access and JSON serialization capabilities.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/others_and_helpers.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nodriver.core._contradict.ContraDict\n   :members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Type in Python\nDESCRIPTION: Defines the Cache type used in the CacheStorage domain. This type represents a cache object in the storage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Cache\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Security Command Implementation\nDESCRIPTION: Generator functions for security operations including enable/disable security features, certificate error handling, and certificate error override settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/security.rst#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Checking Browser Cache Clearance Capability in Python\nDESCRIPTION: This function checks if the browser cache can be cleared. It returns a generator that yields a boolean indicating the capability.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/network.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef can_clear_browser_cache() -> Generator[Dict[str, Any], Dict[str, Any], bool]: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Sampling Profile Node Structure in Python\nDESCRIPTION: Defines a class representing a heap profile sample node with size, total bytes, and execution stack information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SamplingProfileNode(size, total, stack):\n    size: float           # Size of the sampled allocation\n    total: float          # Total bytes attributed to this sample\n    stack: List[str]      # Execution stack at the point of allocation\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: dismiss_dialog\nDESCRIPTION: Command function to dismiss the FedCM authentication dialog. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: dismiss_dialog\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Block for Preload Types\nDESCRIPTION: RestructuredText documentation defining the class structure for CDP Preload domain types including RuleSetId, RuleSet, and various status enums.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/preload.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: RuleSetId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: RuleSet\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting Request Interception Patterns in NoDriver (Deprecated)\nDESCRIPTION: Deprecated method for intercepting requests that match specific patterns. Users are advised to use Fetch.enable instead.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nset_request_interception(patterns)\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Structure\nDESCRIPTION: ReStructuredText documentation layout defining the structure for the CDP tracing module documentation, including sections for Types, Commands and Events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/tracing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTracing\n=======\n\n.. module:: nodriver.cdp.tracing\n\n* Types_\n* Commands_\n* Events_\n\nTypes\n-----\n\nGenerally, you do not need to instantiate CDP types\nyourself. Instead, the API creates objects for you as return\nvalues from commands, and then you can use those objects as\narguments to other commands.\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceName Class in Python\nDESCRIPTION: This snippet defines the ServiceName class, which is likely an enumeration or constant set for different background services. It excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ServiceName\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Call Stack Size Configuration\nDESCRIPTION: Experimental method to set the maximum size for call stack capture.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef set_max_call_stack_size_to_capture(size)\n```\n\n----------------------------------------\n\nTITLE: Stopping Heap Object Tracking in Python\nDESCRIPTION: Ends the tracking of heap objects with optional parameters for progress reporting and object treatment. Returns a generator for managing the stopping process.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstop_tracking_heap_objects(report_progress=None, treat_global_objects_as_roots=None, capture_numeric_value=None, expose_internals=None)\n```\n\n----------------------------------------\n\nTITLE: Defining PseudoType Enum in Python\nDESCRIPTION: Creates an enumeration of pseudo-element types used in DOM styling and selection.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PseudoType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    \"\"\"Pseudo element type.\"\"\"\n\n    FIRST_LINE = 'first-line'\n    FIRST_LETTER = 'first-letter'\n    CHECK = 'check'\n    BEFORE = 'before'\n    AFTER = 'after'\n    SELECT_ARROW = 'select-arrow'\n    MARKER = 'marker'\n    BACKDROP = 'backdrop'\n    COLUMN = 'column'\n    SELECTION = 'selection'\n    SEARCH_TEXT = 'search-text'\n    TARGET_TEXT = 'target-text'\n    SPELLING_ERROR = 'spelling-error'\n    GRAMMAR_ERROR = 'grammar-error'\n    HIGHLIGHT = 'highlight'\n    FIRST_LINE_INHERITED = 'first-line-inherited'\n    SCROLL_MARKER = 'scroll-marker'\n    SCROLL_MARKER_GROUP = 'scroll-marker-group'\n    SCROLL_NEXT_BUTTON = 'scroll-next-button'\n    SCROLL_PREV_BUTTON = 'scroll-prev-button'\n    SCROLLBAR = 'scrollbar'\n    SCROLLBAR_THUMB = 'scrollbar-thumb'\n    SCROLLBAR_BUTTON = 'scrollbar-button'\n    SCROLLBAR_TRACK = 'scrollbar-track'\n    SCROLLBAR_TRACK_PIECE = 'scrollbar-track-piece'\n    SCROLLBAR_CORNER = 'scrollbar-corner'\n    RESIZER = 'resizer'\n    INPUT_LIST_BUTTON = 'input-list-button'\n    VIEW_TRANSITION = 'view-transition'\n    VIEW_TRANSITION_GROUP = 'view-transition-group'\n    VIEW_TRANSITION_IMAGE_PAIR = 'view-transition-image-pair'\n    VIEW_TRANSITION_OLD = 'view-transition-old'\n    VIEW_TRANSITION_NEW = 'view-transition-new'\n    PLACEHOLDER = 'placeholder'\n    FILE_SELECTOR_BUTTON = 'file-selector-button'\n    DETAILS_CONTENT = 'details-content'\n    PICKER = 'picker'\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the Layer type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Layer\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: RST Header Hierarchy Definition\nDESCRIPTION: Defines the hierarchy of section headers using different RST markup characters\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/style.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n    * ``#`` with overline, for parts\n    * ``*`` with overline, for chapters\n    * ``=``, for sections\n    * ``-``, for subsections\n    * ``^``, for subsubsections\n    * ``\"``, for paragraphs\n```\n\n----------------------------------------\n\nTITLE: Importing Animation CDP Module in Python\nDESCRIPTION: This snippet shows how to import the Animation CDP module in Python. It is a crucial step for using the animation-related functionality in the nodriver project.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.animation\n```\n\n----------------------------------------\n\nTITLE: Removing Instrumentation Breakpoint Command in CDP DOMDebugger (Deprecated)\nDESCRIPTION: Deprecated command that removes a breakpoint on a native event. This functionality has been deprecated since CDP version 1.3.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef remove_instrumentation_breakpoint(event_name):\n\n    # Removes breakpoint on particular native event.\n\n    # Deprecated\n    # Deprecated since version 1.3.\n\n    # EXPERIMENTAL\n\n    # Parameters:\n    #   event_name (str) – Instrumentation name to stop on.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n\n    # Deprecated\n    # Deprecated since version 1.3.\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Timeline in Python\nDESCRIPTION: Demonstrates the enable command function for the Performance Timeline domain. This generator function is used to activate the Performance Timeline functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/performance_timeline.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Reporting API Report Class Definition\nDESCRIPTION: Class representing reports generated by the Reporting API including ID, URL, destination, type and status information\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass ReportingApiReport(id_, initiator_url, destination, type_, timestamp, depth, completed_attempts, body, status):\n    id_ : ReportId\n    initiator_url : str\n    destination : str\n    type_ : str\n    timestamp : TimeSinceEpoch\n    depth : int\n    completed_attempts : int\n    body : dict\n    status : ReportStatus\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: disable\nDESCRIPTION: Command function to disable the FedCM domain functionality. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Domain Module in Python\nDESCRIPTION: Defines the module for the Cast domain in NoDriver CDP. This module provides functionality for interacting with Cast, Presentation API, and Remote Playback API.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cast.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.cast\n```\n\n----------------------------------------\n\nTITLE: Commands Documentation Structure\nDESCRIPTION: RST documentation structure for browser command functions like add_privacy_sandbox_coordinator_key_config, cancel_download, etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/browser.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: add_privacy_sandbox_coordinator_key_config\n\n.. autofunction:: add_privacy_sandbox_enrollment_override\n\n.. autofunction:: cancel_download\n\n.. autofunction:: close\n```\n\n----------------------------------------\n\nTITLE: Defining Account Class Structure in Python\nDESCRIPTION: Defines the Account class that corresponds to IdentityRequestAccount with properties for account identification and authentication.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fed_cm.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Account(account_id, email, name, given_name, picture_url, idp_config_url, idp_login_url, login_state, terms_of_service_url=None, privacy_policy_url=None):\n    account_id: str\n    email: str\n    name: str\n    given_name: str\n    picture_url: str\n    idp_config_url: str\n    idp_login_url: str\n    login_state: LoginState\n    terms_of_service_url: Optional[str] = None\n    privacy_policy_url: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Defining AXValueType Enum in Python\nDESCRIPTION: Python enum class defining possible accessibility property types like boolean, string, number etc.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AXValueType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    BOOLEAN = 'boolean'\n    TRISTATE = 'tristate'\n    BOOLEAN_OR_UNDEFINED = 'booleanOrUndefined'\n    IDREF = 'idref'\n    IDREF_LIST = 'idrefList'\n    INTEGER = 'integer'\n    NODE = 'node'\n    NODE_LIST = 'nodeList'\n    NUMBER = 'number'\n    STRING = 'string'\n    COMPUTED_STRING = 'computedString'\n    TOKEN = 'token'\n    TOKEN_LIST = 'tokenList'\n    DOM_RELATION = 'domRelation'\n    ROLE = 'role'\n    INTERNAL_ROLE = 'internalRole'\n    VALUE_UNDEFINED = 'valueUndefined'\n```\n\n----------------------------------------\n\nTITLE: Setting up toctree for CDP Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for CDP documentation. It includes all files in the 'cdp/' directory with a maximum depth of 1 level.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :glob:\n    :maxdepth: 1\n\n    cdp/*\n```\n\n----------------------------------------\n\nTITLE: DOM Debugger Command Functions\nDESCRIPTION: Function declarations for DOM debugging commands including breakpoint management and event listener operations. These are generator functions that handle various debugging operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_debugger.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: get_event_listeners\n\n.. autofunction:: remove_dom_breakpoint\n\n.. autofunction:: remove_event_listener_breakpoint\n\n.. autofunction:: remove_instrumentation_breakpoint\n\n.. autofunction:: remove_xhr_breakpoint\n\n.. autofunction:: set_break_on_csp_violation\n\n.. autofunction:: set_dom_breakpoint\n\n.. autofunction:: set_event_listener_breakpoint\n\n.. autofunction:: set_instrumentation_breakpoint\n\n.. autofunction:: set_xhr_breakpoint\n```\n\n----------------------------------------\n\nTITLE: Types Documentation Structure\nDESCRIPTION: RST documentation for various browser types including BrowserContextID, WindowID, WindowState, and others\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/browser.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: BrowserContextID\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: WindowID\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Getting Flattened DOM Document in Python\nDESCRIPTION: Deprecated method for retrieving the root DOM node and subtree. Recommended to use DOMSnapshot.captureSnapshot instead.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef get_flattened_document(depth=None, pierce=None)\n```\n\n----------------------------------------\n\nTITLE: BackForwardCacheBlockingDetails Class Definition\nDESCRIPTION: Class representing details about where and why back-forward cache blocking occurred, including line numbers, column numbers, URLs and function names.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass BackForwardCacheBlockingDetails(line_number, column_number, url=None, function=None):\n    line_number: int\n    column_number: int\n    url: Optional[str] = None\n    function: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Enabling Touch Emulation in Python (Deprecated)\nDESCRIPTION: Toggles mouse event-based touch event emulation. This method is deprecated since version 1.3.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\ndef set_touch_emulation_enabled(enabled: bool, configuration: Optional[str] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Prefetch Status Class Definition\nDESCRIPTION: Defines an enumeration class for detailed prefetch status values indicating various states and failure conditions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PrefetchStatus(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    PREFETCH_ALLOWED = 'PrefetchAllowed'\n    PREFETCH_FAILED_INELIGIBLE_REDIRECT = 'PrefetchFailedIneligibleRedirect'\n    # ... additional status values\n```\n\n----------------------------------------\n\nTITLE: Attaching Debug Stack to Requests in Python\nDESCRIPTION: Specifies whether to attach a page script stack ID in requests for debugging purposes. This method is marked as experimental.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef set_attach_debug_stack(enabled):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Get Stylesheet Text Function Signature\nDESCRIPTION: Function that returns the current textual content for a stylesheet identified by style_sheet_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_style_sheet_text(style_sheet_id: StyleSheetId) -> Generator[Dict[str, Any], Dict[str, Any], str]\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Types - FileSystem\nDESCRIPTION: ReStructuredText documentation defining the types section for the FileSystem CDP domain, including File, Directory and BucketFileSystemLocator classes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/file_system.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: File\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: Directory\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: BucketFileSystemLocator\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: PWA Command Function Signatures\nDESCRIPTION: This section lists all the available command functions in the PWA module including those for changing app settings, checking app state, installing, launching, and uninstalling PWAs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/pwa.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: change_app_user_settings\n\n.. autofunction:: get_os_app_state\n\n.. autofunction:: install\n\n.. autofunction:: launch\n\n.. autofunction:: launch_files_in_app\n\n.. autofunction:: open_current_page_in_app\n\n.. autofunction:: uninstall\n```\n\n----------------------------------------\n\nTITLE: EventBreakpoints Module Commands Interface\nDESCRIPTION: Defines the command interface structure for the EventBreakpoints CDP domain, including disable(), remove_instrumentation_breakpoint(), and set_instrumentation_breakpoint() generator functions. Commands use Generator[x, y, z] type hints where z represents the return type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/event_breakpoints.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGenerator[x, y, z]\n```\n\n----------------------------------------\n\nTITLE: Background Service Event Handlers in Python\nDESCRIPTION: Event classes for handling recording state changes and background service events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/background_service.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RecordingStateChanged\nclass BackgroundServiceEventReceived\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Event Classes in Python\nDESCRIPTION: Classes for various animation events including AnimationCanceled, AnimationCreated, AnimationStarted, and AnimationUpdated. Each class represents a specific animation event with relevant attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/animation.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass AnimationCanceled(id_):\n    \"\"\"Event for when an animation has been cancelled.\"\"\"\n\nclass AnimationCreated(id_):\n    \"\"\"Event for each animation that has been created.\"\"\"\n\nclass AnimationStarted(animation):\n    \"\"\"Event for animation that has been started.\"\"\"\n\nclass AnimationUpdated(animation):\n    \"\"\"Event for animation that has been updated.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Python Class References for SystemInfo Types\nDESCRIPTION: Documents Python classes representing various system information types including GPUDevice, Size, VideoDecodeAcceleratorCapability, VideoEncodeAcceleratorCapability, SubsamplingFormat, ImageType, ImageDecodeAcceleratorCapability, GPUInfo, and ProcessInfo. These classes are used as return values and command arguments in the CDP API.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/system_info.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GPUDevice\nclass Size\nclass VideoDecodeAcceleratorCapability\nclass VideoEncodeAcceleratorCapability\nclass SubsamplingFormat\nclass ImageType\nclass ImageDecodeAcceleratorCapability\nclass GPUInfo\nclass ProcessInfo\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Timeline in Python\nDESCRIPTION: This command enables reporting of performance timeline events. It is a generator function that yields arguments and returns a specific type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/performance_timeline.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining HeavyAdReason Enum in Python\nDESCRIPTION: This enum specifies the reasons why an ad might be considered heavy, including network and CPU usage limits.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass HeavyAdReason(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    NETWORK_TOTAL_LIMIT = 'NetworkTotalLimit'\n\n    CPU_TOTAL_LIMIT = 'CpuTotalLimit'\n\n    CPU_PEAK_LIMIT = 'CpuPeakLimit'\n```\n\n----------------------------------------\n\nTITLE: Using RST Directives for Module Documentation\nDESCRIPTION: ReStructuredText directive defining the module path for documentation generation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fetch.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: nodriver.cdp.fetch\n```\n\n----------------------------------------\n\nTITLE: Next WebAssembly Disassembly Chunk Function\nDESCRIPTION: Experimental function that disassembles the next chunk of lines for a WebAssembly module. Returns empty chunk and invalidates stream ID when disassembly is complete.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef next_wasm_disassembly_chunk(stream_id):\n    \"\"\"Disassemble the next chunk of lines for the module corresponding to the stream.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Element Class RST Documentation Structure\nDESCRIPTION: RST documentation structure for the Element class showing the class reference and autoclass directive configuration including members, undocumented members, and inherited members.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/classes/element.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _element:\n\nElement class\n---------------------\n\nSome words about the Element class\n\n\n.. autoclass::  nodriver.Element\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Sink Class in reStructuredText\nDESCRIPTION: Provides documentation for the Sink class in the Cast domain. The class is documented using autoclass directive with specific member inclusions and exclusions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cast.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: Sink\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Control Commands\nDESCRIPTION: Generator functions for controlling frames in headless mode, including begin_frame, enable, and disable commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/headless_experimental.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef begin_frame(): ...\n\ndef disable(): ...\n\ndef enable(): ...\n```\n\n----------------------------------------\n\nTITLE: Releasing Layer Snapshot in Python\nDESCRIPTION: Releases a layer snapshot captured by the back-end, identified by its snapshot ID. This function is a generator that yields dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef release_snapshot(snapshot_id):\n    # Function implementation not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Setting Web Lifecycle State in Python\nDESCRIPTION: Attempts to update the web lifecycle state of the page according to the Web Lifecycle specification. This is an experimental feature.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef set_web_lifecycle_state(state: str) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Service Worker Router Source Enum Definition\nDESCRIPTION: Enum class defining possible sources for service worker router operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ServiceWorkerRouterSource(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    NETWORK = 'network'\n    CACHE = 'cache'\n    FETCH_EVENT = 'fetch-event'\n    RACE_NETWORK_AND_FETCH_HANDLER = 'race-network-and-fetch-handler'\n```\n\n----------------------------------------\n\nTITLE: Defining BoxStyle Class in Python for CDP Overlay\nDESCRIPTION: Defines a class representing style information for drawing a box. It includes optional parameters for fill color and hatch color.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BoxStyle(fill_color=None, hatch_color=None):\n    \"\"\"Style information for drawing a box.\"\"\"\n\n    fill_color : Optional[RGBA] = None\n        \"\"\"The background color for the box (default: transparent)\"\"\"\n\n    hatch_color : Optional[RGBA] = None\n        \"\"\"(No description provided)\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Get Platform Fonts Function Signature\nDESCRIPTION: Function that requests information about platform fonts used to render child TextNodes in the given node. Returns usage statistics for employed platform fonts.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef get_platform_fonts_for_node(node_id: NodeId) -> Generator[Dict[str, Any], Dict[str, Any], List[PlatformFontUsage]]\n```\n\n----------------------------------------\n\nTITLE: Documenting Runtime Domain Commands\nDESCRIPTION: Documentation structure for Runtime domain commands using Sphinx autofunction directive. Commands are implemented as generator functions that interact with the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/runtime.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: add_binding\n\n.. autofunction:: await_promise\n\n.. autofunction:: call_function_on\n```\n\n----------------------------------------\n\nTITLE: PWA Type Class References\nDESCRIPTION: This snippet lists the type classes available in the PWA module, including FileHandlerAccept, FileHandler, and DisplayMode, which are used to define PWA-specific data structures.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/pwa.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: FileHandlerAccept\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: FileHandler\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DisplayMode\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleMessage Class in Python\nDESCRIPTION: This snippet indicates the presence of a ConsoleMessage class in the module. The class likely represents a message in the console and contains various member functions and attributes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/console.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ConsoleMessage\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining ViolationSetting Class in Python CDP Implementation\nDESCRIPTION: Defines the ViolationSetting class used for configuring violation reporting. It contains properties for the violation type name and the time threshold to trigger the violation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ViolationSetting(name, threshold)\n```\n\n----------------------------------------\n\nTITLE: Defining WebAudio ContextState Enum\nDESCRIPTION: Defines enum class for AudioContextState with suspended, running, closed and interrupted states.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_audio.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ContextState(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    SUSPENDED = 'suspended'\n    RUNNING = 'running'\n    CLOSED = 'closed'\n    INTERRUPTED = 'interrupted'\n```\n\n----------------------------------------\n\nTITLE: Defining EntryAdded Event Class for Log Notifications\nDESCRIPTION: Event class representing the notification issued when a new message is logged. Contains the log entry as its property.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass EntryAdded(entry):\n    \"\"\"Issued when new message was logged.\"\"\"\n    # entry: LogEntry - The entry.\n```\n\n----------------------------------------\n\nTITLE: Defining LayerId Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the LayerId type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LayerId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining CachedResponse Type in Python\nDESCRIPTION: Defines the CachedResponse type used in the CacheStorage domain. This type represents a response stored in the cache.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: CachedResponse\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Importing Schema Module in Python\nDESCRIPTION: Module import statement showing the schema module path within the nodriver.cdp package. Used for accessing Chrome DevTools Protocol schema functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/schema.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import schema\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Structure Example\nDESCRIPTION: Shows the hierarchy of markdown headings from title to paragraph level, with commented reference for alternative heading styles using various characters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/style.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- * ``#`` with overline, for parts\n* ``*`` with overline, for chapters\n* ``=``, for sections\n* ``-``, for subsections\n* ``^``, for subsubsections\n* ``\"``, for paragraphs -->\n\n# TITLE\n\ntitle something\n\n## SECTION\n\nsection something\n\n### SUBSECTION\n\nsubsection something\n\n#### PARAGRAPH\n\nparagraph something\n```\n\n----------------------------------------\n\nTITLE: Sphinx Class Documentation\nDESCRIPTION: Sphinx autoclass directives documenting various CDP tracing classes including memory dump configuration, trace configuration, and format settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/tracing.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: MemoryDumpConfig\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: TraceConfig\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: StreamFormat\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Command Documentation - disable\nDESCRIPTION: Documentation for the disable generator function command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/headless_experimental.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: Removing Script From Evaluation List in Python\nDESCRIPTION: Method to remove a script from the list of scripts to evaluate on new document. Takes a ScriptIdentifier parameter and returns a Generator of Dict objects.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndef remove_script_to_evaluate_on_new_document(identifier):\n    \"\"\"Removes given script from the list.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing clear Command for Log Management\nDESCRIPTION: Generator function that clears the log entries. Returns None after execution.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef clear():\n    \"\"\"Clears the log.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Types Documentation in RST\nDESCRIPTION: Documentation for CDP types including ProfileNode, Profile, PositionTickInfo, CoverageRange, FunctionCoverage, and ScriptCoverage classes.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/profiler.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: ProfileNode\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: Profile\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollSnapContainerHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting scroll snap containers, including border styles and colors for various elements.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass ScrollSnapContainerHighlightConfig(snapport_border=None, snap_area_border=None, scroll_margin_color=None, scroll_padding_color=None):\n\n    snapport_border: Optional[LineStyle] = None\n\n    snap_area_border: Optional[LineStyle] = None\n\n    scroll_margin_color: Optional[RGBA] = None\n\n    scroll_padding_color: Optional[RGBA] = None\n```\n\n----------------------------------------\n\nTITLE: Setting Instrumentation Breakpoint in Python\nDESCRIPTION: A generator function that sets a breakpoint on a particular native event. Takes an event_name parameter and returns None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/event_breakpoints.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_instrumentation_breakpoint(event_name):\n    # Sets breakpoint on particular native event.\n    \n    # Parameters:\n    #   event_name (str) – Instrumentation name to stop on.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Importing Animation Module in Python\nDESCRIPTION: Shows how to import the Animation module from the nodriver.cdp package. This module provides access to the experimental Animation domain of the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/animation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import animation\n```\n\n----------------------------------------\n\nTITLE: GenericIssueErrorType Enum Definition\nDESCRIPTION: Enum defining various types of generic issues including form-related errors and ORB blocking errors.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass GenericIssueErrorType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    FORM_LABEL_FOR_NAME_ERROR = 'FormLabelForNameError'\n    FORM_DUPLICATE_ID_FOR_INPUT_ERROR = 'FormDuplicateIdForInputError'\n    FORM_INPUT_WITH_NO_LABEL_ERROR = 'FormInputWithNoLabelError'\n    # ... additional error types\n```\n\n----------------------------------------\n\nTITLE: ViolationSetting Class Documentation (Python)\nDESCRIPTION: Class definition for managing violation settings in the CDP log module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/log.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ViolationSetting\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Get Inline Styles Method\nDESCRIPTION: Retrieves inline styles defined explicitly in style attribute and implicitly via DOM attributes for a node. Returns tuple of inline and attribute-defined styles.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nget_inline_styles_for_node(node_id)\n```\n\n----------------------------------------\n\nTITLE: RST Commands Documentation\nDESCRIPTION: Documentation for CDP command functions including cancel_prompt, disable, enable, and select_prompt\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/device_access.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: cancel_prompt\n\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: select_prompt\n```\n\n----------------------------------------\n\nTITLE: DOMBreakpointType Class Reference\nDESCRIPTION: Class documentation for DOMBreakpointType that defines types of DOM breakpoints available in the debugger.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_debugger.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: DOMBreakpointType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining Error Class in Python\nDESCRIPTION: Defines the Error class, which is likely used to represent database-related errors. The class includes members and undocumented members, but excludes from_json and to_json methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Error\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Tab Class Documentation\nDESCRIPTION: Sphinx documentation directive for configuring the Tab class documentation. Includes settings for showing all members, inherited members, alphabetical ordering, and excluding __setattr__ method.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/classes/tab.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _tab:\\n\\nTab class\\n-------------\\n.. autoclass::  nodriver.Tab\\n    :members:\\n    :inherited-members:\\n    :member-order: alphabetical\\n    :undoc-members:\\n    :exclude-members: __setattr__\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener Breakpoint Command in CDP DOMDebugger\nDESCRIPTION: Command that removes a breakpoint on a specific DOM event, with an optional parameter to specify the EventTarget interface.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef remove_event_listener_breakpoint(event_name, target_name=None):\n\n    # Removes breakpoint on particular DOM event.\n\n    # Parameters:\n    #   event_name (str) – Event name.\n    #   target_name (Optional[str]) – (EXPERIMENTAL)  (Optional) EventTarget interface name.\n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Type Definition - ScreenshotParams Class\nDESCRIPTION: Reference documentation for the ScreenshotParams class that handles screenshot parameters in headless mode. The class members are documented but excluded from direct JSON serialization methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/headless_experimental.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ScreenshotParams\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: CSPViolationType Class Reference\nDESCRIPTION: Class documentation for CSPViolationType that defines types of Content Security Policy violations that can be detected.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_debugger.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: CSPViolationType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Browser Target Attachment Command in CDP Python API\nDESCRIPTION: Experimental generator function to attach to the browser target using flat sessionId mode. Returns a session ID assigned to the created session.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/target.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef attach_to_browser_target():\n    \"\"\"Attaches to the browser target, only uses flat sessionId mode.\n\n    **EXPERIMENTAL**\n\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`SessionID`](#nodriver.cdp.target.SessionID)]\n    * **Returns:**\n      Id assigned to the session.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataEntry Type in Python\nDESCRIPTION: Defines the DataEntry type used in the CacheStorage domain. This type likely represents an entry in the cache storage.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: DataEntry\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundServiceEvent Class in Python\nDESCRIPTION: This snippet defines the BackgroundServiceEvent class, which represents an event from a background service. It excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: BackgroundServiceEvent\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining WindowControlsOverlayConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for Window Controls Overlay, including settings for CSS visibility, platform selection, and theme color.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass WindowControlsOverlayConfig(show_css, selected_platform, theme_color):\n\n    show_css: bool\n\n    selected_platform: str\n\n    theme_color: str\n```\n\n----------------------------------------\n\nTITLE: Input Module Structure Definition in RST\nDESCRIPTION: ReStructuredText markup defining the structure of the input module documentation, including types, commands and events sections.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/input_.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: nodriver.cdp.input_\n\n* Types_\n* Commands_\n* Events_\n```\n\n----------------------------------------\n\nTITLE: Python Storage Types Documentation Structure\nDESCRIPTION: Documents the class structure for Storage domain types like SerializedStorageKey, StorageType, and others using autoclass directives.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/storage.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: SerializedStorageKey\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Importing PerformanceTimeline Module in Python\nDESCRIPTION: This snippet shows how to import the PerformanceTimeline module from the nodriver.cdp package. This module provides access to performance timeline events as specified in the W3C Performance Timeline specification.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/performance_timeline.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.performance_timeline\n```\n\n----------------------------------------\n\nTITLE: Tracking Cache Storage for Storage Key in Python\nDESCRIPTION: Registers a storage key to be notified when an update occurs to its cache storage list.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/storage.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntrack_cache_storage_for_storage_key(storage_key)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CDP Inspector Domain in Python\nDESCRIPTION: Shows the module import syntax for the CDP Inspector domain in nodriver. The Inspector domain is experimental and provides functionality for enabling and disabling inspection capabilities and handling target-related events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/inspector.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.inspector\n```\n\n----------------------------------------\n\nTITLE: Installing NoDriver via undetected-chromedriver\nDESCRIPTION: Instructions for installing nodriver through the undetected-chromedriver package, which includes nodriver as a component.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/quickstart.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# todo. use pip install nodriver instead\npip install undetected-chromedriver\n```\n\n----------------------------------------\n\nTITLE: Importing Background Service CDP Module in Python\nDESCRIPTION: This snippet shows how to import the Background Service CDP module in Python. It's a prerequisite for using the types, commands, and events defined in this domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: nodriver.cdp.background_service\n```\n\n----------------------------------------\n\nTITLE: Command Documentation - begin_frame\nDESCRIPTION: Documentation for the begin_frame generator function command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/headless_experimental.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: begin_frame\n```\n\n----------------------------------------\n\nTITLE: Defining CacheId Type in Python\nDESCRIPTION: Defines the CacheId type used in the CacheStorage domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: CacheId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting Presence Simulation - Python\nDESCRIPTION: Configures whether user presence tests succeed immediately or fail to resolve for an authenticator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef set_automatic_presence_simulation(authenticator_id, enabled)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Type in Python\nDESCRIPTION: Defines the Header type used in the CacheStorage domain. This type likely represents HTTP headers associated with cached responses.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Header\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining EventMetadata Class in Python\nDESCRIPTION: This snippet defines the EventMetadata class, which likely contains metadata information for background service events. It excludes from_json and to_json methods from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: EventMetadata\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: ProcessInfo Class Definition in Python CDP API\nDESCRIPTION: Defines a class that represents process information, including type, ID, and CPU usage metrics.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ProcessInfo(type_, id_, cpu_time)\n```\n\n----------------------------------------\n\nTITLE: Defining PositionTickInfo Class in Python\nDESCRIPTION: Class specifying number of samples attributed to a source position with line number and tick count.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/profiler.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PositionTickInfo(line, ticks)\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure Example\nDESCRIPTION: Shows a complete example of RST document structure with various heading levels and a truth table\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/style.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n##################\nTITLE\n##################\ntitle something\n\nSECTION\n==================\nsection something\n\nSUBSECTION\n^^^^^^^^^^^^^^^^^^^^\nsubsection something\n\nPARAGRAPH\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nparagraph something\n\n\nTABLES\n^^^^^^^^^^^^^^^^\n=====  =====  ======\n   Inputs     Output\n------------  ------\n  A      B    A or B\n=====  =====  ======\nFalse  False  False\nTrue   False  True\nFalse  True   True\nTrue   True   True\n=====  =====  ======\n```\n\n----------------------------------------\n\nTITLE: Documenting Config Class in Python\nDESCRIPTION: Autodocumentation for the Config class in the nodriver module. It includes all members, undocumented members, and inherited members.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/others_and_helpers.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: nodriver.Config\n    :members:\n    :undoc-members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: select_account\nDESCRIPTION: Command function to select an account in the FedCM dialog. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: select_account\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Pinch Gestures in Python\nDESCRIPTION: Experimental method to create pinch gesture animations through touch events, with control over speed, scale, and input source type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/input_.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndef synthesize_pinch_gesture(x, y, scale_factor, relative_speed=None, gesture_source_type=None)\n```\n\n----------------------------------------\n\nTITLE: Using get_domains() Command in CDP Schema\nDESCRIPTION: The get_domains() function is a generator that returns supported CDP domains. It returns a list of Domain objects, each containing a domain name and version.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nget_domains()\n```\n\n----------------------------------------\n\nTITLE: Defining DialogType Enumeration in Python\nDESCRIPTION: Defines the types of FedCM dialogs available in the system.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/fed_cm.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass DialogType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    ACCOUNT_CHOOSER = 'AccountChooser'\n    AUTO_REAUTHN = 'AutoReauthn'\n    CONFIRM_IDP_LOGIN = 'ConfirmIdpLogin'\n    ERROR = 'Error'\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Breakpoints Command in Python\nDESCRIPTION: References the disable command generator function in the EventBreakpoints module. This function likely disables previously set event breakpoints.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/event_breakpoints.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: LoadComplete Event Class Definition\nDESCRIPTION: Experimental event class that represents the load complete event sent by the browser to assistive technology when a web page finishes loading. Contains a root property of type AXNode.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/accessibility.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass LoadComplete(root):\n    root: AXNode\n```\n\n----------------------------------------\n\nTITLE: Setting Instrumentation Breakpoint Command in Python\nDESCRIPTION: References the set_instrumentation_breakpoint command generator function in the EventBreakpoints module. This function sets a breakpoint on instrumentation events in JavaScript code.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/event_breakpoints.rst.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: set_instrumentation_breakpoint\n```\n\n----------------------------------------\n\nTITLE: Defining RecordingStateChanged event class for CDP Background Service\nDESCRIPTION: An event class that is fired when the recording state for a background service has been updated, containing the new recording state and service name.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/background_service.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass RecordingStateChanged(is_recording, service):\n    \"\"\"\n    Called when the recording state for the service has been updated.\n    \"\"\"\n\n    is_recording: bool\n    service: ServiceName\n```\n\n----------------------------------------\n\nTITLE: Defining HeapProfiler SamplingHeapProfileSample Class\nDESCRIPTION: Class representing a single sample from a heap sampling profile. Contains allocation size, node ID and ordinal number.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/heap_profiler.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SamplingHeapProfileSample(size, node_id, ordinal):\n    size: float     # Allocation size in bytes\n    node_id: int    # Profile tree node id\n    ordinal: float  # Time-ordered sample number\n```\n\n----------------------------------------\n\nTITLE: Defining HingeConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for dual screen hinge visualization, including rectangle and color settings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass HingeConfig(rect, content_color=None, outline_color=None):\n\n    rect: Rect\n\n    content_color: Optional[RGBA] = None\n\n    outline_color: Optional[RGBA] = None\n```\n\n----------------------------------------\n\nTITLE: Importing EventBreakpoints CDP Module in Python\nDESCRIPTION: Shows the import statement for the EventBreakpoints CDP domain module in the nodriver project. This module provides functionality for setting JavaScript breakpoints on operations and events in native code.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/event_breakpoints.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.event_breakpoints\n```\n\n----------------------------------------\n\nTITLE: Importing Network Module in Python\nDESCRIPTION: Shows how to import the network module from the NoDriver CDP package. This module allows tracking and manipulating network activities of the page.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/network.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import network\n```\n\n----------------------------------------\n\nTITLE: Defining ScanEntry Class in Python\nDESCRIPTION: Creates a class to store advertisement packet information sent by a Bluetooth device, including device address, RSSI, and scan record.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/bluetooth_emulation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ScanEntry(device_address, rssi, scan_record):\n    device_address: str\n    rssi: int\n    scan_record: ScanRecord\n```\n\n----------------------------------------\n\nTITLE: Python Storage Events Documentation Structure\nDESCRIPTION: Documents event classes like CacheStorageContentUpdated and IndexedDBContentUpdated using autoclass directives.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/storage.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: CacheStorageContentUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: RST Types Documentation\nDESCRIPTION: Documentation for CDP types including RequestId, DeviceId, and PromptDevice classes\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/device_access.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: RequestId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DeviceId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PromptDevice\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining FileHandlerAccept Class in Python\nDESCRIPTION: Class representing file handler accept parameters for PWAs, containing media type and file extensions information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/pwa.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FileHandlerAccept(media_type, file_extensions):\n    media_type: str\n    file_extensions: List[str]\n```\n\n----------------------------------------\n\nTITLE: Importing FedCm CDP Domain in Python\nDESCRIPTION: This snippet shows how to import the FedCm CDP domain module in Python. It allows access to FedCm-related functionality in the nodriver CDP implementation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/fed_cm.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom nodriver.cdp import fed_cm\n```\n\n----------------------------------------\n\nTITLE: Defining Database Class in Python\nDESCRIPTION: Defines the Database class, which likely represents a database instance. The class includes members and undocumented members, but excludes from_json and to_json methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Database\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Getting Node Stack Traces\nDESCRIPTION: Experimental function to retrieve stack traces associated with a node, currently only providing creation stack trace.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef get_node_stack_traces(node_id)\n```\n\n----------------------------------------\n\nTITLE: Getting Database Table Names in CDP\nDESCRIPTION: This command retrieves the table names from a specified database. It takes a database_id parameter and returns a list of table names as strings.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/database.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_database_table_names(database_id):\n    # Parameters:\n    #   database_id (DatabaseId) – \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], List[str]]\n```\n\n----------------------------------------\n\nTITLE: Importing Page Domain Module in Python\nDESCRIPTION: This snippet shows how to import the Page domain module in a Python project using the nodriver CDP library.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/page.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.page\n```\n\n----------------------------------------\n\nTITLE: Clearing Credentials - Python\nDESCRIPTION: Removes all credentials from a specified virtual authenticator device identified by authenticator_id.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef clear_credentials(authenticator_id)\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadingAttemptKey and PreloadingAttemptSource Classes in Python\nDESCRIPTION: These classes represent keys and sources for preloading attempts. PreloadingAttemptKey identifies a preloading attempt, while PreloadingAttemptSource lists the sources for a preloading attempt, including rule set IDs and node IDs.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PreloadingAttemptKey(loader_id, action, url, target_hint=None):\n    loader_id : LoaderId\n    action : SpeculationAction\n    url : str\n    target_hint : Optional[SpeculationTargetHint] = None\n\nclass PreloadingAttemptSource(key, rule_set_ids, node_ids):\n    key : PreloadingAttemptKey\n    rule_set_ids : List[RuleSetId]\n    node_ids : List[BackendNodeId]\n```\n\n----------------------------------------\n\nTITLE: Setting and Clearing Device Orientation Overrides in Python\nDESCRIPTION: Documentation for two commands in the device_orientation module: clear_device_orientation_override for removing any orientation overrides and set_device_orientation_override for setting specific orientation values.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/device_orientation.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Two commands documented in the file:\n# 1. clear_device_orientation_override - Removes device orientation override\n# 2. set_device_orientation_override - Sets specific device orientation values\n\n# The file indicates these are generator functions with a specific return pattern:\n# Generator[x, y, z] - yields type x, resumed with type y, returns type z\n# Where x and y are the same for all commands, and z is the return type\n```\n\n----------------------------------------\n\nTITLE: Importing Database Module in Python\nDESCRIPTION: Shows how to import the database module from the nodriver.cdp package. This module provides access to database-related functionality in the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.database\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Module in Python\nDESCRIPTION: This snippet shows how to import the DOM module from the nodriver CDP package. It's a prerequisite for using any of the DOM-related functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: nodriver.cdp.dom\n```\n\n----------------------------------------\n\nTITLE: LogEntry Class Documentation (Python)\nDESCRIPTION: Class definition for handling log entries in the CDP log module.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/log.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LogEntry\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Importing NoDriver CDP PWA Module\nDESCRIPTION: This snippet shows the module name that should be used to import the PWA functionality in NoDriver. It provides access to the Chrome DevTools Protocol PWA domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/pwa.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.pwa\n```\n\n----------------------------------------\n\nTITLE: Getting JavaScript Isolate ID\nDESCRIPTION: Experimental function to retrieve the unique identifier for the JavaScript isolate.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/runtime.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nget_isolate_id()\n```\n\n----------------------------------------\n\nTITLE: DOM Type Class Definitions\nDESCRIPTION: Class definitions for DOM debugging types including DOMBreakpointType, CSPViolationType, and EventListener. These classes handle various aspects of DOM debugging functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_debugger.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: DOMBreakpointType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: CSPViolationType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: EventListener\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Importing HeapProfiler Module in Python\nDESCRIPTION: Shows how to import the HeapProfiler module from the nodriver.cdp package. This module contains types, commands, and events for heap profiling.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/heap_profiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.heap_profiler\n```\n\n----------------------------------------\n\nTITLE: Exporting Cookies for Requests Library\nDESCRIPTION: Demonstrates how to export browser cookies in a format compatible with the requests library and set them in a requests session.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/classes/browser.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# export for requests or other library\nrequests_style_cookies = await browser.cookies.get_all(requests_cookie_format=True)\n\n# use in requests:\nsession = requests.Session()\nfor cookie in requests_style_cookies:\n    session.cookies.set_cookie(cookie)\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollSnapHighlightConfig Class in Python for CDP Overlay\nDESCRIPTION: Defines a configuration class for highlighting scroll snap areas, including a scroll snap container highlight config and node ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass ScrollSnapHighlightConfig(scroll_snap_container_highlight_config, node_id):\n\n    scroll_snap_container_highlight_config: ScrollSnapContainerHighlightConfig\n\n    node_id: NodeId\n```\n\n----------------------------------------\n\nTITLE: Getting Animation Playback Rate in Python\nDESCRIPTION: Demonstrates how to use the get_playback_rate() command generator function to obtain the current global animation playback rate. This function yields arguments and returns the playback rate.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/animation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nplayback_rate = yield get_playback_rate()\n```\n\n----------------------------------------\n\nTITLE: Python Storage Commands Documentation Structure\nDESCRIPTION: Documents command functions like clear_cookies, get_storage_key_for_frame using autofunction directives.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/storage.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: clear_cookies\n\n.. autofunction:: clear_data_for_origin\n```\n\n----------------------------------------\n\nTITLE: Setting Prerendering in Python using NoDriver CDP\nDESCRIPTION: This experimental method enables or disables prerendering manually. It takes an is_allowed boolean parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\ndef set_prerendering_allowed(is_allowed):\n    \"\"\"Enable/disable prerendering manually.\n\n    Parameters:\n      is_allowed (bool)\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining load_snapshot Command in Python\nDESCRIPTION: Defines the load_snapshot command function that loads a snapshot and returns its identifier.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef load_snapshot(tiles):\n    \"\"\"Returns the snapshot identifier.\n\n    Args:\n        tiles (List[PictureTile]): An array of tiles composing the snapshot.\n\n    Returns:\n        SnapshotId: The id of the snapshot.\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Documenting Cast Domain Events in reStructuredText\nDESCRIPTION: Provides documentation for events in the Cast domain, specifically SinksUpdated and IssueUpdated, using autoclass directives with member inclusions and exclusions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cast.rst#2025-04-21_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: SinksUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: IssueUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting SPC Transaction Mode in Python\nDESCRIPTION: Sets the Secure Payment Confirmation transaction mode. This is an experimental feature related to secure payment confirmation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\ndef set_spc_transaction_mode(mode: AutoResponseMode) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Content Encoding Enumeration\nDESCRIPTION: Enum class defining supported content encoding types for backend compression\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass ContentEncoding(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    DEFLATE = 'deflate'\n    GZIP = 'gzip'\n    BR = 'br'\n    ZSTD = 'zstd'\n```\n\n----------------------------------------\n\nTITLE: Checking Contrast in Python\nDESCRIPTION: This function is part of the Audits domain and is used to check contrast issues on a page. It is a generator function that yields and resumes with specific types.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/audits.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: check_contrast\n```\n\n----------------------------------------\n\nTITLE: FedCM Command: reset_cooldown\nDESCRIPTION: Command function to reset the cooldown period for FedCM operations. Generator function that yields CDP protocol commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fed_cm.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nautofunction:: reset_cooldown\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Toctree\nDESCRIPTION: Sphinx documentation configuration using toctree directive to include all files from the cdp directory with maximum depth of 1 level.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :glob:\n    :maxdepth: 1\n\n    cdp/*\n```\n\n----------------------------------------\n\nTITLE: Importing WebAuthn Module in Python\nDESCRIPTION: This snippet shows how to import the WebAuthn module from the nodriver.cdp package. It provides access to the WebAuthn domain functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/web_authn.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.web_authn\n```\n\n----------------------------------------\n\nTITLE: Defining Database Commands in Python\nDESCRIPTION: Defines several database-related commands as generator functions. These include disable, enable, execute_sql, and get_database_table_names. Each command yields and resumes with specific argument types and returns a particular type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: execute_sql\n\n.. autofunction:: get_database_table_names\n```\n\n----------------------------------------\n\nTITLE: Defining Cast Domain Events in Python\nDESCRIPTION: Specifies event classes for the Cast domain. These events are automatically instantiated by the API and provide attributes for accessing event data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/cast.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: SinksUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: IssueUpdated\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Getting Stack Trace in Python\nDESCRIPTION: This experimental function returns a stack trace for a given stack trace ID. It returns a generator that yields the StackTrace object.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_stack_trace(stack_trace_id: StackTraceId) -> Generator[Dict[str, Any], Dict[str, Any], StackTrace]:\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Class in Python for CDP Media Domain\nDESCRIPTION: Defines the Timestamp class with an optional parameter x.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Timestamp(x=0, /)\n```\n\n----------------------------------------\n\nTITLE: Defining stop_observing Command in Python\nDESCRIPTION: This snippet defines the stop_observing command as an autofunction. It's likely used to end observation of background service events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/background_service.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: stop_observing\n```\n\n----------------------------------------\n\nTITLE: Implementing enable Command for HeadlessExperimental Domain in Python\nDESCRIPTION: Generator function that enables headless events for the target. This command is marked as deprecated since version 1.3 of the protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/headless_experimental.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef enable():\n    \"\"\"\n    Enables headless events for the target.\n    :rtype: Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n\n    # Deprecated\n    # Deprecated since version 1.3.\n\n    # Deprecated\n    # Deprecated since version 1.3.\n```\n\n----------------------------------------\n\nTITLE: CDP Audits Domain Events\nDESCRIPTION: Event definitions for the CDP Audits domain, specifically the IssueAdded event used for audit notifications. Events are instantiated by the API and expose attributes for event data.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/audits.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: IssueAdded\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Pressure Level Enumeration in Python\nDESCRIPTION: Defines the PressureLevel enumeration class with two levels of memory pressure: MODERATE and CRITICAL.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/memory.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PressureLevel(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    MODERATE = 'moderate'\n    CRITICAL = 'critical'\n```\n\n----------------------------------------\n\nTITLE: Checking Recording Status in Python\nDESCRIPTION: An asynchronous function that likely checks whether a video is currently being recorded. No parameters are specified for this function.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/classes/element.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def is_recording():\n```\n\n----------------------------------------\n\nTITLE: Defining CSP Violation Types in Python for CDP\nDESCRIPTION: Enumeration for Content Security Policy violation types that can trigger breakpoints, including trusted type sink violations and policy violations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/dom_debugger.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CSPViolationType(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    TRUSTEDTYPE_SINK_VIOLATION = 'trustedtype-sink-violation'\n\n    TRUSTEDTYPE_POLICY_VIOLATION = 'trustedtype-policy-violation'\n```\n\n----------------------------------------\n\nTITLE: Defining Media Domain Types in Python for NoDriver CDP\nDESCRIPTION: This snippet shows the structure of type definitions for the Media domain. It includes classes for PlayerId, Timestamp, PlayerMessage, PlayerProperty, PlayerEvent, PlayerErrorSourceLocation, and PlayerError.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/media.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PlayerId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: Timestamp\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerMessage\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerProperty\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerEvent\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerErrorSourceLocation\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: PlayerError\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Implementing CDP Tethering Commands and Events in Python\nDESCRIPTION: Documents the structure of CDP Tethering domain including bind and unbind commands and the Accepted event. Commands are implemented as generator functions that handle port binding operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/tethering.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Command structure\nGenerator[x, y, z]\n\n# Available commands:\n# - bind\n# - unbind\n\n# Available events:\n# - Accepted\n```\n\n----------------------------------------\n\nTITLE: GumshoejJS License and Version Header\nDESCRIPTION: The header documentation for gumshoejs v5.1.2, a framework-agnostic scrollspy script. It includes version information, a brief description, copyright notice, MIT license declaration, and GitHub repository URL.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_static/scripts/furo.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*!\n * gumshoejs v5.1.2 (patched by @pradyunsg)\n * A simple, framework-agnostic scrollspy script.\n * (c) 2019 Chris Ferdinandi\n * MIT License\n * http://github.com/cferdinandi/gumshoe\n */\n```\n\n----------------------------------------\n\nTITLE: Binding Browser Port in Python using nodriver CDP\nDESCRIPTION: This command requests browser port binding. It takes a port number as an argument and returns a generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tethering.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef bind(port):\n    \"\"\"Request browser port binding.\n\n    Parameters:\n        port (int): Port number to bind.\n    Return type:\n        Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: PWA Domain Type Definitions\nDESCRIPTION: Class definitions for PWA domain types including FileHandlerAccept, FileHandler, and DisplayMode. These classes represent data structures used in PWA-related operations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/pwa.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FileHandlerAccept:\n    # Members and documentation not shown\n    pass\n\nclass FileHandler:\n    # Members and documentation not shown\n    pass\n\nclass DisplayMode:\n    # Members and documentation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseId Class in Python\nDESCRIPTION: Defines the DatabaseId class, which is likely used to represent unique identifiers for databases. The class includes members and undocumented members, but excludes from_json and to_json methods.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/database.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: DatabaseId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: ClearCompilationCache Command Implementation in Python\nDESCRIPTION: Clears the previously seeded compilation cache. This function is marked as experimental and doesn't take any parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef clear_compilation_cache():\n    \"\"\"\n    Clears seeded compilation cache.\n\n    **EXPERIMENTAL**\n\n    * **Return type:**\n      [`Generator`](https://docs.python.org/3/library/typing.html#typing.Generator)[[`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict)[[`str`](https://docs.python.org/3/library/stdtypes.html#str), [`Any`](https://docs.python.org/3/library/typing.html#typing.Any)], [`None`](https://docs.python.org/3/library/constants.html#None)]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Inspector Domain Commands in Python\nDESCRIPTION: Commands in this module are implemented as generator functions with a specific Generator[x, y, z] return type pattern. The x and y types are consistent across commands while z represents the specific return type for each command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/inspector.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGenerator[x, y, z]\n```\n\n----------------------------------------\n\nTITLE: Handling Certificate Errors in Python (Deprecated)\nDESCRIPTION: This deprecated function handles certificate errors that triggered a certificateError event. It takes an event ID and an action as parameters, and returns a Generator yielding dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef handle_certificate_error(event_id: int, action: CertificateErrorAction) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Disabling WebAuthn Domain - Python\nDESCRIPTION: Disables the WebAuthn domain functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/web_authn.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef disable()\n```\n\n----------------------------------------\n\nTITLE: Defining MessageAdded Event in Python\nDESCRIPTION: This snippet indicates the presence of a MessageAdded event class in the module. This event is likely triggered when a new message is added to the console.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/console.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: MessageAdded\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Get Selector Location Method\nDESCRIPTION: Experimental method that finds locations of a CSS selector within a specified stylesheet. Takes stylesheet ID and selector text as parameters.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/css.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nget_location_for_selector(style_sheet_id, selector_text)\n```\n\n----------------------------------------\n\nTITLE: Defining LayerId Class in Python\nDESCRIPTION: Defines the LayerId class as a unique layer identifier in the LayerTree domain.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/layer_tree.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass LayerId:\n    \"\"\"Unique Layer identifier.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: Sphinx documentation structure defining the module hierarchy and sections for Device Access CDP domain\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/device_access.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nDeviceAccess\n============\n\n*This CDP domain is experimental.*\n\n.. module:: nodriver.cdp.device_access\n\n* Types_\n* Commands_\n* Events_\n```\n\n----------------------------------------\n\nTITLE: Defining CachedResponseType in Python\nDESCRIPTION: Defines the CachedResponseType enum used in the CacheStorage domain. This type represents different types of cached responses.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/cache_storage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: CachedResponseType\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Preloading Status Class Definition\nDESCRIPTION: Defines an enumeration class for preloading status values shared by prefetch and prerender status updates.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/preload.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PreloadingStatus(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n    PENDING = 'Pending'\n    RUNNING = 'Running'\n    READY = 'Ready'\n    SUCCESS = 'Success'\n    FAILURE = 'Failure'\n    NOT_SUPPORTED = 'NotSupported'\n```\n\n----------------------------------------\n\nTITLE: Defining File Class Type in FileSystem CDP Domain\nDESCRIPTION: Class definition for the File type in the FileSystem CDP domain, containing properties for filename, last modified timestamp, size in bytes, and file type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/file_system.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass File(name, last_modified, size, type_):\n\n    name *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n\n    last_modified *: [`TimeSinceEpoch`](network.md#nodriver.cdp.network.TimeSinceEpoch)*\n\n    size *: [`float`](https://docs.python.org/3/library/functions.html#float)*\n\n    type_ *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n```\n\n----------------------------------------\n\nTITLE: StreamHandle Class Definition\nDESCRIPTION: Defines the StreamHandle class documentation structure with member inclusions and exclusions\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/io.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: StreamHandle\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Error Override in Python (Deprecated)\nDESCRIPTION: This deprecated function enables or disables overriding certificate errors. When enabled, all certificate error events must be handled by the DevTools client. It takes a boolean parameter and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/security.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef set_override_certificate_errors(override: bool) -> Generator[Dict[str, Any], Dict[str, Any], None]:\n```\n\n----------------------------------------\n\nTITLE: Defining StickyPositionConstraint Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the StickyPositionConstraint type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: StickyPositionConstraint\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Defining HeavyAdResolutionStatus Enum in Python\nDESCRIPTION: This enum defines the possible resolution statuses for heavy ads, including blocked and warning states.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/audits.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass HeavyAdResolutionStatus(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None):\n\n    HEAVY_AD_BLOCKED = 'HeavyAdBlocked'\n\n    HEAVY_AD_WARNING = 'HeavyAdWarning'\n```\n\n----------------------------------------\n\nTITLE: Setting Device Metrics Override in Python\nDESCRIPTION: Deprecated method to override device screen dimensions and properties. Takes various parameters for configuring viewport dimensions, scale factors, and device orientation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndef set_device_metrics_override(width, height, device_scale_factor, mobile, scale=None, screen_width=None, screen_height=None, position_x=None, position_y=None, dont_set_visible_size=None, screen_orientation=None, viewport=None):\n    \"\"\"Overrides the values of device screen dimensions\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation Override in Python using NoDriver CDP\nDESCRIPTION: This deprecated method overrides the Geolocation Position or Error. It takes optional latitude, longitude, and accuracy parameters and returns a Generator.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/page.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\ndef set_geolocation_override(latitude=None, longitude=None, accuracy=None):\n    \"\"\"Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.\n\n    Parameters:\n      latitude (Optional[float]): Mock latitude\n      longitude (Optional[float]): Mock longitude\n      accuracy (Optional[float]): Mock accuracy\n    Return type:\n      Generator[Dict[str, Any], Dict[str, Any], None]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Addresses for Form Verification in Python CDP\nDESCRIPTION: Command that sets addresses for developers to verify their forms implementation. Takes a list of Address objects as parameter and returns a generator with no output.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/autofill.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_addresses(addresses):\n    \"\"\"Set addresses so that developers can verify their forms implementation.\"\"\"\n    # Parameters:\n    #   addresses (List[Address]) – \n    # Return type:\n    #   Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Get All Cookies Method (Deprecated)\nDESCRIPTION: Deprecated method that returns all browser cookies. Returns a Generator containing a list of Cookie objects with detailed cookie information.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/network.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef get_all_cookies() -> Generator[Dict[str, Any], Dict[str, Any], List[Cookie]]\n```\n\n----------------------------------------\n\nTITLE: Overriding Navigator Platform in Python (Deprecated)\nDESCRIPTION: Deprecated method to override the value returned by the JavaScript navigator object. Returns a generator yielding configuration dictionaries.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef set_navigator_overrides(platform):\n    # Implementation not shown\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing Debugger Module in Python\nDESCRIPTION: This snippet shows how to import the debugger module from the nodriver.cdp package. It provides access to JavaScript debugging capabilities through the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/debugger.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.debugger\n```\n\n----------------------------------------\n\nTITLE: Hinge Configuration in Python\nDESCRIPTION: Method to configure dual screen device hinge overlay. Takes an optional HingeConfig parameter, null hides the hinge.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/overlay.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef set_show_hinge(hinge_config: Optional[HingeConfig] = None) -> Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Sphinx/RST Documentation Structure\nDESCRIPTION: ReStructuredText documentation defining the Browser domain module structure and organization\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/browser.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nBrowser\n=======\n\nThe Browser domain defines methods and events for browser managing.\n\n.. module:: nodriver.cdp.browser\n\n* Types_\n* Commands_\n* Events_\n```\n\n----------------------------------------\n\nTITLE: Memory Domain Type Definitions\nDESCRIPTION: Defines core memory-related types including PressureLevel, SamplingProfileNode, SamplingProfile, Module, and DOMCounter. These types are automatically instantiated by the API as return values from commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/memory.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: PressureLevel\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: SamplingProfileNode\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: SamplingProfile\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: Module\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DOMCounter\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass directive for Tab documentation\nDESCRIPTION: This snippet configures the Sphinx autoclass directive to document the Tab class from the nodriver module. It includes all members and inherited members in alphabetical order, including undocumented members, while excluding the __setattr__ method.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/tab.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass::  nodriver.Tab\n    :members:\n    :inherited-members:\n    :member-order: alphabetical\n    :undoc-members:\n    :exclude-members: __setattr__\n```\n\n----------------------------------------\n\nTITLE: Retrieving WASM Bytecode in Python (Deprecated)\nDESCRIPTION: This deprecated function retrieves WASM bytecode for a given script ID. It is recommended to use getScriptSource instead.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/debugger.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_wasm_bytecode(script_id):\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Performance Module\nDESCRIPTION: ReStructuredText documentation layout defining the structure for the performance module documentation, including sections for Types, Commands and Events.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/performance.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPerformance\n===========\n\n.. module:: nodriver.cdp.performance\n\n* Types_\n* Commands_\n* Events_\n\nTypes\n-----\n\nGenerally, you do not need to instantiate CDP types\nyourself. Instead, the API creates objects for you as return\nvalues from commands, and then you can use those objects as\narguments to other commands.\n\n.. autoclass:: Metric\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\nCommands\n--------\n\nEach command is a generator function. The return\ntype ``Generator[x, y, z]`` indicates that the generator\n*yields* arguments of type ``x``, it must be resumed with\nan argument of type ``y``, and it returns type ``z``. In\nthis library, types ``x`` and ``y`` are the same for all\ncommands, and ``z`` is the return type you should pay attention\nto. For more information, see\n:ref:`Getting Started: Commands <getting-started-commands>`.\n\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: get_metrics\n\n.. autofunction:: set_time_domain\n\nEvents\n------\n\nGenerally, you do not need to instantiate CDP events\nyourself. Instead, the API creates events for you and then\nyou use the event's attributes.\n\n.. autoclass:: Metrics\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Input Module Structure Definition in RST\nDESCRIPTION: ReStructuredText markup defining the structure of the input module documentation, organized into Types, Commands and Events sections.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/input_.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: nodriver.cdp.input_\n\n* Types_\n* Commands_\n* Events_\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Documentation Block for Preload Commands\nDESCRIPTION: RestructuredText documentation for command functions in the CDP Preload domain, including enable and disable functions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/preload.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerErrorsRaised Event Class in Python for CDP Media Domain\nDESCRIPTION: Defines the PlayerErrorsRaised event class with player_id and errors attributes, used to send a list of errors that need to be delivered.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass PlayerErrorsRaised(player_id, errors)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Commands - FileSystem\nDESCRIPTION: ReStructuredText documentation defining the commands section for the FileSystem CDP domain, specifically the get_directory command.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/file_system.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: get_directory\n```\n\n----------------------------------------\n\nTITLE: Event class for Cast issue updates\nDESCRIPTION: Defines an event class that is fired whenever there's a change in outstanding issues or error messages related to Cast functionality.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/cast.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass IssueUpdated(issue_message):\n    \"\"\"\n    This is fired whenever the outstanding issue/error message changes.\n    `issueMessage` is empty if there is no issue.\n    \"\"\"\n\n    issue_message *: [`str`](https://docs.python.org/3/library/stdtypes.html#str)*\n```\n\n----------------------------------------\n\nTITLE: Events Documentation Structure\nDESCRIPTION: RST documentation for browser events like DownloadWillBegin and DownloadProgress\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/browser.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: DownloadWillBegin\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n\n.. autoclass:: DownloadProgress\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Removing Instrumentation Breakpoint Command in Python\nDESCRIPTION: References the remove_instrumentation_breakpoint command generator function in the EventBreakpoints module. This function removes a previously set instrumentation breakpoint.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/event_breakpoints.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: remove_instrumentation_breakpoint\n```\n\n----------------------------------------\n\nTITLE: VirtualTimeBudgetExpired Event Class Documentation\nDESCRIPTION: Experimental CDP event class that gets triggered when the virtual time budget for the current VirtualTimePolicy has been exhausted. The event includes width and height parameters measured in Device Independent Pixels (DIP).\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass VirtualTimeBudgetExpired:\n    \"\"\"Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.\"\"\"\n    # Parameters:\n    # width (int) - Frame width (DIP)\n    # height (int) - Frame height (DIP)\n    # Returns: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Accepted Event Class for Port Binding in Python\nDESCRIPTION: This class represents an event that informs about successful port binding. It includes attributes for the bound port number and the assigned connection ID.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/tethering.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Accepted:\n    \"\"\"Informs that port was successfully bound and got a specified connection id.\n\n    Attributes:\n        port (int): Port number that was successfully bound.\n        connection_id (str): Connection id to be used.\n    \"\"\"\n\n    def __init__(self, port, connection_id):\n        self.port = port\n        self.connection_id = connection_id\n```\n\n----------------------------------------\n\nTITLE: IO Command Functions\nDESCRIPTION: Autofunction directives for documenting close, read, and resolve_blob commands\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/io.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: close\n\n.. autofunction:: read\n\n.. autofunction:: resolve_blob\n```\n\n----------------------------------------\n\nTITLE: Python Module Path Definition\nDESCRIPTION: Specifies the module path for accessing DevTools IO operations\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: nodriver.cdp.io\n```\n\n----------------------------------------\n\nTITLE: Implementing disable Command in Python for CDP Media Domain\nDESCRIPTION: Implements the disable command to disable the Media domain. Returns a generator with None as the final return type.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/media.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    # Implementation details\n    pass\n```\n\n----------------------------------------\n\nTITLE: Python DOM Debugger Module Definition\nDESCRIPTION: Module definition for nodriver.cdp.dom_debugger that provides DOM debugging capabilities through Chrome DevTools Protocol. Includes types for DOM breakpoints, CSP violations, and event listeners, along with commands for managing debugging breakpoints.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_debugger.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: nodriver.cdp.dom_debugger\n```\n\n----------------------------------------\n\nTITLE: Clearing Browser Cache in Python\nDESCRIPTION: Demonstrates how to use the clear_browser_cache command to clear the browser cache. This function is a generator that yields no arguments and returns a boolean indicating success.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/network.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = yield from network.clear_browser_cache()\n```\n\n----------------------------------------\n\nTITLE: Storage Domain Commands Documentation in RST\nDESCRIPTION: Sphinx/RST documentation for CDP storage command functions that handle operations like clearing cookies/data, managing shared storage, trust tokens, interest groups and attribution reporting.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/storage.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: clear_cookies\n\n.. autofunction:: clear_data_for_origin\n\n.. autofunction:: clear_data_for_storage_key\n```\n\n----------------------------------------\n\nTITLE: Implementing disable Command for Log Management\nDESCRIPTION: Generator function that disables the log domain, preventing further log entries from being reported to the client.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/log.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef disable():\n    \"\"\"Disables log domain, prevents further log entries from being reported to the client.\"\"\"\n    # Return type: Generator[Dict[str, Any], Dict[str, Any], None]\n```\n\n----------------------------------------\n\nTITLE: Exporting Browser Cookies for Requests Library\nDESCRIPTION: Demonstrates how to export browser cookies in a format compatible with the requests library and set them in a requests session.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/classes/browser.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# export for requests or other library\nrequests_style_cookies = await browser.cookies.get_all(requests_cookie_format=True)\n\n# use in requests:\nsession = requests.Session()\nfor cookie in requests_style_cookies:\n    session.cookies.set_cookie(cookie)\n```\n\n----------------------------------------\n\nTITLE: Getting DOM Snapshot in Python using CDP\nDESCRIPTION: This function is used to get a snapshot of the document. It's a generator function that yields and resumes with specific argument types, and returns a snapshot of the document.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_snapshot.rst.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: get_snapshot\n```\n\n----------------------------------------\n\nTITLE: Defining PictureTile Type in Python for CDP LayerTree Domain\nDESCRIPTION: Defines the PictureTile type used in the LayerTree domain. This type is automatically instantiated by the API and used as return values or arguments in commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/layer_tree.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PictureTile\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Information in CDP Schema Module\nDESCRIPTION: The get_domains function is a generator that retrieves available domains in the Chrome DevTools Protocol. It returns domains information that can be used with other CDP commands.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/schema.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: get_domains\n```\n\n----------------------------------------\n\nTITLE: Importing DOMSnapshot CDP Module in Python\nDESCRIPTION: This snippet shows how to import the DOMSnapshot module from the nodriver.cdp package. It's used to access the DOMSnapshot domain functionality in the Chrome DevTools Protocol.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/dom_snapshot.rst.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: nodriver.cdp.dom_snapshot\n```\n\n----------------------------------------\n\nTITLE: Getting Animation Playback Rate in Python using CDP\nDESCRIPTION: This function retrieves the playback rate of animations. It is a generator function that yields and resumes with specific types, returning the playback rate.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: get_playback_rate\n```\n\n----------------------------------------\n\nTITLE: Defining CDP Types in Python\nDESCRIPTION: This section demonstrates how CDP types are defined as Python classes, with various attributes and methods excluded from documentation.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/page.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: FrameId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation in Python using CDP\nDESCRIPTION: This function is used to disable animations in the browser. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: disable\n```\n\n----------------------------------------\n\nTITLE: Enabling Animation in Python using CDP\nDESCRIPTION: This function is used to enable animations in the browser. It is a generator function that yields and resumes with specific types, returning None.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/animation.rst.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: enable\n```\n\n----------------------------------------\n\nTITLE: DOM Storage Event Classes\nDESCRIPTION: Event classes for DOM storage operations including DomStorageItemAdded, DomStorageItemRemoved, DomStorageItemUpdated, and DomStorageItemsCleared.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/dom_storage.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DomStorageItemAdded:\n    # Members and functionality documented separately\n    pass\n\nclass DomStorageItemRemoved:\n    # Members and functionality documented separately\n    pass\n\nclass DomStorageItemUpdated:\n    # Members and functionality documented separately\n    pass\n\nclass DomStorageItemsCleared:\n    # Members and functionality documented separately\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Module Documentation\nDESCRIPTION: Sphinx documentation for the nodriver.cdp.profiler module in reStructuredText format. Defines module structure with types, commands, and events sections.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/profiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: nodriver.cdp.profiler\n\n* Types_\n* Commands_\n* Events_\n```\n\n----------------------------------------\n\nTITLE: RST Class Documentation Structure\nDESCRIPTION: ReStructuredText directives for documenting Python classes in the fetch module, including member specifications and exclusions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/fetch.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: RequestId\n      :members:\n      :undoc-members:\n      :exclude-members: from_json, to_json\n```\n\n----------------------------------------\n\nTITLE: VideoDecodeAcceleratorCapability Class Definition in Python CDP API\nDESCRIPTION: Defines a class that describes supported video decoding profiles with associated minimum and maximum resolutions.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass VideoDecodeAcceleratorCapability(profile, max_resolution, min_resolution)\n```\n\n----------------------------------------\n\nTITLE: get_info Command Function in Python CDP API\nDESCRIPTION: Generator function that returns comprehensive system information including GPU details, model information, and command line configuration.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_info()\n```\n\n----------------------------------------\n\nTITLE: Declaring CDP Commands as Python Generator Functions\nDESCRIPTION: This snippet shows how CDP commands are declared as generator functions in Python, with specific return type annotations.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/nodriver/cdp/page.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: add_compilation_cache\n```\n\n----------------------------------------\n\nTITLE: Implementing can_emulate Command in Python\nDESCRIPTION: Defines a generator function to check if emulation is supported. This command is deprecated since version 1.3.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/emulation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef can_emulate():\n    \"\"\"Tells whether emulation is supported.\n\n    Returns:\n        True if emulation is supported.\n    \"\"\"\n    # Implementation details omitted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting Security Command Functions in RST\nDESCRIPTION: ReStructuredText documentation for security command functions including disable, enable, and certificate error handling\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/html/_sources/nodriver/cdp/security.rst.txt#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: disable\n\n.. autofunction:: enable\n\n.. autofunction:: handle_certificate_error\n\n.. autofunction:: set_ignore_certificate_errors\n\n.. autofunction:: set_override_certificate_errors\n```\n\n----------------------------------------\n\nTITLE: Size Class Definition in Python CDP API\nDESCRIPTION: Defines a class for representing width and height dimensions of an entity in pixels.\nSOURCE: https://github.com/ultrafunkamsterdam/nodriver/blob/main/docs/_build/markdown/nodriver/cdp/system_info.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Size(width, height)\n```"
  }
]