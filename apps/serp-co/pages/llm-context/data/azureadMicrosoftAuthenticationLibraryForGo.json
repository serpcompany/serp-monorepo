[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-go",
    "content": "TITLE: Token Acquisition with Public Client in MSAL for Go\nDESCRIPTION: Demonstrates how to acquire tokens with a public client, including checking for cached tokens and falling back to interactive authentication if needed. Includes account management.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// If your application previously authenticated a user, call AcquireTokenSilent with that user's account\n// to use cached authentication data. This example shows choosing an account from the cache, however this\n// isn't always necessary because the AuthResult returned by authentication methods includes user account\n// information.\naccounts, err := client.Accounts(context.TODO())\nif err != nil {\n    // TODO: handle error\n}\nif len(accounts) > 0 {\n    // There may be more accounts; here we assume the first one is wanted.\n    // AcquireTokenSilent returns a non-nil error when it can't provide a token.\n    result, err = client.AcquireTokenSilent(context.TODO(), scopes, public.WithSilentAccount(accounts[0]))\n}\nif err != nil || len(accounts) == 0 {\n    // cache miss, authenticate a user with another AcquireToken* method\n    result, err = client.AcquireTokenInteractive(context.TODO(), scopes)\n    if err != nil {\n        // TODO: handle error\n    }\n}\n// TODO: save the authenticated user's account, use the access token\nuserAccount := result.Account\naccessToken := result.AccessToken\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition with Confidential Client in MSAL for Go\nDESCRIPTION: Shows how to acquire tokens with a confidential client, checking the cache first and then falling back to credential-based authentication when needed.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nscopes := []string{\"scope\"}\nresult, err := confidentialClient.AcquireTokenSilent(context.TODO(), scopes)\nif err != nil {\n    // cache miss, authenticate with another AcquireToken... method\n    result, err = confidentialClient.AcquireTokenByCredential(context.TODO(), scopes)\n    if err != nil {\n        // TODO: handle error\n    }\n}\naccessToken := result.AccessToken\n```\n\n----------------------------------------\n\nTITLE: Initializing a Confidential Client in MSAL for Go\nDESCRIPTION: Creates a new confidential client instance using a client secret. Confidential clients can securely store credentials and are typically used for web applications or APIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/AzureAD/microsoft-authentication-library-for-go/apps/confidential\"\n\n// confidential clients have a credential, such as a secret or a certificate\ncred, err := confidential.NewCredFromSecret(\"client_secret\")\nif err != nil {\n    // TODO: handle error\n}\nconfidentialClient, err := confidential.New(\"https://login.microsoftonline.com/your_tenant\", \"client_id\", cred)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Public Client in MSAL for Go\nDESCRIPTION: Creates a new public client instance using the client ID and authority URL. Public clients are typically used for applications that cannot keep a client secret.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/AzureAD/microsoft-authentication-library-for-go/apps/public\"\n\npublicClient, err := public.New(\"client_id\", public.WithAuthority(\"https://login.microsoftonline.com/your_tenant\"))\n```\n\n----------------------------------------\n\nTITLE: Acquiring Tokens for Managed Identity in Go\nDESCRIPTION: Defines the AcquireToken method for the Client struct to acquire tokens from the configured managed identity on an Azure resource. It also includes a Source enum to represent managed identity sources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Acquires tokens from the configured managed identity on an azure resource.\n//\n// Resource: scopes application is requesting access to\n// Options: [WithClaims]\nfunc (client Client) AcquireToken(context context.Context, resource string, options ...AcquireTokenOption) (base.AuthResult, error) {\n    return base.AuthResult{}, nil\n}\n\n// Source represents the managed identity sources supported.\ntype Source int\n\nconst (\n    // AzureArc represents the source to acquire token for managed identity is Azure Arc.\n    AzureArc = 0\n\n    // DefaultToIMDS indicates that the source is defaulted to IMDS since no environment variables are set.\n    DefaultToIMDS = 1\n)\n\n// Detects and returns the managed identity source available on the environment.\nfunc GetSource() Source {\n    return DefaultToIMDS\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Managed Identity Clients in Go\nDESCRIPTION: Demonstrates the creation and usage of different Managed Identity clients, including system-assigned, client ID-assigned, resource ID-assigned, and object ID-assigned identities.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n\n    mi \"github.com/AzureAD/microsoft-authentication-library-for-go/apps/managedidentity\"\n)\n\nfunc RunManagedIdentity() {\n    customHttpClient := &http.Client{}\n\n    miSystemAssigned, error := mi.New(mi.SystemAssigned())\n    if error != nil {\n        fmt.Println(error)\n    }\n\n    miClientIdAssigned, error := mi.New(mi.ClientID(\"client id 123\"), mi.WithHTTPClient(customHttpClient))\n    if error != nil {\n        fmt.Println(error)\n    }\n\n    miResourceIdAssigned, error := mi.New(mi.ResourceID(\"resource id 123\"))\n    if error != nil {\n        fmt.Println(error)\n    }\n\n    miObjectIdAssigned, error := mi.New(mi.ObjectID(\"object id 123\"))\n    if error != nil {\n        fmt.Println(error)\n    }\n\n    miSystemAssigned.AcquireToken(context.Background(), \"resource\", mi.WithClaims(\"claim\"))\n\n    miClientIdAssigned.AcquireToken(context.Background(), \"resource\")\n\n    miResourceIdAssigned.AcquireToken(context.Background(), \"resource\", mi.WithClaims(\"claim\"))\n    \n    miObjectIdAssigned.AcquireToken(context.Background(), \"resource\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Managed Identity Client in Go\nDESCRIPTION: Defines the New function to create a new ManagedIdentityClient with various identity types and options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Client to be used to acquire tokens for managed identity.\n// ID: [SystemAssigned()], [ClientID(\"clientID\")], [ResourceID(\"resourceID\")], [ObjectID(\"objectID\")]\n//\n// Options: [WithHTTPClient]\nfunc New(id ID, options ...Option) (Client, error) {\n    // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition with Managed Identity Client in MSAL for Go\nDESCRIPTION: Demonstrates how to acquire tokens using a managed identity client. This simplified approach is used in Azure environments where managed identities are available.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nresource := \"<Your resource>\"\nresult, err := miSystemAssigned.AcquireToken(context.TODO(), resource)\nif err != nil {\n    // TODO: handle error\n}\naccessToken := result.AccessToken\n```\n\n----------------------------------------\n\nTITLE: Initializing a System-Assigned Managed Identity Client in MSAL for Go\nDESCRIPTION: Creates a new managed identity client for System-Assigned identity. This approach is used in Azure environments where the identity is managed by Azure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport mi \"github.com/AzureAD/microsoft-authentication-library-for-go/apps/managedidentity\"\n\n// Managed identity client have a type of ID required, SystemAssigned or UserAssigned\nmiSystemAssigned, err := mi.New(mi.SystemAssigned())\nif err != nil {\n    // TODO: handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a User-Assigned Managed Identity Client in MSAL for Go\nDESCRIPTION: Creates a new managed identity client for User-Assigned identity with a specific client ID. This is used when you need to specify which managed identity to use in Azure environments.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport mi \"github.com/AzureAD/microsoft-authentication-library-for-go/apps/managedidentity\"\n\n// Managed identity client have a type of ID required, SystemAssigned or UserAssigned\nmiSystemAssigned, err := mi.New(mi.UserAssignedClientID(\"YOUR_CLIENT_ID\"))\nif err != nil {\n    // TODO: handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CallErr Type for HTTP Errors\nDESCRIPTION: Definition of a specialized CallErr type that captures HTTP call errors, storing the request, response, and error information. Includes implementation of the error interface and a Verbose() method for detailed diagnostics.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/errors/error_design.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Type in Go\nDESCRIPTION: Example of how to create a custom error type in Go by implementing the error interface with a struct and corresponding Error() method.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/errors/error_design.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Using errors.As to Check for CallErr Type\nDESCRIPTION: Example of how to check if an error is a CallErr using the Go errors package with the errors.As function.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/errors/error_design.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using errors.Verbose to Get Detailed Error Information\nDESCRIPTION: Example of how to retrieve the most verbose message from any error using the errors.Verbose function.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/errors/error_design.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(errors.Verbose(err))\n```\n\n----------------------------------------\n\nTITLE: MSAL Go Configuration Template\nDESCRIPTION: JSON configuration template for MSAL Go development applications. Contains fields for authentication settings including authority, client credentials, scopes, and redirect URI that need to be populated with appropriate values before running the samples.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/tests/devapps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authority\": \"https://login.microsoftonline.com/organizations\",\n    \"client_id\": \"your_client_id\",\n    \"scopes\": [\"user.read\"],\n    \"username\": \"your_username\",\n    \"password\": \"your_password\",\n    \"redirect_uri\": \"redirect uri registered on the portal\",\n    \"code_challenge\": \"transformed code verifier from PKCE\",  \n    \"state\": \"state parameter for authorization code flow\",\n    \"client_secret\": \"client secret you generated for your app\",\n    \"thumbprint\": \"the certificate thumbprint defined in your app generation\",\n    \"pem_file\": \"the file path of your private key pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Managed Identity in Go\nDESCRIPTION: Demonstrates error handling approaches for both client-side and service-side errors in the Managed Identity implementation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n    return errors.New(\"Some Managed Identity Error here\") \n}\n\nswitch reply.StatusCode { \n    case 200, 201: \n    default: \n        sd := strings.TrimSpace(string(data)) \n\n        if sd != \"\" { \n            // We probably have the error in the body. \n            return nil, errors.CallErr { \n                Req: req, \n                Resp: reply, \n                Err: fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\",req.URL.String(), req.Method, reply.StatusCode, sd)\n            } \n        }  \n\n        return nil, errors.CallErr{ \n            Req: req, \n            Resp: reply, \n            Err: fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d\", req.URL.String(), req.Method, reply.StatusCode), \n } \n}\n\ntype CallErr struct { \n    Req *http.Request \n    // Resp contains response body \n    Resp *http.Response \n    Err error \n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Metadata for Managed Identity in Go\nDESCRIPTION: Defines the AuthenticationResultMetadata struct with TokenSource and RefreshOn fields for caching purposes in the Managed Identity implementation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype TokenSource int\n\nconst (\n    IdentityProvider TokenSource = 0\n    Cache = 1\n)\n\ntype AuthResultMetadata struct {\n    TokenSource TokenSource\n    RefreshOn time.Time\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Client for Managed Identity in Go\nDESCRIPTION: Defines the WithHTTPClient option to allow setting a custom HTTP client for the Managed Identity client.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// WithHTTPClient allows for a custom HTTP client to be set.\nfunc WithHTTPClient(httpClient ops.HTTPClient) Option {\n    // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Claims for Token Request in Go\nDESCRIPTION: Defines the WithClaims option to set additional claims for the token request, such as those required by conditional access policies.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/docs/managedidentity_public_api.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// WithClaims sets additional claims to request for the token, such as those required by conditional access policies.\n// Use this option when Azure AD returned a claims challenge for a prior request. The argument must be decoded.\nfunc WithClaims(claims string) AcquireTokenOption {\n    // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CallErr in the comm Package\nDESCRIPTION: Example of how CallErr is instantiated in the comm package when handling HTTP request errors, capturing request, response, and formatted error information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/errors/error_design.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n\n----------------------------------------\n\nTITLE: Displaying Public Surface Structure in Go\nDESCRIPTION: Shows the directory structure for the public-facing components of the MSAL Go library, including applications, confidential and public APIs, and cache interface.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/design/design.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napps/ - Contains all our code\n  confidential/ - The confidential application API\n  public/ - The public application API\n  cache/ - The cache interface that can be implemented to provide persistence cache storage of credentials\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal Structure in Go\nDESCRIPTION: Illustrates the directory structure for the internal components of the MSAL Go library, including shared client code, JSON handling, and request handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/design/design.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napps/\n  internal/\n    client/ - Shared package for common calls that Public and Confidential apps share\n    json/ - Our own json encoder/decoder for special needs\n    shared/ - Holds types that need to be in multiple packages and can't be moved into a single one due to import cycles\n    requests/ - The package to communicate to services to get tokens\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go's Internal Package Usage\nDESCRIPTION: Shows examples of how the internal directory is used in the MSAL Go library to restrict package access within the project structure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/design/design.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napps/internal/base - Only can be used by packages defined at apps/\napps/internal/base/internal/storage - Only can be use by package client\n```\n\n----------------------------------------\n\nTITLE: Defining the State Machine Function Type for JSON Processing\nDESCRIPTION: Definition of the state machine function type used for processing JSON data. This implements a state machine pattern based on Rob Pike's approach to lexers and parsers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/internal/json/design.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Testing MSAL Go with Azure SDK\nDESCRIPTION: This code snippet demonstrates how to clone the Azure SDK repository, replace the MSAL Go dependency with a local version, and run tests to ensure compatibility before releasing a new version.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/design/release.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone github.com/Azure/azure-sdk-for-go --single-branch --depth=1\ncd azure-sdk-for-go/sdk/azidentity\ngo mod edit -replace=github.com/AzureAD/microsoft-authentication-library-for-go=\"TODO: disk path to MSAL repo\"\ngo mod tidy\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Microsoft Authentication Library in Go\nDESCRIPTION: Command to execute integration tests with race condition detection for the Microsoft Authentication Library for Go.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/apps/tests/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./apps/tests/integration/\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up MSAL Go Repository with Git\nDESCRIPTION: Commands for forking and cloning the Microsoft Authentication Library for Go repository, followed by setting up the upstream remote to track the original repository.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:username/microsoft-authentication-library-for-go.git\n$ cd microsoft-authentication-library-for-go\n$ git remote add upstream git@github.com:AzureAD/microsoft-authentication-library-for-go.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: Command to create and switch to a new feature branch for development work.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Git configuration commands to set up user name and email address for commit attribution.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"J. Random User\"\n$ git config --global user.email \"j.random.user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Example of a Good Git Commit Message Format\nDESCRIPTION: Template showing the proper format for writing clear and informative Git commit messages with a concise header and detailed body.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: git\nCODE:\n```\nfix: explaining the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream Repository in Git\nDESCRIPTION: Commands for syncing a local branch with the upstream repository using Git rebase to maintain a clean commit history.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n$ git rebase upstream/v0.1  # or upstream/main\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin in Git\nDESCRIPTION: Git command to push local changes to the remote origin repository, making them available for creating a pull request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Dependency for ADAL .NET with Version Range\nDESCRIPTION: A NuGet package reference example that demonstrates how to lock on a specific MINOR version while accepting all PATCH updates within that range. This syntax ensures that builds include all updates from 1.1.0 to 1.1.x but not 1.2.0 or higher.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-go/blob/main/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"ADALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```"
  }
]