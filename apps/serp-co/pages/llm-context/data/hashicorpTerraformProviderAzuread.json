[
  {
    "owner": "hashicorp",
    "repo": "terraform-provider-azuread",
    "content": "TITLE: Creating Azure AD Service Principal for an Application - Terraform - HCL\nDESCRIPTION: This snippet demonstrates how to create a new Azure AD application and an associated service principal in Terraform. It uses the azuread_application and azuread_service_principal resources, associating them via the client_id and assigning an owner based on the current client's object_id. It requires the azuread Terraform provider, proper authentication, and necessary API permissions, creating both application and service principal resources and linking owners as needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal.md#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n  owners       = [data.azuread_client_config.current.object_id]\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id                    = azuread_application.example.client_id\n  app_role_assignment_required = false\n  owners                       = [data.azuread_client_config.current.object_id]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD User Data with Terraform\nDESCRIPTION: Example shows how to retrieve information about an Azure AD user using their user principal name. This data source requires either User.Read.All or Directory.Read.All application roles when authenticated with a service principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/user.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"user@hashicorp.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Provider in Terraform\nDESCRIPTION: Example configuration showing how to set up and use the Azure AD provider in Terraform, including provider configuration, domain retrieval, and resource creation for applications, service principals, and users.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure Terraform\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.7.0\"\n    }\n  }\n}\n\n# Configure the Azure Active Directory Provider\nprovider \"azuread\" {\n\n  # NOTE: Environment Variables can also be used for Service Principal authentication\n  # Terraform also supports authenticating via the Azure CLI too.\n  # See official docs for more info: https://registry.terraform.io/providers/hashicorp/azuread/latest/docs\n\n  # client_id     = \"...\"\n  # client_secret = \"...\"\n  # tenant_id     = \"...\"\n}\n\n# Retrieve domain information\ndata \"azuread_domains\" \"example\" {\n  only_initial = true\n}\n\n# Create an application\nresource \"azuread_application\" \"example\" {\n  name = \"ExampleApp\"\n}\n\n# Create a service principal\nresource \"azuread_service_principal\" \"example\" {\n  application_id = azuread_application.example.application_id\n}\n\n# Create a user\nresource \"azuread_user\" \"example\" {\n  user_principal_name = \"ExampleUser@${data.azuread_domains.example.domains.0.domain_name}\"\n  display_name        = \"Example User\"\n  password            = \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Azure AD Application Registration via Terraform CLI - Shell\nDESCRIPTION: This shell command demonstrates the use of the 'terraform import' CLI to associate an existing Azure AD application registration with a Terraform-managed resource. The example shows the required syntax using the fully qualified resource name and the application's object ID path. Proper installation and authentication of Terraform and the AzureAD provider are prerequisites. Replace the object ID with your application's identifier to perform the import; the command does not modify the resource but brings it under Terraform state management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_registration.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_registration.example /applications/00000000-0000-0000-0000-000000000000\n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application from Gallery Template and Service Principal - Terraform - HCL\nDESCRIPTION: This snippet shows how to create an Azure AD application from an existing gallery template and immediately configure a corresponding service principal. It uses data sources to look up gallery information, then provisions the app and links it for service principal creation. Dependencies include the azuread provider and access to Azure templates, ensuring seamless integration between template-based app provisioning and principal creation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Marketo\"\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id    = azuread_application.example.client_id\n  use_existing = true\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure AD Authentication - PowerShell\nDESCRIPTION: PowerShell commands to set environment variables for Azure AD authentication credentials including client ID, client secret, and tenant ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_secret.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell\n$env:ARM_CLIENT_ID = \"00000000-0000-0000-0000-000000000000\"\n$env:ARM_CLIENT_SECRET = \"MyCl1eNtSeCr3t\"\n$env:ARM_TENANT_ID = \"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Permission Scope Block Arguments - Terraform Provider - Markdown\nDESCRIPTION: Outlines the argument structure and accepted values for nested 'oauth2_permission_scope' blocks in the AzureAD application resource, required for defining delegated permissions (scopes) within OAuth2-enabled applications. It includes administrative and user consent display parameters, enablement flag, unique UUID requirements, and type restrictions. Reference is made to using the 'random_uuid' Terraform resource to generate suitable identifiers as needed. The block definition is essential for exposing fine-grained application permissions programmatically.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n\"`oauth2_permission_scope` blocks support the following:\\n\\n* `admin_consent_description` - (Required) Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\\n* `admin_consent_display_name` - (Required) Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\\n* `enabled` - (Optional) Determines if the permission scope is enabled. Defaults to `true`.\\n* `id` - (Required) The unique identifier of the delegated permission. Must be a valid UUID.\\n\\n-> **Tip: Generating a UUID for the `id` field** To generate a value for the `id` field in cases where the actual UUID is not important, you can use the `random_uuid` resource. See the [application example](https://github.com/hashicorp/terraform-provider-azuread/tree/main/examples/application) in the provider repository.\\n\\n* `type` - (Optional) Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.\\n* `user_consent_description` - (Optional) Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\\n* `user_consent_display_name` - (Optional) Display name for the delegated permission that appears in the end user consent experience.\\n* `value` - (Optional) The value that is used for the `scp` claim in OAuth 2.0 access tokens.\\n\\n~> **Default `user_impersonation` Scope** Unlike the Azure Portal, applications created with the Terraform AzureAD provider do not get assigned a default `user_impersonation` scope. You will need to include a block for the `user_impersonation` scope if you need it for your application.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Provider with Terraform\nDESCRIPTION: Example configuration demonstrating how to set up the Azure AD provider and create basic resources including an application registration, service principal, and user. Shows provider configuration, data source usage, and resource creation patterns.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure Terraform\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 3.1.0\"\n    }\n  }\n}\n\n# Configure the Azure Active Directory Provider\nprovider \"azuread\" {\n  tenant_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\n# Retrieve domain information\ndata \"azuread_domains\" \"example\" {\n  only_initial = true\n}\n\n# Create an application\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"ExampleApp\"\n}\n\n# Create a service principal\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application_registration.example.client_id\n}\n\n# Create a user\nresource \"azuread_user\" \"example\" {\n  user_principal_name = \"ExampleUser@${data.azuread_domains.example.domains.0.domain_name}\"\n  display_name        = \"Example User\"\n  password            = \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Application Certificate with Base64 DER using Terraform\nDESCRIPTION: This Terraform example illustrates creating an `azuread_application_registration` and associating a DER-formatted certificate with it via `azuread_application_certificate`. The certificate content is read from `cert.der`, base64 encoded using `base64encode()`, and the `encoding` argument is explicitly set to `base64`. The `application_id` connects the certificate to the application, and `type` and `end_date` are specified.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_certificate.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_certificate\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  type           = \"AsymmetricX509Cert\"\n  encoding       = \"base64\"\n  value          = base64encode(file(\"cert.der\"))\n  end_date       = \"2021-05-01T01:02:03Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureAD Application API Access Permissions - Terraform\nDESCRIPTION: Demonstrates how to configure API access permissions for an AzureAD application using the terraform-provider-azuread. The snippet defines published app IDs, service principal, application registration, and API access with roles and scopes. Dependencies include the azuread provider and respective data/resource blocks. It requires the API client ID, application registration ID, and lists of role/scope IDs as parameters. Inputs are Terraform HCL configuration blocks; output is AzureAD app API access configuration. At least one of role_ids or scope_ids is required; principal permissions depend on authentication context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_api_access.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\ndata \"azuread_service_principal\" \"msgraph\" {\n  client_id = data.azuread_application_published_app_ids.well_known.result[\"MicrosoftGraph\"]\n}\n\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_api_access\" \"example_msgraph\" {\n  application_id = azuread_application_registration.example.id\n  api_client_id  = data.azuread_application_published_app_ids.well_known.result[\"MicrosoftGraph\"]\n\n  role_ids = [\n    data.azuread_service_principal.msgraph.app_role_ids[\"Group.Read.All\"],\n    data.azuread_service_principal.msgraph.app_role_ids[\"User.Read.All\"],\n  ]\n\n  scope_ids = [\n    data.azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"],\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application and Generating Password Secret - Terraform - HCL\nDESCRIPTION: This example configures an Azure AD application and generates a password (client secret), specifying its validity using rotation from the time_rotating resource. It demonstrates password lifecycle management in Terraform, showing how to securely generate, store, and access the secret value. Dependencies include the azuread provider and time provider for password rotation, and sensitive information is exposed securely via Terraform outputs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"time_rotating\" \"example\" {\n  rotation_days = 180\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n  owners       = [data.azuread_client_config.current.object_id]\n\n  password {\n    display_name = \"MySecret-1\"\n    start_date   = time_rotating.example.id\n    end_date     = timeadd(time_rotating.example.id, \"4320h\")\n  }\n}\n\noutput \"example_password\" {\n  sensitive = true\n  value     = tolist(azuread_application.example.password).0.value\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure AD Conditional Access Policy Including Specific Client Applications (Terraform)\nDESCRIPTION: This Terraform configuration defines an Azure AD Conditional Access Policy that specifically targets client applications (service principals). It uses the `azuread_client_config` data source to get the current client's object ID. The policy conditions include all client app types and all applications, but crucially, it uses the `client_applications` block to include the service principal identified by `data.azuread_client_config.current.object_id`. It applies to no users (`included_users = [\"None\"]`) and enforces a 'block' grant control. This configuration requires sufficient Workload Identities Premium licenses.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/conditional_access_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_conditional_access_policy\" \"example\" {\n  display_name = \"example policy\"\n  state        = \"disabled\"\n\n  conditions {\n    client_app_types = [\"all\"]\n\n    applications {\n      included_applications = [\"All\"]\n    }\n\n    client_applications {\n      included_service_principals = [data.azuread_client_config.current.object_id]\n      excluded_service_principals = []\n    }\n\n    users {\n      included_users = [\"None\"]\n    }\n  }\n\n  grant_controls {\n    operator          = \"OR\"\n    built_in_controls = [\"block\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application from Template with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure AD application from a gallery template using Terraform. It includes data sources for retrieving the template, the resulting application, and service principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_from_template.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Marketo\"\n}\n\nresource \"azuread_application_from_template\" \"example\" {\n  display_name = \"Example Application\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\ndata \"azuread_application\" \"example\" {\n  object_id = azuread_application_from_template.example.application_object_id\n}\n\ndata \"azuread_service_principal\" \"example\" {\n  object_id = azuread_application_from_template.example.service_principal_object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal from Gallery Template Application - Terraform - HCL\nDESCRIPTION: This snippet illustrates creating a service principal for an application that has been instantiated from an Azure AD application gallery template. It first fetches the template's properties, then creates an application resource from the template, and finally manages a service principal for that application with use_existing set to true. Requires the azuread_application_template data source, azuread Terraform provider, and correct API permissions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal.md#2025-04-23_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Marketo\"\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id    = azuread_application.example.client_id\n  use_existing = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure AD Conditional Access Policy Excluding Guests (Terraform)\nDESCRIPTION: This Terraform configuration defines an Azure AD Conditional Access Policy named 'example policy' initially set to 'disabled'. It applies conditions based on client app types ('all'), sign-in/user risk levels ('medium'), included/excluded applications, device filters (excluding OS 'Doors'), location rules (all except trusted), platform restrictions (include Android, exclude iOS), and user scope (all except guests/external users). The policy enforces MFA ('mfa') as a grant control (operator 'OR') and sets session controls like application-enforced restrictions, sign-in frequency (10 hours), and Cloud App Security integration ('monitorOnly').\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/conditional_access_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_conditional_access_policy\" \"example\" {\n  display_name = \"example policy\"\n  state        = \"disabled\"\n\n  conditions {\n    client_app_types    = [\"all\"]\n    sign_in_risk_levels = [\"medium\"]\n    user_risk_levels    = [\"medium\"]\n\n    applications {\n      included_applications = [\"All\"]\n      excluded_applications = []\n    }\n\n    devices {\n      filter {\n        mode = \"exclude\"\n        rule = \"device.operatingSystem eq \\\"Doors\\\"\"\n      }\n    }\n\n    locations {\n      included_locations = [\"All\"]\n      excluded_locations = [\"AllTrusted\"]\n    }\n\n    platforms {\n      included_platforms = [\"android\"]\n      excluded_platforms = [\"iOS\"]\n    }\n\n    users {\n      included_users = [\"All\"]\n      excluded_users = [\"GuestsOrExternalUsers\"]\n    }\n  }\n\n  grant_controls {\n    operator          = \"OR\"\n    built_in_controls = [\"mfa\"]\n  }\n\n  session_controls {\n    application_enforced_restrictions_enabled = true\n    disable_resilience_defaults               = false\n    sign_in_frequency                         = 10\n    sign_in_frequency_period                  = \"hours\"\n    cloud_app_security_policy                 = \"monitorOnly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD User - Terraform - Terraform\nDESCRIPTION: This snippet demonstrates how to define a new Azure AD user using the `azuread_user` resource in a Terraform configuration. It sets key properties such as user principal name, display name, mail nickname, and password. Dependencies include the AzureAD Terraform provider and required API permissions or directory/app roles. Parameters like `user_principal_name` and `password` are required; optional fields can customize the user's identity and account settings. The configuration creates an Azure AD user and expects standard Terraform apply workflow for provisioning.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/user.md#2025-04-23_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n  display_name        = \"J. Doe\"\n  mail_nickname       = \"jdoe\"\n  password            = \"SecretP@sswd99!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Group by Display Name\nDESCRIPTION: Example showing how to retrieve Azure AD group information using display name and security enabled filter. This is a common pattern for looking up existing security groups.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/group.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_group\" \"example\" {\n  display_name     = \"MyGroupName\"\n  security_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Security Group in Azure AD with Terraform\nDESCRIPTION: This snippet demonstrates the basic usage of the `azuread_group` resource to create a security-enabled group in Azure Active Directory. It uses the `data.azuread_client_config` data source to fetch the object ID of the currently authenticated principal and sets it as the owner of the new group. The `security_enabled` flag is set to `true`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Federated Credential to AAD App via Azure CLI\nDESCRIPTION: This shell command uses the Azure CLI (`az rest`) to make a POST request to the Microsoft Graph API beta endpoint to add a federated identity credential to an existing Azure Active Directory application. It requires the Application Object ID (`APP_OBJ_ID`) and a JSON file (`body.json`) containing the credential details. The command sets the `Content-Type` header to `application/json`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\naz rest --method POST \\\n        --uri https://graph.microsoft.com/beta/applications/${APP_OBJ_ID}/federatedIdentityCredentials \\\n        --headers Content-Type='application/json' \\\n        --body @body.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Group Role Management Policy - Terraform - HashiCorp Configuration Language\nDESCRIPTION: This Terraform configuration demonstrates how to define a role management policy for an Azure AD group using the azuread_group_role_management_policy resource. The snippet includes creation of an Azure AD group, a user, and a detailed policy binding the user to a group role, along with customizable rules for assignment expiration and notification settings. Dependencies include the AzureAD Terraform provider with necessary Microsoft Graph API permissions; required parameters include group_id and role_id, while nested blocks allow configuration of role activation, assignment, and notification logic. The configuration expects valid Azure AD group/user IDs, and some settings have mutually exclusive options or required combinations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_role_management_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"group-name\"\n  security_enabled = true\n}\n\nresource \"azuread_user\" \"member\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n  display_name        = \"J. Doe\"\n  mail_nickname       = \"jdoe\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_group_role_management_policy\" \"example\" {\n  group_id = azuread_group.example.id\n  role_id  = \"member\"\n\n  active_assignment_rules {\n    expire_after = \"P365D\"\n  }\n\n  eligible_assignment_rules {\n    expiration_required = false\n  }\n\n  notification_rules {\n    eligible_assignments {\n      approver_notifications {\n        notification_level = \"Critical\"\n        default_recipients = false\n        additional_recipients = [\n          \"someone@example.com\",\n          \"someone.else@example.com\",\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Service Principal with Enterprise Application Features - Terraform - HCL\nDESCRIPTION: This example configures a service principal for an application with specific enterprise and gallery feature tags enabled. The azuread_service_principal resource uses a feature_tags block to assign enterprise and gallery attributes, which control its behavior in Azure AD. Prerequisites include the presence of an Azure AD application resource, the azuread Terraform provider, and proper role assignments for ownership and API permissions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal.md#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n  owners       = [data.azuread_client_config.current.object_id]\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id                    = azuread_application.example.client_id\n  app_role_assignment_required = false\n  owners                       = [data.azuread_client_config.current.object_id]\n\n  feature_tags {\n    enterprise = true\n    gallery    = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Synchronization Job - Terraform - HCL\nDESCRIPTION: Defines a sequence of Azure Active Directory resources using Terraform, including application templates, service principals, synchronization secrets, and the synchronization job itself. Assumes the azuread Terraform provider is configured, and requires an Azure AD service principal with either Application.ReadWrite.All or Directory.ReadWrite.All application roles. The snippet demonstrates how to create prerequisite resources and link them via IDs and outputs, culminating in an enabled synchronization job for an enterprise application. Inputs include display names and template IDs, and outputs are managed through resource attributes; dependent resources must be created or resolved in order for the synchronization job to function properly.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/synchronization_job.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Azure Databricks SCIM Provisioning Connector\"\n}\n\nresource \"azuread_application_from_template\" \"example\" {\n  display_name = \"example\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\ndata \"azuread_service_principal\" \"example\" {\n  object_id = azuread_application_from_template.example.service_principal_object_id\n}\n\nresource \"azuread_synchronization_secret\" \"example\" {\n  service_principal_id = data.azuread_service_principal.example.id\n\n  credential {\n    key   = \"BaseAddress\"\n    value = \"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\"\n  }\n  credential {\n    key   = \"SecretToken\"\n    value = \"some-token\"\n  }\n}\n\nresource \"azuread_synchronization_job\" \"example\" {\n  service_principal_id = data.azuread_service_principal.example.id\n  template_id          = \"dataBricks\"\n  enabled              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Built-in Role using Terraform Configuration - Terraform\nDESCRIPTION: Demonstrates how to assign a built-in directory role to a user in Azure Active Directory using Terraform. Requires the 'azuread_user', 'azuread_directory_role', and 'azuread_directory_role_assignment' resources. The key parameters are 'role_id', which uses the built-in role's template ID, and 'principal_object_id', the user to whom the role is assigned. Outputs a configured role assignment resource.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_assignment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Security administrator\"\n}\n\nresource \"azuread_directory_role_assignment\" \"example\" {\n  role_id             = azuread_directory_role.example.template_id\n  principal_object_id = data.azuread_user.example.object_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AzureAD Authentication Strength Policies - Terraform\nDESCRIPTION: These Terraform examples illustrate how to define multiple azuread_authentication_strength_policy resources, specifying the display name, optional description, and a list of allowed authentication method combinations. Dependencies include the AzureAD Terraform provider and correct API permissions. The resource requires key parameters like 'display_name' (for naming), 'description' (optional summary), and 'allowed_combinations' (authentication methods). The output is the creation of policies within AzureAD, and the usage is subject to necessary roles and permissions. These examples demonstrate both a simple and a comprehensive set of allowed authentication combinations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/authentication_strength_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_authentication_strength_policy\" \"example\" {\n  display_name = \"Example Authentication Strength Policy\"\n  description  = \"Policy for demo purposes\"\n  allowed_combinations = [\n    \"fido2\",\n    \"password\",\n  ]\n}\n\nresource \"azuread_authentication_strength_policy\" \"example2\" {\n  display_name = \"Example Authentication Strength Policy\"\n  description  = \"Policy for demo purposes with all possible combinations\"\n  allowed_combinations = [\n    \"fido2\",\n    \"password\",\n    \"deviceBasedPush\",\n    \"temporaryAccessPassOneTime\",\n    \"federatedMultiFactor\",\n    \"federatedSingleFactor\",\n    \"hardwareOath,federatedSingleFactor\",\n    \"microsoftAuthenticatorPush,federatedSingleFactor\",\n    \"password,hardwareOath\",\n    \"password,microsoftAuthenticatorPush\",\n    \"password,sms\",\n    \"password,softwareOath\",\n    \"password,voice\",\n    \"sms\",\n    \"sms,federatedSingleFactor\",\n    \"softwareOath,federatedSingleFactor\",\n    \"temporaryAccessPassMultiUse\",\n    \"voice,federatedSingleFactor\",\n    \"windowsHelloForBusiness\",\n    \"x509CertificateMultiFactor\",\n    \"x509CertificateSingleFactor\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application with Roles and Claims - Terraform - HCL\nDESCRIPTION: This snippet demonstrates how to create an Azure AD application using the azuread_application resource in Terraform. It defines required permissions, app roles, claims (access, ID, SAML2), required resource access, and web configuration settings. Dependencies include the azuread provider, valid Azure credentials, and optional filebase64 data for logos. The input includes several nested blocks (api, app_role, required_resource_access, web) to fully customize the application, and outputs are assigned through the created resource.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_application\" \"example\" {\n  display_name     = \"example\"\n  identifier_uris  = [\"api://example-app\"]\n  logo_image       = filebase64(\"/path/to/logo.png\")\n  owners           = [data.azuread_client_config.current.object_id]\n  sign_in_audience = \"AzureADMultipleOrgs\"\n\n  api {\n    mapped_claims_enabled          = true\n    requested_access_token_version = 2\n\n    known_client_applications = [\n      azuread_application.known1.client_id,\n      azuread_application.known2.client_id,\n    ]\n\n    oauth2_permission_scope {\n      admin_consent_description  = \"Allow the application to access example on behalf of the signed-in user.\"\n      admin_consent_display_name = \"Access example\"\n      enabled                    = true\n      id                         = \"96183846-204b-4b43-82e1-5d2222eb4b9b\"\n      type                       = \"User\"\n      user_consent_description   = \"Allow the application to access example on your behalf.\"\n      user_consent_display_name  = \"Access example\"\n      value                      = \"user_impersonation\"\n    }\n\n    oauth2_permission_scope {\n      admin_consent_description  = \"Administer the example application\"\n      admin_consent_display_name = \"Administer\"\n      enabled                    = true\n      id                         = \"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\"\n      type                       = \"Admin\"\n      value                      = \"administer\"\n    }\n  }\n\n  app_role {\n    allowed_member_types = [\"User\", \"Application\"]\n    description          = \"Admins can manage roles and perform all task actions\"\n    display_name         = \"Admin\"\n    enabled              = true\n    id                   = \"1b19509b-32b1-4e9f-b71d-4992aa991967\"\n    value                = \"admin\"\n  }\n\n  app_role {\n    allowed_member_types = [\"User\"]\n    description          = \"ReadOnly roles have limited query access\"\n    display_name         = \"ReadOnly\"\n    enabled              = true\n    id                   = \"497406e4-012a-4267-bf18-45a1cb148a01\"\n    value                = \"User\"\n  }\n\n  feature_tags {\n    enterprise = true\n    gallery    = true\n  }\n\n  optional_claims {\n    access_token {\n      name = \"myclaim\"\n    }\n\n    access_token {\n      name = \"otherclaim\"\n    }\n\n    id_token {\n      name                  = \"userclaim\"\n      source                = \"user\"\n      essential             = true\n      additional_properties = [\"emit_as_roles\"]\n    }\n\n    saml2_token {\n      name = \"samlexample\"\n    }\n  }\n\n  required_resource_access {\n    resource_app_id = \"00000003-0000-0000-c000-000000000000\" # Microsoft Graph\n\n    resource_access {\n      id   = \"df021288-bdef-4463-88db-98f22de89214\" # User.Read.All\n      type = \"Role\"\n    }\n\n    resource_access {\n      id   = \"b4e74841-8e56-480b-be8b-910348b18b4c\" # User.ReadWrite\n      type = \"Scope\"\n    }\n  }\n\n  required_resource_access {\n    resource_app_id = \"c5393580-f805-4401-95e8-94b7a6ef2fc2\" # Office 365 Management\n\n    resource_access {\n      id   = \"594c1fb6-4f81-4475-ae41-0c394909246c\" # ActivityFeed.Read\n      type = \"Role\"\n    }\n  }\n\n  web {\n    homepage_url  = \"https://app.example.net\"\n    logout_url    = \"https://app.example.net/logout\"\n    redirect_uris = [\"https://app.example.net/account\"]\n\n    implicit_grant {\n      access_token_issuance_enabled = true\n      id_token_issuance_enabled     = true\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Application Federated Identity Credential in Terraform\nDESCRIPTION: Example Terraform configuration demonstrating the creation of an `azuread_application_registration` and subsequently an `azuread_application_federated_identity_credential` associated with it. It specifies the display name, description, audiences, issuer, and subject for the credential, linking it to the application via `application_id`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_federated_identity_credential.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_federated_identity_credential\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  display_name   = \"my-repo-deploy\"\n  description    = \"Deployments for my-repo\"\n  audiences      = [\"api://AzureADTokenExchange\"]\n  issuer         = \"https://token.actions.githubusercontent.com\"\n  subject        = \"repo:my-organization/my-repo:environment:prod\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Invitation Resource - Terraform\nDESCRIPTION: Demonstrates the basic configuration for the azuread_invitation resource in Terraform to invite a user to an Azure Active Directory tenant. This snippet requires the AzureAD Terraform provider and appropriate API permissions (e.g., User.Invite.All, User.ReadWrite.All, or Directory.ReadWrite.All). Key parameters include user_email_address (required) and redirect_url (required), which specify the email to invite and where the invited user is redirected after accepting. Outputs include the resource instance and any computed attributes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/invitation.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_invitation\" \"example\" {\n  user_email_address = \"jdoe@hashicorp.com\"\n  redirect_url       = \"https://portal.azure.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Time-Based Password Rotation in Terraform\nDESCRIPTION: Sets up automatic rotation of an Azure AD application password using the time_rotating resource. This configuration will create a new password every 7 days by forcing recreation of the resource when the rotation timestamp changes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_password.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"time_rotating\" \"example\" {\n  rotation_days = 7\n}\n\nresource \"azuread_application_password\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  rotate_when_changed = {\n    rotation = time_rotating.example.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Claims Mapping Policy using Terraform - HashiCorp Configuration Language (HCL)\nDESCRIPTION: This snippet defines an azuread_claims_mapping_policy resource in Terraform using HCL. It utilizes the jsonencode function to structure a complex claims schema, specifying policy attributes like claims IDs, JWT claim types, SAML claim types, and sources. Dependencies include the AzureAD Terraform provider and correct API permissions, with required inputs being the JSON-encoded 'definition' and a 'display_name'. The resource will create a Claims Mapping Policy in Azure Active Directory and export its attributes upon provisioning.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/claims_mapping_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_claims_mapping_policy\" \"my_policy\" {\n  definition = [\n    jsonencode(\n      {\n        ClaimsMappingPolicy = {\n          ClaimsSchema = [\n            {\n              ID            = \"employeeid\"\n              JwtClaimType  = \"name\"\n              SamlClaimType = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n              Source        = \"user\"\n            },\n            {\n              ID            = \"tenantcountry\"\n              JwtClaimType  = \"country\"\n              SamlClaimType = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\"\n              Source        = \"company\"\n            }\n          ]\n          IncludeBasicClaimSet = \"true\"\n          Version              = 1\n        }\n      }\n    ),\n  ]\n  display_name = \"My Policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Application Certificate with PEM using Terraform\nDESCRIPTION: This Terraform configuration shows how to define an `azuread_application_registration` and then attach a certificate to it using the `azuread_application_certificate` resource. The certificate data is read from a PEM file (`cert.pem`) using the `file()` function, and its type is set to `AsymmetricX509Cert`. The `application_id` links the certificate to the application registration, and an `end_date` is specified.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_certificate.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_certificate\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  type           = \"AsymmetricX509Cert\"\n  value          = file(\"cert.pem\")\n  end_date       = \"2021-05-01T01:02:03Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to AzureAD Provider v3.0 - Terraform HCL\nDESCRIPTION: This configuration sets the AzureAD provider version constraint to ~> 3.0, instructing Terraform to use the latest compatible release from version 3.0 onwards. Ideal for test or production environments during the upgrade process. Only dependency is the hashicorp/azuread provider; this must be in the terraform configuration block of your project.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/3.0-upgrade-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Service Principal for First-Party Microsoft Application - Terraform - HCL\nDESCRIPTION: This configuration manages an existing service principal linked to a first-party Microsoft (published) application by referencing its published app ID. Leveraging the use_existing argument, Terraform will adopt any pre-existing service principal without error, facilitating management of Microsoft-managed resources. The snippet depends on the azuread_application_published_app_ids data source and assumes Microsoft Graph (or similar) as a target application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal.md#2025-04-23_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  client_id    = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n  use_existing = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Service Principal and Password (Terraform HCL)\nDESCRIPTION: Creates an Azure AD Application, a Service Principal tied to it, and a password credential for the Service Principal using Terraform. Requires the `azuread` Terraform provider and sufficient API permissions as outlined above. The `resource` blocks define and link the Azure AD entities needed for automated password management, where `service_principal_id` is the main parameter linking the password to the principal; outputs include the generated password and key ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_password.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_password\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure AD Application App Role in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define an `azuread_application_app_role` resource. It first creates an `azuread_application_registration` and then defines an app role named \"Administer\" associated with that application. A `random_uuid` resource is used to generate a unique ID for the `role_id`. Key arguments like `application_id`, `role_id`, `allowed_member_types`, `description`, `display_name`, and `value` are configured.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_app_role.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"random_uuid\" \"example_administrator\" {}\n\nresource \"azuread_application_app_role\" \"example_administer\" {\n  application_id = azuread_application_registration.example.id\n  role_id        = random_uuid.example_administrator.id\n\n  allowed_member_types = [\"User\"]\n  description          = \"My role description\"\n  display_name         = \"Administer\"\n  value                = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Group with Static Members using Terraform\nDESCRIPTION: This snippet illustrates creating a security-enabled Azure AD group and assigning static members using the `members` argument within the `azuread_group` resource. It defines an `azuread_user` resource and then references its `object_id` within the `members` list. Multiple user object IDs can be included in this list.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_user\" \"example\" {\n  display_name        = \"J Doe\"\n  owners              = [data.azuread_client_config.current.object_id] # Note: owner defined on user, not strictly needed for group example\n  password            = \"notSecure123\"\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"MyGroup\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n\n  members = [\n    azuread_user.example.object_id,\n    /* more users */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure AD Application Registration Resource in Terraform (HCL) - Terraform\nDESCRIPTION: This Terraform HCL code sample demonstrates how to provision an 'azuread_application_registration' resource representing an application in Azure Active Directory. The configuration specifies key parameters such as 'display_name', 'description', 'sign_in_audience', home and marketing URLs, as well as URLs for privacy, support, and terms of service. The resource depends on the AzureAD Terraform Provider and requires authentication with appropriate API permissions. Inputs are the arguments given (e.g., display_name), and the result is the creation of a new application registration in Azure AD. Be cautious not to manage the same application concurrently with both this and the 'azuread_application' resource.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_registration.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name     = \"Example Application\"\n  description      = \"My example application\"\n  sign_in_audience = \"AzureADMyOrg\"\n\n  homepage_url          = \"https://app.example.com/\"\n  logout_url            = \"https://app.example.com/logout\"\n  marketing_url         = \"https://example.com/\"\n  privacy_statement_url = \"https://example.com/privacy\"\n  support_url           = \"https://support.example.com/\"\n  terms_of_service_url  = \"https://example.com/terms\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Access Package Assignment Policy with Terraform\nDESCRIPTION: Example showing how to create an access package assignment policy with approval settings, review settings, and custom questions. Demonstrates configuration of requestor settings, approval workflow, and assignment review process.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_assignment_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"group-name\"\n  security_enabled = true\n}\n\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-catalog\"\n  description  = \"Example catalog\"\n}\n\nresource \"azuread_access_package\" \"example\" {\n  catalog_id   = azuread_access_package_catalog.example.id\n  display_name = \"access-package\"\n  description  = \"Access Package\"\n}\n\nresource \"azuread_access_package_assignment_policy\" \"example\" {\n  access_package_id = azuread_access_package.example.id\n  display_name      = \"assignment-policy\"\n  description       = \"My assignment policy\"\n  duration_in_days  = 90\n\n  requestor_settings {\n    scope_type = \"AllExistingDirectoryMemberUsers\"\n  }\n\n  approval_settings {\n    approval_required = true\n\n    approval_stage {\n      approval_timeout_in_days = 14\n\n      primary_approver {\n        object_id    = azuread_group.example.object_id\n        subject_type = \"groupMembers\"\n      }\n    }\n  }\n\n  assignment_review_settings {\n    enabled                        = true\n    review_frequency               = \"weekly\"\n    duration_in_days               = 3\n    review_type                    = \"Self\"\n    access_review_timeout_behavior = \"keepAccess\"\n  }\n\n  question {\n    text {\n      default_text = \"hello, how are you?\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure AD Group Membership (Terraform)\nDESCRIPTION: This snippet demonstrates the use of Terraform to provision a user, a security-enabled Azure AD group, and assign a user as a member of that group using the 'azuread_group_member' resource. It requires the AzureAD Terraform provider and appropriate Azure AD API permissions based on the authentication context. Key parameters include the user's principal name, the group's display name, and the linkage between group and member object IDs. Inputs are Azure AD user and group details; outputs are the fully-configured resources representing the group and its membership.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_member.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"my_group\"\n  security_enabled = true\n}\n\nresource \"azuread_group_member\" \"example\" {\n  group_object_id  = azuread_group.example.object_id\n  member_object_id = data.azuread_user.example.object_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure Authentication Environment Variables - Shell\nDESCRIPTION: This shell-session snippet demonstrates how to set environment variables in a POSIX shell for authenticating Terraform with Azure via a certificate file. \\\"ARM_CLIENT_ID\\\" and \\\"ARM_TENANT_ID\\\" specify the service principal and tenant, while \\\"ARM_CLIENT_CERTIFICATE_PATH\\\" and \\\"ARM_CLIENT_CERTIFICATE_PASSWORD\\\" provide the path and password for the .pfx certificate. This method requires Terraform and the AzureAD provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n# sh\n$ export ARM_CLIENT_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_CLIENT_CERTIFICATE_PATH=\"/path/to/my/client/certificate.pfx\"\n$ export ARM_CLIENT_CERTIFICATE_PASSWORD=\"Pa55w0rd123\"\n$ export ARM_TENANT_ID=\"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Permissions for OIDC\nDESCRIPTION: This YAML snippet specifies the necessary permissions within a GitHub Actions workflow to enable OIDC authentication. It grants 'write' access for 'id-token' and 'read' access for 'contents', which is required for the workflow to request an OIDC token.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  id-token: write\n  contents: read\n```\n\n----------------------------------------\n\nTITLE: Creating a Microsoft 365 Group in Azure AD with Terraform\nDESCRIPTION: This example shows how to create a Microsoft 365 group (also known as a Unified group) using the `azuread_group` resource. It sets `mail_enabled` to true, defines a `mail_nickname`, sets `security_enabled` to true, and specifies `types = [\"Unified\"]`. It also defines an `azuread_user` resource to act as an additional owner alongside the current client principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_user\" \"group_owner\" {\n  user_principal_name = \"example-group-owner@hashicorp.com\"\n  display_name        = \"Group Owner\"\n  mail_nickname       = \"example-group-owner\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example\"\n  mail_enabled     = true\n  mail_nickname    = \"ExampleGroup\"\n  security_enabled = true\n  types            = [\"Unified\"]\n\n  owners = [\n    data.azuread_client_config.current.object_id,\n    azuread_user.group_owner.object_id,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Password to an Application with ApplicationClient.AddPassword in Go\nDESCRIPTION: Shows how to add a password (client secret) to an application using the AddPassword method. Accepts a context, application ID, and AddPasswordRequest payload, and uses default operation options. On success, a response model is returned. Requires a pre-existing application and properly configured payload for the password.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.AddPasswordRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.AddPassword(ctx, id, payload, application.DefaultAddPasswordOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Group with Dynamic Membership using Terraform\nDESCRIPTION: This example demonstrates creating an Azure AD group configured for dynamic membership. It sets the `types` argument to `[\"DynamicMembership\"]` and includes a `dynamic_membership` block. Within this block, `enabled` is set to `true`, and a `rule` is defined (e.g., `\"user.department -eq \\\"Sales\\\"\"`) to automatically manage group membership based on user attributes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"MyGroup\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n  types            = [\"DynamicMembership\"]\n\n  dynamic_membership {\n    enabled = true\n    rule    = \"user.department -eq \\\"Sales\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Application Fallback Public Client in Terraform\nDESCRIPTION: Example showing how to create an application registration and enable it as a fallback public client. The example first creates an application registration resource and then enables the fallback public client setting for that application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_fallback_public_client.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_fallback_public_client\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  enabled        = true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Azure AD Federated Credential (GitHub)\nDESCRIPTION: This JSON object defines the body for the Azure API request to add a federated identity credential for GitHub Actions. It specifies the credential name, the trusted issuer URL for GitHub Actions tokens, the subject identifier (linking it to a specific repository and branch/ref like `main`), a description, and the intended audience for the token exchange. Environment variables like `${REPO_NAME}`, `${REPO_OWNER}` are expected to be substituted before use.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":\"${REPO_NAME}-pull-request\",\n  \"issuer\":\"https://token.actions.githubusercontent.com\",\n  \"subject\":\"repo:${REPO_OWNER}/${REPO_NAME}:refs:refs/heads/main\",\n  \"description\":\"${REPO_OWNER} PR\",\n  \"audiences\":[\"api://AzureADTokenExchange\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Application Role Assignment\nDESCRIPTION: Example of creating and assigning custom app roles for internal applications, including role definition and assignment to service principals.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/app_role_assignment.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"internal\" {\n  display_name = \"internal\"\n\n  app_role {\n    allowed_member_types = [\"Application\"]\n    description          = \"Apps can query the database\"\n    display_name         = \"Query\"\n    enabled              = true\n    id                   = \"00000000-0000-0000-0000-111111111111\"\n    value                = \"Query.All\"\n  }\n}\n\nresource \"azuread_service_principal\" \"internal\" {\n  client_id = azuread_application.internal.client_id\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  required_resource_access {\n    resource_app_id = azuread_application.internal.client_id\n\n    resource_access {\n      id   = azuread_service_principal.internal.app_role_ids[\"Query.All\"]\n      type = \"Role\"\n    }\n  }\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_app_role_assignment\" \"example\" {\n  app_role_id         = azuread_service_principal.internal.app_role_ids[\"Query.All\"]\n  principal_object_id = azuread_service_principal.example.object_id\n  resource_object_id  = azuread_service_principal.internal.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Provider with Client Secret\nDESCRIPTION: Terraform configuration block showing how to configure the Azure AD provider with authentication credentials using variables.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_secret.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"client_secret\" {}\n\nprovider \"azuread\" {\n  client_id     = \"00000000-0000-0000-0000-000000000000\"\n  client_secret = var.client_secret\n  tenant_id     = \"10000000-2000-3000-4000-500000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Claims for Azure AD Application in Terraform\nDESCRIPTION: This code demonstrates how to use the azuread_application_optional_claims resource to configure various types of optional claims (access_token, id_token, and saml2_token) for an Azure AD application registration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_optional_claims.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_optional_claims\" \"example\" {\n  application_id = azuread_application_registration.example.id\n\n  access_token {\n    name = \"myclaim\"\n  }\n\n  access_token {\n    name = \"otherclaim\"\n  }\n\n  id_token {\n    name                  = \"userclaim\"\n    source                = \"user\"\n    essential             = true\n    additional_properties = [\"emit_as_roles\"]\n  }\n\n  saml2_token {\n    name = \"samlexample\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Application Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuread_application data source to retrieve information about an existing Azure AD application. It queries the application by display name and outputs the object ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/application.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application\" \"example\" {\n  display_name = \"My First AzureAD Application\"\n}\n\noutput \"application_object_id\" {\n  value = data.azuread_application.example.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Privileged Access Group Assignment Schedule in Terraform\nDESCRIPTION: This Terraform configuration demonstrates creating an active assignment schedule for an Azure AD group using the `azuread_privileged_access_group_assignment_schedule` resource. It first defines an `azuread_group` and an `azuread_user`, then uses their IDs (`group_id` and `principal_id`) to configure the assignment schedule. The example sets the `assignment_type` to `member`, specifies a `duration` of \"P30D\" (30 days), and provides a `justification`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/privileged_access_group_assignment_schedule.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"group-name\"\n  security_enabled = true\n}\n\nresource \"azuread_user\" \"member\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n  display_name        = \"J. Doe\"\n  mail_nickname       = \"jdoe\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_privileged_access_group_assignment_schedule\" \"example\" {\n  group_id        = azuread_group.pim.id\n  principal_id    = azuread_user.member.id\n  assignment_type = \"member\"\n  duration        = \"P30D\"\n  justification   = \"as requested\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline Task for Terraform with OIDC\nDESCRIPTION: This YAML snippet demonstrates configuring an Azure CLI task (`AzureCLI@2`) within an Azure DevOps Pipeline to execute Terraform commands using OIDC authentication. It shows how to set required environment variables like `ARM_USE_OIDC`, `SYSTEM_ACCESSTOKEN`, `SYSTEM_OIDCREQUESTURI`, and `ARM_ADO_PIPELINE_SERVICE_CONNECTION_ID` by referencing pipeline variables and system access tokens. The `azureSubscription` input links the task to the necessary service connection.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: AzureCLI@2\n  inputs:\n    azureSubscription: $(SERVICE_CONNECTION_ID)\n    scriptType: bash\n    scriptLocation: \"inlineScript\"\n    inlineScript: |\n      # Terraform commands\n  env:\n    #...\n    ARM_USE_OIDC: true\n    SYSTEM_ACCESSTOKEN: $(System.AccessToken)\n    SYSTEM_OIDCREQUESTURI: $(System.OidcRequestUri)\n    ARM_ADO_PIPELINE_SERVICE_CONNECTION_ID: $(SERVICE_CONNECTION_ID)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Access Package Catalog Role Assignment in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to assign an Azure AD access package catalog role to a user principal. It utilizes data sources (`azuread_user`, `azuread_access_package_catalog_role`) to fetch the user and role details, and references an `azuread_access_package_catalog` resource to define the scope. The `azuread_access_package_catalog_role_assignment` resource links the role (`role_id`), principal (`principal_object_id`), and catalog (`catalog_id`) together.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_catalog_role_assignment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\ndata \"azuread_access_package_catalog_role\" \"example\" {\n  display_name = \"Catalog owner\"\n}\n\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-access-package-catalog\"\n  description  = \"Example access package catalog\"\n}\n\nresource \"azuread_access_package_catalog_role_assignment\" \"example\" {\n  role_id             = data.azuread_access_package_catalog_role.example.object_id\n  principal_object_id = data.azuread_user.example.object_id\n  catalog_id          = azuread_access_package_catalog.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph App Role Assignment\nDESCRIPTION: Example of assigning Microsoft Graph API permissions to a service principal, including setting up required resource access and role assignments.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/app_role_assignment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  client_id    = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n  use_existing = true\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  required_resource_access {\n    resource_app_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.app_role_ids[\"User.Read.All\"]\n      type = \"Role\"\n    }\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"]\n      type = \"Scope\"\n    }\n  }\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_app_role_assignment\" \"example\" {\n  app_role_id         = azuread_service_principal.msgraph.app_role_ids[\"User.Read.All\"]\n  principal_object_id = azuread_service_principal.example.object_id\n  resource_object_id  = azuread_service_principal.msgraph.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Administrative Unit Role Members via Terraform - HCL\nDESCRIPTION: This snippet illustrates the process of managing Azure AD administrative unit role memberships using Terraform configuration files. It demonstrates declaring the required data (reading a user), creating an administrative unit resource, a directory role resource, and finally assigning the role to a user scoped to the administrative unit. Dependencies include the AzureAD provider and access to adequate API permissions. Main parameters include 'role_object_id' for the directory role, 'administrative_unit_object_id' for the target administrative unit, and 'member_object_id' for the principal being added. Inputs are the resource arguments; output is the stateful management of the role assignment. Ensure that Terraform is authenticated and has necessary permissions before applying.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit_role_member.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_administrative_unit\" \"example\" {\n  display_name = \"Example-AU\"\n}\n\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Security administrator\"\n}\n\nresource \"azuread_administrative_unit_role_member\" \"example\" {\n  role_object_id                = azuread_directory_role.example.object_id\n  administrative_unit_object_id = azuread_administrative_unit.example.id\n  member_object_id              = data.azuread_user.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Block Arguments - Terraform Provider - Markdown\nDESCRIPTION: Documents the available configuration options for the 'api' nested block within the 'azuread_application' Terraform resource, providing context for OAuth 2.0 integration, claims mapping, and client relationship configuration. Dependencies include knowledge of Azure Active Directory's API app registration and the relationship to OAuth permission scopes. Key parameters such as 'known_client_applications', 'mapped_claims_enabled', 'oauth2_permission_scope', and 'requested_access_token_version' are described with their use cases and allowed values. No code execution; intended as a reference for module authors.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n\"`api` block supports the following:\\n\\n* `known_client_applications` - (Optional) A set of client IDs, used for bundling consent if you have a solution that contains two parts: a client app and a custom web API app.\\n* `mapped_claims_enabled` - (Optional) Allows an application to use claims mapping without specifying a custom signing key. Defaults to `false`.\\n* `oauth2_permission_scope` - (Optional) One or more `oauth2_permission_scope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this application.\\n* `requested_access_token_version` - (Optional) The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `1`.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Domains with Terraform\nDESCRIPTION: Example showing how to query Azure AD domains and output their domain names using the azuread_domains data source. The example demonstrates basic usage of the data source and accessing domain properties.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/domains.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_domains\" \"aad_domains\" {}\n\noutput \"domain_names\" {\n  value = data.azuread_domains.aad_domains.domains.*.domain_name\n}\n```\n\n----------------------------------------\n\nTITLE: Activating AzureAD Directory Role by Template ID - Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to activate a directory role in Azure Active Directory by specifying its template_id. The resource 'azuread_directory_role' is created, with the template_id set to the GUID identifying the built-in role template. Prerequisites include the AzureAD provider and sufficient permissions (either app role or directory role) for role management. The key input parameter is template_id; upon successful creation, the outputs include description and object_id. Resource creation is idempotent and immutable; only activation is performed (no delete/deactivation support).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_directory_role\" \"example\" {\n  template_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Group with Dynamic Membership using Terraform\nDESCRIPTION: This Terraform example illustrates creating an Azure Active Directory group with dynamic membership rules using the `azuread_group_without_members` resource. It sets the `types` argument to `[\"DynamicMembership\"]` and configures the `dynamic_membership` block. Inside this block, `enabled` is set to true, and a `rule` is defined to dynamically include users whose department attribute equals \"Sales\". The group is also security-enabled and owned by the current client principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_without_members.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_group_without_members\" \"example\" {\n  display_name     = \"MyGroup\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n  types            = [\"DynamicMembership\"]\n\n  dynamic_membership {\n    enabled = true\n    rule    = \"user.department -eq \\\"Sales\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure AD Group, User, and Privileged Access Group Eligibility Schedule Resources in Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to provision an Azure AD security group, a user, and then use their references to create an azuread_privileged_access_group_eligibility_schedule resource for assigning eligibility to a user for a privileged access group. It requires the terraform-provider-azuread and appropriate Microsoft Graph API permissions. The variables group_id, principal_id, and assignment_type specify the group, principal (user or group), and the type of assignment. Optional fields like duration and justification are shown to control assignment parameters. Resource IDs are referenced to interconnect objects; outputs are managed through resource attributes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/privileged_access_group_eligibility_schedule.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"group-name\"\n  security_enabled = true\n}\n\nresource \"azuread_user\" \"member\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n  display_name        = \"J. Doe\"\n  mail_nickname       = \"jdoe\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_privileged_access_group_eligibility_schedule\" \"example\" {\n  group_id        = azuread_group.pim.id\n  principal_id    = azuread_user.member.id\n  assignment_type = \"member\"\n  duration        = \"P30D\"\n  justification   = \"as requested\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Provider to a Version Range (Minor) - Terraform HCL\nDESCRIPTION: This snippet uses the ~> constraint to pin the provider to any 2.x release, ensuring only minor upgrades are allowed automatically. Intended for use with Terraform configuration files where stability across minor releases is desired. Requires the hashicorp/azuread provider, with no other prerequisites.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/3.0-upgrade-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking User Object Memberships using Microsoft Graph SDK in Go\nDESCRIPTION: Demonstrates using `UserClient.CheckMemberObjectsComplete` to check a user's membership in a list of groups, administrative units, or directory roles. Requires context, `UserID`, and a `CheckMemberObjectsRequest` payload specifying object IDs to check. The `Complete` variant handles pagination, returning a slice of object IDs the user is a member of. An alternative method (`CheckMemberObjects`) allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, user.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, user.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Application Certificate from Azure Key Vault using Terraform\nDESCRIPTION: This Terraform configuration demonstrates integrating Azure Key Vault with Azure AD application certificates. It defines an `azurerm_key_vault_certificate`, an `azuread_application`, and then uses the `azuread_application_certificate` resource to link them. The certificate data is sourced directly from the Key Vault certificate's `certificate_data` attribute (in hex format, specified by `encoding = \\\"hex\\\"`), along with its start and end dates obtained from the certificate attributes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_certificate.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azurerm_key_vault_certificate\" \"example\" {\n  name         = \"generated-cert\"\n  key_vault_id = azurerm_key_vault.example.id\n\n  certificate_policy {\n    issuer_parameters {\n      name = \"Self\"\n    }\n\n    key_properties {\n      exportable = true\n      key_size   = 2048\n      key_type   = \"RSA\"\n      reuse_key  = true\n    }\n\n    lifetime_action {\n      action {\n        action_type = \"AutoRenew\"\n      }\n\n      trigger {\n        days_before_expiry = 30\n      }\n    }\n\n    secret_properties {\n      content_type = \"application/x-pkcs12\"\n    }\n\n    x509_certificate_properties {\n      extended_key_usage = [\"1.3.6.1.5.5.7.3.2\"]\n\n      key_usage = [\n        \"dataEncipherment\",\n        \"digitalSignature\",\n        \"keyCertSign\",\n        \"keyEncipherment\",\n      ]\n\n      subject_alternative_names {\n        dns_names = [\"internal.contoso.com\", \"domain.hello.world\"]\n      }\n\n      subject            = \"CN=${azuread_application.example.name}\"\n      validity_in_months = 12\n    }\n  }\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_certificate\" \"example\" {\n  application_id = azuread_application.example.id\n  type           = \"AsymmetricX509Cert\"\n  encoding       = \"hex\"\n  value          = azurerm_key_vault_certificate.example.certificate_data\n  end_date       = azurerm_key_vault_certificate.example.certificate_attribute[0].expires\n  start_date     = azurerm_key_vault_certificate.example.certificate_attribute[0].not_before\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Azure AD Application Owner in Terraform\nDESCRIPTION: Example Terraform configuration that creates an application registration, a user, and assigns the user as an owner of the application. This demonstrates the proper way to manage application ownership in Azure AD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_owner.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_user\" \"jane\" {\n  user_principal_name = \"jane.fischer@example.com\"\n  display_name        = \"Jane Fischer\"\n  password            = \"Ch@ngeMe\"\n}\n\nresource \"azuread_application_owner\" \"example_jane\" {\n  application_id  = azuread_application_registration.example.id\n  owner_object_id = azuread_user.jane.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Directory Role using Terraform Configuration - Terraform\nDESCRIPTION: Shows how to use Terraform to assign a custom Azure AD directory role to a user. Relies on creating an 'azuread_custom_directory_role' with specified permissions and then assigning it via 'azuread_directory_role_assignment'. The main parameters are the custom role's object ID and the user's object ID. This example enables customizing permissions for finer-grained access control.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_assignment.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_custom_directory_role\" \"example\" {\n  display_name = \"My Custom Role\"\n  enabled      = true\n  version      = \"1.0\"\n\n  permissions {\n    allowed_resource_actions = [\n      \"microsoft.directory/applications/basic/update\",\n      \"microsoft.directory/applications/standard/read\",\n    ]\n  }\n}\n\nresource \"azuread_directory_role_assignment\" \"example\" {\n  role_id             = azuread_custom_directory_role.example.object_id\n  principal_object_id = data.azuread_user.example.object_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning AzureAD Service Principal Token Signing Certificate with Defaults - Terraform\nDESCRIPTION: This snippet demonstrates how to provision an Azure Active Directory Application, its associated Service Principal, and a token signing certificate using Terraform with default certificate settings. Dependencies include the AzureAD Terraform provider and permissions to manage service principals and application credentials. Key parameters such as 'service_principal_id' reference the previously created service principal. The output is a managed certificate resource linked to the service principal; defaults are used for certificate attributes such as display name and expiration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_token_signing_certificate.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_token_signing_certificate\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Using azuread_application_app_role with azuread_application in Terraform\nDESCRIPTION: This Terraform example shows how to use the `azuread_application_app_role` resource alongside the `azuread_application` resource. It utilizes the `ignore_changes` lifecycle meta-argument on the `azuread_application` resource to prevent conflicts when managing app roles separately using `azuread_application_app_role`. The `application_id` for the app role resource references the ID of the `azuread_application`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_app_role.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  lifecycle {\n    ignore_changes = [\n      app_role,\n    ]\n  }\n}\n\nresource \"azuread_application_app_role\" \"example_administer\" {\n  application_id = azuread_application.example.id\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure AD Access Package and Catalog in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define an `azuread_access_package_catalog` resource and an `azuread_access_package` resource within that catalog. It specifies the required display name and description for both, linking the access package to the catalog using the `catalog_id` attribute.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-catalog\"\n  description  = \"Example catalog\"\n}\n\nresource \"azuread_access_package\" \"example\" {\n  catalog_id   = azuread_access_package_catalog.example.id\n  display_name = \"access-package\"\n  description  = \"Access Package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Access Package Resource Catalog Association with Terraform\nDESCRIPTION: Example Terraform configuration that creates a group, an access package catalog, and associates the group with the catalog. This demonstrates how to add an Azure AD group as a resource to an access package catalog in Identity Governance.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_resource_catalog_association.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example-group\"\n  security_enabled = true\n}\n\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-catalog\"\n  description  = \"Example catalog\"\n}\n\nresource \"azuread_access_package_resource_catalog_association\" \"example\" {\n  catalog_id             = azuread_access_package_catalog.example_catalog.id\n  resource_origin_id     = azuread_group.example_group.object_id\n  resource_origin_system = \"AadGroup\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Delegated Permission Grant for All Users in Terraform\nDESCRIPTION: This Terraform configuration demonstrates granting delegated permissions (openid, User.Read.All) to an application's service principal to access the Microsoft Graph API on behalf of all users. It defines the necessary application, service principals (for the app and Microsoft Graph), and finally the delegated permission grant resource itself, linking the client and resource service principals and specifying the claim values. The absence of `user_object_id` signifies consent for all users.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_delegated_permission_grant.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  client_id    = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n  use_existing = true\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  required_resource_access {\n    resource_app_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"openid\"]\n      type = \"Scope\"\n    }\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.Read\"]\n      type = \"Scope\"\n    }\n  }\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_delegated_permission_grant\" \"example\" {\n  service_principal_object_id          = azuread_service_principal.example.object_id\n  resource_service_principal_object_id = azuread_service_principal.msgraph.object_id\n  claim_values                         = [\"openid\", \"User.Read.All\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Authentication Strength Policy - Terraform Shell Command\nDESCRIPTION: This shell command demonstrates how to import an existing azuread_authentication_strength_policy resource into Terraform state using its unique ID. The user must replace the example resource name and path with actual values. The import operation requires the AzureAD Terraform provider and sufficient permissions to access policy resources. The input is the resource identifier (either name or ID); on execution, the policy will be tracked in Terraform's state file. The imported resource can then be managed using Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/authentication_strength_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_authentication_strength_policy.my_policy /policies/authenticationStrengthPolicies/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Environment Variables for OIDC Authentication\nDESCRIPTION: This bash script demonstrates how to configure Terraform to use OIDC authentication by setting specific environment variables. `ARM_CLIENT_ID`, `ARM_SUBSCRIPTION_ID`, and `ARM_TENANT_ID` provide the necessary Azure identity details, while `ARM_USE_OIDC=true` explicitly tells the Azure provider to use OpenID Connect for authentication instead of other methods. Replace the placeholder GUIDs with actual values.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export ARM_CLIENT_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_SUBSCRIPTION_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_TENANT_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_USE_OIDC=true\n```\n\n----------------------------------------\n\nTITLE: Activating AzureAD Directory Role by Display Name - Terraform\nDESCRIPTION: This Terraform snippet illustrates how to activate a directory role in Azure Active Directory by its display_name. Using the 'azuread_directory_role' resource, the role is identified by its display name string. The input parameter is 'display_name', which must reference an existing built-in directory role. Dependencies include the AzureAD Terraform provider and the necessary API permissions for role management. Outputs consist of the role's description and object_id. Activation is a one-time, immutable action, and destroying this resource does not deactivate the role.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Printer administrator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Application Password Creation in Terraform\nDESCRIPTION: Creates an Azure AD application registration and assigns a password credential to it. This example demonstrates the minimal configuration needed to create an application password.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_password.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_password\" \"example\" {\n  application_id = azuread_application_registration.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Domain via DomainClient in Go\nDESCRIPTION: This code verifies a domain by generating a domain ID and invoking the CreateVerify method with context and default options. Error checking is performed after the call, and model data may be used upon successful verification. The code relies on the domain client, context, and that the specified domain is eligible for verification. Verification results are delivered in the model of the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\nread, err := client.CreateVerify(ctx, id, domain.DefaultCreateVerifyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-based Password Rotation for a Service Principal (Terraform HCL)\nDESCRIPTION: Implements automatic password rotation for an Azure AD service principal by leveraging a `time_rotating` Terraform resource. Dependencies include the `time` and `azuread` providers. The `rotate_when_changed` argument references the output of the `time_rotating` resource, so the password is recreated whenever the specified duration (`rotation_days`) elapses. Suitable for use cases requiring compliance with periodic credential rotation policies.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_password.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"time_rotating\" \"example\" {\n  rotation_days = 7\n}\n\nresource \"azuread_service_principal_password\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n  rotate_when_changed = {\n    rotation = time_rotating.example.id\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureAD Provider with Certificate Path Variables - Terraform HCL\nDESCRIPTION: This HCL snippet defines two variables, \\\"client_certificate_path\\\" and \\\"client_certificate_password\\\", and configures the AzureAD provider using them. This approach enables dynamic, secure provider configuration via Terraform variables pulling a certificate from the local filesystem. Requires Terraform (HCL) and the AzureAD provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"client_certificate_path\" {}\nvariable \"client_certificate_password\" {}\n\nprovider \"azuread\" {\n  client_id                   = \"00000000-0000-0000-0000-000000000000\"\n  client_certificate_path     = var.client_certificate_path\n  client_certificate_password = var.client_certificate_password\n  tenant_id                   = \"10000000-2000-3000-4000-500000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal via SDK - Go\nDESCRIPTION: Provides an example for creating a new service principal using the client. Accepts context and a ServicePrincipal payload object. Shows how to process the API response and handle any resulting errors. Suitable for automating resource creation in Azure AD deployments.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := serviceprincipal.ServicePrincipal{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateServicePrincipal(ctx, payload, serviceprincipal.DefaultCreateServicePrincipalOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Application Permission Scope in Terraform\nDESCRIPTION: Demonstrates creating an application registration and adding a permission scope with a random UUID. Shows basic configuration of scope properties including display names and descriptions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_permission_scope.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"random_uuid\" \"example_administer\" {}\n\nresource \"azuread_application_permission_scope\" \"example\" {\n  application_id = azuread_application_registration.test.id\n  scope_id       = random_uuid.example_administer.id\n  value          = \"administer\"\n\n  admin_consent_description  = \"Administer the application\"\n  admin_consent_display_name = \"Administer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Users and Groups to Internal Application Roles\nDESCRIPTION: Example demonstrating how to assign users and groups to custom app roles in an internal application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/app_role_assignment.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_domains\" \"example\" {\n  only_initial = true\n}\n\nresource \"azuread_application\" \"internal\" {\n  display_name = \"internal\"\n\n  app_role {\n    allowed_member_types = [\"Application\", \"User\"]\n    description          = \"Admins can perform all task actions\"\n    display_name         = \"Admin\"\n    enabled              = true\n    id                   = \"00000000-0000-0000-0000-222222222222\"\n    value                = \"Admin.All\"\n  }\n}\n\nresource \"azuread_service_principal\" \"internal\" {\n  client_id = azuread_application.internal.client_id\n}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example\"\n  security_enabled = true\n}\n\nresource \"azuread_app_role_assignment\" \"example\" {\n  app_role_id         = azuread_service_principal.internal.app_role_ids[\"Admin.All\"]\n  principal_object_id = azuread_group.example.object_id\n  resource_object_id  = azuread_service_principal.internal.object_id\n}\n\nresource \"azuread_user\" \"example\" {\n  display_name        = \"D. Duck\"\n  password            = \"SecretP@sswd99!\"\n  user_principal_name = \"d.duck@${data.azuread_domains.example.domains.0.domain_name}\"\n}\n\nresource \"azuread_app_role_assignment\" \"example\" {\n  app_role_id         = azuread_service_principal.internal.app_role_ids[\"Admin.All\"]\n  principal_object_id = azuread_user.example.object_id\n  resource_object_id  = azuread_service_principal.internal.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AzureAD User Flow Attribute Resource with Terraform\nDESCRIPTION: This Terraform example demonstrates how to define a custom user flow attribute within Azure Active Directory. The resource requires setting parameters such as display_name, description, and data_type, where data_type supports several options like 'string', 'boolean', and 'int64'. The snippet expects that the AzureAD provider is configured, and the user has the required API permission: IdentityUserFlow.ReadWrite.All. Expected input parameters include strings describing the attribute, and on successful application, Terraform will create the corresponding resource in Azure AD. Changing display_name or data_type forces resource recreation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/user_flow_attribute.md#2025-04-23_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"azuread_user_flow_attribute\" \"example\" {\n  display_name = \"Hobby\"\n  description  = \"Your hobby\"\n  data_type    = \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ignore_changes with azuread_application and API Access - Terraform\nDESCRIPTION: Shows how to use lifecycle meta-argument ignore_changes with azuread_application to avoid conflicts when managing API permissions separately. This pattern is useful when both azuread_application and azuread_application_api_access resources are defined for the same application. The resource block requires only the display name; ignore_changes is set on required_resource_access to prevent Terraform from overwriting separate API permission management. Input is an application resource block with lifecycle management; output is stable, non-overlapping permissions configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_api_access.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  lifecycle {\n    ignore_changes = [\n      required_resource_access,\n    ]\n  }\n}\n\nresource \"azuread_application_api_access\" \"example\" {\n  application_id = azuread_application.example.id\n  # ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Delegated Permission Grant for a Single User in Terraform\nDESCRIPTION: This Terraform configuration shows how to grant delegated permissions (openid, User.Read.All) to an application's service principal to access the Microsoft Graph API, specifically on behalf of a single defined user. It includes definitions for the application, related service principals, the target user, and the delegated permission grant resource. The `user_object_id` argument is specified to link the grant to the particular user.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_delegated_permission_grant.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  client_id    = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n  use_existing = true\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  required_resource_access {\n    resource_app_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"openid\"]\n      type = \"Scope\"\n    }\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.Read\"]\n      type = \"Scope\"\n    }\n  }\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_user\" \"example\" {\n  display_name        = \"J. Doe\"\n  user_principal_name = \"jdoe@hashicorp.com\"\n  mail_nickname       = \"jdoe\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_service_principal_delegated_permission_grant\" \"example\" {\n  service_principal_object_id          = azuread_service_principal.example.object_id\n  resource_service_principal_object_id = azuread_service_principal.msgraph.object_id\n  claim_values                         = [\"openid\", \"User.Read.All\"]\n  user_object_id                       = azuread_user.example.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Administrative Unit Role Members using Terraform CLI - Shell\nDESCRIPTION: This shell command shows how to import an existing Azure AD administrative unit role member into Terraform state using the 'terraform import' command. It requires the object ID of the administrative unit and the unique ID of the role assignment. The imported state enables management of previously created resources via Terraform. The shell command expects the administrative unit and role assignment IDs as input components. The command assumes prior configuration of Terraform backend and AzureAD credentials.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit_role_member.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_administrative_unit_role_member.example \\\n/directory/administrativeUnits/00000000-0000-0000-0000-000000000000/scopedRoleMembers/zX37MRLyF0uvE-xf2WH4B7x-6CPLfudNnxFGj800htpBXqkxW7bITqGb6Rj4kuTuS\n```\n\n----------------------------------------\n\nTITLE: Enabling Microsoft Graph via Provider Block - HCL\nDESCRIPTION: This snippet shows how to enable Microsoft Graph beta support in the provider block of a Terraform configuration using the azuread provider. The use_microsoft_graph argument is set to true, signaling the provider to route most API calls through Microsoft Graph. This is required for testing or migration prior to v2.0. Prerequisite: Terraform and AzureAD provider v1.5.0 or later.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \\\"azuread\\\" {\\n  use_microsoft_graph = true\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Azure AD Security Group using Terraform\nDESCRIPTION: This Terraform snippet demonstrates the basic usage of the `azuread_group_without_members` resource to create a simple security-enabled group in Azure Active Directory. It retrieves the current client configuration's object ID using the `azuread_client_config` data source and sets it as the owner of the group. The `display_name` and `security_enabled` arguments are specified.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_without_members.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_group_without_members\" \"example\" {\n  display_name     = \"example\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Application with ApplicationClient.CreateApplication in Go\nDESCRIPTION: Shows how to create a new application object using the CreateApplication method. Takes a context, Application payload, and default operation options. The result contains the new application's details. Requires a constructed Application payload and a configured client.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.Application{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateApplication(ctx, payload, application.DefaultCreateApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AzureAD Provider to Specific Version in Terraform Configuration\nDESCRIPTION: This snippet shows how to pin the AzureAD provider to a specific version (1.5.1) in the Terraform configuration using the required_providers block.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"= 1.5.1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Service Principal Properties on Creation - Go\nDESCRIPTION: Validates property values when creating a new service principal by preparing a CreateValidatesPropertyRequest and sending it for server-side checks. Aimed at integrity assurance before creation. Requires context and a properly defined request payload; returns a response model or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := serviceprincipal.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, serviceprincipal.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure AD Conditional Access Policy Excluding Specific Client Applications (Terraform)\nDESCRIPTION: This Terraform configuration defines an Azure AD Conditional Access Policy that excludes specific client applications (service principals). It uses the `azuread_client_config` data source to get the current client's object ID. The policy conditions include all client app types and all applications. The `client_applications` block specifies that all service principals in the tenant (`ServicePrincipalsInMyTenant`) are generally included, but the one identified by `data.azuread_client_config.current.object_id` is explicitly excluded. It applies to no users (`included_users = [\"None\"]`) and enforces a 'block' grant control for the included service principals. This configuration requires sufficient Workload Identities Premium licenses.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/conditional_access_policy.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_conditional_access_policy\" \"example\" {\n  display_name = \"example policy\"\n  state        = \"disabled\"\n\n  conditions {\n    client_app_types = [\"all\"]\n\n    applications {\n      included_applications = [\"All\"]\n    }\n\n    client_applications {\n      included_service_principals = [\"ServicePrincipalsInMyTenant\"]\n      excluded_service_principals = [data.azuread_client_config.current.object_id]\n    }\n\n    users {\n      included_users = [\"None\"]\n    }\n  }\n\n  grant_controls {\n    operator          = \"OR\"\n    built_in_controls = [\"block\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Service Principal with Terraform - shell\nDESCRIPTION: This snippet demonstrates how to import an existing AzureAD service principal resource into Terraform state using the terraform import command. It requires the object's ID (the service principal's object_id) as the identifier. The command adds the remote resource into Terraform management, allowing further configuration and tracking via Terraform, and assumes that both the terraform CLI and the AzureAD provider are fully configured and authenticated.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_service_principal.example /servicePrincipals/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateGroup in Go\nDESCRIPTION: This snippet demonstrates creating a new group using the `CreateGroup` method. It requires a `context` and a `payload` of type `group.Group` containing the details for the new group. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := group.Group{\n\t// ...\n}\n\n\nread, err := client.CreateGroup(ctx, payload, group.DefaultCreateGroupOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Application Group Membership with ApplicationClient.CheckMemberGroups in Go\nDESCRIPTION: Illustrates how to check the group membership of an application using CheckMemberGroupsComplete for batched pagination. The snippet uses a context, application ID, and CheckMemberGroupsRequest payload and iterates through resulting items. Useful for determining group relationships; requires payload and proper client initialization.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.CheckMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberGroups(ctx, id, payload, application.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, application.DefaultCheckMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a PKCS#12 (.pfx) Certificate Bundle - Shell\nDESCRIPTION: This shell command creates a PKCS#12 (.pfx) bundle from an existing private key and certificate using OpenSSL. The \\'client.pfx\\' output can be used by the AzureAD provider for authentication. It takes the private key (client.key), certificate (client.crt), and exports them into a password-protected (\\'Pa55w0rd123\\') PKCS#12 file. OpenSSL is required.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl pkcs12 -export -password pass:\"Pa55w0rd123\" -out client.pfx -inkey client.key -in client.crt\n```\n\n----------------------------------------\n\nTITLE: Declaring Service Principal Certificate with DER Encoding - Terraform - HashiCorp Configuration Language\nDESCRIPTION: This Terraform example illustrates configuring a Service Principal certificate using DER encoding with base64 encoding specified. The snippet initializes the Azure AD Application and Service Principal, then defines the certificate resource using 'encoding = \"base64\"' and 'value = base64encode(file(\"cert.der\"))' to supply the certificate. Dependencies include the AzureAD provider, and a DER-format certificate file (cert.der). The specified parameters are similar to the PEM example, with encoding tailored for DER; this is particularly useful for scenarios where certificate data comes from sources like Azure Key Vault. Output is an issued certificate credential attached to the Service Principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_certificate.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_certificate\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n  type                 = \"AsymmetricX509Cert\"\n  encoding             = \"base64\"\n  value                = base64encode(file(\"cert.der\"))\n  end_date             = \"2021-05-01T01:02:03Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an IP-Based Azure AD Named Location with Terraform\nDESCRIPTION: Defines an `azuread_named_location` resource using Terraform to configure an IP-based named location. It specifies a display name (`IP Named Location`), a list of IP ranges (`1.1.1.1/32`, `2.2.2.2/32`), and marks the location as trusted (`true`). This requires the `azuread` provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/named_location.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_named_location\" \"example-ip\" {\n  display_name = \"IP Named Location\"\n  ip {\n    ip_ranges = [\n      \"1.1.1.1/32\",\n      \"2.2.2.2/32\",\n    ]\n    trusted = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Self-Signed Client Certificate with OpenSSL - Shell\nDESCRIPTION: This shell command generates a new 4096-bit RSA private key and a self-signed X.509 certificate valid for 730 days using OpenSSL. It is required as the client certificate for Azure AD service principal authentication. The resulting \\'client.key\\' is the private key, while \\'client.crt\\' is the corresponding certificate. Make sure OpenSSL or LibreSSL is installed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl req -subj '/CN=myclientcertificate/O=HashiCorp, Inc./ST=CA/C=US' \\\n    -new -newkey rsa:4096 -sha256 -days 730 -nodes -x509 -keyout client.key -out client.crt\n```\n\n----------------------------------------\n\nTITLE: Creating a Microsoft 365 Group using Terraform\nDESCRIPTION: This Terraform configuration shows how to create a Microsoft 365 group (Unified type) using the `azuread_group_without_members` resource. It defines a new user (`azuread_user`) to be an owner, along with the current client principal retrieved via `azuread_client_config`. Key parameters like `display_name`, `mail_enabled`, `mail_nickname`, `security_enabled`, and `types = [\"Unified\"]` are configured. The `owners` list includes object IDs from both the data source and the user resource.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_without_members.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_user\" \"group_owner\" {\n  user_principal_name = \"example-group-owner@hashicorp.com\"\n  display_name        = \"Group Owner\"\n  mail_nickname       = \"example-group-owner\"\n  password            = \"SecretP@sswd99!\"\n}\n\nresource \"azuread_group_without_members\" \"example\" {\n  display_name     = \"example\"\n  mail_enabled     = true\n  mail_nickname    = \"ExampleGroup\"\n  security_enabled = true\n  types            = [\"Unified\"]\n\n  owners = [\n    data.azuread_client_config.current.object_id,\n    azuread_user.group_owner.object_id,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Administrative Unit with Terraform\nDESCRIPTION: Example of creating an Administrative Unit in Azure AD with basic configuration including display name, description, and hidden membership settings.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_administrative_unit\" \"example\" {\n  display_name              = \"Example-AU\"\n  description               = \"Just an example\"\n  hidden_membership_enabled = false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Security-Only Azure AD Groups\nDESCRIPTION: Retrieves all security-enabled groups that are not mail-enabled by combining multiple filters.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/groups.md#2025-04-23_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_groups\" \"security_only\" {\n  mail_enabled     = false\n  return_all       = true\n  security_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Directory Role with Permissions using Terraform - HashiCorp Terraform - Terraform\nDESCRIPTION: This snippet demonstrates how to define a custom directory role in Azure Active Directory using the azuread_custom_directory_role resource. It specifies role display name, description, version, enabled status, and details multiple permissions blocks with specific allowed_resource_actions relevant to applications and groups. The resource requires proper API permissions ('RoleManagement.ReadWrite.Directory' or 'Directory.ReadWrite.All' for service principals, or directory roles such as 'Privileged Role Administrator' or 'Global Administrator' for user principals) and the AzureAD Terraform provider. The main inputs are display_name, description, enabled, version, and a list of permissions blocks. On successful application, this creates a role assignable within Azure AD. Limitations include requirement for specified permissions and lack of import support.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/custom_directory_role.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_custom_directory_role\" \"example\" {\n  display_name = \"My Custom Role\"\n  description  = \"Allows reading applications and updating groups\"\n  enabled      = true\n  version      = \"1.0\"\n\n  permissions {\n    allowed_resource_actions = [\n      \"microsoft.directory/applications/basic/update\",\n      \"microsoft.directory/applications/create\",\n      \"microsoft.directory/applications/standard/read\",\n    ]\n  }\n\n  permissions {\n    allowed_resource_actions = [\n      \"microsoft.directory/groups/allProperties/read\",\n      \"microsoft.directory/groups/allProperties/read\",\n      \"microsoft.directory/groups/basic/update\",\n      \"microsoft.directory/groups/create\",\n      \"microsoft.directory/groups/delete\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Applications with ApplicationClient.ListApplications in Go\nDESCRIPTION: Lists all applications using ListApplicationsComplete to support batched pagination. Only a context and default operation options are needed. The code processes each item individually, supporting large environments with many application objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\n// alternatively `client.ListApplications(ctx, application.DefaultListApplicationsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListApplicationsComplete(ctx, application.DefaultListApplicationsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Application with ApplicationClient.CreateApplication - Go\nDESCRIPTION: This snippet provides an example of creating a new Microsoft Graph application using ApplicationClient. The payload is an application.Application struct with the required fields. Handles errors and the resulting model from the response. Requires initialized context and client.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.Application{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateApplication(ctx, payload, application.DefaultCreateApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Azure AD User Timeouts Configuration\nDESCRIPTION: Example showing how to specify timeout configurations for the Azure AD user data source operations. The create operation defaults to 5 minutes if not specified.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/user.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntimeouts {\n  create = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Application with ApplicationClient.UpdateApplication in Go\nDESCRIPTION: Presents an example of updating an existing application with the UpdateApplication method. Needs a context, application ID, Application payload, and default operation options, returning the updated model on completion. Input payload should specify changed properties; check for successful update in the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.Application{\\n\\t// ...\\n}\\n\\n\\nread, err := client.UpdateApplication(ctx, id, payload, application.DefaultUpdateApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining user_impersonation Scope with random_uuid and azuread_application - HCL\nDESCRIPTION: This HCL snippet provides a full example of how to add a user_impersonation OAuth2 permission scope to an AzureAD application by generating a static UUID using the random_uuid resource and configuring the oauth2_permission_scope block. Dependencies include the Terraform AzureAD and random providers. The key parameters are display_name, oauth2_permission_scope settings (including admin/user consent, id, type, and value), and the output is the configuration of the application with user_impersonation properly assigned. This approach is necessary when using Microsoft Graph with AzureAD 2.x.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \\\"random_uuid\\\" \\\"example_app_user_impersonation_scope\\\" {}\\n\\nresource \\\"azuread_application\\\" \\\"example\\\" {\\n  display_name = \\\"example-app\\\"\\n\\n  api {\\n    oauth2_permission_scope {\\n      admin_consent_description  = \\\"Allow the application to access example-app on behalf of the signed-in user.\\\"\\n      admin_consent_display_name = \\\"Access example-app\\\"\\n      id                         = random_uuid.example_app_user_impersonation_scope.result\\n      enabled                    = true\\n      type                       = \\\"User\\\"\\n      user_consent_description   = \\\"Allow the application to access example-app on your behalf.\\\"\\n      user_consent_display_name  = \\\"Access example-app\\\"\\n      value                      = \\\"user_impersonation\\\"\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Linux VM with System-Assigned Managed Identity in Terraform\nDESCRIPTION: This Terraform configuration snippet demonstrates how to provision an Azure Linux Virtual Machine (`azurerm_linux_virtual_machine`) with a system-assigned managed identity enabled. It uses the `identity` block with `type = \"SystemAssigned\"`. The configuration also includes an output (`management_host_identity_object_id`) to retrieve the Object ID (Principal ID) of the implicitly created Service Principal associated with the managed identity. This requires the `azurerm` Terraform provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/managed_service_identity.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n```terraform\ndata \"azurerm_subscription\" \"current\" {}\n\nresource \"azurerm_linux_virtual_machine\" \"management_host\" {\n  name = \"management-vm\"\n\n  # ...\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n}\n\noutput \"management_host_identity_object_id\" {\n  value = azurerm_linux_virtual_machine.management_host.identity.0.principal_id\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using azuread_client_config Data Source in Terraform (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to declare the `azuread_client_config` data source to fetch the current Azure AD client configuration. It then defines an output variable `object_id` to expose the retrieved object ID of the authenticated principal. This data source requires no arguments.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/client_config.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\noutput \"object_id\" {\n  value = data.azuread_client_config.current.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Application Redirect URIs - HashiCorp Terraform - terraform\nDESCRIPTION: Demonstrates how to use \"azuread_application_registration\" and \"azuread_application_redirect_uris\" Terraform resources to define and assign multiple redirect URIs for different Azure AD app types (PublicClient, SPA, Web). Dependencies include the AzureAD Terraform provider and valid Azure credentials with specific API roles. Inputs: application_id as resource ID, redirect_uris as a list of URIs, and type specifying URI grouping. Outputs: Manages redirect URIs in Azure AD; resource is incompatible with azuread_application, and type changes force replacement.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_redirect_uris.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_redirect_uris\" \"example_public\" {\n  application_id = azuread_application_registration.example.id\n  type           = \"PublicClient\"\n\n  redirect_uris = [\n    \"myapp://auth\",\n    \"sample.mobile.app.bundie.id://auth\",\n    \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\n    \"https://login.live.com/oauth20_desktop.srf\",\n    \"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\",\n    \"urn:ietf:wg:oauth:2.0:foo\",\n  ]\n}\n\nresource \"azuread_application_redirect_uris\" \"example_spa\" {\n  application_id = azuread_application_registration.example.id\n  type           = \"SPA\"\n\n  redirect_uris = [\n    \"https://mobile.example.com/\",\n    \"https://beta.example.com/\",\n  ]\n}\n\nresource \"azuread_application_redirect_uris\" \"example_web\" {\n  application_id = azuread_application_registration.example.id\n  type           = \"Web\"\n\n  redirect_uris = [\n    \"https://app.example.com/\",\n    \"https://classic.example.com/\",\n    \"urn:ietf:wg:oauth:2.0:oob\",\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure CLI Targeting a Specific Tenant (shell-session)\nDESCRIPTION: Shows how to log into the Azure CLI while explicitly setting the default tenant context using the `--tenant` argument, followed by the Tenant ID or domain name. This influences which tenant `az` commands operate against and which tenant Terraform defaults to when using CLI authentication. The `--allow-no-subscriptions` flag is recommended. Requires Azure CLI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ az login --allow-no-subscriptions --tenant \"TENANT_ID_OR_DOMAIN\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Country-Based Azure AD Named Location with Terraform\nDESCRIPTION: Defines an `azuread_named_location` resource using Terraform to configure a country-based named location. It specifies a display name (`Country Named Location`), a list of countries/regions using ISO 3166-2 codes (`GB`, `US`), and explicitly excludes unknown countries/regions (`false`). This requires the `azuread` provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/named_location.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_named_location\" \"example-country\" {\n  display_name = \"Country Named Location\"\n  country {\n    countries_and_regions = [\n      \"GB\",\n      \"US\",\n    ]\n    include_unknown_countries_and_regions = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principal by Object ID\nDESCRIPTION: Looks up a service principal using its direct object ID in Azure AD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principal.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principal\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Service Principal - Go\nDESCRIPTION: Creates a new AzureAD service principal by constructing a ServicePrincipal object and invoking CreateServicePrincipal. Requires authentication, context, and the populated ServicePrincipal struct. Inputs are context and the service principal model; output is the created object or an error if the creation fails.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := serviceprincipal.ServicePrincipal{\n\t// ...\n}\n\n\nread, err := client.CreateServicePrincipal(ctx, payload, serviceprincipal.DefaultCreateServicePrincipalOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD Group Role Management Policy with Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuread_group_role_management_policy data source to retrieve a role policy for an Azure AD group. It creates a security-enabled group and then retrieves the owners policy for that group.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/group_role_management_policy.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"group-name\"\n  security_enabled = true\n}\n\ndata \"azuread_group_role_management_policy\" \"owners_policy\" {\n  group_id = azuread_group.example.id\n  role_id  = \"owner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Entitlement Management Access Package in Go\nDESCRIPTION: This snippet shows how to update an existing access package using the `UpdateEntitlementManagementAccessPackage` method. It requires a context (`ctx`), the ID of the package to update (`id`), and an `AccessPackage` payload containing the updated properties. Basic error handling and response processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := entitlementmanagementaccesspackage.NewIdentityGovernanceEntitlementManagementAccessPackageID(\"accessPackageId\")\n\npayload := entitlementmanagementaccesspackage.AccessPackage{\n\t// ...\n}\n\n\nread, err := client.UpdateEntitlementManagementAccessPackage(ctx, id, payload, entitlementmanagementaccesspackage.DefaultUpdateEntitlementManagementAccessPackageOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Service Principal Certificate with PEM Encoding - Terraform - HashiCorp Configuration Language\nDESCRIPTION: This Terraform snippet demonstrates how to create an Azure AD Application, Service Principal, and then attach a certificate in PEM format to the Service Principal using the azuread_service_principal_certificate resource. It requires the AzureAD Terraform provider, and assumes that a PEM certificate file (cert.pem) exists. The key parameter 'service_principal_id' links to the managed Service Principal, 'value' contains the raw certificate data, and 'end_date' defines the certificate's expiration in RFC3339 format. Outputs include a managed certificate valid for the specified date range, attached to the given Service Principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_certificate.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_certificate\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n  type                 = \"AsymmetricX509Cert\"\n  value                = file(\"cert.pem\")\n  end_date             = \"2021-05-01T01:02:03Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New User using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates the use of `UserClient.CreateUser` to create a new user in Azure Active Directory via Microsoft Graph. It requires a context and a `user.User` payload object containing the properties for the new user. Basic error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.User{\n\t// ...\n}\n\n\nread, err := client.CreateUser(ctx, payload, user.DefaultCreateUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform AzureAD Provider for OIDC\nDESCRIPTION: This HCL snippet shows the Terraform configuration required to use the AzureAD provider with OIDC authentication. The `required_providers` block pins the provider version (e.g., 2.23.0 or later), and the `provider \"azuread\"` block explicitly enables OIDC authentication by setting `use_oidc = true`. Alternatively, the environment variable `ARM_USE_OIDC=true` can be used.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_oidc.md#2025-04-23_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# We strongly recommend using the required_providers block to set the\n# Azure Provider source and version being used\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"=2.23.0\"\n    }\n  }\n}\n# Configure the Microsoft Azure Provider\nprovider \"azuread\" {\n  use_oidc = true # or use the environment variable \"ARM_USE_OIDC=true\"\n  features {}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an AzureAD Access Package Catalog Resource in Terraform - HCL\nDESCRIPTION: This snippet shows how to define an azuread_access_package_catalog resource in Terraform using HCL. It requires the azuread Terraform provider and specifies required properties such as display_name and description. The configuration allows for optional settings like externally_visible and published, and when applied, creates a new access package catalog in Azure AD. Inputs include resource properties; the main output is the catalog resource with its generated id.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_catalog.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-access-package-catalog\"\n  description  = \"Example access package catalog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Users by IDs using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates using `UserClient.ListGetsByIdsComplete` to retrieve a specific set of user objects based on their IDs. Requires context and a `ListGetsByIdsRequest` payload containing the list of user IDs. The `Complete` function handles potential pagination if the request somehow results in it (unlikely for ID lookup but supported by pattern). An alternative `ListGetsByIds` method exists.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, user.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, user.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AzureAD Directory Role Eligibility Schedule Request with Terraform (Terraform)\nDESCRIPTION: This snippet demonstrates how to declare a user data source, directory role, and a directory role eligibility schedule request in Terraform using the AzureAD provider. Dependencies include the AzureAD provider for Terraform and adequate permissions (RoleEligibilitySchedule.ReadWrite.Directory or RoleManagement.ReadWrite.Directory and Privileged Role Administrator or Global Administrator directory role). The main parameters are the role definition ID, principal object ID, directory scope ID, and justification. The code expects valid AzureAD user principal and provisioned directory role, and outputs a directory role eligibility schedule request resource. Limitations include forced resource recreation when arguments change, and appropriate permissions are mandatory.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_eligibility_schedule_request.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Application Administrator\"\n}\n\nresource \"azuread_directory_role_eligibility_schedule_request\" \"example\" {\n  role_definition_id = azuread_directory_role.example.template_id\n  principal_id       = data.azuread_user.example.object_id\n  directory_scope_id = \"/\"\n  justification      = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Group into Terraform State\nDESCRIPTION: This shell command uses the Terraform CLI to import an existing Azure AD group into the Terraform state. It associates the cloud resource, identified by its Object ID, with a Terraform resource definition (`azuread_group.my_group`). Replace the placeholder Object ID with the actual ID of the group to be imported.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_group.my_group /groups/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Assigning a Built-in Role Scoped to an Application using Terraform - Terraform\nDESCRIPTION: Illustrates how to create a directory role assignment scoped specifically to an Azure AD application, assigning a built-in directory role to a user with a specific resource scope. Utilizes resources for 'azuread_directory_role', 'azuread_application', 'azuread_user', and 'azuread_directory_role_assignment', with the 'directory_scope_id' parameter specifying the application. Helpful for limiting role assignments to particular applications.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_assignment.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Cloud application administrator\"\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"My Application\"\n}\n\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_directory_role_assignment\" \"example\" {\n  role_id             = azuread_directory_role.example.template_id\n  principal_object_id = data.azuread_user.example.object_id\n  directory_scope_id  = format(\"/%s\", azuread_application.example.object_id)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Managed Identity Authentication via Environment Variables (Shell/PowerShell)\nDESCRIPTION: These shell commands demonstrate how to configure Terraform to use Managed Identity for authentication by setting environment variables. Setting `ARM_USE_MSI` to `true` enables MSI authentication, and `ARM_TENANT_ID` must be set to the Azure AD tenant ID where the managed identity resides. Examples are provided for both Bourne-like shells (`sh`) and PowerShell. A custom MSI endpoint can optionally be specified via `ARM_MSI_ENDPOINT`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/managed_service_identity.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n# sh\nexport ARM_USE_MSI=true ARM_TENANT_ID=00000000-0000-0000-0000-000000000000\n\n# PowerShell\n$env:ARM_USE_MSI = true\n$env:ARM_TENANT_ID = 00000000-0000-0000-0000-000000000000\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Synchronization Secrets using Terraform\nDESCRIPTION: This Terraform configuration demonstrates the creation of synchronization secrets for an Azure AD service principal. It retrieves an application template (`Azure Databricks SCIM Provisioning Connector`), creates an application from that template, identifies the associated service principal, and then defines the `azuread_synchronization_secret` resource with two credential key-value pairs (`BaseAddress`, `SecretToken`) linked to the service principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/synchronization_secret.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Azure Databricks SCIM Provisioning Connector\"\n}\n\nresource \"azuread_application_from_template\" \"example\" {\n  display_name = \"example\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\ndata \"azuread_service_principal\" \"example\" {\n  object_id = azuread_application_from_template.example.service_principal_object_id\n}\n\nresource \"azuread_synchronization_secret\" \"example\" {\n  service_principal_id = data.azuread_service_principal.example.id\n\n  credential {\n    key   = \"BaseAddress\"\n    value = \"abc\"\n  }\n  credential {\n    key   = \"SecretToken\"\n    value = \"some-token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Azure AD Groups\nDESCRIPTION: Returns all Azure AD groups in the directory by setting return_all to true.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/groups.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_groups\" \"all\" {\n  return_all = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principal by Display Name\nDESCRIPTION: Looks up a service principal using the display name of the associated application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principal.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principal\" \"example\" {\n  display_name = \"my-awesome-application\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Domains with Pagination via DomainClient in Go\nDESCRIPTION: This example demonstrates listing all domains using the ListDomainsComplete method, which handles paginated results through batching. It checks for errors and iterates over the returned domains, allowing further processing per item. Required dependencies are the domain client and context; optionally, ListDomains without pagination can be used for basic queries.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListDomains(ctx, domain.DefaultListDomainsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListDomainsComplete(ctx, domain.DefaultListDomainsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-authorized Applications in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use the `azuread_application_pre_authorized` resource. It first defines an application registration (`authorized`) and an application (`authorizer`) with specific API OAuth2 permission scopes. Then, it uses `azuread_application_pre_authorized` to grant the `authorized` application specific permissions (`permission_ids`) to access the `authorizer` application's API without requiring user consent, referencing the IDs of the previously defined resources.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_pre_authorized.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"authorized\" {\n  display_name = \"example-authorized-app\"\n}\n\nresource \"azuread_application\" \"authorizer\" {\n  display_name = \"example-authorizing-app\"\n\n  api {\n    oauth2_permission_scope {\n      admin_consent_description  = \"Administer the application\"\n      admin_consent_display_name = \"Administer\"\n      enabled                    = true\n      id                         = \"00000000-0000-0000-0000-000000000000\"\n      type                       = \"Admin\"\n      value                      = \"administer\"\n    }\n\n    oauth2_permission_scope {\n      admin_consent_description  = \"Access the application\"\n      admin_consent_display_name = \"Access\"\n      enabled                    = true\n      id                         = \"11111111-1111-1111-1111-111111111111\"\n      type                       = \"User\"\n      user_consent_description   = \"Access the application\"\n      user_consent_display_name  = \"Access\"\n      value                      = \"user_impersonation\"\n    }\n  }\n}\n\nresource \"azuread_application_pre_authorized\" \"example\" {\n  application_id       = azuread_application.authorizer.id\n  authorized_client_id = azuread_application_registration.authorized.client_id\n\n  permission_ids = [\n    \"00000000-0000-0000-0000-000000000000\",\n    \"11111111-1111-1111-1111-111111111111\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Application with ApplicationClient.DeleteApplication - Go\nDESCRIPTION: This snippet demonstrates how to delete an application from Microsoft Graph by providing the application ID to ApplicationClient.DeleteApplication. The example includes error handling and accessing the result model if available. Requires initialized client, context, and valid application ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.DeleteApplication(ctx, id, application.DefaultDeleteApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI with Service Principal OIDC (shell)\nDESCRIPTION: Demonstrates logging into the Azure CLI using a Service Principal with OpenID Connect (OIDC) federation, commonly used in CI/CD pipelines with workload identity federation. Requires the Service Principal's Application (Client) ID (`--username`) and the Tenant ID (`--tenant`). Assumes necessary environment variables for OIDC token exchange are set. The `--allow-no-subscriptions` flag is included. Requires Azure CLI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naz login --service-principal \\\n         --username 00000000-0000-0000-0000-000000000000 \\\n         --tenant 10000000-2000-3000-4000-500000000000 \\\n         --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Initializing the Microsoft Graph Group Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a new `GroupClient` for interacting with the Microsoft Graph API. It sets the base URI and assigns an authorizer for authentication. The `authorizer` variable is assumed to be previously configured.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := group.NewGroupClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Accounts (Tenants/Subscriptions) via Azure CLI (shell-session)\nDESCRIPTION: Demonstrates using the `az account list` command to view all tenants and subscriptions accessible by the currently logged-in Azure CLI identity. The output is formatted as a table showing Tenant ID, Subscription Name (or 'N/A' for tenant-level access), and whether it's the default context. Useful for identifying the correct Tenant ID for Terraform configuration. Requires Azure CLI and being logged in.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ az account list -o table --all --query \"[].{TenantID: tenantId, Subscription: name, Default: isDefault}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Application Details with ApplicationClient.GetApplication in Go\nDESCRIPTION: Demonstrates retrieving application metadata/details by ID using GetApplication. Requires a context, application ID, and default operation options, returning the application model on success. Useful for reading properties or current configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.GetApplication(ctx, id, application.DefaultGetApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Application Identifier URI in Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure AD application registration and assign an identifier URI to it using Terraform. It creates an application registration and then assigns a custom identifier URI to it.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_identifier_uri.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_identifier_uri\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  identifier_uri = \"https://app.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Conditional Access Policy with Terraform CLI - Shell\nDESCRIPTION: This snippet demonstrates how to import an existing AzureAD Conditional Access Policy into Terraform state using the 'terraform import' shell command. The command requires the Terraform resource name (e.g., azuread_conditional_access_policy.my_location) and the full resource ID as provided by AzureAD. No special dependencies are needed except for Terraform and appropriate authentication to AzureAD. The expected input is a valid resource ID; successful execution links the existing resource to Terraform without creating or modifying it. Incorrect IDs or authentication failures will result in errors.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/conditional_access_policy.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_conditional_access_policy.my_location /identity/conditionalAccess/policies/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing App Role Assignment\nDESCRIPTION: Command for importing existing app role assignments into Terraform state using the service principal object ID and assignment ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/app_role_assignment.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_app_role_assignment.example /servicePrincipals/00000000-0000-0000-0000-000000000000/appRoleAssignedTo/aaBBcDDeFG6h5JKLMN2PQrrssTTUUvWWxxxxxyyyzzz\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Tenant ID via Environment Variable (PowerShell)\nDESCRIPTION: Shows how to configure the target Azure Tenant ID for Terraform Azure providers by setting the `ARM_TENANT_ID` environment variable in PowerShell. Terraform will use this Tenant ID when authenticating via the Azure CLI if not explicitly set in the provider block. Requires a valid Tenant ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell\n$env:ARM_TENANT_ID = 00000000-0000-2222-2222-222222222222\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principal by Client ID\nDESCRIPTION: Retrieves service principal information using the client ID (application ID) of the associated application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principal.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principal\" \"example\" {\n  client_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Application Client with go-azure-sdk in Go\nDESCRIPTION: Initializes a new ApplicationClient by specifying the Microsoft Graph base URI and authorizer. Requires the \"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application\" package and a valid authorizer object. Provides a reusable client instance for subsequent API method calls.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := application.NewApplicationClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Administrative Unit Member with Terraform\nDESCRIPTION: This Terraform example demonstrates creating an administrative unit membership. It first retrieves an Azure AD user using the `azuread_user` data source and defines an administrative unit using the `azuread_administrative_unit` resource. Finally, the `azuread_administrative_unit_member` resource associates the retrieved user (`member_object_id`) with the created administrative unit (`administrative_unit_object_id`). Note the warning: do not use this resource concurrently with the `members` property of the `azuread_administrative_unit` resource for the same unit.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit_member.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_administrative_unit\" \"example\" {\n  display_name = \"Example-AU\"\n}\n\nresource \"azuread_administrative_unit_member\" \"example\" {\n  administrative_unit_object_id = azuread_administrative_unit.example.id\n  member_object_id              = data.azuread_user.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User using Microsoft Graph SDK in Go\nDESCRIPTION: Example demonstrating how to delete a user using the `UserClient.DeleteUser` method. It requires a context and the `UserID` of the user to be deleted. Standard error handling and response processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.DeleteUser(ctx, id, user.DefaultDeleteUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the DirectoryObject Client in Go\nDESCRIPTION: Demonstrates initialization of a new DirectoryObjectClient instance with the Microsoft Graph endpoint. Authenticator assignment is required for API authorization, and must be completed before performing any operations. Initialization must be completed once at application startup or wherever a client is needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := directoryobject.NewDirectoryObjectClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Service Principal - Go\nDESCRIPTION: Shows how to restore a deleted service principal by providing its ID and a RestoreRequest payload. Demonstrates the typical operation method invocation pattern, with error and response handling, enabling recovery workflows for service principals.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.RestoreRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.Restore(ctx, id, payload, serviceprincipal.DefaultRestoreOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Application into Terraform State\nDESCRIPTION: This command demonstrates how to import an existing Azure Active Directory application into Terraform's state management. The command uses the application's object ID. Replace `azuread_application.example` with the desired Terraform resource name and `00000000-0000-0000-0000-000000000000` with the actual object ID of the Azure AD application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application.example /applications/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Privileged Access Group Eligibility Schedule in Terraform via CLI\nDESCRIPTION: This shell snippet shows how to import an existing Azure AD privileged access group eligibility schedule into Terraform state by using the terraform import command with the appropriate schedule ID and resource address. This requires the resource to have been previously created in Azure AD and for the terraform-provider-azuread to be installed. The input parameter is the schedule ID in the specified format; upon execution, it will link the existing assignment schedule to Terraform's state management. This is essential for managing resources not initially created by Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/privileged_access_group_eligibility_schedule.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_privileged_access_group_eligibility_schedule.example 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Managing Azure AD Application with Identifier URI in Terraform\nDESCRIPTION: This snippet shows how to manage an Azure AD application with an identifier URI while ignoring changes to the identifier_uris attribute in the azuread_application resource. It uses the lifecycle meta-argument to ignore changes to the identifier_uris field.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_identifier_uri.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  lifecycle {\n    ignore_changes = [\n      identifier_uris,\n    ]\n  }\n}\n\nresource \"azuread_application_identifier_uri\" \"example\" {\n  application_id = azuread_application.example.id\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI as a User (shell)\nDESCRIPTION: Demonstrates the command to log into the Azure CLI interactively using a user account. The `--allow-no-subscriptions` flag is included to enable authentication to tenants even if the user doesn't have access to any subscriptions within that tenant. Requires Azure CLI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naz login --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureAD Provider with Base64 Certificate Variables - Terraform HCL\nDESCRIPTION: This HCL snippet defines variables for the client certificate and its password, and configures the AzureAD provider with a base64-encoded certificate string. Variables increase security and minimize hard-coded secrets. For use with Terraform and the AzureAD provider, this approach is suitable if the certificate is provided as a base64 string via variables.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"client_certificate\" {}\nvariable \"client_certificate_password\" {}\n\nprovider \"azuread\" {\n  client_id                   = \"00000000-0000-0000-0000-000000000000\"\n  client_certificate          = var.client_certificate\n  client_certificate_password = var.client_certificate_password\n  tenant_id                   = \"10000000-2000-3000-4000-500000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Provider to a Specific Version - Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates how to pin the AzureAD Terraform provider to version 2.53.1 by specifying the exact version constraint in the required_providers block. Dependencies include Terraform and the hashicorp/azuread provider registry. Users need to replace the version string for other desired releases. The code should be placed in the root terraform configuration file; outputs and error handling depend on Terraform's standard provider management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/3.0-upgrade-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"= 2.53.1\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Service Principal Token Signing Certificate - Shell\nDESCRIPTION: This snippet demonstrates how to import an existing AzureAD service principal token signing certificate resource into Terraform state using the 'terraform import' command. The import identifier is composed of the service principal's object ID and the certificate's key ID in the expected format. No dependencies beyond the Terraform CLI and configuration of the AzureAD provider are required. The input is a unique ID in the form '{ServicePrincipalObjectId}/tokenSigningCertificate/{CertificateKeyId}', and the output is that the certificate resource becomes managed by Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_token_signing_certificate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_service_principal_token_signing_certificate.example 00000000-0000-0000-0000-000000000000/tokenSigningCertificate/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Azure AD User in Go\nDESCRIPTION: Example showing how to restore a deleted user in Azure AD. The code creates a user ID object, constructs a RestoreRequest payload, and calls the Restore method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.RestoreRequest{\n\t// ...\n}\n\n\nread, err := client.Restore(ctx, id, payload, user.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Invitation with Custom Message and Additional Recipient - Terraform\nDESCRIPTION: Illustrates the creation of an azuread_invitation resource with a custom invitation message body and additional recipient via the message block. The custom message body is specified with the body argument, and additional_recipients allows including one extra email, as supported by Azure. This setup is intended to personalize the invitation and optionally notify another user. Prerequisites include AzureAD provider setup and the required permissions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/invitation.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_invitation\" \"example\" {\n  user_display_name  = \"Bob Bobson\"\n  user_email_address = \"bbobson@hashicorp.com\"\n  redirect_url       = \"https://portal.azure.com\"\n\n  message {\n    additional_recipients = [\"aaliceberg@hashicorp.com\"]\n    body                  = \"Hello there! You are invited to join my Azure tenant!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Users using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to retrieve a list of all user objects in the directory using `UserClient.ListUsersComplete`. Requires a context. The `Complete` function automatically handles pagination to fetch all users. An alternative `ListUsers` method allows for manual control over pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListUsers(ctx, user.DefaultListUsersOperationOptions())` can be used to do batched pagination\nitems, err := client.ListUsersComplete(ctx, user.DefaultListUsersOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureAD Provider for Managed Identity Authentication in HCL\nDESCRIPTION: This HCL snippet shows how to configure the `azuread` Terraform provider to use Managed Identity directly within the provider block. The `use_msi` argument is set to `true`, and the `tenant_id` argument must be specified with the correct Azure AD tenant ID for the managed identity. This method embeds the authentication configuration within the Terraform code itself.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/managed_service_identity.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nprovider \"azuread\" {\n  use_msi   = true\n  tenant_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting User Personal Data using Microsoft Graph SDK in Go\nDESCRIPTION: Example of calling `UserClient.CreateExportPersonalData` to submit a request to export a user's personal data. Requires context, the `UserID` of the user, and a `CreateExportPersonalDataRequest` payload (potentially specifying storage location). Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CreateExportPersonalDataRequest{\n\t// ...\n}\n\n\nread, err := client.CreateExportPersonalData(ctx, id, payload, user.DefaultCreateExportPersonalDataOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Role Templates in Go\nDESCRIPTION: This example demonstrates listing available directory role templates using `ListDirectoryRoleTemplatesComplete`. It requires a context. The `Complete` function handles pagination to retrieve all templates; `ListDirectoryRoleTemplates` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListDirectoryRoleTemplates(ctx, directoryroletemplate.DefaultListDirectoryRoleTemplatesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListDirectoryRoleTemplatesComplete(ctx, directoryroletemplate.DefaultListDirectoryRoleTemplatesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure CLI Authentication in Terraform Provider (HCL)\nDESCRIPTION: Configures the `azuread` provider block in Terraform to explicitly disable authentication via the Azure CLI by setting the `use_cli` argument to `false`. This forces Terraform to use other configured methods like environment variables for Service Principals or Managed Identity, which is recommended for automated environments like CI/CD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azuread\" {\n  use_cli = false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Tenant ID via Environment Variable (shell)\nDESCRIPTION: Shows how to configure the target Azure Tenant ID for Terraform Azure providers by setting the `ARM_TENANT_ID` environment variable in a Unix-like shell (e.g., bash, zsh). Terraform will use this Tenant ID when authenticating via the Azure CLI if not explicitly set in the provider block. Requires a valid Tenant ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# sh\nexport ARM_TENANT_ID=00000000-0000-2222-2222-222222222222\n```\n\n----------------------------------------\n\nTITLE: Looking Up Azure AD Access Package by ID using Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use the `azuread_access_package` data source to retrieve details of an Azure AD access package by specifying its unique `object_id`. It requires the `object_id` argument to be provided.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Microsoft Graph via Environment Variable - Shell and PowerShell\nDESCRIPTION: These snippets enable beta support for Microsoft Graph in the AzureAD provider by setting the AAD_USE_MICROSOFT_GRAPH environment variable. The shell variant uses export while the PowerShell version uses $env assignment. This approach is useful as an alternative to modifying the provider block, especially for ephemeral configurations or scripting environments.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# sh\\nexport AAD_USE_MICROSOFT_GRAPH=1\\n\n```\n\n----------------------------------------\n\nTITLE: Granting Application Access Using Published App IDs\nDESCRIPTION: Shows how to create a service principal and configure application permissions using Microsoft Graph API IDs. This example demonstrates setting up both application roles and OAuth2 permission scopes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/application_published_app_ids.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  client_id    = data.azuread_application_published_app_ids.well_known.result[\"MicrosoftGraph\"]\n  use_existing = true\n}\n\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  required_resource_access {\n    resource_app_id = data.azuread_application_published_app_ids.well_known.result[\"MicrosoftGraph\"]\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.app_role_ids[\"User.Read.All\"]\n      type = \"Role\"\n    }\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"]\n      type = \"Scope\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AzureAD Application with Generated App Role IDs using Terraform (HCL)\nDESCRIPTION: This snippet demonstrates how to define an AzureAD application resource and its app role with a required UUID in Terraform version 2.0 or later. It uses the HashiCorp Random provider to generate a stable UUID, which is assigned to the AzureAD application's app_role 'id' property, following the breaking change in which this field is now required. Inputs are the auto-generated resource outputs, and outputs are the configured AzureAD application and associated role. This approach ensures safe, predictable management of role identities and prevents destructive changes on configuration updates.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \\\"random_uuid\\\" \\\"example_role_id\\\" {}\n\nresource \\\"azuread_application\\\" \\\"example\\\" {\n  display_name = \\\"example\\\"\n\n  app_role {\n    id = random_uuid.example_role_id.result\n    # additional properties...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing a User's Password using Go SDK\nDESCRIPTION: This snippet shows how to invoke the password change operation for a user via the `UserClient.ChangePassword` method. It requires a `context`, the target `UserID`, and a `ChangePasswordRequest` payload with the current and new password details. Error handling and response processing follow the call.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.ChangePasswordRequest{\n\t// ...\n}\n\n\nread, err := client.ChangePassword(ctx, id, payload, user.DefaultChangePasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Directory Role Assignment - Shell\nDESCRIPTION: Provides a shell command to import an existing Azure AD directory role assignment into Terraform state using its assignment ID. Requires the AzureAD Terraform provider CLI. The command takes the Terraform resource name and the assignment ID as arguments. Outputs the completion status with no modifications to the resource configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_assignment.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_directory_role_assignment.example ePROZI_iKE653D_d6aoLHyr-lKgHI8ZGiIdz8CLVcng-1\n```\n\n----------------------------------------\n\nTITLE: Finding Meeting Times using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates using `UserClient.FindMeetingTimes` to find meeting time slots that fit specified constraints for attendees and time ranges, based on the user's calendar. Requires context, the `UserID` (likely of the organizer or relevant user), and a `FindMeetingTimesRequest` payload. Includes error handling and response access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.FindMeetingTimesRequest{\n\t// ...\n}\n\n\nread, err := client.FindMeetingTimes(ctx, id, payload, user.DefaultFindMeetingTimesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure User-Assigned Managed Identity in Terraform\nDESCRIPTION: This Terraform snippet shows how to create a standalone Azure User-Assigned Identity using the `azurerm_user_assigned_identity` resource. This identity can then be assigned to one or more Azure resources. An output (`terraform_identity_object_id`) is defined to expose the Object ID (Principal ID) of the Service Principal associated with this user-assigned identity. This configuration requires the `azurerm` Terraform provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/managed_service_identity.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n```terraform\nresource \"azurerm_user_assigned_identity\" \"terraform\" {\n  name = \"terraform\"\n  # ...\n}\n\noutput \"terraform_identity_object_id\" {\n  value = azurerm_user_assigned_identity.terraform.principal_id\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure Authentication Environment Variables - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to set the required environment variables to enable Terraform authentication via a certificate in Windows environments. Each \\$env variable configures either the client ID, certificate file path, certificate password, or tenant ID. PowerShell is required for this environment.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell\n> $env:ARM_CLIENT_ID = \"00000000-0000-0000-0000-000000000000\"\n> $env:ARM_CLIENT_CERTIFICATE_PATH = \"/path/to/my/client/certificate.pfx\"\n> $env:ARM_CLIENT_CERTIFICATE_PASSWORD = \"Pa55w0rd123\"\n> $env:ARM_TENANT_ID = \"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.ListGetsByIds in Go\nDESCRIPTION: This snippet demonstrates retrieving multiple groups by their IDs using `ListGetsByIdsComplete`. It requires a `context` and a `payload` of type `group.ListGetsByIdsRequest` containing the list of IDs. The `Complete` function handles pagination; `ListGetsByIds` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := group.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, group.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, group.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Sign-in Sessions for Azure AD User in Go\nDESCRIPTION: Example showing how to revoke all active sign-in sessions for a specific user. The code creates a user ID object and calls the RevokeSignInSessions method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RevokeSignInSessions(ctx, id, user.DefaultRevokeSignInSessionsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Azure AD Access Package by Display Name using Terraform\nDESCRIPTION: This Terraform configuration shows how to use the `azuread_access_package` data source to find an Azure AD access package within a specific catalog by providing its `display_name` and the `catalog_id`. Both arguments are required for this lookup method.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package\" \"example\" {\n  catalog_id   = \"00000000-0000-0000-0000-000000000000\"\n  display_name = \"My access package Catalog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating using ADO Pipeline OIDC with go-azure-sdk (Go)\nDESCRIPTION: Shows authentication to Azure APIs using Azure DevOps Pipeline OIDC tokens, generally for use in CI/CD pipelines. Reads OIDC values and service connection ID from environment variables. EnableAuthenticationUsingADOPipelineOIDC is set to true. Only available in Azure DevOps pipelines with service connections configured.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                              environment,\\n\\t\\tEnableAuthenticationUsingADOPipelineOIDC: true,\\n\\t\\tOIDCTokenRequestURL:                      os.Getenv(\\\"SYSTEM_OIDCREQUESTURI\\\"),\\n\\t\\tOIDCTokenRequestToken:                    os.Getenv(\\\"SYSTEM_ACCESSTOKEN\\\"),\\n\\t\\tADOPipelineServiceConnectionID:           \\\"<Service Connection ID>\\\",\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Group Membership (Shell)\nDESCRIPTION: This snippet shows how to import an existing Azure AD group member into Terraform state using the 'terraform import' command. It requires the AzureAD provider configured in Terraform and valid group/member object IDs. The input is a string in the format '{GroupObjectID}/member/{MemberObjectID}', and the output is the group member registered in state for continued management via Terraform. Note that the ID format is unique to Terraform for AzureAD group member import operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_member.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_group_member.example 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD Application Template information using Terraform\nDESCRIPTION: This example shows how to retrieve an Azure AD Application Template by display name and access its template ID. The data source allows you to reference templates from the Azure AD App Gallery for use in your Terraform configurations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/application_template.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Marketo\"\n}\n\noutput \"application_template_id\" {\n  value = data.azuread_application_template.example.template_id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Named Location - Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to use the data source azuread_named_location to obtain information about a named location in Azure Active Directory. The required parameter display_name is set to lookup a Named Location by name. This code depends on the Terraform AzureAD provider and expects necessary authentication and permissions to be in place for API access. The output includes details on the location corresponding to the supplied display_name, and can be used within other Terraform resources or outputs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/named_location.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_named_location\" \"example\" {\n  display_name = \"My Named Location\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an AzureAD Directory Role Eligibility Schedule Request with Terraform (Shell)\nDESCRIPTION: This shell snippet shows how to import an existing AzureAD directory role eligibility schedule request into Terraform state using the 'terraform import' command. The only dependency is the Terraform CLI with an initialized configuration for the AzureAD provider. The key parameter is the ID of the eligibility schedule request, which must be accurate. The input is the assignment ID, and the output is the resource imported into Terraform state for further management. Ensure the resource exists before importing, and the user has correct permissions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_eligibility_schedule_request.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_directory_role_eligibility_schedule_request.example 822ec710-4c9f-4f71-a27a-451759cc7522\n```\n\n----------------------------------------\n\nTITLE: Removing a Password from an Application with ApplicationClient.RemovePassword - Go\nDESCRIPTION: Demonstrates how to remove a password credential from an application by calling RemovePassword. It needs the application ID and a properly formed RemovePasswordRequest payload. Handles both error responses and the result model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.RemovePasswordRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.RemovePassword(ctx, id, payload, application.DefaultRemovePasswordOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Privileged Access Group Assignment Schedule using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD privileged access group assignment schedule into Terraform state management. The `terraform import` command requires the resource address (`azuread_privileged_access_group_assignment_schedule.example`) and the unique ID of the existing assignment schedule in Azure AD (e.g., 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/privileged_access_group_assignment_schedule.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_privileged_access_group_assignment_schedule.example 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Authenticating using GitHub OIDC with go-azure-sdk (Go)\nDESCRIPTION: Presents how to authenticate Azure API access using GitHub OIDC tokens, typical for CI/CD workflows. OIDC token request URL and token are taken from environment variables provided by GitHub Actions. Requires EnableAuthenticationUsingGitHubOIDC to be true in credentials. Input and output details depend on environment variable configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                         environment,\\n\\t\\tEnableAuthenticationUsingGitHubOIDC: true,\\n\\t\\tOIDCTokenRequestURL:                 os.Getenv(\\\"ACTIONS_ID_TOKEN_REQUEST_URL\\\"),\\n\\t\\tOIDCTokenRequestToken:               os.Getenv(\\\"ACTIONS_ID_TOKEN_REQUEST_TOKEN\\\"),\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure AD Authentication - Shell\nDESCRIPTION: Shell commands to set environment variables for Azure AD authentication credentials including client ID, client secret, and tenant ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_secret.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# sh\n$ export ARM_CLIENT_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_CLIENT_SECRET=\"MyCl1eNtSeCr3t\"\n$ export ARM_TENANT_ID=\"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Checking Service Principal Member Objects - Go\nDESCRIPTION: Checks object memberships, such as user or group memberships, for a given service principal. Uses CheckMemberObjectsRequest, supports batched pagination for handling large results. Necessary for auditing or managing AzureAD object relationships. Input parameters are context, ID, and request; outputs are the items and error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, serviceprincipal.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, serviceprincipal.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Pre-authorized Application into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD pre-authorized application configuration into Terraform state management. It uses the `terraform import` command, specifying the target Terraform resource address (`azuread_application_pre_authorized.example`) and a unique identifier composed of the authorizing application's Object ID, the literal string `preAuthorizedApplication`, and the authorized application's Application (client) ID, separated by slashes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_pre_authorized.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_pre_authorized.example 00000000-0000-0000-0000-000000000000/preAuthorizedApplication/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Getting a Service Principal by ID - Go\nDESCRIPTION: Demonstrates the retrieval of a specific service principal's details using its ID and the ServicePrincipalClient. Standard context management and error checking are implemented, along with handling the response model for further use.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\nread, err := client.GetServicePrincipal(ctx, id, serviceprincipal.DefaultGetServicePrincipalOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD Access Package Catalog by Display Name\nDESCRIPTION: This snippet demonstrates how to retrieve an access package catalog using its display name. This is useful when you want to reference a catalog by a more human-readable identifier rather than its object ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package_catalog.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"My access package Catalog\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Azure AD Service Principal in Go\nDESCRIPTION: This snippet demonstrates how to update an Azure AD service principal using the Go SDK. It shows the process of preparing a context, creating a service principal ID, preparing a payload object, making the update request, and handling both errors and successful responses.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.ServicePrincipal{\n\t// ...\n}\n\n\nread, err := client.UpdateServicePrincipal(ctx, id, payload, serviceprincipal.DefaultUpdateServicePrincipalOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Application App Role using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD Application App Role into Terraform state management. It uses the `terraform import` command, specifying the resource type (`azuread_application_app_role`), a chosen Terraform resource name (`example`), and the Azure resource identifier composed of the application's object ID and the app role's ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_app_role.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_app_role.example /applications/00000000-0000-0000-0000-000000000000/appRoles/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principals by Display Names in Terraform\nDESCRIPTION: Demonstrates how to look up Azure AD service principals using their application display names.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principals.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principals\" \"example\" {\n  display_names = [\n    \"example-app\",\n    \"another-app\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Delegated Permission Grant into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD delegated permission grant into Terraform state management using the `terraform import` command. Replace the placeholder ID with the actual ID of the grant and adjust the Terraform resource address (`azuread_service_principal_delegated_permission_grant.example`) to match your configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_delegated_permission_grant.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_service_principal_delegated_permission_grant.example aaBBcDDeFG6h5JKLMN2PQrrssTTUUvWWxxxxxyyyzzz\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from an Application with ApplicationClient.RemoveKey - Go\nDESCRIPTION: Shows how to remove a cryptographic key from an existing application using RemoveKey. Requires the application ID and a RemoveKeyRequest payload, then processes the response's model. It's essential for deprecating old keys or rotating credentials.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.RemoveKeyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.RemoveKey(ctx, id, payload, application.DefaultRemoveKeyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Information with MeClient.GetMe - Go\nDESCRIPTION: This example uses the MeClient.GetMe method to fetch the current user's Microsoft Graph profile, requiring just a context and operation options. It returns a model containing user details for further processing. No request payload is needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetMe(ctx, me.DefaultGetMeOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Access Package Resource Association\nDESCRIPTION: Example command for importing an existing access package resource association into Terraform state using the composite ID format.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_resource_package_association.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nterraform import azuread_access_package_resource_package_association.example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111_22222222-2222-2222-2222-22222222/33333333-3333-3333-3333-33333333/Member\n```\n\n----------------------------------------\n\nTITLE: Retrieving Directory Role Templates in Azure AD with Terraform\nDESCRIPTION: Example showing how to use the azuread_directory_role_templates data source to retrieve all directory role templates in Azure AD and output their object IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/directory_role_templates.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_directory_role_templates\" \"current\" {}\n\noutput \"roles\" {\n  value = data.azuread_directory_role_templates.current.object_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principals by Object IDs in Terraform\nDESCRIPTION: Illustrates how to look up Azure AD service principals using their object IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principals.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principals\" \"example\" {\n  object_ids = [\n    \"00000000-0000-0000-0000-000000000000\",\n    \"00000000-0000-0000-0000-111111111111\",\n    \"00000000-0000-0000-0000-222222222222\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking User Sign-in Sessions using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates calling `UserClient.RevokeSignInSessions` to invalidate all refresh tokens (and potentially session cookies) issued to applications for a specific user. Requires context and the `UserID`. Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RevokeSignInSessions(ctx, id, user.DefaultRevokeSignInSessionsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Domain via DomainClient in Go\nDESCRIPTION: This code updates an existing domain by specifying the domain ID, preparing a Domain struct payload, and invoking the UpdateDomain method with context and default options. It performs error handling and processes the updated model object if present. Dependencies include the domain client, context, and a properly initialized Domain payload. The method updates the domain's properties as specified in the payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\npayload := domain.Domain{\n\t// ...\n}\n\n\nread, err := client.UpdateDomain(ctx, id, payload, domain.DefaultUpdateDomainOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SynchronizationJob in Go\nDESCRIPTION: Demonstrates how to create a new synchronization job for a specific service principal using the `CreateSynchronizationJob` method. It requires a context, a service principal ID, a payload defining the job, and operation options. The response model is accessed via `read.Model` after checking for errors.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := synchronizationjob.SynchronizationJob{\n\t// ...\n}\n\n\nread, err := client.CreateSynchronizationJob(ctx, id, payload, synchronizationjob.DefaultCreateSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.EvaluateDynamicMembership in Go\nDESCRIPTION: This snippet demonstrates evaluating dynamic membership rules for a specific group using the `EvaluateDynamicMembership` method. It requires a `context`, the `groupID`, and a `payload` of type `group.EvaluateDynamicMembershipRequest`. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.EvaluateDynamicMembershipRequest{\n\t// ...\n}\n\n\nread, err := client.EvaluateDynamicMembership(ctx, id, payload, group.DefaultEvaluateDynamicMembershipOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Group Membership using Go SDK\nDESCRIPTION: This example shows how to get the list of groups a user is a direct member of using `UserClient.GetMemberGroupsComplete`. It needs a `context`, the `UserID`, and a `GetMemberGroupsRequest` payload (often for security filtering). The `Complete` method handles pagination and returns the group IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, user.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, user.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Permission Scope with Azure AD Application Resource\nDESCRIPTION: Shows how to use the permission scope resource alongside the azuread_application resource, including lifecycle configuration to prevent conflicts between the resources.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_permission_scope.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n\n  lifecycle {\n    ignore_changes = [\n      api[0].oauth2_permission_scope,\n    ]\n  }\n}\n\nresource \"azuread_application_permission_scope\" \"example\" {\n  application_id = azuread_application.example.id\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Well-Known Application IDs in Azure AD\nDESCRIPTION: Demonstrates how to retrieve and output a list of well-known Microsoft application IDs using the azuread_application_published_app_ids data source.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/application_published_app_ids.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\noutput \"published_app_ids\" {\n  value = data.azuread_application_published_app_ids.well_known.result\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Claims Mapping Policy with Terraform CLI - Shell\nDESCRIPTION: This snippet demonstrates how to import an existing Azure AD Claims Mapping Policy into the Terraform state using the terraform import command in a shell environment. It requires the resource name and the policy ID as parameters, and assumes that the Terraform configuration for the resource already exists. Successful import allows further management of the resource via Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/claims_mapping_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_claims_mapping_policy.my_policy 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating Password SSO Credentials for a Service Principal - Go\nDESCRIPTION: Demonstrates updating password SSO credentials for an existing service principal. Code requires the service principal ID and an UpdatePasswordSingleSignOnCredentialsRequest as input, with robust error checking and response processing for completed operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.UpdatePasswordSingleSignOnCredentialsRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.UpdatePasswordSingleSignOnCredentials(ctx, id, payload, serviceprincipal.DefaultUpdatePasswordSingleSignOnCredentialsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure CLI Authentication via Environment Variable (PowerShell)\nDESCRIPTION: Demonstrates how to disable Azure CLI authentication for Terraform Azure providers by setting the `ARM_USE_CLI` environment variable to `false` in PowerShell. This prevents Terraform from attempting to use credentials from `az login`, ensuring other authentication methods are used. Useful in CI/CD pipelines.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell\n$env:ARM_USE_CLI = false\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Owned Object with ApplicationClient.CreateGetsUserOwnedObject - Go\nDESCRIPTION: This snippet shows how to initiate the creation of an object owned by a user, using CreateGetsUserOwnedObject. It constructs a CreateGetsUserOwnedObjectRequest payload, sends the request, and processes the result. The operation is used for specialized scenarios such as user-owned enterprise application instances.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.CreateGetsUserOwnedObjectRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateGetsUserOwnedObject(ctx, payload, application.DefaultCreateGetsUserOwnedObjectOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific User using Microsoft Graph SDK in Go\nDESCRIPTION: Example of retrieving the properties and relationships of a specific user object using `UserClient.GetUser`. It requires a context and the `UserID` of the target user. Standard error handling and response model access are demonstrated.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.GetUser(ctx, id, user.DefaultGetUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Federated Identity Credential into Terraform State (Shell)\nDESCRIPTION: Shell command using Terraform CLI to import an existing Azure AD federated identity credential into the Terraform state. It requires the application's object ID and the credential's ID, combined in a specific format (`{ObjectId}/federatedIdentityCredential/{CredentialId}`).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_federated_identity_credential.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_federated_identity_credential.example 00000000-0000-0000-0000-000000000000/federatedIdentityCredential/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Restoring an Azure AD Group using GroupClient in Go\nDESCRIPTION: This snippet demonstrates restoring a deleted Azure AD group using the `Restore` method of a `GroupClient`. It requires a context, the group ID, and a `group.RestoreRequest` payload containing necessary restoration details. Default restore options are used, along with error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.RestoreRequest{\n\t// ...\n}\n\n\nread, err := client.Restore(ctx, id, payload, group.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateValidatesProperty in Go\nDESCRIPTION: This example shows how to validate a property value for a group using the `CreateValidatesProperty` method. It requires a `context` and a `payload` of type `group.CreateValidatesPropertyRequest`. Standard error handling and response processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := group.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, group.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure AD Invitation with Standard Message - Terraform\nDESCRIPTION: Shows how to configure an azuread_invitation Terraform resource to send the default invitation message in a specified language. The message block uses the language parameter (en-US) to localize the message. Dependencies include the AzureAD provider and the required roles/permissions. The main parameters are user_email_address and redirect_url, while the message block must omit the body property to use the default message.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/invitation.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_invitation\" \"example\" {\n  user_email_address = \"jdoe@hashicorp.com\"\n  redirect_url       = \"https://portal.azure.com\"\n\n  message {\n    language = \"en-US\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Claims Mapping Policy Assignment - Terraform CLI (Shell)\nDESCRIPTION: Shows the terraform import command to bring an existing Claims Mapping Policy Assignment under Terraform management. Requires the unique composite ID in the format service-principal-uuid/claimsMappingPolicy/claims-mapping-policy-uuid. The command maps the remote Azure AD assignment to the specified Terraform resource address. Only works if the user or service principal has sufficient API permissions for read/import operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_claims_mapping_policy_assignment.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_service_principal_claims_mapping_policy_assignment.app 00000000-0000-0000-0000-000000000000/claimsMappingPolicy/11111111-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Tenant ID in Terraform Provider (HCL)\nDESCRIPTION: Specifies the target Azure Active Directory Tenant ID directly within the `azuread` provider block in a Terraform configuration file (.tf). This explicitly sets the tenant scope for resources managed by this provider instance, overriding any default tenant derived from the Azure CLI login or the `ARM_TENANT_ID` environment variable. Requires a valid Tenant ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azuread\" {\n  tenant_id = \"00000000-0000-2222-2222-222222222222\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azuread\" {\n  tenant_id = \"00000000-0000-1111-1111-111111111111\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Known Clients Configuration into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD application's known clients configuration into Terraform management. Replace `00000000-0000-0000-0000-000000000000` with the actual object ID of the application registration whose known clients configuration you want to import. The command uses the Terraform import mechanism to associate the existing Azure resource with the `azuread_application_known_clients.example` resource defined in the Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_known_clients.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_known_clients.example /applications/00000000-0000-0000-0000-000000000000/knownClients\n```\n\n----------------------------------------\n\nTITLE: Getting Password SSO Credentials for a Service Principal - Go\nDESCRIPTION: Shows usage of ServicePrincipalClient to retrieve password single sign-on credentials for a service principal by ID, with relevant request payload. Error and response processing are handled per standard patterns, ensuring any returned credential models are accessible.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.GetPasswordSingleSignOnCredentialsRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.GetPasswordSingleSignOnCredentials(ctx, id, payload, serviceprincipal.DefaultGetPasswordSingleSignOnCredentialsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Details by ID using Go SDK\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a specific user by their ID using the `UserClient.GetUser` method. It requires a `context` and the `UserID`. The response model contains the user's properties.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.GetUser(ctx, id, user.DefaultGetUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Base64-Encoded Certificate Data via Environment - Shell\nDESCRIPTION: This shell-session snippet demonstrates setting environment variables for Terraform to receive the raw base64-encoded contents of a .pfx file for authentication. \\\"ARM_CLIENT_CERTIFICATE\\\" is filled with the base64-encoded output using \\'base64\\'. This method avoids certificate file-path dependencies but requires base64 utility and correct variable values.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n# sh\n$ export ARM_CLIENT_ID=\"00000000-0000-0000-0000-000000000000\"\n$ export ARM_CLIENT_CERTIFICATE=\"$(base64 /path/to/my/client/certificate.pfx)\"\n$ export ARM_CLIENT_CERTIFICATE_PASSWORD=\"Pa55w0rd123\"\n$ export ARM_TENANT_ID=\"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Directory Role in Go\nDESCRIPTION: This Go code shows how to delete a specific directory role using the `DeleteDirectoryRole` method. It requires a context and the ID of the directory role to be deleted (`DirectoryRoleID`).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\nread, err := client.DeleteDirectoryRole(ctx, id, directoryrole.DefaultDeleteDirectoryRoleOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a License to a User using Microsoft Graph SDK in Go\nDESCRIPTION: Example of using the `UserClient.AssignLicense` method to assign licenses to a specific user identified by their ID. It requires a context, a `UserID`, and an `AssignLicenseRequest` payload containing the license details. The code includes basic error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.AssignLicenseRequest{\n\t// ...\n}\n\n\nread, err := client.AssignLicense(ctx, id, payload, user.DefaultAssignLicenseOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Fallback Public Client in Terraform\nDESCRIPTION: Command for importing an existing Application Fallback Public Client setting into Terraform state. The import uses the object ID of the application in a specific format.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_fallback_public_client.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_fallback_public_client.example /applications/00000000-0000-0000-0000-000000000000/fallbackPublicClient\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateEvaluatesDynamicMembership in Go\nDESCRIPTION: This snippet demonstrates evaluating dynamic membership rules using the `CreateEvaluatesDynamicMembership` method. It requires a `context` and a `payload` of type `group.CreateEvaluatesDynamicMembershipRequest`. Standard error handling and response processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := group.CreateEvaluatesDynamicMembershipRequest{\n\t// ...\n}\n\n\nread, err := client.CreateEvaluatesDynamicMembership(ctx, payload, group.DefaultCreateEvaluatesDynamicMembershipOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Groups for a Directory Object via Go SDK\nDESCRIPTION: Shows usage of DirectoryObjectClient.CheckMemberGroupsComplete to determine the group memberships of a specified directory object. Inputs include context, the object's ID, and a CheckMemberGroupsRequest payload; the function returns an iterable of groups and supports batched pagination. Dependencies include the Go SDK directoryobject package and proper authentication; appropriate error handling is also demonstrated.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\npayload := directoryobject.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, directoryobject.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, directoryobject.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateGetsUserOwnedObject in Go\nDESCRIPTION: This example shows how to retrieve user-owned objects using the `CreateGetsUserOwnedObject` method. It requires a `context` and a `payload` of type `group.CreateGetsUserOwnedObjectRequest`. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := group.CreateGetsUserOwnedObjectRequest{\n\t// ...\n}\n\n\nread, err := client.CreateGetsUserOwnedObject(ctx, payload, group.DefaultCreateGetsUserOwnedObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Existing AzureAD Application State - Shell Session\nDESCRIPTION: This snippet illustrates the use of the terraform state show command to output the current state of an azuread_application resource, allowing users to review assigned UUIDs and other property values. It helps in updating Terraform configuration files to avoid unexpected diffs or resource recreation. Dependencies include the Terraform CLI and an initialized state file with the resource present.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ terraform state show azuread_application.example\\n\\n# azuread_application.example:\\nresource \\\"azuread_application\\\" \\\"example\\\" {\\n    app_role           = [\\n        {\\n            allowed_member_types = [\\n                \\\"User\\\",\\n            ]\\n            description          = \\\"Just an example\\\"\\n            display_name         = \\\"Example Role\\\"\\n            id                   = \\\"3dbd749f-c2ba-4796-0d33-273878f8a31b\\\"\\n            is_enabled           = true\\n            value                = \\\"\\\"\\n        },\\n    ]\\n    application_id     = \\\"cd986e6e-5a90-42f0-8c01-82f0da5b286c\\\"\\n    display_name       = \\\"example-app\\\"\\n    id                 = \\\"61a9d04a-6694-497a-afe8-6303aa3435df\\\"\\n    oauth2_permissions = [\\n        {\\n            admin_consent_description  = \\\"Allow the application to access example-app on behalf of the signed-in user.\\\"\\n            admin_consent_display_name = \\\"Access example-app\\\"\\n            id                         = \\\"c32d857d-02d9-4887-af7a-cb1f1fd61b9a\\\"\\n            is_enabled                 = true\\n            type                       = \\\"User\\\"\\n            user_consent_description   = \\\"Allow the application to access example-app on your behalf.\\\"\\n            user_consent_display_name  = \\\"Access example-app\\\"\\n            value                      = \\\"user_impersonation\\\"\\n        },\\n    ]\\n    object_id          = \\\"61a9d04a-6694-497a-afe8-6303aa3435df\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Converting External User to Internal Member using Go SDK\nDESCRIPTION: This example illustrates how to convert an external user (guest) to an internal member user using the `UserClient.CreateConvertExternalToInternalMemberUser` method. It needs a `context`, the `UserID` of the external user, and a `CreateConvertExternalToInternalMemberUserRequest` payload. The result indicates success or failure.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CreateConvertExternalToInternalMemberUserRequest{\n\t// ...\n}\n\n\nread, err := client.CreateConvertExternalToInternalMemberUser(ctx, id, payload, user.DefaultCreateConvertExternalToInternalMemberUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI with Service Principal Certificate (shell)\nDESCRIPTION: Shows how to log into the Azure CLI non-interactively using a Service Principal identity authenticated via a client certificate. Requires specifying the Service Principal's Application (Client) ID (`--username`), the path to the PEM or PFX certificate file containing the private key (`--password`), and the Azure AD Tenant ID (`--tenant`). The `--allow-no-subscriptions` flag is included. Requires Azure CLI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naz login --service-principal \\\n         --username 00000000-0000-0000-0000-000000000000 \\\n         --password /path/to/certificate \\\n         --tenant 10000000-2000-3000-4000-500000000000 \\\n         --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from an Application with ApplicationClient.RemoveKey in Go\nDESCRIPTION: Provides an example for removing a credential key from an application using RemoveKey. Requires application ID, request payload, and default operation options. The response contains the updated application model, and proper error handling is shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.RemoveKeyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.RemoveKey(ctx, id, payload, application.DefaultRemoveKeyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Permission Scope\nDESCRIPTION: Shows the command format for importing existing permission scopes into Terraform state using application object ID and permission scope ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_permission_scope.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_permission_scope.example /applications/00000000-0000-0000-0000-000000000000/permissionScopes/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects for a Service Principal - Go\nDESCRIPTION: Demonstrates how to fetch all member objects of a specific service principal, with batched pagination and error management. The code provides iteration over the results and emphasizes the importance of correct payload parameters for meaningful results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.GetMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberObjects(ctx, id, payload, serviceprincipal.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, serviceprincipal.DefaultGetMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Terraform Output for Application Secret - Shell\nDESCRIPTION: This snippet shows how to use the Terraform CLI to output the client secret for the widgets-service application after running `terraform apply`. The command requires Terraform CLI installed and a successful prior `apply` operation. It retrieves the value of the specified output, which is typically sensitive and will be stored in Terraform's state file. The command returns the secret as a string to standard output. Use with caution as secrets may be exposed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/examples/application/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nterraform output widgets_service_client_secret\n```\n\n----------------------------------------\n\nTITLE: Wiping Managed App Registrations by Device Tag in Go\nDESCRIPTION: Demonstrates how to wipe managed app registrations for a user based on device tag using the UserClient. Includes error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.WipeManagedAppRegistrationsByDeviceTagRequest{\n\t// ...\n}\n\n\nread, err := client.WipeManagedAppRegistrationsByDeviceTag(ctx, id, payload, user.DefaultWipeManagedAppRegistrationsByDeviceTagOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail as a User using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to use `UserClient.SendMail` to send an email message from the mailbox of the specified user. Requires context, the `UserID` of the sender, and a `SendMailRequest` payload containing the email message details (recipients, subject, body, etc.). Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.SendMailRequest{\n\t// ...\n}\n\n\nread, err := client.SendMail(ctx, id, payload, user.DefaultSendMailOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DirectoryRoleTemplate Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a new `DirectoryRoleTemplateClient`. It specifies the base URI for the Microsoft Graph API and assigns an authorizer (e.g., obtained through authentication) to the client for handling request authorization.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := directoryroletemplate.NewDirectoryRoleTemplateClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Directory Role Templates in Go\nDESCRIPTION: This snippet shows how to retrieve the total count of directory role templates using the `GetsCount` method. It requires only a context and returns the count as part of the response model or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, directoryroletemplate.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI with Managed Identity (shell)\nDESCRIPTION: Shows how to log into the Azure CLI using a Managed Identity associated with the Azure resource where the command is run. Use `--identity` for System-Assigned Managed Identity. For User-Assigned Managed Identity, additionally provide its Client ID via `--username`. The `--allow-no-subscriptions` flag is included. Requires Azure CLI running on an Azure compute resource with Managed Identity enabled.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\naz login --identity --allow-no-subscriptions\n\nor\n\naz login --identity \\\n         --username 00000000-0000-0000-0000-000000000000 \\\n         --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.GetMemberGroups in Go\nDESCRIPTION: This snippet demonstrates retrieving the groups that a specific group is a member of using `GetMemberGroupsComplete`. It requires a `context`, the `groupID`, and a `payload` of type `group.GetMemberGroupsRequest`. The `Complete` function handles pagination; `GetMemberGroups` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, group.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, group.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Reprocessing License Assignment for Azure AD User in Go\nDESCRIPTION: Example demonstrating how to reprocess license assignments for a specific user. The code creates a user ID object and calls the ReprocessLicenseAssignment method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.ReprocessLicenseAssignment(ctx, id, user.DefaultReprocessLicenseAssignmentOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Standard Library Global Log Output to go-hclog in Go\nDESCRIPTION: This snippet shows how to redirect the output of the standard Go library's global logger (`log`) to an `hclog.Logger`. This is done by setting the standard logger's output to an `io.Writer` obtained from `appLogger.StandardWriter()`. Standard log flags and prefixes are cleared to allow `hclog` to manage formatting. Calls like `log.Printf` will now be processed by `appLogger`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n```go\n// log the standard logger from 'import \"log\"'\nlog.SetOutput(appLogger.StandardWriter(&hclog.StandardLoggerOptions{InferLevels: true}))\nlog.SetPrefix(\"\")\nlog.SetFlags(0)\n\nlog.Printf(\"[DEBUG] %d\", 42)\n```\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure CLI with Service Principal Secret (shell)\nDESCRIPTION: Illustrates logging into the Azure CLI non-interactively using a Service Principal identity authenticated via a client secret. Requires specifying the Service Principal's Application (Client) ID (`--username`), its Client Secret (`--password`), and the Azure AD Tenant ID (`--tenant`). The `--allow-no-subscriptions` flag allows access to tenants without linked subscriptions. Requires Azure CLI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naz login --service-principal \\\n         --username 00000000-0000-0000-0000-000000000000 \\\n         --password \"MyCl1eNtSeCr3t\" \\\n         --tenant 10000000-2000-3000-4000-500000000000 \\\n         --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Adding a Key to a Service Principal - Go\nDESCRIPTION: Sends a request to add a key to an AzureAD service principal. It prepares the AddKeyRequest, invokes client.AddKey, and handles the response or any errors. Requires context, a service principal ID, and a valid AddKeyRequest payload. Inputs are the context, ID, payload, and operation options; output is the response or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.AddKeyRequest{\n\t// ...\n}\n\n\nread, err := client.AddKey(ctx, id, payload, serviceprincipal.DefaultAddKeyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an AzureAD User Flow Attribute Resource Using Terraform CLI (Shell)\nDESCRIPTION: This Shell snippet demonstrates how to import an existing AzureAD user flow attribute into the Terraform state by specifying its unique ID. The example uses the 'terraform import' command, which requires the target resource block reference and the attribute ID (obtainable via the Microsoft Graph API). The user must have the appropriate API permissions and a pre-existing resource in Azure AD for this command to work. The import only imports the real state into Terraform and does not modify cloud resources.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/user_flow_attribute.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform import azuread_user_flow_attribute.example extension_ecc9f88db2924942b8a96f44873616fe_Hobbyjkorv\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Application with ApplicationClient.GetApplication - Go\nDESCRIPTION: Shows how to retrieve an application's details from Microsoft Graph by supplying the application ID. Calls GetApplication and processes the response, checking for errors and working with the model as needed. Depends on a valid ApplicationClient and application ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.GetApplication(ctx, id, application.DefaultGetApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups for a Service Principal - Go\nDESCRIPTION: Shows an example of retrieving member groups for a service principal by preparing a suitable payload and handling batched pagination of results, with streamlined error handling. This operation is useful for analyzing group memberships in automation scripts. Includes item iteration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.GetMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberGroups(ctx, id, payload, serviceprincipal.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, serviceprincipal.DefaultGetMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extension Properties for Directory Role Templates in Go\nDESCRIPTION: This snippet shows how to list available extension properties applicable to directory role templates using `ListGetsAvailableExtensionPropertiesComplete`. It takes a context and a `ListGetsAvailableExtensionPropertiesRequest` payload. The `Complete` function handles pagination; `ListGetsAvailableExtensionProperties` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryroletemplate.ListGetsAvailableExtensionPropertiesRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, directoryroletemplate.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, directoryroletemplate.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Service Principal - Go\nDESCRIPTION: Updates the properties of an existing AzureAD service principal using the UpdateServicePrincipal operation. Takes the updated ServicePrincipal struct and the entity ID as input, along with the context. Useful for managing app registrations, properties, and roles. Outputs the modified object or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.ServicePrincipal{\n\t// ...\n}\n\n\nread, err := client.UpdateServicePrincipal(ctx, id, payload, serviceprincipal.DefaultUpdateServicePrincipalOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting SynchronizationJob in Go\nDESCRIPTION: Shows how to restart a synchronization job, potentially clearing state, using the `RestartSynchronizationJob` method. It requires a context, a composite ID, a payload defining the restart criteria (e.g., full sync), and operation options. The response model is in `read.Model`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\npayload := synchronizationjob.RestartSynchronizationJobRequest{\n\t// ...\n}\n\n\nread, err := client.RestartSynchronizationJob(ctx, id, payload, synchronizationjob.DefaultRestartSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Role Templates by IDs in Go\nDESCRIPTION: This example demonstrates retrieving a specific set of directory role templates based on their IDs using `ListGetsByIdsComplete`. It requires a context and a `ListGetsByIdsRequest` payload containing the desired IDs. The `Complete` variant handles pagination; `ListGetsByIds` allows manual control.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryroletemplate.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, directoryroletemplate.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, directoryroletemplate.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.DeletePasswordSingleSignOnCredentials in Go\nDESCRIPTION: This example shows how to delete password-based single sign-on credentials for a group using the `DeletePasswordSingleSignOnCredentials` method. It requires a `context`, the `groupID`, and a `payload` of type `group.DeletePasswordSingleSignOnCredentialsRequest`. Standard error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.DeletePasswordSingleSignOnCredentialsRequest{\n\t// ...\n}\n\n\nread, err := client.DeletePasswordSingleSignOnCredentials(ctx, id, payload, group.DefaultDeletePasswordSingleSignOnCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Service Principals by Client IDs in Terraform\nDESCRIPTION: Shows how to look up Azure AD service principals using their application client IDs (GUIDs).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/service_principals.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_service_principals\" \"example\" {\n  client_ids = [\n    \"11111111-0000-0000-0000-000000000000\",\n    \"22222222-0000-0000-0000-000000000000\",\n    \"33333333-0000-0000-0000-000000000000\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Users by List of IDs using Go SDK\nDESCRIPTION: This snippet demonstrates retrieving multiple user objects based on a list of IDs using `UserClient.ListGetsByIdsComplete`. It requires a `context` and a `ListGetsByIdsRequest` payload containing the list of user IDs. The `Complete` method handles pagination and returns the corresponding user objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, user.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, user.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Base64-Encoded Certificate Data via Environment - PowerShell\nDESCRIPTION: This PowerShell snippet base64-encodes the contents of a .pfx file and sets it as the ARM_CLIENT_CERTIFICATE environment variable, together with other Terraform authentication variables. Useful when the certificate blob is to be supplied directly, bypassing file-path dependencies. Requires PowerShell and access to the .pfx file.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_client_certificate.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell\n> $env:ARM_CLIENT_ID = \"00000000-0000-0000-0000-000000000000\"\n> $env:ARM_CLIENT_CERTIFICATE = [Convert]::ToBase64String([System.IO.File]::ReadAllBytes(\"/path/to/my/client/certificate.pfx\"))\n> $env:ARM_CLIENT_CERTIFICATE_PASSWORD = \"Pa55w0rd123\"\n> $env:ARM_TENANT_ID = \"10000000-2000-3000-4000-500000000000\"\n```\n\n----------------------------------------\n\nTITLE: Invalidating All User Refresh Tokens using Go SDK\nDESCRIPTION: This snippet demonstrates how to invalidate all refresh tokens issued to applications for a specific user using `UserClient.CreateInvalidateAllRefreshToken`. It requires a `context` and the `UserID`. This is useful for security actions like revoking access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.CreateInvalidateAllRefreshToken(ctx, id, user.DefaultCreateInvalidateAllRefreshTokenOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Application with ApplicationClient.UpdateApplication - Go\nDESCRIPTION: Demonstrates how to update properties of an existing Microsoft Graph application by supplying a modified application.Application payload. Uses the UpdateApplication method, returning a result model and handling errors. The change can include display name, redirect URIs, etc. Requires the application ID and context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.Application{\\n\\t// ...\\n}\\n\\n\\nread, err := client.UpdateApplication(ctx, id, payload, application.DefaultUpdateApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Applications by IDs with ApplicationClient.ListGetsByIds in Go\nDESCRIPTION: Demonstrates retrieving a batch of applications by their IDs using ListGetsByIdsComplete for batched pagination. Requires a context and ListGetsByIdsRequest payload. Returns a set of application objects matching the specified IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.ListGetsByIdsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.ListGetsByIds(ctx, payload, application.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListGetsByIdsComplete(ctx, payload, application.DefaultListGetsByIdsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Service Principal by ID - Go\nDESCRIPTION: Fetches the details of a specific AzureAD service principal via its unique identifier. Employs error checking and allows further processing of the returned model. Expects context, the service principal ID, and the default operation options as input.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\nread, err := client.GetServicePrincipal(ctx, id, serviceprincipal.DefaultGetServicePrincipalOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Application Redirect URIs - HashiCorp Terraform - shell\nDESCRIPTION: Shows the shell command to import an existing azuread_application_redirect_uris resource into Terraform state by specifying the application object ID and the URI type. Requires AzureAD provider setup and appropriate credentials. Input: application object ID and redirect URI type in the resource path. Output: resource imported to Terraform state for further management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_redirect_uris.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_redirect_uris.example /applications/00000000-0000-0000-0000-000000000000/redirectUris/Web\n```\n\n----------------------------------------\n\nTITLE: Adding a Key to an Application with ApplicationClient.AddKey in Go\nDESCRIPTION: Demonstrates how to add a key (credential) to an application using the AddKey method. Expects a context, application ID, and AddKeyRequest payload as input, with operation options supplied from the defaults. Returns a model in the response upon success or an error if it fails. Requires application ID and constructed payload for the new key.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.AddKeyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.AddKey(ctx, id, payload, application.DefaultAddKeyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the MeClient with Authorization - Go\nDESCRIPTION: This code initializes a new MeClient instance with the appropriate Microsoft Graph endpoint and associates an existing Authorizer with the client. The client will be used for all subsequent API method calls. Dependencies include an implementation of an Authorizer and the 'me' subpackage.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := me.NewMeClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Appending Errors to a Multierror List in Go\nDESCRIPTION: Demonstrates accumulating errors using `multierror.Append`. This function takes an existing error (which can be nil, a regular `error`, or a `*multierror.Error`) and a new error, returning an updated error value that includes the new error. This pattern allows collecting multiple errors from sequential operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Listing Gets by IDs for Service Principals - Go\nDESCRIPTION: Illustrates listing service principals by a collection of IDs, highlighting construction of the IDs request payload and use of the Complete function for batched results. Error handling and result iteration are implemented for robust automation of such queries.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := serviceprincipal.ListGetsByIdsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.ListGetsByIds(ctx, payload, serviceprincipal.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListGetsByIdsComplete(ctx, payload, serviceprincipal.DefaultListGetsByIdsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Server Reflection in Go\nDESCRIPTION: This Go code snippet demonstrates how to register the gRPC server reflection service on a newly created gRPC server instance. It imports the necessary `reflection` package and calls `reflection.Register` with the server instance (`s`) before starting the server with `s.Serve(lis)`. This enables clients to query the server about its available services.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/grpc/reflection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport \"google.golang.org/grpc/reflection\"\n\ns := grpc.NewServer()\npb.RegisterYourOwnServer(s, &server{})\n\n// Register reflection service on gRPC server.\nreflection.Register(s)\n\ns.Serve(lis)\n```\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Application Template by ID using Go SDK\nDESCRIPTION: Illustrates how to retrieve a specific application template from Microsoft Graph using its ID. It involves creating a context, constructing the template ID using `NewApplicationTemplateID`, calling the `GetApplicationTemplate` method with default options, handling potential errors, and processing the returned model if successful.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := applicationtemplate.NewApplicationTemplateID(\"applicationTemplateId\")\n\nread, err := client.GetApplicationTemplate(ctx, id, applicationtemplate.DefaultGetApplicationTemplateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Application with ApplicationClient.Restore in Go\nDESCRIPTION: Demonstrates how to restore a previously deleted application using Restore. Requires context, application ID, and default options, yielding a model of the restored application on success. Useful for recovery scenarios.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.Restore(ctx, id, application.DefaultRestoreOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Logout and Login Command for Role Refresh\nDESCRIPTION: Shell commands to sign out and sign back into Azure CLI to refresh authentication tokens after role assignments. The --allow-no-subscriptions flag enables authentication without requiring an Azure subscription.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/service_principal_configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ az logout\n$ az login --allow-no-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects of an Application with ApplicationClient.GetMemberObjects in Go\nDESCRIPTION: Illustrates retrieving all directory object memberships for an application using GetMemberObjectsComplete, supporting batched pagination. Requires context, application ID, and a GetMemberObjectsRequest payload. Items returned represent objects the application is a member of.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.GetMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberObjects(ctx, id, payload, application.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, application.DefaultGetMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Key to an Application with ApplicationClient.AddKey - Go\nDESCRIPTION: This example shows how to use ApplicationClient to add a cryptographic key to an existing application. It constructs an AddKeyRequest payload and calls AddKey, handling errors and processing the resulting model. Requires the ApplicationClient, application ID, and properly formed request object.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.AddKeyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.AddKey(ctx, id, payload, application.DefaultAddKeyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ServicePrincipalClient - Go\nDESCRIPTION: This snippet shows how to instantiate a ServicePrincipalClient for communicating with Microsoft Graph, specifying the base URI, and assigning an Authorizer for authentication. The authorizer is a critical prerequisite and must be properly configured before any SDK API calls are made. Outputs a configured client ready for API operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := serviceprincipal.NewServicePrincipalClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Authenticating using OIDC with go-azure-sdk (Go)\nDESCRIPTION: Demonstrates generic OIDC authentication with Azure APIs, using an assertion token. Sets EnableAuthenticationUsingOIDC to true and provides the OIDCAssertionToken value in the credentials struct. This method is designed for scenarios where a raw OIDC token is available for authentication purposes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                   environment,\\n\\t\\tEnableAuthenticationUsingOIDC: true,\\n\\t\\tOIDCAssertionToken:            \\\"some-token\\\",\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Service Principal - Go\nDESCRIPTION: Restores a previously deleted AzureAD service principal by invoking the Restore operation with the principal's ID and default options. Typical use-case is to recover accidentally deleted identities. Required inputs are context and service principal ID; outputs are the restored object or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\nread, err := client.Restore(ctx, id, serviceprincipal.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Optional Claims in Terraform\nDESCRIPTION: This command shows how to import an existing Azure AD application optional claims configuration into Terraform state using the application's object ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_optional_claims.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_optional_claims.example /applications/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating an Azure AD Group using GroupClient in Go\nDESCRIPTION: This snippet demonstrates updating properties of an Azure AD group using the `UpdateGroup` method of a `GroupClient`. It requires a context, the group ID, and a `group.Group` payload containing the updated properties. Default update options are used, and standard error/response handling is shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.Group{\n\t// ...\n}\n\n\nread, err := client.UpdateGroup(ctx, id, payload, group.DefaultUpdateGroupOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Owner in Terraform\nDESCRIPTION: Shell command for importing an existing application owner relationship into Terraform state. This uses the object ID of both the application and the owner in the import path.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_owner.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_owner.example /applications/00000000-0000-0000-0000-000000000000/owners/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Example Output of go-hclog Logger with Fixed Context\nDESCRIPTION: This shows the log output from a logger created using `.With()`. The automatically included key-value pair (`request=...`) is appended to the log message along with the hierarchical logger name (`my-app.transport`).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [INFO ] my-app.transport: we are transporting a request: request=5fb446b6-6eba-821d-df1b-cd7501b6a363\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Member Groups for a Directory Role Template in Go\nDESCRIPTION: This example demonstrates how to use the `CheckMemberGroupsComplete` method to check specified group memberships for a directory role template. It requires a context, the template ID, and a `CheckMemberGroupsRequest` payload. The `Complete` variant handles pagination automatically to retrieve all results; a non-paginated version (`CheckMemberGroups`) is also available.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\npayload := directoryroletemplate.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, directoryroletemplate.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, directoryroletemplate.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Application Object Membership with ApplicationClient.CheckMemberObjects in Go\nDESCRIPTION: Demonstrates checking object memberships for an application using CheckMemberObjectsComplete to process results via batched pagination. Requires a context, application ID, and a CheckMemberObjectsRequest payload. Iterates over resulting items to handle object relationships.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.CheckMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberObjects(ctx, id, payload, application.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, application.DefaultCheckMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AzureAD Provider to 1.5.x Versions in Terraform Configuration\nDESCRIPTION: This snippet demonstrates how to pin the AzureAD provider to any 1.5.x version in the Terraform configuration using the required_providers block.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 1.5.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Total User Count using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to use `UserClient.GetsCount` to retrieve the total count of user objects in the directory. Requires a context and uses default options, potentially supporting filtering via options. Includes error handling and accessing the count from the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, user.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Service Principals - Go\nDESCRIPTION: Enumerates all service principals available to the client with support for complete (batched) pagination. Requires only the context and default operation options. Returns a sequence of service principal objects, ready for bulk processing or audit.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListServicePrincipals(ctx, serviceprincipal.DefaultListServicePrincipalsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListServicePrincipalsComplete(ctx, serviceprincipal.DefaultListServicePrincipalsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Domain by ID via DomainClient in Go\nDESCRIPTION: This code retrieves a domain using its ID by calling the GetDomain method with context and operation options. It checks for errors, then processes the returned model if available. Dependencies include an initialized domain client and a valid domain ID. The returned model contains the domain details queried by the operation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\nread, err := client.GetDomain(ctx, id, domain.DefaultGetDomainOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Password from a Service Principal - Go\nDESCRIPTION: Deletes an existing password from a specified service principal by preparing and sending a RemovePasswordRequest. Demonstrates critical credential hygiene procedures. Inputs are context, service principal ID, and the removal request payload; result is a response model or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.RemovePasswordRequest{\n\t// ...\n}\n\n\nread, err := client.RemovePassword(ctx, id, payload, serviceprincipal.DefaultRemovePasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GetsUserOwnedObject for a Service Principal - Go\nDESCRIPTION: Demonstrates how to use ServicePrincipalClient to create a GetsUserOwnedObject, requiring a context and the specific request payload structure. Error handling logic and use of the result model object are shown. This is relevant for advanced scenarios around user-owned objects within Azure AD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := serviceprincipal.CreateGetsUserOwnedObjectRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateGetsUserOwnedObject(ctx, payload, serviceprincipal.DefaultCreateGetsUserOwnedObjectOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Service Provisioning for an Azure AD Group using GroupClient in Go\nDESCRIPTION: This snippet illustrates how to retry service provisioning for an Azure AD group using the `RetryServiceProvisioning` method of a `GroupClient`. It needs a context, the group ID, and employs default options for the retry operation. The example includes error checking and response model handling.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.RetryServiceProvisioning(ctx, id, group.DefaultRetryServiceProvisioningOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Entitlement Management Access Package Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize the `EntitlementManagementAccessPackageClient`. It creates a new client instance configured with the base URI for Microsoft Graph and assigns an authorizer (presumably an OAuth2 token source or similar) for handling authentication.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nclient := entitlementmanagementaccesspackage.NewEntitlementManagementAccessPackageClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Total User Count using Go SDK\nDESCRIPTION: This example shows how to get the total count of users in the directory using `UserClient.GetsCount`. It requires only a `context`. This typically uses the `$count` OData query parameter.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, user.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Application Template Client in Go\nDESCRIPTION: Demonstrates how to initialize a new `ApplicationTemplateClient` using a specific base URI (Microsoft Graph endpoint). It also shows setting an authorizer on the underlying client, which is necessary for authenticating requests to the Microsoft Graph API.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := applicationtemplate.NewApplicationTemplateClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Listing All Applications with Pagination using ApplicationClient.ListApplicationsComplete - Go\nDESCRIPTION: Shows how to list all applications in the tenant with paged results using ListApplicationsComplete. The code initializes context and iterates over returned application items. Useful for synchronization, backup, or reporting tasks that require fetching many app objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\n// alternatively `client.ListApplications(ctx, application.DefaultListApplicationsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListApplicationsComplete(ctx, application.DefaultListApplicationsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Marshalling and Unmarshalling Structs with MessagePack - Go\nDESCRIPTION: Demonstrates how to marshal a Go struct into MessagePack bytes and then unmarshal it back using the msgpack/v5 library. Shows the definition of a sample struct, marshaling with msgpack.Marshal, and unmarshalling with msgpack.Unmarshal. Requires the \"github.com/vmihailenco/msgpack/v5\" import and appropriate error handling. Input: Go struct; Output: serialized []byte and reconstructed struct.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/vmihailenco/msgpack/v5\"\n\nfunc ExampleMarshal() {\n    type Item struct {\n        Foo string\n    }\n\n    b, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n    if err != nil {\n        panic(err)\n    }\n\n    var item Item\n    err = msgpack.Unmarshal(b, &item)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(item.Foo)\n    // Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Application with ApplicationClient.DeleteApplication in Go\nDESCRIPTION: Provides an example of deleting an application using DeleteApplication. Takes a context, application ID, and default operation options, returning a model or error. The method performs a permanent deletion; ensure correct application ID before executing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.DeleteApplication(ctx, id, application.DefaultDeleteApplicationOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring an Administrative Unit via Client in Go\nDESCRIPTION: Shows usage of Restore to undelete an administrative unit by passing its ID and a RestoreRequest payload. Handles response and error checking and, if successful, provides access to the resulting object model to finalize or validate the restoration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.RestoreRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.Restore(ctx, id, payload, administrativeunit.DefaultRestoreOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from a Service Principal - Go\nDESCRIPTION: Removes a cryptographic key associated with a service principal by submitting a RemoveKeyRequest. Inputs include context, the service principal ID, and payload with removal details. Upon completion, the response provides post-removal details; on failure, errors are handled.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.RemoveKeyRequest{\n\t// ...\n}\n\n\nread, err := client.RemoveKey(ctx, id, payload, serviceprincipal.DefaultRemoveKeyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain via DomainClient in Go\nDESCRIPTION: This snippet deletes a domain by initializing a context, a domain ID, and calling the DeleteDomain method with default operation options. It handles errors and inspects the model in the returned response object. The operation depends on a valid DomainClient and domain ID. Success is typically indicated by a non-nil model in the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\nread, err := client.DeleteDomain(ctx, id, domain.DefaultDeleteDomainOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User using Go SDK\nDESCRIPTION: This snippet demonstrates how to delete a user from Azure AD using the `UserClient.DeleteUser` method. It requires a `context` and the `UserID` of the user to be deleted. Handle the error to confirm successful deletion.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.DeleteUser(ctx, id, user.DefaultDeleteUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups with Pagination using ApplicationClient.GetMemberGroupsComplete - Go\nDESCRIPTION: This example retrieves all groups of which the specified application is a member, supporting batched pagination via GetMemberGroupsComplete. Builds a GetMemberGroupsRequest and iterates over retrieved group items. Requires application ID and context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.GetMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberGroups(ctx, id, payload, application.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, application.DefaultGetMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User's Object Membership using Go SDK\nDESCRIPTION: This snippet shows how to check a user's membership in specified directory objects (like groups or administrative units) using `UserClient.CheckMemberObjectsComplete`. It takes a `context`, `UserID`, and a `CheckMemberObjectsRequest` payload with object IDs. The `Complete` method handles pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, user.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, user.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Application Count with ApplicationClient.GetsCount in Go\nDESCRIPTION: Retrieves the count of application objects using GetsCount. Requires a context and default operation options. Returns a response model with the count or an error. Useful for metrics or automation verification.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\nread, err := client.GetsCount(ctx, application.DefaultGetsCountOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a License to the Current User with MeClient.AssignLicense - Go\nDESCRIPTION: This example sends a request using MeClient.AssignLicense to assign a license to the authenticated user. It constructs an AssignLicenseRequest payload and uses context for request scoping. On success, a response model is available for additional processing. Requires a configured MeClient, context, and properly structured payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.AssignLicenseRequest{\n\t// ...\n}\n\n\nread, err := client.AssignLicense(ctx, payload, me.DefaultAssignLicenseOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Azure AD Directory Object Type by ID in Terraform\nDESCRIPTION: Demonstrates how to use the azuread_directory_object data source to query an Azure AD object by its ID and output its type. This snippet shows defining the data source with an object_id parameter and accessing the returned type attribute.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/directory_object.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_directory_object\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\noutput \"object_type\" {\n  value = data.azuread_directory_object.example.type\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mail-Enabled Azure AD Groups\nDESCRIPTION: Retrieves all mail-enabled Azure AD groups by combining mail_enabled and return_all filters.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/groups.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_groups\" \"mail_enabled\" {\n  mail_enabled = true\n  return_all   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Objects with Pagination using ApplicationClient.CheckMemberObjectsComplete - Go\nDESCRIPTION: This example demonstrates checking object (such as users or groups) memberships for an application, using pagination via CheckMemberObjectsComplete. It prepares the request and iterates over the returned items. Requires an application ID and CheckMemberObjectsRequest.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.CheckMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberObjects(ctx, id, payload, application.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, application.DefaultCheckMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups of an Application with ApplicationClient.GetMemberGroups in Go\nDESCRIPTION: Shows how to get all group memberships for an application, using GetMemberGroupsComplete for batched pagination. Requires context, application ID, and a GetMemberGroupsRequest payload; the code iterates through resulting group items. Useful for auditing membership or permissions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.GetMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberGroups(ctx, id, payload, application.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, application.DefaultGetMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects of a Service Principal - Go\nDESCRIPTION: Obtains all object memberships for a specific service principal, using a GetMemberObjectsRequest with support for batched pagination. Should be used for tracking user or principal relationships. Takes context, service principal ID, and request input, and outputs an item list or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, serviceprincipal.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, serviceprincipal.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Count of Service Principals - Go\nDESCRIPTION: Returns a count of all service principal entities accessible via the client. The operation does not require a specific service principal ID, just context and operation options. The response contains the count in the model or details an error if the operation fails.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, serviceprincipal.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Directory Object by ID via Go SDK\nDESCRIPTION: This snippet shows usage of DirectoryObjectClient.GetDirectoryObject to fetch a directory object via its unique ID. The function requires context and operation options, returning a model for further inspection. Typical error and null checks for the response model are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\nread, err := client.GetDirectoryObject(ctx, id, directoryobject.DefaultGetDirectoryObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Verified Publisher for an Application with ApplicationClient.SetVerifiedPublisher in Go\nDESCRIPTION: Explains how to assign a verified publisher to an application using SetVerifiedPublisher. Inputs are context, application ID, SetVerifiedPublisherRequest payload, and default operation options. Returns response model with publisher validation or error info.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.SetVerifiedPublisherRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.SetVerifiedPublisher(ctx, id, payload, application.DefaultSetVerifiedPublisherOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Wiping Managed App Registrations by Device Tag in Go\nDESCRIPTION: Example demonstrating how to wipe managed application registrations by device tag for a specific user. The code creates a user ID object, constructs a WipeManagedAppRegistrationsByDeviceTagRequest payload, and calls the WipeManagedAppRegistrationsByDeviceTag method.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.WipeManagedAppRegistrationsByDeviceTagRequest{\n\t// ...\n}\n\n\nread, err := client.WipeManagedAppRegistrationsByDeviceTag(ctx, id, payload, user.DefaultWipeManagedAppRegistrationsByDeviceTagOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory Role in Go\nDESCRIPTION: This Go code demonstrates creating a new directory role using the `CreateDirectoryRole` method. It takes a context and a `DirectoryRole` struct containing the details of the role to be created. The response includes the created role object.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryrole.DirectoryRole{\n\t// ...\n}\n\n\nread, err := client.CreateDirectoryRole(ctx, payload, directoryrole.DefaultCreateDirectoryRoleOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Objects for a Service Principal - Go\nDESCRIPTION: Shows how to call ServicePrincipalClient.CheckMemberObjects to retrieve member objects for a given service principal, using a context, service principal ID, and payload. Demonstrates batched pagination and result iteration, allowing for the processing of each retrieved item. Error handling follows standard Go idioms.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.CheckMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberObjects(ctx, id, payload, serviceprincipal.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, serviceprincipal.DefaultCheckMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating SynchronizationJob Credentials in Go\nDESCRIPTION: Shows how to validate the credentials configured for a specific synchronization job using the `ValidateSynchronizationJobCredentials` method. It requires a context, a composite ID, a payload containing details for validation (e.g., application identifier, secrets), and operation options. The validation result is in `read.Model`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\npayload := synchronizationjob.ValidateSynchronizationJobCredentialsRequest{\n\t// ...\n}\n\n\nread, err := client.ValidateSynchronizationJobCredentials(ctx, id, payload, synchronizationjob.DefaultValidateSynchronizationJobCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Groups by Display Name Prefix\nDESCRIPTION: Retrieves all Azure AD groups that have a display name starting with the specified prefix 'sales-'.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/groups.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_groups\" \"sales\" {\n  display_name_prefix = \"sales-\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version 0.7.0\nDESCRIPTION: Release notes for version 0.7.0 highlighting provider improvements and feature updates.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.0 (November 15, 2019)\n\nIMPROVEMENTS:\n\n* provider: migrate to standalone plugin SDK v1.1.0\n* provider: using the current version of Terraform Core in user agents\n* `azuread_application` - adds ability to build homepage with HTTP in addition to HTTPS\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateSubscribeByMail in Go\nDESCRIPTION: This example shows how to subscribe the current user to a group by email using the `CreateSubscribeByMail` method. It requires a `context` and the `groupID` of the target group. Standard error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.CreateSubscribeByMail(ctx, id, group.DefaultCreateSubscribeByMailOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Service Principals by IDs - Go\nDESCRIPTION: Retrieves a list of service principal objects by their IDs, passing a ListGetsByIdsRequest. Supports batch pagination. Accepts context and the request payload, returns a slice of service principals or an error for each operation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := serviceprincipal.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, serviceprincipal.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, serviceprincipal.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Application Properties with ApplicationClient.CreateValidatesProperty in Go\nDESCRIPTION: Demonstrates validating application properties using the CreateValidatesProperty method. Accepts a context and CreateValidatesPropertyRequest payload and default operation options as parameters, returning a response model with validation results or errors. Requires a property object for payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.CreateValidatesPropertyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateValidatesProperty(ctx, payload, application.DefaultCreateValidatesPropertyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Mail Tips using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to use `UserClient.GetMailTipsComplete` to retrieve MailTips for a specific user regarding potential recipients. Requires context, the `UserID`, and a `GetMailTipsRequest` payload (specifying recipients). The `Complete` function handles pagination, returning a slice of MailTip items. An alternative `GetMailTips` method allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMailTipsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMailTips(ctx, id, payload, user.DefaultGetMailTipsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMailTipsComplete(ctx, id, payload, user.DefaultGetMailTipsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating using Managed Identity with go-azure-sdk (Go)\nDESCRIPTION: Illustrates using an Azure Managed Identity for authenticating API calls. EnableAuthenticatingUsingManagedIdentity is set to true in the credentials. Suitable for applications running within Azure that have managed identities enabled with appropriate resource access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                              environment,\\n\\t\\tEnableAuthenticatingUsingManagedIdentity: true,\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating using Azure CLI with go-azure-sdk (Go)\nDESCRIPTION: Demonstrates how to authenticate Azure API calls using credentials from the Azure CLI with the hashicorp/go-azure-sdk library. Requires the Azure CLI to be installed and authenticated. Sets EnableAuthenticatingUsingAzureCLI to true in the auth.Credentials struct and creates an authorizer for the environment's MSGraph endpoint.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                       environment,\\n\\t\\tEnableAuthenticatingUsingAzureCLI: true,\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Service Principal - Go\nDESCRIPTION: Deletes an existing AzureAD service principal by ID. Demonstrates error handling and confirms deletion via response. Requires context, service principal ID, and the default operation options. Output is an operation result or an error if deletion fails.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\nread, err := client.DeleteServicePrincipal(ctx, id, serviceprincipal.DefaultDeleteServicePrincipalOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Application Password with ApplicationClient.RemovePassword in Go\nDESCRIPTION: Shows how to remove a password credential from an application with RemovePassword. Accepts a context, application ID, RemovePasswordRequest payload, and uses default options. Returns a model response indicating updated credential state.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.RemovePasswordRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.RemovePassword(ctx, id, payload, application.DefaultRemovePasswordOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Meeting Times using Go SDK\nDESCRIPTION: This example shows how to find meeting time slots that satisfy specified constraints using `UserClient.FindMeetingTimes`. It needs a `context`, the `UserID` (presumably of the organizer or a relevant user), and a `FindMeetingTimesRequest` payload detailing attendees, time constraints, and duration. The response suggests suitable meeting times.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.FindMeetingTimesRequest{\n\t// ...\n}\n\n\nread, err := client.FindMeetingTimes(ctx, id, payload, user.DefaultFindMeetingTimesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Properties for a Directory Role in Go\nDESCRIPTION: This Go snippet illustrates how to use the `CreateValidatesProperty` method. This likely involves validating specific property values potentially before creating or updating a directory role, based on the `CreateValidatesPropertyRequest` payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryrole.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, directoryrole.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups for User with MeClient.GetMemberGroupsComplete - Go\nDESCRIPTION: This code calls MeClient.GetMemberGroupsComplete for full enumeration of groups to which the user belongs, using a GetMemberGroupsRequest. It includes error handling and iteration over paginated group listing. Useful for full group membership retrieval.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, payload, me.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, payload, me.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Administrative Unit with Terraform\nDESCRIPTION: Command for importing an existing Administrative Unit into Terraform state using its object ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_administrative_unit.example /directory/administrativeUnits/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Using errwrap.ContainsType with a Custom Go Wrapper Error\nDESCRIPTION: Shows how `errwrap.ContainsType` can be used with a custom error type (`AppError`) that implements the `errwrap.Wrapper` interface. An instance of `AppError` is created, wrapping a standard `fmt.Errorf`. The `errwrap.ContainsType` function successfully identifies the underlying `fmt.Errorf` type within the `AppError` because `AppError` implements `WrappedErrors()`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Directory Objects via Go SDK\nDESCRIPTION: Demonstrates fetching a count of directory objects in Microsoft Graph using DirectoryObjectClient.GetsCount. Requires a context and operation options. The result may contain a count model which is checked for existence after error handling.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, directoryobject.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 0.2.0\nDESCRIPTION: Changelog entry for version 0.2.0 of the Azure AD Terraform provider, documenting new data sources, resources, dependency updates and improvements.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0 (March 12, 2019)\n\nFEATURES:\n\n* **New Data Source:** `azuread_domains` ([#27](https://github.com/hashicorp/terraform-provider-azuread/issues/27))\n* **New Data Source:** `azuread_group` ([#14](https://github.com/hashicorp/terraform-provider-azuread/issues/14))\n* **New Resource:** `azuread_group` ([#14](https://github.com/hashicorp/terraform-provider-azuread/issues/14))\n\nIMPROVEMENTS:\n\n* dependencies: switching to use Go Modules ([#26](https://github.com/hashicorp/terraform-provider-azuread/issues/26))\n* dependencies: updating `github.com/Azure/azure-sdk-for-go` to v24.1.0 ([#25](https://github.com/hashicorp/terraform-provider-azuread/issues/25))\n* dependencies: updating `github.com/Azure/go-autorest` to v11.2.8 ([#24](https://github.com/hashicorp/terraform-provider-azuread/issues/24))\n* validation: adding validation to all fields ([#30](https://github.com/hashicorp/terraform-provider-azuread/issues/30))\n* `azuread_application` - support for `required_resource_access` property ([#23](https://github.com/hashicorp/terraform-provider-azuread/issues/23))\n* `azuread_service_principal` - support for the `tags` property ([#31](https://github.com/hashicorp/terraform-provider-azuread/issues/31))\n* `azuread_service_principal_password` - support for realitive ends dates with the `end_date_relative` property ([#53](https://github.com/hashicorp/terraform-provider-azuread/issues/53))\n\nBUG FIXES:\n\n* `azuread_application` - correctly reading back the `reply_urls` property into state ([#21](https://github.com/hashicorp/terraform-provider-azuread/issues/21))\n```\n\n----------------------------------------\n\nTITLE: Adding a Token Signing Certificate to a Service Principal - Go\nDESCRIPTION: Adds a token signing certificate to an AzureAD service principal using AddTokenSigningCertificateRequest. The snippet demonstrates error handling and response processing after issuing the request. Requires context, a service principal ID, and a constructed request payload. Returns a response with the certificate model if the operation succeeds.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.AddTokenSigningCertificateRequest{\n\t// ...\n}\n\n\nread, err := client.AddTokenSigningCertificate(ctx, id, payload, serviceprincipal.DefaultAddTokenSigningCertificateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Applications by IDs with Pagination using ApplicationClient.ListGetsByIdsComplete - Go\nDESCRIPTION: This fragment demonstrates how to retrieve multiple applications by specific IDs using ListGetsByIdsComplete. It accepts a ListGetsByIdsRequest payload and iterates over each fetched item. Required for batch lookup or migrations where multiple apps are involved.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.ListGetsByIdsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.ListGetsByIds(ctx, payload, application.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListGetsByIdsComplete(ctx, payload, application.DefaultListGetsByIdsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Owned Objects using Go SDK\nDESCRIPTION: This example shows how to retrieve directory objects owned by a user using the `UserClient.CreateGetsUserOwnedObject` method. It requires a `context` and a `CreateGetsUserOwnedObjectRequest` payload specifying the user ID or principal name. The response contains the owned objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.CreateGetsUserOwnedObjectRequest{\n\t// ...\n}\n\n\nread, err := client.CreateGetsUserOwnedObject(ctx, payload, user.DefaultCreateGetsUserOwnedObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Strength Policy via Go SDK\nDESCRIPTION: This snippet demonstrates creating a new authentication strength policy using the Go SDK's CreateAuthenticationStrengthPolicy method. It constructs a payload of type 'AuthenticationStrengthPolicy', sends the request with a context and default options, and checks for errors or valid model responses. Dependencies include the SDK, an initialized client, and defined payload fields. The operation expects a filled policy struct as input and returns the created policy if successful.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\n\npayload := authenticationstrengthpolicy.AuthenticationStrengthPolicy{\n\t// ...\n}\n\n\nread, err := client.CreateAuthenticationStrengthPolicy(ctx, payload, authenticationstrengthpolicy.DefaultCreateAuthenticationStrengthPolicyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory Role Template in Go\nDESCRIPTION: This snippet demonstrates creating a new directory role template using the `CreateDirectoryRoleTemplate` method. It requires a context and a `DirectoryRoleTemplate` payload containing the template details. The method returns the created template object or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryroletemplate.DirectoryRoleTemplate{\n\t// ...\n}\n\n\nread, err := client.CreateDirectoryRoleTemplate(ctx, payload, directoryroletemplate.DefaultCreateDirectoryRoleTemplateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User's Group Membership using Go SDK\nDESCRIPTION: This example demonstrates checking a user's membership in specified groups using `UserClient.CheckMemberGroupsComplete`. It requires a `context`, `UserID`, and a `CheckMemberGroupsRequest` payload listing group IDs. The `Complete` version handles pagination automatically, returning a slice of results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, user.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, user.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Cloud Environment via Azure CLI (shell)\nDESCRIPTION: Shows how to configure the Azure CLI to target specific Azure clouds (China, German, Government) using the `az cloud set` command. This is necessary to ensure authentication requests are directed to the correct regional endpoints when working outside the default public Azure cloud. Requires Azure CLI installation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ az cloud set --name AzureChinaCloud|AzureGermanCloud|AzureUSGovernment\n```\n\n----------------------------------------\n\nTITLE: Checking Member Groups for a Service Principal - Go\nDESCRIPTION: Illustrates calling ServicePrincipalClient.CheckMemberGroups to query the member groups of a service principal. Includes payload preparation and error handling, plus demonstrates batched pagination via the Complete variant. Key parameters are context, principal ID, and a request with relevant group data. Iteration over items is shown for processing results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.CheckMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberGroups(ctx, id, payload, serviceprincipal.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, serviceprincipal.DefaultCheckMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Members of a Directory Role in Go\nDESCRIPTION: This Go code shows how to get the group members of a specific directory role using `GetMemberGroupsComplete`. It needs a context, the role's `DirectoryRoleID`, and a `GetMemberGroupsRequest` payload. The `...Complete` variant automatically handles pagination to retrieve all member groups.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\npayload := directoryrole.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, directoryrole.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, directoryrole.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 0.1.0\nDESCRIPTION: Initial release changelog entry documenting the first version of the Azure AD Terraform provider with core application and service principal functionality.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (January 09, 2019)\n\nInitial release of the Azure Active Directory provider - featuring resources split out from the AzureRM Provider.\n\nFEATURES:\n\n* New Data Source: `azuread_application`\n* New Data Source: `azuread_service_principal`\n* New Resource: `azuread_application`\n* New Resource: `azuread_service_principal`\n* New Resource: `azuread_service_principal_password`\n```\n\n----------------------------------------\n\nTITLE: Getting User Object Memberships using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates using `UserClient.GetMemberObjectsComplete` to retrieve a list of groups, administrative units, or directory roles that a user is a member of. Requires context, `UserID`, and a `GetMemberObjectsRequest` payload (potentially for filtering). The `Complete` variant handles pagination, returning a slice of object IDs. An alternative `GetMemberObjects` method allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, user.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, user.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Gets for Service Principals - Go\nDESCRIPTION: Shows how to invoke the ServicePrincipalClient.GetsCount function to compute a count metric, requiring only a context and optional operation options. Standard error and model checking permit access to the returned count from the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\nread, err := client.GetsCount(ctx, serviceprincipal.DefaultGetsCountOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Service Provisioning with MeClient.RetryServiceProvisioning - Go\nDESCRIPTION: This code snippet demonstrates how to retry provisioning Microsoft services for the current user using MeClient.RetryServiceProvisioning. No request payload is required; it uses context and handles the operation's result via the response model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.RetryServiceProvisioning(ctx, me.DefaultRetryServiceProvisioningOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Applications Count with ApplicationClient.GetsCount - Go\nDESCRIPTION: This snippet demonstrates how to retrieve the total count of applications using the GetsCount method of ApplicationClient. It does not require any parameters beyond context, and accesses the returned model upon successful completion. This is useful for reporting and inventory operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\nread, err := client.GetsCount(ctx, application.DefaultGetsCountOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Service Principal Extension Properties - Go\nDESCRIPTION: Lists available extension properties for service principals by creating and passing the ListGetsAvailableExtensionPropertiesRequest. Supports complete pagination for large result sets. Input is context and the request payload; outputs include an iterable of extension properties or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := serviceprincipal.ListGetsAvailableExtensionPropertiesRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, serviceprincipal.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, serviceprincipal.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Azure AD Users with Pagination in Go\nDESCRIPTION: Example demonstrating how to list Azure AD users with complete pagination. The code shows retrieving all users through the ListUsersComplete method and iterating through the results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListUsers(ctx, user.DefaultListUsersOperationOptions())` can be used to do batched pagination\nitems, err := client.ListUsersComplete(ctx, user.DefaultListUsersOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Reprocessing User License Assignments using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates calling `UserClient.ReprocessLicenseAssignment` to reprocess license assignments for a user, typically to resolve assignment errors. Requires context and the `UserID` of the target user. Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.ReprocessLicenseAssignment(ctx, id, user.DefaultReprocessLicenseAssignmentOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a User Password using Go SDK\nDESCRIPTION: This example shows how to validate a password against the password validation policy for the tenant using `UserClient.CreateValidatesPassword`. It requires a `context` and a `CreateValidatesPasswordRequest` payload containing the password to validate. The response indicates if the password is valid.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.CreateValidatesPasswordRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesPassword(ctx, payload, user.DefaultCreateValidatesPasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New User using Go SDK\nDESCRIPTION: This snippet demonstrates how to create a new user in Azure AD using the `UserClient.CreateUser` method. It requires a `context` and a `user.User` payload object populated with the new user's properties (like display name, UPN, password profile, etc.). The response contains the created user object.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.User{\n\t// ...\n}\n\n\nread, err := client.CreateUser(ctx, payload, user.DefaultCreateUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail as the User with MeClient.SendMail - Go\nDESCRIPTION: This snippet shows how to send an email as the authenticated user via MeClient.SendMail, using a SendMailRequest payload. Handles success, errors, and processes the resulting response model. Requires setup of message fields in the payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.SendMailRequest{\n\t// ...\n}\n\n\nread, err := client.SendMail(ctx, payload, me.DefaultSendMailOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Single Sign-On Credentials for a Service Principal - Go\nDESCRIPTION: Shows how to call ServicePrincipalClient to add password SSO credentials to a service principal. The code requires a context, service principal ID, and details of the SSO credentials as payload. Error handling and model result processing are demonstrated, highlighting required parameter structures.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.CreatePasswordSingleSignOnCredentialsRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreatePasswordSingleSignOnCredentials(ctx, id, payload, serviceprincipal.DefaultCreatePasswordSingleSignOnCredentialsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects for User with MeClient.GetMemberObjectsComplete - Go\nDESCRIPTION: This snippet demonstrates listing all directory objects (such as groups, administrative units) associated with the user using MeClient.GetMemberObjectsComplete. It expects a GetMemberObjectsRequest payload and iterates the returned items for custom processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, payload, me.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, payload, me.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Domain Count via DomainClient in Go\nDESCRIPTION: This snippet invokes the GetsCount method on the domain client with context and default options to retrieve the total count of domains. Errors are handled and the returned model, which should contain the count result, is checked. Dependencies include the domain client and context. Response contains count information about domains present in the tenant.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, domain.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Synchronization Secret using SynchronizationSecretClient in Go\nDESCRIPTION: Demonstrates how to set or update a synchronization secret for a specific service principal using the SDK client. Requires a context, service principal ID, a properly structured request payload, and default operation options. Returns a response containing a model that can be utilized further; errors must be handled. Payload must conform to SetSynchronizationSecretRequest struct as defined in the SDK.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := synchronizationsecret.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := synchronizationsecret.SetSynchronizationSecretRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.SetSynchronizationSecret(ctx, id, payload, synchronizationsecret.DefaultSetSynchronizationSecretOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SynchronizationJob in Go\nDESCRIPTION: Demonstrates how to update an existing synchronization job using the `UpdateSynchronizationJob` method. It requires a context, a composite ID, a payload containing the updated job definition, and operation options. The updated job details are in `read.Model` upon success.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\npayload := synchronizationjob.SynchronizationJob{\n\t// ...\n}\n\n\nread, err := client.UpdateSynchronizationJob(ctx, id, payload, synchronizationjob.DefaultUpdateSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Groups with Pagination using ApplicationClient.CheckMemberGroupsComplete - Go\nDESCRIPTION: This snippet illustrates how to check an application's group memberships with support for batched pagination using CheckMemberGroupsComplete. It initializes the context, builds a CheckMemberGroupsRequest, and iterates through the resulting items. Dependencies include the client, application ID, and request payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.CheckMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberGroups(ctx, id, payload, application.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, application.DefaultCheckMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Verified Publisher for an Application using ApplicationClient.UnsetVerifiedPublisher - Go\nDESCRIPTION: Illustrates how to remove verified publisher information from an application with UnsetVerifiedPublisher. Requires the application ID and uses the default operation options. The resulting model indicates completion.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.UnsetVerifiedPublisher(ctx, id, application.DefaultUnsetVerifiedPublisherOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Administrative Unit via Client in Go\nDESCRIPTION: Shows how to create a new administrative unit using the CreateAdministrativeUnit method. Requires sending a populated AdministrativeUnit struct via context, with response handling for both errors and the resulting model. The payload needs required properties as per the API model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := administrativeunit.AdministrativeUnit{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateAdministrativeUnit(ctx, payload, administrativeunit.DefaultCreateAdministrativeUnitOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing User's Devices from Management using Microsoft Graph SDK in Go\nDESCRIPTION: Example of using `UserClient.RemoveAllDevicesFromManagement` to remove all devices associated with a specific user from management (e.g., Intune). Requires context and the `UserID`. Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RemoveAllDevicesFromManagement(ctx, id, user.DefaultRemoveAllDevicesFromManagementOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Wiping Managed App Registration by Device Tag for Azure AD User in Go\nDESCRIPTION: Example demonstrating how to wipe managed application registrations by device tag for a specific user. The code creates a user ID object, constructs a WipeManagedAppRegistrationByDeviceTagRequest payload, and calls the WipeManagedAppRegistrationByDeviceTag method.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.WipeManagedAppRegistrationByDeviceTagRequest{\n\t// ...\n}\n\n\nread, err := client.WipeManagedAppRegistrationByDeviceTag(ctx, id, payload, user.DefaultWipeManagedAppRegistrationByDeviceTagOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting an Export of Personal Data with MeClient.CreateExportPersonalData - Go\nDESCRIPTION: This example demonstrates sending an export personal data request for the current user via MeClient.CreateExportPersonalData. It requires a CreateExportPersonalDataRequest for payload. On completion, processes the resulting response model for user-exported data details.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.CreateExportPersonalDataRequest{\n\t// ...\n}\n\n\nread, err := client.CreateExportPersonalData(ctx, payload, me.DefaultCreateExportPersonalDataOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Object Membership using Go SDK\nDESCRIPTION: This snippet demonstrates retrieving the directory objects (like groups or administrative units) a user is a member of using `UserClient.GetMemberObjectsComplete`. It requires a `context`, `UserID`, and a `GetMemberObjectsRequest` payload. The `Complete` method handles pagination and returns the object IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, user.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, user.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Devices from Management with MeClient.RemoveAllDevicesFromManagement - Go\nDESCRIPTION: This code invokes MeClient.RemoveAllDevicesFromManagement to retire all devices managed under the authenticated user. The call uses only a context and operation options, and handles any resulting error or model object. No request payload is required.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.RemoveAllDevicesFromManagement(ctx, me.DefaultRemoveAllDevicesFromManagementOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Users with Terraform\nDESCRIPTION: Example showing how to query Azure AD users by their principal names using the azuread_users data source. Returns basic information for specified users.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/users.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_users\" \"users\" {\n  user_principal_names = [\"kat@hashicorp.com\", \"byte@hashicorp.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Access Package Resource Catalog Association in Terraform\nDESCRIPTION: Example command for importing an existing access package resource catalog association into Terraform state. The import ID uses a format specific to Terraform composed of the Catalog ID and Resource Origin ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_resource_catalog_association.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_access_package_resource_catalog_association.example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Plugging Color into Existing Code with github.com/fatih/color in Go\nDESCRIPTION: Shows how to use Set and Unset to enable colorized output for subsequent standard output calls. Demonstrates applying foreground color and style globally within a scope, and properly unsetting it afterwards using Unset or defer. Useful for quick adaptation of colored output in legacy or existing codebases. Requires github.com/fatih/color and usage of fmt for I/O.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Members of a Directory Role in Go\nDESCRIPTION: This Go example demonstrates fetching the directory object members (users, groups, service principals) of a specific directory role using `GetMemberObjectsComplete`. It requires a context, the role's `DirectoryRoleID`, and a `GetMemberObjectsRequest` payload. The `...Complete` function handles pagination automatically.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\npayload := directoryrole.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, directoryrole.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, directoryrole.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ApplicationClient with Authorizer - Go\nDESCRIPTION: This snippet demonstrates how to create a new ApplicationClient by specifying the base URI for Microsoft Graph and assigning an authorizer for authentication. Dependencies include the SDK package and an initialized authorizer. The client object enables subsequent Graph API interactions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := application.NewApplicationClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Authentication Strength Policy via Go SDK\nDESCRIPTION: This snippet illustrates retrieving a specific authentication strength policy by ID using the GetAuthenticationStrengthPolicy method. The policy ID is constructed, and the method is invoked with a context and default options. On success, the response model contains the policy details. The policy ID parameter must be valid and correspond to an existing policy.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\nid := authenticationstrengthpolicy.NewPolicyAuthenticationStrengthPolicyID(\"authenticationStrengthPolicyId\")\n\nread, err := client.GetAuthenticationStrengthPolicy(ctx, id, authenticationstrengthpolicy.DefaultGetAuthenticationStrengthPolicyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Sign-In Sessions with MeClient.RevokeSignInSessions - Go\nDESCRIPTION: This code revokes all sign-in sessions for the user by calling MeClient.RevokeSignInSessions. Only context and operation options are required. After execution, checks the returned model to verify session revocation. There are no additional parameters needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.RevokeSignInSessions(ctx, me.DefaultRevokeSignInSessionsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User SSO Credentials using Go SDK\nDESCRIPTION: This example shows how to delete password-based single sign-on credentials for a user using `UserClient.DeletePasswordSingleSignOnCredentials`. It requires a `context`, the `UserID`, and a `DeletePasswordSingleSignOnCredentialsRequest` payload specifying the credential ID to delete.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.DeletePasswordSingleSignOnCredentialsRequest{\n\t// ...\n}\n\n\nread, err := client.DeletePasswordSingleSignOnCredentials(ctx, id, payload, user.DefaultDeletePasswordSingleSignOnCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logic Operators in HCL\nDESCRIPTION: Shows the syntax for logic operators in HCL. These operators apply to boolean values and produce boolean results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\na && b   logical AND\na || b   logical OR\n!a       logical NOT\n```\n\n----------------------------------------\n\nTITLE: Updating User with UserClient in Go\nDESCRIPTION: Shows how to update a user's information using the UserClient. Includes error handling and response model processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.User{\n\t// ...\n}\n\n\nread, err := client.UpdateUser(ctx, id, payload, user.DefaultUpdateUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Provider to a Version Range (Patch) - Terraform HCL\nDESCRIPTION: This HCL snippet shows how to constrain the AzureAD provider to all patch versions compatible with 2.53.0 using the ~> operator. This ensures compatibility with bugfix updates but avoids major or minor version changes. Place this inside the root terraform configuration. No third-party modules or additional dependencies are required.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/3.0-upgrade-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.53.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting User Mail Tips using Go SDK\nDESCRIPTION: This snippet demonstrates retrieving mail tips for a user using `UserClient.GetMailTipsComplete`. It requires a `context`, the `UserID`, and a `GetMailTipsRequest` payload specifying recipients and desired tip types. The `Complete` method handles pagination and returns a list of mail tips.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMailTipsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMailTips(ctx, id, payload, user.DefaultGetMailTipsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMailTipsComplete(ctx, id, payload, user.DefaultGetMailTipsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Access Package into Terraform State\nDESCRIPTION: This command demonstrates how to import an existing Azure AD Access Package into Terraform state management using its unique ID. Replace the placeholder ID with the actual ID of the access package you wish to import. This associates the existing Azure resource with the `azuread_access_package.example_package` resource defined in your Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform import azuread_access_package.example_package 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Application Certificate into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD application certificate into Terraform's state management using the `terraform import` command. It requires the application's Object ID and the certificate's Key ID, combined in the specific format `application_object_id/certificate/certificate_key_id`. This allows Terraform to manage resources that were not originally created by it.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_certificate.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_certificate.example 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Querying Administrative Unit by Display Name in Terraform\nDESCRIPTION: Demonstrates how to look up an Azure AD Administrative Unit using its display name. This snippet shows the basic configuration needed to query an administrative unit's information.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/administrative_unit.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_administrative_unit\" \"example\" {\n  display_name = \"Example-AU\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting group_membership_claims from String to List - Terraform\nDESCRIPTION: This pair of snippets demonstrates the required syntax change for the group_membership_claims property in the Terraform AzureAD provider configuration: the property must now be defined as a list of strings rather than a single string. The example shows both the outdated (string) and corrected (list) form. No dependencies aside from Terraform v2.0+ and the AzureAD provider are required. The input property accepts one or more string values; outputs are reflected as resources' modified state.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\ngroup_membership_claims = \\\"All\\\"\\n\n```\n\nLANGUAGE: terraform\nCODE:\n```\ngroup_membership_claims = [\\\"All\\\"]\\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Directory Roles in Go\nDESCRIPTION: This Go code demonstrates listing directory roles using `ListDirectoryRolesComplete`. It requires a context and retrieves all directory roles, handling pagination automatically. The base `ListDirectoryRoles` method can be used for manual pagination control.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListDirectoryRoles(ctx, directoryrole.DefaultListDirectoryRolesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListDirectoryRolesComplete(ctx, directoryrole.DefaultListDirectoryRolesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups of a Service Principal - Go\nDESCRIPTION: Fetches all group memberships for a given service principal by constructing a GetMemberGroupsRequest and executing the operation with complete pagination. Inputs include context, the service principal ID, and the request; outputs are an iterable collection of groups or error. Essential for group-based access analysis.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, serviceprincipal.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, serviceprincipal.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Properties on a Directory Object via Go SDK\nDESCRIPTION: Demonstrates the use of DirectoryObjectClient.CreateValidatesProperty to submit a CreateValidatesPropertyRequest, validating directory object properties according to Microsoft Graph rules. After invocation, the response contains a model with validation results which can be processed further. Required dependencies include the Go SDK and valid payload structure; error and model existence are checked.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryobject.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, directoryobject.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Member Objects with MeClient.CheckMemberObjectsComplete - Go\nDESCRIPTION: This code uses MeClient.CheckMemberObjectsComplete to list all directory objects (groups, roles, etc.) the current user is a member of. The snippet highlights use of a request payload, error handling, and iteration over results. Designed for complete object membership enumeration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, payload, me.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, payload, me.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Microsoft Graph User SDK in Go\nDESCRIPTION: This snippet shows the necessary import path to include the stable version of the Microsoft Graph User SDK in a Go project. This package provides the types and functions needed to interact with the user endpoint of the Microsoft Graph API.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user\"\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted User using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to restore a recently deleted user object from the Azure AD recycle bin using `UserClient.Restore`. Requires context and the `UserID` (object ID) of the deleted user. Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.Restore(ctx, id, user.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning AzureAD Provider Version in Older Terraform Versions\nDESCRIPTION: For older Terraform versions (0.12.x), this snippet shows how to pin the AzureAD provider version using the version attribute within the provider block.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azuread\" {\n  version = \"~> 1.5.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Verified Publisher for an Application using ApplicationClient.SetVerifiedPublisher - Go\nDESCRIPTION: Explains how to configure the verified publisher of an application using the SetVerifiedPublisher method. Requires the application ID and SetVerifiedPublisherRequest payload. Success returns a model to confirm the publisher update.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.SetVerifiedPublisherRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.SetVerifiedPublisher(ctx, id, payload, application.DefaultSetVerifiedPublisherOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Named Location into Terraform State\nDESCRIPTION: Shows the shell command using `terraform import` to bring an existing Azure AD Named Location, identified by its unique resource ID (e.g., `/identity/conditionalAccess/namedLocations/00000000-0000-0000-0000-000000000000`), under Terraform management. The local Terraform resource name is `azuread_named_location.my_location`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/named_location.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_named_location.my_location /identity/conditionalAccess/namedLocations/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Basic Error Wrapping and Checking with errwrap in Go\nDESCRIPTION: Demonstrates the fundamental usage of the `errwrap` package. The `tryOpen` function simulates returning a wrapped error using `errwrap.Wrapf`. The `main` function shows how to check if an error contains a specific string (`errwrap.Contains`) or a specific type (`errwrap.ContainsType`), and how to extract an error of a specific type (`errwrap.GetType`). This pattern allows inspecting wrapped errors without losing the original error context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logutils Level-Based Logging in Go\nDESCRIPTION: This snippet demonstrates how to use the logutils package to filter log messages by severity level within a Go application. It creates a LevelFilter that accepts logs of level WARN or higher, directing output to standard error, and integrates it with the default log package via log.SetOutput. Requires the github.com/hashicorp/logutils package and assumes new levels are denoted in log messages by a bracketed prefix such as [DEBUG]. Inputs are ordinary log.Print statements; outputs are redirected to the filter, which excludes messages below the minimum threshold. Messages without a recognized level prefix are always printed, maintaining backward compatibility.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/logutils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\n\\t\\\"github.com/hashicorp/logutils\\\"\\n)\\n\\nfunc main() {\\n\\tfilter := &logutils.LevelFilter{\\n\\t\\tLevels: []logutils.LogLevel{\\\"DEBUG\\\", \\\"WARN\\\", \\\"ERROR\\\"},\\n\\t\\tMinLevel: logutils.LogLevel(\\\"WARN\\\"),\\n\\t\\tWriter: os.Stderr,\\n\\t}\\n\\tlog.SetOutput(filter)\\n\\n\\tlog.Print(\\\"[DEBUG] Debugging\\\") // this will not print\\n\\tlog.Print(\\\"[WARN] Warning\\\") // this will\\n\\tlog.Print(\\\"[ERROR] Erring\\\") // and so will this\\n\\tlog.Print(\\\"Message I haven't updated\\\") // and so will this\\n}\n```\n\n----------------------------------------\n\nTITLE: Printing with RGB Colors using github.com/fatih/color in Go\nDESCRIPTION: Illustrates how to print text with custom RGB foreground and background colors when the terminal supports 24-bit color. Uses color.RGB and color.BgRGB to set foreground and background colors respectively. Outputs are printed in custom colors, such as orange and red, depending on the provided RGB values. The color package must be installed and the terminal must support truecolor/24-bit colors.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ncolor.RGB(255, 128, 0).Println(\"foreground orange\")\ncolor.RGB(230, 42, 42).Println(\"foreground red\")\n\ncolor.BgRGB(255, 128, 0).Println(\"background orange\")\ncolor.BgRGB(230, 42, 42).Println(\"background red\")\n\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Directory Roles in Go\nDESCRIPTION: This Go snippet shows how to retrieve the total count of directory roles using the `GetsCount` method. It takes a context and returns the count, often used with OData `$count` queries.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, directoryrole.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD Directory Roles with Terraform\nDESCRIPTION: Example showing how to fetch all directory roles from Azure AD and output their object IDs. The data source requires no arguments but needs appropriate API permissions when using a service principal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/directory_roles.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_directory_roles\" \"current\" {}\n\noutput \"roles\" {\n  value = data.azuread_directory_roles.current.object_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the ServicePrincipal SDK Package - Go\nDESCRIPTION: This code snippet demonstrates how to import the ServicePrincipal SDK package required for making Microsoft Graph beta API calls. The import path points to the correct module, which must be present in your project dependencies (via go.mod). The SDK is necessary for all subsequent operations using ServicePrincipalClient.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal\\\"\n```\n\n----------------------------------------\n\nTITLE: Initializing the Microsoft Graph User Client in Go\nDESCRIPTION: Demonstrates how to initialize the `UserClient` for the Microsoft Graph User SDK. It requires specifying the base URI for the Microsoft Graph API and configuring an authorizer (e.g., for handling authentication tokens). The initialized client is used for subsequent API calls.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := user.NewUserClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Checking User Group Memberships using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to use the `UserClient.CheckMemberGroupsComplete` method to retrieve a list of group IDs that a specific user is a direct member of. It requires a context, the `UserID`, and a `CheckMemberGroupsRequest` payload (likely containing group IDs to check against). The `Complete` function handles pagination automatically, returning a slice of items. An alternative method (`CheckMemberGroups`) exists for manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, user.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, user.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the go-azure-sdk me Package - Go\nDESCRIPTION: This snippet demonstrates how to import the go-azure-sdk Microsoft Graph 'me' subpackage for use in Go projects. The import path references the stable API version. There are no additional dependencies beyond this package and the Go runtime.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comparison Operators in HCL\nDESCRIPTION: Shows the syntax for equality and numeric comparison operators in HCL. These operators produce boolean results by comparing two values.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\na == b  equal\na != b  not equal\n```\n\nLANGUAGE: hcl\nCODE:\n```\na < b   less than\na <= b  less than or equal to\na > b   greater than\na >= b  greater than or equal to\n```\n\n----------------------------------------\n\nTITLE: Changing a User's Password using Microsoft Graph SDK in Go\nDESCRIPTION: Illustrates how to call the `UserClient.ChangePassword` method to change the password for a specific user. It requires a context, the `UserID` of the target user, and a `ChangePasswordRequest` payload containing the current and new passwords. Standard error handling and response access are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.ChangePasswordRequest{\n\t// ...\n}\n\n\nread, err := client.ChangePassword(ctx, id, payload, user.DefaultChangePasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Checkpoint Through Environment Variable - Shell\nDESCRIPTION: Demonstrates how to disable the HashiCorp Checkpoint service by setting the CHECKPOINT_DISABLE environment variable to 1 when executing a command such as 'packer build'. This approach prevents the application from contacting the internal Checkpoint service. No other dependencies are required beyond a supported shell environment and the relevant HashiCorp tool.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-checkpoint/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nCHECKPOINT_DISABLE=1 packer build \n\n```\n\n----------------------------------------\n\nTITLE: Updating a Directory Object via Go SDK\nDESCRIPTION: Shows updating an existing directory object by ID using DirectoryObjectClient.UpdateDirectoryObject. The code constructs the required payload and manages error checking, returning the updated model if available. This approach makes use of the operation options and proper contextual setup for update requests within the Microsoft Graph context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\npayload := directoryobject.DirectoryObject{\n\t// ...\n}\n\n\nread, err := client.UpdateDirectoryObject(ctx, id, payload, directoryobject.DefaultUpdateDirectoryObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting User Personal Data using Go SDK\nDESCRIPTION: This snippet demonstrates initiating an export personal data request for a specific user via `UserClient.CreateExportPersonalData`. It requires a `context`, the `UserID`, and a `CreateExportPersonalDataRequest` payload specifying storage location. The response typically contains information about the export job.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.CreateExportPersonalDataRequest{\n\t// ...\n}\n\n\nread, err := client.CreateExportPersonalData(ctx, id, payload, user.DefaultCreateExportPersonalDataOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entitlement Management Access Package in Go\nDESCRIPTION: This snippet demonstrates deleting an access package using its ID with the `DeleteEntitlementManagementAccessPackage` method. It requires a context (`ctx`) and an `IdentityGovernanceEntitlementManagementAccessPackageID` constructed with the specific package ID. Basic error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := entitlementmanagementaccesspackage.NewIdentityGovernanceEntitlementManagementAccessPackageID(\"accessPackageId\")\n\nread, err := client.DeleteEntitlementManagementAccessPackage(ctx, id, entitlementmanagementaccesspackage.DefaultDeleteEntitlementManagementAccessPackageOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Application Template SDK Package in Go\nDESCRIPTION: Shows how to import the `applicationtemplate` package from the `hashicorp/go-azure-sdk` library to interact with Microsoft Graph Application Templates. This import is required before using any client or functions from the package.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate\"\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups for a Directory Object via Go SDK\nDESCRIPTION: Provides a pattern for enumerating all groups a directory object is a member of by using DirectoryObjectClient.GetMemberGroupsComplete. This involves context, the object's ID, and a GetMemberGroupsRequest payload to support pagination and batch retrievals. The output involves iteration over returned groups with caveats around error management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\npayload := directoryobject.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, directoryobject.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, directoryobject.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Object Membership for a Directory Role in Go\nDESCRIPTION: This Go snippet shows how to use the `CheckMemberObjectsComplete` method to check if specified directory objects (users, groups, service principals) are members of a given directory role. It requires a context, the directory role ID, and a `CheckMemberObjectsRequest` payload. The `...Complete` function automatically handles pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\npayload := directoryrole.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, directoryrole.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, directoryrole.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Entitlement Management Access Packages in Go\nDESCRIPTION: This snippet shows how to list entitlement management access packages. It highlights the `ListEntitlementManagementAccessPackagesComplete` helper function for retrieving all packages by handling pagination automatically. The alternative method (`ListEntitlementManagementAccessPackages`) for manual/batched pagination is also mentioned.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\n\n\n// alternatively `client.ListEntitlementManagementAccessPackages(ctx, entitlementmanagementaccesspackage.DefaultListEntitlementManagementAccessPackagesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListEntitlementManagementAccessPackagesComplete(ctx, entitlementmanagementaccesspackage.DefaultListEntitlementManagementAccessPackagesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting Password Single Sign-On Credentials from a Service Principal - Go\nDESCRIPTION: Demonstrates how to use ServicePrincipalClient to remove password SSO credentials for a specified service principal. Requires context, principal ID, and a DeletePasswordSingleSignOnCredentialsRequest payload. Standard error and response handling are used, and this function operates on a given SSO credential set.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.DeletePasswordSingleSignOnCredentialsRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.DeletePasswordSingleSignOnCredentials(ctx, id, payload, serviceprincipal.DefaultDeletePasswordSingleSignOnCredentialsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CreateUnsubscribeByMail in Go\nDESCRIPTION: This snippet demonstrates how to unsubscribe the current user from a group by email using the `CreateUnsubscribeByMail` method. It requires a `context` and the `groupID` of the target group. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.CreateUnsubscribeByMail(ctx, id, group.DefaultCreateUnsubscribeByMailOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CheckGrantedPermissionsForApps in Go\nDESCRIPTION: This example shows how to check the granted permissions for applications associated with a specific group using `CheckGrantedPermissionsForAppsComplete`. This helper function handles pagination automatically. It requires a `context` and `groupID`. The alternative `CheckGrantedPermissionsForApps` method can be used for manual batch pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\n// alternatively `client.CheckGrantedPermissionsForApps(ctx, id, group.DefaultCheckGrantedPermissionsForAppsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckGrantedPermissionsForAppsComplete(ctx, id, group.DefaultCheckGrantedPermissionsForAppsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a retryablehttp.Client to a Standard http.Client in Go\nDESCRIPTION: This snippet demonstrates how to create a custom retryablehttp.Client, configure its properties like the maximum number of retries (RetryMax), and then convert it into a standard Go *http.Client using the StandardClient() method. This allows easy integration with code expecting a standard HTTP client while retaining the retry functionality.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Deleting an Authentication Strength Policy via Go SDK\nDESCRIPTION: This snippet demonstrates deleting an existing authentication strength policy using the DeleteAuthenticationStrengthPolicy method of the Go SDK client. It shows how to construct a policy ID and invoke the delete request with default operation options. The ID must be set to a valid authentication strength policy identifier. The response allows post-deletion handling of the model or error processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\nid := authenticationstrengthpolicy.NewPolicyAuthenticationStrengthPolicyID(\"authenticationStrengthPolicyId\")\n\nread, err := client.DeleteAuthenticationStrengthPolicy(ctx, id, authenticationstrengthpolicy.DefaultDeleteAuthenticationStrengthPolicyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User SSO Credentials using Go SDK\nDESCRIPTION: This example shows retrieving a user's password-based single sign-on credentials using `UserClient.GetPasswordSingleSignOnCredentialsComplete`. It requires a `context` and the `UserID`. The `Complete` method handles pagination, returning a list of credential objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\n// alternatively `client.GetPasswordSingleSignOnCredentials(ctx, id, user.DefaultGetPasswordSingleSignOnCredentialsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetPasswordSingleSignOnCredentialsComplete(ctx, id, user.DefaultGetPasswordSingleSignOnCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure AD Access Package Catalog by ID\nDESCRIPTION: This snippet shows how to look up an access package catalog using its object ID. It provides a straightforward way to reference an existing catalog when you know its unique identifier.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package_catalog.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package_catalog\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CheckMemberGroups in Go\nDESCRIPTION: This snippet demonstrates checking the group memberships for a specific group using `CheckMemberGroupsComplete`. It requires a `context`, the `groupID`, and a `payload` of type `group.CheckMemberGroupsRequest`. The `Complete` function handles pagination; `CheckMemberGroups` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, group.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, group.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the DirectoryObject SDK Package in Go\nDESCRIPTION: Illustrates how to import the Microsoft Graph directoryobjects SDK into a Go module for subsequent usage. The import path targets the stable directoryobject package inside HashiCorp's go-azure-sdk repository. This import is a prerequisite for using any of the SDK's functionality around directory objects.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extension Properties for Directory Roles in Go\nDESCRIPTION: This Go snippet shows how to retrieve a list of available extension properties applicable to directory roles using `ListGetsAvailableExtensionPropertiesComplete`. It requires a context and a `ListGetsAvailableExtensionPropertiesRequest` payload. The `...Complete` function handles pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryrole.ListGetsAvailableExtensionPropertiesRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, directoryrole.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, directoryrole.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Synchronization Secret Count with SynchronizationSecretClient in Go\nDESCRIPTION: Uses the client to retrieve the count of synchronization secrets for a specific service principal. Requires a context, the service principal ID object, and default operation options. The expected output is a response object containing a model; developer should handle errors and process the returned model. Limitations include requirement for valid service principal ID and prior client initialization.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := synchronizationsecret.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\nread, err := client.GetSynchronizationSecretsCount(ctx, id, synchronizationsecret.DefaultGetSynchronizationSecretsCountOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Token Signing Certificate to a Service Principal - Go\nDESCRIPTION: Demonstrates how to use ServicePrincipalClient to add a token signing certificate to a service principal. Requires context, principal ID, and a request payload describing the certificate. Uses error handling and checks the returned model. This operation expects SDK types and a valid authorization context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\npayload := serviceprincipal.AddTokenSigningCertificateRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.AddTokenSigningCertificate(ctx, id, payload, serviceprincipal.DefaultAddTokenSigningCertificateOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Microsoft Graph via Environment Variable - PowerShell\nDESCRIPTION: This PowerShell snippet enables the Microsoft Graph beta feature for the AzureAD Terraform provider by setting an environment variable. This is particularly relevant in Windows or cross-platform scenarios where PowerShell is preferred. No other dependencies are required beyond access to the execution environment.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$env:AAD_USE_MICROSOFT_GRAPH = 1\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Function Call Syntax in EBNF\nDESCRIPTION: Provides the EBNF grammar for HCL function call expressions (`Identifier(...)`). It defines the structure for providing arguments (comma-separated expressions) and includes syntax for expanding a list or tuple into variadic arguments using the ellipsis (`...`) symbol.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_12\n\nLANGUAGE: ebnf\nCODE:\n```\nFunctionCall = Identifier \"(\" arguments \")\";\nArguments = (\n    () ||\n    (Expression (\",\" Expression)* (\",\" | \"...\")?)\n);\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.AssignLicense in Go\nDESCRIPTION: This snippet demonstrates assigning licenses to a specific group using the `AssignLicense` method. It requires a `context`, the `groupID`, and a `payload` of type `group.AssignLicenseRequest` containing the license details. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.AssignLicenseRequest{\n\t// ...\n}\n\n\nread, err := client.AssignLicense(ctx, id, payload, group.DefaultAssignLicenseOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in HCL Native Syntax\nDESCRIPTION: This HCL snippet demonstrates various inline expressions, such as arithmetic, string interpolation, and calling application-provided functions. These features allow dynamic configuration using variables and computations. Dependencies include support from the calling application for custom variables and functions; inputs are literal values or application context, and outputs are resolved values during evaluation. Not all expressions are supported in JSON syntax except through string interpolation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Arithmetic with literals and application-provided variables\nsum = 1 + addend\n\n# String interpolation and templates\nmessage = \"Hello, ${name}!\"\n\n# Application-provided functions\nshouty_message = upper(message)\n```\n\n----------------------------------------\n\nTITLE: Updating Allowed Combinations for an Authentication Strength Policy via Go SDK\nDESCRIPTION: This snippet demonstrates updating the allowed authentication method combinations for a policy using UpdateAuthenticationStrengthPolicyAllowedCombinations. It constructs both the policy ID and a payload specifying the allowed combinations, and then performs the update with default options. Requires a correctly structured payload of UpdateAuthenticationStrengthPolicyAllowedCombinationsRequest. The response provides feedback for success or error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\nid := authenticationstrengthpolicy.NewPolicyAuthenticationStrengthPolicyID(\"authenticationStrengthPolicyId\")\n\npayload := authenticationstrengthpolicy.UpdateAuthenticationStrengthPolicyAllowedCombinationsRequest{\n\t// ...\n}\n\n\nread, err := client.UpdateAuthenticationStrengthPolicyAllowedCombinations(ctx, id, payload, authenticationstrengthpolicy.DefaultUpdateAuthenticationStrengthPolicyAllowedCombinationsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail from an Azure AD User in Go\nDESCRIPTION: Example demonstrating how to send an email on behalf of a specific user. The code creates a user ID object, constructs a SendMailRequest payload, and calls the SendMail method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.SendMailRequest{\n\t// ...\n}\n\n\nread, err := client.SendMail(ctx, id, payload, user.DefaultSendMailOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling or Enabling Color Output Programmatically in github.com/fatih/color for Go\nDESCRIPTION: Demonstrates how to globally or locally disable or enable color output via the color.NoColor variable and color instance methods (DisableColor and EnableColor). Useful for CLI tooling and scripting where color output should be suppressed based on flags, environment (NO_COLOR), or runtime logic. Shows use of a command-line flag and instance-based toggling; requires the flag package and github.com/fatih/color.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n\n```\n\nLANGUAGE: Go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n\n```\n\n----------------------------------------\n\nTITLE: Validating a User Property using Go SDK\nDESCRIPTION: This snippet demonstrates validating a potential user property (like display name or mail nickname) for uniqueness using `UserClient.CreateValidatesProperty`. It needs a `context` and a `CreateValidatesPropertyRequest` payload with the property name, value, and optional object ID for updates. The response indicates validity.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, user.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions with FprintFunc in github.com/fatih/color for Go\nDESCRIPTION: Demonstrates how to use FprintfFunc and FprintlnFunc to write colored text to custom io.Writers. Examples include writing formatted colored output to variables like myWriter, and combining multiple style attributes. Useful when integrating colored output within larger applications or writing logs. myWriter and stars should be pre-defined; dependency is github.com/fatih/color.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD User - Terraform CLI - shell\nDESCRIPTION: This snippet shows the command to import an existing Azure AD user into Terraform state using the CLI. The user is identified by their object ID, and the command requires the correct Terraform working directory and provider configuration. The `terraform import` command associates the external resource with the defined Terraform resource block, enabling further management within Terraform. Input: user object ID path; Output: resource imported into Terraform state; limitation: only resources previously created outside Terraform can be imported in this manner.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/user.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_user.my_user /users/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Checking Member Objects via Administrative Unit Client in Go\nDESCRIPTION: Demonstrates how to determine which objects belong to a given administrative unit via CheckMemberObjectsComplete. Requires a context, administrative unit ID, payload struct, and operation options. Returns an object list or error; supports batched or complete pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.CheckMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberObjects(ctx, id, payload, administrativeunit.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, administrativeunit.DefaultCheckMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.AddFavorite in Go\nDESCRIPTION: This example shows how to add a specific group, identified by `groupId`, to the user's favorites using the `AddFavorite` method of the `GroupClient`. It requires a `context` and a `groupID`. Standard error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.AddFavorite(ctx, id, group.DefaultAddFavoriteOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating using Client Certificate with go-azure-sdk (Go)\nDESCRIPTION: Shows how to authenticate Azure API requests using a client certificate file. Requires the path to a .pfx certificate file and its password. The credentials are set in the auth.Credentials struct with EnableAuthenticatingUsingClientCertificate enabled, and passed to NewAuthorizerFromCredentials with the environment's MSGraph endpoint.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment: environment,\\n\\t\\tEnableAuthenticatingUsingClientCertificate: true,\\n\\t\\tClientCertificatePath:                      \\\\\"/path/to/cert.pfx\\\\\",\\n\\t\\tClientCertificatePassword:                  \\\\\"somepassword\\\\\",\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Properties for a Service Principal - Go\nDESCRIPTION: Shows an example of using ServicePrincipalClient to validate a property via the CreateValidatesProperty request. The snippet expects a context and a custom payload, with full error checking and use of the result object. Helpful for verifying various property values prior to other SDK operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := serviceprincipal.CreateValidatesPropertyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateValidatesProperty(ctx, payload, serviceprincipal.DefaultCreateValidatesPropertyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding HCL Configuration with hclsimple in Go\nDESCRIPTION: This Go code demonstrates reading and decoding an HCL configuration file using the hclsimple package. It defines struct types matching the expected hierarchical configuration, and loads values into Go types via the DecodeFile method. Dependencies include the github.com/hashicorp/hcl/v2/hclsimple package, and the configuration file name must be provided. The expected input is an HCL file with structured configuration, and output is loaded Go variables or a fatal error if decoding fails.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/hashicorp/hcl/v2/hclsimple\"\n)\n\ntype Config struct {\n\tIOMode  string        `hcl:\"io_mode\"`\n\tService ServiceConfig `hcl:\"service,block\"`\n}\n\ntype ServiceConfig struct {\n\tProtocol   string          `hcl:\"protocol,label\"`\n\tType       string          `hcl:\"type,label\"`\n\tListenAddr string          `hcl:\"listen_addr\"`\n\tProcesses  []ProcessConfig `hcl:\"process,block\"`\n}\n\ntype ProcessConfig struct {\n\tType    string   `hcl:\"type,label\"`\n\tCommand []string `hcl:\"command\"`\n}\n\nfunc main() {\n\tvar config Config\n\terr := hclsimple.DecodeFile(\"config.hcl\", nil, &config)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load configuration: %s\", err)\n\t}\n\tlog.Printf(\"Configuration is %#v\", config)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups via Administrative Unit Client in Go\nDESCRIPTION: This snippet demonstrates retrieving all group memberships for an administrative unit by invoking GetMemberGroupsComplete, supporting paginated retrieval. Payload must be crafted to match the GetMemberGroupsRequest structure; errors are handled and group items processed iteratively.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.GetMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberGroups(ctx, id, payload, administrativeunit.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, administrativeunit.DefaultGetMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Error Values using errors.Is in Go\nDESCRIPTION: Illustrates using the standard library `errors.Is` function to check if a `multierror.Error` (or any error it wraps) contains a specific sentinel error value, such as `os.ErrNotExist`. `errors.Is` checks for equality of the target error within the error chain.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating an Application Template using Go SDK\nDESCRIPTION: Demonstrates how to instantiate a specific application template by its ID, creating a new application instance based on it. It requires creating a context, specifying the template ID via `NewApplicationTemplateID`, defining a payload of type `InstantiateRequest` (partially shown), calling the `Instantiate` method, handling errors, and processing the resulting model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := applicationtemplate.NewApplicationTemplateID(\"applicationTemplateId\")\n\npayload := applicationtemplate.InstantiateRequest{\n\t// ...\n}\n\n\nread, err := client.Instantiate(ctx, id, payload, applicationtemplate.DefaultInstantiateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extension Properties using Microsoft Graph SDK in Go\nDESCRIPTION: Demonstrates using `UserClient.ListGetsAvailableExtensionPropertiesComplete` to retrieve a list of available directory extension properties. Requires context and a `ListGetsAvailableExtensionPropertiesRequest` payload (potentially specifying if the property applies to deleted objects). The `Complete` function handles pagination. An alternative method (`ListGetsAvailableExtensionProperties`) allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.ListGetsAvailableExtensionPropertiesRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, user.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, user.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Azure AD Directory Role Membership using Terraform\nDESCRIPTION: Provides an example Terraform configuration to assign an Azure AD user to a specific directory role (`Security administrator`). It utilizes the `azuread_user` data source to fetch the user's object ID and the `azuread_directory_role` resource to define the role, then uses `azuread_directory_role_member` to create the assignment by linking the `member_object_id` (user) to the `role_object_id` (role). Note that this resource is deprecated.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_member.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_user\" \"example\" {\n  user_principal_name = \"jdoe@hashicorp.com\"\n}\n\nresource \"azuread_directory_role\" \"example\" {\n  display_name = \"Security administrator\"\n}\n\nresource \"azuread_directory_role_member\" \"example\" {\n  role_object_id   = azuread_directory_role.example.object_id\n  member_object_id = data.azuread_user.example.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure AD Administrative Unit Member into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD administrative unit membership into Terraform state management. The import requires the object ID of the administrative unit and the object ID of the member, concatenated in the specified path format. This allows Terraform to manage the pre-existing membership relationship.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/administrative_unit_member.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_administrative_unit_member.example /directory/administrativeUnits/00000000-0000-0000-0000-000000000000/members/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.GetsCount in Go\nDESCRIPTION: This example shows how to get the total count of groups using the `GetsCount` method. It requires a `context`. Standard error handling and response processing are included. The response model will contain the count.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, group.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ValidatesProperty via Administrative Unit Client in Go\nDESCRIPTION: Illustrates calling CreateValidatesProperty with the required request payload and context to validate property information for an administrative unit. The snippet checks for errors and processes the model returned in the response object upon successful validation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := administrativeunit.CreateValidatesPropertyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateValidatesProperty(ctx, payload, administrativeunit.DefaultCreateValidatesPropertyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Renewing an Azure AD Group using GroupClient in Go\nDESCRIPTION: This snippet demonstrates how to renew an Azure AD group using the `Renew` method of a `GroupClient`. It requires a context, a group ID created using `group.NewGroupID`, and utilizes default renew operation options. The code includes basic error handling and shows how to access the response model if the operation is successful.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.Renew(ctx, id, group.DefaultRenewOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.DeleteGroup in Go\nDESCRIPTION: This snippet demonstrates deleting a specific group using the `DeleteGroup` method. It requires a `context` and the `groupID` of the group to be deleted. Includes standard error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.DeleteGroup(ctx, id, group.DefaultDeleteGroupOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Graph AuthenticationStrengthPolicy SDK in Go\nDESCRIPTION: This snippet demonstrates how to import the AuthenticationStrengthPolicy SDK package in Go. Importing the package enables usage of client types and operations for managing authentication strength policies via the Microsoft Graph API. No parameters are required; simply add the import to your Go source file. The import path must match the version and location of the SDK as distributed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy\"\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects with Pagination using ApplicationClient.GetMemberObjectsComplete - Go\nDESCRIPTION: Illustrates how to fetch all objects (like users or groups) the application is a member of, using GetMemberObjectsComplete for paginated results. Constructs the request and iterates item-wise. Needs the application ID and a GetMemberObjectsRequest payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.GetMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberObjects(ctx, id, payload, application.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, application.DefaultGetMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration with HCL Native Syntax\nDESCRIPTION: This HCL native syntax snippet shows a sample configuration for defining an asynchronous IO mode and an HTTP service with parameters including listen address and process blocks. The hierarchical structure models real-world service and process configuration commonly used in devops and infrastructure tools. Key parameters include io_mode, protocol, service name, listen_addr, and process blocks; the configuration is human-readable and meant for use with programs using HCL decoders.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nio_mode = \"async\"\n\nservice \"http\" \"web_proxy\" {\n  listen_addr = \"127.0.0.1:8080\"\n  \n  process \"main\" {\n    command = [\"/usr/local/bin/awesome-app\", \"server\"]\n  }\n\n  process \"mgmt\" {\n    command = [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Expression Term Syntax using EBNF\nDESCRIPTION: Details the EBNF grammar for expression terms (`ExprTerm`) in HCL. Terms serve as operands and basic expressions. They can be literal values, collection values, template expressions, variable references, function calls, 'for' expressions, indexed elements, attribute accesses, splat operations, or parenthesized sub-expressions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_5\n\nLANGUAGE: ebnf\nCODE:\n```\nExprTerm = (\n    LiteralValue |\n    CollectionValue |\n    TemplateExpr |\n    VariableExpr |\n    FunctionCall |\n    ForExpr |\n    ExprTerm Index |\n    ExprTerm GetAttr |\n    ExprTerm Splat |\n    \"(\" Expression \")\"\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Administrative Units via Client in Go\nDESCRIPTION: Shows how to retrieve a complete list of administrative units with ListAdministrativeUnitsComplete and process each result. Utilizes batching internally with options for paginated requests; can be leveraged to enumerate all units under given criteria.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\n// alternatively `client.ListAdministrativeUnits(ctx, administrativeunit.DefaultListAdministrativeUnitsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListAdministrativeUnitsComplete(ctx, administrativeunit.DefaultListAdministrativeUnitsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Errors with Type Assertion in Go\nDESCRIPTION: Shows how to check if a returned `error` is actually a `*multierror.Error` using a type switch (type assertion). If it is, the code can then access the underlying slice of individual errors via the `Errors` field.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Applicable Policy Requirements for an Access Package in Go\nDESCRIPTION: This snippet shows how to retrieve applicable policy requirements for a specific access package using its ID. It demonstrates using the `GetEntitlementManagementAccessPackageApplicablePolicyRequirementsComplete` helper function which handles pagination automatically to fetch all items. An alternative method (`GetEntitlementManagementAccessPackageApplicablePolicyRequirements`) for manual/batched pagination is also mentioned.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := entitlementmanagementaccesspackage.NewIdentityGovernanceEntitlementManagementAccessPackageID(\"accessPackageId\")\n\n// alternatively `client.GetEntitlementManagementAccessPackageApplicablePolicyRequirements(ctx, id, entitlementmanagementaccesspackage.DefaultGetEntitlementManagementAccessPackageApplicablePolicyRequirementsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetEntitlementManagementAccessPackageApplicablePolicyRequirementsComplete(ctx, id, entitlementmanagementaccesspackage.DefaultGetEntitlementManagementAccessPackageApplicablePolicyRequirementsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Wiping Managed App Registrations by Azure AD Device ID in Go\nDESCRIPTION: Example showing how to wipe managed application registrations by Azure AD device ID for a specific user. The code creates a user ID object, constructs a WipeManagedAppRegistrationsByAzureAdDeviceIdRequest payload, and calls the WipeManagedAppRegistrationsByAzureAdDeviceId method.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.WipeManagedAppRegistrationsByAzureAdDeviceIdRequest{\n\t// ...\n}\n\n\nread, err := client.WipeManagedAppRegistrationsByAzureAdDeviceId(ctx, id, payload, user.DefaultWipeManagedAppRegistrationsByAzureAdDeviceIdOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an AzureAD Access Package Catalog Resource in Terraform - Shell\nDESCRIPTION: This snippet demonstrates how to import an existing AzureAD access package catalog resource into Terraform state using the terraform import command. It requires an existing catalog ID and assumes that the configuration file for the resource is already present in the codebase. The input is the resource address and the AzureAD catalog GUID, and the output is that the Terraform state reflects the imported resource, enabling management via Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_catalog.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_access_package_catalog.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Initializing Administrative Unit Client in Go\nDESCRIPTION: Shows how to construct a new AdministrativeUnitClient, including specifying the Microsoft Graph API endpoint and attaching an appropriate authorizer for authentication. Dependencies include the SDK and an authorizer object. Initialization is a prerequisite for making any further API requests via the client.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := administrativeunit.NewAdministrativeUnitClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.CheckMemberObjects in Go\nDESCRIPTION: This example shows how to check the object memberships for a specific group using `CheckMemberObjectsComplete`. It requires a `context`, the `groupID`, and a `payload` of type `group.CheckMemberObjectsRequest`. The `Complete` function handles pagination automatically, while `CheckMemberObjects` supports manual batch pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, group.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, group.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Entitlement Management Access Package SDK in Go\nDESCRIPTION: This snippet shows the necessary import statement to include the `entitlementmanagementaccesspackage` SDK in a Go project. This package provides types and functions to interact with the Microsoft Graph Identity Governance Entitlement Management Access Package resources (beta API).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage\"\n```\n```\n\n----------------------------------------\n\nTITLE: Moving an Entitlement Management Access Package to a Catalog in Go\nDESCRIPTION: This example demonstrates moving an access package to a different catalog using the `MoveEntitlementManagementAccessPackageToCatalog` method. It requires a context (`ctx`), the ID of the access package to move (`id`), and a `MoveEntitlementManagementAccessPackageToCatalogRequest` payload specifying the target catalog ID. Basic error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := entitlementmanagementaccesspackage.NewIdentityGovernanceEntitlementManagementAccessPackageID(\"accessPackageId\")\n\npayload := entitlementmanagementaccesspackage.MoveEntitlementManagementAccessPackageToCatalogRequest{\n\t// ...\n}\n\n\nread, err := client.MoveEntitlementManagementAccessPackageToCatalog(ctx, id, payload, entitlementmanagementaccesspackage.DefaultMoveEntitlementManagementAccessPackageToCatalogOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Static Map Analysis in Terraform Expression Parsing\nDESCRIPTION: Defines how object construction syntax is interpreted as a static map, where key/value pairs are returned without further interpretation. The typical string attribute name requirement is relaxed for this analysis.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Getting Count of Administrative Units via Client in Go\nDESCRIPTION: Demonstrates how to use GetsCount to retrieve the total number of administrative units. It requires only a context and default operation options, processes the response for errors, and examines the resulting model for count information.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\nread, err := client.GetsCount(ctx, administrativeunit.DefaultGetsCountOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HCL v1 and v2 Simultaneously in Go\nDESCRIPTION: This Go code snippet demonstrates how to import both the original HCL library (v1) and the HCL v2 library within the same Go program. It utilizes Go Modules' semantic import versioning by including the major version (`/v2`) in the import path for HCL 2 and employs package aliases (`hcl1` and `hcl2`) to differentiate between the distinct APIs of the two versions. This allows for concurrent usage, often helpful during migration phases.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing GetsByIds via Administrative Unit Client in Go\nDESCRIPTION: Demonstrates batching and paginated retrieval of administrative units by specific IDs using ListGetsByIdsComplete. The payload must be a ListGetsByIdsRequest struct. Returned items can be processed in bulk; errors are surfaced if encountered.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := administrativeunit.ListGetsByIdsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.ListGetsByIds(ctx, payload, administrativeunit.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListGetsByIdsComplete(ctx, payload, administrativeunit.DefaultListGetsByIdsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subsystem Logger with go-hclog in Go\nDESCRIPTION: This snippet illustrates creating a logger specifically for a subsystem (\"transport\") derived from an existing logger (`appLogger`) using the `.Named()` method. Log messages emitted by this new logger will automatically include the parent logger's name as a prefix.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\nsubsystemLogger := appLogger.Named(\"transport\")\nsubsystemLogger.Info(\"we are transporting something\")\n```\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.RemoveFavorite in Go\nDESCRIPTION: This snippet demonstrates removing a specific group from the user's favorites using the `RemoveFavorite` method. It requires a `context` and the `groupID` of the group to remove. Standard error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.RemoveFavorite(ctx, id, group.DefaultRemoveFavoriteOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Access Package Catalog Role Assignment into Terraform State\nDESCRIPTION: This shell command uses the Terraform CLI to import an existing Azure AD Access Package Catalog Role Assignment into the Terraform state. Replace `azuread_access_package_catalog_role_assignment.example` with the resource address in your configuration and `00000000-0000-0000-0000-000000000000` with the actual ID (GUID) of the role assignment in Azure AD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_catalog_role_assignment.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_access_package_catalog_role_assignment.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Directory Object via Go SDK\nDESCRIPTION: Illustrates restoration of a deleted directory object using DirectoryObjectClient.Restore, passing the directory object ID and operation options. Handles retrieval of the restored object model upon a successful call, with defensive error checks in place.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\nread, err := client.Restore(ctx, id, directoryobject.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Administrative Unit SDK Modules in Go\nDESCRIPTION: Demonstrates the necessary import statement for the AdministrativeUnit SDK in Go, required to access the client and types for interacting with Microsoft Graph administrative units. Ensure module dependencies are installed via Go modules. Use this import in all Go source files making SDK method calls.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit\\\"\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.GetGroup in Go\nDESCRIPTION: This example shows how to retrieve the details of a specific group using the `GetGroup` method. It requires a `context` and the `groupID` of the target group. Standard error handling and response processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.GetGroup(ctx, id, group.DefaultGetGroupOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application Identifier URI in Terraform\nDESCRIPTION: This command demonstrates how to import an existing Azure AD Application Identifier URI into Terraform state. It requires the object ID of the application and the base64-encoded identifier URI.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_identifier_uri.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_identifier_uri.example /applications/00000000-0000-0000-0000-000000000000/identifierUris/aHR0cHM6Ly9leGFtcGxlLm5ldC8=\n```\n\n----------------------------------------\n\nTITLE: Removing All Devices From Management for an Azure AD User in Go\nDESCRIPTION: Example showing how to remove all devices from management for a specific user. The code creates a user ID object and calls the RemoveAllDevicesFromManagement method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RemoveAllDevicesFromManagement(ctx, id, user.DefaultRemoveAllDevicesFromManagementOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for Azure AD Provider\nDESCRIPTION: Shell commands for setting up the development environment, including cloning the repository, installing tools, and building the provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/terraform-providers; cd $GOPATH/src/github.com/terraform-providers\n$ git clone https://github.com/hashicorp/terraform-provider-azuread\n$ make tools\n...\n$ make build\n...\n$ $GOPATH/bin/terraform-provider-azuread\n...\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Numeric Literal Syntax using EBNF\nDESCRIPTION: Specifies the EBNF grammar for numeric literals in HCL. A numeric literal represents a real number and consists of a mandatory decimal integer part, an optional fractional part (starting with '.'), and an optional exponent part (starting with 'e' or 'E').\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nNumericLit = decimal+ (\".\" decimal+)? (expmark decimal+)?;\ndecimal    = '0' .. '9';\nexpmark    = ('e' | 'E') (\"+\" | \"-\")?;\n```\n\n----------------------------------------\n\nTITLE: Querying Authentication Strength Policy Count via Go SDK\nDESCRIPTION: This snippet demonstrates retrieving the count of authentication strength policies via the GetAuthenticationStrengthPoliciesCount method. It uses a context for cancellation support and default operation options. The result, available on success, contains a model with the count, allowing for further processing. No parameters are required beyond standard operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetAuthenticationStrengthPoliciesCount(ctx, authenticationstrengthpolicy.DefaultGetAuthenticationStrengthPoliciesCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Objects for a Directory Role Template in Go\nDESCRIPTION: This example shows how to use the `CheckMemberObjectsComplete` method to check specified object memberships for a directory role template. It takes a context, the template ID, and a `CheckMemberObjectsRequest` payload. The `Complete` function simplifies retrieving all results by handling pagination; the `CheckMemberObjects` method allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\npayload := directoryroletemplate.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, directoryroletemplate.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, directoryroletemplate.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger with Fixed Context using With() in Go\nDESCRIPTION: This example shows how to use the `.With()` method to create a new logger (`requestLogger`) derived from an existing one (`subsystemLogger`). This new logger will automatically include the specified key-value pair (\"request\", requestID) in all subsequent log messages it emits, useful for consistently logging contextual information like request IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n```go\nrequestID := \"5fb446b6-6eba-821d-df1b-cd7501b6a363\"\nrequestLogger := subsystemLogger.With(\"request\", requestID)\nrequestLogger.Info(\"we are transporting a request\")\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Service Principal Member Groups - Go\nDESCRIPTION: Retrieves group membership information for a specified service principal using CheckMemberGroupsRequest with support for batched complete pagination. Inputs are context, the service principal ID, the request payload, and options. On success, the response includes an iterable list of group items, otherwise errors are handled. Standard for identity membership queries in AzureAD.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, serviceprincipal.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, serviceprincipal.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning AzureAD Service Principal Token Signing Certificate with Custom Properties - Terraform\nDESCRIPTION: This snippet shows the creation of an AzureAD application, service principal, and a token signing certificate in Terraform, specifying a custom display name and end date for the certificate. It assumes the AzureAD provider is configured and the operator has proper roles and permissions. Required parameters include 'service_principal_id,' while 'display_name' and 'end_date' allow customization of the certificate subject and validity period. The output resource is a token signing certificate configured for a specific service principal with custom metadata.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_token_signing_certificate.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_service_principal\" \"example\" {\n  client_id = azuread_application.example.client_id\n}\n\nresource \"azuread_service_principal_token_signing_certificate\" \"example\" {\n  service_principal_id = azuread_service_principal.example.id\n  display_name         = \"CN=example.com\"\n  end_date             = \"2023-05-01T01:02:03Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile Data with MeClient.UpdateMe - Go\nDESCRIPTION: This example shows how to update the current user's profile properties using MeClient.UpdateMe, passing a User struct as the payload. After successful update, the returned model reflects the latest user profile state. Requires the User object to be populated with updatable fields.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.User{\n\t// ...\n}\n\n\nread, err := client.UpdateMe(ctx, payload, me.DefaultUpdateMeOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Directory Object Properties using Microsoft Graph SDK in Go\nDESCRIPTION: Shows how to call `UserClient.CreateValidatesProperty` to validate potential property values for a directory object (like a user) against Azure AD constraints before attempting creation or update. Requires context and a `CreateValidatesPropertyRequest` payload. Includes error handling and response access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := user.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, user.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version 0.6.0\nDESCRIPTION: Release notes for version 0.6.0 detailing dependency upgrades and service principal improvements.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.0 (August 21, 2019)\n\nIMPROVEMENTS:\n\n* dependencies: upgrading `github.com/Azure/azure-sdk-for-go` to `v32.5.0`\n* dependencies: upgrading `github.com/Azure/go-autorest` to `v13.0.0`\n* dependencies: upgrading `github.com/hashicorp/go-azure-helpers` to `v0.7.0`\n```\n\n----------------------------------------\n\nTITLE: Retrying Service Provisioning for Azure AD User in Go\nDESCRIPTION: Example demonstrating how to retry service provisioning for a specific user. The code creates a user ID object and calls the RetryServiceProvisioning method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RetryServiceProvisioning(ctx, id, user.DefaultRetryServiceProvisioningOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Version Constraints with go-version in Go\nDESCRIPTION: This snippet demonstrates evaluating if a version satisfies specific constraints by parsing both the version and the constraint string. It requires the version package and provides a boolean result indicating if the input version matches the constraints parsed from a SemVer-style string. Key parameters include the version string and constraint string; the output is printed if the version matches the constraints.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Groups for a Directory Role Template in Go\nDESCRIPTION: This snippet illustrates how to retrieve member groups associated with a directory role template using `GetMemberGroupsComplete`. It requires a context, the template ID, and a `GetMemberGroupsRequest` payload. The `Complete` function handles pagination; `GetMemberGroups` allows manual pagination control.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\npayload := directoryroletemplate.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, directoryroletemplate.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, directoryroletemplate.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions with PrintFunc in github.com/fatih/color for Go\nDESCRIPTION: Explains how to define custom PrintFunc and PrintlnFunc for reusable, colorized print calls. Demonstrates the assignment of a PrintfFunc and PrintlnFunc for often-repeated colored output, with mixing of bold and color attributes. Requires github.com/fatih/color and is useful for standardized alerts or notifications.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n\n```\n\n----------------------------------------\n\nTITLE: Validating Azure AD Group Properties using GroupClient in Go\nDESCRIPTION: This snippet shows how to validate properties for an Azure AD group using the `ValidateProperties` method of a `GroupClient`. It takes a context, the group ID, and a `group.ValidatePropertiesRequest` payload specifying the properties to validate. Default validation options are applied, along with error handling and response processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.ValidatePropertiesRequest{\n\t// ...\n}\n\n\nread, err := client.ValidateProperties(ctx, id, payload, group.DefaultValidatePropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Global Logger with go-hclog in Go\nDESCRIPTION: This snippet demonstrates how to use the default global logger provided by the go-hclog package to emit an INFO level log message. It's a simple way to start logging without explicit logger configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nhclog.Default().Info(\"hello world\")\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects for a Directory Role Template in Go\nDESCRIPTION: This example demonstrates fetching member objects (users, groups, service principals) for a specific directory role template via `GetMemberObjectsComplete`. It requires a context, the template ID, and a `GetMemberObjectsRequest` payload. The `Complete` variant manages pagination; `GetMemberObjects` provides manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\npayload := directoryroletemplate.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, directoryroletemplate.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, directoryroletemplate.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Reprocessing License Assignment with MeClient.ReprocessLicenseAssignment - Go\nDESCRIPTION: This example calls MeClient.ReprocessLicenseAssignment to reapply all license assignments to the current user, using the default operation options and context. It shows error and response model handling, with no request payload needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.ReprocessLicenseAssignment(ctx, me.DefaultReprocessLicenseAssignmentOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Authentication Strength Policies (with Pagination) via Go SDK\nDESCRIPTION: This snippet demonstrates listing all authentication strength policies using the ListAuthenticationStrengthPoliciesComplete method of the SDK client. The code supports sequential retrieval of all items with batched pagination, suitable for enumerating large policy sets. The resulting 'items' collection contains all policies, and each item can be individually processed. Requires only context and default operation options as input.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListAuthenticationStrengthPolicies(ctx, authenticationstrengthpolicy.DefaultListAuthenticationStrengthPoliciesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListAuthenticationStrengthPoliciesComplete(ctx, authenticationstrengthpolicy.DefaultListAuthenticationStrengthPoliciesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Group Memberships using Microsoft Graph SDK in Go\nDESCRIPTION: Demonstrates using `UserClient.GetMemberGroupsComplete` to retrieve the list of groups a user is a direct member of. Requires context, `UserID`, and a `GetMemberGroupsRequest` payload (potentially for filtering). The `Complete` function handles pagination, returning a slice of group IDs. An alternative `GetMemberGroups` method allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.GetMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberGroups(ctx, id, payload, user.DefaultGetMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberGroupsComplete(ctx, id, payload, user.DefaultGetMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of hc-install CLI Installation\nDESCRIPTION: This text block shows the typical standard output generated when successfully running the `hc-install install` command. It confirms the product and version being installed (terraform@1.3.7) and indicates the directory where the binary was placed (e.g., /current/working/dir/terraform).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhc-install: will install terraform@1.3.7\ninstalled terraform@1.3.7 to /current/working/dir/terraform\n```\n\n----------------------------------------\n\nTITLE: Wiping and Blocking Managed Apps for Azure AD User in Go\nDESCRIPTION: Example showing how to wipe and block managed applications for a specific user. The code creates a user ID object and calls the WipeAndBlockManagedApps method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.WipeAndBlockManagedApps(ctx, id, user.DefaultWipeAndBlockManagedAppsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing Versions with go-version in Go\nDESCRIPTION: This Go snippet illustrates creating version objects using version.NewVersion and comparing them with LessThan. It depends on the github.com/hashicorp/go-version package and utilizes the fmt standard library for formatted output. The key parameters are semantic version strings and the snippet outputs which version is less if the comparison succeeds; it also highlights alternate compare methods such as GreaterThan and Equal.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditional Operator Syntax in EBNF\nDESCRIPTION: Defines the syntax for the conditional operator in EBNF notation. This operator allows selecting between two expressions based on a boolean condition.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_21\n\nLANGUAGE: ebnf\nCODE:\n```\nConditional = Expression \"?\" Expression \":\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Directory Role in Go\nDESCRIPTION: This Go snippet demonstrates fetching a single directory role by its ID using the `GetDirectoryRole` method. It requires a context and the `DirectoryRoleID` of the desired role. The response contains the details of the fetched role.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\nread, err := client.GetDirectoryRole(ctx, id, directoryrole.DefaultGetDirectoryRoleOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Key/Value Pairs with go-hclog in Go\nDESCRIPTION: This example demonstrates logging an INFO level message along with structured key/value pairs using a custom logger (`appLogger`). It attempts to parse a string to an integer and logs the original input and the error if parsing fails, providing valuable context for debugging. Requires `hclog` and `strconv` packages.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\ninput := \"5.5\"\n_, err := strconv.ParseInt(input, 10, 32)\nif err != nil {\n\tappLogger.Info(\"Invalid input for ParseInt\", \"input\", input, \"error\", err)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Wiping Managed App Registrations by Device Tag with MeClient.WipeManagedAppRegistrationsByDeviceTag - Go\nDESCRIPTION: This snippet performs managed app registration wipes by device tag for the authenticated user utilizing MeClient.WipeManagedAppRegistrationsByDeviceTag. The operation requires a WipeManagedAppRegistrationsByDeviceTagRequest payload and on completion, processes returned status in the model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.WipeManagedAppRegistrationsByDeviceTagRequest{\n\t// ...\n}\n\n\nread, err := client.WipeManagedAppRegistrationsByDeviceTag(ctx, payload, me.DefaultWipeManagedAppRegistrationsByDeviceTagOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SynchronizationJob SDK in Go\nDESCRIPTION: Imports the necessary `synchronizationjob` package from the HashiCorp Go Azure SDK to interact with Microsoft Graph synchronization jobs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Ambiguous Provider Address Using Registry API in Shell\nDESCRIPTION: This shell (sh) code snippet shows how to resolve an ambiguous provider address by querying the Terraform Registry REST API for redirects or namespace movements. The command utilizes curl to fetch version information, piped through jq to extract 'id' and 'moved_to' attributes, and demonstrates two examples: one where the provider is redirected to a new namespace and one where it is not. Dependencies are the curl and jq command-line tools, and internet access. Inputs are the ambiguous provider address and the API endpoint; outputs are the JSON-extracted identifiers and their new (if any) canonical forms.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# grafana (redirected to its own namespace)\n$ curl -s https://registry.terraform.io/v1/providers/-/grafana/versions | jq '(.id, .moved_to)'\n\"terraform-providers/grafana\"\n\"grafana/grafana\"\n\n# aws (provider without redirection)\n$ curl -s https://registry.terraform.io/v1/providers/-/aws/versions | jq '(.id, .moved_to)'\n\"hashicorp/aws\"\nnull\n```\n\n----------------------------------------\n\nTITLE: Installing go-version via go get in shell\nDESCRIPTION: This snippet demonstrates how to install the go-version library using Go's module system with the go get command. It requires Go to be installed and configured in the development environment. This command downloads and adds the github.com/hashicorp/go-version dependency to the project.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Translating Exchange IDs using UserClient in Go\nDESCRIPTION: Demonstrates how to translate exchange IDs for a user using the UserClient. Shows both complete and batched pagination approaches with error handling and result iteration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.TranslateExchangeIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.TranslateExchangeIds(ctx, id, payload, user.DefaultTranslateExchangeIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.TranslateExchangeIdsComplete(ctx, id, payload, user.DefaultTranslateExchangeIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hc-install via Homebrew (macOS/Linux)\nDESCRIPTION: This shell command uses Homebrew, a package manager for macOS and Linux, to install the `hc-install` CLI tool from the official HashiCorp tap (`hashicorp/tap`). It requires Homebrew to be pre-installed on the system.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install hashicorp/tap/hc-install\n```\n\n----------------------------------------\n\nTITLE: Validating Directory Role Template Properties in Go\nDESCRIPTION: This example shows how to use the `CreateValidatesProperty` method. It likely validates specific properties related to directory role templates based on the provided `CreateValidatesPropertyRequest` payload. The method takes a context and the payload, returning a validation result or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryroletemplate.CreateValidatesPropertyRequest{\n\t// ...\n}\n\n\nread, err := client.CreateValidatesProperty(ctx, payload, directoryroletemplate.DefaultCreateValidatesPropertyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output from Standard Library Logger Wrapper\nDESCRIPTION: This displays the log output when using the standard library logger wrapper obtained via `StandardLogger()`. Because `InferLevels` was set to true and the message started with `[DEBUG]`, `hclog` correctly interpreted the level as DEBUG.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [DEBUG] my-app: &{mu:{state:0 sema:0} prefix: flag:0 out:0xc42000a0a0 buf:[]}\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Group Membership for a Directory Role in Go\nDESCRIPTION: This Go code demonstrates how to use the `CheckMemberGroupsComplete` method to check if specified groups are members of a given directory role. It requires a context, the directory role ID, and a `CheckMemberGroupsRequest` payload. The `...Complete` variant handles pagination automatically, iterating over all results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\npayload := directoryrole.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, id, payload, directoryrole.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, directoryrole.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Named Logger with go-hclog in Go\nDESCRIPTION: This snippet shows how to create a new logger instance using `hclog.New`. It configures the logger with a specific name (\"my-app\") and sets the logging level to DEBUG using `hclog.LevelFromString`. This allows for more control over logging behavior compared to the default logger.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nappLogger := hclog.New(&hclog.LoggerOptions{\n\tName:  \"my-app\",\n\tLevel: hclog.LevelFromString(\"DEBUG\"),\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing SynchronizationSecretClient in Go\nDESCRIPTION: Initializes the SynchronizationSecretClient targeting the Microsoft Graph endpoint. Sets up the client and attaches an authorizer for authenticated API calls. Requires a valid authorizer object and the base URI; output is a ready-to-use `client` for subsequent API operations. Errors may occur if the authorizer is not set properly.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := synchronizationsecret.NewSynchronizationSecretClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Disabling Azure CLI Authentication via Environment Variable (shell)\nDESCRIPTION: Demonstrates how to disable Azure CLI authentication for Terraform Azure providers by setting the `ARM_USE_CLI` environment variable to `false` in a Unix-like shell. This prevents Terraform from attempting to use credentials from `az login`, ensuring other authentication methods are used. Useful in CI/CD pipelines.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/azure_cli.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# sh\nexport ARM_USE_CLI=false\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthenticationStrengthPolicy Client in Go\nDESCRIPTION: This snippet shows how to initialize an AuthenticationStrengthPolicy client using the Go SDK. It creates a new client instance pointing to the Microsoft Graph API endpoint, and assigns the required authorizer for authentication. 'authorizer' must be properly configured with credentials before assignment, as it handles API request authentication. The client can then be used for operation calls.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient := authenticationstrengthpolicy.NewAuthenticationStrengthPolicyClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Updating a Directory Role in Go\nDESCRIPTION: This Go code demonstrates updating an existing directory role using the `UpdateDirectoryRole` method. It requires a context, the `DirectoryRoleID` of the role to update, and a `DirectoryRole` struct containing the updated properties.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\npayload := directoryrole.DirectoryRole{\n\t// ...\n}\n\n\nread, err := client.UpdateDirectoryRole(ctx, id, payload, directoryrole.DefaultUpdateDirectoryRoleOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Module Address with Go\nDESCRIPTION: This Go snippet shows how to parse a Terraform module address using ParseModuleSource, including error handling and accessing the resulting Module struct. The function expects a fully qualified module address, such as 'hashicorp/consul/aws//modules/consul-cluster', as input. Dependencies include ParseModuleSource and relevant Module and ModulePackage struct definitions. On success, a Module object detailing the host, namespace, name, target system, and subdirectory is returned; parsing errors are handled gracefully.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmAddr, err := ParseModuleSource(\"hashicorp/consul/aws//modules/consul-cluster\")\nif err != nil {\n\t// deal with error\n}\n\n// mAddr == Module{\n//   Package: ModulePackage{\n//     Host:         DefaultProviderRegistryHost,\n//     Namespace:    \"hashicorp\",\n//     Name:         \"consul\",\n//     TargetSystem: \"aws\",\n//   },\n//   Subdir: \"modules/consul-cluster\",\n// },\n```\n\n----------------------------------------\n\nTITLE: Translating Exchange IDs for Azure AD User in Go\nDESCRIPTION: Example showing how to translate Exchange IDs for a specific user with pagination. The code creates a user ID object, constructs a TranslateExchangeIdsRequest payload, and calls the TranslateExchangeIdsComplete method.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.TranslateExchangeIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.TranslateExchangeIds(ctx, id, payload, user.DefaultTranslateExchangeIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.TranslateExchangeIdsComplete(ctx, id, payload, user.DefaultTranslateExchangeIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the msgpack Go Package using go get\nDESCRIPTION: This shell command uses the `go get` tool to download and install the `vmihailenco/msgpack` package and its dependencies into the Go workspace. The `-u` flag ensures that the package is updated to the latest version if it already exists.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/vmihailenco/msgpack\n```\n\n----------------------------------------\n\nTITLE: Importing the go-azure-sdk Application Package in Go\nDESCRIPTION: Shows the import path for the go-azure-sdk package required to access Microsoft Graph applications. No dependencies beyond standard Go tools and a compatible go-azure-sdk version. All SDK features demonstrated in the subsequent code snippets depend on properly importing this package.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application\\\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of go-hclog Key/Value Logging\nDESCRIPTION: This shows the log output format when key/value pairs are included. The logger name (\"my-app\"), the main message, and the appended key-value pairs (\"input=5.5\", \"error=...\") are clearly visible.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [INFO ] my-app: Invalid input for ParseInt: input=5.5 error=\"strconv.ParseInt: parsing \\\"5.5\\\": invalid syntax\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom `cty` Type for Keyword Decoding in Go\nDESCRIPTION: This Go snippet demonstrates how to create a custom `cty` capsule type named `keywordType`. It utilizes the `cty.CapsuleOps.ExtensionData` field to provide a custom decoder function (`customdecode.CustomExpressionDecoderFunc`). This decoder checks if a given `hcl.Expression` is a static keyword using `hcl.ExprAsKeyword`. If it is, the decoder returns the keyword encapsulated in a `cty.Value`; otherwise, it returns an error diagnostic. This type acts as a constraint for arguments requiring a static keyword.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar keywordType cty.Type\nkeywordType = cty.CapsuleWithOps(\"keyword\", reflect.TypeOf(\"\"), &cty.CapsuleOps{\n    ExtensionData: func(key interface{}) interface{} {\n        switch key {\n        case customdecode.CustomExpressionDecoder:\n            return customdecode.CustomExpressionDecoderFunc(\n                func(expr hcl.Expression, ctx *hcl.EvalContext) (cty.Value, hcl.Diagnostics) {\n                    var diags hcl.Diagnostics\n                    kw := hcl.ExprAsKeyword(expr)\n                    if kw == \"\" {\n                        diags = append(diags, &hcl.Diagnostic{\n                            Severity: hcl.DiagError,\n                            Summary:  \"Invalid keyword\",\n                            Detail:   \"A keyword is required\",\n                            Subject:  expr.Range().Ptr(),\n                        })\n                        return cty.UnkownVal(keywordType), diags\n                    }\n                    return cty.CapsuleVal(keywordType, &kw)\n                },\n            )\n        default:\n            return nil\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting SynchronizationJob in Go\nDESCRIPTION: Illustrates how to retrieve a specific synchronization job using the `GetSynchronizationJob` method. It requires a context, a composite ID (service principal ID and job ID), and operation options. The retrieved job details are in `read.Model` upon successful execution.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\nread, err := client.GetSynchronizationJob(ctx, id, synchronizationjob.DefaultGetSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Installing github.com/fatih/color via go get in Shell\nDESCRIPTION: This snippet demonstrates installing the github.com/fatih/color package using the go get command. Executing this command fetches and installs the package to your local Go workspace, making the library available for import and use in your Go projects. Requires Go tooling properly installed and set up in your system.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Handling group_membership_claims Migration Error - Shell Session\nDESCRIPTION: This snippet demonstrates an error message encountered when the group_membership_claims property is misconfigured after an upgrade. It indicates the data type has changed from a string to a list, and users should follow the suggested migration steps. No explicit dependencies are required; triggering this output generally requires running either terraform plan or terraform refresh on an outdated configuration.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/guides/microsoft-graph.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\nError: .group_membership_claims: missing expected [\\n\n```\n\n----------------------------------------\n\nTITLE: Integrating go-hclog with Standard Library Logger Interface in Go\nDESCRIPTION: This code demonstrates how to obtain a standard library `log.Logger` interface from an `hclog.Logger` using the `StandardLogger()` method. This allows using familiar methods like `Printf`. The `InferLevels: true` option attempts to map log messages prefixed with standard level strings (e.g., \"[DEBUG]\") to the corresponding `hclog` level.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n```go\nstdLogger := appLogger.StandardLogger(&hclog.StandardLoggerOptions{\n\tInferLevels: true,\n})\n// Printf() is provided by stdlib log.Logger interface, not hclog.Logger\nstdLogger.Printf(\"[DEBUG] %+v\", stdLogger)\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error Types using errors.As in Go\nDESCRIPTION: Demonstrates using the standard library `errors.As` function to check if a `multierror.Error` (or any error wrapping it) contains a specific error type (e.g., `RichErrorType`). If found, `errors.As` populates the provided variable (`errRich`) with the value of that error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Ambiguous Provider Address Without Namespace in Go\nDESCRIPTION: This snippet illustrates handling of an ambiguous provider address (missing or empty namespace) using ParseProviderSource in Go. It demonstrates the parsing approach for legacy or partially qualified addresses (like 'aws'), and shows how to check for known/legacy namespace status using HasKnownNamespace and IsLegacy methods. Dependencies include ParseProviderSource, Provider struct, and the relevant methods. The output Provider struct indicates unknown namespace via a placeholder; the snippet also highlights behavioral differences based on the returned properties.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: UnknownProviderNamespace,    // \"?\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == false\npAddr.IsLegacy() // == false\n```\n\n----------------------------------------\n\nTITLE: Updating an Azure AD User in Go\nDESCRIPTION: Example demonstrating how to update properties of an existing user. The code creates a user ID object, constructs a User payload with the updated properties, and calls the UpdateUser method with default operation options.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.User{\n\t// ...\n}\n\n\nread, err := client.UpdateUser(ctx, id, payload, user.DefaultUpdateUserOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing errwrap.Wrapper for a Custom Go Error Type\nDESCRIPTION: Illustrates how to make a custom error type compatible with `errwrap`'s checking functions. First, a custom error struct `AppError` is defined, embedding an underlying `error`. Then, the `AppError` type implements the `errwrap.Wrapper` interface by providing the `WrappedErrors` method, which returns a slice containing the embedded error. This allows `errwrap` functions like `ContainsType` to introspect the custom error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype AppError struct {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Graph ServicePrincipal SDK - Go\nDESCRIPTION: This snippet demonstrates how to import the HashiCorp SDK package for Microsoft Graph service principals functionality in a Go project. The import path is specific to the stable API version. Required dependency: the Go SDK from HashiCorp for AzureAD. No parameters or runtime code, just importation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal\"\n```\n\n----------------------------------------\n\nTITLE: Processing io.ReadCloser Stream with run.Group in Go\nDESCRIPTION: This Go example integrates a generic io.ReadCloser stream with run.Group. The actor reads lines from the stream using a bufio.Scanner in the execute function, prints each line, and returns any scanner error. The interrupt function closes the input connection. Required dependencies are \"io\", \"bufio\", and run.Group. The actor processes streamed input until EOF or error, and ensures connection closure after completion or interruption.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvar conn io.ReadCloser = ...\\ng.Add(func() error {\\n\\ts := bufio.NewScanner(conn)\\n\\tfor s.Scan() {\\n\\t\\tprintln(s.Text())\\n\\t}\\n\\treturn s.Err()\\n}, func(error) {\\n\\tconn.Close()\\n})\n```\n\n----------------------------------------\n\nTITLE: Changing the User Password with MeClient.ChangePassword - Go\nDESCRIPTION: This snippet shows how to use the MeClient's ChangePassword method to change the current user's password in Microsoft Graph. It requires constructing a ChangePasswordRequest as the payload. On success, examines the returned data model. Relies on a valid MeClient and context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.ChangePasswordRequest{\n\t// ...\n}\n\n\nread, err := client.ChangePassword(ctx, payload, me.DefaultChangePasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Microsoft Graph Group SDK (Beta) in Go\nDESCRIPTION: This snippet shows the necessary import path to include the Microsoft Graph groups (beta) SDK package in a Go project.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group\"\n```\n\n----------------------------------------\n\nTITLE: Azure AD Users Data Source Timeouts Configuration\nDESCRIPTION: Configuration block for specifying timeout values for the azuread_users data source operations. Defines create timeout with a default of 5 minutes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/users.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ntimeouts {\n  create = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform v1.3.7 using hc-install CLI\nDESCRIPTION: This shell command demonstrates using the `hc-install` CLI to install a specific version (1.3.7) of a HashiCorp product (Terraform). The tool will download the specified version from releases.hashicorp.com, verify its integrity, and place the binary in the path specified by the `-path` flag, or the current working directory if omitted.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhc-install install -version 1.3.7 terraform\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.GetPasswordSingleSignOnCredentials in Go\nDESCRIPTION: This snippet demonstrates retrieving password-based single sign-on credentials for a group using `GetPasswordSingleSignOnCredentialsComplete`. It requires a `context` and the `groupID`. The `Complete` function handles pagination; `GetPasswordSingleSignOnCredentials` allows manual pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\n// alternatively `client.GetPasswordSingleSignOnCredentials(ctx, id, group.DefaultGetPasswordSingleSignOnCredentialsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetPasswordSingleSignOnCredentialsComplete(ctx, id, group.DefaultGetPasswordSingleSignOnCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying hc-install CLI Usage Help\nDESCRIPTION: This text block shows the command-line help output for the `hc-install install` subcommand. It outlines the required `-version` flag, the optional `-path` (installation directory, defaults to current) and `-log-file` flags, and the mandatory product argument for installing a specific HashiCorp product version.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: hc-install install [options] -version <version> <product>\n\n  This command installs a HashiCorp product.\n  Options:\n    -version  [REQUIRED] Version of product to install.\n    -path     Path to directory where the product will be installed.\n              Defaults to current working directory.\n    -log-file Path to file where logs will be written. /dev/stdout\n              or /dev/stderr can be used to log to STDOUT/STDERR.\n```\n\n----------------------------------------\n\nTITLE: Handling Potential Compile Errors with Older Go Versions\nDESCRIPTION: This snippet shows example compile errors (`undefined: errors.As`, `undefined: errors.Is`) that may occur if using a Go version older than 1.13 with `go-multierror`. This is because the library utilizes error wrapping features introduced in Go 1.13.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/go/src/github.com/hashicorp/go-multierror/multierror.go:112:9: undefined: errors.As\n/go/src/github.com/hashicorp/go-multierror/multierror.go:117:9: undefined: errors.Is\n```\n\n----------------------------------------\n\nTITLE: Checking User Member Groups with MeClient.CheckMemberGroupsComplete - Go\nDESCRIPTION: This snippet calls MeClient.CheckMemberGroupsComplete to retrieve all group memberships for the user, using a CheckMemberGroupsRequest payload. It demonstrates error handling and iterating over paginated results. Suitable when full group membership enumeration is needed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.CheckMemberGroupsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberGroups(ctx, payload, me.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberGroupsComplete(ctx, payload, me.DefaultCheckMemberGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of go-hclog Subsystem Logger\nDESCRIPTION: This demonstrates the output from a subsystem logger created with `.Named()`. Notice the logger name in the output (`my-app.transport`) reflects the hierarchy, combining the application and subsystem names.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [INFO ] my-app.transport: we are transporting something\n```\n```\n\n----------------------------------------\n\nTITLE: Importing DirectoryRoleTemplate SDK in Go\nDESCRIPTION: This snippet shows the necessary import path to include the `directoryroletemplate` SDK package in a Go project. This package provides functionalities to interact with Microsoft Graph Directory Role Templates.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Yamux Client and Server in Golang\nDESCRIPTION: This snippet demonstrates the basic usage of the Yamux library in Go. The `client` function shows how to establish a network connection, create a Yamux client session, open a stream, and write data. The `server` function illustrates accepting a connection, setting up a Yamux server session, accepting an incoming stream, and reading data from it. Both rely on an underlying `net.Conn` (like TCP) and the `yamux` package.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/yamux/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc client() {\n    // Get a TCP connection\n    conn, err := net.Dial(...)\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup client side of yamux\n    session, err := yamux.Client(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Open a new stream\n    stream, err := session.Open()\n    if err != nil {\n        panic(err)\n    }\n\n    // Stream implements net.Conn\n    stream.Write([]byte(\"ping\"))\n}\n\nfunc server() {\n    // Accept a TCP connection\n    conn, err := listener.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup server side of yamux\n    session, err := yamux.Server(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Accept a stream\n    stream, err := session.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Listen for a message\n    buf := make([]byte, 4)\n    stream.Read(buf)\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Builtin Terraform Provider Address in Go\nDESCRIPTION: This Go snippet demonstrates constructing the address for the builtin 'terraform' provider by initializing a Provider struct with fixed host and namespace constants, appropriate for Terraform 0.13+ where such providers are represented via dedicated addresses. The snippet highlights how to treat ambiguous or builtin providers, with dependencies including NewProvider, BuiltInProviderHost, and BuiltInProviderNamespace. Output is a Provider instance representing the builtin provider.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npAddr := NewProvider(BuiltInProviderHost, BuiltInProviderNamespace, \"terraform\")\n```\n\n----------------------------------------\n\nTITLE: Finding Meeting Times with MeClient.FindMeetingTimes - Go\nDESCRIPTION: This code demonstrates the use of MeClient.FindMeetingTimes to propose optional times for meetings, based on a FindMeetingTimesRequest payload and context. After the call, the result can be processed via the returned model for available meeting suggestions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.FindMeetingTimesRequest{\n\t// ...\n}\n\n\nread, err := client.FindMeetingTimes(ctx, payload, me.DefaultFindMeetingTimesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom HCL `with` Function in Go\nDESCRIPTION: This Go snippet defines a custom HCL function named `with` using the `function.New` constructor from the `hcl/v2/function` package. The function accepts two parameters: an object (`cty.DynamicPseudoType` initially, checked for object type) containing local variables, and an expression closure (`customdecode.ExpressionClosureType`). The implementation (`Impl`) extracts the variables and the closure, creates a child evaluation context with these variables, evaluates the expression within this context using `closure.Expression.Value()`, and returns the result. The `evalWithLocals` helper function encapsulates the evaluation logic.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar WithFunc = function.New(&function.Spec{\n    Params: []function.Parameter{\n        {\n            Name: \"variables\",\n            Type: cty.DynamicPseudoType,\n        },\n        {\n            Name: \"expression\",\n            Type: customdecode.ExpressionClosureType,\n        },\n    },\n    Type: func(args []cty.Value) (cty.Type, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        if !varsVal.Type().IsObjectType() {\n            return cty.NilVal, function.NewArgErrorf(0, \"must be an object defining local variables\")\n        }\n        if !varsVal.IsKnown() {\n            // We can't predict our result type until the variables object\n            // is known.\n            return cty.DynamicPseudoType, nil\n        }\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        result, err := evalWithLocals(vars, closure)\n        if err != nil {\n            return cty.NilVal, err\n        }\n        return result.Type(), nil\n    },\n    Impl: func(args []cty.Value, retType cty.Type) (cty.Value, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        return evalWithLocals(vars, closure)\n    },\n})\n\nfunc evalWithLocals(locals map[string]cty.Value, closure *customdecode.ExpressionClosure) (cty.Value, error) {\n    childCtx := closure.EvalContext.NewChild()\n    childCtx.Variables = locals\n    val, diags := closure.Expression.Value(childCtx)\n    if diags.HasErrors() {\n        return cty.NilVal, function.NewArgErrorf(1, \"couldn't evaluate expression: %s\", diags.Error())\n    }\n    return val, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Expressing HCL Configuration in JSON Format\nDESCRIPTION: This JSON object models the same configuration as the previous HCL snippet, showing service blocks, process commands, and IO mode using machine-friendly syntax. This is suitable for automated generation or interoperability while preserving the structure expected by HCL parsers. All names and mapping mirror those of the HCL configuration; the expected input for an HCL decoder is this JSON object, yielding the same output REST structures.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"io_mode\": \"async\",\n  \"service\": {\n    \"http\": {\n      \"web_proxy\": {\n        \"listen_addr\": \"127.0.0.1:8080\",\n        \"process\": {\n          \"main\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"server\"]\n          },\n          \"mgmt\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n          },\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Type with go-isatty in Go\nDESCRIPTION: This Go code demonstrates how to use the go-isatty package to detect whether the program's output (os.Stdout) is attached to a real terminal, a Cygwin/MSYS2 terminal, or not a terminal at all. The script imports the necessary dependencies and utilizes IsTerminal and IsCygwinTerminal functions, outputting a descriptive message to stdout. Dependencies required: github.com/mattn/go-isatty. Inputs are the file descriptor of stdout; output is a string written to the console. The code is intended for CLI applications and cross-platform terminal checks, and assumes the go-isatty package is installed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a User with MeClient.Restore - Go\nDESCRIPTION: This snippet utilizes MeClient.Restore to reinstate a deleted or removed user profile to an active state. Requires only operation options and a context; result handling processes the returned model for confirmation. Direct payload not needed for this operation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.Restore(ctx, me.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Canonical Import Path for go-pkcs12\nDESCRIPTION: Specifies the correct import path `software.sslmate.com/src/go-pkcs12` that should be used with `go get` and in Go `import` statements to fetch and use the `go-pkcs12` package, despite the source code being hosted on GitHub.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/software.sslmate.com/src/go-pkcs12/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsoftware.sslmate.com/src/go-pkcs12\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Graph Applications SDK - Go\nDESCRIPTION: This snippet shows how to import the HashiCorp Go SDK package for interacting with Microsoft Graph applications (beta API version). Required for any further SDK usage. No parameters, simply includes the package for subsequent code.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application\\\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module - shell\nDESCRIPTION: Initializes a new Go module in the current directory, required as a prerequisite for using msgpack/v5. This command sets up the necessary go.mod file for dependency management. Must be run once before installing any libraries; input is the desired module path, output is a go.mod file.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\n----------------------------------------\n\nTITLE: Authenticating using Client Secret with go-azure-sdk (Go)\nDESCRIPTION: Demonstrates authentication via a client secret for Azure API calls. The client secret is set directly on the auth.Credentials struct with EnableAuthenticatingUsingClientSecret enabled. No package main is included in this snippet, but context makes clear this is typical for Go CLI programs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/sdk/auth/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"log\\\"\\n\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/auth\\\"\\n\\t\\\"github.com/hashicorp/go-azure-sdk/sdk/environments\\\"\\n)\\n\\nfunc main() {\\n\\tenvironment := environments.Public\\n\\tcredentials := auth.Credentials{\\n\\t\\tEnvironment:                           environment,\\n\\t\\tEnableAuthenticatingUsingClientSecret: true,\\n\\t\\tClientSecret:                          \\\\\"some-secret-value\\\\\",\\n\\t}\\n\\tauthorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MSGraph)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"building authorizer from credentials: %+v\\\", err)\\n\\t}\\n\\t// ..\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Custom `with` Function in HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the custom `with` function (defined in Go). It calls `with`, passing an object `{name = \"Cory\"}` as the first argument and a string template `${greeting}, ${name}!` as the second argument. The `with` function evaluates the template in a context where `name` is defined locally as \"Cory\", assuming `greeting` exists in the outer context.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n  foo = with({name = \"Cory\"}, \"${greeting}, ${name}!\")\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Expression Syntax using EBNF\nDESCRIPTION: Specifies the high-level EBNF grammar for HCL expressions. An expression can be a simple term (`ExprTerm`), a combination of terms using operators (`Operation`), or a conditional expression (`Conditional`). Expressions are primarily used for attribute values.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_4\n\nLANGUAGE: ebnf\nCODE:\n```\nExpression = (\n    ExprTerm |\n    Operation |\n    Conditional\n);\n```\n\n----------------------------------------\n\nTITLE: Example Output from Redirected Standard Library Logger\nDESCRIPTION: This shows the log output resulting from a call to the standard library's `log.Printf` after its output has been redirected to `go-hclog`. With `InferLevels: true`, the `[DEBUG]` prefix correctly sets the log level.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [DEBUG] my-app: 42\n```\n```\n\n----------------------------------------\n\nTITLE: Debugging Configuration for Azure AD Provider\nDESCRIPTION: Commands for compiling the provider in debug mode and example output showing the required environment variable for attachment.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ make debug\n...\nProvider started. To attach Terraform CLI, set the TF_REATTACH_PROVIDERS environment variable with the following:\n    TF_REATTACH_PROVIDERS='{\"registry.terraform.io/hashicorp/azuread\":{\"Protocol\":\"grpc\",\"ProtocolVersion\":5,\"Pid\":16227,\"Test\":true,\"Addr\":{\"Network\":\"unix\",\"String\":\"/var/folders/dy/r91ps1bx7fscm_v64qbwd0nh0000gn/T/plugin1540622971\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extension Properties for Directory Objects via Go SDK\nDESCRIPTION: Shows how to list available extension properties for directory objects using DirectoryObjectClient.ListGetsAvailableExtensionPropertiesComplete. Accepts a ListGetsAvailableExtensionPropertiesRequest payload and supports batch pagination, with standard error and result processing patterns. Authentication and proper payload structuring are required dependencies.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryobject.ListGetsAvailableExtensionPropertiesRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, directoryobject.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, directoryobject.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty Using Go Get in Shell\nDESCRIPTION: This shell command installs the go-isatty package using Go's dependency management tool. It fetches and installs github.com/mattn/go-isatty into the local Go workspace, making it available for import in Go projects. Prerequisites are Go language runtime and an internet connection. No inputs or outputs other than go-isatty being accessible for later Go builds.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Comparison for Go Serialization Libraries\nDESCRIPTION: This text block displays benchmark results comparing the performance of `vmihailenco/msgpack` with other Go serialization libraries (`ugorji/go/codec`, standard `encoding/json`, `encoding/gob`) for struct serialization. The metrics shown include nanoseconds per operation (ns/op), bytes allocated per operation (B/op), and number of allocations per operation (allocs/op). The results suggest `vmihailenco/msgpack` offers competitive performance, often being faster and more memory-efficient than standard JSON and GOB for this specific benchmark scenario.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkStructVmihailencoMsgpack-4   \t  200000\t     12814 ns/op\t    2128 B/op\t      26 allocs/op\nBenchmarkStructUgorjiGoMsgpack-4      \t  100000\t     17678 ns/op\t    3616 B/op\t      70 allocs/op\nBenchmarkStructUgorjiGoCodec-4        \t  100000\t     19053 ns/op\t    7346 B/op\t      23 allocs/op\nBenchmarkStructJSON-4                 \t   20000\t     69438 ns/op\t    7864 B/op\t      26 allocs/op\nBenchmarkStructGOB-4                  \t   10000\t    104331 ns/op\t   14664 B/op\t     278 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Parsing Provider Address with Go\nDESCRIPTION: This snippet demonstrates parsing a provider address string using the ParseProviderSource function in Go. It handles error checking and, upon success, initializes a Provider struct with parsed details. Dependencies include access to the ParseProviderSource function and appropriate Provider struct definitions; the function expects an address string like 'hashicorp/aws'. The output is a populated Provider instance with fields like Type, Namespace, and Hostname; if parsing fails, an error is returned.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"hashicorp/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: \"hashicorp\",\n//   Hostname:  DefaultProviderRegistryHost,\n// }\n```\n\n----------------------------------------\n\nTITLE: Using a Custom `cty` Type in `hcldec.AttrSpec` in Go\nDESCRIPTION: This Go code snippet illustrates how to apply the custom `keywordType` (defined elsewhere) as a type constraint within an `hcldec.AttrSpec`. By setting the `Type` field of the `AttrSpec` to `keywordType`, it mandates that the HCL attribute named \"keyword\" must conform to the custom keyword decoding logic, accepting only static keywords.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nkeywordSpec := &hcldec.AttrSpec{\n    Name: \"keyword\",\n    Type: keywordType,\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding HCL Expressions in JSON Values\nDESCRIPTION: This JSON snippet shows how HCL expressions can be used inside JSON string values via interpolation syntax, allowing for similar dynamic configuration capabilities as native HCL. The application must support parsing and evaluating interpolated strings. Key parameters include references, function calls, and computations within ${...} in string values.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sum\": \"${1 + addend}\",\n  \"message\": \"Hello, ${name}!\",\n  \"shouty_message\": \"${upper(message)}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Literal Value Syntax using EBNF\nDESCRIPTION: Specifies the EBNF grammar for literal values representing primitive types in HCL expressions. This includes numeric literals (`NumericLit`), boolean literals (`true`, `false`), and the null literal (`null`). String literals are defined separately within the template sub-language.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\nLiteralValue = (\n  NumericLit |\n  \"true\" |\n  \"false\" |\n  \"null\"\n);\n```\n\n----------------------------------------\n\nTITLE: Example Output of go-hclog Global Logger\nDESCRIPTION: This shows the default output format for a log message generated by the global go-hclog logger. It includes a timestamp, the log level ([INFO]), and the message content.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```text\n2017-07-05T16:15:55.167-0700 [INFO ] hello world\n```\n```\n\n----------------------------------------\n\nTITLE: Defining For Expression Syntax in EBNF\nDESCRIPTION: EBNF grammar definitions for 'for expressions' in HCL, which can produce either tuple or object values based on the delimiters used. The grammar includes rules for the expression structure, introduction, and conditional filtering.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_13\n\nLANGUAGE: ebnf\nCODE:\n```\nForExpr = forTupleExpr | forObjectExpr;\nforTupleExpr = \"[\" forIntro Expression forCond? \"]\";\nforObjectExpr = \"{\" forIntro Expression \"=>\" Expression \"...\"? forCond? \"}\";\nforIntro = \"for\" Identifier (\",\" Identifier)? \"in\" Expression \":\";\nforCond = \"if\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Updating an Administrative Unit via Client in Go\nDESCRIPTION: Illustrates how to update an existing administrative unit, requiring its ID, a populated AdministrativeUnit struct as the payload, and suitable operation options. The snippet checks for errors and works with the response model representing updated data.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.AdministrativeUnit{\\n\\t// ...\\n}\\n\\n\\nread, err := client.UpdateAdministrativeUnit(ctx, id, payload, administrativeunit.DefaultUpdateAdministrativeUnitOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Example HCL Input for Custom Keyword Attribute\nDESCRIPTION: This HCL snippet shows an example configuration that satisfies the `hcldec.AttrSpec` defined using the custom `keywordType`. The attribute `keyword` is assigned the static keyword `foo`, which aligns with the custom decoding rule defined for `keywordType`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nkeyword = foo\n```\n\n----------------------------------------\n\nTITLE: Integrating net.Listener-Based HTTP Server with run.Group in Go\nDESCRIPTION: This snippet shows how to use a net.Listener with run.Group to implement an HTTP server that is cleanly shut down on exit. The actor’s execute function starts an HTTP server on the listener, and the interrupt function closes the listener. Dependencies are the \"net\", \"http\" packages, and run.Group. Inputs include a network listener bound to :8080; on exit, the server is stopped via listener closure. Useful for robust network server lifecycles with automatic cleanup.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nln, _ := net.Listen(\"tcp\", \":8080\")\\ng.Add(func() error {\\n\\treturn http.Serve(ln, nil)\\n}, func(error) {\\n\\tln.Close()\\n})\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC Module with Go - Go\nDESCRIPTION: This code snippet demonstrates how to import the gRPC package in a Go source file. The import path is 'google.golang.org/grpc', and the Go toolchain will automatically fetch the dependency during build, run, or test. No additional configuration is required, but the Go tool must be available, and network access to the repository is required unless vendoring or replacements are used.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n\n```\n\n----------------------------------------\n\nTITLE: Replacing gRPC Module for Restricted Networks - Shell\nDESCRIPTION: This snippet provides shell commands to use as a workaround when the standard gRPC import domain is blocked (e.g., in China or other restricted environments). Using Go modules, it edits the go.mod file to replace the canonical gRPC dependency with a GitHub mirror. The process includes running 'go mod edit', 'go mod tidy', 'go mod vendor', and building with vendor mode. All Go module and build tools must be installed beforehand. This change may also need to be applied to transitive dependencies.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n\n```\n\n----------------------------------------\n\nTITLE: Listing Escape Sequences for Quoted Template Expressions\nDESCRIPTION: Lists the available escape sequences used within HCL's quoted template expressions (`\"...\"`). These sequences allow representation of special characters like newline (`\\n`), carriage return (`\\r`), tab (`\\t`), literal quote (`\\\"`), literal backslash (`\\\\`), and Unicode characters (`\\uNNNN`, `\\UNNNNNNNN`).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n    \\n         Unicode newline control character\n    \\r         Unicode carriage return control character\n    \\t         Unicode tab control character\n    \\\"         Literal quote mark, used to prevent interpretation as end of string\n    \\\\         Literal backslash, used to prevent interpretation as escape sequence\n    \\uNNNN     Unicode character from Basic Multilingual Plane (NNNN is four hexadecimal digits)\n    \\UNNNNNNNN Unicode character from supplementary planes (NNNNNNNN is eight hexadecimal digits)\n```\n\n----------------------------------------\n\nTITLE: Using a go-testing-interface Helper in a Standard Go Test\nDESCRIPTION: This example shows how a test helper function (`TestHelper`), defined using the `go-testing-interface`'s `testing.T` interface, can be seamlessly called within a standard Go test function (`TestThing`). The standard `*testing.T` struct satisfies the `testing.T` interface provided by the library, making integration straightforward.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"testing\"\n\nfunc TestThing(t *testing.T) {\n    TestHelper(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Assignment Policy with Terraform - Shell\nDESCRIPTION: This shell command demonstrates how to import an existing Azure AD access package assignment policy into Terraform's state using the terraform import command. It requires that the AzureAD Terraform provider is set up and configured. The placeholder \"00000000-0000-0000-0000-000000000000\" should be replaced with the actual resource ID. Upon execution, the access package assignment policy specified by the ID will be associated with the given Terraform resource instance.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_assignment_policy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_access_package_assignment_policy.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Assigning Default App Role to Group\nDESCRIPTION: Example showing how to assign the default app role to a security group for an internal application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/app_role_assignment.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application\" \"internal\" {\n  display_name = \"internal\"\n}\n\nresource \"azuread_service_principal\" \"internal\" {\n  client_id = azuread_application.internal.client_id\n}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example\"\n  security_enabled = true\n}\n\nresource \"azuread_app_role_assignment\" \"example\" {\n  app_role_id         = \"00000000-0000-0000-0000-000000000000\"\n  principal_object_id = azuread_group.example.object_id\n  resource_object_id  = azuread_service_principal.internal.object_id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Operator Syntax in EBNF\nDESCRIPTION: EBNF grammar for the index operator in HCL, which allows accessing elements from collections like tuples, objects, maps, and lists. Includes both standard bracket notation and legacy dot-number notation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_14\n\nLANGUAGE: ebnf\nCODE:\n```\nIndex = \"[\" Expression \"]\";\n```\n\nLANGUAGE: ebnf\nCODE:\n```\nLegacyIndex = '.' digit+\n```\n\n----------------------------------------\n\nTITLE: Importing Service Principal Certificate - Terraform - Shell\nDESCRIPTION: This shell command snippet demonstrates how to import an existing Azure AD Service Principal certificate credential into Terraform state, using the 'terraform import' command. It expects the Service Principal Object ID and the Certificate Key ID, formatted as 'ServicePrincipalObjectId/certificate/CertificateKeyId'. This operation requires the corresponding certificate to already exist in Azure Active Directory, and is helpful for managing previously created credentials within Terraform.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_certificate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_service_principal_certificate.example 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Application Templates with Pagination using Go SDK\nDESCRIPTION: Provides an example of listing all application templates available in Microsoft Graph. It highlights the `ListApplicationTemplatesComplete` helper function which handles pagination automatically, retrieving all items into a single slice. The code iterates through the resulting items after checking for errors. An alternative method (`ListApplicationTemplates`) for manual batched pagination is also mentioned.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListApplicationTemplates(ctx, applicationtemplate.DefaultListApplicationTemplatesOperationOptions())` can be used to do batched pagination\nitems, err := client.ListApplicationTemplatesComplete(ctx, applicationtemplate.DefaultListApplicationTemplatesOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Static Traversal Analysis in Terraform Expression Parsing\nDESCRIPTION: Details how variable expressions with attribute access and constant index operations are interpreted as static traversals. Special handling is included for keywords 'true', 'false', and 'null'.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Defining a Test Helper with go-testing-interface in Go\nDESCRIPTION: This snippet demonstrates how to define a test helper function (`TestHelper`) that accepts the `testing.T` interface from the `go-testing-interface` library instead of the standard `*testing.T`. This allows the helper to be used in contexts outside of standard Go tests. The example shows calling the `Fatal` method on the interface, which would terminate execution in a test or runtime context using this library.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc TestHelper(t testing.T) {\n    t.Fatal(\"I failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Change Descriptions\nDESCRIPTION: Markdown formatted version headers and change descriptions documenting updates to the Azure AD provider\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.3.0 (April 03, 2025)\n\nENHANCEMENTS:\n\n* dependencies: update `Go` to `1.24.1` (#1675)\n\nBUG FIXES:\n\n* `azuread_application_pre_authorized` - fix unexpected removal of unmanaged pre-authorized apps on delete (#1659)\n* `azuread_directory_role` - fix for changes in Graph API response for ListRolesResponse in create (#1575)\n* `azuread_directory_role_eligibility_schedule_request` - fix `Read` for time based service automatic deletion of request resource (#1682)\n```\n\n----------------------------------------\n\nTITLE: Parsing Ambiguous Provider Address With Placeholder Namespace in Go\nDESCRIPTION: This Go snippet demonstrates parsing a provider address using '-') as a placeholder namespace (e.g., '-/aws') via ParseProviderSource, illustrating legacy compatibility. It further shows usage of HasKnownNamespace and IsLegacy checks on the returned Provider struct. Dependencies include ParseProviderSource, Provider struct, and respective methods. The main output is a Provider struct using the legacy namespace designation; returned status flags inform further processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"-/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: LegacyProviderNamespace,     // \"-\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == true\npAddr.IsLegacy() // == true\n```\n\n----------------------------------------\n\nTITLE: Importing the go-pkcs12 Package in Go\nDESCRIPTION: This Go code snippet demonstrates how to import the `go-pkcs12` package using its canonical import path `software.sslmate.com/src/go-pkcs12`. This import is necessary to use the package's functions for decoding and encoding PKCS#12 files.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/software.sslmate.com/src/go-pkcs12/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"software.sslmate.com/src/go-pkcs12\"\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Identifier Syntax using EBNF\nDESCRIPTION: Specifies the Extended Backus-Naur Form (EBNF) grammar for HCL identifiers. Identifiers must start with a character matching the Unicode `ID_Start` property and can be followed by zero or more characters matching `ID_Continue` or a hyphen (`-`). This definition is based on UAX #31, with the addition of the dash character.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nIdentifier = ID_Start (ID_Continue | '-')*;\n```\n\n----------------------------------------\n\nTITLE: Defining Template Syntax in EBNF\nDESCRIPTION: Specifies the syntax for templates in EBNF notation. Templates are used to combine strings and other values to produce new strings.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_22\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplate = (\n    TemplateLiteral |\n    TemplateInterpolation |\n    TemplateDirective\n)*\nTemplateDirective = TemplateIf | TemplateFor;\n```\n\n----------------------------------------\n\nTITLE: Importing PKCS12 Package in Go\nDESCRIPTION: This snippet imports the go-pkcs12 package and its internal rc2 component. It specifies version v0.5.0 and requires Go 1.19.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/modules.txt#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nsoftware.sslmate.com/src/go-pkcs12\nsoftware.sslmate.com/src/go-pkcs12/internal/rc2\n```\n\n----------------------------------------\n\nTITLE: Defining Splat Operators Syntax in EBNF\nDESCRIPTION: EBNF grammar for splat operators in HCL, which provide convenient access to attributes or elements across multiple items in a collection. Includes both attribute-only and full splat variants.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_16\n\nLANGUAGE: ebnf\nCODE:\n```\nSplat = attrSplat | fullSplat;\nattrSplat = \".\" \"*\" GetAttr*;\nfullSplat = \"[\" \"*\" \"]\" (GetAttr | Index)*;\n```\n\n----------------------------------------\n\nTITLE: Provisioning SynchronizationJob On Demand in Go\nDESCRIPTION: Demonstrates how to trigger an on-demand provisioning run for a synchronization job using `ProvisionSynchronizationJobOnDemand`. It requires a context, a composite ID, a payload specifying the on-demand request details, and operation options. The response model is in `read.Model`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\npayload := synchronizationjob.ProvisionSynchronizationJobOnDemandRequest{\n\t// ...\n}\n\n\nread, err := client.ProvisionSynchronizationJobOnDemand(ctx, id, payload, synchronizationjob.DefaultProvisionSynchronizationJobOnDemandOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Access Operator Syntax in EBNF\nDESCRIPTION: EBNF grammar for the attribute access operator in HCL, which retrieves attribute values from object types using the dot notation followed by an identifier.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_15\n\nLANGUAGE: ebnf\nCODE:\n```\nGetAttr = \".\" Identifier;\n```\n\n----------------------------------------\n\nTITLE: Inserting Colored Substrings with SprintFunc in github.com/fatih/color for Go\nDESCRIPTION: Illustrates the usage of SprintFunc and helper String functions to embed colorized substrings inside larger, mostly non-colorized strings. This is helpful for formatted log lines, warnings, or output where only part of the line needs to be highlighted. Windows support is accounted for by using color.Output, and all examples depend on github.com/fatih/color.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n\n```\n\n----------------------------------------\n\nTITLE: Changelog Version 0.8.0\nDESCRIPTION: Release notes for version 0.8.0 of the Azure AD provider, documenting new data sources, improvements to dependencies, and bug fixes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.8.0 (March 16, 2020)\n\nFEATURES:\n\n* **New Data Source:** `azuread_client_config`\n\nIMPROVEMENTS:\n\n* dependencies: upgrade `azure-sdk-for-go` to `v40.3.0`\n* dependencies: upgrade `go-autorest/autorest` to `v0.10.0`\n* dependencies: upgrade `terraform-plugin-sdk` to `v1.6.0`\n```\n\n----------------------------------------\n\nTITLE: Customizing Multierror Formatting in Go\nDESCRIPTION: Illustrates how to customize the string representation of a `*multierror.Error` by assigning a custom function to its `ErrorFormat` field. This function receives the slice of underlying errors and returns a formatted string.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Get Error Output Example - Console\nDESCRIPTION: This example shows the output from the Go command line tool when attempting (and failing) to fetch the gRPC module from a restricted network. The error message indicates that the import path is unrecognized due to a network timeout, helping users diagnose connectivity problems. No code execution is required; this is purely for informational purposes to assist troubleshooting.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n\n```\n\n----------------------------------------\n\nTITLE: Importing the Microsoft Graph User SDK Package in Go\nDESCRIPTION: This snippet shows the necessary import path to include the Go SDK package for interacting with the Microsoft Graph Users API (beta version). This import makes the `user` package types and functions available.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user\"\n```\n\n----------------------------------------\n\nTITLE: Installing Go OAuth2 Package via Go Get\nDESCRIPTION: This shell command utilizes the Go toolchain's `go get` utility to download and install the `golang.org/x/oauth2` package and its dependencies directly from its source repository into the user's Go workspace (defined by `GOPATH`). This is the standard method for fetching Go packages.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/golang.org/x/oauth2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get golang.org/x/oauth2\n```\n\n----------------------------------------\n\nTITLE: Initializing Domain Client with Authorizer in Go\nDESCRIPTION: This code initializes the domain client with the Microsoft Graph endpoint and assigns an authorizer for authenticating requests. The authorizer must be created and set before making API calls, ensuring all interactions with Microsoft Graph are secure. Essential dependencies include a valid authorizer and the domain client package.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := domain.NewDomainClientWithBaseURI(\\\"https://graph.microsoft.com\\\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Static Call Analysis in Terraform Expression Parsing\nDESCRIPTION: Explains how function call syntax is interpreted statically, where the function name is preserved verbatim and arguments are returned as static expressions without evaluation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Getting SynchronizationJobs Count in Go\nDESCRIPTION: Demonstrates how to get the count of synchronization jobs associated with a service principal using the `GetSynchronizationJobsCount` method. It requires a context, a service principal ID, and operation options. The count is typically part of the response model accessed via `read.Model`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalID(\"servicePrincipalId\")\n\nread, err := client.GetSynchronizationJobsCount(ctx, id, synchronizationjob.DefaultGetSynchronizationJobsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Expression Syntax (Quoted and Heredoc) in EBNF\nDESCRIPTION: Provides the EBNF grammar defining the structure for HCL template expressions. It covers both quoted templates (`\"...\"`, defined in prose) and heredoc templates (`<<IDENTIFIER` or `<<-IDENTIFIER` ... `IDENTIFIER`), specifying the delimiters and referring to prose for content rules.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_9\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateExpr = quotedTemplate | heredocTemplate;\nquotedTemplate = (as defined in prose above);\nheredocTemplate = (\n    (\"<<\" | \"<<-\") Identifier Newline\n    (content as defined in prose above)\n    Identifier Newline\n);\n```\n\n----------------------------------------\n\nTITLE: Installing MessagePack Go Library - shell\nDESCRIPTION: Installs the msgpack/v5 library for Go using go get, ensuring that the correct version (_v5_) is added as a dependency in the go.mod and go.sum files. Requires Go modules to be initialized. The main parameter is the library import path; the command fetches and installs the package.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/msgpack/v5\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions with go-version in Go\nDESCRIPTION: This Go code shows how to convert a list of version strings into sorted semantic version objects. Using version.NewVersion, the snippet converts each string to a Version instance, and then sorts the slice using sort.Sort and version.Collection. It requires both the version package and the sort standard library. The main input is a slice of strings, and the result is a properly sorted slice of version objects, supporting pre-releases and metadata.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Conditionally Returning Multierror based on Content in Go\nDESCRIPTION: Shows the usage of the `ErrorOrNil` method on a `*multierror.Error`. This method returns the `*multierror.Error` itself (as an `error` interface type) only if errors have actually been appended to it; otherwise, it returns `nil`. This avoids returning a non-nil error interface value that points to a nil multierror struct when no errors occurred.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Importing the Directory Role SDK Package in Go\nDESCRIPTION: This snippet shows the necessary import path to include the `directoryrole` SDK package in a Go application. This package provides functionalities to interact with the Microsoft Graph directory roles API.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole\"\n```\n\n----------------------------------------\n\nTITLE: Updating an Authentication Strength Policy via Go SDK\nDESCRIPTION: This snippet demonstrates updating an existing authentication strength policy using the UpdateAuthenticationStrengthPolicy method. It constructs the policy ID and prepares a payload with updated fields, then executes the update with a context and default options. The payload must match the required schema for partial or full updates. On success, the updated policy is returned in the response model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/policies/stable/authenticationstrengthpolicy/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.TODO()\nid := authenticationstrengthpolicy.NewPolicyAuthenticationStrengthPolicyID(\"authenticationStrengthPolicyId\")\n\npayload := authenticationstrengthpolicy.AuthenticationStrengthPolicy{\n\t// ...\n}\n\n\nread, err := client.UpdateAuthenticationStrengthPolicy(ctx, id, payload, authenticationstrengthpolicy.DefaultUpdateAuthenticationStrengthPolicyOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tagparser Dependency - Shell\nDESCRIPTION: This shell snippet provides the command to install the tagparser library using Go's module system. It is required as a prerequisite before utilizing tagparser in a Go project. Users should run this command in their terminal from the project directory where tagparser is required. Installation ensures that the tagparser/v2 module is downloaded and available in the Go workspace.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/tagparser/v2\n```\n\n----------------------------------------\n\nTITLE: Printing Standard Colors with github.com/fatih/color in Go\nDESCRIPTION: Demonstrates printing colored text using standard helper functions provided by github.com/fatih/color. The snippet shows usage of various color helpers for printing text in cyan, blue (with formatted string), red, and magenta. It requires the color package as a dependency; input strings are rendered in corresponding colors with automatic newlines appended when using Color functions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Directory Role Template in Go\nDESCRIPTION: This snippet demonstrates deleting a specific directory role template using the `DeleteDirectoryRoleTemplate` method. It requires a context and the ID of the template to be deleted (`directoryRoleTemplateId`). The response model might be empty or confirm deletion.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\nread, err := client.DeleteDirectoryRoleTemplate(ctx, id, directoryroletemplate.DefaultDeleteDirectoryRoleTemplateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ServicePrincipalClient with Custom Base URI - Go\nDESCRIPTION: Initializes a new ServicePrincipalClient using a custom Microsoft Graph base URI. The client is then assigned an authorizer for authentication. Dependencies include the HashiCorp AzureAD Go SDK and an initialized authorizer. Inputs are the base URI string and authorizer, and it outputs an authenticated ServicePrincipalClient instance.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := serviceprincipal.NewServicePrincipalClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Creating an Entitlement Management Access Package in Go\nDESCRIPTION: This example shows how to use the `CreateEntitlementManagementAccessPackage` method of the client. It requires a context (`ctx`) and an `AccessPackage` payload object containing the details of the package to be created. The snippet includes basic error handling and shows how to access the returned model upon success.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\n\npayload := entitlementmanagementaccesspackage.AccessPackage{\n\t// ...\n}\n\n\nread, err := client.CreateEntitlementManagementAccessPackage(ctx, payload, entitlementmanagementaccesspackage.DefaultCreateEntitlementManagementAccessPackageOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the levenshtein Go Package via go get\nDESCRIPTION: This command uses the Go toolchain's 'go get' command to download and install the 'levenshtein' package from its GitHub repository (github.com/agext/levenshtein). This makes the package available for import in Go projects. Requires the Go development environment to be set up.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/agext/levenshtein/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/agext/levenshtein\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Synchronization Job Resource - Terraform CLI - Shell\nDESCRIPTION: Shows how to import an existing Azure AD synchronization job resource into Terraform state using the azuread_synchronization_job resource type. The import operation requires the Terraform binary (terraform CLI) and the composed unique resource ID, formatted as {servicePrincipalId}/job/{jobId}. The code must be run from a shell environment where terraform is installed and properly authenticated. No resource creation is performed; this command links cloud resources to Terraform's management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/synchronization_job.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_synchronization_job.example 00000000-0000-0000-0000-000000000000/job/dataBricks.f5532fc709734b1a90e8a1fa9fd03a82.8442fd39-2183-419c-8732-74b6ce866bd5\n```\n\n----------------------------------------\n\nTITLE: Using Custom io.Writer Output with github.com/fatih/color in Go\nDESCRIPTION: Shows how to direct colorized output to custom io.Writer implementations rather than standard output. By passing a custom writer to .Fprintln and .Fprint, colored output can be routed to any writer, such as a file, buffer, or network stream. Requires that myWriter or writer variables implement io.Writer, and that github.com/fatih/color is imported.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n\n```\n\n----------------------------------------\n\nTITLE: Basic Marshaling and Unmarshaling with msgpack in Go\nDESCRIPTION: This Go example demonstrates the fundamental usage of the `vmihailenco/msgpack` library. It defines a simple struct `Item`, marshals an instance of it into a MessagePack-encoded byte slice `b` using `msgpack.Marshal`, and then unmarshals the byte slice back into another `Item` variable `item` using `msgpack.Unmarshal`. Basic error handling is shown using `panic`, and the output confirms successful data round-tripping.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleMarshal() {\n\ttype Item struct {\n\t\tFoo string\n\t}\n\n\tb, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar item Item\n\terr = msgpack.Unmarshal(b, &item)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(item.Foo)\n\t// Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context-Aware Actor to run.Group in Go\nDESCRIPTION: This Go snippet demonstrates how to add an actor to a run.Group that leverages context.Context for cancellation. The execute function invokes myProcess and the interrupt function triggers context cancellation. Dependencies include the \"context\" package and run.Group. Key parameters are the context and myProcess; the actor returns any process error and responds to cancel requests. The input is a context instance and outputs are propagated errors; cancellation constraints depend on external context propagation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nctx, cancel := context.WithCancel(context.Background())\\ng.Add(func() error {\\n\\treturn myProcess(ctx, ...)\\n}, func(error) {\\n\\tcancel()\\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Unseen Count for an Azure AD Group using GroupClient in Go\nDESCRIPTION: This snippet shows how to reset the unseen count for an Azure AD group via the `ResetUnseenCount` method of a `GroupClient`. It takes a context, a group ID, and default options for the operation. Standard error handling and response model processing are included.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\nread, err := client.ResetUnseenCount(ctx, id, group.DefaultResetUnseenCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing HashiCorp Azure SDK Domain Package in Go\nDESCRIPTION: This snippet demonstrates how to import the domain package from the HashiCorp Go Azure SDK, enabling access to client and model types for domains management. There are no dependencies besides Go and the referenced package. The import is required to use any domain client functionalities and must be declared at the top of Go files leveraging the SDK.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain\\\"\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Directory Role Membership into Terraform State\nDESCRIPTION: Illustrates the shell command required to import an existing Azure AD directory role membership into the Terraform state for management via the `azuread_directory_role_member` resource. The import command uses a unique ID format combining the Role Object ID and the Member Object ID: `{RoleObjectID}/member/{MemberObjectID}`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/directory_role_member.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_directory_role_member.example 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n----------------------------------------\n\nTITLE: Assigning a Claims Mapping Policy to a Service Principal - Terraform\nDESCRIPTION: Declares a Terraform resource for assigning a claims mapping policy to a service principal in Azure AD. Requires the azuread_claims_mapping_policy and azuread_service_principal resources to exist. The main parameters are claims_mapping_policy_id and service_principal_id, which must be set to the respective IDs. Upon execution, this resource links the given policy to the target service principal, exporting an id for tracking. Required permissions include proper roles for application or directory access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/service_principal_claims_mapping_policy_assignment.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_service_principal_claims_mapping_policy_assignment\" \"app\" {\n  claims_mapping_policy_id = azuread_claims_mapping_policy.my_policy.id\n  service_principal_id     = azuread_service_principal.my_principal.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple HCL API Versions in Go\nDESCRIPTION: This Go code snippet demonstrates importing both HCL 1.x and HCL 2.x as separate package aliases within a single Go project, allowing simultaneous access to both APIs using Go semantic import versioning. The input is the import block itself, and it requires a go.mod file specifying the correct module versions. Outputs are package aliases hcl1 and hcl2 that can be referenced elsewhere in the Go source file.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Provider Creation with Validation and Panic on Bad Namespace in Go\nDESCRIPTION: This Go snippet demonstrates the use of the NewProvider function, highlighting error scenarios in which it will panic. Passing an empty string or reserved placeholders (either '', '-', or '?') as the namespace will trigger a runtime panic. The code clarifies that only fully qualified provider addresses should be used for NewProvider; partial or ambiguous addresses should always be resolved first.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nNewProvider(DefaultProviderRegistryHost, \"\", \"aws\")  // panic\nNewProvider(DefaultProviderRegistryHost, \"-\", \"aws\") // panic\nNewProvider(DefaultProviderRegistryHost, \"?\", \"aws\") // panic\n```\n\n----------------------------------------\n\nTITLE: Wrapping Strings with go-wordwrap in Go\nDESCRIPTION: This Go snippet demonstrates the use of the go-wordwrap package to break a string into multiple lines, each with a maximum specified width. The function WrapString receives a string and a line width as arguments, and returns a new string with line breaks inserted at appropriate points. The result is then printed to standard output using fmt.Println. Requires the 'github.com/mitchellh/go-wordwrap' package and the standard 'fmt' package. Expected input is a single-line string and a positive integer width; output is a multi-line wrapped string.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Directory Role Template in Go\nDESCRIPTION: This snippet shows how to restore a previously deleted directory role template using the `Restore` method. It requires a context and the ID of the deleted template (`directoryRoleTemplateId`). The method returns the restored template object or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\nread, err := client.Restore(ctx, id, directoryroletemplate.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure Demonstrating mapstructure Use Case\nDESCRIPTION: Illustrates a sample JSON payload where the desired Go struct might vary based on the value of the `\"type\"` field. This highlights a scenario where decoding the JSON into a generic `map[string]interface{}` first, inspecting the `\"type\"` key, and then using `mapstructure` to decode into the appropriate specific struct is advantageous compared to a single-pass decoding approach.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Synchronization Secrets with SynchronizationSecretClient in Go\nDESCRIPTION: Illustrates fetching all synchronization secrets associated with a service principal, optionally using batched pagination. Inputs are a context, service principal ID, and default options. The output is a slice of items iterated in a loop. Developers must check for errors and process each secret as needed; requires existing client and valid identifiers.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := synchronizationsecret.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\n// alternatively `client.ListSynchronizationSecrets(ctx, id, synchronizationsecret.DefaultListSynchronizationSecretsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListSynchronizationSecretsComplete(ctx, id, synchronizationsecret.DefaultListSynchronizationSecretsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SynchronizationJob in Go\nDESCRIPTION: Illustrates how to start a paused synchronization job using the `StartSynchronizationJob` method. It requires a context, a composite ID (service principal ID and job ID), and operation options. Check `read.Model` for any response details after error handling.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\nread, err := client.StartSynchronizationJob(ctx, id, synchronizationjob.DefaultStartSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Member Groups via Administrative Unit Client in Go\nDESCRIPTION: Illustrates checking which groups a given administrative unit ID belongs to using the CheckMemberGroupsComplete method. Requires a context, resource ID, payload struct, and operation options; returns a list of group items or an error. Handles pagination internally and suggests batch alternatives.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.CheckMemberGroupsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.CheckMemberGroups(ctx, id, payload, administrativeunit.DefaultCheckMemberGroupsOperationOptions())` can be used to do batched pagination\\nitems, err := client.CheckMemberGroupsComplete(ctx, id, payload, administrativeunit.DefaultCheckMemberGroupsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a go-testing-interface Helper at Runtime in Go\nDESCRIPTION: This snippet illustrates calling the `TestHelper` function, which expects the `testing.T` interface, from a non-test context (the `main` function). It uses `&testing.RuntimeT{}`, the runtime implementation provided by the `go-testing-interface` library, enabling test-like helper execution at runtime. This is useful for scenarios like initializing a development environment with mock data.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc main() {\n    TestHelper(&testing.RuntimeT{})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Syscall Dispatch Function Signatures\nDESCRIPTION: Defines the Go function signatures for the three system call dispatch entry points (`Syscall`, `Syscall6`, `RawSyscall`) implemented in the assembly file `asm_${GOOS}_${GOARCH}.s`. `Syscall` and `Syscall6` handle standard calls with different argument counts, while `RawSyscall` is for low-level use like `ForkExec` and bypasses scheduler notifications. These signatures serve as the Go interface to the underlying assembly implementation.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n  func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\n  func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Adding a Password to a Service Principal - Go\nDESCRIPTION: This code adds a password to an AzureAD service principal by constructing an AddPasswordRequest and invoking the appropriate method. It requires the service principal ID and the password request payload. Inputs are context, ID, AddPasswordRequest, and options; the method returns a response or an error, and the response model can be accessed for further processing.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/serviceprincipal/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := serviceprincipal.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := serviceprincipal.AddPasswordRequest{\n\t// ...\n}\n\n\nread, err := client.AddPassword(ctx, id, payload, serviceprincipal.DefaultAddPasswordOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Logging Levels - Shell\nDESCRIPTION: This pair of shell commands shows how to configure the verbosity and severity level of logging in a gRPC-Go application. The GRPC_GO_LOG_VERBOSITY_LEVEL environment variable sets how much detail to show in logs (higher means more verbose), while GRPC_GO_LOG_SEVERITY_LEVEL sets the minimum log severity to output. These commands should be executed in the shell before running the Go application and require that environment variable support is available.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n\n```\n\n----------------------------------------\n\nTITLE: Importing AzureAD Application API Access Resource - Shell\nDESCRIPTION: Provides the shell command for importing an existing AzureAD application API access configuration into Terraform state. The import command requires the application object ID and the API client ID, formatted as /applications/{app-object-id}/apiAccess/{api-client-id}. Output is the imported Terraform resource, allowing further management via Terraform. This command assumes proper AzureAD and Terraform provider setup; input parameters must reflect actual AzureAD resource IDs.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_api_access.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_api_access.example /applications/00000000-0000-0000-0000-000000000000/apiAccess/11111111-1111-1111-1111-111111111111\n\n```\n\n----------------------------------------\n\nTITLE: Checking Member Objects for a Directory Object via Go SDK\nDESCRIPTION: Shows how to evaluate the member objects (groups, roles, etc.) for a directory object using DirectoryObjectClient.CheckMemberObjectsComplete. Requires context, object ID, a CheckMemberObjectsRequest payload, and appropriate operation options. Outputs are iterated member entities, and the snippet indicates a pattern for batched processing and error handling.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\npayload := directoryobject.CheckMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.CheckMemberObjects(ctx, id, payload, directoryobject.DefaultCheckMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.CheckMemberObjectsComplete(ctx, id, payload, directoryobject.DefaultCheckMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors with github.com/fatih/color in Go\nDESCRIPTION: Provides examples for creating reusable color objects, combining foreground/background and style attributes, and mixing with RGB color codes. Shows how to instantiate colors with styles, print formatted strings, and chain Add/AddBgRGB/AddRGB to mix and reuse color objects for consistent output styling. Requires github.com/fatih/color as a dependency.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n\n// Mix with RGB color codes\ncolor.RGB(255, 128, 0).AddBgRGB(0, 0, 0).Println(\"orange with black background\")\n\ncolor.BgRGB(255, 128, 0).AddRGB(255, 255, 255).Println(\"orange background with white foreground\")\n\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Package Source - Shell\nDESCRIPTION: Changes the working directory to the package source location within the Go workspace. Requires that the previous 'go get' command has succeeded and that the GOPATH environment variable is set. The parameter '$GOPATH/src/google.golang.org/appengine' points to the source directory for development and contributions.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n`cd $GOPATH/src/google.golang.org/appengine`\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple SynchronizationJobs Credentials in Go\nDESCRIPTION: Illustrates how to validate credentials across multiple synchronization jobs associated with a service principal using the `ValidateSynchronizationJobsCredentials` method. It requires a context, a service principal ID, a payload specifying the credentials and application/service principal identifiers, and operation options. The validation results are in `read.Model`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalID(\"servicePrincipalId\")\n\npayload := synchronizationjob.ValidateSynchronizationJobsCredentialsRequest{\n\t// ...\n}\n\n\nread, err := client.ValidateSynchronizationJobsCredentials(ctx, id, payload, synchronizationjob.DefaultValidateSynchronizationJobsCredentialsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Access Package Resource Association with Terraform\nDESCRIPTION: Example showing how to create and configure an access package resource association in Azure AD. Demonstrates setting up a group, catalog, catalog association, access package, and resource package association.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/access_package_resource_package_association.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example-group\"\n  security_enabled = true\n}\n\nresource \"azuread_access_package_catalog\" \"example\" {\n  display_name = \"example-catalog\"\n  description  = \"Example catalog\"\n}\n\nresource \"azuread_access_package_resource_catalog_association\" \"example\" {\n  catalog_id             = azuread_access_package_catalog.example_catalog.id\n  resource_origin_id     = azuread_group.example_group.object_id\n  resource_origin_system = \"AadGroup\"\n}\n\nresource \"azuread_access_package\" \"example\" {\n  display_name = \"example-package\"\n  description  = \"Example Package\"\n  catalog_id   = azuread_access_package_catalog.example_catalog.id\n}\n\nresource \"azuread_access_package_resource_package_association\" \"example\" {\n  access_package_id               = azuread_access_package.example.id\n  catalog_resource_association_id = azuread_access_package_resource_catalog_association.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SynchronizationJobs in Go\nDESCRIPTION: Shows how to list all synchronization jobs for a service principal using the `ListSynchronizationJobsComplete` helper method, which handles pagination automatically. Alternatively, `ListSynchronizationJobs` can be used for manual pagination. It requires a context, a service principal ID, and operation options. The result is a slice of job items.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalID(\"servicePrincipalId\")\n\n// alternatively `client.ListSynchronizationJobs(ctx, id, synchronizationjob.DefaultListSynchronizationJobsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListSynchronizationJobsComplete(ctx, id, synchronizationjob.DefaultListSynchronizationJobsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using go-colorable with Logrus for Colored Logging in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure the logrus logging library to use go-colorable for output. It forces logrus to use color formatting (`ForceColors: true`) and sets the output writer to `colorable.NewColorableStdout()`, ensuring that log messages are displayed with colors even on Windows terminals. It depends on the `logrus` and `go-colorable` packages.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Structural Element Syntax using EBNF\nDESCRIPTION: Provides the EBNF grammar for the core structural elements of HCL configuration. It defines how `ConfigFile`, `Body`, `Attribute`, `Block`, and `OneLineBlock` are constructed from identifiers, expressions, literals, and other structural components. Newlines play a significant role in delimiting these elements.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_3\n\nLANGUAGE: ebnf\nCODE:\n```\nConfigFile   = Body;\nBody         = (Attribute | Block | OneLineBlock)*;\nAttribute    = Identifier \"=\" Expression Newline;\nBlock        = Identifier (StringLit|Identifier)* \"{\" Newline Body \"}\" Newline;\nOneLineBlock = Identifier (StringLit|Identifier)* \"{\" (Identifier \"=\" Expression)? \"}\" Newline;\n```\n\n----------------------------------------\n\nTITLE: Updating a Directory Role Template in Go\nDESCRIPTION: This example demonstrates updating an existing directory role template using the `UpdateDirectoryRoleTemplate` method. It requires a context, the ID of the template to update (`directoryRoleTemplateId`), and a `DirectoryRoleTemplate` payload containing the updated fields. The method returns the updated template object or an error.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\npayload := directoryroletemplate.DirectoryRoleTemplate{\n\t// ...\n}\n\n\nread, err := client.UpdateDirectoryRoleTemplate(ctx, id, payload, directoryroletemplate.DefaultUpdateDirectoryRoleTemplateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Conversion in App Engine Startup Handler - Go\nDESCRIPTION: This Go snippet demonstrates enabling datastore key conversion in the App Engine \"/_ah/start\" handler, supporting migrations between older and newer datastore libraries by calling EnableKeyConversion with the appropriate App Engine context. Dependencies include the \"appengine\" and \"datastore\" packages; ensure import paths use 'google.golang.org/appengine/...'. The handler is attached to the built-in HTTP multiplexer. Parameters are the standard http.ResponseWriter and *http.Request. There is no input or output beyond enabling global key conversion; repeated calls are ignored for safety.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/appengine/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/_ah/start\", func(w http.ResponseWriter, r *http.Request) {\n    datastore.EnableKeyConversion(appengine.NewContext(r))\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Administrative Unit by Object ID in Terraform\nDESCRIPTION: Shows how to retrieve an Azure AD Administrative Unit's information using its object ID. This is useful when you need to query a specific administrative unit using its unique identifier.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/administrative_unit.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_administrative_unit\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Expression Syntax in EBNF\nDESCRIPTION: Provides the EBNF grammar for HCL variable expressions. It shows that accessing a variable's value is done simply by using its `Identifier` (name).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_11\n\nLANGUAGE: ebnf\nCODE:\n```\nVariableExpr = Identifier;\n```\n\n----------------------------------------\n\nTITLE: Deleting SynchronizationJob in Go\nDESCRIPTION: Shows how to delete a specific synchronization job using the `DeleteSynchronizationJob` method. It requires a context, a composite ID containing both the service principal ID and the synchronization job ID, and operation options. The response model (if applicable) is accessed via `read.Model` after error checking.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\nread, err := client.DeleteSynchronizationJob(ctx, id, synchronizationjob.DefaultDeleteSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Mail Tips with MeClient.GetMailTipsComplete - Go\nDESCRIPTION: This snippet retrieves mail tips for the current user using MeClient.GetMailTipsComplete, relying on a GetMailTipsRequest payload. It shows fetching all mail tip items via pagination and iterating over them for processing. Used for assessing potential mail-related issues.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.GetMailTipsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMailTips(ctx, payload, me.DefaultGetMailTipsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMailTipsComplete(ctx, payload, me.DefaultGetMailTipsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Value Syntax (Tuples and Objects) in EBNF\nDESCRIPTION: Provides the EBNF grammar for constructing tuple (`[...]`) and object (`{...}`) collection values in HCL. It specifies how elements are defined using expressions and separated by commas or newlines. For objects, elements consist of a key (Identifier or Expression) and a value (Expression), separated by '=' or ':'.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nCollectionValue = tuple | object;\ntuple = \"[\" (\n    (Expression (( \",\" | Newline) Expression)* \",\"?)?\n) \"]\";\nobject = \"{\" (\n    (objectelem (( \",\" | Newline) objectelem)* \",\"?)?\n) \"}\";\nobjectelem = (Identifier | Expression) (\"=\" | \":\") Expression;\n```\n\n----------------------------------------\n\nTITLE: Listing All Service Principals - Go\nDESCRIPTION: This snippet retrieves a collection of all service principals using the ListServicePrincipalsComplete method, suitable for batched result pagination and processing. Only a context is needed, and standard error and iteration logic applies. Useful for inventory or management tasks.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\n\\n// alternatively `client.ListServicePrincipals(ctx, serviceprincipal.DefaultListServicePrincipalsOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListServicePrincipalsComplete(ctx, serviceprincipal.DefaultListServicePrincipalsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Fork as a Git Remote - Shell\nDESCRIPTION: Adds a remote repository named 'fork' to the git configuration for the current project. The command requires git to be installed and the user to replace 'GITHUB_USERNAME' with their own GitHub username. This enables pushing commits to the user's forked repository for pull requests.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n`git remote add fork git@github.com:GITHUB_USERNAME/appengine.git`\n```\n\n----------------------------------------\n\nTITLE: Importing Google AppEngine Packages in Go\nDESCRIPTION: This snippet lists the required Google AppEngine packages for the project, including datastore, internal components, and remote API functionality.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/modules.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngoogle.golang.org/appengine\ngoogle.golang.org/appengine/datastore\ngoogle.golang.org/appengine/datastore/internal/cloudkey\ngoogle.golang.org/appengine/datastore/internal/cloudpb\ngoogle.golang.org/appengine/internal\ngoogle.golang.org/appengine/internal/app_identity\ngoogle.golang.org/appengine/internal/base\ngoogle.golang.org/appengine/internal/datastore\ngoogle.golang.org/appengine/internal/log\ngoogle.golang.org/appengine/internal/modules\ngoogle.golang.org/appengine/internal/remote_api\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Directory Role Template by ID in Go\nDESCRIPTION: This example shows how to fetch a specific directory role template using the `GetDirectoryRoleTemplate` method. It requires a context and the ID of the desired template (`directoryRoleTemplateId`). The method returns the template object or an error if not found.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroletemplates/stable/directoryroletemplate/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryroletemplate.NewDirectoryRoleTemplateID(\"directoryRoleTemplateId\")\n\nread, err := client.GetDirectoryRoleTemplate(ctx, id, directoryroletemplate.DefaultGetDirectoryRoleTemplateOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Verbosely - Shell\nDESCRIPTION: Executes Go tests recursively across the specified module with verbose logging enabled using 'go test -v'. Assumes Go and project dependencies are already installed and available. The pattern 'google.golang.org/appengine/...' matches all subpackages, and the output includes test logs for each run. Environment variable 'APPENGINE_DEV_APPSERVER' should be set prior to this step.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```\ngo test -v google.golang.org/appengine/...\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing SynchronizationJobClient in Go\nDESCRIPTION: Initializes a new `SynchronizationJobClient` using the base URI for Microsoft Graph. An authorizer must be assigned to the `client.Client.Authorizer` field for authentication.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := synchronizationjob.NewSynchronizationJobClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Directory Roles by IDs in Go\nDESCRIPTION: This Go code demonstrates fetching multiple directory roles based on a list of IDs using `ListGetsByIdsComplete`. It requires a context and a `ListGetsByIdsRequest` payload containing the desired role IDs. The `...Complete` variant handles pagination if the response is large.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryrole.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, directoryrole.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, directoryrole.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory Object via Go SDK\nDESCRIPTION: Describes use of DirectoryObjectClient.CreateDirectoryObject for creating a new directory object in Microsoft Graph. Requires setting up a context and constructing a DirectoryObject payload, and returns a response from which the created model can be extracted. Handles error checking and conditional post-processing of the response model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryobject.DirectoryObject{\n\t// ...\n}\n\n\nread, err := client.CreateDirectoryObject(ctx, payload, directoryobject.DefaultCreateDirectoryObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Enhancements and Bug Fixes - 2.48.0\nDESCRIPTION: Release notes for version 2.48.0 detailing dependency updates and provider configuration fixes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.48.0 (April 11, 2024)\n\nENHANCEMENTS:\n\n* dependencies: updating to `v0.20240411.1104331` of `github.com/hashicorp/go-azure-sdk/sdk`\n\nBUG FIXES:\n\n* provider: fix an issue where the provider was not correctly configured when using a custom metadata host\n```\n\n----------------------------------------\n\nTITLE: Deleting a Service Principal via SDK - Go\nDESCRIPTION: Provides an example code for deleting a service principal, requiring a context object and the principal's ID. This operation is irreversible; ensures error processing and checks for the expected output model. Useful for automated deprovisioning workflows.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/beta/serviceprincipal/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := serviceprincipal.NewServicePrincipalID(\\\"servicePrincipalId\\\")\\n\\nread, err := client.DeleteServicePrincipal(ctx, id, serviceprincipal.DefaultDeleteServicePrincipalOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Google gRPC Packages in Go\nDESCRIPTION: This snippet lists the required Google gRPC packages for the project, including core functionality, balancers, encodings, and internal components. It specifies version v1.69.4 and requires Go 1.22.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/modules.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngoogle.golang.org/grpc\ngoogle.golang.org/grpc/attributes\ngoogle.golang.org/grpc/backoff\ngoogle.golang.org/grpc/balancer\ngoogle.golang.org/grpc/balancer/base\ngoogle.golang.org/grpc/balancer/grpclb/state\ngoogle.golang.org/grpc/balancer/pickfirst\ngoogle.golang.org/grpc/balancer/pickfirst/internal\ngoogle.golang.org/grpc/balancer/pickfirst/pickfirstleaf\ngoogle.golang.org/grpc/balancer/roundrobin\ngoogle.golang.org/grpc/binarylog/grpc_binarylog_v1\ngoogle.golang.org/grpc/channelz\ngoogle.golang.org/grpc/codes\ngoogle.golang.org/grpc/connectivity\ngoogle.golang.org/grpc/credentials\ngoogle.golang.org/grpc/credentials/insecure\ngoogle.golang.org/grpc/encoding\ngoogle.golang.org/grpc/encoding/proto\ngoogle.golang.org/grpc/experimental/stats\ngoogle.golang.org/grpc/grpclog\ngoogle.golang.org/grpc/grpclog/internal\ngoogle.golang.org/grpc/health\ngoogle.golang.org/grpc/health/grpc_health_v1\ngoogle.golang.org/grpc/internal\n# ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Pausing SynchronizationJob in Go\nDESCRIPTION: Illustrates how to pause a running synchronization job using the `PauseSynchronizationJob` method. It requires a context, a composite ID (service principal ID and job ID), and operation options. Check `read.Model` for any response details after handling potential errors.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationjob/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := synchronizationjob.NewServicePrincipalIdSynchronizationJobID(\"servicePrincipalId\", \"synchronizationJobId\")\n\nread, err := client.PauseSynchronizationJob(ctx, id, synchronizationjob.DefaultPauseSynchronizationJobOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Objects by IDs via Go SDK\nDESCRIPTION: Describes the process for batch-fetching directory objects by their IDs using DirectoryObjectClient.ListGetsByIdsComplete. A ListGetsByIdsRequest is supplied, and paginated iteration over results is demonstrated. Error handling and post-retrieval processing are included for robustness.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := directoryobject.ListGetsByIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.ListGetsByIds(ctx, payload, directoryobject.DefaultListGetsByIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGetsByIdsComplete(ctx, payload, directoryobject.DefaultListGetsByIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Password to an Application with ApplicationClient.AddPassword - Go\nDESCRIPTION: This snippet details how to add a password credential to a Microsoft Graph application using ApplicationClient. It creates an AddPasswordRequest, calls AddPassword, and handles both errors and the returned model. Prerequisites include the SDK client, application ID, and payload.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.AddPasswordRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.AddPassword(ctx, id, payload, application.DefaultAddPasswordOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Google Protobuf Packages in Go\nDESCRIPTION: This snippet lists the required Google Protobuf packages for the project, including encoding, internal components, and various protobuf types. It specifies version v1.36.5 and requires Go 1.21.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/modules.txt#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngoogle.golang.org/protobuf/encoding/protojson\ngoogle.golang.org/protobuf/encoding/prototext\ngoogle.golang.org/protobuf/encoding/protowire\ngoogle.golang.org/protobuf/internal/descfmt\ngoogle.golang.org/protobuf/internal/descopts\ngoogle.golang.org/protobuf/internal/detrand\ngoogle.golang.org/protobuf/internal/editiondefaults\ngoogle.golang.org/protobuf/internal/editionssupport\ngoogle.golang.org/protobuf/internal/encoding/defval\ngoogle.golang.org/protobuf/internal/encoding/json\ngoogle.golang.org/protobuf/internal/encoding/messageset\ngoogle.golang.org/protobuf/internal/encoding/tag\ngoogle.golang.org/protobuf/internal/encoding/text\ngoogle.golang.org/protobuf/internal/errors\ngoogle.golang.org/protobuf/internal/filedesc\ngoogle.golang.org/protobuf/internal/filetype\ngoogle.golang.org/protobuf/internal/flags\ngoogle.golang.org/protobuf/internal/genid\ngoogle.golang.org/protobuf/internal/impl\ngoogle.golang.org/protobuf/internal/order\ngoogle.golang.org/protobuf/internal/pragma\ngoogle.golang.org/protobuf/internal/protolazy\ngoogle.golang.org/protobuf/internal/set\ngoogle.golang.org/protobuf/internal/strs\ngoogle.golang.org/protobuf/internal/version\ngoogle.golang.org/protobuf/proto\ngoogle.golang.org/protobuf/protoadapt\ngoogle.golang.org/protobuf/reflect/protodesc\ngoogle.golang.org/protobuf/reflect/protoreflect\ngoogle.golang.org/protobuf/reflect/protoregistry\ngoogle.golang.org/protobuf/runtime/protoiface\ngoogle.golang.org/protobuf/runtime/protoimpl\ngoogle.golang.org/protobuf/types/descriptorpb\ngoogle.golang.org/protobuf/types/gofeaturespb\ngoogle.golang.org/protobuf/types/known/anypb\ngoogle.golang.org/protobuf/types/known/durationpb\ngoogle.golang.org/protobuf/types/known/emptypb\ngoogle.golang.org/protobuf/types/known/timestamppb\n```\n\n----------------------------------------\n\nTITLE: Installing the go-colorable Package using Go Get\nDESCRIPTION: This shell command installs the go-colorable package using the standard Go toolchain command `go get`. Running this command downloads the package source code from GitHub and installs it into the Go workspace, making it available for use in Go projects. Requires the Go compiler and tools to be installed.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```\n$ go get github.com/mattn/go-colorable\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing the Microsoft Graph User Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize the `UserClient` for the Microsoft Graph Users API. It creates a new client instance pointing to the standard Microsoft Graph base URI and requires an `authorizer` (not shown) to be assigned for handling authentication.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := user.NewUserClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Assigning a License to a User using Go SDK\nDESCRIPTION: This code demonstrates how to assign a license to a specific user using the `UserClient.AssignLicense` method. It requires a `context`, the target `UserID`, and an `AssignLicenseRequest` payload containing license details. The response model or error is handled subsequently.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\npayload := user.AssignLicenseRequest{\n\t// ...\n}\n\n\nread, err := client.AssignLicense(ctx, id, payload, user.DefaultAssignLicenseOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Administrative Unit via Client in Go\nDESCRIPTION: Covers deletion of an administrative unit using DeleteAdministrativeUnit, given the unit's ID and operation options. Handles the error and checks for a non-nil response model, which might include metadata after deleting the object.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\nread, err := client.DeleteAdministrativeUnit(ctx, id, administrativeunit.DefaultDeleteAdministrativeUnitOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Metadata Generator with Go - Go\nDESCRIPTION: This code snippet demonstrates how to invoke the metadata generator for service definitions using the Go command line. It runs the main.go file and provides the \\'-path\\' argument to point to the root directory. The main.go and related files must be present and properly set up for metadata generation. The required input is the root path, and the output is generated categories, definitions, and labels. It is intended to be called after editing service lists, often via go:generate.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/internal/tools/generator-services/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run main.go -path=../../path/to/root-directory\n```\n\n----------------------------------------\n\nTITLE: Deleting a Directory Object via Go SDK\nDESCRIPTION: Presents a snippet for deleting an existing directory object by ID using DirectoryObjectClient.DeleteDirectoryObject. Inputs are context, target object ID, and proper operation options. The response may contain a model for the deleted object, and robust error-handling is demonstrated.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\nread, err := client.DeleteDirectoryObject(ctx, id, directoryobject.DefaultDeleteDirectoryObjectOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Interpolation Syntax in EBNF\nDESCRIPTION: Specifies the syntax for template interpolations in EBNF notation. Interpolations evaluate expressions and embed their results in the template.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_23\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateInterpolation = (\"${\" | \"${~\") Expression (\"}\" | \"~}\");\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.ListGroups in Go\nDESCRIPTION: This example shows how to list all groups using `ListGroupsComplete`. It requires a `context`. The `Complete` function handles pagination automatically to retrieve all groups. The `ListGroups` method can be used for manual batch pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListGroups(ctx, group.DefaultListGroupsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListGroupsComplete(ctx, group.DefaultListGroupsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Access Package Catalog Role by Display Name\nDESCRIPTION: Demonstrates how to look up an access package catalog role using its display name in Terraform. This example shows the basic configuration needed to retrieve role information.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package_catalog_role.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package_catalog_role\" \"example\" {\n  display_name = \"Catalog owner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying User Service Provisioning using Microsoft Graph SDK in Go\nDESCRIPTION: Example demonstrating the use of `UserClient.RetryServiceProvisioning` to retry the provisioning of a user to a target service when it's in an error state. Requires context and the `UserID` of the user. Includes standard error handling and response model access.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/stable/user/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.RetryServiceProvisioning(ctx, id, user.DefaultRetryServiceProvisioningOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Performing a Basic GET Request with go-retryablehttp in Go\nDESCRIPTION: This snippet shows a simple GET request using retryablehttp.Get. It functions similarly to http.Get but incorporates automatic retries with exponential backoff if the initial request fails due to connection errors or receives a 5xx response code (excluding 501). The response is a standard *http.Response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template For Directive Syntax in EBNF\nDESCRIPTION: Specifies the syntax for the template for directive in EBNF notation. This directive allows iteration over collections to produce repeated sub-templates.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_25\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateFor = (\n    (\"%{\" | \"%{~\") \"for\" Identifier (\",\" Identifier) \"in\" Expression (\"}\" | \"~}\")\n    Template\n    (\"%{\" | \"%{~\") \"endfor\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Unsetting the Verified Publisher for an Application with ApplicationClient.UnsetVerifiedPublisher in Go\nDESCRIPTION: Shows removal of a verified publisher designation from an application using UnsetVerifiedPublisher. Requires a context, application ID, and default operation options. Returns a model with the updated publisher state on success.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\nread, err := client.UnsetVerifiedPublisher(ctx, id, application.DefaultUnsetVerifiedPublisherOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Unblocking Managed App for User using Go SDK\nDESCRIPTION: This example shows how to unblock a managed app for a specific user using `UserClient.CreateUnblockManagedApp`. It requires a `context` and the `UserID`. This action is typically related to Intune or MAM policies.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/users/beta/user/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := user.NewUserID(\"userId\")\n\nread, err := client.CreateUnblockManagedApp(ctx, id, user.DefaultCreateUnblockManagedAppOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Property Creation with ApplicationClient.CreateValidatesProperty - Go\nDESCRIPTION: This example demonstrates how to validate the properties of a to-be-created application using ApplicationClient. By sending a CreateValidatesPropertyRequest, it ensures property values conform to constraints. Expected inputs are the request payload and context, with the model representing validation results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.CreateValidatesPropertyRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateValidatesProperty(ctx, payload, application.DefaultCreateValidatesPropertyOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Exchange IDs with MeClient.TranslateExchangeIdsComplete - Go\nDESCRIPTION: This code demonstrates translating legacy or alternate Exchange IDs to modern identifiers by calling MeClient.TranslateExchangeIdsComplete. The TranslateExchangeIdsRequest payload specifies IDs to translate, and iteration covers the results. Useful for mailbox or meeting item interoperability.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/me/stable/me/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := me.TranslateExchangeIdsRequest{\n\t// ...\n}\n\n\n// alternatively `client.TranslateExchangeIds(ctx, payload, me.DefaultTranslateExchangeIdsOperationOptions())` can be used to do batched pagination\nitems, err := client.TranslateExchangeIdsComplete(ctx, payload, me.DefaultTranslateExchangeIdsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a Deleted Directory Role in Go\nDESCRIPTION: This Go snippet shows how to restore a previously deleted directory role using the `Restore` method. It requires a context and the `DirectoryRoleID` of the role to be restored (likely from the deleted items container).\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryrole.NewDirectoryRoleID(\"directoryRoleId\")\n\nread, err := client.Restore(ctx, id, directoryrole.DefaultRestoreOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Listing HCL Operators and Delimiters\nDESCRIPTION: Enumerates the character sequences recognized as operators, delimiters, and other special tokens within the HCL syntax. These symbols are fundamental building blocks for constructing HCL expressions and structures.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+    &&   ==   <    :    {    [    (    ${\n-    ||   !=   >    ?    }    ]    )    %{\n*    !         <=        =         .\n/              >=        =>        ,\n%                                  ...\n```\n\n----------------------------------------\n\nTITLE: Defining Operations Syntax in EBNF\nDESCRIPTION: EBNF grammar for unary and binary operations in HCL, including comparison, arithmetic, and logical operators. Includes operator precedence levels where higher values bind tighter.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_17\n\nLANGUAGE: ebnf\nCODE:\n```\nOperation = unaryOp | binaryOp;\nunaryOp = (\"-\" | \"!\") ExprTerm;\nbinaryOp = ExprTerm binaryOperator ExprTerm;\nbinaryOperator = compareOperator | arithmeticOperator | logicOperator;\ncompareOperator = \"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\";\narithmeticOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"%\";\nlogicOperator = \"&&\" | \"||\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Log Values with hclog.Fmt() in Go\nDESCRIPTION: This snippet demonstrates using `hclog.Fmt()` within a log call to format a value using `Printf`-style verbs. It logs the `totalBandwidth` variable formatted as a string (\"200 GB/s\") associated with the key \"bandwidth\".\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n```go\ntotalBandwidth := 200\nappLogger.Info(\"total bandwidth exceeded\", \"bandwidth\", hclog.Fmt(\"%d GB/s\", totalBandwidth))\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Microsoft Graph Domain via DomainClient in Go\nDESCRIPTION: This example illustrates how to create a new domain by building a Domain struct payload and calling the CreateDomain method with context, payload, and default options. It checks for errors in the response and inspects the returned model object. Dependencies include the domain client, the context package, and the Domain struct definition; required parameters are the payload and operation options. Expected output is a response containing the new domain model if successful.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\npayload := domain.Domain{\n\t// ...\n}\n\n\nread, err := client.CreateDomain(ctx, payload, domain.DefaultCreateDomainOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Entitlement Management Access Packages in Go\nDESCRIPTION: This example demonstrates how to retrieve the total number of entitlement management access packages using the `GetEntitlementManagementAccessPackagesCount` method. It requires a context (`ctx`) and uses default options. Basic error handling and response processing are shown.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\n\n\nread, err := client.GetEntitlementManagementAccessPackagesCount(ctx, entitlementmanagementaccesspackage.DefaultGetEntitlementManagementAccessPackagesCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Synchronization Job On-Demand Provisioning in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to set up the necessary Azure AD resources (group, application from template, service principal, synchronization secret, synchronization job) and then use the `azuread_synchronization_job_provision_on_demand` resource to trigger on-demand provisioning for a specific Azure AD group. It requires appropriate API permissions (`Synchronization.ReadWrite.All`) when authenticating with a service principal. The `parameter` block specifies the target object (`subject`) and the `rule_id` to apply, which must be obtained from the synchronization job's schema.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/synchronization_job_provision_on_demand.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_group\" \"example\" {\n  display_name     = \"example\"\n  owners           = [data.azuread_client_config.current.object_id]\n  security_enabled = true\n}\n\ndata \"azuread_application_template\" \"example\" {\n  display_name = \"Azure Databricks SCIM Provisioning Connector\"\n}\n\nresource \"azuread_application_from_template\" \"example\" {\n  display_name = \"example\"\n  template_id  = data.azuread_application_template.example.template_id\n}\n\ndata \"azuread_service_principal\" \"example\" {\n  object_id = azuread_application_from_template.example.service_principal_object_id\n}\n\nresource \"azuread_synchronization_secret\" \"example\" {\n  service_principal_id = data.azuread_service_principal.example.id\n\n  credential {\n    key   = \"BaseAddress\"\n    value = \"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\"\n  }\n  credential {\n    key   = \"SecretToken\"\n    value = \"some-token\"\n  }\n}\n\nresource \"azuread_synchronization_job\" \"example\" {\n  service_principal_id = data.azuread_service_principal.example.id\n  template_id          = \"dataBricks\"\n  enabled              = true\n}\n\nresource \"azuread_synchronization_job_provision_on_demand\" \"example\" {\n  service_principal_id   = azuread_synchronization_job.example.service_principal_id\n  synchronization_job_id = azuread_synchronization_job.example.id\n  parameter {\n    # see specific synchronization schema for rule id https://learn.microsoft.com/en-us/graph/api/synchronization-synchronizationschema-get?view=graph-rest-beta\n    rule_id = \"\"\n    subject {\n      object_id        = azuread_group.example.object_id\n      object_type_name = \"Group\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting an Entitlement Management Access Package in Go\nDESCRIPTION: This example illustrates retrieving a specific access package by its ID using the `GetEntitlementManagementAccessPackage` method. It requires a context (`ctx`) and an `IdentityGovernanceEntitlementManagementAccessPackageID`. The snippet includes standard error handling and access to the returned model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/identitygovernance/beta/entitlementmanagementaccesspackage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.TODO()\nid := entitlementmanagementaccesspackage.NewIdentityGovernanceEntitlementManagementAccessPackageID(\"accessPackageId\")\n\nread, err := client.GetEntitlementManagementAccessPackage(ctx, id, entitlementmanagementaccesspackage.DefaultGetEntitlementManagementAccessPackageOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure Go Library via go get\nDESCRIPTION: Demonstrates the standard command to install the `mapstructure` Go library using the `go get` tool. This command fetches the package from its GitHub repository and installs it into the Go workspace. Requires Go to be installed and configured.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Force Deleting a Domain via DomainClient in Go\nDESCRIPTION: This snippet showcases force deleting a domain using the client and a CreateForceDeleteRequest payload. It constructs a domain ID and payload, invokes CreateForceDelete, and processes the result or error. Dependencies consist of client, DomainID and CreateForceDeleteRequest definitions. The method returns a result, which may include the deleted domain or operation metadata.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\npayload := domain.CreateForceDeleteRequest{\n\t// ...\n}\n\n\nread, err := client.CreateForceDelete(ctx, id, payload, domain.DefaultCreateForceDeleteOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects via Administrative Unit Client in Go\nDESCRIPTION: Illustrates how to retrieve all objects that are members of a specified administrative unit using GetMemberObjectsComplete, with support for batched results. Requires structuring the payload correctly and managing the complete collection of returned items.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\npayload := administrativeunit.GetMemberObjectsRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.GetMemberObjects(ctx, id, payload, administrativeunit.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, administrativeunit.DefaultGetMemberObjectsOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Access Package Catalog Role by Object ID\nDESCRIPTION: Shows how to look up an access package catalog role using its object ID in Terraform. This approach provides a more precise way to identify a specific role.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/access_package_catalog_role.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_access_package_catalog_role\" \"example\" {\n  object_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output Using hclog.Fmt()\nDESCRIPTION: This shows the log output generated when `hclog.Fmt()` is used. The value associated with the \"bandwidth\" key is the formatted string produced by `hclog.Fmt()`.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n```text\n... [INFO ] my-app: total bandwidth exceeded: bandwidth=\\\"200 GB/s\\\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Library using Go Get\nDESCRIPTION: This shell command demonstrates the standard procedure for installing the 'copystructure' Go library using the 'go get' tool. It fetches the package from the specified GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Objects with Pagination via Go SDK\nDESCRIPTION: Provides an example of listing all directory objects using DirectoryObjectClient.ListDirectoryObjectsComplete, which supports paging through multiple objects. The code shows context setup, paginated retrieval, iteration over items, and basic error handling. No explicit input payload is needed for default listing behavior.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\n// alternatively `client.ListDirectoryObjects(ctx, directoryobject.DefaultListDirectoryObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.ListDirectoryObjectsComplete(ctx, directoryobject.DefaultListDirectoryObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GetsUserOwnedObject via Administrative Unit Client in Go\nDESCRIPTION: Demonstrates the creation of a GetsUserOwnedObject through the CreateGetsUserOwnedObject method, requiring a context and a specific request payload. Captures the response and underlying model object, facilitating actions on user-owned objects linked to administrative units.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := administrativeunit.CreateGetsUserOwnedObjectRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.CreateGetsUserOwnedObject(ctx, payload, administrativeunit.DefaultCreateGetsUserOwnedObjectOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template If Directive Syntax in EBNF\nDESCRIPTION: Specifies the syntax for the template if directive in EBNF notation. This directive allows conditional inclusion of sub-templates.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_24\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateIf = (\n    (\"%{\" | \"%{~\") \"if\" Expression (\"}\" | \"~}\")\n    Template\n    (\n        (\"%{\" | \"%{~\") \"else\" (\"}\" | \"~}\")\n        Template\n    )?\n    (\"%{\" | \"%{~\") \"endif\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Azure AD Groups by Display Names\nDESCRIPTION: Looks up Azure AD groups by their display names. Returns the matching groups' object IDs and display names.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/groups.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"azuread_groups\" \"example\" {\n  display_names = [\"group-a\", \"group-b\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling GroupClient.GetMemberObjects in Go\nDESCRIPTION: This example shows how to retrieve the objects that are members of a specific group using `GetMemberObjectsComplete`. It requires a `context`, the `groupID`, and a `payload` of type `group.GetMemberObjectsRequest`. The `Complete` function handles pagination automatically, while `GetMemberObjects` supports manual batch pagination.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/groups/beta/group/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := group.NewGroupID(\"groupId\")\n\npayload := group.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, group.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, group.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Arithmetic Operators in HCL\nDESCRIPTION: Demonstrates the syntax for arithmetic operators in HCL. These operators apply to number values and produce number results.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\na + b   sum        (addition)\na - b   difference (subtraction)\na * b   product    (multiplication)\na / b   quotient   (division)\na % b   remainder  (modulo)\n-a      negation\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Application from Template in Terraform\nDESCRIPTION: This snippet shows the command to import an existing Azure AD application created from a template into Terraform state. It requires the template ID, application object ID, and service principal object ID.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_from_template.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_application_from_template.example /applicationTemplates/00000000-0000-0000-0000-000000000000/instantiate/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n----------------------------------------\n\nTITLE: Listing Available Extension Properties with ApplicationClient.ListGetsAvailableExtensionProperties in Go\nDESCRIPTION: Shows how to list available extension properties for applications, using ListGetsAvailableExtensionPropertiesComplete for batched pagination. Takes a context and ListGetsAvailableExtensionPropertiesRequest payload, processes results in a loop. Useful for dynamic schema discovery or extension management.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/stable/application/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\n\\npayload := application.ListGetsAvailableExtensionPropertiesRequest{\\n\\t// ...\\n}\\n\\n\\n// alternatively `client.ListGetsAvailableExtensionProperties(ctx, payload, application.DefaultListGetsAvailableExtensionPropertiesOperationOptions())` can be used to do batched pagination\\nitems, err := client.ListGetsAvailableExtensionPropertiesComplete(ctx, payload, application.DefaultListGetsAvailableExtensionPropertiesOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nfor _, item := range items {\\n\\t// do something\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Application Templates using Go SDK\nDESCRIPTION: Shows how to retrieve the total count of available application templates in Microsoft Graph. It uses the `GetsCount` method with a context and default options, followed by error handling and processing the count from the returned model.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applicationtemplates/stable/applicationtemplate/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\n\n\nread, err := client.GetsCount(ctx, applicationtemplate.DefaultGetsCountOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring an Application using ApplicationClient.Restore - Go\nDESCRIPTION: This snippet details restoring a soft-deleted application using ApplicationClient. It provides the application ID and a RestoreRequest payload, then handles the response. Useful for undoing accidental deletions if supported by the API version.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/applications/beta/application/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := application.NewApplicationID(\\\"applicationId\\\")\\n\\npayload := application.RestoreRequest{\\n\\t// ...\\n}\\n\\n\\nread, err := client.Restore(ctx, id, payload, application.DefaultRestoreOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure AD Group Using Terraform Shell Command\nDESCRIPTION: This shell command demonstrates how to import an Azure Active Directory group into Terraform state using the AzureAD provider. It requires Terraform to be installed and assumes there is an existing resource block for 'azuread_group_without_members.my_group' in the Terraform configuration. The required parameter is the Azure AD group's object ID; this is specified at the end of the command. Successful use imports the group's state for management by Terraform. Outputs include recorded state information for the group in the Terraform state file.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/group_without_members.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuread_group_without_members.my_group /groups/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Promoting a Domain via DomainClient in Go\nDESCRIPTION: This snippet demonstrates promoting a domain by constructing the domain ID and invoking the CreatePromote method with context and default options. After the call, it checks for errors and accesses the returned model. Dependencies include the domain client, context, and a valid domain ID. No payload is required for this operation, and success is indicated by a populated model in the response.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/domains/stable/domain/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := domain.NewDomainID(\\\"domainId\\\")\n\nread, err := client.CreatePromote(ctx, id, domain.DefaultCreatePromoteOperationOptions())\nif err != nil {\n\t// handle the error\n}\nif model := read.Model; model != nil {\n\t// do something with the model/response object\n}\n```\n\n----------------------------------------\n\nTITLE: Azure AD Domains Timeout Configuration\nDESCRIPTION: Example showing the timeout configuration block for the azuread_domains data source. This allows specifying custom timeouts for create operations.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/domains.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ntimeouts {\n  create = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Member Objects for a Directory Object via Go SDK\nDESCRIPTION: Illustrates use of DirectoryObjectClient.GetMemberObjectsComplete to retrieve member objects related to a specified directory object. The demonstration includes payload construction, client invocation, and iteration over results, handling error cases and leveraging the SDK's pagination capabilities.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryobjects/stable/directoryobject/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\nid := directoryobject.NewDirectoryObjectID(\"directoryObjectId\")\n\npayload := directoryobject.GetMemberObjectsRequest{\n\t// ...\n}\n\n\n// alternatively `client.GetMemberObjects(ctx, id, payload, directoryobject.DefaultGetMemberObjectsOperationOptions())` can be used to do batched pagination\nitems, err := client.GetMemberObjectsComplete(ctx, id, payload, directoryobject.DefaultGetMemberObjectsOperationOptions())\nif err != nil {\n\t// handle the error\n}\nfor _, item := range items {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Administrative Unit via Client in Go\nDESCRIPTION: Shows how to fetch the details of an existing administrative unit using GetAdministrativeUnit with the appropriate ID, operation options, and error handling. The response includes data mapped to the model for further processing or inspection.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/administrativeunits/beta/administrativeunit/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nctx := context.TODO()\\nid := administrativeunit.NewAdministrativeUnitID(\\\"administrativeUnitId\\\")\\n\\nread, err := client.GetAdministrativeUnit(ctx, id, administrativeunit.DefaultGetAdministrativeUnitOperationOptions())\\nif err != nil {\\n\\t// handle the error\\n}\\nif model := read.Model; model != nil {\\n\\t// do something with the model/response object\\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Displaying Struct Tags with tagparser - Go\nDESCRIPTION: This Go snippet demonstrates how to use the tagparser library to parse a struct tag string and output both its name and parsed key-value options. It requires the tagparser module (installed via go get) and the fmt package for output. The key input parameter is a string containing struct tag notation; the output consists of the base tag name and a map of parsed options, both printed to standard output. This example is configured for Go test's Example convention and assumes the tagparser package has been properly imported.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleParse() {\n\ttag := tagparser.Parse(\"some_name,key:value,key2:'complex value'\")\n\tfmt.Println(tag.Name)\n\tfmt.Println(tag.Options)\n\t// Output: some_name\n\t// map[key:value key2:'complex value']\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Version Update - 2.49.0\nDESCRIPTION: Release notes for version 2.49.0 including new data sources, resources and various enhancements.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.49.0 (May 09, 2024)\n\nFEATURES:\n\n* **New Data Source:** `azuread_group_role_management_policy`\n* **New Resource:** `azuread_group_role_management_policy`\n* **New Resource:** `azuread_privileged_access_group_assignment_schedule`\n* **New Resource:** `azuread_privileged_access_group_eligibility_schedule`\n* **New Resource:** `azuread_synchronization_job_provision_on_demand`\n```\n\n----------------------------------------\n\nTITLE: Importing SynchronizationSecret SDK in Go\nDESCRIPTION: Demonstrates how to import the SynchronizationSecret SDK package for access to Microsoft Graph Service Principal operations via Go. Necessary prior to any client initialization or operation calls. No parameters or output expected; this is required as the first step in any Go file utilizing these SDK features.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/hashicorp/go-azure-sdk/microsoft-graph/serviceprincipals/stable/synchronizationsecret\\\"\n```\n\n----------------------------------------\n\nTITLE: Initializing the Directory Role Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a `DirectoryRoleClient`. It requires specifying the base URI for the Microsoft Graph API and setting an appropriate authorizer (e.g., obtained via Azure authentication) on the underlying client.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/go-azure-sdk/microsoft-graph/directoryroles/stable/directoryrole/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := directoryrole.NewDirectoryRoleClientWithBaseURI(\"https://graph.microsoft.com\")\nclient.Client.Authorizer = authorizer\n```\n\n----------------------------------------\n\nTITLE: Defining String Literal Syntax in EBNF\nDESCRIPTION: Provides the EBNF grammar for HCL string literals (`\"...\"`). This syntax is a restricted form of quoted template expressions, permitting escape sequences but disallowing template interpolation or directive sequences.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_10\n\nLANGUAGE: ebnf\nCODE:\n```\nStringLit = '\"' (quoted literals as defined in prose above) '\"';\n```\n\n----------------------------------------\n\nTITLE: Azure AD Group Timeouts Configuration\nDESCRIPTION: Example showing how to specify operation timeouts for the Azure AD group data source. The create operation defaults to 5 minutes.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/data-sources/group.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ntimeouts {\n  create = \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Known Clients for an Azure AD Application with Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define two Azure AD application registrations (`example` and `client`) and then use the `azuread_application_known_clients` resource to associate the `client` application's client ID as a known client for the `example` application. It requires the `application_id` of the main application (obtained from `azuread_application_registration.example.id`) and a list of `known_client_ids` (containing `azuread_application_registration.client.client_id`). This setup pre-authorizes the client application.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/docs/resources/application_known_clients.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"azuread_application_registration\" \"example\" {\n  display_name = \"example\"\n}\n\nresource \"azuread_application_registration\" \"client\" {\n  display_name = \"example client\"\n}\n\nresource \"azuread_application_known_clients\" \"example\" {\n  application_id = azuread_application_registration.example.id\n  known_client_ids = [\n    azuread_application_registration.client.client_id,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Go Dependency with go get - Shell\nDESCRIPTION: Retrieves the specified Go package and its dependencies for local development using the 'go get -d' command. Prerequisites include having Go installed and a configured GOPATH. Key parameter is the package path 'google.golang.org/appengine'; the '-d' flag downloads the package source without installing it. This command outputs files in the GOPATH for further modification.\nSOURCE: https://github.com/hashicorp/terraform-provider-azuread/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n`go get -d google.golang.org/appengine`\n```"
  }
]