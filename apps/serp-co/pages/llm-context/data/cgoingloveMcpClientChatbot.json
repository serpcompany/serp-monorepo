[
  {
    "owner": "cgoinglove",
    "repo": "mcp-client-chatbot",
    "content": "TITLE: Environment Variables Configuration (.env)\nDESCRIPTION: This snippet shows the required environment variables for the MCP Client Chatbot. `GOOGLE_GENERATIVE_AI_API_KEY` and `OPENAI_API_KEY` are needed to connect to the respective AI model providers. The `ANTHROPIC_API_KEY` is commented out but can be added if Anthropic is being used. `USE_FILE_SYSTEM_DB` and `DATABASE_URL` are used to configure the database connection, switching between SQLite and PostgreSQL.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/README.md#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nGOOGLE_GENERATIVE_AI_API_KEY=****\nOPENAI_API_KEY=****\n# ANTHROPIC_API_KEY=****\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This code snippet shows the required environment variables for configuring the AI providers.  The `.env` file is created by the `pnpm initial` command. The snippet configures API keys for Google, OpenAI, and Anthropic.  SQLite is the default database but PostgreSQL can be enabled by setting `USE_FILE_SYSTEM_DB=false` and configuring the `DATABASE_URL`.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/ko.md#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nGOOGLE_GENERATIVE_AI_API_KEY=****\nOPENAI_API_KEY=****\n# ANTHROPIC_API_KEY=****\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Start Dev Server (pnpm)\nDESCRIPTION: These commands install the project dependencies, initialize the project (creating .env and setting up the database), and start the development server. The `pnpm initial` command is crucial for setting up the environment and the SQLite database by default, or preparing for PostgreSQL if configured.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Install dependencies\npnpm i\n\n# 2. Initialize project (creates .env, sets up DB)\npnpm initial\n\n# 3. Start dev server\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: These commands install the project dependencies using pnpm, initialize the project by creating a .env file and setting up the database, and then start the development server.  It assumes that pnpm is installed. After running these commands, the application can be accessed in a web browser at http://localhost:3000.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/ko.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# 1. 의존성 설치\npnpm i\n\n# 2. 프로젝트 초기화 (.env 파일 생성 및 DB 설정 포함)\npnpm initial\n\n# 3. 개발 서버 실행\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Custom MCP Server Logic (typescript)\nDESCRIPTION: This snippet indicates where custom logic for the MCP server can be implemented. By modifying the `./custom-mcp-server/index.ts` file, users can define their own tool integrations and workflows within the MCP environment.  This enables users to tailor the chatbot's functionality to their specific needs.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEdit `./custom-mcp-server/index.ts` to implement your own logic.\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Supabase Backend (JSON)\nDESCRIPTION: This JSON configuration enables Supabase as the backend server for the MCP. It specifies the command to execute (@supabase/mcp-server-supabase), includes necessary arguments like the access token, and is used to interact with the Supabase project.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/use-cases/supabase.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"command\": \"npx\",\n  \"args\": [\n    \"-y\",\n    \"@supabase/mcp-server-supabase@latest\",\n    \"--access-token\",\n    \"<personal-access-token>\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Insert a Todo Item (SQL)\nDESCRIPTION: This SQL query is generated by the chatbot to insert a new todo item into the 'todo' table. The 'task' is set to \"Run for 1 hour this evening\" and the 'is_complete' flag is set to FALSE, showing how the natural language prompt translates to a database operation.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/use-cases/supabase.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO todo (task, is_complete) VALUES ('Run for 1 hour this evening', FALSE);\n```\n\n----------------------------------------\n\nTITLE: Prompt to Add Todo Item with Query Display (Text)\nDESCRIPTION: This text prompt instructs the chatbot to add a todo item, \"Run for 1 hour this evening,\" to the 'todo' table, and also to display the SQL query used to add it. This shows how to create a record in the database and understand the underlying process.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/use-cases/supabase.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nAdd a todo: Run for 1 hour this evening. Also, show the query used to add it.\n```\n\n----------------------------------------\n\nTITLE: Prompt to Create Supabase Project and Table (Text)\nDESCRIPTION: This text prompt instructs the chatbot to create a new Supabase project named 'my-project' and a 'todo' table within it. It's an example of how natural language can be used to initiate database operations via the MCP and a connected LLM.\nSOURCE: https://github.com/cgoinglove/mcp-client-chatbot/blob/main/docs/use-cases/supabase.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nCreate a Supabase project named 'my-project' and create a 'todo' table.\n```"
  }
]