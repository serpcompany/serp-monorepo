[
  {
    "owner": "caido",
    "repo": "doc-developer",
    "content": "TITLE: Configuring Caido Plugin using TypeScript Configuration File\nDESCRIPTION: Example configuration for a Caido plugin that demonstrates setting up both frontend and backend components. The configuration includes plugin metadata, author information, and specific settings for frontend and backend plugins including asset management and directory structure.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/config.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@caido-community/dev\";\n\nexport default defineConfig({\n  id: \"my-plugin\",\n  name: \"My Plugin\",\n  description: \"A plugin for Caido\",\n  version: \"0.0.0\",\n  author: {\n    name: \"Caido Labs Inc.\",\n    email: \"dev@caido.io\",\n    url: \"https://caido.io\",\n  },\n  plugins: [\n    {\n      kind: \"frontend\",\n      id: \"my-frontend\",\n      name: \"My Frontend\",\n      root: \"packages/my-frontend\",\n      backend: {\n        id: \"my-backend\",\n      },\n      assets: [\"my-assets/*.png\"],\n    },\n    {\n      kind: \"backend\",\n      id: \"my-backend\",\n      name: \"My Backend\",\n      root: \"packages/my-backend\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Caido Plugin Structure with manifest.json\nDESCRIPTION: This example shows the structure of a manifest.json file that defines a plugin package for Caido. It includes plugin metadata, frontend and backend plugin configurations, and links between components.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/essentials/package.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"authmatrix\",\n  \"name\": \"AuthMatrix\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Grid-based authorization testing across multiple users and roles.\",\n  \"author\": {\n    \"name\": \"Caido Labs Inc.\",\n    \"email\": \"dev@caido.io\",\n    \"url\": \"https://github.com/caido-community/authmatrix\"\n  },\n  \"plugins\": [\n    {\n      \"kind\": \"frontend\",\n      \"id\": \"authmatrix-frontend\",\n      \"name\": \"Authmatrix Frontend\",\n      \"entrypoint\": \"frontend/script.js\",\n      \"style\": \"frontend/style.css\",\n      \"backend\": {\n        \"id\": \"authmatrix-backend\"\n      }\n    },\n    {\n      \"kind\": \"backend\",\n      \"id\": \"authmatrix-backend\",\n      \"name\": \"Authmatrix Backend\",\n      \"runtime\": \"javascript\",\n      \"entrypoint\": \"backend/script.js\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete SQLite Integration in a Caido Plugin\nDESCRIPTION: A comprehensive example showing a complete implementation of SQLite database operations in a Caido plugin. Includes initialization, table creation, data insertion, and retrieval with proper error handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DefineAPI, SDK } from \"caido:plugin\";\n\nasync function initDatabase(sdk: SDK) {\n  try {\n    const db = await sdk.meta.db();\n    \n    const dataPath = sdk.meta.path();\n    sdk.console.log(`Database will be stored in: ${dataPath}`);\n    \n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL\n      );\n    `);\n\n    const insertStatement = await db.prepare(\"INSERT INTO test (name) VALUES (?)\");\n    const result = await insertStatement.run(\"foo\");\n    sdk.console.log(`Inserted row with ID: ${result.lastInsertRowid}`);\n\n    const selectStatement = await db.prepare(\"SELECT * FROM test\");\n    const rows = await selectStatement.all();\n    sdk.console.log(\"Current records: \" + JSON.stringify(rows));\n\n    const getByIdStatement = await db.prepare(\"SELECT * FROM test WHERE id = ?\");\n\n    const row = await getByIdStatement.get(1);\n\n    if (row) {\n        sdk.console.log(`Found record: ${JSON.stringify(row)}`);\n    } else {\n        sdk.console.log(\"No record found with that ID\");\n    }\n\n    return db;\n  } catch (error) {\n    sdk.console.error(`Database initialization failed: ${error}`);\n    throw error;\n  }\n}\n\nexport type API = DefineAPI<{\n}>;\n\nexport async function init(sdk: SDK<API>) {\n  await initDatabase(sdk);\n  sdk.console.log(\"Database initialized.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Rows Using Prepared Statements in SQLite\nDESCRIPTION: Demonstrates how to insert data into a SQLite table using prepared statements. The snippet shows how to prepare an INSERT statement with a placeholder and execute it with the run() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst insertStatement = await db.prepare(\"INSERT INTO test (name) VALUES (?)\");\n\n// Execute the insert statement to add \"Ninjeeter\" as a name entry.\nconst result = await insertStatement.run(\"Ninjeeter\");\n```\n\n----------------------------------------\n\nTITLE: Complete Process Management Implementation\nDESCRIPTION: Full implementation combining stream handling and process completion, including a utility function for driving child processes to completion.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/spawning_process.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function driveChild(child) {\n  let output = \"\";\n  child.stdout.on(\"data\", (data) => {\n    output += data.toString();\n  });\n\n  let error = \"\";\n  child.stderr.on(\"data\", (data) => {\n    error += data.toString();\n  });\n\n  const exitCode = await new Promise((resolve, reject) => {\n    child.on(\"close\", resolve);\n  });\n\n  if (exitCode) {\n    throw new Error(`subprocess error exit ${exitCode}, ${error}`);\n  }\n\n  return output;\n}\n\nexport async function test() {\n  const child = spawn(\"echo\", [\"Hello, world!\"]);\n  const result = await driveChild(child);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning a Basic Process in JavaScript\nDESCRIPTION: Demonstrates how to spawn a simple child process that echoes text using the spawn function from child_process module.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/spawning_process.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { spawn } from \"child_process\";\n\nconst child = spawn(\"echo\", [\"Hello, world!\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Caido Plugin Manifest in JSON\nDESCRIPTION: Example manifest.json configuration for a Caido plugin demonstrating the structure for an AuthMatrix plugin with frontend, backend and workflow components. Shows required and optional fields including plugin metadata, author information, and specific configurations for different plugin types.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/manifest.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"authmatrix\",\n  \"name\": \"AuthMatrix\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Grid-based authorization testing across multiple users and roles.\",\n  \"author\": {\n    \"name\": \"Caido Labs Inc.\",\n    \"email\": \"dev@caido.io\",\n    \"url\": \"https://github.com/caido-community/authmatrix\"\n  },\n  \"plugins\": [\n    {\n      \"kind\": \"frontend\",\n      \"id\": \"authmatrix-frontend\",\n      \"name\": \"Authmatrix Frontend\",\n      \"entrypoint\": \"frontend/script.js\",\n      \"style\": \"frontend/style.css\",\n      \"backend\": {\n        \"id\": \"authmatrix-backend\"\n      },\n      \"assets\": \"frontend/assets\"\n    },\n    {\n      \"kind\": \"backend\",\n      \"id\": \"authmatrix-backend\",\n      \"name\": \"Authmatrix Backend\",\n      \"runtime\": \"javascript\",\n      \"entrypoint\": \"backend/script.js\",\n      \"assets\": \"frontend/assets\"\n    },\n    {\n      \"kind\": \"workflow\",\n      \"id\": \"authmatrix-workflow\",\n      \"name\": \"Authmatrix Workflow\",\n      \"definition\": \"workflow/definition.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Plugin Implementation with Custom Multiply Function\nDESCRIPTION: Creates a backend plugin with a multiply endpoint that takes two numbers, logs the result, and returns the product. Demonstrates SDK initialization and API registration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SDK, DefineAPI } from \"caido:plugin\";\n\nfunction multiply(sdk: SDK, a: number, b: number) {\n    const result = a * b;\n    sdk.console.log(`The product of the multiply call is: ${result}`);\n    return result;\n}\n\nexport type API = DefineAPI<{\n    multiply: typeof multiply;\n}>;\n\nexport function init(sdk: SDK<API>) {\n    sdk.api.register(\"multiply\", multiply);\n}\n```\n\n----------------------------------------\n\nTITLE: Process Piping Implementation\nDESCRIPTION: Advanced example demonstrating how to implement a pipe between two processes (ps ax | grep ssh) using spawn(). Shows stream handling between multiple processes and error management.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Caido Package with TypeScript\nDESCRIPTION: Example configuration file showing how to define a Caido package with both frontend and backend plugins. The configuration includes package metadata like ID, name, description, version, and author details, as well as plugin-specific settings.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/config.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@caido-community/dev\";\n\nexport default defineConfig({\n  id: \"my-plugin\",\n  name: \"My Plugin\",\n  description: \"A plugin for Caido\",\n  version: \"0.0.0\",\n  author: {\n    name: \"Caido Labs Inc.\",\n    email: \"dev@caido.io\",\n    url: \"https://caido.io\"\n  },\n  plugins: [\n    {\n      kind: \"frontend\",\n      id: \"my-frontend\",\n      name: \"My Frontend\",\n      root: \"packages/my-frontend\",\n      backend: {\n        id: \"my-backend\"\n      }\n    },\n    {\n      kind: \"backend\",\n      id: \"my-backend\",\n      name: \"My Backend\",\n      root: \"packages/my-backend\",\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Stream with Backpressure Handling\nDESCRIPTION: Demonstrates how to write data to a stream while handling backpressure using the drain event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Child Process stdout Stream Example\nDESCRIPTION: Demonstrates how to handle data events from a child process's stdout stream.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a Readable Stream in JavaScript\nDESCRIPTION: Demonstrates how to read data from a Readable stream using the read() method and event listeners. It shows handling of 'readable' and 'end' events to process chunks of data until the stream ends.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering API Endpoint and Event in Backend TypeScript\nDESCRIPTION: This snippet shows how to set up the backend of a Caido plugin to intercept responses and send events to the frontend. It defines event types, sets up an API, and uses the SDK to send events when responses are intercepted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/events.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SDK, DefineAPI, DefineEvents } from \"caido:plugin\";\n\ntype RequestEvent = {\n  id: string;\n  status: number;\n  url: string;\n};\n\nexport type BackendEvents = DefineEvents<{\n  \"request-completed\": (data: RequestEvent) => void;\n}>;\n\nexport type BackendAPI = DefineAPI<{}>;\n\nexport function init(sdk: SDK<BackendAPI, BackendEvents>) {\n  sdk.events.onInterceptResponse((sdk, request, response) => {\n    sdk.api.send(\"request-completed\", {\n      id: response.getId(),\n      status: response.getCode(),\n      url: `${request.getHost()}:${request.getPort()}${request.getPath()}${request.getQuery()}`\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Basic Operations Example in TypeScript\nDESCRIPTION: Demonstrates opening a SQLite database, creating a table, and inserting data. Shows basic database operations using async/await syntax.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await open({ filename: \"path/to/database.sqlite\" });\nawait db.exec(\"CREATE TABLE test (id INTEGER PRIMARY KEY, name TEXT);\");\nawait db.exec(\"INSERT INTO test (name) VALUES ('foo');\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Process Piping with Node.js Spawn\nDESCRIPTION: Shows how to implement a pipe between two processes using spawn(), equivalent to the shell command 'ps ax | grep ssh'. Demonstrates handling of multiple processes and their interconnected streams.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running a command and capturing output in Node.js\nDESCRIPTION: Example of running 'ls -lh /usr' using child_process.spawn(), capturing stdout, stderr, and the exit code. This demonstrates how to listen for data events on the process streams and handle process completion.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining a SQLite Database Connection in Caido Plugins\nDESCRIPTION: Shows how to get a SQLite database specific to your plugin using the sdk.meta.db() utility. This snippet also demonstrates how to view the database file location using sdk.meta.path().\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await sdk.meta.db();\n\nconst dataPath = sdk.meta.path();\nsdk.console.log(`Database will be stored in: ${dataPath}`);\n```\n\n----------------------------------------\n\nTITLE: Accessing Child Process PID Example\nDESCRIPTION: Example showing how to spawn a child process and access its process ID (PID).\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents with Node.js fs/promises\nDESCRIPTION: Example showing how to read contents of a file asynchronously using readFile method from fs/promises module. The code demonstrates reading a package.json file with UTF-8 encoding and error handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFile } from 'fs/promises';\ntry {\n  const filePath = './package.json';\n  const contents = await readFile(filePath, { encoding: 'utf8' });\n  console.log(contents);\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Address Information Using net.createServer\nDESCRIPTION: Example showing how to create a TCP server, handle errors, and retrieve the server's address information using the address() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = net.createServer((socket) => {\n  socket.end('goodbye\\n');\n}).on('error', (err) => {\n  // Handle errors here.\n  throw err;\n});\n\n// Grab an arbitrary unused port.\nserver.listen(() => {\n  console.log('opened server on', server.address());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Process Output Streams\nDESCRIPTION: Shows how to capture and handle both stdout and stderr streams from a child process using event listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/spawning_process.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet output = \"\";\nchild.stdout.on(\"data\", (data) => {\n  output += data.toString();\n});\n\nlet error = \"\";\nchild.stderr.on(\"data\", (data) => {\n  error += data.toString();\n});\n```\n\n----------------------------------------\n\nTITLE: Process Piping with Node.js Spawn\nDESCRIPTION: Advanced example demonstrating how to pipe output between two spawned processes, implementing 'ps ax | grep ssh' using Node.js spawn.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading a File's Entire Contents from a Readable Stream in JavaScript\nDESCRIPTION: Shows how to read a file's entire contents from a Readable stream by collecting chunks across multiple 'readable' events and joining them when the 'end' event is emitted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SHA-256 Hash in JavaScript\nDESCRIPTION: Example demonstrating how to create a SHA-256 hash digest using the Hash class with update() and digest() methods.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHash } from 'crypto';\n\nconst hash = createHash('sha256');\n\nhash.update('some data to hash');\nconsole.log(hash.digest('hex'));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n```\n\n----------------------------------------\n\nTITLE: Defining EventTarget Class in TypeScript\nDESCRIPTION: Implementation of EventTarget class that provides core event handling functionality. Includes methods for adding/removing listeners and dispatching events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/dom-events.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventTarget {\n  constructor()\n  addEventListener(type: EventKey, listener: EventListener, options?: AddEventListenerOptions): void\n  removeEventListener(type: EventKey, listener: EventListener): void\n  dispatchEvent(event: Event): void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Change Event Handler in TypeScript\nDESCRIPTION: Demonstrates how to track project changes using the onProjectChange event handler. The code logs the transition between project names and maintains the previous project state.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/backend_events.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DefineAPI, SDK } from \"caido:plugin\";\n\nexport type API = DefineAPI<{}>;\n\nlet previousProject: string | null = null;\n\nexport function init(sdk: SDK<API>) {\n  sdk.events.onProjectChange((sdk, project) => {\n    const newProjectName = project?.getName() ?? null;\n    sdk.console.log(`Project changed from \"${previousProject}\" to \"${newProjectName}.\"`); \n    previousProject = newProjectName;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Command in Caido SDK - TypeScript\nDESCRIPTION: Creates a new command with a specified ID, display name, and action. The command is categorized under 'Custom Commands' group and includes a basic console log action when executed.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/command.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.commands.register(\"hello\", {\n  name: \"Print to console.\",\n  run: () => console.log(\"Hello world!\"),\n  group: \"Custom Commands\",\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Frontend Environment Variable Access\nDESCRIPTION: Frontend implementation that directly accesses environment variables without going through the backend. Uses SDK's env.getVar() method directly in the frontend code.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/env.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = document.createElement(\"button\");\nbutton.textContent = \"Check for Env Variable\";\nbutton.classList.add(\"bg-blue-500\", \"text-white\", \"p-2\", \"rounded\");\nbutton.addEventListener(\"click\", () => {\n  const value = sdk.env.getVar(\"User A\");\n  statusText.textContent = value ? \"SESSION FOUND\" : \"NO SESSION SET\";\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetch Function Implementation\nDESCRIPTION: Main fetch function for making HTTP requests, accepting a URL string or Request object and optional configuration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfetch(input: string | Request, init?: RequestOpts): Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Findings with Response Interceptor\nDESCRIPTION: Full example showing how to implement conditional Findings that trigger only on specific response conditions, including error handling and logging. This example creates Findings only for HTTP 200 responses.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/findings.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DefineAPI, SDK } from \"caido:plugin\";\nimport type { Request, Response } from \"caido:utils\";\n\nexport type API = DefineAPI<{\n  // No API methods needed for this passive functionality.\n}>;\n\nexport function init(sdk: SDK<API>) {\n  // Listen for intercepted responses.\n  sdk.events.onInterceptResponse(\n    async (\n      sdk: SDK<API>, \n      request: Request, \n      response: Response\n    ) => {\n    try {\n      // Only create Findings for 200 responses.\n      if (response.getCode() === 200) {\n        await sdk.findings.create({\n          title: `Success Response ${response.getCode()}`,\n          description: `Request ID: ${request.getId()}\\nResponse Code: ${response.getCode()}`,\n          reporter: \"Response Logger Plugin\",\n          request: request,\n          dedupeKey: `${request.getPath()}-${response.getCode()}`\n        });\n\n        sdk.console.log(`Created finding for successful request ${request.getId()}`);\n      }\n    } catch (err) {\n      sdk.console.error(`Error creating finding: ${err}`);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Package JSON Entry\nDESCRIPTION: Example JSON configuration for submitting a new plugin package to the Caido store. This configuration includes required fields like id, name, license, description, author details, public key, and repository information.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/store.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"my-unique-plugin\",\n  \"name\": \"My Unique Plugin\",\n  \"license\": \"MIT\",\n  \"description\": \"This my super cool new Caido plugin\",\n  \"author\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"url\": \"https://example.com\"\n  },\n  \"public_key\": \"MCowBQYDK2VwAyEA0zDx1tIO7S/d+AYFjLLmTA6pvuEyf+70KfcgVi1DNhc=\",\n  \"repository\": \"john/my-unique-plugin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Readable Stream in JavaScript\nDESCRIPTION: Demonstrates how to read data from a readable stream using event listeners. Shows handling of readable events and end events to process data chunks.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\n----------------------------------------\n\nTITLE: Receiving Events in Frontend TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the frontend of a Caido plugin to receive events from the backend. It extends the Caido interface with custom types and sets up an event listener to handle incoming events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/events.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CaidoSDK = Caido<BackendAPI, BackendEvents>;\n\nsdk.backend.onEvent(\"request-completed\", (data) => {\n  const listItem = document.createElement(\"li\");\n  listItem.textContent = `Request to ${data.url} completed with status ${data.status} (ID: ${data.id})`;\n  resultsList.insertBefore(listItem, resultsList.firstChild);\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Using Options\nDESCRIPTION: Establishes a socket connection based on options provided. The method is asynchronous, emitting 'connect' on success or 'error' on failure. It can include a listener for the 'connect' event as an optional parameter.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(options: SocketConnectOpts, connectionListener?: () => void): this\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with EventEmitter in JavaScript\nDESCRIPTION: Demonstrates how to use EventEmitter to register multiple listeners for an event and emit the event with parameters. Shows the order of execution for listeners and how parameters are passed.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Implementing Request and Response Interception Handlers\nDESCRIPTION: Shows implementation of request and response interception handlers using onInterceptRequest and onInterceptResponse events. Logs HTTP method, URL, and response status code for intercepted traffic.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/backend_events.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DefineAPI, SDK } from \"caido:plugin\";\nimport type { Request, Response } from \"caido:utils\";\n\nexport type API = DefineAPI<{}>;\n\nexport function init(sdk: SDK<API>) {\n  sdk.events.onInterceptRequest((sdk, request: Request) => {\n    sdk.console.log(`Intercepted ${request.getMethod()} request to ${request.getUrl()}`);\n  });\n\n  sdk.events.onInterceptResponse((sdk, request: Request, response: Response) => {\n    sdk.console.log(`Intercepted response from ${request.getUrl()} with status ${response.getCode()}`);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64 Encode Function in TypeScript\nDESCRIPTION: Function that encodes UTF-8 string data into Base64 format. Accepts any JavaScript value that can be coerced to string.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction btoa(data: string): string\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Node.js EventEmitter\nDESCRIPTION: This snippet demonstrates how to use the removeListener() method to remove event listeners from an EventEmitter. It shows the behavior of removing listeners during event emission and the order of execution.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Complete Frontend Implementation in TypeScript\nDESCRIPTION: This expanded snippet shows the full frontend implementation of a Caido plugin. It includes importing types, creating the page structure, setting up the event listener, and registering the plugin in the sidebar.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/events.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Caido } from \"@caido/sdk-frontend\";\nimport type { BackendAPI, BackendEvents } from \"../../backend/src\";\n\nimport \"./styles/index.css\";\n\nexport type CaidoSDK = Caido<BackendAPI, BackendEvents>;\n\nconst createPage = (sdk: CaidoSDK) => {\n  const resultsList = document.createElement(\"ul\");\n  resultsList.style.listStyle = \"none\";\n  resultsList.style.padding = \"1rem\";\n\n  // Subscribe to backend events.\n  sdk.backend.onEvent(\"request-completed\", (data) => {\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = `Request to ${data.url} completed with status ${data.status} (ID: ${data.id})`;\n    resultsList.insertBefore(listItem, resultsList.firstChild);\n  });\n\n  // Create card.\n  const card = sdk.ui.card({\n    body: resultsList,\n  });\n\n  // Add page.\n  sdk.navigation.addPage(\"/request-monitor\", {\n    body: card,\n  });\n};\n\nexport const init = (sdk: CaidoSDK) => {\n  createPage(sdk);\n  \n  sdk.sidebar.registerItem(\"Request Monitor\", \"/request-monitor\", {\n    icon: \"fas fa-globe\",\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents with Node.js fs/promises\nDESCRIPTION: Example demonstrating how to read directory contents asynchronously using the readdir method from fs/promises module. The code shows error handling and iterating through the returned files array.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readdir } from 'fs/promises';\n\ntry {\n  const files = await readdir(path);\n  for (const file of files)\n    console.log(file);\n} catch (err) {\n  console.error(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a Readable Stream in Node.js\nDESCRIPTION: This snippet demonstrates how to read data from a Readable stream using the 'readable' and 'end' events. It shows how to handle buffered data and detect when the stream has ended.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\n----------------------------------------\n\nTITLE: Deduplication Key Examples for Findings\nDESCRIPTION: Shows different ways to construct deduplication keys using string literals and request/response properties to prevent duplicate alerts.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/findings.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Dedupe based on a string.\ndedupeKey: \"Hello world!\"\n// Dedupe based on request path and method.\ndedupeKey: `${request.getPath()}-${request.getMethod()}`\n// Dedupe based on request path, response code and response header.\ndedupeKey: `${request.getPath()}-${response.getCode()}-${response.getHeader(\"Content-Length\")}`\n```\n\n----------------------------------------\n\nTITLE: Ending a Socket Connection\nDESCRIPTION: Half-closes the socket connection and can send a callback when the closing process completes, maintaining the ability for the server to still send data.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nend(callback?: () => void): this\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Echo Server with Node.js Net Module\nDESCRIPTION: This example shows how to create a TCP echo server that listens on port 8124. The server logs when clients connect and disconnect, sends a hello message to connected clients, and handles errors by throwing them.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as net from 'net';\nconst server = net.createServer((c) => {\n  // 'connection' listener.\n  console.log('client connected');\n  c.on('end', () => {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n\n});\nserver.on('error', (err) => {\n  throw err;\n});\nserver.listen(8124, () => {\n  console.log('server bound');\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes in JavaScript\nDESCRIPTION: Example showing how to generate cryptographically strong pseudorandom data using the randomBytes function.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous\nimport { randomBytes } from 'crypto';\n\nconst buf = randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString('hex')}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64 Decode Function in TypeScript\nDESCRIPTION: Function that decodes Base64-encoded string data into UTF-8 encoded string. Accepts any JavaScript value that can be coerced to string.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction atob(data: string): string\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Pattern Implementation Example\nDESCRIPTION: Example demonstrating how to use the EventEmitter pattern to register and handle multiple event listeners for the same event, showing how parameters are passed to each listener.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams forEach Method\nDESCRIPTION: Example demonstrating how to iterate over URL search parameters using the forEach method. Shows how to access both names and values of query parameters.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/url.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myURL = new URL('https://example.org/?a=b&c=d');\nmyURL.searchParams.forEach((value, name) => {\n  console.log(name, value);\n});\n// Prints:\n//   a b\n//   c d\n```\n\n----------------------------------------\n\nTITLE: Terminating Child Process with Signal\nDESCRIPTION: Example demonstrating how to spawn a grep process and terminate it using the kill() method with a SIGHUP signal. Includes event handling for process termination.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process.\ngrep.kill('SIGHUP');\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams set Method\nDESCRIPTION: Example demonstrating how to set parameter values using the set method. Shows parameter manipulation and the resulting query string.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/url.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams();\nparams.append('foo', 'bar');\nparams.append('foo', 'baz');\nparams.append('abc', 'def');\nconsole.log(params.toString());\n// Prints foo=bar&foo=baz&abc=def\n\nparams.set('foo', 'def');\nparams.set('xyz', 'opq');\nconsole.log(params.toString());\n// Prints foo=def&abc=def&xyz=opq\n```\n\n----------------------------------------\n\nTITLE: Frontend Integration Implementation\nDESCRIPTION: Implements the frontend interface including button creation, event handling, and command registration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Caido } from \"@caido/sdk-frontend\";\nimport type { API } from \"../../backend/src/index\";\n\nimport \"./styles/index.css\";\n\nexport type CaidoSDK = Caido<API>;\n\nconst Commands = {\n  sending: \"my-plugin-page.req\",\n} as const;\n\nconst sending = async (sdk: CaidoSDK) => {\n  await sdk.backend.testSendRequest();\n};\n\nconst createPage = (sdk: CaidoSDK) => {\n  const requestButton = sdk.ui.button({\n    variant: \"primary\",\n    label: \"Send Request\",\n  });\n\n  requestButton.addEventListener(\"click\", async () => {\n    await sending(sdk);\n  });\n\n  const bodyContainer = document.createElement(\"div\");\n  bodyContainer.appendChild(requestButton);\n\n  const card = sdk.ui.card({\n    body: bodyContainer,\n\n  });\n\n  sdk.navigation.addPage(\"/my-plugin-page\", {\n    body: card,\n  });\n};\n\nexport const init = (sdk: CaidoSDK) => {\n  createPage(sdk);\n  sdk.sidebar.registerItem(\"My Plugin\", \"/my-plugin-page\", {\n    icon: \"fas fa-rocket\",\n  });\n\n  sdk.commands.register(Commands.sending, {\n    name: \"Send Request\",\n    run: () => sending(sdk),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Frontend Implementation\nDESCRIPTION: Full frontend implementation including UI components, event handling, and command registration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Caido } from \"@caido/sdk-frontend\";\nimport type { API } from \"../../backend/src/index\";\n\nimport \"./styles/index.css\";\n\nexport type CaidoSDK = Caido<API>;\n\nconst Commands = {\n  sending: \"my-plugin-page.req\",\n} as const;\n\nconst sending = async (sdk: CaidoSDK) => {\n  await sdk.backend.sendRequest();\n};\n\nconst createPage = (sdk: CaidoSDK) => {\n  const requestButton = sdk.ui.button({\n    variant: \"primary\",\n    label: \"Send Request\",\n  });\n\n  requestButton.addEventListener(\"click\", async () => {\n    await sending(sdk);\n  });\n\n  const headerText = document.createElement(\"h1\");\n  headerText.textContent = \"Hello world!\";\n\n  const subText = document.createElement(\"p\");\n  subText.textContent = \"Lorem ipsum.\";\n\n  const bodyText = document.createElement(\"p\");\n  bodyText.textContent = \"Paragraph.\";\n\n  const footerText = document.createElement(\"p\");\n  footerText.textContent = \"Footer text.\";\n\n  const headerContainer = document.createElement(\"div\");\n  headerContainer.appendChild(headerText);\n  headerContainer.appendChild(subText);\n  headerContainer.appendChild(requestButton);\n\n  const bodyContainer = document.createElement(\"div\");\n  bodyContainer.appendChild(bodyText);\n\n  const card = sdk.ui.card({\n    header: headerContainer,\n    body: bodyContainer,\n    footer: footerText,\n  });\n\n  sdk.navigation.addPage(\"/my-plugin-page\", {\n    body: card,\n  });\n};\n\nexport const init = (sdk: CaidoSDK) => {\n  createPage(sdk);\n  sdk.sidebar.registerItem(\"My Plugin\", \"/my-plugin-page\", {\n    icon: \"fas fa-rocket\",\n  });\n\n  sdk.commands.register(Commands.sending, {\n    name: \"Send Request\",\n    run: () => sending(sdk),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Using Port and Host\nDESCRIPTION: Creates a TCP socket connection using the specified port and host. The function includes an optional connection listener which is invoked upon the established connection, with event handling for 'connect' and 'error'.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(port: number, host: string, connectionListener?: () => void): this\n```\n\n----------------------------------------\n\nTITLE: Creating HMAC with SHA-256 in JavaScript\nDESCRIPTION: Example showing how to create an HMAC using SHA-256 algorithm with a secret key, demonstrating the update() and digest() methods.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHmac } from 'crypto';\n\nconst hmac = createHmac('sha256', 'a secret');\n\nhmac.update('some data to hash');\nconsole.log(hmac.digest('hex'));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners with EventEmitter\nDESCRIPTION: Example demonstrating how to create and use multiple event listeners with EventEmitter. Shows three different listeners responding to the same event with different parameter handling approaches.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Sending Request and Handling Response\nDESCRIPTION: Shows how to send the configured request and process its response, including logging the results.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  let sentRequest = await sdk.requests.send(spec);\n\n  if (sentRequest.response) {\n    let domain = spec.getHost();\n    let port = spec.getPort();\n    let path = spec.getPath();\n    let query = spec.getQuery();\n    let id = sentRequest.response.getId();\n    let code = sentRequest.response.getCode();\n    sdk.console.log(`REQ ${id}: ${domain}:${port}${path}${query} received a status code of ${code}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Stream Data Chunks in JavaScript\nDESCRIPTION: Shows how to collect and concatenate all chunks of data from a readable stream using multiple readable events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Buffer Subarray Method in JavaScript\nDESCRIPTION: Demonstrates how to create a Buffer slice using subarray() method, showing memory overlap behavior and index manipulation.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\n// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n// from the original `Buffer`.\n\nconst buf1 = Buffer.alloc(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.subarray(0, 3);\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: abc\n\nbuf1[0] = 33;\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: !bc\n```\n\n----------------------------------------\n\nTITLE: Managing Backpressure with write Method\nDESCRIPTION: This example shows how to handle backpressure when writing to a stream by waiting for the 'drain' event if the write operation returns false, ensuring optimal write operations.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Static Methods\nDESCRIPTION: Static utility methods for creating Response objects for errors, JSON data, and redirects.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic error(): Response\nstatic json(data: any, init?: ResponseInit): Response\nstatic redirect(url: string, status?: number): Response\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SQLite Database at a Specific Location\nDESCRIPTION: Demonstrates how to create a SQLite database at a custom location using the 'open' function. This snippet includes creating a table and inserting a row into it.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { open } from 'sqlite'\n\nasync function newDatabase() {\n  const db = await open({ filename: \"path/to/database.sqlite\" });\n  await db.exec(\"CREATE TABLE test (id INTEGER PRIMARY KEY, name TEXT);\");\n  await db.exec(\"INSERT INTO test (name) VALUES ('foo');\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSDK Interface in TypeScript\nDESCRIPTION: This code snippet defines the MatchReplaceSDK interface, which includes methods for managing collections and rules in the Match and Replace functionality. It provides operations for creating, updating, deleting, and retrieving collections and rules, as well as utilities for managing rule states.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSDK {\n  createCollection: (options: { name: string }) => Promise<MatchReplaceCollection>;\n  createRule: (options: {\n    collectionId: ID;\n    name: string;\n    query: HTTPQL;\n    section: MatchReplaceSection;\n  }) => Promise<MatchReplaceRule>;\n  deleteCollection: (id: ID) => Promise<void>;\n  deleteRule: (id: ID) => Promise<void>;\n  getActiveRules: () => MatchReplaceRule[];\n  getCollections: () => MatchReplaceCollection[];\n  getRules: () => MatchReplaceRule[];\n  selectRule: (id: ID | undefined) => void;\n  toggleRule: (id: ID, enabled: boolean) => Promise<void>;\n  updateCollection: (id: ID, options: { name: string }) => Promise<MatchReplaceCollection>;\n  updateRule: (id: ID, options: {\n    name: string;\n    query?: HTTPQL;\n    section: MatchReplaceSection;\n  }) => Promise<MatchReplaceRule>;\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Subarray with Negative Indices\nDESCRIPTION: Shows how to use negative indices with Buffer.subarray() to slice from the end of the buffer.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\nconst buf = Buffer.from('buffer');\n\nconsole.log(buf.subarray(-6, -1).toString());\n// Prints: buffe\n// (Equivalent to buf.subarray(0, 5).)\n\nconsole.log(buf.subarray(-6, -2).toString());\n// Prints: buff\n// (Equivalent to buf.subarray(0, 4).)\n\nconsole.log(buf.subarray(-5, -2).toString());\n// Prints: uff\n// (Equivalent to buf.subarray(1, 4).)\n```\n\n----------------------------------------\n\nTITLE: Basic EventEmitter Usage Example\nDESCRIPTION: Demonstrates how to create an EventEmitter instance and register multiple listeners for an event. Shows the order of execution for multiple listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Finding with Caido SDK\nDESCRIPTION: Demonstrates how to create a basic Finding using the Caido SDK with required properties including title, reporter, and request. Optional properties like description and dedupeKey are also shown.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/findings.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait sdk.findings.create({\n  title: \"Title\", // Label your Finding.\n  description: \"Description\", // Add a description (optional).\n  reporter: \"Reporter\", // Specify which plugin discovered the Finding.\n  dedupeKey: `${request.getHost()}-${request.getPath()}`, // Prevents multiple alerts for request with matching characteristics (optional).\n  request, // The associated request.\n});\n```\n\n----------------------------------------\n\nTITLE: Frontend Plugin Implementation with UI Components\nDESCRIPTION: Implements a frontend plugin that creates a page with input fields and a button to call the multiply endpoint. Includes UI setup, event handling, and sidebar integration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Caido } from \"@caido/sdk-frontend\";\nimport type { API } from \"../../backend/src/index.ts\";\n\nexport type CaidoSDK = Caido<API>;\n\nconst createPage = (sdk: CaidoSDK) => {\n\n    const resultText = document.createElement(\"p\");\n    resultText.textContent = \"Result will appear here.\";\n\n    const inputA = document.createElement(\"input\");\n    inputA.type = \"number\";\n    inputA.value = \"0\";\n    inputA.style.color = \"black\";\n    \n    const inputB = document.createElement(\"input\");\n    inputB.type = \"number\";\n    inputB.value = \"0\";\n    inputB.style.color = \"black\";\n\n    const calculateButton = sdk.ui.button({\n        variant: \"primary\",\n        label: \"Calculate\",\n    });\n\n    calculateButton.addEventListener(\"click\", async () => {\n        const a = Number(inputA.value);\n        const b = Number(inputB.value);\n        const result = await sdk.backend.multiply(a, b);\n        resultText.textContent = `Result: ${result}`;\n    });\n\n    const container = document.createElement(\"div\");\n    container.appendChild(inputA);\n    container.appendChild(inputB);\n    container.appendChild(calculateButton);\n    container.appendChild(resultText);\n\n    const card = sdk.ui.card({\n        body: container\n    });\n\n    sdk.navigation.addPage(\"/multiply-page\", {\n        body: card\n    });\n}\n\nexport function init(sdk: CaidoSDK) {\n    createPage(sdk);\n    \n    sdk.sidebar.registerItem(\"Multiply\", \"/multiply-page\", {\n        icon: \"fas fa-calculator\"\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Node.js spawn()\nDESCRIPTION: This example demonstrates how to handle errors when spawning a process, specifically when the command doesn't exist or fails to start.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the ID of the Last Inserted Row in SQLite\nDESCRIPTION: Shows how to retrieve the ID of the last inserted row using the lastInsertRowid property of the result object returned by the run() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(`Inserted row with ID: ${result.lastInsertRowid}`);\n```\n\n----------------------------------------\n\nTITLE: Registering a Context Menu Item with Caido SDK\nDESCRIPTION: This snippet demonstrates how to register a custom entry in Caido's context menu. It adds a menu item with an icon that executes a command named 'hello' when clicked. The menu item appears when right-clicking in a request pane.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/menu.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.menu.registerItem({\n  type: \"Request\",\n  commandId: \"hello\",\n  leadingIcon: \"fas fa-hand\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using randomInt from Crypto Module in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the randomInt function from the crypto module in JavaScript to generate a random integer between a specified range. It highlights how to use the function synchronously with or without providing a minimum value. Dependencies include the crypto module available in Node.js. Key parameters are 'min' and 'max', which define the inclusive and exclusive range, respectively. The output is a number that is randomly selected from the specified range.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Synchronous\nimport { randomInt } from 'crypto';\n\nconst n = randomInt(3);\nconsole.log(`Random number chosen from (0, 1, 2): ${n}`);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// With `min` argument\nimport { randomInt } from 'crypto';\n\nconst n = randomInt(1, 7);\nconsole.log(`The dice rolled: ${n}`);\n```\n\n----------------------------------------\n\nTITLE: Accessing Child Process PID in Node.js\nDESCRIPTION: Demonstrates how to spawn a child process using Node.js child_process module and access its process identifier (PID). This example creates a grep process and logs its PID.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n```\n\n----------------------------------------\n\nTITLE: Reading a File's Entire Contents from a Readable Stream in Node.js\nDESCRIPTION: This snippet shows how to read a file's entire contents from a Readable stream by collecting chunks across multiple 'readable' events and concatenating them when the 'end' event is emitted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling spawn errors in Node.js\nDESCRIPTION: Example of checking for failed spawn operations when the command doesn't exist or can't be executed. This demonstrates how to listen for the 'error' event on the child process to detect and handle failures.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Using randomFill with Buffer and TypedArrays in JavaScript\nDESCRIPTION: Demonstrates how to use the randomFill function with different types of buffers including Buffer, Uint32Array, DataView and ArrayBuffer. The function fills the provided buffer with cryptographically strong random bytes.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\nimport { randomFill } from 'crypto';\n\nconst buf = Buffer.alloc(10);\nrandomFill(buf, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\nrandomFill(buf, 5, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\n// The above is equivalent to the following:\nrandomFill(buf, 5, 5, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Echo Server in JavaScript\nDESCRIPTION: Demonstrates how to create a TCP echo server that listens for connections on port 8124 using the Net module in JavaScript.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as net from 'net';\nconst server = net.createServer((c) => {\n  // 'connection' listener.\n  console.log('client connected');\n  c.on('end', () => {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n\n});\nserver.on('error', (err) => {\n  throw err;\n});\nserver.listen(8124, () => {\n  console.log('server bound');\n});\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Listener Order Example\nDESCRIPTION: Demonstrates the difference between normal and prepended listeners, showing how prepended listeners are executed first.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n```\n\n----------------------------------------\n\nTITLE: Constructing Request Class in TypeScript\nDESCRIPTION: Creates a Request object representing an HTTP resource request with body handling capabilities and cache control.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Request(input: string | Request, init?: RequestOpts): Request\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter once() Method Example\nDESCRIPTION: Demonstrates how to use the once() method to add one-time event listeners, showing the difference between regular and prepended listeners in execution order.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Executing Process in Shell\nDESCRIPTION: Shows how to spawn a process that executes within a shell environment using the shell option.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/spawning_process.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { spawn } from \"child_process\";\n\nexport async function test() {\n  const child = spawn(\"echo\", [\"Hello, world!\"], { shell: true });\n  const result = await driveChild(child);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Process Spawning with Output Capture\nDESCRIPTION: Example showing how to spawn a child process running 'ls -lh /usr' command and capture its stdout, stderr, and exit code. Demonstrates basic process creation and output handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Backend Environment Variable Access Implementation\nDESCRIPTION: Backend implementation for accessing environment variables through an API endpoint. Uses SDK's env.getVar() method to retrieve the 'User A' environment variable value.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/env.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DefineAPI, SDK } from \"caido:plugin\";\n\nexport type API = DefineAPI<{\n  getSession: () => Promise<string | undefined>;\n}>;\n\nexport function init(sdk: SDK<API>) {\n  // Register an API endpoint that frontend can call.\n  sdk.api.register(\"getSession\", async () => {\n    return sdk.env.getVar(\"User A\");\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running 'ps ax | grep ssh' Command with Node.js spawn()\nDESCRIPTION: This example shows a more complex use case of spawn(), implementing the equivalent of 'ps ax | grep ssh' by spawning two processes and piping the output of 'ps' to 'grep'.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Buffer toString Method Usage\nDESCRIPTION: Examples of using Buffer.toString() with different encodings to convert buffer contents to strings.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\nconst buf1 = Buffer.alloc(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconsole.log(buf1.toString('utf8'));\n// Prints: abcdefghijklmnopqrstuvwxyz\n\nconst buf2 = Buffer.from('tést');\n\nconsole.log(buf2.toString('hex'));\n// Prints: 74c3a97374\n```\n\n----------------------------------------\n\nTITLE: Adding Command to Command Palette - TypeScript\nDESCRIPTION: Registers a previously created command to make it accessible through the command palette interface.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/command.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.commandPalette.register(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Registering Sidebar Item Example in TypeScript\nDESCRIPTION: Example showing how to register a new sidebar item with an icon using the SidebarSDK.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.sidebar.registerItem(\"My Plugin\", \"/my-plugin-page\", {\n  icon: \"fas fa-rocket\",\n});\n```\n\n----------------------------------------\n\nTITLE: Operating System Type Function\nDESCRIPTION: Returns the operating system name using uname(3). Returns 'Linux' on Linux, 'Darwin' on macOS, and 'Windows_NT' on Windows.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype(): string\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams keys Method\nDESCRIPTION: Example showing how to iterate over parameter names using the keys method. Demonstrates handling duplicate parameter names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/url.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams('foo=bar&foo=baz');\nfor (const name of params.keys()) {\n  console.log(name);\n}\n// Prints:\n//   foo\n//   foo\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortController Class in TypeScript\nDESCRIPTION: Defines the AbortController class that provides the ability to abort operations. Contains a constructor that creates a new instance and methods for abort operations with an optional reason parameter.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/abort.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AbortController {\n  readonly signal: AbortSignal;\n\n  constructor() {\n    // Creates a new AbortController object instance\n  }\n\n  abort(reason?: any): void {\n    // Invoking this method will set this object's AbortSignal's aborted flag\n    // and signal to any observers that the associated activity is to be aborted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Process Spawning with Output Capture in Node.js\nDESCRIPTION: Demonstrates spawning a child process to run 'ls -lh /usr' command while capturing stdout, stderr, and exit code. Shows basic usage of the spawn() method with event listeners for process output and completion.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using randomInt for Random Integer Generation in JavaScript\nDESCRIPTION: Shows how to generate random integers within specified ranges using the randomInt function. Includes examples of generating numbers with and without minimum bounds.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous\nimport { randomInt } from 'crypto';\n\nconst n = randomInt(3);\nconsole.log(`Random number chosen from (0, 1, 2): ${n}`);\n\n// With `min` argument\nimport { randomInt } from 'crypto';\n\nconst n = randomInt(1, 7);\nconsole.log(`The dice rolled: ${n}`);\n```\n\n----------------------------------------\n\nTITLE: Constructing Headers Class in TypeScript\nDESCRIPTION: Implements an iterable Headers interface for managing HTTP headers with methods for manipulation and iteration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Headers(opts?: HeadersOpts): Headers\n```\n\n----------------------------------------\n\nTITLE: OS End-of-Line Constant Definition\nDESCRIPTION: Defines the operating system-specific end-of-line marker constant. Returns '\\n' on POSIX systems and '\\r\\n' on Windows systems.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst EOL: string\n```\n\n----------------------------------------\n\nTITLE: Child Process stdout Stream Example\nDESCRIPTION: Shows how to handle stdout stream data from a child process using event listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Buffer Allocation Examples\nDESCRIPTION: Shows different ways to allocate new Buffers using Buffer.alloc() with various fill values and encodings.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\nconst buf = Buffer.alloc(5);\n\nconsole.log(buf);\n// Prints: <Buffer 00 00 00 00 00>\n\nconst buf = Buffer.alloc(5, 'a');\n\nconsole.log(buf);\n// Prints: <Buffer 61 61 61 61 61>\n\nconst buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\n\nconsole.log(buf);\n// Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n```\n\n----------------------------------------\n\nTITLE: Basic File Listing with Node.js Spawn\nDESCRIPTION: Example showing how to spawn a child process to list directory contents using 'ls' command while capturing stdout, stderr, and exit code.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Node.js Spawn\nDESCRIPTION: Illustrates how to handle errors when spawning processes, specifically for cases where the command fails to execute. Shows proper error event handling for spawn() failures.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Blob Class in TypeScript\nDESCRIPTION: Creates a new Blob object that encapsulates immutable raw data from various sources like strings, ArrayBuffers, and other Blobs. Includes methods for data manipulation and conversion.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Blob(parts: (string | ArrayBuffer | Blob)[], opts?: BlobOpts): Blob\n```\n\n----------------------------------------\n\nTITLE: Using randomFill with TypedArrays and DataView in JavaScript\nDESCRIPTION: Shows how to use randomFill with Uint32Array, DataView, and ArrayBuffer for generating random bytes. Includes examples of converting the results to hexadecimal strings.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\nimport { randomFill } from 'crypto';\n\nconst a = new Uint32Array(10);\nrandomFill(a, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n    .toString('hex'));\n});\n\nconst b = new DataView(new ArrayBuffer(10));\nrandomFill(b, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n    .toString('hex'));\n});\n\nconst c = new ArrayBuffer(10);\nrandomFill(c, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf).toString('hex'));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Rows from a SQLite Table by ID\nDESCRIPTION: Shows how to retrieve a specific row from a table using a prepared statement with a WHERE clause. The get() method is used to fetch a row that matches the specified ID.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare a statement to get a single row by ID\nconst getByIdStatement = await db.prepare(\"SELECT * FROM test WHERE id = ?\");\n\n// Returns the first matching row or undefined if none found.\nconst row = await getByIdStatement.get(1); // Get row with ID 1.\n\nif (row) {\n    sdk.console.log(`Found record: ${JSON.stringify(row)}`);\n} else {\n    sdk.console.log(\"No record found with that ID\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortSignal Class in TypeScript\nDESCRIPTION: Defines the AbortSignal class that extends EventTarget for handling abort signals. Includes properties for abort state and reason, along with methods for event handling and abort checking.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/abort.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass AbortSignal extends EventTarget {\n  readonly aborted: boolean;\n  readonly reason: any;\n  onabort: null | ((this: AbortSignal, event: Event) => any);\n\n  constructor() {\n    // Creates a new AbortSignal object instance\n  }\n\n  throwIfAborted(): void {\n    // Throws the signal's abort reason if the signal has been aborted\n  }\n\n  static abort(reason?: any): AbortSignal {\n    // Returns an AbortSignal instance that is already set as aborted\n  }\n\n  static any(signals: AbortSignal[]): AbortSignal {\n    // Returns an AbortSignal that aborts when any of the given abort signals abort\n  }\n\n  static timeout(milliseconds: number): AbortSignal {\n    // Returns an AbortSignal instance that will automatically abort after a specified time\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling spawn errors in Node.js\nDESCRIPTION: This example shows how to handle errors when spawning a process fails, such as when trying to run a non-existent command.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: FilesSDK Object - Type Declaration\nDESCRIPTION: Describes the `FilesSDK` object, which provides methods for interacting with files, including creating, deleting, retrieving, and renaming files. Each method returns a Promise that resolves to the corresponding file operation result.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **FilesSDK**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Node.js Spawn\nDESCRIPTION: Example showing how to handle errors when spawning a process fails, demonstrating proper error event handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Usage Example\nDESCRIPTION: Demonstrates how to use EventEmitter by registering multiple listeners and emitting events with parameters. Shows the order of listener execution.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows from a SQLite Table\nDESCRIPTION: Demonstrates how to select all rows from a table using a prepared statement and the all() method. This snippet retrieves all data from the 'test' table.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectStatement = await db.prepare(\"SELECT * FROM test\");\nconst rows = await selectStatement.all();\nsdk.console.log(\"Current records: \" + JSON.stringify(rows));\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Readable Stream Example\nDESCRIPTION: Example showing how to read data from a readable stream using the readable event and read() method. Demonstrates buffered reading with a while loop.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutable Proxied Request Handler\nDESCRIPTION: Implements a request interceptor that modifies the path of proxied requests to include invalid UTF-8 characters using raw byte manipulation.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function init(sdk: SDK) {\n  sdk.events.onInterceptRequest(async (sdk, request) => {\n    const spec = request.toSpec();\n    let path = [...spec.getPath({raw: true}), 0x85];\n    spec.setPath(path);\n    await sdk.requests.send(spec);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in spawn()\nDESCRIPTION: Example showing how to handle errors when spawning processes fails\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter - Type Declaration\nDESCRIPTION: Defines a function type `create` for creating a filter. It takes an `options` object (containing `alias`, `name`, and `query`) as input and returns a Promise that resolves to a `Filter` object representing the created filter.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **create**: (`options`: `object`) => `Promise`\\<[`Filter`](index.md#filter)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Shell Process Termination Behavior\nDESCRIPTION: Demonstrates the limitations of process termination when running child processes in a shell, particularly on Linux systems where child processes of child processes won't be terminated.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn(\n  'sh',\n  [\n    '-c',\n    `node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit']\n  }\n);\n\nsetTimeout(() => {\n  subprocess.kill(); // Does not terminate the Node.js process in the shell.\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in JavaScript with EventEmitter\nDESCRIPTION: Demonstrates how to use the EventEmitter class to emit events and handle them with multiple listeners. This example shows the order of execution for different listeners and how parameters are passed.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Set Timeout Function Definition\nDESCRIPTION: Generic function that schedules one-time execution of a callback after specified milliseconds. Minimum delay is 4ms.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number): Timeout\n```\n\n----------------------------------------\n\nTITLE: Reading Complete File Content Example\nDESCRIPTION: Example showing how to read a complete file's contents by collecting chunks across multiple readable events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in SQLite Using exec Method\nDESCRIPTION: Shows how to create a table in SQLite by executing a SQL statement using the exec() method. This example creates a 'test' table with ID and name columns if it doesn't already exist.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new table if it doesn't exist.\n// This will create a table named \"test\" with two columns: id and name.\nawait db.exec(`\n  CREATE TABLE IF NOT EXISTS test (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL\n  );\n`);\n```\n\n----------------------------------------\n\nTITLE: Frontend Environment Variable Access via Backend API\nDESCRIPTION: Frontend implementation that calls the backend API to retrieve environment variable value. Creates a button that triggers the API call and displays the result.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/env.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst button = document.createElement(\"button\");\nbutton.textContent = \"Check for Env Variable\";\nbutton.classList.add(\"bg-blue-500\", \"text-white\", \"p-2\", \"rounded\");\nbutton.addEventListener(\"click\", async () => {\n  const apiKey = await sdk.backend.getSession();\n  // Display the message as text.\n  statusText.textContent = apiKey ? \"SESSION FOUND\" : \"NO SESSION SET\";\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Handlers and removeListener Behavior\nDESCRIPTION: This example demonstrates how removeListener() removes the most recently added instance of a handler when the same function has been added multiple times for a single event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Creating Button Component with UISDK\nDESCRIPTION: Example showing how to create a button UI component using the UISDK with customizable options like variant, label, icon and size.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteButton = sdk.ui.button({\n  variant: \"primary\",\n  label: \"Delete\",\n  trailingIcon: \"fas fa-trash-can\",\n  size: \"small\",\n});\n```\n\n----------------------------------------\n\nTITLE: Closing FileHandle Example\nDESCRIPTION: Example showing how to properly open and close a file handle using try/finally block to ensure cleanup.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open } from 'fs/promises';\n\nlet filehandle;\ntry {\n  filehandle = await open('thefile.txt', 'r');\n} finally {\n  await filehandle?.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Running ls command and capturing output in Node.js\nDESCRIPTION: This example demonstrates how to run the 'ls -lh /usr' command using child_process.spawn(), capturing stdout, stderr, and the exit code.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Scope with ScopesSDK\nDESCRIPTION: Example demonstrating how to create a new scope using the ScopesSDK, specifying a name and allow/deny lists for domain filtering.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst newScope = await sdk.scopes.createScope({\n  name: \"Example\",\n  allowlist: [\"*example.com\", \"*github.com\"],\n  denylist: [\"*caido.io\"],\n});\n```\n\n----------------------------------------\n\nTITLE: InterceptSDK Object - Type Declaration\nDESCRIPTION: Describes the `InterceptSDK` object, which provides utilities for interacting with the Intercept page, including getting and setting the current scope ID. It facilitates managing intercept scopes.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **InterceptSDK**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: EnvironmentSDK Object - Type Declaration\nDESCRIPTION: Describes the `EnvironmentSDK` object, which provides methods for interacting with the environment, including retrieving environment variables. It allows accessing the environment configuration.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **EnvironmentSDK**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkflowSDK Object Methods in TypeScript\nDESCRIPTION: Type declaration for the WorkflowSDK object with methods for getting workflows and registering event callbacks for workflow creation, updates, and deletion.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ngetWorkflows: () => Workflow[]\n\nonCreatedWorkflow: (callback: OnCreatedWorkflowCallback) => ListenerHandle\n\nonDeletedWorkflow: (callback: OnDeletedWorkflowCallback) => ListenerHandle\n\nonUpdatedWorkflow: (callback: OnUpdatedWorkflowCallback) => ListenerHandle\n```\n\n----------------------------------------\n\nTITLE: Getting an Environment Variable - Type Declaration\nDESCRIPTION: Defines a function type `getVar` for retrieving the value of an environment variable by its name. It accepts the `name` (string) of the variable and returns the value (string or undefined) if the variable exists, or undefined if not found.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **getVar**: (`name`: `string`) => `string` \\| `undefined`\"\n```\n\n----------------------------------------\n\nTITLE: Configuration References for Caido UI Styling\nDESCRIPTION: The configuration references demonstrate the key dependencies and packages used for styling Caido plugins, including custom adaptations of PrimeVue and TailwindCSS that align with Caido's theme.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/frontend/ui.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntailwind.config.ts\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Response\nDESCRIPTION: Constructor for creating a new Response object with optional body and configuration options.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Response(body?: Body, opts?: ResponseOpts): Response\n```\n\n----------------------------------------\n\nTITLE: Event Listener Management\nDESCRIPTION: Shows how to add event listeners using the on() method and demonstrates the order of execution when using regular and prepended listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Set Interval Function Definition\nDESCRIPTION: Generic function that schedules repeated execution of a callback every specified milliseconds. Minimum delay is 4ms.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetInterval<TArgs extends any[]>(callback: (...args: TArgs) => void, ms?: number): Timeout\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring HTTP Request\nDESCRIPTION: Demonstrates creating a new RequestSpec object and setting various HTTP request properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sendRequest(sdk: SDK): Promise<void> {\n  const spec = new RequestSpec(\"https://example.com/\");\n  spec.setMethod(\"GET\");\n  spec.setHost(\"example.com\");\n  spec.setPort(443);\n  spec.setPath(\"/\");\n  spec.setQuery(\"?query=test\")\n  spec.setTls(true);\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Event Listeners in Node.js EventEmitter\nDESCRIPTION: This snippet shows how removeListener() behaves when multiple instances of the same listener are added to an event. It demonstrates that removeListener() removes the most recently added instance of the listener.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener - JavaScript\nDESCRIPTION: This snippet illustrates the usage of the `once` method to register a one-time listener for an event. The listener will be invoked and removed after the event is triggered.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nonce(`event`: [`EventKey`](dom-events.md#eventkey), `listener`: (...`args`: `any`[]) => `void`): `this`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyEE.once('foo', () => console.log('a'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyEE.prependOnceListener('foo', () => console.log('b'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyEE.emit('foo');\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Listener Example\nDESCRIPTION: Shows how to use event listeners with EventEmitter, demonstrating multiple listeners handling the same event with different parameters.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Ordering Event Listeners with prependListener in JavaScript\nDESCRIPTION: Demonstrates how to use prependListener() to add a listener to the beginning of the listeners array, affecting the order of execution when an event is emitted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Bytes from Request Path\nDESCRIPTION: Gets the raw byte representation of a request path to avoid UTF-8 encoding conversion\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/backend/binary.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.getPath({raw: true})\n```\n\n----------------------------------------\n\nTITLE: File Truncation Example\nDESCRIPTION: Example demonstrating how to truncate a file to a specific length using FileHandle. In this case, retaining only the first 4 bytes of the file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open } from 'fs/promises';\n\nlet filehandle = null;\ntry {\n  filehandle = await open('temp.txt', 'r+');\n  await filehandle.truncate(4);\n} finally {\n  await filehandle?.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Using Path\nDESCRIPTION: Initiates an IPC socket connection using the specified path. An optional listener can be provided for handling connect events, following the same asynchronous pattern.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(path: string, connectionListener?: () => void): this\n```\n\n----------------------------------------\n\nTITLE: Renaming a Hosted File - Type Declaration\nDESCRIPTION: Defines a function type `rename` for renaming a file on the host. It accepts the `id` (string) of the file and the `name` (string) to rename the file to. It returns a Promise that resolves to a `HostedFile` object representing the renamed file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **rename**: (`id`: `string`, `name`: `string`) => `Promise`\\<[`HostedFile`](index.md#hostedfile)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Prepended Listener for Events - JavaScript\nDESCRIPTION: This snippet explains how to add a listener to the beginning of the listeners array for an event using `prependListener`, ensuring that it is called before other listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nprependListener(`event`: [`EventKey`](dom-events.md#eventkey), `listener`: (...`args`: `any`[]) => `void`): `this`\n```\n\n----------------------------------------\n\nTITLE: Event Listener Order Demonstration\nDESCRIPTION: Shows the difference between regular and prepended event listeners, demonstrating execution order when using on() and prependListener().\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: One-Time Prepended Listener - JavaScript\nDESCRIPTION: This snippet demonstrates the use of `prependOnceListener` to add a one-time listener to the beginning of the listeners array for an event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nprependOnceListener(`event`: [`EventKey`](dom-events.md#eventkey), `listener`: (...`args`: `any`[]) => `void`): `this`\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Options Object\nDESCRIPTION: Method signature for starting a server using a ListenOptions configuration object and optional listener callback.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(options: ListenOptions, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining Console Interface Type in TypeScript\nDESCRIPTION: TypeScript interface definition for Console object that provides logging functionality with different severity levels. Logs are only available in backend logs. Each method accepts any type of message parameter and returns void.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/console.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Console = {\n    debug(message: any): void;    // Log debug level messages\n    error(message: any): void;    // Log error level messages\n    log(message: any): void;      // Log info level messages\n    warn(message: any): void;     // Log warning level messages\n}\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter with Multiple Listeners in JavaScript\nDESCRIPTION: Example demonstrating how to create an EventEmitter, register multiple listeners, and emit an event with arguments. Shows how listeners are called in registration order and how they can handle arguments differently.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Listening on Unix Domain Socket in JavaScript\nDESCRIPTION: Shows how to configure a server to listen on a Unix domain socket (/tmp/echo.sock) using the Net module in JavaScript.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nserver.listen('/tmp/echo.sock', () => {\n  console.log('server bound');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Once and PrependOnceListener in JavaScript with EventEmitter\nDESCRIPTION: Demonstrates the usage of 'once' and 'prependOnceListener' methods to add one-time event listeners, showing their execution order.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Piping Commands with spawn()\nDESCRIPTION: Advanced example demonstrating how to pipe commands (ps ax | grep ssh) using Node.js spawn()\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Emitter\nDESCRIPTION: Synchronously calls all listeners of a specific event, providing them with supplied arguments. Supports multiple event names including 'close', 'connect', 'data', 'end', and 'error'.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nemit(event: string | symbol, ...args: any[]): boolean\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Once Method Example\nDESCRIPTION: Example showing the usage of once() method to add one-time event listeners, demonstrating the difference between once() and prependOnceListener() in terms of execution order.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Using eventNames Method in JavaScript with EventEmitter\nDESCRIPTION: Shows how to use the eventNames method of EventEmitter to list all registered event names, including both string and Symbol events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Using prependListener Method in JavaScript EventEmitter\nDESCRIPTION: Example demonstrating how to use prependListener() to add a listener to the beginning of the listeners array, contrasting with the standard on() method which adds listeners to the end of the array.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: FiltersSDK Object - Type Declaration\nDESCRIPTION: Describes the `FiltersSDK` object, which provides methods for interacting with filters, including creating, deleting, retrieving, and updating filters. Each method returns a Promise that resolves to the corresponding filter operation result.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **FiltersSDK**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Listener for Readable Events - JavaScript\nDESCRIPTION: This snippet demonstrates registering a listener for 'readable' events using the `on` method of an EventEmitter, which invokes a callback when the stream is readable.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\non(`event`: \"readable\", `listener`: () => `void`): `this`\n```\n\n----------------------------------------\n\nTITLE: Stats Object Console Output Example\nDESCRIPTION: Example of the structure and format of a Stats object output when logged to console, showing various file metadata properties including timestamps, permissions, and size information.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nStats {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atimeMs: 1318289051000.1,\n  mtimeMs: 1318289051000.1,\n  ctimeMs: 1318289051000.1,\n  birthtimeMs: 1318289051000.1,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n```\n\n----------------------------------------\n\nTITLE: Retrieving EventEmitter Registered Event Names\nDESCRIPTION: Shows how to get a list of all events for which an EventEmitter has registered listeners. The example demonstrates that the eventNames() method returns both string and Symbol event names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Event Names Example\nDESCRIPTION: Shows how to retrieve registered event names from an EventEmitter instance. Demonstrates registering both string and Symbol-based event listeners and listing them.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n```\n\n----------------------------------------\n\nTITLE: Removing Listeners in EventEmitter (JavaScript)\nDESCRIPTION: Demonstrates how to remove listeners from an EventEmitter, showing the behavior of removeListener() method and its impact on the internal listener array.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Child Process Kill Signal Example\nDESCRIPTION: Demonstrates how to send signals to child processes using the kill() method. Includes error handling and explains platform-specific behavior for Windows and Linux systems.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process.\ngrep.kill('SIGHUP');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn(\n  'sh',\n  [\n    '-c',\n    `node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit']\n  }\n);\n\nsetTimeout(() => {\n  subprocess.kill(); // Does not terminate the Node.js process in the shell.\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: One-Time Event Listener Implementation\nDESCRIPTION: Demonstrates the usage of once() method to add one-time event listeners that are automatically removed after being triggered once.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Registering a Command in TypeScript\nDESCRIPTION: Example showing how to register a basic command that prints to console. Demonstrates using the CommandsSDK.register() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.commands.register(\"hello\", {\n  name: \"Print to console.\",\n  run: () => console.log(\"Hello world!\"),\n  group: \"Custom Commands\",\n});\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal Example\nDESCRIPTION: Example demonstrating how removeListener() behaves when removing event listeners, including timing of removal and chaining multiple listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Stream Write with Backpressure Handling\nDESCRIPTION: Example showing how to write data to a stream while handling backpressure using the drain event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\n----------------------------------------\n\nTITLE: One-time Event Listeners Order Example\nDESCRIPTION: Demonstrates the execution order of one-time event listeners using once() and prependOnceListener() methods.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal Example in JavaScript\nDESCRIPTION: Demonstrates the behavior of removeListener() method with event emitters, showing how listener removal timing affects event execution.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Removal Example\nDESCRIPTION: Shows how removeListener() behaves when removing a listener that was added multiple times, demonstrating that it removes the most recently added instance.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: API Type Definition and Registration\nDESCRIPTION: Defines and registers the API interface for the test request function.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type API = DefineAPI<{\n  testSendRequest: typeof testSendRequest;\n}>;\n\nexport function init(sdk: SDK<API>) {\n  sdk.api.register(\"testSendRequest\", testSendRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'on' Method for Event Listening in JavaScript\nDESCRIPTION: Example showing how to use the 'on' method to attach an event listener to a server's 'connection' event. The listener logs a message when someone connects.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter EventNames Method in JavaScript\nDESCRIPTION: Example showing how to use the eventNames method of an EventEmitter to retrieve an array of all events for which the emitter has registered listeners. The example demonstrates both string and Symbol event names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in JavaScript\nDESCRIPTION: Demonstrates how removeListener() behaves when removing event listeners during emission. Shows that listeners being removed after emit starts will still execute for that emission.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Using eventNames Method in JavaScript EventEmitter\nDESCRIPTION: Example showing how to use the eventNames() method to retrieve an array of all events for which the emitter has registered listeners. The example demonstrates registration of both string and Symbol event names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Using removeListener with EventEmitter in JavaScript\nDESCRIPTION: Illustrates the use of removeListener for unregistering listeners from an event. Demonstrates removal behavior and impacts on listener invocation order when an event is emitted. Requires Node.js EventEmitter module. A listener is removed after a specific call, which affects subsequent event emission.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Using prependListener for Event Order Control in JavaScript\nDESCRIPTION: Example demonstrating the difference between 'on' and 'prependListener' methods. Shows how prependListener adds the callback to the beginning of the listeners array, causing it to execute first.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Registering a Menu Item in TypeScript\nDESCRIPTION: Example showing how to register a menu item with an icon that triggers a command. Uses MenuSDK.registerItem() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.menu.registerItem({\n  type: \"Request\",\n  commandId: \"hello\",\n  leadingIcon: \"fas fa-hand\",\n});\n```\n\n----------------------------------------\n\nTITLE: Listener Order Control in JavaScript Events\nDESCRIPTION: Shows how to control listener execution order using prependListener(). Demonstrates the difference between normal and prepended event listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: EventEmitter eventNames() Example\nDESCRIPTION: Shows how to get an array of registered event names from an EventEmitter instance, including both string and Symbol events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a Writable Stream (JavaScript)\nDESCRIPTION: Demonstrates how to write data to a Writable stream using the write() method, handling backpressure with the 'drain' event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Port, Hostname and Backlog\nDESCRIPTION: Method signature for starting a server with optional port, hostname, backlog and listener callback parameters. Supports both TCP and IPC server types.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using once() and prependOnceListener() Methods in Node.js\nDESCRIPTION: This snippet demonstrates how to use once() and prependOnceListener() methods to register one-time event listeners. It shows the execution order when multiple one-time listeners are registered for the same event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Names from EventEmitter in JavaScript\nDESCRIPTION: Shows how to use the eventNames() method to get an array of all events that have registered listeners. Demonstrates registering both string and Symbol event names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Component in Vue.js\nDESCRIPTION: Example of implementing PrimeVue Toast component in a Vue.js component file, including setup, imports, and usage with a counter incrementing feature.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/styling.md#2025-04-20_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Button from \"primevue/button\";\nimport InputText from \"primevue/inputtext\";\n// Import both Toast and its hook function.\nimport Toast from \"primevue/toast\";\nimport { useToast } from \"primevue/usetoast\";\n\nimport { ref } from \"vue\";\n\n// Add the hook to provide the API.\nconst toast = useToast();\n\nconst counter = ref(0);\n\nconst onIncrementClick = () => {\n  // Configure the options for the Toast message.\n  toast.add({\n    severity: \"info\",\n    summary: \"Info\",\n    detail: \"Counter incremented!\",\n    life: 3000\n  });\n  counter.value++;\n};\n</script>\n\n<template>\n  <div class=\"h-full flex justify-center items-center\">\n    <Toast /> // Add the component.\n    <div class=\"flex flex-col gap-1\">\n      <Button label=\"Increment counter\" @click=\"onIncrementClick\" />\n      <InputText :model-value=\"counter\" readonly />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Management in JavaScript\nDESCRIPTION: Shows how removeListener() handles multiple instances of the same listener function, removing the most recently added instance.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Directory Creation Example - JavaScript\nDESCRIPTION: Shows how to create a directory recursively using mkdir() with error handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mkdir } from 'fs/promises';\n\ntry {\n  const projectFolder = './test/project/123';\n  const createDir = await mkdir(projectFolder, { recursive: true });\n\n  console.log(`created ${createDir}`);\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Registered Event Names\nDESCRIPTION: Returns an array of event names that the emitter has registered listeners for, which can include types like strings or Symbols.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\neventNames(): EventKey[]\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Removal in JavaScript\nDESCRIPTION: Shows how removeListener() handles multiple instances of the same listener function. When a function is added multiple times, removeListener() removes the most recently added instance.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams sort Method\nDESCRIPTION: Example showing how to sort URL parameters using the sort method. Demonstrates stable sorting of parameters with the same name.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/url.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams('query[]=abc&type=search&query[]=123');\nparams.sort();\nconsole.log(params.toString());\n// Prints query%5B%5D=abc&query%5B%5D=123&type=search\n```\n\n----------------------------------------\n\nTITLE: Comparing Standard and Prepend Event Listeners in Node.js\nDESCRIPTION: This example demonstrates the difference between standard event listeners added with on() and prepended listeners. It shows how prepended listeners are executed before standard listeners when an event is emitted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: File Access Check Example - JavaScript\nDESCRIPTION: Demonstrates how to check if a file can be read and written by the current process using access() method with permission constants.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { access, constants } from 'fs/promises';\n\ntry {\n  await access('/etc/passwd', constants.R_OK | constants.W_OK);\n  console.log('can access');\n} catch {\n  console.error('cannot access');\n}\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceRule Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceRule` object, a rule in Match and Replace with properties like `collectionId`, `id`, `isEnabled`, and `name`. It stores information about the rule's metadata and belonging collection.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceRule**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Child Process stdout in Node.js\nDESCRIPTION: Shows how to capture and process output data from a child process's stdout stream. This example spawns an 'ls' command and sets up an event listener to process each chunk of data received.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Public Key for Plugin Verification\nDESCRIPTION: Creates a public key file from the private key using OpenSSL for plugin package verification.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkey -in private.pem -pubout --out public.pem\n```\n\n----------------------------------------\n\nTITLE: Getting All Hosted Files - Type Declaration\nDESCRIPTION: Defines a function type `getAll` for retrieving all hosted files. It returns an array of `HostedFile` objects.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **getAll**: () => [`HostedFile`](index.md#hostedfile)[]\"\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter.eventNames()\nDESCRIPTION: Example showing how to get an array of registered event names from an EventEmitter instance, including both string and Symbol event types.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from an EventEmitter in JavaScript\nDESCRIPTION: Demonstrates the behavior of removeListener() method in an EventEmitter, showing how it affects the internal listener array and event emission. It also illustrates the order of listener execution when removing listeners during event emission.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Listener Order in JavaScript with EventEmitter\nDESCRIPTION: Illustrates the difference in execution order between regular listeners added with 'on' and listeners prepended with 'prependListener'.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Using once and prependOnceListener with EventEmitter in JavaScript\nDESCRIPTION: Demonstrates how to use EventEmitter methods once and prependOnceListener to add one-time event listeners. It shows the order of listener execution when using prependOnceListener against once. Requires Node.js EventEmitter module. It triggers an event 'foo' to show the sequence in which listeners are called.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationHeaderUpdate Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationHeaderUpdate with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationHeaderUpdate {\n  kind: \"OperationHeaderUpdate\";\n  matcher: MatchReplaceMatcherName;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Kernel Version Information Function\nDESCRIPTION: Returns the kernel version string. Uses uname(3) on POSIX systems and RtlGetVersion() on Windows.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nversion(): string\n```\n\n----------------------------------------\n\nTITLE: Demonstrating removeListener Behavior in EventEmitter\nDESCRIPTION: This example shows how removeListener() works with event emission ordering, illustrating that listeners removed during event emission will still complete their execution for the current emit cycle.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Defining CustomEvent Class in TypeScript\nDESCRIPTION: TypeScript implementation of CustomEvent class that implements the Event interface. It allows creation of custom events with optional generic type for event details.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/dom-events.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomEvent<D = any> implements Event {\n  constructor(type: string, opts?: { details: D })\n  readonly details: null | D\n  readonly type: string\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer byteLength Calculation\nDESCRIPTION: Demonstrates how to calculate byte length of strings and buffers using Buffer.byteLength().\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\nconst str = '\\u00bd + \\u00bc = \\u00be';\n\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, 'utf8')} bytes`);\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationPathRaw Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationPathRaw with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationPathRaw {\n  kind: \"OperationPathRaw\";\n  matcher: MatchReplaceMatcherRaw;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Concatenation Example\nDESCRIPTION: Shows how to concatenate multiple Buffers into a single Buffer using Buffer.concat().\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\n\n// Create a single `Buffer` from a list of three `Buffer` instances.\n\nconst buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\nconsole.log(totalLength);\n// Prints: 42\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\nconsole.log(bufA);\n// Prints: <Buffer 00 00 00 00 ...>\nconsole.log(bufA.length);\n// Prints: 42\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Listeners in EventEmitter (JavaScript)\nDESCRIPTION: Shows how removeListener() behaves when a single function has been added as a handler multiple times for a single event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Defining OnCreatedWorkflowCallback Type in TypeScript\nDESCRIPTION: Defines a callback function type for when a workflow is created, taking an event object with a workflow property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OnCreatedWorkflowCallback = (event: { workflow: Workflow }) => void\n```\n\n----------------------------------------\n\nTITLE: Event Names Retrieval in JavaScript\nDESCRIPTION: Shows how to get an array of all registered event names using eventNames(). Demonstrates handling both string and Symbol event names.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Event Names Example\nDESCRIPTION: Shows how to retrieve the list of registered event names from an EventEmitter instance, including support for Symbol events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Management Example\nDESCRIPTION: Example showing how removeListener() handles multiple identical listeners for the same event.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: PlatformPath Interface Definition in TypeScript\nDESCRIPTION: Definition of PlatformPath interface containing platform-specific path properties and methods for path manipulation including delimiter, separator and various path operation functions.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/path/namespaces/export=.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PlatformPath {\n  readonly delimiter: ';' | ':';      // Platform-specific path delimiter\n  readonly sep: '\\\\' | '/';          // Platform-specific path separator\n  \n  basename(path: string, suffix?: string): string;\n  dirname(path: string): string;\n  extname(path: string): string;\n  format(pathObject: FormatInputPathObject): string;\n  isAbsolute(path: string): boolean;\n  join(...paths: string[]): string;\n  normalize(path: string): string;\n  parse(path: string): ParsedPath;\n  resolve(...paths: string[]): string;\n}\n```\n\n----------------------------------------\n\nTITLE: EventEmitter eventNames Example\nDESCRIPTION: Shows how to retrieve an array of registered event names from an EventEmitter instance.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationQueryRaw Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationQueryRaw with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationQueryRaw {\n  kind: \"OperationQueryRaw\";\n  matcher: MatchReplaceMatcherRaw;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Home Directory Path Function\nDESCRIPTION: Returns the current user's home directory path. Uses environment variables $HOME on POSIX or USERPROFILE on Windows, with fallbacks to user profile lookup.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhomedir(): string\n```\n\n----------------------------------------\n\nTITLE: ParsedPath Interface Definition in TypeScript\nDESCRIPTION: Definition of ParsedPath interface with required string properties for representing a fully parsed path including base, dir, ext, name and root components.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/path/namespaces/export=.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedPath {\n  base: string;  // The file name including extension\n  dir: string;   // The full directory path\n  ext: string;   // The file extension\n  name: string;  // The file name without extension\n  root: string;  // The root of the path\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Removal Example\nDESCRIPTION: Demonstrates how removeListener() handles multiple instances of the same listener function, showing that it removes the most recently added instance first.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationStatusCodeUpdate Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationStatusCodeUpdate with kind and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationStatusCodeUpdate {\n  kind: \"OperationStatusCodeUpdate\";\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Using randomFillSync in JavaScript\nDESCRIPTION: Demonstrates the synchronous version of randomFill that fills buffers with cryptographically strong random bytes. Shows usage with Buffer, TypedArrays and DataView.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/crypto.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Buffer } from 'buffer';\nimport { randomFillSync } from 'crypto';\n\nconst buf = Buffer.alloc(10);\nconsole.log(randomFillSync(buf).toString('hex'));\n\nrandomFillSync(buf, 5);\nconsole.log(buf.toString('hex'));\n\n// The above is equivalent to the following:\nrandomFillSync(buf, 5, 5);\nconsole.log(buf.toString('hex'));\n\nconst a = new Uint32Array(10);\nconsole.log(Buffer.from(randomFillSync(a).buffer,\n                        a.byteOffset, a.byteLength).toString('hex'));\n\nconst b = new DataView(new ArrayBuffer(10));\nconsole.log(Buffer.from(randomFillSync(b).buffer,\n                        b.byteOffset, b.byteLength).toString('hex'));\n\nconst c = new ArrayBuffer(10);\nconsole.log(Buffer.from(randomFillSync(c)).toString('hex'));\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage Layout in YAML\nDESCRIPTION: Defines the structure and content of a VitePress homepage including hero section with logo, navigation actions, and feature sections. The configuration includes main navigation links to guides, tutorials, reference docs, and concepts.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"Caido\"\n  text: \"A lightweight web security auditing toolkit\"\n  image:\n    src: /logo.png\n    \"no-shadow\": true\n\n  tagline: Developer Documentation\n  actions:\n    - theme: alt\n      text: Guides\n      link: /guides/\n\n    - theme: alt\n      text: Tutorials\n      link: /tutorials/\n\n    - theme: alt\n      text: Reference\n      link: /reference/\n\n    - theme: alt\n      text: Concepts\n      link: /concepts/\n\nfeatures:\n  - icon: 👤\n    title: Looking for the user documentation? Click here.\n    link: https://docs.caido.io\n```\n\n----------------------------------------\n\nTITLE: Initializing Caido Plugin Project with PNPM\nDESCRIPTION: Creates a new Caido plugin project using the official community template.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @caido-community/plugin\n```\n\n----------------------------------------\n\nTITLE: Filter Object - Type Declaration\nDESCRIPTION: Describes the `Filter` object, which represents a filter with properties like `alias`, `id`, `name`, and `query`. These properties define the filter's metadata and HTTPQL expression.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **Filter**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Path and Backlog\nDESCRIPTION: Method signature for starting an IPC server with path, optional backlog and listener callback parameters.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(path: string, backlog?: number, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceCollection Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceCollection` object, which represents a collection in Match and Replace with properties like `id`, `name`, and `ruleIds`. It stores information about the collection's metadata and associated rule IDs.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceCollection**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the basic Event type that represents events in the system.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/dom-events.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Event {\n  readonly type: EventKey\n}\n```\n\n----------------------------------------\n\nTITLE: QuickJS Module Reference Table\nDESCRIPTION: Markdown table showing available modules with their descriptions, import paths, and global availability status. Includes standard utilities like URL, buffer, crypto as well as Caido-specific modules.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Module                                 | Description              | Import             | Global |\n| -------------------------------------- | ------------------------ | ------------------ | ------ |\n| [url](extra/url.md)                    | URL utilities            | N/A                | ✔︎     |\n| [abort](llrt/abort.md)                 | Abort signaling          | N/A                | ✔︎     |\n| [buffer](llrt/buffer.md)               | Buffers                  | `buffer`           | ✔︎     |\n| [child_process](llrt/child_process.md) | Process spawning         | `child_process`    | ✘      |\n| [console](extra/console.md)            | Console logging          | N/A                | ✔︎     |\n| [crypto](llrt/crypto.md)               | Cryptographic primitives | `crypto`           | ✘      |\n| [dom-events](llrt/dom-events.md)       | Events                   | N/A                | ✔︎     |\n| [fs](llrt/fs/index.md)                 | File system              | `fs`, `fs/promise` | ✘      |\n| [http](caido/http.md)                  | Fetch implementation     | `caido:http`       | ✘      |\n| [globals](llrt/globals/index.md)       | Global classes           | N/A                | ✔︎     |\n| [net](llrt/net.md)                     | Sockets                  | `net`              | ✘      |\n| [os](extra/os.md)                      | OS information           | `os`               | ✘      |\n| [path](llrt/path/index.md)             | Path transformation      | `path`             | ✘      |\n| [process](llrt/process.md)             | Process information      | `process`          | ✔︎     |\n| [sqlite](extra/sqlite.md)              | SQlite access            | `sqlite`           | ✘      |\n| [stream](llrt/stream.md)               | Streams (basic)          | `stream`           | ✔︎     |\n| [timers](extra/timers.md)              | Timers                   | N/A                | ✔︎     |\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Using Port Only\nDESCRIPTION: Establishes a connection to a TCP socket using only port and an optional connection listener. Similar to other connect methods, it emits 'connect' or 'error' depending on the outcome.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(port: number, connectionListener?: () => void): this\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceOperationHeader Type - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceOperationHeader` type, an operation for the header section.  It's a union of different header operations, including raw, add, remove, and update operations.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceOperationHeader**: [`MatchReplaceOperationHeaderRaw`](index.md#matchreplaceoperationheaderraw) \\| [`MatchReplaceOperationHeaderAdd`](index.md#matchreplaceoperationheaderadd) \\| [`MatchReplaceOperationHeaderRemove`](index.md#matchreplaceoperationheaderremove) \\| [`MatchReplaceOperationHeaderUpdate`](index.md#matchreplaceoperationheaderupdate)\"\n```\n\n----------------------------------------\n\nTITLE: Using once and prependOnceListener Methods in JavaScript\nDESCRIPTION: Example showing the usage of 'once' and 'prependOnceListener' methods to add one-time event listeners. These listeners execute only once and then are automatically removed.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```\n\n----------------------------------------\n\nTITLE: Getting All Filters - Type Declaration\nDESCRIPTION: Defines a function type `getAll` for retrieving all filters. It returns an array of `Filter` objects.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **getAll**: () => [`Filter`](index.md#filter)[]\"\n```\n\n----------------------------------------\n\nTITLE: Running 'ls -lh /usr' Command with Node.js spawn()\nDESCRIPTION: This example demonstrates how to run the 'ls -lh /usr' command using child_process.spawn(). It captures stdout, stderr, and the exit code of the spawned process.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Log Output\nDESCRIPTION: Shows the expected log output when the multiply function is called with sample values.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/rpc.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2024-11-05T13:26:13.528023Z  INFO plugin:5a758b74-e176-473f-a545-bdb452015b9a js|sdk: The product of the multiply call is: 15\n```\n\n----------------------------------------\n\nTITLE: Plugin Initialization\nDESCRIPTION: Initializes the plugin and registers the sendRequest function.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function init(sdk: SDK<API>) {\n  sdk.api.register(\"sendRequest\", sendRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Request Instance Creation\nDESCRIPTION: Creates a new raw request instance targeting a specific URL endpoint.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function testSendRequest(sdk: SDK): Promise<void> {\n  console.log(\"Testing send request\");\n  const req = new RequestSpecRaw(\"http://localhost:5555\");\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Once Listener Example\nDESCRIPTION: Shows how to use one-time event listeners with both regular and prepended versions.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n```\n\n----------------------------------------\n\nTITLE: Defining SitemapSDK Interface in TypeScript\nDESCRIPTION: Defines an interface for SitemapSDK with methods to get and set the current scope ID.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SitemapSDK {\n  getScopeId(): ID | undefined;\n  setScope(id: ID | undefined): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Port and Hostname\nDESCRIPTION: Method signature for starting a server with optional port, hostname and listener callback. Simplified version without backlog parameter.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(port?: number, hostname?: string, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting the Scope ID - Type Declaration\nDESCRIPTION: Defines a function type `getScopeId` for retrieving the current scope ID. It returns the current scope ID or undefined if no scope is set.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **getScopeId**: () => [`ID`](index.md#id-3) \\| `undefined`\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Listener Removal Behavior Example\nDESCRIPTION: Shows how removeListener() handles multiple instances of the same listener function, removing the most recently added instance.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeSDK Interface in TypeScript\nDESCRIPTION: Defines an interface for RuntimeSDK with a version getter to retrieve the current version of Caido.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RuntimeSDK {\n  get version(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: HostedFile Object - Type Declaration\nDESCRIPTION: Describes the `HostedFile` object, which represents a hosted file with properties like `createdAt`, `id`, `name`, `path`, `size`, and `updatedAt`. These properties provide information about the file's metadata.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **HostedFile**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Navigation in TypeScript\nDESCRIPTION: Example demonstrating how to navigate to a specific path using the NavigationSDK.goTo() method.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsdk.navigation.goTo(\"/my-plugin-page\");\n```\n\n----------------------------------------\n\nTITLE: Setting Path with Raw Bytes\nDESCRIPTION: Updates the request path using the custom byte array to preserve raw byte values\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/backend/binary.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspec.setPath(path)\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Path Only\nDESCRIPTION: Simplified method signature for starting an IPC server with path and optional listener callback.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(path: string, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Port Only\nDESCRIPTION: Simplified method signature for starting a server with just optional port and listener callback parameters.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(port?: number, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating New Caido Plugin Package\nDESCRIPTION: Command to create a new Caido plugin package using the official template\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @caido-community/plugin\n```\n\n----------------------------------------\n\nTITLE: Getting an Asset - Type Declaration\nDESCRIPTION: Defines a function type `get` that retrieves an asset from a specified path. It accepts a `path` (string) as input and returns a Promise that resolves to an `Asset` object.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **get**: (`path`: `string`) => `Promise`\\<[`Asset`](index.md#asset)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Interface Properties in TypeScript\nDESCRIPTION: Type definitions for the Workflow interface properties including description, id, kind, and name fields.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\ndescription: string\n\nid: string\n\nkind: WorkflowKind\n\nname: string\n```\n\n----------------------------------------\n\nTITLE: Creating a Hosted File - Type Declaration\nDESCRIPTION: Defines a function type `create` for uploading a file to a host. It takes a `File` object as input and returns a Promise that resolves to a `HostedFile` object representing the uploaded file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **create**: (`file`: `File`) => `Promise`\\<[`HostedFile`](index.md#hostedfile)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowKind Type in TypeScript\nDESCRIPTION: Type definition for WorkflowKind, which represents the different types of workflows that can exist in the system.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nWorkflowKind: \"Convert\" | \"Active\" | \"Passive\"\n```\n\n----------------------------------------\n\nTITLE: Example Log Output\nDESCRIPTION: Shows the format of the log output when a request is sent and processed.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2024-10-09T19:10:34.825319Z  INFO plugin:d69424f6-a091-4660-8193-2ec624b54c5e js|sdk: REQ 4110: example.com:443/?query=test received a status code of 200\n```\n\n----------------------------------------\n\nTITLE: Deleting a Hosted File - Type Declaration\nDESCRIPTION: Defines a function type `delete` for deleting a file from the host. It accepts the `id` (string) of the file to delete and returns a Promise that resolves to void, indicating the deletion operation.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **delete**: (`id`: `string`) => `Promise`\\<`void`\\>\"\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceMatcherRaw Type - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceMatcherRaw` type, a union of different raw matchers in Match and Replace.  It can be a regex matcher, a value matcher, or a full matcher.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceMatcherRaw**: [`MatchReplaceMatcherRawRegex`](index.md#matchreplacematcherrawregex) \\| [`MatchReplaceMatcherRawValue`](index.md#matchreplacematcherrawvalue) \\| [`MatchReplaceMatcherRawFull`](index.md#matchreplacematcherrawfull)\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Documentation in Bash\nDESCRIPTION: Command to start the development server for previewing documentation changes locally.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: OS Release Information Function\nDESCRIPTION: Returns the operating system release as a string. Uses uname(3) on POSIX systems and RtlGetVersion() on Windows.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrelease(): string\n```\n\n----------------------------------------\n\nTITLE: Temporary Directory Creation Example - JavaScript\nDESCRIPTION: Demonstrates creating a unique temporary directory using mkdtemp() with proper path handling.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/fs/promises.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mkdtemp } from 'fs/promises';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\n\ntry {\n  await mkdtemp(join(tmpdir(), 'foo-'));\n} catch (err) {\n  console.error(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Set Immediate Function Definition\nDESCRIPTION: Generic function that schedules immediate execution of a callback after I/O events. Takes a callback function with variable arguments.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetImmediate<TArgs extends any[]>(callback: (...args: TArgs) => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting the Scope - Type Declaration\nDESCRIPTION: Defines a function type `setScope` for setting the current scope. It accepts the `id` of the scope to set and returns void.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **setScope**: (`id`: [`ID`](index.md#id-3) \\| `undefined`) => `void`\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationHeaderAdd Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationHeaderAdd with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationHeaderAdd {\n  kind: \"OperationHeaderAdd\";\n  matcher: MatchReplaceMatcherName;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Environment Variables - Type Declaration\nDESCRIPTION: Defines a function type `getVars` for retrieving all environment variables. It returns an array of `EnvironmentVariable` objects.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **getVars**: () => [`EnvironmentVariable`](index.md#environmentvariable)[]\"\n```\n\n----------------------------------------\n\nTITLE: Temporary Directory Path Function\nDESCRIPTION: Returns the operating system's default directory for temporary files as a string.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntmpdir(): string\n```\n\n----------------------------------------\n\nTITLE: Operating System Platform Function\nDESCRIPTION: Returns the operating system platform identifier for which the Node.js binary was compiled. Value is set at compile time.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nplatform(): Platform\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceReplacerWorkflow Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceReplacerWorkflow` object, a replacer that replaces with the result of a workflow. The input of the workflow depends on the operation and matcher. It has a `kind` property set to `\"ReplacerWorkflow\"` and a `workflowId` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceReplacerWorkflow**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationMethodUpdate Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationMethodUpdate with kind and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationMethodUpdate {\n  kind: \"OperationMethodUpdate\";\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Filter - Type Declaration\nDESCRIPTION: Defines a function type `delete` for deleting a filter. It accepts the `id` of the filter to delete and returns a Promise that resolves to void, indicating the deletion operation.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **delete**: (`id`: [`ID`](index.md#id-3)) => `Promise`\\<`void`\\>\"\n```\n\n----------------------------------------\n\nTITLE: SQLite Default Connection Timeout\nDESCRIPTION: Shows the default busy timeout configuration in milliseconds\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n5000\n```\n\n----------------------------------------\n\nTITLE: Piping between child processes in Node.js\nDESCRIPTION: An example showing how to pipe data between two processes to create a Unix-like pipeline. This code demonstrates how to run 'ps ax | grep ssh' by spawning two separate processes and manually connecting their standard streams.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: SQLite Default Memory Mode Setting\nDESCRIPTION: Shows the default in-memory database configuration value\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestQuery Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionRequestQuery with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestQuery {\n  kind: \"SectionRequestQuery\";\n  operation: MatchReplaceOperationQuery;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationHeaderRemove Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationHeaderRemove with kind and matcher properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationHeaderRemove {\n  kind: \"OperationHeaderRemove\";\n  matcher: MatchReplaceMatcherName;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestHeader Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionRequestHeader with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestHeader {\n  kind: \"SectionRequestHeader\";\n  operation: MatchReplaceOperationHeader;\n}\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceMatcherRawFull Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceMatcherRawFull` object, a matcher that matches the entire section. It has a `kind` property set to `\"MatcherRawFull\"`.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceMatcherRawFull**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: SQLite Default Connection Lifetime\nDESCRIPTION: Shows the default maximum connection lifetime in seconds\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n3600\n```\n\n----------------------------------------\n\nTITLE: Public Key Format Example\nDESCRIPTION: Shows the expected format of the generated public key file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\n<SOME BASE64 DATA ON ONE LINE>\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: SQLite Default WAL Mode Setting\nDESCRIPTION: Shows the default Write-Ahead Logging (WAL) mode configuration\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationStatusCode Type in TypeScript\nDESCRIPTION: Defines a type alias for MatchReplaceOperationStatusCode using KeepOperation and MatchReplaceOperationStatusCodeUpdate.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceOperationStatusCode = KeepOperation<MatchReplaceOperationStatusCodeUpdate>\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestMethod Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionRequestMethod with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestMethod {\n  kind: \"SectionRequestMethod\";\n  operation: MatchReplaceOperationMethod;\n}\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceOperationBodyRaw Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceOperationBodyRaw` object, a raw operation for the body section.  It has a `kind` property set to `\"OperationBodyRaw\"`, a `matcher` property, and a `replacer` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceOperationBodyRaw**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Clear Timeout Function Definition\nDESCRIPTION: Function to cancel a Timeout object created by setTimeout.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclearTimeout(timeout: Timeout): void\n```\n\n----------------------------------------\n\nTITLE: Creating Unix Socket Server with Node.js Net Module\nDESCRIPTION: This code snippet demonstrates how to configure a server to listen on a Unix domain socket at /tmp/echo.sock instead of a TCP port.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nserver.listen('/tmp/echo.sock', () => {\n  console.log('server bound');\n});\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal Method\nDESCRIPTION: Generic method for removing event listeners, alias for emitter.removeListener().\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\noff<K>(eventName: EventKey, listener: (...args: any[]) => void): this\n```\n\n----------------------------------------\n\nTITLE: System Architecture Detection Function\nDESCRIPTION: Returns the CPU architecture for which the LLRT binary was compiled. Possible return values are 'arm64' or 'x64', equivalent to process.arch.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/os.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narch(): string\n```\n\n----------------------------------------\n\nTITLE: Defining NotAssignableToJson Type in TypeScript\nDESCRIPTION: Defines a union type for values not assignable to JSON, including bigint, symbol, and Function.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NotAssignableToJson = bigint | symbol | Function\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionResponseBody Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionResponseBody with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionResponseBody {\n  kind: \"SectionResponseBody\";\n  operation: MatchReplaceOperationBody;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationMethod Type in TypeScript\nDESCRIPTION: Defines a type alias for MatchReplaceOperationMethod using KeepOperation and MatchReplaceOperationMethodUpdate.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceOperationMethod = KeepOperation<MatchReplaceOperationMethodUpdate>\n```\n\n----------------------------------------\n\nTITLE: Plugin Package JSON Structure Example for Caido Store\nDESCRIPTION: This code snippet shows an example of a plugin entry in the plugin_packages.json file. It demonstrates the required fields including id, name, license, description, author details, public key, and repository information.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/plugin_packages.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"authmatrix\",\n    \"name\": \"AuthMatrix\",\n    \"license\": \"CC0-1.0\",\n    \"description\": \"Grid-based authorization testing across multiple users and roles.\",\n    \"author\": {\n      \"name\": \"Caido Labs Inc.\",\n      \"email\": \"dev@caido.io\",\n      \"url\": \"https://caido.io\"\n    },\n    \"public_key\": \"MCowBQYDK2VwAyEA+du2fw/I+CV6MKEpu0aJ1ki2+MO2V0SnaRB91+GbHwQ=\",\n    \"repository\": \"caido-community/authmatrix\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining OnDeletedWorkflowCallback Type in TypeScript\nDESCRIPTION: Defines a callback function type for when a workflow is deleted, taking an event object with an id property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OnDeletedWorkflowCallback = (event: { id: ID }) => void\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceOperationFirstLineRaw Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceOperationFirstLineRaw` object, a raw operation for the request first line. It has a `kind` property set to `\"OperationFirstLineRaw\"`, a `matcher` property, and a `replacer` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceOperationFirstLineRaw**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationPath Type in TypeScript\nDESCRIPTION: Defines a type alias for MatchReplaceOperationPath using KeepOperation and MatchReplaceOperationPathRaw.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceOperationPath = KeepOperation<MatchReplaceOperationPathRaw>\n```\n\n----------------------------------------\n\nTITLE: Example Output from SQLite Database Operations\nDESCRIPTION: Shows the expected console output from executing the SQLite database operations in a Caido plugin. Displays the database location, inserted row ID, retrieved records, and found record details.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/sqlite.md#2025-04-20_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nDatabase will be stored in: [~]\\Caido\\data\\plugins\\[PLUGIN UUID]\nInserted row with ID: 1\nCurrent records: [{\"id\":1,\"name\":\"Ninjeeter\"}]\nFound record: {\"id\":1,\"name\":\"Ninjeeter\"}\n```\n\n----------------------------------------\n\nTITLE: Piping commands ps and grep in Node.js\nDESCRIPTION: This example shows a complex use case of child_process.spawn() to run 'ps ax | grep ssh' by spawning two processes and piping their output.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Timeout Class Constructor Definition\nDESCRIPTION: Constructor for the Timeout class that represents timer objects returned by setTimeout and setInterval.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Timeout(): Timeout\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceMatcherRawRegex Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceMatcherRawRegex` object, a matcher that matches using a regex over the section. It has a `kind` property set to `\"MatcherRawRegex\"` and a `regex` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceMatcherRawRegex**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Defining OnUpdatedWorkflowCallback Type in TypeScript\nDESCRIPTION: Defines a callback function type for when a workflow is updated, taking an event object with a workflow property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OnUpdatedWorkflowCallback = (event: { workflow: Workflow }) => void\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Connection with Telnet\nDESCRIPTION: A bash command showing how to test the TCP server connection using telnet to connect to localhost on port 8124.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 8124\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationQueryUpdate Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationQueryUpdate with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationQueryUpdate {\n  kind: \"OperationQueryUpdate\";\n  matcher: MatchReplaceMatcherName;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Service in Frontend Index\nDESCRIPTION: Implementation showing how to import and register the Toast service in the frontend index.ts file\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/styling.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToastService from \"primevue/toastservice\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(ToastService);\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceMatcherRawValue Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceMatcherRawValue` object, a matcher that matches the value if present in the section. It has a `kind` property set to `\"MatcherRawValue\"` and a `value` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceMatcherRawValue**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: Installing Caido Plugin Dependencies\nDESCRIPTION: Command to install required dependencies for the plugin package\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Removing an Event Listener\nDESCRIPTION: Provides an alias for the method that removes a listener from the event emitter, maintaining the same parameters and functionality.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\noff<K>(eventName: EventKey, listener: (...args: any[]) => void): this\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners with removeListener()\nDESCRIPTION: Demonstrates how removeListener() works with multiple event listeners, showing that listeners registered at emit time will still execute even if removed during event emission.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSection Type in TypeScript\nDESCRIPTION: Defines a union type for MatchReplaceSection with various section-related types for requests and responses.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceSection = MatchReplaceSectionRequestBody | MatchReplaceSectionRequestFirstLine | MatchReplaceSectionRequestHeader | MatchReplaceSectionRequestMethod | MatchReplaceSectionRequestPath | MatchReplaceSectionRequestQuery | MatchReplaceSectionResponseBody | MatchReplaceSectionResponseFirstLine | MatchReplaceSectionResponseHeader | MatchReplaceSectionResponseStatusCode\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Pnpm in Bash\nDESCRIPTION: Command to install all required dependencies for the documentation project using pnpm package manager.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Basic Command with spawn()\nDESCRIPTION: Example showing how to run 'ls -lh /usr' command and handle its stdout, stderr and exit code using Node.js spawn()\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Caido SDK for Request Handling\nDESCRIPTION: Imports the core SDK module needed for interacting with Caido's plugin system.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SDK } from \"caido:plugin\";\n```\n\n----------------------------------------\n\nTITLE: Killing a Child Process with Signals in Node.js\nDESCRIPTION: This snippet demonstrates how to spawn a child process and send a SIGHUP signal to terminate it. It also shows how to handle the close event to detect when the process has been terminated.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process.\ngrep.kill('SIGHUP');\n```\n\n----------------------------------------\n\nTITLE: Basic Event Listener Example\nDESCRIPTION: Demonstrates how to add a basic event listener using the on() method to handle connection events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestBody Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionRequestBody with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestBody {\n  kind: \"SectionRequestBody\";\n  operation: MatchReplaceOperationBody;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Documentation Changes in Bash\nDESCRIPTION: Command to stage all changes and create a commit with a descriptive message. Replace [WHAT IS MY COMMIT ABOUT] with a meaningful commit description.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add . && git commit -m \"[WHAT IS MY COMMIT ABOUT]\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionResponseHeader Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionResponseHeader with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionResponseHeader {\n  kind: \"SectionResponseHeader\";\n  operation: MatchReplaceOperationHeader;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Listener Removal in EventEmitter\nDESCRIPTION: This example shows how removeListener() removes the most recently added instance when multiple instances of the same function have been registered as event listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Instances of a Listener in JavaScript\nDESCRIPTION: Illustrates how removeListener() behaves when a single function has been added as a handler multiple times for a single event. It removes the most recently added instance of the listener.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestPath Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionRequestPath with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestPath {\n  kind: \"SectionRequestPath\";\n  operation: MatchReplaceOperationPath;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Caido Plugin\nDESCRIPTION: Series of Git commands to initialize a local repository and connect it to GitHub remote.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-plugin\ngit init\ngit add .\ngit commit -m \"init\"\ngit branch -M main\ngit remote add origin git@github.com:YOUR_USERNAME/YOUR_REPO_NAME.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Implementation with Multiple Listeners\nDESCRIPTION: Illustrates how the EventEmitter system works in Node.js, showing how multiple listeners can be registered for the same event. This example demonstrates the order of execution and parameter passing to listeners.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationQueryRemove Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationQueryRemove with kind and matcher properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationQueryRemove {\n  kind: \"OperationQueryRemove\";\n  matcher: MatchReplaceMatcherName;\n}\n```\n\n----------------------------------------\n\nTITLE: Path Interface Type Definitions in TypeScript\nDESCRIPTION: Definition of FormatInputPathObject interface for representing path components including base, dir, ext, name and root properties, all as optional string values.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/path/namespaces/export=.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormatInputPathObject {\n  base?: string;  // The file name including extension\n  dir?: string;   // The full directory path\n  ext?: string;   // The file extension\n  name?: string;  // The file name without extension\n  root?: string;  // The root of the path\n}\n```\n\n----------------------------------------\n\nTITLE: Spawn Error Handling\nDESCRIPTION: Example showing how to handle errors when spawning processes fails. Demonstrates proper error event handling for invalid commands.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst { spawn } = require('child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating removeListener Behavior in EventEmitter\nDESCRIPTION: Example showing how removeListener() affects event handling, specifically that listeners registered at emit time will still execute even if removed during emission.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Defining PromisifiedReturnType Generic Type in TypeScript\nDESCRIPTION: Defines a generic type that transforms the return type of a function into a Promise if it's not already one.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PromisifiedReturnType<T extends (...args: unknown[]) => unknown> = ReturnType<T> extends Promise<infer U> ? Promise<U> : Promise<ReturnType<T>>\n```\n\n----------------------------------------\n\nTITLE: Referencing Child Process TypeScript Definitions\nDESCRIPTION: Reference to the TypeScript definition file that contains the complete list of implemented features for the child_process module in Caido.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/modules/child_process.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchild_process.d.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Ed25519 Private Key for Plugin Signing\nDESCRIPTION: Creates a private key file using OpenSSL for signing Caido plugin packages using Ed25519 algorithm.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm ed25519 -out private.pem\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Raw Request Handling\nDESCRIPTION: Imports necessary modules for creating and handling raw HTTP requests with invalid UTF-8 characters.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestSpecRaw } from \"caido:utils\";\nimport { SDK, DefineAPI } from \"caido:plugin\";\n```\n\n----------------------------------------\n\nTITLE: Raw Request Processing and Sending\nDESCRIPTION: Sets up raw request data with invalid UTF-8 characters and sends it using the SDK.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  const rawRequest = \"GET /admin\\x85 HTTP/1.1\\r\\nHost: localhost:5555\\r\\n\\r\\n\";\n  req.setRaw(stringToUint8Array(rawRequest));\n\n  const res = await sdk.requests.send(req);\n  console.log(res?.response.getRaw().toText());\n```\n\n----------------------------------------\n\nTITLE: Testing Unix Socket Connection with nc Command\nDESCRIPTION: A bash command showing how to connect to a Unix domain socket server using the nc (netcat) utility with the -U flag.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nnc -U /tmp/echo.sock\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with EventEmitter in Node.js\nDESCRIPTION: Demonstrates how to use EventEmitter to register and handle multiple event listeners with different parameter handling approaches. Shows three different listener implementations and their output when an event is emitted.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Pushing Documentation Changes to Remote Repository in Bash\nDESCRIPTION: Command to push the committed changes to your forked repository on GitHub.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Interface in TypeScript\nDESCRIPTION: Defines an empty interface for Workflow, likely to be extended or implemented elsewhere.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Workflow {}\n```\n\n----------------------------------------\n\nTITLE: Cloning Fork Repository for Documentation Contribution in Bash\nDESCRIPTION: Command to clone a forked version of the documentation repository. Replace [USERNAME] with your GitHub username.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/[USERNAME]/doc-developer\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Listener Removal Example\nDESCRIPTION: Example demonstrating how removeListener() removes the most recently added instance when multiple identical listeners exist.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\n----------------------------------------\n\nTITLE: Project Change Event Output Example\nDESCRIPTION: Shows the console output format when a project change event occurs, displaying the transition from one project name to another.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/backend_events.md#2025-04-20_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nProject changed from \"Caido\" to \"Example\".\n```\n\n----------------------------------------\n\nTITLE: Defining Default Value for allowHalfOpen in TypeScript\nDESCRIPTION: Sets the default value for the allowHalfOpen property in ServerOpts interface to false using TypeScript.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documentation Directory in Bash\nDESCRIPTION: Command to change directory to the cloned documentation repository.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd doc-developer\n```\n\n----------------------------------------\n\nTITLE: Constructing File Class in TypeScript\nDESCRIPTION: Creates a new File object extending Blob functionality with additional file-specific properties like name and last modified date.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/caido/http.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew File(data: (string | ArrayBuffer | Blob)[], fileName: string, opts?: FileOpts): File\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Documentation Changes in Bash\nDESCRIPTION: Command to create and switch to a new branch for working on documentation changes. Replace [BRANCH NAME] with a descriptive branch name.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/contributions/documentation.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -b [BRANCH NAME]\n```\n\n----------------------------------------\n\nTITLE: SQLite Default Page Size Configuration\nDESCRIPTION: Shows the default configuration value for SQLite page size option\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/sqlite.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n4096\n```\n\n----------------------------------------\n\nTITLE: Using EventEmitter Emit Method in JavaScript\nDESCRIPTION: Example demonstrating how to use the emit method of an EventEmitter to trigger events with multiple listeners. Shows how listener functions are called in the order they were registered, with parameters passed to each listener.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionResponseStatusCode Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceSectionResponseStatusCode with kind and operation properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionResponseStatusCode {\n  kind: \"SectionResponseStatusCode\";\n  operation: MatchReplaceOperationStatusCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationQuery Type in TypeScript\nDESCRIPTION: Defines a union type for MatchReplaceOperationQuery with various query-related operation types.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceOperationQuery = MatchReplaceOperationQueryRaw | MatchReplaceOperationQueryAdd | MatchReplaceOperationQueryRemove | MatchReplaceOperationQueryUpdate\n```\n\n----------------------------------------\n\nTITLE: Building Caido Plugin Package\nDESCRIPTION: Command to build the plugin package into a distributable zip file located in dist/plugin_package.zip\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Private Key Format Example\nDESCRIPTION: Shows the expected format of the generated private key file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/distribution/repository.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\n<SOME BASE64 DATA ON ONE LINE>\n-----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners with Order Preservation Example\nDESCRIPTION: Demonstrates how removeListener() maintains execution order for already emitted events, even when a listener removes another listener during execution.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationHeaderRaw Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationHeaderRaw with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationHeaderRaw {\n  kind: \"OperationHeaderRaw\";\n  matcher: MatchReplaceMatcherRaw;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Listener Behavior in EventEmitter\nDESCRIPTION: This example demonstrates how the removeListener() method behaves in an EventEmitter implementation, showing that removeListener() calls after emission but before listener completion won't affect the current emit cycle.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationFirstLine Type in TypeScript\nDESCRIPTION: Defines a type alias for MatchReplaceOperationFirstLine using KeepOperation and MatchReplaceOperationFirstLineRaw.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MatchReplaceOperationFirstLine = KeepOperation<MatchReplaceOperationFirstLineRaw>\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionResponseFirstLine Interface in TypeScript\nDESCRIPTION: This code snippet defines the MatchReplaceSectionResponseFirstLine interface, which represents a section for the response first line in the Match and Replace functionality. It specifies the kind of section and the operation to be performed on the first line.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionResponseFirstLine {\n  kind: \"SectionResponseFirstLine\";\n  operation: MatchReplaceOperationFirstLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceSectionRequestFirstLine Interface in TypeScript\nDESCRIPTION: This code snippet defines the MatchReplaceSectionRequestFirstLine interface, which represents a section for the request first line in the Match and Replace functionality. It specifies the kind of section and the operation to be performed on the first line.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceSectionRequestFirstLine {\n  kind: \"SectionRequestFirstLine\";\n  operation: MatchReplaceOperationFirstLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating removeListener Behavior in EventEmitter\nDESCRIPTION: Shows how removeListener() behaves when removing event listeners during emission, illustrating that listeners present during emit() will still execute even if removed during the event cycle.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\nmyEmitter.emit('event');\nmyEmitter.emit('event');\n```\n\n----------------------------------------\n\nTITLE: Defining MatchReplaceOperationQueryAdd Interface in TypeScript\nDESCRIPTION: Defines an interface for MatchReplaceOperationQueryAdd with kind, matcher, and replacer properties.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MatchReplaceOperationQueryAdd {\n  kind: \"OperationQueryAdd\";\n  matcher: MatchReplaceMatcherName;\n  replacer: MatchReplaceReplacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Emission with Multiple Listeners in JavaScript\nDESCRIPTION: Demonstrates how emit() calls multiple listeners in order with different parameter handling approaches. Shows listeners receiving and processing variable numbers of arguments.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/globals/namespaces/QuickJS.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Event Names from EventEmitter\nDESCRIPTION: Example showing how to retrieve all event names that have registered listeners on an EventEmitter instance, including both string and Symbol events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter } from 'events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Listener for Errors - JavaScript\nDESCRIPTION: This snippet shows how to register an event listener for 'error' events using the `on` method of an EventEmitter. The listener takes an Error object as an argument.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/stream.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\non(`event`: \"error\", `listener`: (`err`: `Error`) => `void`): `this`\n```\n\n----------------------------------------\n\nTITLE: Destroying a Socket Stream\nDESCRIPTION: Destroys the current stream, releasing any internal resources. Optionally, an error can be emitted, and subsequent calls to push will be ignored after destruction.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndestroy(error?: Error): this\n```\n\n----------------------------------------\n\nTITLE: Initializing Server Listen Method with Port and Backlog\nDESCRIPTION: Method signature for starting a server with optional port, backlog and listener callback. Uses default hostname.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/net.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(port?: number, backlog?: number, listeningListener?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Complete Backend Implementation\nDESCRIPTION: Full backend implementation including imports, request handling, and plugin initialization.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestSpec } from \"caido:utils\";\nimport { SDK, DefineAPI } from \"caido:plugin\";\n\nasync function sendRequest(sdk: SDK): Promise<void> {\n  const spec = new RequestSpec(\"https://example.com/\");\n  spec.setMethod(\"GET\");\n  spec.setHost(\"example.com\");\n  spec.setPort(443);\n  spec.setPath(\"/\");\n  spec.setQuery(\"?query=test\")\n  spec.setTls(true);\n\n  let sentRequest = await sdk.requests.send(spec);\n\n  if (sentRequest.response) {\n    let domain = spec.getHost();\n    let port = spec.getPort();\n    let path = spec.getPath();\n    let query = spec.getQuery();\n    let id = sentRequest.response.getId();\n    let code = sentRequest.response.getCode();\n    sdk.console.log(`REQ ${id}: ${domain}:${port}${path}${query} received a status code of ${code}`);\n  }\n}\n\nexport type API = DefineAPI<{\n  sendRequest: typeof sendRequest;\n}>;\n\nexport function init(sdk: SDK<API>) {\n  sdk.api.register(\"sendRequest\", sendRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring File Access Mode Constants in TypeScript\nDESCRIPTION: Defines the four standard file access mode constants used to check different types of file permissions in file system operations. These constants are used with fs.access() to verify if a process has specific permissions on a file.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/namespaces/constants.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst F_OK: number\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst R_OK: number\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst W_OK: number\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst X_OK: number\n```\n\n----------------------------------------\n\nTITLE: Testing File Access Permissions with accessSync in JavaScript\nDESCRIPTION: Demonstrates how to synchronously check if a file can be read from or written to using the accessSync method. The example tries to access '/etc/passwd' with read and write permissions, logging the result or catching an error if access is denied.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/fs/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { accessSync, constants } from 'fs';\n\ntry {\n  accessSync('etc/passwd', constants.R_OK | constants.W_OK);\n  console.log('can read/write');\n} catch (err) {\n  console.error('no access!');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Filter - Type Declaration\nDESCRIPTION: Defines a function type `update` for updating a filter. It accepts the `id` of the filter to update and an `options` object (containing `alias`, `name`, and `query`) as input. It returns a Promise that resolves to a `Filter` object representing the updated filter.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **update**: (`id`: [`ID`](index.md#id-3), `options`: `object`) => `Promise`\\<[`Filter`](index.md#filter)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Type\nDESCRIPTION: Exports the API type definition for the sendRequest function.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type API = DefineAPI<{\n  sendRequest: typeof sendRequest;\n}>;\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Chaining with on() Method in Node.js\nDESCRIPTION: This snippet shows how to use the on() method to register an event listener for a connection event. It demonstrates that the method returns a reference to the EventEmitter for method chaining.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Required Caido Dependencies\nDESCRIPTION: Imports necessary types and utilities from Caido for handling HTTP requests.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/request.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestSpec, Response } from \"caido:utils\";\nimport { SDK, DefineAPI } from \"caido:plugin\";\n```\n\n----------------------------------------\n\nTITLE: Clear Interval Function Definition\nDESCRIPTION: Function to cancel a Timeout object created by setInterval.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/extra/timers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclearInterval(interval: Timeout): void\n```\n\n----------------------------------------\n\nTITLE: Handling Process Exit\nDESCRIPTION: Demonstrates how to wait for a child process to exit and handle its exit code using a Promise-based approach.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/spawning_process.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst exitCode = await new Promise((resolve, reject) => {\n  child.on(\"close\", resolve);\n});\n\nif (exitCode) {\n  throw new Error(`subprocess error exit ${exitCode}, ${error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Request/Response Interception Output Example\nDESCRIPTION: Demonstrates the console output format for intercepted requests and responses, showing the logged information for both events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/backend_events.md#2025-04-20_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nIntercepted GET request to https://example.com/path\nIntercepted response from https://example.com/path with status 304\n```\n\n----------------------------------------\n\nTITLE: Defining BufferEncoding Type in TypeScript\nDESCRIPTION: Type definition for supported buffer encoding formats including hex, base64, various UTF formats, and ASCII variants.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype BufferEncoding = \"hex\" | \"base64\" | \"utf-8\" | \"utf8\" | \"unicode-1-1-utf8\" | \"utf-16le\" | \"utf16le\" | \"utf-16\" | \"utf16\" | \"utf-16be\" | \"utf16be\" | \"windows-1252\" | \"ansi_x3.4-1968\" | \"ascii\" | \"cp1252\" | \"cp819\" | \"csisolatin1\" | \"ibm819\" | \"iso-8859-1\" | \"iso-ir-100\" | \"iso8859-1\" | \"iso88591\" | \"iso_8859-1\" | \"iso_8859-1:1987\" | \"l1\" | \"latin1\" | \"us-ascii\" | \"x-cp1252\"\n```\n\n----------------------------------------\n\nTITLE: Defining WithImplicitCoercion Generic Type in TypeScript\nDESCRIPTION: Generic type definition that allows either type T or an object with valueOf method returning type T.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/buffer.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype WithImplicitCoercion<T> = T | { valueOf: T }\n```\n\n----------------------------------------\n\nTITLE: Defining EventListener Interface in TypeScript\nDESCRIPTION: TypeScript interface for event listener callback functions that handle events.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/dom-events.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventListener {\n  (evt: Event): void\n}\n```\n\n----------------------------------------\n\nTITLE: String to Uint8Array Conversion Utility\nDESCRIPTION: Implements a utility function to convert strings to byte arrays for raw request manipulation.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/guides/components/utf.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stringToUint8Array(str: string): Uint8Array {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Byte Array with Custom Raw Byte\nDESCRIPTION: Creates a new array combining existing path bytes with an additional raw byte (0x85)\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/concepts/backend/binary.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet path = [...spec.getPath({raw: true}), 0x85]\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceReplacer Type - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceReplacer` type, a replacer in Match and Replace. It can be either a term replacer or a workflow replacer.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceReplacer**: [`MatchReplaceReplacerTerm`](index.md#matchreplacereplacerterm) \\| [`MatchReplaceReplacerWorkflow`](index.md#matchreplacereplacerworkflow)\"\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceReplacerTerm Object - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceReplacerTerm` object, a replacer that replaces with a term. If the matcher is a regex, groups will be interpolated. It has a `kind` property set to `\"ReplacerTerm\"` and a `term` property.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceReplacerTerm**: `object`\"\n```\n\n----------------------------------------\n\nTITLE: MatchReplaceOperationBody Type - Type Declaration\nDESCRIPTION: Describes the `MatchReplaceOperationBody` type, an operation for the body section. It uses `KeepOperation` with `MatchReplaceOperationBodyRaw`.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/sdks/frontend/index.md#2025-04-20_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n\"> **MatchReplaceOperationBody**: [`KeepOperation`](index.md#keepoperationt)\\<[`MatchReplaceOperationBodyRaw`](index.md#matchreplaceoperationbodyraw)\\>\"\n```\n\n----------------------------------------\n\nTITLE: Child Process Shell Execution and Kill Limitations in Node.js\nDESCRIPTION: This example shows a limitation of the kill() method when dealing with nested processes. When a process is spawned within a shell, killing the parent process may not terminate child processes on Linux systems.\nSOURCE: https://github.com/caido/doc-developer/blob/main/src/reference/modules/llrt/child_process.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst { spawn } = require('child_process');\n\nconst subprocess = spawn(\n  'sh',\n  [\n    '-c',\n    `node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit']\n  }\n);\n\nsetTimeout(() => {\n  subprocess.kill(); // Does not terminate the Node.js process in the shell.\n}, 2000);\n```"
  }
]