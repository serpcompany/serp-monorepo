[
  {
    "owner": "the-lazy-me",
    "repo": "langbot-wiki",
    "content": "TITLE: Configuring OpenAI API Key in provider.json\nDESCRIPTION: JSON configuration for setting up the OpenAI API key in the provider.json file. It shows how to add the API key to the 'keys' section under 'openai'.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n    \"keys\": {\n        \"openai\": [\n            \"sk-AAAAAAAAAAAABBBBBBBBBBBBCCCCCCCCCCCCCDDDDDDDDD\"\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LLM Models Configuration in JSON for LangBot\nDESCRIPTION: This JSON structure defines the list of supported language models, including their names, requesters, token managers, and supported features. It includes a default model and examples of specific models with different capabilities.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/metadata/llm-models.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"list\": [\n        {\n            \"name\": \"default\",\n            \"requester\": \"openai-chat-completions\",\n            \"token_mgr\": \"openai\",\n            \"tool_call_supported\": false,\n            \"vision_supported\": false\n        },\n        {\n            \"name\": \"gpt-3.5-turbo\",\n            \"tool_call_supported\": true\n        },\n        {\n            \"name\": \"gpt-4o\",\n            \"tool_call_supported\": true,\n            \"vision_supported\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Model Metadata in LangBot (JSON)\nDESCRIPTION: This snippet demonstrates how to add metadata for a custom model in the LangBot configuration. It includes settings for the model name, requester type, token manager, and support for tool calls and vision capabilities.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/one-api.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"qwen\",\n    \"requester\": \"openai-chat-completions\",\n    \"token_mgr\": \"openai\",\n    \"tool_call_supported\": false,\n    \"vision_supported\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform Adapters in platform.json\nDESCRIPTION: Example configuration for various message platform adapters including nakuru, aiocqhttp, qq-botpy, qqofficial, and wecom. Each adapter has specific parameters for connection and authentication.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"platform-adapters\": [\n    {\n        \"adapter\": \"nakuru\",\n        \"enable\": false,\n        \"host\": \"127.0.0.1\",\n        \"ws_port\": 8080,\n        \"http_port\": 5700,\n        \"token\": \"\"\n    },\n    {\n        \"adapter\": \"aiocqhttp\",\n        \"enable\": false,\n        \"host\": \"0.0.0.0\",\n        \"port\": 2280,\n        \"access-token\": \"\",\n    },\n    {\n        \"adapter\": \"qq-botpy\",\n        \"enable\": false,\n        \"appid\": \"\",\n        \"secret\": \"\",\n        \"intents\": [\n            \"public_guild_messages\",\n            \"direct_message\"\n        ]\n    },\n    {\n        \"adapter\": \"qqofficial\",\n        \"enable\": false,\n        \"appid\": \"\",\n        \"secret\": \"\",\n        \"port\": 2284,\n        \"token\": \"\"\n    },\n    {\n        \"adapter\": \"wecom\",\n        \"enable\": false,\n        \"host\": \"0.0.0.0\",\n        \"port\": 2290,\n        \"corpid\": \"\",\n        \"secret\": \"\",\n        \"token\": \"\",\n        \"EncodingAESKey\": \"\",\n        \"contacts_secret\": \"\"\n    },\n],\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI Model in provider.json\nDESCRIPTION: JSON configuration for setting the desired OpenAI model in the provider.json file. It shows how to set the 'model' field.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n    \"model\": \"gpt-4o\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Privileges in LangBot\nDESCRIPTION: Sets permission levels for different commands in LangBot. Regular users have level 1 access while administrators have level 2. This example shows how to set the main 'plugin' command to be accessible by all users (level 1) while restricting the 'plugin.on' subcommand to administrators only (level 2).\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/command.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugin\": 1, \n    \"plugin.on\": 2 \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session-specific Rate Limits in pipeline.json\nDESCRIPTION: Example of setting different rate limits for specific groups and users using the fixed window algorithm.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"fixwin\": {\n    \"default\": {\n        \"window-size\": 60,\n        \"limit\": 60\n    },\n    \"group_12345678\": {\n        \"window-size\": 30,\n        \"limit\": 60\n    },\n    \"person_12341234\": {\n        \"window-size\": 60,\n        \"limit\": 60\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Sessions in system.json\nDESCRIPTION: Defines admin sessions that have privileged access to the bot. Format is {type}_{id} where type is either \"group\" or \"person\".\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"admin-sessions\": [],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"admin-sessions\": [\"group_123456789\", \"person_123456789\"],\n```\n\n----------------------------------------\n\nTITLE: 实现LangBot内容函数 - Python\nDESCRIPTION: 这段代码展示了如何在LangBot插件中实现一个内容函数。该函数允许访问网页并返回网页内容的摘要,可以被大语言模型调用来获取在线信息。\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/dev/tutor.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# 要添加的函数\n@llm_func(name=\"access_the_web\")  # 设置函数名称\nasync def access_web(self, query, url: str):\n    \"\"\"Call this function to search about the question before you answer any questions.\n    - Do not search through baidu.com at any time.\n    - If you need to search somthing, visit https://www.google.com/search?q=xxx.\n    - If user ask you to open a url (start with http:// or https://), visit it directly.\n    - Summary the plain content result by yourself, DO NOT directly output anything in the result you got.\n\n    Args:\n        url(str): url to visit\n\n    Returns:\n        str: plain text content of the web page\n    \"\"\"\n    import requests\n    from bs4 import BeautifulSoup\n    # 你需要先使用\n    # pip install beautifulsoup4\n    # 安装依赖\n\n    r = requests.get(\n        url,\n        timeout=10,\n        headers={\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.183\"\n        }\n    )\n    soup = BeautifulSoup(r.text, 'html.parser')\n\n    s = soup.get_text()\n\n    # 删除多余的空行或仅有\\t和空格的行\n    s = re.sub(r'\\n\\s*\\n', '\\n', s)\n\n    if len(s) >= 512:  # 截取获取到的网页纯文本内容的前512个字\n        return s[:512]\n\n    return s\n```\n\n----------------------------------------\n\nTITLE: 初始化LangBot插件 - Python\nDESCRIPTION: 这段代码展示了一个基本的LangBot插件结构,包括插件注册、事件处理和内容函数。插件实现了对'hello'消息的响应和网页访问功能。\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/dev/tutor.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pkg.plugin.context import register, handler, llm_func, BasePlugin, APIHost, EventContext\nfrom pkg.plugin.events import *  # 导入事件类\n\n\"\"\"\n在收到私聊或群聊消息\"hello\"时，回复\"hello, <发送者id>!\"或\"hello, everyone!\"\n\"\"\"\n\n\n# 注册插件\n@register(name=\"Hello\", description=\"hello world\", version=\"0.1\", author=\"RockChinQ\")\nclass HelloPlugin(BasePlugin):\n\n    # 插件加载时触发\n    def __init__(self, host: APIHost):\n        pass\n\n    # 异步初始化\n    async def initialize(self):\n        pass\n\n    # 当收到个人消息时触发\n    @handler(PersonNormalMessageReceived)\n    async def person_normal_message_received(self, ctx: EventContext):\n        msg = ctx.event.text_message  # 这里的 event 即为 PersonNormalMessageReceived 的对象\n        if msg == \"hello\":  # 如果消息为hello\n\n            # 输出调试信息\n            self.ap.logger.debug(\"hello, {}\".format(ctx.event.sender_id))\n\n            # 回复消息 \"hello, <发送者id>!\"\n            ctx.add_return(\"reply\", [\"hello, {}!\".format(ctx.event.sender_id)])\n\n            # 阻止该事件默认行为（向接口获取回复）\n            ctx.prevent_default()\n\n    # 当收到群消息时触发\n    @handler(GroupNormalMessageReceived)\n    async def group_normal_message_received(self, ctx: EventContext):\n        msg = ctx.event.text_message  # 这里的 event 即为 GroupNormalMessageReceived 的对象\n        if msg == \"hello\":  # 如果消息为hello\n\n            # 输出调试信息\n            self.ap.logger.debug(\"hello, {}\".format(ctx.event.sender_id))\n\n            # 回复消息 \"hello, everyone!\"\n            ctx.add_return(\"reply\", [\"hello, everyone!\"])\n\n            # 阻止该事件默认行为（向接口获取回复）\n            ctx.prevent_default()\n\n    # 插件卸载时触发\n    def __del__(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Base URL in provider.json\nDESCRIPTION: JSON configuration for setting up the base URL for OpenAI API or compatible services in the provider.json file. It shows how to set the 'base-url' in the 'openai-chat-completions' section.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n        \"openai-chat-completions\": {\n            \"base-url\": \"https://api.example.com/v1\",\n            \"args\": {},\n            \"timeout\": 120\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Sessions in system.json\nDESCRIPTION: JSON configuration for setting up admin sessions in the system.json file. It shows how to add a user's QQ number to the 'admin-sessions' array to grant admin privileges.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n    \"admin-sessions\": [\n        \"person_1010553892\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control in pipeline.json\nDESCRIPTION: Controls which sessions' messages are processed using blacklist or whitelist mode. Messages are filtered based on session type and ID.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"access-control\":{\n    \"mode\": \"blacklist\",\n    \"blacklist\": [],\n    \"whitelist\": []\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Ignore Rules in pipeline.json\nDESCRIPTION: Defines patterns for ignoring specific incoming messages, with prefix matching and regular expression options.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"ignore-rules\": {\n    \"prefix\": [\"/\"],\n    \"regexp\": []\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limiting Rules in pipeline.json\nDESCRIPTION: Configures request rate limiting to prevent abuse, with options for handling strategy, algorithm, and specific limits per session.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"rate-limit\": {\n    \"strategy\": \"drop\",\n    \"algo\": \"fixwin\",\n    \"fixwin\": {\n        \"default\": {\n            \"window-size\": 60,\n            \"limit\": 60\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Concurrency in system.json\nDESCRIPTION: Controls how many concurrent message processing tasks are allowed per session, with a default fallback for unspecified sessions.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"session-concurrency\": {\n    \"default\": 1\n},\n```\n\n----------------------------------------\n\nTITLE: Plugin Management Commands Reference\nDESCRIPTION: Lists all available commands for managing plugins in LangBot, including installation, updates, enabling/disabling, and listing functions.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/plugin-intro.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n!plugin                    列出所有已安装的插件\n!plugin get <储存库地址>    从GitHub储存库地址安装插件(需要管理员权限)\n!plugin update all         更新所有插件(需要管理员权限，仅支持从储存库安装的插件)\n!plugin update <插件名>    更新指定插件\n!plugin del <插件名>       删除插件(需要管理员权限)\n!plugin on <插件名>        启用插件(需要管理员权限)\n!plugin off <插件名>       禁用插件(需要管理员权限)\n\n!func                      列出所有内容函数\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the Discord adapter. It includes settings for client ID and token.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"discord\",\n    \"enable\": false,\n    \"client_id\": \"1234567890\",\n    \"token\": \"XXXXXXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Concurrency in system.json\nDESCRIPTION: Sets the maximum concurrent pipeline message processing tasks for the entire program using FCFS scheduling algorithm.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"pipeline-concurrency\": 20,\n```\n\n----------------------------------------\n\nTITLE: Configuring QQOfficial Adapter in LangBot\nDESCRIPTION: This JSON snippet shows the configuration structure for the QQOfficial adapter in LangBot. It includes fields for the adapter type, enable flag, AppID, secret, port, and token.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/qq/official_webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"qqofficial\",\n    \"enable\": true,\n    \"appid\": \"\",\n    \"secret\": \"\",\n    \"port\": 2284,\n    \"token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group-specific Response Rules in pipeline.json\nDESCRIPTION: Shows how to create different response rules for specific group chats by their ID, overriding the default rules.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"respond-rules\": {\n    \"default\": {\n        \"at\": true,\n        \"prefix\": [\n            \"/ai\", \"!ai\", \"！ai\", \"ai\"\n        ],\n        \"regexp\": [],\n        \"random\": 0.0\n    },\n    \"123456\":{\n        \"at\": true,\n        \"prefix\": [\n            \"/ai\", \"!ai\", \"！ai\", \"ai\"\n        ],\n        \"regexp\": [],\n        \"random\": 0.0\n    },\n    \"789012\":{\n        \"at\": true,\n        \"prefix\": [\n            \"/ai\", \"!ai\", \"！ai\", \"ai\"\n        ],\n        \"regexp\": [],\n        \"random\": 0.0\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring WeChat Work Customer Service Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the WeChat Work Customer Service (企业微信客服号) adapter. It includes settings for port, corp ID, secret, token, and encoding AES key.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"adapter\": \"wecomcs\",\n        \"enable\": false,\n        \"port\": 2289,\n        \"corpid\": \"\",\n        \"secret\": \"\",\n        \"token\": \"\",\n        \"EncodingAESKey\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring qq-botpy Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the qq-botpy adapter to connect with QQ official bot API using websocket. It includes settings for app ID, secret, and intents for different message types.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"qq-botpy\",\n    \"enable\": false,\n    \"appid\": \"\",\n    \"secret\": \"\",\n    \"intents\": [\n        \"public_guild_messages\",\n        \"direct_message\",\n        \"public_messages\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the Slack adapter. It includes settings for bot token, signing secret, and port.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\":\"slack\",\n    \"enable\":false,\n    \"bot_token\":\"\",\n    \"signing_secret\":\"\",\n    \"port\":2288\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WeChat Official Account Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the WeChat Official Account adapter. It includes settings for token, encoding key, app secret, app ID, mode, loading message, host, and port.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\":\"officialaccount\",\n    \"enable\": true,\n    \"token\": \"\",\n    \"EncodingAESKey\":\"\",\n    \"AppSecret\":\"\",\n    \"AppID\":\"\",\n    \"Mode\":\"drop\",\n    \"LoadingMessage\":\"AI正在思考中，请发送任意内容获取回复。\",\n    \"host\": \"0.0.0.0\",\n    \"port\": 2287\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via Repository Cloning Command\nDESCRIPTION: Demonstrates the command syntax for installing a plugin by cloning its GitHub repository, which is the recommended installation method for LangBot plugins.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/plugin-intro.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n!plugin get https://github.com/langbot-app/HelloPlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence in system.json\nDESCRIPTION: Defines database settings for data persistence. Currently only supports SQLite with a configurable database file path.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"persistence\": {\n    \"sqlite\": {\n        \"path\": \"data/persistence.db\"\n    },\n    \"use\": \"sqlite\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Message Response Rules in pipeline.json\nDESCRIPTION: Defines the rules for when the bot should respond to messages in group chats. Rules can include responding to mentions, message prefixes, regexp patterns, or random probability.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"respond-rules\": {\n    \"default\": {\n        \"at\": true,\n        \"prefix\": [\n            \"/ai\", \"!ai\", \"！ai\", \"ai\"\n        ],\n        \"regexp\": [],\n        \"random\": 0.0\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Baidu Cloud Content Moderation in pipeline.json\nDESCRIPTION: Settings for integrating with Baidu Cloud's content moderation service, including API credentials.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"baidu-cloud-examine\": {\n    \"enable\": false,\n    \"api-key\": \"\",\n    \"api-secret\": \"\"\n},\n```\n\n----------------------------------------\n\nTITLE: Enabling Sensitive Word Checking in pipeline.json\nDESCRIPTION: Controls whether to check messages against a sensitive word list defined in sensitive-words.json.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"check-sensitive-words\": true,\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Configuration in plugins.json\nDESCRIPTION: Shows the structure of the plugins.json configuration file which is automatically generated and used by LangBot to manage plugin settings, including priority and enabled status.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/plugin-intro.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": [\n    {\n        \"name\": \"Nahida\",\n        \"description\": \"Hello Nahida\",\n        \"version\": \"0.1\",\n        \"author\": \"RockChinQ\",\n        \"source\": \"\",   \n        \"main_file\": \"plugins/Nahida/main.py\",\n        \"pkg_path\": \"plugins/Nahida/\",\n        \"priority\": 0,  \n        \"enabled\": true   \n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring qqofficial Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the qqofficial adapter to connect with QQ official bot using webhook. It includes settings for app ID, secret, token, and port.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"qqofficial\",\n    \"enable\": false,\n    \"appid\": \"\",\n    \"secret\": \"\",\n    \"port\": 2284,\n    \"token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP API in system.json\nDESCRIPTION: Controls the HTTP service settings required for WebUI access, including host, port and JWT token expiration.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"http-api\": {\n    \"enable\": true,\n    \"host\": \"0.0.0.0\",\n    \"port\": 5300,\n    \"jwt-expire\": 604800\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Nakuru Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the Nakuru adapter to connect with go-cqhttp. It includes settings for host, WebSocket port, HTTP port, and token.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"nakuru\",\n    \"enable\": false,\n    \"host\": \"127.0.0.1\",\n    \"ws_port\": 8080,\n    \"http_port\": 5700,\n    \"token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WeChat Work Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the WeChat Work (企业微信) adapter. It includes settings for host, port, and various authentication keys required for WeChat Work integration.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"wecom\",\n    \"enable\": false,\n    \"host\": \"0.0.0.0\",\n    \"port\": 2290,\n    \"corpid\": \"\",\n    \"secret\": \"\",\n    \"token\": \"\",\n    \"EncodingAESKey\": \"\",\n    \"contacts_secret\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DingTalk Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the DingTalk (钉钉) adapter. It includes settings for client ID, client secret, robot code, robot name, and markdown card option.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\":\"dingtalk\",\n    \"enable\": false,\n    \"client_id\":\"\",\n    \"client_secret\":\"\",\n    \"robot_code\":\"\",\n    \"robot_name\":\"\",\n    \"markdown_card\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Command Prefixes in LangBot\nDESCRIPTION: Defines the command prefixes that LangBot will recognize. Messages starting with any of these prefixes will be treated as commands (subject to group response rules). This example configures three different command prefixes including both Latin and full-width punctuation marks.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/command.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"command-prefix\": [\n    \"!\",\n    \"！\",\n    \"#\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Feishu Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the Feishu (飞书) adapter. It includes settings for app ID, app secret, bot name, webhook enablement, port, and encrypt key.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"lark\",\n    \"enable\": false,\n    \"app_id\": \"cli_abcdefgh\",\n    \"app_secret\": \"XXXXXXXXXX\",\n    \"bot_name\": \"LangBot\",\n    \"enable-webhook\": false,\n    \"port\": 2285,\n    \"encrypt-key\": \"xxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal WeChat Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the personal WeChat adapter. It includes settings for the gewechat URL, port, callback URL, app ID, and token.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"gewechat\",\n    \"enable\": true,\n    \"gewechat_url\": \"http://gewe:2531\",\n    \"port\": 2286,\n    \"callback_url\": \"http://langbot:2286/gewechat/callback\",\n    \"app_id\": \"\",\n    \"token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring aiocqhttp Adapter in platform.json\nDESCRIPTION: JSON configuration for setting up the aiocqhttp adapter to connect with OneBot protocol compatible bots. It includes settings for enabling the adapter, specifying host, port, and access token.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/quick-config/config.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"adapter\": \"aiocqhttp\",\n    \"enable\": true,\n    \"host\": \"0.0.0.0\",\n    \"port\": 2280,\n    \"access-token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Prefix-based Message Response in pipeline.json\nDESCRIPTION: Demonstrates prefix pattern matching where messages starting with specified prefixes will be processed and the prefix removed before sending to the AI.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"prefix\": [\"/ai\", \"!ai\", \"！ai\", \"ai\"]\n\n此时，消息\"ai 你好\"就会被响应，发送给AI时会删除前缀\"ai\"，即\"你好\"\n```\n\n----------------------------------------\n\nTITLE: Example of GPT-Driven Function Call Dialogue\nDESCRIPTION: Shows example user queries that would trigger the GPT to request a function call to 'access_the_web', demonstrating how content functions are activated based on conversational context.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/plugin/plugin-intro.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nQ: 请搜索一下github上有那些QQ机器人项目？\nQ: 请为我搜索一些不错的云服务商网站？\nQ：阅读并总结这篇文章：https://zhuanlan.zhihu.com/p/607570830\nQ：搜一下清远今天天气如何\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Proxies in system.json\nDESCRIPTION: Sets up HTTP and HTTPS proxies for network connectivity. These settings override environment variables.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"network-proxies\": {\n    \"http\": null,\n    \"https\": null\n},\n```\n\nLANGUAGE: json\nCODE:\n```\n\"network-proxies\": {\n    \"http\": \"http://127.0.0.1:7890\",\n    \"https\": \"http://127.0.0.1:7890\"\n},\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Platform Adapters Example\nDESCRIPTION: Example showing how to configure multiple platform adapters simultaneously, with one disabled (aiocqhttp) and one enabled (nakuru) with different ports and settings.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"platform-adapters\": [\n    {\n        \"adapter\": \"aiocqhttp\",\n        \"enable\": false,\n        \"host\": \"0.0.0.0\",\n        \"port\": 2280,\n        \"access-token\": \"\",\n    },\n    {\n        \"adapter\": \"nakuru\",\n        \"enable\": true,\n        \"host\": \"127.0.0.1\",\n        \"ws_port\": 8081,\n        \"http_port\": 5701,\n        \"token\": \"token\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting at-sender Option\nDESCRIPTION: Option to configure whether to mention (@ tag) the original sender when replying in group chats. When set to true, replies will mention the user who sent the original message.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"at-sender\": false,\n```\n\n----------------------------------------\n\nTITLE: Setting track-function-calls Option\nDESCRIPTION: Configuration to track content function calls. When enabled, the system sends function call records to users during conversations. When disabled, only final results are sent.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"track-function-calls\": true,\n```\n\n----------------------------------------\n\nTITLE: Setting quote-origin Option\nDESCRIPTION: Option to configure whether to quote the original message when replying in group chats. When set to true, replies will include a reference to the original message.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"quote-origin\": false,\n```\n\n----------------------------------------\n\nTITLE: Setting hide-exception-info Option\nDESCRIPTION: Configuration to hide AI exception details from users. When enabled, users will see a generic error message while detailed error information is only logged to the console.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"hide-exception-info\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring long-text-process Strategy\nDESCRIPTION: Settings for handling long text messages. Includes threshold for when to apply strategy, the strategy type (forward or image), and font path for rendering text as images.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"long-text-process\": {\n    \"threshold\": 256,\n    \"strategy\": \"forward\",\n    \"font-path\": \"\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Reporting in system.json\nDESCRIPTION: Controls whether telemetry data is reported to developers for analysis. Does not include sensitive information.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"report-usage\": true,\n```\n\n----------------------------------------\n\nTITLE: Configuring Help Message in system.json\nDESCRIPTION: Sets the response text when users send the !help command, typically containing information about the bot and useful links.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"help-message\": \"LangBot - 😎高稳定性、🧩支持插件、🦄多模态的 ChatGPT QQ 机器人🤖\\n链接：https://langbot.app\"\n```\n\n----------------------------------------\n\nTITLE: Setting Conversation History Truncation in pipeline.json\nDESCRIPTION: Controls how conversation history is truncated before being sent to the model, limiting by number of dialogue rounds.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"msg-truncate\": {\n    \"method\": \"round\",\n    \"round\": {\n        \"max-round\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Level in system.json\nDESCRIPTION: Sets the logging verbosity level, although currently only controllable through DEBUG environment variable.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"logging-level\": \"info\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddyfile for Reverse Proxy\nDESCRIPTION: This snippet demonstrates how to configure the Caddyfile for reverse proxying HTTP requests to HTTPS. It shows the basic structure and an example with a specific domain.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/qq/official_webhook.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nyour_domain_name {\n        reverse_proxy 127.0.0.1:2284\n}\n```\n\nLANGUAGE: json\nCODE:\n```\ntestlb.com {\n        reverse_proxy 127.0.0.1:2284\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring force-delay Range\nDESCRIPTION: Sets a forced delay range in seconds before sending messages back to users. This helps prevent platform rate limiting. The array contains minimum and maximum delay values.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/platform.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"force-delay\": [0, 0],\n```\n\n----------------------------------------\n\nTITLE: 设置Caddy反向代理配置\nDESCRIPTION: 配置Caddy进行反向代理，将443端口的请求转发到LangBot的2287端口。这是为了适应微信公众号只支持80和443端口的限制。\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/wxoa.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreverse_proxy 127.0.0.1:2287\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection URL for NapCat in LangBot\nDESCRIPTION: The WebSocket URL configuration that needs to be entered in NapCat's WebUI to establish a connection with LangBot. It specifies the local address with port 2280 and the required '/ws' endpoint suffix.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/qq/aiocqhttp/napcat.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nws://127.0.0.1:2280/ws\n```\n\n----------------------------------------\n\nTITLE: Cloning from GitCode Mirror\nDESCRIPTION: Alternative commands for cloning LangBot from GitCode mirror for users in mainland China.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitcode.com/RockChinQ/LangBot\ncd LangBot\n```\n\n----------------------------------------\n\nTITLE: Cloning LangBot Repository\nDESCRIPTION: Commands for cloning the main LangBot repository from GitHub or GitCode mirror.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆主仓库\ngit clone https://github.com/RockChinQ/LangBot\ncd LangBot\n```\n\n----------------------------------------\n\nTITLE: Mapping QQ String IDs to Integer IDs in JSON format\nDESCRIPTION: The metadata file structure for mapping QQ string IDs to LangBot's internal integer IDs. It contains two main mapping objects: 'groups' for chat groups and 'members' for individual users. This mapping ensures consistent identification across bot restarts.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/metadata/adapter-qq-botpy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mapping\": {\n        \"groups\": {\n            \"15944D6D2B525C6E3536134D4669F067\": 443241151434655\n        },\n        \"members\": {\n            \"547A6244A731B4BEEBE5EE2AE4CD00A8\": 232437565267568\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Setup\nDESCRIPTION: Command to run the main program for the first time to generate configuration files.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands for installing required Python packages using pip, with alternative option for using Tsinghua mirror.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n----------------------------------------\n\nTITLE: Setting Message Content Check Flag in pipeline.json\nDESCRIPTION: Controls whether incoming messages should be checked against filtering rules.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/pipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"income-msg-check\": true,\n```\n\n----------------------------------------\n\nTITLE: Deploying NewAPI Middleware\nDESCRIPTION: Commands to set up the NewAPI middleware, which translates between Dify's API and OpenAI-compatible APIs.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/dify-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napt install -y wget\nmkdir ~/new-api\ncd new-api\n# For arm64:\nwget https://github.com/Calcium-Ion/new-api/releases/download/v0.2.9.7/one-api-arm64\n# For x86/64:\nwget https://github.com/Calcium-Ion/new-api/releases/download/v0.2.9.7/one-api\napt install -y screen\nchmod 775 new-api\n./new-api\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Debian/Ubuntu\nDESCRIPTION: Commands to install Docker and Docker Compose plugin on Debian or Ubuntu systems.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/dify-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Debian使用：\napt update\napt install -y docker docker-compose-plugin\n# ubuntu使用：\napt update\napt install -y docker docker-compose-v2\n```\n\n----------------------------------------\n\nTITLE: 设置微信公众号回调URL\nDESCRIPTION: 配置微信公众号的回调URL，用于接收和处理来自微信服务器的消息。URL中的域名需要替换为实际使用的域名。\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/wxoa.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://your_domain_name/callback/command\n```\n\n----------------------------------------\n\nTITLE: Starting and Checking Caddy Service\nDESCRIPTION: These bash commands are used to start the Caddy service and check its status after configuration.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/platforms/qq/official_webhook.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start caddy\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status caddy\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Output\nDESCRIPTION: Example output displayed when running the program for the first time, showing generated configuration files.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n _                   ___      _   \n| |   __ _ _ _  __ _| _ ) ___| |_ \n| |__/ _` | ' \\/ _` | _ \\/ _ \\  _|\n|____\\__,_|_||_\\__, |___/\\___/\\__|\n               |___/              \n\n⭐️开源地址: https://github.com/RockChinQ/LangBot\n📖文档地址: https://docs.langbot.app\n\n以下文件不存在，已自动生成，请按需修改配置文件后重启：\n- plugins/__init__.py\n- plugins/plugins.json\n- data/config/command.json\n- data/config/pipeline.json\n- data/config/platform.json\n- data/config/provider.json\n- data/config/system.json\n- data/config/sensitive-words.json\n- data/scenario/default.json\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Dify\nDESCRIPTION: Series of commands to install Git, clone the Dify repository, and set up the Dify environment using Docker Compose.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/dify-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt install -y git\ngit clone https://github.com/langgenius/dify.git\ncd dify/docker\ncp .env.example .env\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment to avoid dependency conflicts.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Building Frontend\nDESCRIPTION: Commands for building the frontend interface. Requires NodeJS version 22 or higher.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 构建前端，需要 NodeJS >= 22\ncd web\nnpm install && npm run build\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry Mirror\nDESCRIPTION: JSON configuration to set up a Docker registry mirror for faster image downloads in restricted network environments.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/dify-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry-mirrors\": [\"https://docker.1panel.live\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VitePress Dependencies for LangBot Documentation\nDESCRIPTION: Command to install necessary dependencies for the VitePress-based documentation system. This needs to be run in the repository root directory after cloning.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Service\nDESCRIPTION: Commands to reload the Docker daemon and restart the Docker service after configuration changes.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/workshop/dify-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Running Main Program\nDESCRIPTION: Command to run the main program after configuration is complete.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/deploy/langbot/manual.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Server URL in system.json\nDESCRIPTION: Defines the destination server for telemetry data. Can be changed to a custom qcg-center deployment.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/config/function/system.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"qcg-center-url\": \"https://api.qchatgpt.rockchin.top/api/v2\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Insight Guide URL using Vue.js\nDESCRIPTION: This script uses the Vue.js setup syntax to redirect the user to the '/insight/guide' URL. It modifies the window.location.href property to trigger the redirection when the component is mounted.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  window.location.href = '/insight/guide'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Image Reference Syntax for LangBot Documentation\nDESCRIPTION: Example of how to properly reference images in the documentation. Images should be placed in the docs/assets/image directory and referenced using absolute paths.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![image](/assets/image/xxx.png)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for LangBot Documentation\nDESCRIPTION: Command to launch a local development server to preview documentation changes. Run this after making modifications to view them before committing.\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Table of Contents in Markdown\nDESCRIPTION: 使用Markdown语法显示文档目录。这段代码使用了特定的语法来生成一个自动的目录结构。\nSOURCE: https://github.com/the-lazy-me/langbot-wiki/blob/main/docs/tob/platform.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::info 目录\n[[toc]]\n:::\n```"
  }
]