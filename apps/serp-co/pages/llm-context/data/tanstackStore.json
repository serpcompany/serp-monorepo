[
  {
    "owner": "tanstack",
    "repo": "store",
    "content": "TITLE: Creating and Updating a Basic Store in TypeScript\nDESCRIPTION: Creates a new Store instance with an initial value and demonstrates how to read and update the state using setState.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Store } from '@tanstack/store';\n\nconst countStore = new Store(0);\n\nconsole.log(countStore.state); // 0\ncountStore.setState(() => 1);\nconsole.log(countStore.state); // 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Store Instance with TypeScript\nDESCRIPTION: Constructor for creating a new Store instance with initial state and optional configuration. The Store class manages state with type safety for both the state and updater function.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Store<TState, TUpdater>(initialState, options?): Store<TState, TUpdater>\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Values in TypeScript\nDESCRIPTION: Demonstrates using the Derived class to create values that automatically update when their dependencies change, with explicit dependency tracking.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = new Store(0);\n\nconst double = new Derived({\n  fn: () => count.state * 2,\n  // Must explicitly list dependencies\n  deps: [count]\n});\n\n// Must mount the derived value to start listening for updates\nconst unmount = double.mount();\n\n// Later, to cleanup\nunmount();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a TanStack Store in React\nDESCRIPTION: This example demonstrates creating a TanStack store, connecting it to React components using the useStore hook, and updating state. It shows how to selectively render components when specific parts of the state change, and how to update the store from outside React components.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/react/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Store, useStore } from \"@tanstack/react-store\";\n\n// You can instantiate the store outside of React components too!\nexport const store = new Store({\n  dogs: 0,\n  cats: 0,\n});\n\n// This will only re-render when `state[animal]` changes. If an unrelated store property changes, it won't re-render\n\nconst Display = ({ animal }) => {\n  const count = useStore(store, (state) => state[animal]);\n  return <div>{`${animal}: ${count}`}</div>;\n};\n\nconst updateState = (animal) => {\n  store.setState((state) => {\n    return {\n      ...state,\n      [animal]: state[animal] + 1,\n    };\n  });\n};\nconst Increment = ({ animal }) => (\n  <button onClick={() => updateState(animal)}>My Friend Likes {animal}</button>\n);\n\nfunction App() {\n  return (\n    <div>\n      <h1>How many of your friends like cats or dogs?</h1>\n      <p>\n        Press one of the buttons to add a counter of how many of your friends\n        like cats or dogs\n      </p>\n      <Increment animal=\"dogs\" />\n      <Display animal=\"dogs\" />\n      <Increment animal=\"cats\" />\n      <Display animal=\"cats\" />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing State with TanStack Svelte Store\nDESCRIPTION: Defines a centralized store using TanStack svelte-store with initial state for counting cats and dogs. Includes a function to update the state by incrementing the counter for a specified animal.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Store } from '@tanstack/svelte-store';\n\n// You can instantiate the store outside of Svelte files too!\nexport const store = new Store({\n  dogs: 0,\n  cats: 0,\n});\n\nexport function updateState(animal: 'cats' | 'dogs') {\n  store.setState((state) => {\n    return {\n      ...state,\n      [animal]: state[animal] + 1,\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TanStack Store Configuration\nDESCRIPTION: Store configuration file that initializes the TanStack store with initial state and provides an update function for incrementing counters.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/vue/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Store } from '@tanstack/vue-store';\n\n// You can instantiate the store outside of Vue components too!\nexport const store = new Store({\n  dogs: 0,\n  cats: 0,\n});\n\nexport function updateState(animal) {\n  store.setState((state) => {\n    return {\n      ...state,\n      [animal]: state[animal] + 1,\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a TanStack Solid Store in a Basic App\nDESCRIPTION: This snippet demonstrates how to create a global store with TanStack Solid-store, access store data with useStore, and update the store with setState. It shows a complete app with Display and Button components that interact with a shared store to count cats and dogs.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/solid/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Store, useStore } from '@tanstack/solid-store';\n\n// You can instantiate the store outside of Solid components too!\nexport const store = new Store({\n  cats: 0,\n  dogs: 0\n})\n\nexport const Display = (props) => {\n  const count = useStore(store, (state) => state[props.animals]);\n  return (\n    <span>\n      {props.animals}: {count()}\n      </span>\n    );\n}\n\nexport const Button = (props) => {\n  return (\n    <button\n      onClick={() => {\n        store.setState((state) => {\n          return {\n            ...state,\n            [props.animals]: state[props.animals] + 1\n          }\n        })\n      }}\n    >\n      Increment\n    </button>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n    <h1>How many of your friends like cats or dogs?</h1>\n    <p>\n      Press one of the buttons to add a counter of how many of your friends\n      like cats or dogs\n      </p>\n      <Button animals=\"dogs\" />\n      <Display animals=\"dogs\" />\n      <Button animals=\"cats\" />\n      <Display animals=\"cats\" />\n  </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing TanStack Store and State Update Function\nDESCRIPTION: This snippet creates a TanStack Store instance with initial state for dogs and cats counters. It also defines an updateState function to increment the count for a specified animal.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Store } from '@tanstack/angular-store';\n\n// You can instantiate the store outside of Angular components too!\nexport const store = new Store({\n  dogs: 0,\n  cats: 0,\n});\n\nexport function updateState(animal: 'dogs' | 'cats') {\n  store.setState((state) => {\n    return {\n      ...state,\n      [animal]: state[animal] + 1,\n    };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Store Updates in TypeScript\nDESCRIPTION: Uses the batch function to group multiple state updates together, triggering subscribers only once with the final state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { batch } from '@tanstack/store';\n\n// countStore.subscribers will only trigger once at the end with the final state\nbatch(() => {\n  countStore.setState(() => 1);\n  countStore.setState(() => 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Derived Values in TypeScript\nDESCRIPTION: Shows how to access the previous value of a derived computation using the prevVal argument in the fn function.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = new Store(1);\n\nconst double = new Derived({\n  fn: ({ prevVal }) => {\n    return count.state + (prevVal ?? 0);\n  },\n  deps: [count]\n});\n\ndouble.mount();\ndouble.state; // 1\ncount.setState(() => 2);\ndouble.state; // 3\n```\n\n----------------------------------------\n\nTITLE: Implementing batch() Function in TypeScript\nDESCRIPTION: The batch() function in TanStack Store allows grouping multiple state changes into a single update cycle. It takes a function parameter that contains multiple store operations and executes them as a single batch to optimize performance.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/functions/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction batch(fn): void\n```\n\n----------------------------------------\n\nTITLE: Counter Display Component\nDESCRIPTION: Display component that uses the TanStack store to show the current count for a specific animal. It implements selective re-rendering based on state changes.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/vue/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { useStore } from '@tanstack/vue-store';\nimport { store } from './store';\n\nconst props = defineProps({ animal: String });\nconst count = useStore(store, (state) => state[props.animal]);\n</script>\n\n<!-- This will only re-render when `state[props.animal]` changes. If an unrelated store property changes, it won't re-render -->\n<template>\n  <div>{{ animal }}: {{ count }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Managing Side Effects with Effect Class in TypeScript\nDESCRIPTION: Shows how to use the Effect class to manage side effects that respond to changes in stores and derived values, with explicit dependency tracking.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst effect = new Effect({\n  fn: () => {\n    console.log('The count is now:', count.state);\n  },\n  // Array of `Store`s or `Derived`s\n  deps: [count],\n  // Should effect run immediately, default is false\n  eager: true\n})\n\n// Must mount the effect to start listening for updates\nconst unmount = effect.mount();\n\n// Later, to cleanup\nunmount();\n```\n\n----------------------------------------\n\nTITLE: Displaying Store Values with Selective Re-rendering\nDESCRIPTION: A Svelte component that selectively displays the count for either cats or dogs from the store. Uses useStore hook to subscribe to specific state changes, preventing unnecessary re-renders.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n    import { useStore } from '@tanstack/svelte-store';\n    import { store } from './store';\n    \n    const {animal}: { animal: 'cats' | 'dogs' } = $props()\n    const count = useStore(store, (state) => state[animal]);\n</script>\n    \n<!-- This will only re-render when `state[animal]` changes. If an unrelated store property changes, it won't re-render -->\n<div>{ animal }: { count.current }</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Store State\nDESCRIPTION: Method to update the store's state using an updater function. This triggers notifications to all subscribed listeners.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetState(updater): void\n```\n\n----------------------------------------\n\nTITLE: Incrementing Store Values with Button Component\nDESCRIPTION: A Svelte component that provides a button to increment the count for either cats or dogs. When clicked, it calls the updateState function from the store.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n    import { updateState } from './store';\n    \n    const { animal }: { animal: 'cats' | 'dogs' } = $props()\n</script>\n    \n<button onclick={() => updateState(animal)}>My Friend Likes { animal }</button>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Store Updates in TypeScript\nDESCRIPTION: Shows how to subscribe to changes in a Store instance and later unsubscribe to clean up resources.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst unsub = countStore.subscribe(() => {\n  console.log('The count is now:', countStore.state);\n});\n\n// Later, to cleanup\nunsub();\n```\n\n----------------------------------------\n\nTITLE: Optional onUpdate Callback for DerivedOptions in TanStack Store\nDESCRIPTION: Defines an optional callback that is triggered when the derived state updates. This can be used for side effects or logging when derived values change.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedoptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional onUpdate: () => void;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Store Changes\nDESCRIPTION: Method to subscribe to state changes in the store. Returns a function that can be called to unsubscribe the listener.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribe(listener): () => void\n```\n\n----------------------------------------\n\nTITLE: Getting Dependency Values from a Derived State in TypeScript\nDESCRIPTION: Retrieves current and previous dependency values from a Derived instance, along with the previous state value. This method is used internally to check if recalculation is needed.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetDepVals(): object\n```\n\n----------------------------------------\n\nTITLE: Defining DerivedOptions Interface in TypeScript for TanStack Store\nDESCRIPTION: Defines the DerivedOptions interface that configures how a derived state is calculated from its dependencies. It includes required deps array and computation function, along with optional handlers for subscriptions and updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeps: TArr;\n```\n\n----------------------------------------\n\nTITLE: Mounting a Derived State in TypeScript\nDESCRIPTION: Sets up the derived state and returns a cleanup function. This method is used to initialize the derived state and set up connections to its dependencies.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmount(): () => void\n```\n\n----------------------------------------\n\nTITLE: Creating an Effect Instance in TypeScript\nDESCRIPTION: Constructor for the Effect class that accepts EffectOptions and returns a new Effect instance.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/effect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Effect(opts): Effect\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Derived State in TypeScript\nDESCRIPTION: Adds a listener that will be called when the derived state changes and returns an unsubscribe function. This is the primary way to react to changes in derived state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribe(listener): () => void\n```\n\n----------------------------------------\n\nTITLE: Implementing the fn Method for DerivedOptions in TanStack Store\nDESCRIPTION: Defines the function responsible for computing the derived state value based on its dependencies. It receives props containing the values of dependencies before and after the current invocation.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedoptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfn: (props) => TState;\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies on Derived State Graph in TypeScript\nDESCRIPTION: Registers this derived state as a dependent on its dependencies. This creates connections in the dependency graph for proper state propagation and updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregisterOnGraph(deps): void\n```\n\n----------------------------------------\n\nTITLE: Constructor for Derived Class in TypeScript\nDESCRIPTION: Creates a new Derived instance with the provided options. The constructor initializes the derived state based on the DerivedOptions provided.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Derived<TState, TArr>(options): Derived<TState, TArr>\n```\n\n----------------------------------------\n\nTITLE: Mounting an Effect in TypeScript\nDESCRIPTION: The mount() method for the Effect class that returns a cleanup function to unmount the effect.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/effect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmount(): () => void\n```\n\n----------------------------------------\n\nTITLE: Transforming Data with Store's updateFn in TypeScript\nDESCRIPTION: Demonstrates using the updateFn option to transform data before it's updated in the store, enabling cumulative updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = new Store(12, {\n  updateFn: (prevValue) => updateValue => {\n    return updateValue + prevValue;\n  }\n});\n\ncount.setState(() => 12);\n// count.state === 24\n```\n\n----------------------------------------\n\nTITLE: Defining the currDepVals Property in DerivedFnProps Interface in TypeScript\nDESCRIPTION: Defines the currDepVals property which contains the current dependency values for a derived store. This property holds the unwrapped values from the dependent stores or derived instances.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedfnprops.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncurrDepVals: TUnwrappedArr;\n```\n\n----------------------------------------\n\nTITLE: Recomputing Derived State in TypeScript\nDESCRIPTION: Recalculates the derived state when dependencies change. This method is called internally when the store detects that the dependencies have changed.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrecompute(): void\n```\n\n----------------------------------------\n\nTITLE: Defining the prevDepVals Property in DerivedFnProps Interface in TypeScript\nDESCRIPTION: Defines the prevDepVals property which can contain the previous dependency values or be undefined. This is used for comparing changes between dependency updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedfnprops.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprevDepVals: undefined | TUnwrappedArr;\n```\n\n----------------------------------------\n\nTITLE: Checking if Derived State Recalculation is Needed in TypeScript\nDESCRIPTION: Deeply checks if the derived state needs to be recalculated based on changes in its dependencies. This method is used for optimizing performance by avoiding unnecessary recalculations.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncheckIfRecalculationNeededDeeply(): void\n```\n\n----------------------------------------\n\nTITLE: Defining the prevVal Property in DerivedFnProps Interface in TypeScript\nDESCRIPTION: Defines the prevVal property which contains the previous calculated value of a derived store. This property is undefined during the first computation run.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedfnprops.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprevVal: unknown;\n```\n\n----------------------------------------\n\nTITLE: Implementing Primitive Derived State with onUpdate in TypeScript\nDESCRIPTION: Shows a basic implementation of derived state using the onUpdate callback to compute a value whenever the store updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet double = 0;\nconst count = new Store(0, {\n  onUpdate: () => {\n    double = count.state * 2;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Derived-to-Store Relationship Tracking in TypeScript\nDESCRIPTION: A WeakMap that tracks the relationship between derived values and their corresponding stores. It maps each Derived instance to a Set of Store instances that depend on it, allowing for proper dependency management in the TanStack Store library.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/variables/derivedtostore.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst __derivedToStore: WeakMap<Derived<unknown, readonly any[]>, Set<Store<unknown, (cb) => unknown>>>;\n```\n\n----------------------------------------\n\nTITLE: Store Current State Property\nDESCRIPTION: Property that holds the current state value of the store.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstate: TState;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Comparison Function in TypeScript\nDESCRIPTION: A generic function that performs shallow equality comparison between two objects of the same type. It takes two parameters of type T and returns a boolean indicating whether they are shallowly equal.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/react/reference/functions/shallow.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shallow<T>(objA, objB): boolean\n```\n\n----------------------------------------\n\nTITLE: Creating Main Angular Component with TanStack Store Integration\nDESCRIPTION: This snippet defines the main AppComponent, which imports and uses DisplayComponent and IncrementComponent. It sets up the basic structure of the application for counting friends who like cats or dogs.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: angular-ts\nCODE:\n```\nimport { Component } from '@angular/core'\nimport { DisplayComponent } from './display.component'\nimport { IncrementComponent } from './increment.component'\n\n@Component({\nselector: 'app-root',\nimports: [DisplayComponent, IncrementComponent],\ntemplate: `\n<h1>How many of your friends like cats or dogs?</h1>\n<p>\n  Press one of the buttons to add a counter of how many of your friends like\n  cats or dogs\n</p>\n<app-increment animal=\"dogs\" />\n<app-display animal=\"dogs\" />\n<app-increment animal=\"cats\" />\n<app-display animal=\"cats\" />\n`,\n})\nexport class AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Shallow Comparison Function Definition in TypeScript\nDESCRIPTION: This function performs a shallow equality comparison between two objects of the same type. It returns a boolean indicating whether the objects are shallowly equal. Used in reactive systems to optimize re-renders.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/vue/reference/functions/shallow.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shallow<T>(objA, objB): boolean\n```\n\n----------------------------------------\n\nTITLE: Main Vue Application Component\nDESCRIPTION: The main App.vue component that renders the counter interface with increment buttons and displays for both cats and dogs counters.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/vue/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport Increment from './Increment.vue';\nimport Display from './Display.vue';\n</script>\n\n<template>\n  <h1>How many of your friends like cats or dogs?</h1>\n  <p>Press one of the buttons to add a counter of how many of your friends like cats or dogs</p>\n  <Increment animal=\"dogs\" />\n  <Display animal=\"dogs\" />\n  <Increment animal=\"cats\" />\n  <Display animal=\"cats\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useStore with a Store in TypeScript\nDESCRIPTION: Function signature for using useStore with a Store type. This function allows subscribing to a store with an optional selector function to extract specific parts of the state. It returns an object with a 'current' property containing the selected state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/reference/functions/usestore.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useStore<TState, TSelected>(store, selector?): object\n```\n\n----------------------------------------\n\nTITLE: Store Options Property Definition\nDESCRIPTION: Optional property that holds configuration options for the Store instance. These options can customize how the store behaves when state changes occur.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional options: StoreOptions<TState, TUpdater>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Value from useStore Return Object\nDESCRIPTION: Type definition for the 'current' property in the object returned by the useStore function. The current property is readonly and contains the selected state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/reference/functions/usestore.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly current: TSelected;\n```\n\n----------------------------------------\n\nTITLE: Main Application Component Structure in Svelte\nDESCRIPTION: The main Svelte component that structures the application UI. It imports and arranges the Increment and Display components for both cats and dogs counters.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n\timport Increment from \"./Increment.svelte\";\n\timport Display from \"./Display.svelte\";\n</script>\n\n\n<h1>How many of your friends like cats or dogs?</h1>\n<p>Press one of the buttons to add a counter of how many of your friends like cats or dogs</p>\n<Increment animal=\"dogs\" />\n<Display animal=\"dogs\" />\n<Increment animal=\"cats\" />\n<Display animal=\"cats\" />\n```\n\n----------------------------------------\n\nTITLE: Injecting Store with State Type\nDESCRIPTION: First call signature of injectStore function that accepts a store instance, optional selector function, and configuration options. Returns a Signal of the selected state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/reference/functions/injectstore.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction injectStore<TState, TSelected>(\n   store, \n   selector?, \noptions?): Signal<TSelected>\n```\n\n----------------------------------------\n\nTITLE: Creating Increment Component with TanStack Store Integration\nDESCRIPTION: This snippet defines an IncrementComponent that provides a button to update the count for a specific animal using the TanStack Store. It demonstrates how to trigger state updates from a component.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: angular-ts\nCODE:\n```\nimport { injectStore } from '@tanstack/angular-store';\nimport { store, updateState } from './store';\n\n@Component({\n    selector: 'app-increment',\n    template: `\n        <button (click)=\"updateState(animal())\">My Friend Likes {{ animal() }}</button>\n    `,\n    standalone: true\n})\nexport class Increment {\n    animal = input.required<string>();\n    updateState = updateState;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnwrapDerivedOrStore Type Alias in TypeScript\nDESCRIPTION: This type alias extracts the inner type from either a Derived<T> or Store<T> generic type. It uses conditional types to check if T extends Derived or Store and returns the corresponding inner type, or never if neither condition is met.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/type-aliases/unwrapderivedorstore.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnwrapDerivedOrStore<T> = T extends Derived<infer InnerD> ? InnerD : T extends Store<infer InnerS> ? InnerS : never;\n```\n\n----------------------------------------\n\nTITLE: Creating Display Component with TanStack Store Integration\nDESCRIPTION: This snippet defines a DisplayComponent that uses the TanStack Store to display the count for a specific animal. It demonstrates how to inject and use the store within an Angular component.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: angular-ts\nCODE:\n```\nimport { injectStore } from '@tanstack/angular-store';\nimport { store } from './store';\n\n@Component({\n    selector: 'app-display',\n    template: `\n        <!-- This will only re-render when animal changes. If an unrelated store property changes, it won't re-render -->\n        <div>{{ animal() }}: {{ count() }}</div>\n    `,\n    standalone: true\n})\nexport class Display {\n    animal = input.required<string>();\n    count = injectStore(store, (state) => state[this.animal()]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Store for Svelte\nDESCRIPTION: Command to install TanStack Store for Svelte using npm. Compatible with Svelte 5.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/svelte-store\n```\n\n----------------------------------------\n\nTITLE: Counter Increment Component\nDESCRIPTION: Increment component that provides a button to increase the counter for a specific animal using the store's update function.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/vue/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { store, updateState } from './store';\n\nconst props = defineProps({ animal: String });\n</script>\n\n<template>\n  <button @click=\"updateState(animal)\">My Friend Likes {{ animal }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Store for SolidJS\nDESCRIPTION: Command to install TanStack Store for SolidJS using npm. Compatible with Solid and SolidStart.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/solid-store\n```\n\n----------------------------------------\n\nTITLE: Accessing Dependency Values in Derived Computations in TypeScript\nDESCRIPTION: Demonstrates how to access both previous and current values of dependencies in a derived computation using prevDepVals and currDepVals arguments.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/quick-start.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = new Store(1);\n\nconst double = new Derived({\n  fn: ({ prevDepVals, currDepVals }) => {\n    return (prevDepVals[0] ?? 0) + currDepVals[0];\n  },\n  deps: [count]\n});\n\ndouble.mount();\ndouble.state; // 1\ncount.setState(() => 2);\ndouble.state; // 3\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Store Example\nDESCRIPTION: Commands to install dependencies and start the development server for the TanStack Store example application.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/react/simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Unregistering from Derived State Graph in TypeScript\nDESCRIPTION: Removes this derived state as a dependent from its dependencies. This method is used during cleanup to prevent memory leaks and unnecessary updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/derived.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nunregisterFromGraph(deps): void\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for TanStack Store Example\nDESCRIPTION: Command for starting the development server using npm, yarn, or pnpm package managers to run the TanStack Store example project.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/vue/simple/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Store Previous State Property\nDESCRIPTION: Property that holds the previous state value, useful for comparing changes between state updates.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprevState: TState;\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application. The build artifacts will be stored in the 'dist/' directory for deployment.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Store Listeners Property Definition\nDESCRIPTION: Definition of the listeners property that maintains a Set of listener functions. These listeners are called whenever the state changes.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/classes/store.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlisteners: Set<Listener<TState>>;\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Elements\nDESCRIPTION: Command to create new Angular components using the Angular CLI. Can also be used to generate other elements such as directives, pipes, services, classes, guards, interfaces, enums, and modules.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Using useStore with a Derived Store in TypeScript\nDESCRIPTION: Alternative function signature for using useStore with a Derived type. Similar to the Store version, it allows subscribing to a derived store with an optional selector function, returning an object with a 'current' property.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/reference/functions/usestore.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useStore<TState, TSelected>(store, selector?): object\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to display help information for the Angular CLI. Provides information about available commands and their options.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Optional onSubscribe Callback for DerivedOptions in TanStack Store\nDESCRIPTION: Defines an optional callback that is triggered when a listener subscribes to the derived state. It receives the listener and derived instance, and should return a cleanup function.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/interfaces/derivedoptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional onSubscribe: (listener, derived) => () => void;\n```\n\n----------------------------------------\n\nTITLE: Injecting Derived Store\nDESCRIPTION: Second call signature of injectStore function that accepts a derived store instance, optional selector function, and configuration options. Returns a Signal of the selected state.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/angular/reference/functions/injectstore.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction injectStore<TState, TSelected>(\n   store, \n   selector?, \noptions?): Signal<TSelected>\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte using TypeScript. It uses the writable store from Svelte's store module to create a persistent state that won't be replaced during Hot Module Replacement (HMR).\nSOURCE: https://github.com/tanstack/store/blob/main/examples/svelte/simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from 'svelte/store'\nexport default writable(0)\n```\n\n----------------------------------------\n\nTITLE: Defining __storeToDerived WeakMap in TypeScript for TanStack Store\nDESCRIPTION: Declaration of the __storeToDerived WeakMap that maps Store objects to Sets of Derived values. This structure helps track dependencies between stores and derived values to prevent redundant computations in complex dependency trees.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/variables/storetoderived.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst __storeToDerived: WeakMap<Store<unknown, (cb) => unknown>, Set<Derived<unknown, readonly any[]>>>;\n```\n\n----------------------------------------\n\nTITLE: Defining __depsThatHaveWrittenThisTick Variable in TypeScript\nDESCRIPTION: Declares a constant object __depsThatHaveWrittenThisTick used internally by the TanStack Store scheduler. It contains a 'current' property that stores an array of Derived or Store objects that have written during the current tick.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/reference/variables/depsthathavewrittenthistick.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst __depsThatHaveWrittenThisTick: object;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncurrent: (\n  | Derived<unknown, readonly any[]>\n  | Store<unknown, (cb) => unknown>)[];\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Store for React\nDESCRIPTION: Command to install TanStack Store for React using npm. Compatible with React v16.8+ and currently only supports ReactDOM.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-store\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Store for Vue\nDESCRIPTION: Command to install TanStack Store for Vue using npm. Compatible with both Vue 2 and Vue 3.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/vue-store\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Store for Angular\nDESCRIPTION: Command to install TanStack Store for Angular using npm. Compatible with Angular 19+.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/angular-store\n```\n\n----------------------------------------\n\nTITLE: Running TanStack Store in Development Mode\nDESCRIPTION: Command for running the application in development mode, which will serve the app at http://localhost:5173 for browser viewing and testing.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/solid/simple/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building TanStack Store for Production\nDESCRIPTION: Command for building the application for production deployment. This process bundles the app with Solid in production mode and outputs optimized files to the dist folder.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/solid/simple/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Store in Bash\nDESCRIPTION: Command for installing project dependencies using npm, pnpm, or yarn package managers. This must be run before starting development or building the project.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/solid/simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Store Example\nDESCRIPTION: Command for installing dependencies using npm, yarn, or pnpm package managers before running the TanStack Store example project.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/vue/simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all dependencies for the packages in the monorepo using PNPM package manager. This sets up the workspace with all required dependencies.\nSOURCE: https://github.com/tanstack/store/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building or Running Development Watcher\nDESCRIPTION: Commands to either build the project once or run the development watcher that automatically rebuilds code on changes. This prepares the codebase for testing and development.\nSOURCE: https://github.com/tanstack/store/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running an Example Project\nDESCRIPTION: Command to start the development server for an example project. This allows testing and viewing the example in a browser.\nSOURCE: https://github.com/tanstack/store/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the TanStack Store Repository with GitHub CLI\nDESCRIPTION: Command to clone the TanStack Store repository using the GitHub CLI tool. This is the first step in contributing to the project.\nSOURCE: https://github.com/tanstack/store/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone TanStack/store\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. After running this command, the application will be accessible at http://localhost:4200 and will automatically reload when source files are changed.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Navigating to an Example Directory\nDESCRIPTION: Command to navigate to a specific example directory in the project. This example shows moving to the basic React example.\nSOURCE: https://github.com/tanstack/store/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/react/basic\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests via Karma test runner. This runs the test suites defined in the project.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests via a platform of choice. Requires adding a package that implements end-to-end testing capabilities before using this command.\nSOURCE: https://github.com/tanstack/store/blob/main/examples/angular/simple/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Comparison in TypeScript\nDESCRIPTION: A generic function that performs shallow comparison between two objects of the same type T. The function takes two parameters objA and objB of type T and returns a boolean indicating whether the objects are shallowly equal.\nSOURCE: https://github.com/tanstack/store/blob/main/docs/framework/svelte/reference/functions/shallow.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shallow<T>(objA, objB): boolean\n```"
  }
]