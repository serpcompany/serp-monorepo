[
  {
    "owner": "mobxjs",
    "repo": "mobx",
    "content": "TITLE: Automatically Rerunning Functions with autorun in MobX\nDESCRIPTION: The `autorun` function reruns a provided function whenever any observable value it tracks changes, facilitating automatic updates for derived states.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => effect, options?)\n```\n\n----------------------------------------\n\nTITLE: Implementing MobX Timer in React - JavaScript\nDESCRIPTION: This snippet demonstrates setting up a simple timer using MobX for state management in a React application. The `createTimer` function uses `makeAutoObservable` to create an observable object, while the `TimerView` component uses the `observer` function to automatically update based on changes to the observable state. Dependencies include React, ReactDOM, MobX, and MobX-React-Lite. Key parameters include `secondsPassed` as the state variable being tracked and updated.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { makeAutoObservable } from \"mobx\"\nimport { observer } from \"mobx-react-lite\"\n\n// Model the application state.\nfunction createTimer() {\n    return makeAutoObservable({\n        secondsPassed: 0,\n        increase() {\n            this.secondsPassed += 1\n        },\n        reset() {\n            this.secondsPassed = 0\n        }\n    })\n}\n\nconst myTimer = createTimer()\n\n// Build a \"user interface\" that uses the observable state.\nconst TimerView = observer(({ timer }) => (\n    <button onClick={() => timer.reset()}>Seconds passed: {timer.secondsPassed}</button>\n))\n\nReactDOM.render(<TimerView timer={myTimer} />, document.body)\n\n// Update the 'Seconds passed: X' text every second.\nsetInterval(() => {\n    myTimer.increase()\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Creating Observable State with makeObservable in JavaScript\nDESCRIPTION: This snippet demonstrates how to use makeObservable to create observable state in a class. It shows how to annotate properties, computed values, actions, and flows.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, computed, action, flow } from \"mobx\"\n\nclass Doubler {\n    value\n\n    constructor(value) {\n        makeObservable(this, {\n            value: observable,\n            double: computed,\n            increment: action,\n            fetch: flow\n        })\n        this.value = value\n    }\n\n    get double() {\n        return this.value * 2\n    }\n\n    increment() {\n        this.value++\n    }\n\n    *fetch() {\n        const response = yield fetch(\"/api/value\")\n        this.value = response.json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Effects via reaction in MobX\nDESCRIPTION: The `reaction` method allows a side effect function to rerun anytime the specified data changes, enabling fine-tuned reactions based on changing observables.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreaction(() => data, data => effect, options?)\n```\n\n----------------------------------------\n\nTITLE: Defining TimerView with Observer - JavaScript\nDESCRIPTION: Defines a TimerView component that uses MobX's observer to reactively display the number of seconds passed. It highlights the importance of reading properties within the observer to track changes correctly.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst TimerView = observer(({ secondsPassed }) => <span>Seconds passed: {secondsPassed}</span>)\n\nReact.render(<TimerView secondsPassed={myTimer.secondsPassed} />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Initializing MobX TodoStore with Domain Logic\nDESCRIPTION: A comprehensive domain store implementation for managing Todo items, demonstrating MobX store creation with auto-observable state, server synchronization, and complex state management\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/defining-data-stores.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable, runInAction, reaction } from \"mobx\"\nimport uuid from \"node-uuid\"\n\nexport class TodoStore {\n    authorStore\n    transportLayer\n    todos = []\n    isLoading = true\n\n    constructor(transportLayer, authorStore) {\n        makeAutoObservable(this)\n        this.authorStore = authorStore // Store that can resolve authors.\n        this.transportLayer = transportLayer // Thing that can make server requests.\n        this.transportLayer.onReceiveTodoUpdate(updatedTodo =>\n            this.updateTodoFromServer(updatedTodo)\n        )\n        this.loadTodos()\n    }\n\n    // Fetches all Todos from the server.\n    loadTodos() {\n        this.isLoading = true\n        this.transportLayer.fetchTodos().then(fetchedTodos => {\n            runInAction(() => {\n                fetchedTodos.forEach(json => this.updateTodoFromServer(json))\n                this.isLoading = false\n            })\n        })\n    }\n\n    // Update a Todo with information from the server. Guarantees a Todo only\n    // exists once. Might either construct a new Todo, update an existing one,\n    // or remove a Todo if it has been deleted on the server.\n    updateTodoFromServer(json) {\n        let todo = this.todos.find(todo => todo.id === json.id)\n        if (!todo) {\n            todo = new Todo(this, json.id)\n            this.todos.push(todo)\n        }\n        if (json.isDeleted) {\n            this.removeTodo(todo)\n        } else {\n            todo.updateFromJson(json)\n        }\n    }\n\n    // Creates a fresh Todo on the client and the server.\n    createTodo() {\n        const todo = new Todo(this)\n        this.todos.push(todo)\n        return todo\n    }\n\n    // A Todo was somehow deleted, clean it from the client memory.\n    removeTodo(todo) {\n        this.todos.splice(this.todos.indexOf(todo), 1)\n        todo.dispose()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Computed Property Example in MobX\nDESCRIPTION: Demonstrates creating a computed property in a class using MobX decorators and makeObservable. Shows how computed values cache results and only recompute when dependencies change.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/computeds.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, computed, autorun } from \"mobx\"\n\nclass OrderLine {\n    price = 0\n    amount = 1\n\n    constructor(price) {\n        makeObservable(this, {\n            price: observable,\n            amount: observable,\n            total: computed\n        })\n        this.price = price\n    }\n\n    get total() {\n        console.log(\"Computing...\")\n        return this.price * this.amount\n    }\n}\n\nconst order = new OrderLine(0)\n\nconst stop = autorun(() => {\n    console.log(\"Total: \" + order.total)\n})\n```\n\n----------------------------------------\n\nTITLE: Using makeObservable with actions in MobX\nDESCRIPTION: Demonstrates how to declare an action using makeObservable. The increment action modifies the observable value property, with intermediate states not becoming visible to observers until the action completes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, action } from \"mobx\"\n\nclass Doubler {\n    value = 0\n\n    constructor() {\n        makeObservable(this, {\n            value: observable,\n            increment: action\n        })\n    }\n\n    increment() {\n        // Intermediate states will not become visible to observers.\n        this.value++\n        this.value++\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using makeAutoObservable in MobX\nDESCRIPTION: Demonstrates using makeAutoObservable which automatically detects and applies the appropriate annotations (observable, action) to class members based on their usage, simplifying the code.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable } from \"mobx\"\n\nclass Doubler {\n    value = 0\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    increment() {\n        this.value++\n        this.value++\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Observable State with MobX\nDESCRIPTION: This code snippet demonstrates how to define observable state in MobX using the `makeObservable` and `observable` decorators. It creates a `Todo` class with properties `id`, `title`, and `finished`, and marks `title` and `finished` as observable. It also marks the `toggle` method as an action. This allows MobX to track changes to these properties and trigger updates in dependent computations and reactions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/the-gist-of-mobx.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, action } from \"mobx\"\n\nclass Todo {\n    id = Math.random()\n    title = \"\"\n    finished = false\n\n    constructor(title) {\n        makeObservable(this, {\n            title: observable,\n            finished: observable,\n            toggle: action\n        })\n        this.title = title\n    }\n\n    toggle() {\n        this.finished = !this.finished\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await with runInAction in MobX - JavaScript\nDESCRIPTION: This snippet illustrates the use of `async/await` alongside `runInAction` to manage asynchronous operations. `runInAction` ensures that state updates occur inside a MobX action. Dependencies: `mobx` library. Inputs: Awaited projects data from an asynchronous fetch. Outputs: Processed project list and updated state.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runInAction, makeAutoObservable } from \"mobx\"\n\nclass Store {\n    githubProjects = []\n    state = \"pending\" // \"pending\", \"done\" or \"error\"\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    async fetchProjects() {\n        this.githubProjects = []\n        this.state = \"pending\"\n        try {\n            const projects = await fetchGithubProjectsSomehow()\n            const filteredProjects = somePreprocessing(projects)\n            runInAction(() => {\n                this.githubProjects = filteredProjects\n                this.state = \"done\"\n            })\n        } catch (e) {\n            runInAction(() => {\n                this.state = \"error\"\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging with trace and spy in MobX\nDESCRIPTION: The `trace` function helps in debugging observable updates, while `spy` registers a global listener for all events occurring in MobX, providing insight into the reactivity system.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntrace()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrace(true)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntrace(object, propertyName, enterDebugger?)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspy(eventListener)\n```\n\n----------------------------------------\n\nTITLE: Complete Timer Example with MobX and React Integration\nDESCRIPTION: A complete example showing a Timer class with observable state that updates a React component. Demonstrates how the observer HOC automatically subscribes the component to changes in the observable state.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { makeAutoObservable } from \"mobx\"\nimport { observer } from \"mobx-react-lite\"\n\nclass Timer {\n    secondsPassed = 0\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    increaseTimer() {\n        this.secondsPassed += 1\n    }\n}\n\nconst myTimer = new Timer()\n\n// A function component wrapped with `observer` will react\n// to any future change in an observable it used before.\nconst TimerView = observer(({ timer }) => <span>Seconds passed: {timer.secondsPassed}</span>)\n\nReactDOM.render(<TimerView timer={myTimer} />, document.body)\n\nsetInterval(() => {\n    myTimer.increaseTimer()\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Observable State with MobX and React\nDESCRIPTION: The snippet demonstrates creating a local observable state using the `useLocalObservable` hook from `mobx-react-lite`. It initializes a todo object, making all its properties observable. The component uses an `Observer` to render and toggle the state between done and to-do statuses. No additional dependencies are required aside from MobX and React.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLocalObservable, Observer } from \"mobx-react-lite\"\n\nconst Todo = () => {\n    const todo = useLocalObservable(() => ({\n        title: \"Test\",\n        done: true,\n        toggle() {\n            this.done = !this.done\n        }\n    }))\n\n    return (\n        <Observer>\n            {() => (\n                <h1 onClick={todo.toggle}>\n                    {todo.title} {todo.done ? \"[DONE]\" : \"[TODO]\"}\n                </h1>\n            )}\n        </Observer>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable Class in MobX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a class with observable properties using MobX's `makeAutoObservable`. It includes a constructor and a method to update the title.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Message {\n    title\n    author\n    likes\n    constructor(title, author, likes) {\n        makeAutoObservable(this)\n        this.title = title\n        this.author = author\n        this.likes = likes\n    }\n\n    updateTitle(title) {\n        this.title = title\n    }\n}\n\nlet message = new Message(\"Foo\", { name: \"Michel\" }, [\"Joe\", \"Sara\"])\n```\n\n----------------------------------------\n\nTITLE: Using makeAutoObservable with autoBind in MobX\nDESCRIPTION: Shows how to use makeAutoObservable with the autoBind option to automatically bind all actions and flows to the class instance, eliminating the need for manual binding or arrow functions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable } from \"mobx\"\n\nclass Doubler {\n    value = 0\n\n    constructor() {\n        makeAutoObservable(this, {}, { autoBind: true })\n    }\n\n    increment() {\n        this.value++\n        this.value++\n    }\n\n    *flow() {\n        const response = yield fetch(\"http://example.com/value\")\n        this.value = yield response.json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Collections with observable Function in JavaScript\nDESCRIPTION: This example shows how to use the observable function to create observable collections like objects and arrays. It demonstrates adding and modifying properties dynamically.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable } from \"mobx\"\n\nconst todosById = observable({\n    \"TODO-123\": {\n        title: \"find a decent task management system\",\n        done: false\n    }\n})\n\ntodosById[\"TODO-456\"] = {\n    title: \"close all tickets older than two weeks\",\n    done: true\n}\n\nconst tags = observable([\"high prio\", \"medium prio\", \"low prio\"])\ntags.push(\"prio: for fun\")\n```\n\n----------------------------------------\n\nTITLE: Computed Values in MobX\nDESCRIPTION: This code snippet demonstrates how to create a computed value in MobX using `makeObservable` and `computed`. It defines a `TodoList` class with an array of `todos` and a `unfinishedTodoCount` getter. The `unfinishedTodoCount` getter is marked as a computed value, so MobX will automatically update it whenever the `todos` array or the `finished` property of any of the todos changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/the-gist-of-mobx.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, computed } from \"mobx\"\n\nclass TodoList {\n    todos = []\n    get unfinishedTodoCount() {\n        return this.todos.filter(todo => !todo.finished).length\n    }\n    constructor(todos) {\n        makeObservable(this, {\n            todos: observable,\n            unfinishedTodoCount: computed\n        })\n        this.todos = todos\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flow and Generator Functions in MobX - JavaScript\nDESCRIPTION: This snippet demonstrates the use of `flow` and generator functions to manage asynchronous processes in MobX stores. `flow` provides a structured way to handle asynchronous logic, allowing promises to be yielded. Dependencies: `mobx` library. Inputs: Projects data yielded from a generator function. Outputs: Filtered projects and state change.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { flow, makeAutoObservable, flowResult } from \"mobx\"\n\nclass Store {\n    githubProjects = []\n    state = \"pending\"\n\n    constructor() {\n        makeAutoObservable(this, {\n            fetchProjects: flow\n        })\n    }\n\n    // Note the star, this a generator function!\n    *fetchProjects() {\n        this.githubProjects = []\n        this.state = \"pending\"\n        try {\n            // Yield instead of await.\n            const projects = yield fetchGithubProjectsSomehow()\n            const filteredProjects = somePreprocessing(projects)\n            this.state = \"done\"\n            this.githubProjects = filteredProjects\n            return projects\n        } catch (error) {\n            this.state = \"error\"\n        }\n    }\n}\n\nconst store = new Store()\nconst projects = await flowResult(store.fetchProjects())\n```\n\n----------------------------------------\n\nTITLE: Handling State with Observables in Class Components\nDESCRIPTION: This snippet illustrates how to manage state using observables in a MobX observer component. It shows how to set up a reaction that will alert the user when a specific observable property exceeds a threshold value.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@observer\nclass Alerter extends React.Component<{ counter: number }> {\n    @observable observableCounter: number\n    reactionDisposer\n\n    constructor(props) {\n        this.observableCounter = counter\n    }\n\n    componentDidMount() {\n        // set up a reaction, by observing the observable,\n        // rather than the prop which is non-reactive:\n        this.reactionDisposer = autorun(() => {\n            if (this.observableCounter > 10) {\n                alert(\"Reached 10!\")\n            }\n        })\n    }\n\n    componentDidUpdate() {\n        // sync the observable from props\n        this.observableCounter = this.props.counter\n    }\n\n    componentWillUnmount() {\n        this.reactionDisposer()\n    }\n\n    render() {\n        return <div>{this.props.counter}</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable State with Decorators in JavaScript\nDESCRIPTION: This example shows how to use modern decorators to create observable state in a class without calling makeObservable. It uses @observable, @computed, @action, and @flow decorators.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, computed, action, flow } from \"mobx\"\n\nclass Doubler {\n    @observable accessor value\n\n    constructor(value) {\n        this.value = value\n    }\n\n    @computed\n    get double() {\n        return this.value * 2\n    }\n\n    @action\n    increment() {\n        this.value++\n    }\n\n    @flow\n    *fetch() {\n        const response = yield fetch(\"/api/value\")\n        this.value = response.json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive React Components with MobX\nDESCRIPTION: This code snippet demonstrates how to create reactive React components using MobX and `mobx-react-lite`. The `TodoListView` and `TodoView` components are wrapped with the `observer` function, which converts them into derivations of the data they render. This means that the components will automatically re-render whenever the observable data they depend on changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/the-gist-of-mobx.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\nimport { render } from \"react-dom\"\nimport { observer } from \"mobx-react-lite\"\n\nconst TodoListView = observer(({ todoList }) => (\n    <div>\n        <ul>\n            {todoList.todos.map(todo => (\n                <TodoView todo={todo} key={todo.id} />\n            ))}\n        </ul>\n        Tasks left: {todoList.unfinishedTodoCount}\n    </div>\n))\n\nconst TodoView = observer(({ todo }) => (\n    <li>\n        <input type=\"checkbox\" checked={todo.finished} onClick={() => todo.toggle()} />\n        {todo.title}\n    </li>\n))\n\nconst store = new TodoList([new Todo(\"Get Coffee\"), new Todo(\"Write simpler code\")])\nrender(<TodoListView todoList={store} />, document.getElementById(\"root\"))\n```\n\n----------------------------------------\n\nTITLE: Manipulating Observable Objects with MobX\nDESCRIPTION: This JavaScript code snippet demonstrates how to use MobX's `observable.object`, `autorun`, `get`, `set`, and `values` functions to create and manipulate an observable object. It shows how to track changes to properties (even if they don't yet exist) using `get` and how to react to changes using `autorun`.  It updates the observable object and logs the changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/collection-utilities.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { autorun, get, set, observable, values } from \"mobx\"\n\nconst twitterUrls = observable.object({\n    Joe: \"twitter.com/joey\"\n})\n\nautorun(() => {\n    // Get can track not yet existing properties.\n    console.log(get(twitterUrls, \"Sara\"))\n})\n\nautorun(() => {\n    console.log(\"All urls: \" + values(twitterUrls).join(\", \"))\n})\n\nset(twitterUrls, { Sara: \"twitter.com/horsejs\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a UI State Store with MobX\nDESCRIPTION: This code snippet demonstrates how to create a UI state store using MobX. It includes observable properties for language, pending request count, and window dimensions. It also shows how to use `makeAutoObservable` and `observable.struct` for efficient updates and subscriptions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/defining-data-stores.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable, observable, computed } from \"mobx\"\n\nexport class UiState {\n    language = \"en_US\"\n    pendingRequestCount = 0\n\n    // .struct makes sure observer won't be signaled unless the\n    // dimensions object changed in a deepEqual manner.\n    windowDimensions = {\n        width: window.innerWidth,\n        height: window.innerHeight\n    }\n\n    constructor() {\n        makeAutoObservable(this, { windowDimensions: observable.struct })\n        window.onresize = () => {\n            this.windowDimensions = getWindowDimensions()\n        }\n    }\n\n    get appIsInSync() {\n        return this.pendingRequestCount === 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Reactions with Autorun in MobX\nDESCRIPTION: This code snippet demonstrates how to use `autorun` to create a custom reaction in MobX. The `autorun` function takes a function as an argument, and that function will be executed automatically whenever any of the observable properties it reads change. In this example, the `autorun` function logs a message to the console whenever the `unfinishedTodoCount` changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/the-gist-of-mobx.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// A function that automatically observes the state.\nautorun(() => {\n    console.log(\"Tasks left: \" + todos.unfinishedTodoCount)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timer with MobX and React\nDESCRIPTION: This snippet demonstrates how to create a simple timer application using MobX for state management and React for the UI. It shows how to define observable state, actions to modify the state, and an observer component that automatically re-renders when the observed state changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { makeAutoObservable } from \"mobx\"\nimport { observer } from \"mobx-react-lite\"\n\n// Model the application state.\nfunction createTimer() {\n    return makeAutoObservable({\n        secondsPassed: 0,\n        increase() {\n            this.secondsPassed += 1\n        },\n        reset() {\n            this.secondsPassed = 0\n        }\n    })\n}\n\nconst myTimer = createTimer()\n\n// Build a \"user interface\" that uses the observable state.\nconst TimerView = observer(({ timer }) => (\n    <button onClick={() => timer.reset()}>Seconds passed: {timer.secondsPassed}</button>\n))\n\nReactDOM.render(<TimerView timer={myTimer} />, document.body)\n\n// Update the 'Seconds passed: X' text every second.\nsetInterval(() => {\n    myTimer.increase()\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Observable Primitives with observable.box in JavaScript\nDESCRIPTION: Shows how to create an observable box containing a primitive value (string in this case). The example demonstrates creating the box, accessing its value with get(), and updating it with set(). It also includes an autorun to react to changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, autorun } from \"mobx\"\n\nconst cityName = observable.box(\"Vienna\")\n\nautorun(() => {\n    console.log(cityName.get())\n})\n// Prints: 'Vienna'\n\ncityName.set(\"Amsterdam\")\n// Prints: 'Amsterdam'\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Stores with RootStore in MobX\nDESCRIPTION: This code snippet demonstrates how to combine multiple stores using a RootStore pattern in MobX. It creates a RootStore that instantiates other stores and shares references between them.  This enables stores to access each other's state and functionality.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/defining-data-stores.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass RootStore {\n    constructor() {\n        this.userStore = new UserStore(this)\n        this.todoStore = new TodoStore(this)\n    }\n}\n\nclass UserStore {\n    constructor(rootStore) {\n        this.rootStore = rootStore\n    }\n\n    getTodos(user) {\n        // Access todoStore through the root store.\n        return this.rootStore.todoStore.todos.filter(todo => todo.author === user)\n    }\n}\n\nclass TodoStore {\n    todos = []\n    rootStore\n\n    constructor(rootStore) {\n        makeAutoObservable(this)\n        this.rootStore = rootStore\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Domain Object with MobX Observables\nDESCRIPTION: A domain object class representing a Todo item with complex state management, server synchronization, and reactive properties using MobX observables and reactions\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/defining-data-stores.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Todo {\n    id = null // Unique id of this Todo, immutable.\n    completed = false\n    task = \"\"\n    author = null // Reference to an Author object (from the authorStore).\n    store = null\n    autoSave = true // Indicator for submitting changes in this Todo to the server.\n    saveHandler = null // Disposer of the side effect auto-saving this Todo (dispose).\n\n    constructor(store, id = uuid.v4()) {\n        makeAutoObservable(this, {\n            id: false,\n            store: false,\n            autoSave: false,\n            saveHandler: false,\n            dispose: false\n        })\n        this.store = store\n        this.id = id\n\n        this.saveHandler = reaction(\n            () => this.asJson, // Observe everything that is used in the JSON.\n            json => {\n                // If autoSave is true, send JSON to the server.\n                if (this.autoSave) {\n                    this.store.transportLayer.saveTodo(json)\n                }\n            }\n        )\n    }\n\n    // Remove this Todo from the client and the server.\n    delete() {\n        this.store.transportLayer.deleteTodo(this.id)\n        this.store.removeTodo(this)\n    }\n\n    get asJson() {\n        return {\n            id: this.id,\n            completed: this.completed,\n            task: this.task,\n            authorId: this.author ? this.author.id : null\n        }\n    }\n\n    // Update this Todo with information from the server.\n    updateFromJson(json) {\n        this.autoSave = false // Prevent sending of our changes back to the server.\n        this.completed = json.completed\n        this.task = json.task\n        this.author = this.store.authorStore.resolveAuthor(json.authorId)\n        this.autoSave = true\n    }\n\n    // Clean up the observer.\n    dispose() {\n        this.saveHandler()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Conditional Effects with when in MobX\nDESCRIPTION: The `when` function executes a side effect once a specified observable condition is met, providing a way to react to state changes that should only trigger under certain circumstances.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwhen(() => condition, () => effect, options?)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait when(() => condition, options?)\n```\n\n----------------------------------------\n\nTITLE: Tracing the Dependencies of a Reaction in MobX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to trace dependencies in MobX using the `trace` function within an `autorun`. It shows the output when the `title` is updated.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { trace } from \"mobx\"\n\nconst disposer = autorun(() => {\n    console.log(message.title)\n    trace()\n})\n// Outputs:\n// [mobx.trace] 'Autorun@2' tracing enabled\n\nmessage.updateTitle(\"Hello\")\n// Outputs:\n// [mobx.trace] 'Autorun@2' is invalidated due to a change in: 'Message@1.title'\nHello\n```\n\n----------------------------------------\n\nTITLE: Using Observer with Functional Components and useLocalObservable - JavaScript\nDESCRIPTION: This snippet illustrates how to implement a functional component with MobX's observer and useLocalObservable for local state management. The component updates based on prop changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer, useLocalObservable } from \"mobx-react-lite\"\nimport { useEffect } from \"react\"\n\nconst TimerView = observer(({ offset = 0 }) => {\n    const timer = useLocalObservable(() => ({\n        offset, // The initial offset value\n        secondsPassed: 0,\n        increaseTimer() {\n            this.secondsPassed++\n        },\n        get offsetTime() {\n            return this.secondsPassed - this.offset // Not 'offset' from 'props'!\n        }\n    }))\n\n    useEffect(() => {\n        // Sync the offset from 'props' into the observable 'timer'\n        timer.offset = offset\n    }, [offset])\n\n    // Effect to set up a timer, only for demo purposes.\n    useEffect(() => {\n        const handle = setInterval(timer.increaseTimer, 1000)\n        return () => {\n            clearInterval(handle)\n        }\n    }, [])\n\n    return <span>Seconds passed: {timer.offsetTime}</span>\n})\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Using Reaction in MobX with Animal Class\nDESCRIPTION: Shows how to use reaction to control which observable changes trigger effects. The example tracks an animal's hunger state while accessing energy level only in the effect function.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable, reaction } from \"mobx\"\n\nclass Animal {\n    name\n    energyLevel\n\n    constructor(name) {\n        this.name = name\n        this.energyLevel = 100\n        makeAutoObservable(this)\n    }\n\n    reduceEnergy() {\n        this.energyLevel -= 10\n    }\n\n    get isHungry() {\n        return this.energyLevel < 50\n    }\n}\n\nconst giraffe = new Animal(\"Gary\")\n\nreaction(\n    () => giraffe.isHungry,\n    isHungry => {\n        if (isHungry) {\n            console.log(\"Now I'm hungry!\")\n        } else {\n            console.log(\"I'm not hungry!\")\n        }\n        console.log(\"Energy level:\", giraffe.energyLevel)\n    }\n)\n\nconsole.log(\"Now let's change state!\")\nfor (let i = 0; i < 10; i++) {\n    giraffe.reduceEnergy()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Autorun with MobX Animal Class\nDESCRIPTION: Demonstrates using autorun to automatically track and respond to changes in observable state using an Animal class example. Shows how autorun tracks energyLevel changes and hunger state.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable, autorun } from \"mobx\"\n\nclass Animal {\n    name\n    energyLevel\n\n    constructor(name) {\n        this.name = name\n        this.energyLevel = 100\n        makeAutoObservable(this)\n    }\n\n    reduceEnergy() {\n        this.energyLevel -= 10\n    }\n\n    get isHungry() {\n        return this.energyLevel < 50\n    }\n}\n\nconst giraffe = new Animal(\"Gary\")\n\nautorun(() => {\n    console.log(\"Energy level:\", giraffe.energyLevel)\n})\n\nautorun(() => {\n    if (giraffe.isHungry) {\n        console.log(\"Now I'm hungry!\")\n    } else {\n        console.log(\"I'm not hungry!\")\n    }\n})\n\nconsole.log(\"Now let's change state!\")\nfor (let i = 0; i < 10; i++) {\n    giraffe.reduceEnergy()\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Item Component with Computed in React and MobX\nDESCRIPTION: This snippet shows an optimized version of the Item component using a computed value. It creates a new computed inside the component to efficiently cache the selection state, potentially reducing unnecessary re-renders.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/computeds-with-args.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { computed } from 'mobx'\nimport { observer } from 'mobx-react-lite'\n\nconst Item = observer(({ item, store }) => {\n    const isSelected = computed(() => store.isSelected(item.id)).get()\n    return (\n        <div className={isSelected ? \"selected\" : \"\"}>\n            {item.title}\n        </div>\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Using observer Decorator with React Components\nDESCRIPTION: Example of using the observer decorator from mobx-react with a React class component to make it reactive to MobX observable changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/enabling-decorators.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n@observer\nclass Timer extends React.Component {\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Array with MobX in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an observable array using MobX's observable function and track changes to the array with the autorun function. It logs the remaining tasks in the array based on their completion status.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, autorun } from \"mobx\"\n\nconst todos = observable([\n    { title: \"Spoil tea\", completed: true },\n    { title: \"Make coffee\", completed: false }\n])\n\nautorun(() => {\n    console.log(\n        \"Remaining:\",\n        todos\n            .filter(todo => !todo.completed)\n            .map(todo => todo.title)\n            .join(\", \")\n    )\n})\n// Prints: 'Remaining: Make coffee'\n\ntodos[0].completed = false\n// Prints: 'Remaining: Spoil tea, Make coffee'\n\ntodos[2] = { title: \"Take a nap\", completed: false }\n// Prints: 'Remaining: Spoil tea, Make coffee, Take a nap'\n\ntodos.shift()\n// Prints: 'Remaining: Make coffee, Take a nap'\n```\n\n----------------------------------------\n\nTITLE: Using @action decorator in MobX\nDESCRIPTION: Shows how to use the @action decorator to mark a method as an action. The decorator ensures that the method runs in a transaction, preventing intermediate states from being visible to observers.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, action } from \"mobx\"\n\nclass Doubler {\n    @observable accessor value = 0\n\n    @action\n    increment() {\n        // Intermediate states will not become visible to observers.\n        this.value++\n        this.value++\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Observables with isObservable and Related Functions in MobX\nDESCRIPTION: The introspection utilities, such as `isObservable`, `isObservableProp`, and others, check if a given object or property is observable, aiding in state management and debugging.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nisObservable(array|object|Set|Map)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisObservableProp(object, propertyName)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisObservableArray(array)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisObservableObject(object)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisObservableSet(set)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisObservableMap(map)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisBoxedObservable(value)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisAction(func)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisComputed(boxedComputed)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisComputedProp(object, propertyName)\n```\n\n----------------------------------------\n\nTITLE: Using useLocalObservable Hook for Simplified Local State\nDESCRIPTION: Demonstrates the useLocalObservable hook from mobx-react-lite, which simplifies the creation of local observable objects in components without needing useState and observable separately.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer, useLocalObservable } from \"mobx-react-lite\"\n\nconst TimerView = observer(() => {\n    const timer = useLocalObservable(() => ({\n        secondsPassed: 0,\n        increaseTimer() {\n            this.secondsPassed++\n        }\n    }))\n    return <span>Seconds passed: {timer.secondsPassed}</span>\n})\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Using useEffect with Observables and autorun - JavaScript\nDESCRIPTION: This snippet shows how to use useEffect in conjunction with MobX's autorun to observe changes in an observable and execute side effects accordingly. It ensures the autorun is disposed correctly on unmount.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer, useLocalObservable } from \"mobx-react-lite\"\nimport { useEffect } from \"react\"\n\nconst TimerView = observer(() => {\n    const timer = useLocalObservable(() => ({\n        secondsPassed: 0,\n        increaseTimer() {\n            this.secondsPassed++\n        }\n    }))\n\n    // Effect that triggers upon observable changes.\n    useEffect(\n        () =>\n            autorun(() => {\n                if (timer.secondsPassed > 60) alert(\"Still there. It's a minute already?!!\")\n            }),\n        []\n    )\n\n    // Effect to set up a timer, only for demo purposes.\n    useEffect(() => {\n        const handle = setInterval(timer.increaseTimer, 1000)\n        return () => {\n            clearInterval(handle)\n        }\n    }, [])\n\n    return <span>Seconds passed: {timer.secondsPassed}</span>\n})\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Using action as a function wrapper in MobX\nDESCRIPTION: Demonstrates how to use action as a higher-order function that wraps a state-modifying function. This approach is useful for creating standalone actions outside of classes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, action } from \"mobx\"\n\nconst state = observable({ value: 0 })\n\nconst increment = action(state => {\n    state.value++\n    state.value++\n})\n\nincrement(state)\n```\n\n----------------------------------------\n\nTITLE: Using trace with computed properties in MobX\nDESCRIPTION: Example showing how to trace a specific computed property on an object to debug why it's re-evaluating.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/analyzing-reactivity.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntrace(user, \"fullname\")\n```\n\n----------------------------------------\n\nTITLE: Observing Changes to MobX Observables\nDESCRIPTION: Example of using the observe method to monitor changes to a person object's properties. The example shows how to observe all fields of an observable object and how to observe a specific property, with listeners that log the changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/intercept-and-observe.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, observe } from \"mobx\"\n\nconst person = observable({\n    firstName: \"Maarten\",\n    lastName: \"Luther\"\n})\n\n// Observe all fields.\nconst disposer = observe(person, change => {\n    console.log(change.type, change.name, \"from\", change.oldValue, \"to\", change.object[change.name])\n})\n\nperson.firstName = \"Martin\"\n// Prints: 'update firstName from Maarten to Martin'\n\n// Ignore any future updates.\ndisposer()\n\n// Observe a single field.\nconst disposer2 = observe(person, \"lastName\", change => {\n    console.log(\"LastName changed to \", change.newValue)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Disposing of Autorun in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up an `autorun` that observes a simple observable object and how to dispose of it. It shows memory management and how calling the disposer prevents the autorun from continuing indefinitely.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = observable({ count: 0 })\n\n// Sets up the autorun and prints 0.\nconst disposer = autorun(() => {\n    console.log(counter.count)\n})\n\n// Prints: 1\ncounter.count++\n\n// Stops the autorun.\ndisposer()\n\n// Will not print.\ncounter.count++\n```\n\n----------------------------------------\n\nTITLE: Using runInAction in MobX\nDESCRIPTION: Shows how to use runInAction to create and immediately invoke a temporary action. This is particularly useful in asynchronous processes when you need to modify state after awaiting a result.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, runInAction } from \"mobx\"\n\nconst state = observable({ value: 0 })\n\nrunInAction(() => {\n    state.value++\n    state.value++\n})\n```\n\n----------------------------------------\n\nTITLE: Using spy to monitor all MobX actions\nDESCRIPTION: Example demonstrating how to use the spy API to log all actions that occur in a MobX application, including their names and arguments.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/analyzing-reactivity.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nspy(event => {\n    if (event.type === \"action\") {\n        console.log(`${event.name} with args: ${event.arguments}`)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Provider and Inject Mechanisms in MobX\nDESCRIPTION: An example illustrating the use of `Provider` and `inject` with MobX to handle context passing without cascading props. The 'inject' function wires store states into components using a list of strings. The snippet also shows how to customize functionality via mapper functions for dynamic data handling.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n@inject(\"color\")\n@observer\nclass Button extends React.Component {\n    render() {\n        return <button style={{ background: this.props.color }}>{this.props.children}</button>\n    }\n}\n\nclass Message extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.text} <Button>Delete</Button>\n            </div>\n        )\n    }\n}\n\nclass MessageList extends React.Component {\n    render() {\n        const children = this.props.messages.map(message => <Message text={message.text} />)\n        return (\n            <Provider color=\"red\">\n                <div>{children}</div>\n            </Provider>\n        )\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Button = inject(\"color\")(\n    observer(\n        class Button extends Component {\n            /* ... etc ... */\n        }\n    )\n)\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Button = inject(\"color\")(\n    observer(({ color }) => {\n        /* ... etc ... */\n    })\n)\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst NameDisplayer = ({ name }) => <h1>{name}</h1>\n\nconst UserNameDisplayer = inject(stores => ({\n    name: stores.userStore.name\n}))(NameDisplayer)\n\nconst user = mobx.observable({\n    name: \"Noa\"\n})\n\nconst App = () => (\n    <Provider userStore={user}>\n        <UserNameDisplayer />\n    </Provider>\n)\n\nReactDOM.render(<App />, document.body)\n\n```\n\n----------------------------------------\n\nTITLE: Using When with Async/Await in MobX\nDESCRIPTION: Shows how to use when as a Promise with async/await to wait for observable state changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n\tawait when(() => that.isVisible)\n\t// etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Using action with React event handlers in MobX\nDESCRIPTION: Demonstrates wrapping a React event handler with action to ensure state modifications occur within a transaction. This approach helps optimize performance by batching updates.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ResetButton = ({ formState }) => (\n    <button\n        onClick={action(e => {\n            formState.resetPendingUploads()\n            formState.resetValues()\n            e.preventDefault()\n        })}\n    >\n        Reset form\n    </button>\n)\n```\n\n----------------------------------------\n\nTITLE: Computed Property with Setter in MobX\nDESCRIPTION: Shows how to implement a computed property with a setter that acts as an inverse of the computation. The setter is automatically marked as an action.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/computeds.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Dimension {\n    length = 2\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get squared() {\n        return this.length * this.length\n    }\n    set squared(value) {\n        this.length = Math.sqrt(value)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Observable Objects with useState Hook\nDESCRIPTION: Shows how to create and use local observable objects directly with MobX's observable function and React's useState hook, as an alternative to class-based observables.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react-lite\"\nimport { observable } from \"mobx\"\nimport { useState } from \"react\"\n\nconst TimerView = observer(() => {\n    const [timer] = useState(() =>\n        observable({\n            secondsPassed: 0,\n            increaseTimer() {\n                this.secondsPassed++\n            }\n        })\n    )\n    return <span>Seconds passed: {timer.secondsPassed}</span>\n})\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Converting Observable Collections to Plain JavaScript\nDESCRIPTION: Demonstrates how to convert MobX observable collections back to vanilla JavaScript objects, arrays, and maps using shallow copy operations.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst plainObject = { ...observableObject }\nconst plainArray = observableArray.slice()\nconst plainMap = new Map(observableMap)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Observable in MobX with useLocalObservable\nDESCRIPTION: The `useLocalObservable` function creates a new observable object using `makeObservable`, retaining it throughout the component's lifecycle.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nuseLocalObservable(() => source, annotations?)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Observables with createAtom in MobX\nDESCRIPTION: The `createAtom` function allows users to create their own observable data structures and integrates them with MobX, enabling more customized reactive programming.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncreateAtom(name, onBecomeObserved?, onBecomeUnobserved?)\n```\n\n----------------------------------------\n\nTITLE: Optimized List Rendering in React with MobX\nDESCRIPTION: An improved component structure that separates the list rendering into its own dedicated observer component. This approach prevents unnecessary reconciliation of TodoView components when user.name changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = observer(({ todos, user }) => (\n    <div>\n        {user.name}\n        <TodosView todos={todos} />\n    </div>\n))\n\nconst TodosView = observer(({ todos }) => (\n    <ul>\n        {todos.map(todo => (\n            <TodoView todo={todo} key={todo.id} />\n        ))}\n    </ul>\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring Reaction Scheduler\nDESCRIPTION: Customizes the execution of MobX reactions by providing a custom scheduling function. Useful for debugging, adding delays, or modifying reaction timing and logging.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconfigure({\n    reactionScheduler: (f): void => {\n        console.log(\"Running an event after a delay:\", f)\n        setTimeout(f, 100)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Intercepting Observable Changes with intercept in MobX\nDESCRIPTION: The `intercept` function provides a mechanism to intercept changes to an observable before they are applied, allowing custom listeners to manage state transitions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nintercept(propertyName|array|object|Set|Map, listener)\n```\n\n----------------------------------------\n\nTITLE: Implementing When with MobX Resource Management\nDESCRIPTION: Demonstrates using when for reactive resource disposal. Shows how to automatically trigger cleanup when a condition is met.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { when, makeAutoObservable } from \"mobx\"\n\nclass MyResource {\n    constructor() {\n        makeAutoObservable(this, { dispose: false })\n        when(\n            // Once...\n            () => !this.isVisible,\n            // ... then.\n            () => this.dispose()\n        )\n    }\n\n    get isVisible() {\n        // Indicate whether this item is visible.\n    }\n\n    dispose() {\n        // Clean up some resources.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Class Component with Decorator Syntax\nDESCRIPTION: This snippet illustrates the use of decorator syntax with the `observer` in a class-based component. It shows how to apply the `@observer` decorator for easier readability and usage.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@observer\nclass TodoView extends React.Component {\n    render() {\n        return <div>{this.props.todo.title}</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Observer with Class Components in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to wrap a class component with MobX's observer to enable reactivity. The observer will ensure the component reacts to observable changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"React\"\n\nconst TimerView = observer(\n    class TimerView extends React.Component {\n        render() {\n            const { timer } = this.props\n            return <span>Seconds passed: {timer.secondsPassed} </span>\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Observing Specific Change Notifications with observe in MobX\nDESCRIPTION: The `observe` function is a low-level API used to observe changes to a single observable, returning a disposer function to stop observing when necessary.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nobserve(propertyName|array|object|Set|Map, listener)\n```\n\n----------------------------------------\n\nTITLE: Extending Observable Objects in JavaScript using extendObservable\nDESCRIPTION: Demonstrates how to use extendObservable to create new observable properties on an object. This example shows a constructor function for a Person class that makes firstName and lastName observable.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Person(firstName, lastName) {\n    extendObservable(this, { firstName, lastName })\n}\n\nconst person = new Person(\"Michel\", \"Weststrate\")\n```\n\n----------------------------------------\n\nTITLE: Using Observer for Render Function in Class Component\nDESCRIPTION: This code snippet introduces the `Observer` component from MobX which allows anonymous function children that return a single React component. It is useful when needing to inject reactivity into external component structures without using the observer function directly.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.person.name}\n                <Observer>{() => <div>{this.props.person.name}</div>}</Observer>\n            </div>\n        )\n    }\n}\n\nconst person = observable({ name: \"John\" })\n\nReactDOM.render(<App person={person} />, document.body)\nperson.name = \"Mike\" // will cause the Observer region to re-render\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Class Component with ES6 Syntax\nDESCRIPTION: This snippet demonstrates the creation of a class component that is transformed into a reactive component using the `observer` function. The example shows the use of class inheritance and React's rendering features.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst TodoView = observer(\n    class TodoView extends React.Component {\n        render() {\n            return <div>{this.props.todo.title}</div>\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Observers with onBecomeObserved and onBecomeUnobserved in MobX\nDESCRIPTION: The `onBecomeObserved` and `onBecomeUnobserved` functions act as hooks that notify when an observable starts or stops being observed, respectively.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nonBecomeObserved(observable, property?, listener: () => void)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonBecomeUnobserved(observable, property?, listener: () => void)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Observable Clock Class with MobX Atoms\nDESCRIPTION: Demonstrates creation of a custom observable Clock class using MobX atoms. The class provides reactive time updates that only run when being observed. It showcases atom lifecycle management, observation reporting, and interval-based updates.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/custom-observables.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAtom, autorun } from \"mobx\"\n\nclass Clock {\n    atom\n    intervalHandler = null\n    currentDateTime\n\n    constructor() {\n        // Creates an atom to interact with the MobX core algorithm.\n        this.atom = createAtom(\n            // 1st parameter:\n            // - Atom's name, for debugging purposes.\n            \"Clock\",\n            // 2nd (optional) parameter:\n            // - Callback for when this atom transitions from unobserved to observed.\n            () => this.startTicking(),\n            // 3rd (optional) parameter:\n            // - Callback for when this atom transitions from observed to unobserved.\n            () => this.stopTicking()\n            // The same atom transitions between these two states multiple times.\n        )\n    }\n\n    getTime() {\n        // Let MobX know this observable data source has been used.\n        //\n        // reportObserved will return true if the atom is currently being observed\n        // by some reaction. If needed, it will also trigger the startTicking\n        // onBecomeObserved event handler.\n        if (this.atom.reportObserved()) {\n            return this.currentDateTime\n        } else {\n            // getTime was called, but not while a reaction was running, hence\n            // nobody depends on this value, and the startTicking onBecomeObserved\n            // handler won't be fired.\n            //\n            // Depending on the nature of your atom it might behave differently\n            // in such circumstances, like throwing an error, returning a default\n            // value, etc.\n            return new Date()\n        }\n    }\n\n    tick() {\n        this.currentDateTime = new Date()\n        this.atom.reportChanged() // Let MobX know that this data source has changed.\n    }\n\n    startTicking() {\n        this.tick() // Initial tick.\n        this.intervalHandler = setInterval(() => this.tick(), 1000)\n    }\n\n    stopTicking() {\n        clearInterval(this.intervalHandler)\n        this.intervalHandler = null\n    }\n}\n\nconst clock = new Clock()\n\nconst disposer = autorun(() => console.log(clock.getTime()))\n// Prints the time every second.\n\n// Stop printing. If nobody else uses the same `clock`, it will stop ticking as well.\ndisposer()\n```\n\n----------------------------------------\n\nTITLE: Intercepting Observable Changes in MobX\nDESCRIPTION: Example of using the intercept method to validate and modify changes to a theme object's backgroundColor property before they are applied. The interceptor demonstrates validating color codes, adding missing prefixes, and rejecting invalid values.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/intercept-and-observe.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = observable({\n    backgroundColor: \"#ffffff\"\n})\n\nconst disposer = intercept(theme, \"backgroundColor\", change => {\n    if (!change.newValue) {\n        // Ignore attempts to unset the background color.\n        return null\n    }\n    if (change.newValue.length === 6) {\n        // Correct missing '#' prefix.\n        change.newValue = \"#\" + change.newValue\n        return change\n    }\n    if (change.newValue.length === 7) {\n        // This must be a properly formatted color code!\n        return change\n    }\n    if (change.newValue.length > 10) {\n        // Stop intercepting future changes.\n        disposer()\n    }\n    throw new Error(\"This doesn't look like a color at all: \" + change.newValue)\n})\n```\n\n----------------------------------------\n\nTITLE: Autorun with Observable Instance in JavaScript\nDESCRIPTION: This snippet defines classes with observables and shows two autoruns, one of which can be garbage collected. It demonstrates how to dispose of the autoruns to prevent potential memory leaks when the instances are deleted.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/reactions.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Vat {\n    value = 1.2\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n}\n\nconst vat = new Vat()\n\nclass OrderLine {\n    price = 10\n    amount = 1\n    constructor() {\n        makeAutoObservable(this)\n\n        // This autorun will be GC-ed together with the current orderline\n        // instance as it only uses observables from `this`. It's not strictly\n        // necessary to dispose of it once an OrderLine instance is deleted.\n        this.disposer1 = autorun(() => {\n            doSomethingWith(this.price * this.amount)\n        })\n\n        // This autorun won't be GC-ed together with the current orderline\n        // instance, since vat keeps a reference to notify this autorun, which\n        // in turn keeps 'this' in scope.\n        this.disposer2 = autorun(() => {\n            doSomethingWith(this.price * this.amount * vat.value)\n        })\n    }\n\n    dispose() {\n        // So, to avoid subtle memory issues, always call the\n        // disposers when the reactions are no longer needed.\n        this.disposer1()\n        this.disposer2()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Observables to JavaScript Objects with toJS in MobX\nDESCRIPTION: The `toJS` function recursively converts an observable object back to a plain JavaScript object, handling observable arrays, objects, Maps, and primitive types while ignoring non-observables.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntoJS(value)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = mobx.observable({\n    x: 1\n})\n\nconst clone = mobx.toJS(obj)\n\nconsole.log(mobx.isObservableObject(obj)) // true\nconsole.log(mobx.isObservableObject(clone)) // false\n```\n\n----------------------------------------\n\nTITLE: Creating Observable State with makeAutoObservable in JavaScript\nDESCRIPTION: This snippet demonstrates how to use makeAutoObservable with a factory function to create observable state. It automatically infers annotations for properties and methods.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable } from \"mobx\"\n\nfunction createDoubler(value) {\n    return makeAutoObservable({\n        value,\n        get double() {\n            return this.value * 2\n        },\n        increment() {\n            this.value++\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MobX-React Integration using observer HOC\nDESCRIPTION: Shows the basic syntax for importing and applying the observer higher-order component to a React component. This is the fundamental pattern for connecting MobX observables to React components.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react-lite\" // Or \"mobx-react\".\n\nconst MyComponent = observer(props => ReactElement)\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Entries in MobX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an observable map and react to changes in its entries. It shows initial output as `undefined` and how changes to the map entries are tracked.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst twitterUrls = observable.map({\n    Joe: \"twitter.com/joey\"\n})\n\nautorun(() => {\n    console.log(twitterUrls.get(\"Sara\"))\n})\n\nrunInAction(() => {\n    twitterUrls.set(\"Sara\", \"twitter.com/horsejs\")\n})\n```\n\n----------------------------------------\n\nTITLE: Manipulating Collections with values, keys, and entries in MobX\nDESCRIPTION: The collection utilities `values`, `keys`, and `entries` provide methods for extracting all values, keys, and `[key, value]` pairs from observable collections.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvalues(array|object|Set|Map)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeys(array|object|Set|Map)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nentries(array|object|Set|Map)\n```\n\n----------------------------------------\n\nTITLE: Tracking Synchronous Data Access in MobX (JavaScript)\nDESCRIPTION: Demonstrates how MobX tracks observables accessed during the execution of an autorun, even when the access happens in a separate function.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction upperCaseAuthorName(author) {\n    const baseName = author.name\n    return baseName.toUpperCase()\n}\nautorun(() => {\n    console.log(upperCaseAuthorName(message.author))\n})\n\nrunInAction(() => {\n    message.author.name = \"Chesterton\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Support in MobX\nDESCRIPTION: This TypeScript snippet demonstrates how to configure MobX to disable proxy support, a requirement for JavaScript environments lacking proxy functionality. Key configuration involves setting 'useProxies' to 'never', adapting MobX behavior to use non-proxy alternatives compatible with ES5 environments. This is crucial when targeting browsers like Internet Explorer.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from \"mobx\"\n\nconfigure({\n    useProxies: \"never\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using console.log with MobX Observables (JavaScript)\nDESCRIPTION: This snippet highlights a common pitfall with `console.log` and MobX, showing how to ensure that changes can be properly detected by using a reactive approach when logging observable data.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message)\n})\n\n// Won't trigger a re-run.\nmessage.updateTitle(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Updating Collections with set, remove, has, and get in MobX\nDESCRIPTION: The collection utilities `set`, `remove`, `has`, and `get` provide methods for modifying observable collections through updates, deletions, membership checks, and value retrievals.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nset(array|object|Map, key, value)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nremove(array|object|Map, key)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhas(array|object|Map, key)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nget(array|object|Map, key)\n```\n\n----------------------------------------\n\nTITLE: Automatic Action Wrapping of Class Fields - JavaScript\nDESCRIPTION: This snippet shows how `makeAutoObservable` automatically wraps class field handlers in `action`, simplifying the structure of promise handlers within MobX stores. Dependencies: `mobx` library. Inputs: Projects data from a promise. Outputs: Updated state and project list.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeAutoObservable } from \"mobx\"\n\nclass Store {\n    githubProjects = []\n    state = \"pending\" // \"pending\", \"done\" or \"error\"\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    fetchProjects() {\n        this.githubProjects = []\n        this.state = \"pending\"\n        fetchGithubProjectsSomehow().then(this.projectsFetchSuccess, this.projectsFetchFailure)\n    }\n\n    projectsFetchSuccess = projects => {\n        const filteredProjects = somePreprocessing(projects)\n        this.githubProjects = filteredProjects\n        this.state = \"done\"\n    }\n\n    projectsFetchFailure = error => {\n        this.state = \"error\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Autoconversion Rules with Modifiers\nDESCRIPTION: Shows how to apply modifiers to properties when using observable object extensions, affecting the autoconversion behavior. The snippet highlights using shallow for lists, where items should not be deep observables.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst taskStore = observable({\n    tasks: observable.shallow([])\n})\n```\n\n----------------------------------------\n\nTITLE: Generic Function-Based Observer Component in MobX\nDESCRIPTION: A reusable observer component that uses a function prop to get the value to display. This approach allows for component reuse while maintaining efficient rendering patterns.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst GenericNameDisplayer = observer(({ getName }) => <DisplayName name={getName()} />)\n```\n\n----------------------------------------\n\nTITLE: Batching Updates with transaction in MobX\nDESCRIPTION: The `transaction` function allows for batching multiple state updates so that reactions are only triggered after all updates are complete, optimizing performance and state management.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntransaction(worker: () => any)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, transaction, autorun } from \"mobx\"\n\nconst numbers = observable([])\n\nautorun(() => console.log(numbers.length, \"numbers!\"))\n// Prints: '0 numbers!'\n\ntransaction(() => {\n    transaction(() => {\n        numbers.push(1)\n        numbers.push(2)\n    })\n    numbers.push(3)\n})\n// Prints: '3 numbers!'\n```\n\n----------------------------------------\n\nTITLE: Wrapping Promise Handlers in Action - JavaScript\nDESCRIPTION: This snippet demonstrates how to use MobX's `action` to wrap promise resolution handlers. It's essential for ensuring state updates after asynchronous operations are executed within MobX's reactive system. Dependencies: `mobx` library. Inputs: Project data from a fetch operation. Outputs: Filtered project list and state update.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { action, makeAutoObservable } from \"mobx\"\n\nclass Store {\n    githubProjects = []\n    state = \"pending\" // \"pending\", \"done\" or \"error\"\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    fetchProjects() {\n        this.githubProjects = []\n        this.state = \"pending\"\n        fetchGithubProjectsSomehow().then(\n            action(\"fetchSuccess\", projects => {\n                const filteredProjects = somePreprocessing(projects)\n                this.githubProjects = filteredProjects\n                this.state = \"done\"\n            }),\n            action(\"fetchError\", error => {\n                this.state = \"error\"\n            })\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript and Babel for MobX Decorators\nDESCRIPTION: Configuration examples for enabling modern (2022.3/Stage 3) decorators in TypeScript and Babel. For TypeScript 5.0+, the experimentalDecorators flag should be disabled, and for Babel, the proposal-decorators plugin should be enabled with the latest version.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/enabling-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n    \"compilerOptions\": {\n        \"experimentalDecorators\": false /* or just remove the flag */\n    }\n}\n\n// babel.config.json (or equivalent)\n{\n    \"plugins\": [\n        [\n            \"@babel/plugin-proposal-decorators\",\n            {\n                \"version\": \"2023-05\"\n            }\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Inject with MobX\nDESCRIPTION: This example demonstrates how to use the `inject` function in `mobx-react` to create a reactive component that depends on a MobX store. The `inject(func)` function is now reactive, meaning that transformations in the selector function will be tracked, and the component will re-render when the selected data changes. Note that in this specific case NameDisplayer doesn't have to be an `observer`, as it doesn't receive observables, but just plain data from the transformer function.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"const NameDisplayer = ({ name }) => <h1>{name}</h1>\\n\\nconst UserNameDisplayer = inject(stores => ({\\n    name: stores.userStore.name\\n}))(NameDisplayer)\\n\\nconst user = mobx.observable({\\n    name: \\\"Noa\\\"\\n})\\n\\nconst App = () => (\\n    <Provider userStore={user}>\\n        <UserNameDisplayer />\\n    </Provider>\\n)\\n\\nReactDOM.render(<App />, document.body)\"\n```\n\n----------------------------------------\n\nTITLE: Using untracked in MobX JavaScript\nDESCRIPTION: Demonstrates how to use MobX's untracked function to execute a code block that doesn't establish dependencies on observables. This snippet shows the effect when changing properties of an observable object and illustrates when using untracked prevents automatic reactions. Requires MobX library to be installed. The initial observable object has initial values assigned, an autorun function prints changes to certain properties, and uses untracked to isolate changes, avoiding triggering reactions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst person = observable({\n    firstName: \"Michel\",\n    lastName: \"Weststrate\"\n})\n\nautorun(() => {\n    console.log(\n        person.lastName,\n        \",\",\n        // This untracked block will return the person\\'s\n        // firstName without establishing a dependency.\n        untracked(() => person.firstName)\n    )\n})\n// Prints: 'Weststrate, Michel'\n\nperson.firstName = \"G.K.\"\n// Doesn\\'t print!\n\nperson.lastName = \"Chesterton\"\n// Prints: 'Chesterton, G.K.'\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Properties in Tracked Functions (JavaScript)\nDESCRIPTION: This snippet shows correctly dereferencing properties nested within an observable object inside a tracked function, allowing MobX to track changes accurately.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.author.name)\n})\n\nrunInAction(() => {\n    message.author.name = \"Sara\"\n})\nrunInAction(() => {\n    message.author = { name: \"Joe\" }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for MobX Decorators\nDESCRIPTION: Configuration example for enabling modern decorators in a Vite project. This setup configures the Babel plugin for proposal-decorators with the latest version (2023-05) within a Vite React project.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/enabling-decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n{\n    plugins: [\n        react({\n            babel: {\n                plugins: [\n                    [\n                        \"@babel/plugin-proposal-decorators\",\n                        {\n                            version: \"2023-05\"\n                        }\n                    ]\n                ]\n            }\n        })\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using External State via Props in observer Components\nDESCRIPTION: Example showing how to pass observable state to a component via props. This is a common pattern for passing MobX observables to React components.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react-lite\"\n\nconst myTimer = new Timer() // See the Timer definition above.\n\nconst TimerView = observer(({ timer }) => <span>Seconds passed: {timer.secondsPassed}</span>)\n\n// Pass myTimer as a prop.\nReactDOM.render(<TimerView timer={myTimer} />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Computed with Structural Comparison in MobX\nDESCRIPTION: Demonstrates using computed.struct for structural comparison of computed values instead of reference equality. Shows a practical example with coordinate calculations.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/computeds.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Box {\n    width = 0\n    height = 0\n\n    constructor() {\n        makeObservable(this, {\n            width: observable,\n            height: observable,\n            topRight: computed.struct\n        })\n    }\n\n    get topRight() {\n        return {\n            x: this.width,\n            y: this.height\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MobX Utilities for Dynamic Observable Objects (JavaScript)\nDESCRIPTION: Shows how to use MobX's get and set API to work with observable objects as dynamic collections in environments without Proxy support.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { get, set, observable } from \"mobx\"\n\nconst twitterUrls = observable.object({\n    Joe: \"twitter.com/joey\"\n})\n\nautorun(() => {\n    console.log(get(twitterUrls, \"Sara\")) // `get` can track not yet existing properties.\n})\n\nrunInAction(() => {\n    set(twitterUrls, { Sara: \"twitter.com/horsejs\" })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Modern Decorators with MobX\nDESCRIPTION: Example of using modern 2022.3/Stage 3 decorators with MobX. This demonstrates the proper syntax with the required 'accessor' keyword for @observable properties, along with @computed and @action decorators for class methods.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/enabling-decorators.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, computed, action } from \"mobx\"\n\nclass Todo {\n    id = Math.random()\n    @observable accessor title = \"\"\n    @observable accessor finished = false\n\n    @action\n    toggle() {\n        this.finished = !this.finished\n    }\n}\n\nclass TodoList {\n    @observable accessor todos = []\n\n    @computed\n    get unfinishedTodoCount() {\n        return this.todos.filter(todo => !todo.finished).length\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @action Decorator with Observable Objects\nDESCRIPTION: This code illustrates the appropriate method for creating actions within observable objects, replacing an older, deprecated syntax with a direct call to the 'action' function.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nobservable({ @action f: () => {} })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobservable({ f: action(() => {}) })\n```\n\n----------------------------------------\n\nTITLE: Using External State via React Context in observer Components\nDESCRIPTION: Shows how to share MobX observables across component trees using React Context. This is the recommended approach for sharing observable state across components.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {observer} from 'mobx-react-lite'\nimport {createContext, useContext} from \"react\"\n\nconst TimerContext = createContext<Timer>()\n\nconst TimerView = observer(() => {\n    // Grab the timer from the context.\n    const timer = useContext(TimerContext) // See the Timer definition above.\n    return (\n        <span>Seconds passed: {timer.secondsPassed}</span>\n    )\n})\n\nReactDOM.render(\n    <TimerContext.Provider value={new Timer()}>\n        <TimerView />\n    </TimerContext.Provider>,\n    document.body\n)\n```\n\n----------------------------------------\n\nTITLE: Using Local Observable State with useState Hook\nDESCRIPTION: Example showing how to create and use local observable state in a component using React's useState hook to store a reference to an observable class instance.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react-lite\"\nimport { useState } from \"react\"\n\nconst TimerView = observer(() => {\n    const [timer] = useState(() => new Timer()) // See the Timer definition above.\n    return <span>Seconds passed: {timer.secondsPassed}</span>\n})\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Observable Decorator Usage in MobX\nDESCRIPTION: Decorator syntax for making class properties observable. Works with both TypeScript and Babel transpilation.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@observable\n```\n\n----------------------------------------\n\nTITLE: Testing MobX with Disabled Error Boundaries\nDESCRIPTION: This JavaScript snippet details how to configure MobX to disable error boundaries, making debugging easier by allowing exceptions to propagate. It's especially useful for unit tests, as demonstrated with a Jest test case where MobX checks for negative values.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _resetGlobalState, observable, autorun, configure } from \"mobx\"\n\nconfigure({ disableErrorBoundaries: true })\n\ntest(\"Throw if age is negative\", () => {\n    expect(() => {\n        const age = observable.box(10)\n        autorun(() => {\n            if (age.get() < 0) throw new Error(\"Age should not be negative\")\n        })\n        age.set(-1)\n    }).toThrow(\"Age should not be negative\")\n})\n\nafterEach(() => {\n    _resetGlobalState()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Observer in Callback Components - JavaScript\nDESCRIPTION: Illustrates how to correctly use MobX's Observer when passing callbacks in a GridRow component to ensure that changes in observable properties are detected. It provides an example of wrapping a callback in an Observer.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst TodoView = observer(({ todo }: { todo: Todo }) => {\n    // WRONG: GridRow.onRender won't pick up changes in todo.title / todo.done\n    //        since it isn't an observer.\n    return <GridRow onRender={() => <td>{todo.title}</td>} />\n\n    // CORRECT: wrap the callback rendering in Observer to be able to detect changes.\n    return <GridRow onRender={() => <Observer>{() => <td>{todo.title}</td>}</Observer>} />\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEffect for Timer Updates in Local State\nDESCRIPTION: Demonstrates how to use the useEffect hook to set up automatic timer updates in a component with local observable state, similar to the original timer example.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n    const handle = setInterval(() => {\n        timer.increaseTimer()\n    }, 1000)\n    return () => {\n        clearInterval(handle)\n    }\n}, [timer])\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for MobX Class Properties\nDESCRIPTION: This JSON configuration shows how to set up Babel for proper handling of class properties in MobX, with different settings for Babel versions before and after 7.13.0.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Babel < 7.13.0\n    \"plugins\": [[\"@babel/plugin-proposal-class-properties\", { \"loose\": false }]],\n\n    // Babel >= 7.13.0 (https://babeljs.io/docs/en/assumptions)\n    \"plugins\": [[\"@babel/plugin-proposal-class-properties\"]],\n    \"assumptions\": {\n        \"setPublicClassFields\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using makeObservable in JavaScript Class Constructor\nDESCRIPTION: Demonstrates how to use makeObservable in a class constructor to explicitly define observable properties, actions, and computed values.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmakeObservable(this, { count: observable, tick: action, elapsedTime: computed })\n```\n\n----------------------------------------\n\nTITLE: Efficient Late Value Dereferencing in MobX\nDESCRIPTION: An example of late dereferencing where a component passes the entire object to a child component. This approach limits re-renders to only the child component when the name property changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<DisplayName person={person} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Side Rendering with MobX in React\nDESCRIPTION: Provides a setup for enabling static rendering in server-side environments where React component lifecycle methods do not run as expected. By calling `enableStaticRendering(true)`, components prevent memory leaks from lifecycle method misuse.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enableStaticRendering } from \"mobx-react\"\n\nenableStaticRendering(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring autofixAnnotation for exhaustive-make-observable\nDESCRIPTION: This JSON configuration demonstrates how to configure the autofix behavior of the `mobx/exhaustive-make-observable` rule. It sets the `autofixAnnotation` option to `false`, which means that the autofix will not add `field: true` annotations for missing fields. It allows migrating projects using `makeObservable` without overriding current usage.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"{\n    \\\"rules\\\": {\n        \\\"mobx/exhaustive-make-observable\\\": [\\\"error\\\", { \\\"autofixAnnotation\\\": false }]\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Observable State with Legacy Decorators in JavaScript\nDESCRIPTION: This snippet demonstrates how to use legacy decorators with makeObservable to create observable state in a class. It requires calling makeObservable(this) in the constructor.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/observable-state.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observable, computed, action, flow } from \"mobx\"\n\nclass Doubler {\n    @observable value\n\n    constructor(value) {\n        makeObservable(this)\n        this.value = value\n    }\n\n    @computed\n    get double() {\n        return this.value * 2\n    }\n\n    @action\n    increment() {\n        this.value++\n    }\n\n    @flow\n    *fetch() {\n        const response = yield fetch(\"/api/value\")\n        this.value = response.json()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Function-Based Components in MobX\nDESCRIPTION: Example usage of the GenericNameDisplayer component with different data sources. This approach maintains the benefits of late dereferencing while providing a reusable component interface.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = ({ person, car }) => (\n    <>\n        <GenericNameDisplayer getName={() => person.name} />\n        <GenericNameDisplayer getName={() => car.model} />\n        <GenericNameDisplayer getName={() => car.manufacturer.name} />\n    </>\n)\n```\n\n----------------------------------------\n\nTITLE: Observer Component Usage\nDESCRIPTION: This code demonstrates how to use the `Observer` component in `mobx-react` as an alternative to the `@observer` decorator. The `Observer` component marks a specific region of a React component as reactive, causing it to re-render whenever any observable data within that region changes. This allows for fine-grained control over which parts of a component should be reactive.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"const UserNameDisplayer = ({ user }) => <Observer>{() => <div>{user.name}</div>}</Observer>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring eslint-plugin-mobx (Legacy Config)\nDESCRIPTION: This configuration example demonstrates how to integrate eslint-plugin-mobx into an existing ESLint setup using the legacy configuration format (.eslintrc.js). It includes specifying the parser, adding the plugin, extending the recommended configuration, and customizing individual rule settings.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// .eslintrc.js\nmodule.exports = {\n    parser: \\\"@typescript-eslint/parser\\\",\n    // Include \\\"mobx\\\" in plugins array:\n    plugins: [\\\"mobx\\\"],\n    // Either extend our recommended configuration:\n    extends: \\\"plugin:mobx/recommended\\\",\n    // ...or specify and customize individual rules:\n    rules: {\n        // these values are the same as recommended\n        \\\"mobx/exhaustive-make-observable\\\": \\\"warn\\\",\n        \\\"mobx/unconditional-make-observable\\\": \\\"error\\\",\n        \\\"mobx/missing-make-observable\\\": \\\"error\\\",\n        \\\"mobx/missing-observer\\\": \\\"warn\\\"\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Descriptors to be Safe in MobX\nDESCRIPTION: The JavaScript snippet demonstrates how to disable MobX's descriptor safety to enable mocking and spying in tests. Configuring 'safeDescriptors' to false allows all fields to be configurable and writable, which is crucial for test environments but requires caution to avoid false positives.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconfigure({ safeDescriptors: false })\n```\n\n----------------------------------------\n\nTITLE: Defining Parent and Child Classes with MobX in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a parent and a child class using MobX, showing how to annotate observables, actions, and computed values. Dependencies include the MobX library, specifically its makeObservable, observable, computed, action, and override functions. Key parameters in constructors include the usage of makeObservable to define which fields and methods are observable or have actions. The code provides a framework for subclassing using MobX with attention to the limitations on overriding and annotating fields.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/subclassing.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { makeObservable, observable, computed, action, override } from \"mobx\"\n\nclass Parent {\n    // Annotated instance fields are NOT overridable\n    observable = 0\n    arrowAction = () => {}\n\n    // Non-annotated instance fields are overridable\n    overridableArrowAction = action(() => {})\n\n    // Annotated prototype methods/getters are overridable\n    action() {}\n    actionBound() {}\n    get computed() {}\n\n    constructor(value) {\n        makeObservable(this, {\n            observable: observable,\n            arrowAction: action\n            action: action,\n            actionBound: action.bound,\n            computed: computed,\n        })\n    }\n}\n\nclass Child extends Parent {\n    /* --- INHERITED --- */\n    // THROWS - TypeError: Cannot redefine property\n    // observable = 5\n    // arrowAction = () = {}\n\n    // OK - not annotated\n    overridableArrowAction = action(() => {})\n\n    // OK - prototype\n    action() {}\n    actionBound() {}\n    get computed() {}\n\n    /* --- NEW --- */\n    childObservable = 0;\n    childArrowAction = () => {}\n    childAction() {}\n    childActionBound() {}\n    get childComputed() {}\n\n    constructor(value) {\n        super()\n        makeObservable(this, {\n            // inherited\n            action: override,\n            actionBound: override,\n            computed: override,\n            // new\n            childObservable: observable,\n            childArrowAction: action\n            childAction: action,\n            childActionBound: action.bound,\n            childComputed: computed,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject and Observer Decorator Usage\nDESCRIPTION: This snippet shows the correct way to use `inject` and `observer` together to inject stores into a component and make it reactive to changes in those stores. The `inject` decorator is used to inject the specified stores into the component's props, and the `observer` decorator is used to make the component re-render whenever any of the injected stores change.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"@inject(\\\"store1\\\", \\\"store2\\\") @observer\\nclass MyComponent extends React.Component { \"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Not Yet Existing Observable Properties (JavaScript)\nDESCRIPTION: Demonstrates that MobX will not react to observable properties that did not exist when tracking started in environments without Proxy support.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.author.age)\n})\nextendObservable(message.author, {\n    age: 10\n})\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Decorators with MobX\nDESCRIPTION: Example of using legacy decorators with MobX. This approach requires calling makeObservable in the constructor and doesn't use the 'accessor' keyword. This pattern is supported in MobX 6 but will be removed in MobX 7.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/enabling-decorators.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, computed, action } from \"mobx\"\n\nclass Todo {\n    id = Math.random()\n    @observable title = \"\"\n    @observable finished = false\n\n    constructor() {\n        makeObservable(this)\n    }\n\n    @action\n    toggle() {\n        this.finished = !this.finished\n    }\n}\n\nclass TodoList {\n    @observable todos = []\n\n    @computed\n    get unfinishedTodoCount() {\n        return this.todos.filter(todo => !todo.finished).length\n    }\n\n    constructor() {\n        makeObservable(this)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using autorun to React to Observable Changes (JavaScript)\nDESCRIPTION: This snippet uses the `autorun` function to monitor changes to the `title` property of a `Message` instance. It illustrates reactivity by logging the title when it is updated.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.title)\n})\nmessage.updateTitle(\"Bar\")\n```\n\n----------------------------------------\n\nTITLE: Inject Function with Observer\nDESCRIPTION: This snippet shows an alternative way to use `inject` and `observer` together, where the `inject` function is used to wrap an observer component. This approach provides the same functionality as using the decorators, but with a different syntax. The order is inject first, then observer.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"const MyComponent = inject(\\\"store1\\\", \\\"store2\\\")(observer(props => rendering))\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of non-observable References in MobX (JavaScript)\nDESCRIPTION: This snippet illustrates incorrect reactivity when a non-observable reference is changed instead of the observable itself. It clarifies that MobX does not track reassignments of observable references.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.title)\n})\nmessage = new Message(\"Bar\", { name: \"Martijn\" }, [\"Felicia\", \"Marcus\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX 6 Default Behavior in JavaScript\nDESCRIPTION: Sets up MobX 6 with configuration similar to MobX 4/5 defaults, which is recommended during the migration process.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {configure} from \"mobx\";\nconfigure({ enforceActions: \"never\" });\n```\n\n----------------------------------------\n\nTITLE: Getting Dependency Tree of a Reaction (JavaScript)\nDESCRIPTION: This snippet shows how to obtain the internal dependency tree of a reaction using `getDependencyTree`. It is useful for understanding how observables are related within MobX.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDependencyTree } from \"mobx\"\n\n// Prints the dependency tree of the reaction coupled to the disposer.\nconsole.log(getDependencyTree(disposer))\n// Outputs:\n// { name: 'Autorun@2', dependencies: [ { name: 'Message@1.title' } ] }\n```\n\n----------------------------------------\n\nTITLE: Rendering Item Component with Selection in React and MobX\nDESCRIPTION: This snippet demonstrates a React component using MobX to render an Item with selection functionality. It uses the observer HOC from mobx-react-lite and calls a store method to determine if the item is selected.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/computeds-with-args.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { observer } from 'mobx-react-lite'\n\nconst Item = observer(({ item, store }) => (\n    <div className={store.isSelected(item.id) ? \"selected\" : \"\"}>\n        {item.title}\n    </div>\n))\n```\n\n----------------------------------------\n\nTITLE: Defining Stateless Component with PropTypes\nDESCRIPTION: Example showing how to define propTypes and defaultProps on a stateless React component when using the observer HOC from MobX.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst myComponent = props => {\n    // render\n}\n\nmyComponent.propTypes = {\n    name: React.PropTypes.string\n}\n\nmyComponent.defaultProps = {\n    name: \"World\"\n}\n\nexport default observer(myComponent)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for MobX 6\nDESCRIPTION: Adds the useDefineForClassFields flag to the TypeScript compiler config, which is required for proper MobX 6 functionality with class fields.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"useDefineForClassFields\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dereferencing Outside of a Tracked Function (JavaScript)\nDESCRIPTION: This code snippet demonstrates the pitfall of dereferencing an observable property outside of a tracked function, leading to loss of reactivity when the observable updates.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = message.title\nautorun(() => {\n    console.log(title)\n})\nmessage.updateMessage(\"Bar\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX Linting Options\nDESCRIPTION: This TypeScript snippet showcases configuring MobX with various linting options to ensure strict adherence to best practices by enforcing actions and requiring reactions for observables and computed values. These settings help identify improper state management before deployment.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from \"mobx\"\n\nconfigure({\n    enforceActions: \"always\",\n    computedRequiresReaction: true,\n    reactionRequiresObservable: true,\n    observableRequiresReaction: true,\n    disableErrorBoundaries: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring overrides for missing-observer\nDESCRIPTION: This JavaScript configuration snippet shows how to use the `overrides` option in ESLint to apply the `mobx/missing-observer` rule only to specific files (e.g., JSX files). This allows for more granular control over which files are subject to the rule, reducing false positives.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// .eslintrc.js\n\\\"overrides\\\": [\n  {\n    \\\"files\\\": [\\\"*.jsx\\\"],\n    \\\"rules\\\": {\n      \\\"mobx/missing-observer\\\": \\\"error\\\"\n    }\n  }\n]\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Specialized Observer Components in MobX\nDESCRIPTION: An approach with multiple specialized observer components each customized to render a different type of data. This approach becomes tedious when dealing with many different data shapes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst PersonNameDisplayer = observer(({ person }) => <DisplayName name={person.name} />)\n\nconst CarNameDisplayer = observer(({ car }) => <DisplayName name={car.model} />)\n\nconst ManufacturerNameDisplayer = observer(({ car }) => \n    <DisplayName name={car.manufacturer.name} />\n)\n```\n\n----------------------------------------\n\nTITLE: Using MobX Utilities for Non-Observable Properties (JavaScript)\nDESCRIPTION: Shows how to use MobX's get and set methods to work with non-observable properties in environments without Proxy support.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { get, set } from \"mobx\"\n\nautorun(() => {\n    console.log(get(message.author, \"age\"))\n})\nset(message.author, \"age\", 10)\n```\n\n----------------------------------------\n\nTITLE: Using makeAutoObservable in JavaScript Class Constructor\nDESCRIPTION: Demonstrates the use of makeAutoObservable in a class constructor, which automatically infers and applies appropriate MobX decorators.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmakeAutoObservable(this)\n```\n\n----------------------------------------\n\nTITLE: Isolating Global MobX State\nDESCRIPTION: Configures MobX to isolate global state when multiple MobX instances are present in the same environment. Prevents unintended state sharing between different libraries or components using MobX.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconfigure({ isolateGlobalState: true })\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Rendering in React with MobX\nDESCRIPTION: An example of inefficient component structure where a parent component renders both user data and a list of todos. This approach causes unnecessary reconciliation of all TodoView components when only the user.name changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = observer(({ todos, user }) => (\n    <div>\n        {user.name}\n        <ul>\n            {todos.map(todo => (\n                <TodoView todo={todo} key={todo.id} />\n            ))}\n        </ul>\n    </div>\n))\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Functional Component\nDESCRIPTION: This snippet shows how to define a functional component using the `observer` function. The component will automatically re-render when the observed MobX state changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst TodoView = observer(({ todo }) => <div>{todo.title}</div>)\n```\n\n----------------------------------------\n\nTITLE: Using makeObservable with Decorators in JavaScript\nDESCRIPTION: Shows how to use makeObservable in a class constructor while retaining decorators, which picks up metadata generated by the decorators.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmakeObservable(this)\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Properties with Setters in ES5 Syntax for MobX\nDESCRIPTION: Example showing how to create computed properties with getters and setters using ES5 syntax in MobX. This approach uses extendObservable to add observable properties and computed values with custom setters to an object.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Square() {\n    extendObservable(this, {\n        length: 2,\n        squared: computed(\n            function () {\n                return this.squared * this.squared\n            },\n            function (surfaceSize) {\n                this.length = Math.sqrt(surfaceSize)\n            }\n        )\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: PropTypes Configuration with MobX Inject\nDESCRIPTION: Demonstrates correct PropTypes configuration when using MobX inject HOC, showing how to properly validate injected store props\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserName = inject(\"userStore\")(({ userStore, bold }) => someRendering())\n\nUserName.propTypes = {\n    bold: PropTypes.boolean.isRequired,\n    userStore: PropTypes.object.isRequired // will always fail\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with MobX Inject\nDESCRIPTION: Demonstrates type-safe store injection using TypeScript with MobX's inject function\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IUserStore } from \"myStore\"\n\n@inject(allStores => ({\n    userStore: allStores.userStore as IUserStore\n}))\nclass MyComponent extends React.Component<{ userStore?: IUserStore; otherProp: number }, {}> {\n    /* etc */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX Instance Properties with configure in MobX\nDESCRIPTION: The `configure` function allows you to set global behavior preferences for the active MobX instance, thus modifying its operational settings.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsets global behavior settings on the active MobX instance.\n```\n\n----------------------------------------\n\nTITLE: Inefficient Early Value Dereferencing in MobX\nDESCRIPTION: An example of early dereferencing where a component passes an already accessed property (person.name) to a child component. This causes the parent component to re-render when the name changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-optimizations.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<DisplayName name={person.name} />\n```\n\n----------------------------------------\n\nTITLE: Correct PropTypes with WrappedComponent\nDESCRIPTION: Shows the proper way to define PropTypes for both injected and regular props using wrappedComponent property\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserName = inject(\"userStore\")(({ userStore, bold }) => someRendering())\n\nUserName.propTypes = {\n    bold: PropTypes.boolean.isRequired // could be defined either here ...\n}\n\nUserName.wrappedComponent.propTypes = {\n    // ... or here\n    userStore: PropTypes.object.isRequired // correct\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shallow Modifier with Observable\nDESCRIPTION: Demonstrates how to use the shallow modifier as a decorator on an observable property, ensuring collections do not automatically convert their elements into observables. No additional dependencies are required for this snippet.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass TaskStore {\n    @observable.shallow tasks = []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Reaction Error Handlers with onReactionError in MobX\nDESCRIPTION: The `onReactionError` function attaches a global error listener that triggers whenever a reaction encounters an error, aiding in debugging and monitoring reaction failures.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nonReactionError(handler: (error: any, derivation) => void)\n```\n\n----------------------------------------\n\nTITLE: Fixing UMD export names in JavaScript\nDESCRIPTION: Patch fixing the names of UMD exports for mobx-react. This addresses issue #2617 and was implemented in version 7.0.5.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// UMD export names fixed\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Map in MobX\nDESCRIPTION: Introduction of mobservable.map() method that creates an observable map similar to ES6 maps. This functionality was added in version 1.0.2.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmobservable.map()\n```\n\n----------------------------------------\n\nTITLE: Using Computed Properties with Setters in MobX Class in JavaScript\nDESCRIPTION: Example demonstrating how to define and use computed properties with setters in a MobX class using decorators. The example showcases the new feature in MobX 2.5.0 where computed values are memoized during actions, improving efficiency when computed values are accessed multiple times.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Square {\n    @observable length = 2\n    @computed get squared() {\n        return this.length * this.length\n    }\n    // mobx now supports setters for computed values\n    set squared(surfaceSize) {\n        this.length = Math.sqrt(surfaceSize)\n    }\n\n    // core changes make actions more efficient if extensively using computed values:\n    @action stuff() {\n        this.length = 3\n        console.log(this.squared) // recomputes in both 2.5 and before\n        console.log(this.squared) // no longer recomputes\n        this.length = 4\n        console.log(this.squared) // recomputes in both 2.5 and before\n        // after the action, before 2.5 squared would compute another time (if in use by a reaction), that is no longer the case\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MobX Store Injection\nDESCRIPTION: Shows how to test components with injected stores by passing stores directly as props\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider profile={profile}>\n    <Person age={\"30\"} />\n</Provider>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst profile = new Profile()\nconst mountedComponent = mount(\n   <Person age={'30'} profile={profile} />\n)\n```\n\n----------------------------------------\n\nTITLE: Example: Avoiding Unobserved Computed Values\nDESCRIPTION: The JavaScript example illustrates the impact of the 'computedRequiresReaction' setting, showcasing how MobX treats computed values differently based on their usage context, ensuring caching benefits are effectively utilized.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Clock {\n    seconds = 0\n\n    get milliseconds() {\n        console.log(\"computing\")\n        return this.seconds * 1000\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n}\n\nconst clock = new Clock()\n{\n    // This would compute twice, but is warned against by this flag.\n    console.log(clock.milliseconds)\n    console.log(clock.milliseconds)\n}\n{\n    runInAction(() => {\n        // Will compute only once.\n        console.log(clock.milliseconds)\n        console.log(clock.milliseconds)\n    })\n}\n{\n    autorun(() => {\n        // Will compute only once.\n        console.log(clock.milliseconds)\n        console.log(clock.milliseconds)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Observer with Pure Render Function\nDESCRIPTION: Example demonstrating how to use the observer HOC with a pure render function to create a reactive TodoItem component.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar TodoItem = observer(function TodoItem(props) {\n    var todo = props.todo\n    return <li>{todo.task}</li>\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up MobX Project for Development\nDESCRIPTION: This snippet shows the steps to clone the MobX repository, install dependencies, build the project, and run tests. It's essential for developers who want to contribute to the MobX codebase.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:mobxjs/mobx.git\ncd mobx\nyarn install\nyarn lerna run build\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Using disposeOnUnmount with MobX Reactions\nDESCRIPTION: Demonstrates different ways to use disposeOnUnmount for cleaning up MobX reactions when components unmount\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { disposeOnUnmount } from \"mobx-react\"\n\nclass SomeComponent extends React.Component {\n    // decorator version\n    @disposeOnUnmount\n    someReactionDisposer = reaction(...)\n\n    // decorator version with arrays\n    @disposeOnUnmount\n    someReactionDisposers = [\n        reaction(...),\n        reaction(...)\n    ]\n\n    // function version over properties\n    someReactionDisposer = disposeOnUnmount(this, reaction(...))\n\n    // function version inside methods\n    componentDidMount() {\n        // single function\n        disposeOnUnmount(this, reaction(...))\n\n        // or function array\n        disposeOnUnmount(this, [\n            reaction(...),\n            reaction(...)\n        ])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeScript Type: CreateObservableOptions\nDESCRIPTION: The TypeScript type `CreateObservableOptions` is now exported, making it accessible for developers using MobX with TypeScript. This allows for more precise type definitions and better integration with the MobX API.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe TypeScript type `CreateObservableOptions` is now exported.\n```\n\n----------------------------------------\n\nTITLE: Verifying Correct Class Field Transpilation in JavaScript\nDESCRIPTION: This code snippet is used to verify that the transpiler is correctly configured for class fields. It throws an error if the configuration is incorrect.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (!new class { x }().hasOwnProperty('x')) throw new Error('Transpiler is not configured correctly');\n```\n\n----------------------------------------\n\nTITLE: Using action.bound in MobX\nDESCRIPTION: Shows how to use action.bound to automatically bind a method to the correct instance. This ensures that 'this' is always correctly bound inside the function, making it safe to pass as callbacks.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeObservable, observable, action } from \"mobx\"\n\nclass Doubler {\n    value = 0\n\n    constructor() {\n        makeObservable(this, {\n            value: observable,\n            increment: action.bound\n        })\n    }\n\n    increment() {\n        this.value++\n        this.value++\n    }\n}\n\nconst doubler = new Doubler()\n\n// Calling increment this way is safe as it is already bound.\nsetInterval(doubler.increment, 1000)\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode Control in MobX\nDESCRIPTION: Utility function to control strict mode behavior in specific code blocks. Used to override default strict mode settings.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nextras.withStrict(boolean, block)\n```\n\n----------------------------------------\n\nTITLE: Using Non-Observable Object Properties in MobX (JavaScript)\nDESCRIPTION: Demonstrates how MobX handles non-observable properties in environments with and without Proxy support.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.author.age)\n})\n\nrunInAction(() => {\n    message.author.age = 10\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for MobX 6 in JavaScript\nDESCRIPTION: Updates Babel configuration to disable legacy loose field support for class properties, which is necessary for MobX 6 compatibility.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\"@babel/plugin-proposal-class-properties\", { \"loose\": false }]\n```\n\n----------------------------------------\n\nTITLE: Using Actions with Inheritance in MobX\nDESCRIPTION: Demonstrates how actions behave with inheritance in MobX. Only actions defined on the prototype can be properly overridden by subclasses, while instance actions using arrow functions cannot be redefined.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Parent {\n    // on instance\n    arrowAction = () => {}\n\n    // on prototype\n    action() {}\n    boundAction() {}\n\n    constructor() {\n        makeObservable(this, {\n            arrowAction: action\n            action: action,\n            boundAction: action.bound,\n        })\n    }\n}\nclass Child extends Parent {\n    // THROWS: TypeError: Cannot redefine property: arrowAction\n    arrowAction = () => {}\n\n    // OK\n    action() {}\n    boundAction() {}\n\n    constructor() {\n        super()\n        makeObservable(this, {\n            arrowAction: override,\n            action: override,\n            boundAction: override,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Scalars in MobX 2.0\nDESCRIPTION: Demonstrates the new syntax for creating and interacting with observable scalar values in MobX 2.0, showing how to use the .get() and .set() methods instead of the previous function-based approach.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst temperature = observable(27)\ntemperature.set(15) // previously: temperature(15)\ntemperature.get() // previously: temperature()\n```\n\n----------------------------------------\n\nTITLE: Importing MobX React for Observer Functionality\nDESCRIPTION: This snippet demonstrates how to import the `observer` function from the `mobx-react` package. This function is essential for making React components reactive and allows them to respond automatically to MobX state changes.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESM bundles in package.json\nDESCRIPTION: Added ESM bundles without NODE_ENV for browser environments supporting ESM. Users can choose either the production or development version from the dist folder. Implemented in version 7.0.1.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"module\": \"dist/esm.production.min.js\"\n```\n\n----------------------------------------\n\nTITLE: Flow for Asynchronous Functions on Object Fields - TypeScript\nDESCRIPTION: This snippet shows `flow` used to wrap asynchronous functions in TypeScript, highlighting an alternative to `async/await`. The class method is converted into a generator function, enabling yields. Dependencies: `mobx` library. Inputs: Asynchronous project data fetch. Outputs: The state and project list update, with type-safe handling.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/actions.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flow, makeObservable, observable } from \"mobx\"\n\nclass Store {\n    githubProjects = []\n    state = \"pending\"\n\n    constructor() {\n        makeObservable(this, {\n            githubProjects: observable,\n            state: observable,\n        })\n    }\n\n    fetchProjects = flow(function* (this: Store) {\n        this.githubProjects = []\n        this.state = \"pending\"\n        try {\n            // yield instead of await.\n            const projects = yield fetchGithubProjectsSomehow()\n            const filteredProjects = somePreprocessing(projects)\n            this.state = \"done\"\n            this.githubProjects = filteredProjects\n        } catch (error) {\n            this.state = \"error\"\n        }\n    })\n}\n\nconst store = new Store()\nconst projects = await store.fetchProjects()\n```\n\n----------------------------------------\n\nTITLE: MobX Flow-Types Support\nDESCRIPTION: Enables Flow-type annotations for MobX observable values, arrays, and computed values. This enhances type safety and integrates Flow for static type checking in MobX applications.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst observableValue: IObservableValue<number> = observable(1)\nconst observableArray: IObservableArray<number> = observable([1, 2, 3])\n\nconst sum: IComputedValue<number> = computed(() => {\n    return observableArray.reduce((a: number, b: number): number => a + b, 0)\n})\n```\n\n----------------------------------------\n\nTITLE: Running mobx-undecorate Codemod with Decorator Retention\nDESCRIPTION: Runs the mobx-undecorate codemod while retaining existing decorators, only introducing makeObservable calls where necessary.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx mobx-undecorate --keepDecorators\n```\n\n----------------------------------------\n\nTITLE: Modern Observable Source Usage After 3.x\nDESCRIPTION: Updated pattern for handling observable properties using useLocalObservable and useEffect to synchronize props with observable state\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react-lite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Measurement({ unit }) {\n    const state = useLocalObservable(() => ({\n        unit, // the initial unit\n        length: 0,\n        get lengthWithUnit() {\n            return this.unit === \"inch\" ? `${this.length / 2.54} inch` : `${this.length} cm`\n        }\n    }))\n\n    useEffect(() => {\n        // sync the unit from 'props' into the observable 'state'\n        state.unit = unit\n    }, [unit])\n\n    return <h1>{state.lengthWithUnit}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Using trace with React Components in MobX\nDESCRIPTION: Example showing how to use the trace utility in a MobX React observer component to debug why a component is re-rendering.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/analyzing-reactivity.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observer } from \"mobx-react\"\nimport { trace } from \"mobx\"\n\nconst MyComponent = observer(() => {\n    trace(true) // Enter the debugger whenever an observable value causes this component to re-run.\n    return <div>{this.props.user.name}</name>\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Stateless Component with Debug Name\nDESCRIPTION: Example showing the correct way to apply observer HOC to maintain debug names for stateless components when using Babel-transpiled JSX.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = () => <span>hi</span>\n\nexport default observer(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Reacting to Changes in Array Properties (JavaScript)\nDESCRIPTION: This snippet demonstrates tracking changes to the length of an observable array and ensures proper reactivity when accessing array properties within a tracked function.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    console.log(message.likes.length)\n})\nmessage.likes.push(\"Jennifer\")\n```\n\n----------------------------------------\n\nTITLE: Running mobx-undecorate Codemod with npx\nDESCRIPTION: Executes the mobx-undecorate codemod to automatically update MobX code to be conformant with version 6, removing decorators and adding makeObservable calls.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx mobx-undecorate\n```\n\n----------------------------------------\n\nTITLE: Using trace with autorun in MobX\nDESCRIPTION: Example showing how to use trace with the reaction argument of autorun to debug why a reaction is re-running.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/analyzing-reactivity.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmobx.autorun(\"logger\", reaction => {\n    reaction.trace()\n    console.log(user.fullname)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling TypeError in JavaScript with MobX Annotations\nDESCRIPTION: This snippet shows solutions to the TypeError occurring when trying to override annotated arrow function actions in a subclass in MobX. It provides two workarounds: moving functions to prototype scope and using action.bound, and removing the action annotation and wrapping functions in action manually. These solutions are specific remedies to the limitations of MobX's subclassing mechanism, ensuring that actions can be overridden without error by changing the method of definition.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/subclassing.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Parent {\n    // action = () => {};\n    // =>\n    action() {}\n\n    constructor() {\n        makeObservable(this, {\n            action: action.bound\n        })\n    }\n}\nclass Child {\n    action() {}\n\n    constructor() {\n        super()\n        makeObservable(this, {\n            action: override\n        })\n    }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Parent {\n    // action = () => {};\n    // =>\n    action = action(() => {})\n\n    constructor() {\n        makeObservable(this, {}) // <-- annotation removed\n    }\n}\nclass Child {\n    action = action(() => {})\n\n    constructor() {\n        super()\n        makeObservable(this, {}) // <-- annotation removed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Observables and GridRow Component - JavaScript\nDESCRIPTION: Demonstrates a TodoView wrapper around a todo observable, showcasing both incorrect and correct ways to pass data to a non-observer GridRow component. Correct approaches involve converting observables to plain values or using toJS.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass Todo {\n    title = \"test\"\n    done = true\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n}\n\nconst TodoView = observer(({ todo }: { todo: Todo }) =>\n   // WRONG: GridRow won't pick up changes in todo.title / todo.done\n   //        since it isn't an observer.\n   return <GridRow data={todo} />\n\n   // CORRECT: let `TodoView` detect relevant changes in `todo`,\n   //          and pass plain data down.\n   return <GridRow data={{\n       title: todo.title,\n       done: todo.done\n   }} />\n\n   // CORRECT: using `toJS` works as well, but being explicit is typically better.\n   return <GridRow data={toJS(todo)} />\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Observable Source Usage Before 3.x\nDESCRIPTION: Legacy pattern for converting props to observable source in MobX-React Lite, demonstrating how to handle unit conversion with observable properties\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react-lite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Measurement({ unit }) {\n    const observableProps = useAsObservableSource({ unit })\n    const state = useLocalStore(() => ({\n        length: 0,\n        get lengthWithUnit() {\n            return observableProps.unit === \"inch\"\n                ? `${this.length / 2.54} inch`\n                : `${this.length} cm`\n        }\n    }))\n\n    return <h1>{state.lengthWithUnit}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring eslint-plugin-mobx (Flat Config)\nDESCRIPTION: This configuration example shows how to integrate eslint-plugin-mobx into an ESLint setup using the flat configuration format (eslint.config.js). It uses ES modules to import the plugin, extends the recommended configuration, and specifies custom rules.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// eslint.config.js\nimport pluginMobx from \\\"eslint-plugin-mobx\\\"\\n\nexport default [\n    // ...\n\n    // Either extend our recommended configuration:\n    pluginMobx.flatConfigs.recommended,\n\n    // ...or specify and customize individual rules:\n    {\n        plugins: { mobx: pluginMobx },\n        rules: {\n            // these values are the same as recommended\n            \\\"mobx/exhaustive-make-observable\\\": \\\"warn\\\",\n            \\\"mobx/unconditional-make-observable\\\": \\\"error\\\",\n            \\\"mobx/missing-make-observable\\\": \\\"error\\\",\n            \\\"mobx/missing-observer\\\": \\\"warn\\\"\n        }\n    }\n]\"\n```\n\n----------------------------------------\n\nTITLE: Custom Observer Batching Configuration\nDESCRIPTION: Demonstrates how to configure custom batched updates using observerBatching function in mobx-react-lite\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react-lite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { observerBatching } from \"mobx-react-lite\"\nobserverBatching(customBatchedUpdates)\n```\n\n----------------------------------------\n\nTITLE: Binding Actions with action.bound\nDESCRIPTION: Illustrates the creation of bound actions in MobX using action.bound, which automatically binds the action to the correct this context. This is vital for ensuring actions possess the appropriate reference on invocation.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Ticker {\n    @observable tick = 0\n\n    @action.bound\n    increment() {\n        this.tick++ // 'this' will always be correct\n    }\n}\n\nconst ticker = new Ticker()\nsetInterval(ticker.increment, 1000)\n```\n\n----------------------------------------\n\nTITLE: Using External State via Global Variables in observer Components\nDESCRIPTION: Demonstrates accessing MobX observables directly from outside the component scope. This pattern works but may complicate unit testing due to module state.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTimer = new Timer() // See the Timer definition above.\n\n// No props, `myTimer` is directly consumed from the closure.\nconst TimerView = observer(() => <span>Seconds passed: {myTimer.secondsPassed}</span>)\n\nReactDOM.render(<TimerView />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Configuring react/display-name and componentWrapperFunctions\nDESCRIPTION: This JSON configuration shows how to configure the `react/display-name` rule from eslint-plugin-react in combination with the `componentWrapperFunctions` setting. This setup is used as a replacement for the deprecated `mobx/no-anonymous-observer` rule, enabling more precise control over anonymous observer components.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"{{\n  \\\"rules\\\": {{\n    \\\"react/display-name\\\": \\\"warn\\\"\n  }},\n  \\\"settings\\\": {{\n    \\\"componentWrapperFunctions\\\": [\n      \\\"observer\\\"\n    ]\n  }}\n}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX 6 Proxy Support in JavaScript\nDESCRIPTION: Sets up MobX 6 to not use Proxies, which is necessary for supporting Internet Explorer and certain React Native environments without proxy support.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/migrating-from-4-or-5.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from \"mobx\";\nconfigure({ useProxies: \"never\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Observables with Computed Properties in MobX\nDESCRIPTION: This snippet demonstrates the proper way to define computed properties within an observable object, outlining the necessity of using 'get' or 'computed' to avoid confusion with argumentless functions.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = observable({\n    computedProp: function () {\n        return someComputation\n    }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobservable({\n    get computedProp() {\n        return someComputation\n    }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobservable({\n    computedProp: computed(function () {\n        return someComputation\n    })\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobservable({\n    counter: 0,\n    increment: action(function () {\n        this.counter++\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Redirecting to updated document\nDESCRIPTION: This Markdown snippet provides a link to the updated version of the document. It uses a relative link to direct the user to react-optimizations.md within the same directory or project.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react/react-performance.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Please click on this link to open the updated version.](../react-optimizations.md)\n```\n\n----------------------------------------\n\nTITLE: Removing sideEffects from mobx-react-lite package.json\nDESCRIPTION: Patch change removing the 'sideEffects' section from the mobx-react-lite package.json file. This change was made in version 7.0.6.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/mobx-react/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"sideEffects\": false\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX Proxy Support in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure MobX to use the ES5 fallback implementation when Proxy support is not available in older JavaScript environments.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from \"mobx\"\n\nconfigure({ useProxies: \"never\" }) // Or \"ifavailable\".\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Observables with MobX in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use MobX to create lazy observables that fetch data only when necessary. It uses the `onBecomeObserved` and `onBecomeUnobserved` functions to add side effects to observable properties, triggering network operations only when the data is required. The key functions include `resume` and `suspend`, which manage data fetching and cleanup. Dependencies include MobX, and relevant parameters involve observable properties such as `temperature`.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/lazy-observables.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport class City {\n    location\n    temperature\n    interval\n\n    constructor(location) {\n        makeAutoObservable(this, {\n            resume: false,\n            suspend: false\n        })\n        this.location = location\n        // Only start data fetching if temperature is actually used!\n        onBecomeObserved(this, \"temperature\", this.resume)\n        onBecomeUnobserved(this, \"temperature\", this.suspend)\n    }\n\n    resume = () => {\n        log(`Resuming ${this.location}`)\n        this.interval = setInterval(() => this.fetchTemperature(), 5000)\n    }\n\n    suspend = () => {\n        log(`Suspending ${this.location}`)\n        this.temperature = undefined\n        clearInterval(this.interval)\n    }\n\n    fetchTemperature = flow(function* () {\n        // Data fetching logic...\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting the title and hiding the default title display.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/faq/migrate-to-6.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Migrating from MobX 4/5\nhide_title: true\n---\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script\nDESCRIPTION: This script asynchronously loads the Carbon Ads script, which serves advertisements on the MobX website.  The script is used for monetization of the MobX project. The `serve` and `placement` parameters are specific to the MobX project.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/backers-sponsors.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Access in MobX (JavaScript)\nDESCRIPTION: Shows that MobX does not track observables accessed asynchronously, such as within a setTimeout callback.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/understanding-reactivity.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nautorun(() => {\n    setTimeout(() => console.log(message.likes.join(\", \")), 10)\n})\n\nrunInAction(() => {\n    message.likes.push(\"Jennifer\")\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script for MobX Documentation in JavaScript\nDESCRIPTION: A script tag that loads the Carbon Ads JavaScript from an external CDN. The script is configured with specific parameters for the MobX.js.org site placement.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/intro/how-to-read.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Logo Links HTML\nDESCRIPTION: The provided HTML snippets dynamically display sponsor logos for the MobX project. Each logo links to the respective sponsor's website hosted by Open Collective. Dependencies include standard HTML support in browsers. Each snippet uses an anchor tag to link to the sponsor's site, while the img tag shows their avatar.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/backers-sponsors.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/0/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/1/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/2/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/3/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/4/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/5/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/6/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/7/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/8/avatar.svg\"></a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/mobx/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/mobx/sponsor/9/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-mobx\nDESCRIPTION: This command installs the eslint-plugin-mobx, along with eslint and @typescript-eslint/parser, as development dependencies using npm. This is a prerequisite for using the linting rules provided by the plugin.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"npm install --save-dev eslint @typescript-eslint/parser eslint-plugin-mobx\"\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script - HTML\nDESCRIPTION: Script tag for loading the Carbon Ads service with specific placement parameters for mobxjs.org.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/intro/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Example React components for missing-observer\nDESCRIPTION: This JavaScript code snippet shows various examples of React components, including class components extending from React.Component or Component, and function components with different naming patterns. These examples are used to illustrate how the `mobx/missing-observer` rule identifies React components.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/packages/eslint-plugin-mobx/README.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"class Cmp extends React.Component { }\\nclass Cmp extends Component { }\\nconst Cmp = class extends React.Component { }\\nconst Cmp = class extends Component { }\\nclass extends Component { }\\nclass extends React.Component { }\\n\nfunction Named() { }\\nconst foo = function Named() { }\\nconst Anonym = function () { };\\nconst Arrow = () => { };\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Carbon Ads Script in HTML\nDESCRIPTION: Script tag for embedding Carbon ads into the documentation page, configured with specific placement and service parameters.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/intro/concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Carbon Ads Script in HTML\nDESCRIPTION: Adds a Carbon Ads script to the page using an asynchronous JavaScript tag. The script is configured with specific parameters for the MobX.js.org placement.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/refguide/action.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script in HTML\nDESCRIPTION: Asynchronously loads the Carbon ads script with specific placement and service parameters for the MobX documentation site.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/refguide/on-become-observed.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading CarbonAds script\nDESCRIPTION: This script loads the CarbonAds advertising platform. It asynchronously fetches the script from the specified URL and inserts it into the document. The purpose is to display advertisements on the webpage.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/react/react-performance.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Carbon Ads Script in HTML\nDESCRIPTION: A script tag that loads Carbon Ads JavaScript from an external CDN to display advertisements on the MobX documentation page.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/best/store.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag for Carbon Ads Integration\nDESCRIPTION: Asynchronously loads the Carbon Ads script for displaying advertisements on the documentation page.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/faq/migrate-to-6.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script in HTML\nDESCRIPTION: Asynchronously loads the Carbon ads script with specific placement parameters for mobxjs.org\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/best/what-does-mobx-react-to.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Carbon Ads Script in HTML\nDESCRIPTION: Asynchronously loads the Carbon ads script with specific parameters for the MobX.js website placement.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/refguide/configure.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script in HTML\nDESCRIPTION: Asynchronously loads the Carbon Ads script for advertising integration on the documentation page.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/refguide/observe.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Carbon Ads Script in HTML\nDESCRIPTION: Asynchronously loads the Carbon ads script with specific parameters for the MobX.js website placement.\nSOURCE: https://github.com/mobxjs/mobx/blob/main/docs/refguide/api.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CEBD4KQ7&placement=mobxjsorg\" id=\"_carbonads_js\"></script>\n```"
  }
]