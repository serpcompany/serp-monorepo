[
  {
    "owner": "tangle-network",
    "repo": "docs",
    "content": "TITLE: Enabling and Starting Tangle Full Node Service\nDESCRIPTION: Reloads the systemd daemon to recognize the new service file, enables the `full` service to start on boot, and starts the service immediately. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable full\nsudo systemctl start full\n```\n\n----------------------------------------\n\nTITLE: Making Tangle Node Binary Executable (Shell)\nDESCRIPTION: This command uses `chmod +x` to add execute permissions to the downloaded Tangle node binary file (`tangle-default-linux-amd64`). This step is necessary to allow the operating system to run the binary file as a program.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/node-software.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x tangle-default-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using P2P Network in Rust\nDESCRIPTION: This snippet demonstrates how to create a network configuration, start a P2P network, and send/receive messages using the NetworkServiceHandle. It includes examples of both direct and gossip messaging.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/usage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse blueprint_sdk::networking::service_handle::NetworkServiceHandle;\nuse blueprint_sdk::networking::InstanceMsgPublicKey;\nfn example_usage(config: GadgetConfiguration) -> Result<(), GadgetError> {\n    let allowed_keys: HashSet<InstanceMsgPublicKey> = /* ... */;\n\n    // Create the `NetworkConfig` based on the `GadgetConfiguration`\n    let network_config = config.libp2p_network_config(\"my/protocol/1.0.0\")?;\n\n    // Start up the network, getting a handle back\n    let network_handle = config.libp2p_start_network(network_config, allowed_keys)?;\n\n    // Use the handle to receive p2p messages from the network\n    loop {\n        if let Some(msg) = network_handle.next_protocol_message() {\n            println!(\"Received message: {:?}\", msg);\n        }\n\n        tokio::time::sleep(std::time::Duration::from_millis(100)).await;\n    }\n\n    // Use the handle to send p2p messages to the network\n    let p2p_routing = MessageRouting {\n        /// Unique identifier for this message\n        message_id: 1,\n        /// The round/sequence number this message belongs to\n        round_id: 1,\n        /// The sender's information\n        sender: ParticipantInfo {\n            /// The public key of the sender\n            public_key: InstanceMsgPublicKey(/* ... */),\n            /// The address of the sender\n            address: /* ... */\n        },\n        /// Recipient information for direct messages\n        recipient: Some(ParticipantInfo {\n            public_key: InstanceMsgPublicKey(/* ... */),\n            address: /* ... */\n        }),\n    };\n    network_handle.send(p2p_routing, /* ...some bytes (Vec<u8>)... */);\n\n    // Send gossip messages to the network\n    let gossip_routing = MessageRouting {\n        message_id: 1,\n        round_id: 1,\n        sender: ParticipantInfo {\n            public_key: InstanceMsgPublicKey(/* ... */),\n            address: /* ... */\n        },\n        recipient: None,\n    };\n    network_handle.send(gossip_routing, /* ...some bytes (Vec<u8>)... */);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tangle Node Key File\nDESCRIPTION: Uses the compiled `tangle` binary to generate a new node key and save it to a specified file location. The `<BASE_PATH>` placeholder needs to be replaced with the actual base path for the node's data.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key generate-node-key \\\n--file <BASE_PATH>/node-key\n```\n\n----------------------------------------\n\nTITLE: Implementing Compute X Square Job in Rust for EigenLayer AVS\nDESCRIPTION: A job that computes the square of a number and sends a signed response to the Aggregator contract. This job showcases the core computational logic of the Incredible Squaring AVS and demonstrates interaction with EVM smart contracts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug)]\npub struct ComputeXSquareJob;\n\n#[derive(Debug)]\npub struct Provider {\n    pub provider: alloy::providers::provider::Provider,\n    pub wallet: alloy::signers::local::LocalWallet,\n}\n\npub type ComputeXSquareContext = Provider;\n\n#[async_trait::async_trait]\nimpl Job for ComputeXSquareJob {\n    type Configuration = ();\n    type Context = ComputeXSquareContext;\n    type Input = InitializeTaskInput;\n    type Output = ();\n\n    fn name() -> JobName {\n        JobName::from(\"compute_x_square\")\n    }\n\n    async fn execute(\n        &self,\n        context: &Self::Context,\n        input: Self::Input,\n    ) -> Result<Self::Output, anyhow::Error> {\n        tracing::info!(\"Executing compute x square\");\n\n        // Get task info\n        let task_id = input.task_id.clone();\n\n        let task_value = input.val.clone();\n\n        let x_squared = task_value * task_value;\n\n        tracing::info!(\n            \"Computing square for task {}. {} * {} = {}\",\n            task_id,\n            task_value,\n            task_value,\n            x_squared\n        );\n\n        // Now, create a EIP-712 typed and signed data with the response:\n        let chain_id = context.provider.get_chain_id().await?;\n\n        let signature_data = SignatureData {\n            task_id: task_id.clone(),\n            response: x_squared,\n            referenceId: U256::from(0),\n        };\n\n        // Sign message with EIP-712\n        let mut digest_input = BytesMut::new();\n        digest_input.put_u8(0x19);\n        digest_input.put_u8(0x01);\n        digest_input.extend_from_slice(&chain_id.to_be_bytes::<32>());\n        digest_input.extend_from_slice(AGGREGATOR.as_ref());\n        digest_input.extend_from_slice(\n            &hex::decode(\"x393aa8cd44d35e8a9c183920a52fd307428ee1409c7f24d1df4cec32cd59b6a\")?,\n        );\n        digest_input\n            .extend_from_slice(&Keccak256::digest(signature_data.eip712_signing_hash())[..]);\n\n        // Get the private key\n        let digest = Keccak256::digest(digest_input);\n\n        // Create a signature\n        let signature = context.wallet.sign_message(digest).await?;\n\n        tracing::info!(\"Signature: {}\", signature.to_string());\n\n        let incredible_squaring_aggregator = IncredibleSquaringAggregator::new(\n            AGGREGATOR,\n            context.provider.clone(),\n            Some(context.wallet.clone()),\n        );\n\n        // Respond to task\n        let _ = incredible_squaring_aggregator\n            .respond_to_task(task_id, x_squared, signature.0.into(), signature.1, signature.2)\n            .await?;\n\n        tracing::info!(\"Responded to task {}\", task_id);\n\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Deployed AVS Operator with cargo-tangle (Bash)\nDESCRIPTION: Executes the AVS operator using the `cargo-tangle` CLI. It requires the deployed Tangle Task Manager contract address passed via the `TASK_MANAGER_ADDRESS` environment variable and the RPC URL of the testnet specified with the `-u` flag (both obtained from the deployment step output). The `--keystore-path` points to the operator's key file. The first execution registers the operator; subsequent runs execute the main job function. Requires `cargo-tangle` and a successful deployment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-example.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTASK_MANAGER_ADDRESS=<ADDRESS_FROM_OUTPUT> cargo tangle blueprint run \\\n    -p eigenlayer \\\n    -u <URL_FROM_DEPLOYMENT_OUTPUT> \\\n    --keystore-path ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Implementing a Round-Based Job with P2P Networking in Rust\nDESCRIPTION: This snippet demonstrates how to implement a round-based job using the RoundBasedNetworkAdapter for P2P communication. It sets up party information, creates a network adapter, and runs a key generation protocol.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/usage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[job(\n    id = 0,\n    params(t),\n    event_listener(\n        listener = TangleEventListener<BlsContext, JobCalled>,\n        pre_processor = services_pre_processor,\n        post_processor = services_post_processor,\n    ),\n)]\npub async fn keygen(t: u16, context: BlsContext) -> Result<Vec<u8>, GadgetError> {\n    // Get configuration and compute deterministic values\n    let blueprint_id = context\n        .blueprint_id()\n        .map_err(|e| KeygenError::ContextError(e.to_string()))?;\n    let call_id = context\n        .current_call_id()\n        .await\n        .map_err(|e| KeygenError::ContextError(e.to_string()))?;\n    // Setup party information\n    let (i, operators) = context\n        .get_party_index_and_operators()\n        .await\n        .map_err(|e| KeygenError::ContextError(e.to_string()))?;\n    let parties: HashMap<u16, InstanceMsgPublicKey> = operators\n        .into_iter()\n        .enumerate()\n        .map(|(j, (_, ecdsa))| (j as PartyIndex, InstanceMsgPublicKey(ecdsa)))\n        .collect();\n    let n = parties.len() as u16;\n    let i = i as u16;\n    // Create a new round based network adapter\n    let network = RoundBasedNetworkAdapter::<KeygenMsg>::new(\n        context.network_backend.clone(),\n        i,\n        parties.clone(),\n        crate::context::NETWORK_PROTOCOL,\n    );\n\n    // Create a new round based party\n    let party = round_based::party::MpcParty::connected(network);\n\n    // Run the keygen protocol\n    let output = crate::keygen_state_machine::bls_keygen_protocol(party, i, t, n, call_id).await?;\n\n    Ok(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initialize Task Job in Rust for EigenLayer AVS\nDESCRIPTION: A job implementation that initializes a new task in the Incredible Squaring AVS, taking parameters from an EVM event and processing them. It demonstrates the structure of a job definition in a Tangle Blueprint.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug)]\npub struct InitializeTaskJob;\n\n#[async_trait::async_trait]\nimpl Job for InitializeTaskJob {\n    type Configuration = ();\n    type Context = ();\n    type Input = InitializeTaskInput;\n    type Output = ();\n\n    fn name() -> JobName {\n        JobName::from(\"initialize_task\")\n    }\n\n    async fn execute(\n        &self,\n        context: &Self::Context,\n        input: Self::Input,\n    ) -> Result<Self::Output, anyhow::Error> {\n        tracing::info!(\"Executing task: {}. \\n with value : {}\", input.task_id, input.val);\n\n        let task_id = input.task_id.clone();\n        let value = input.val.clone();\n\n        tracing::info!(\"Initialized task {}. with value {}\", task_id, value);\n\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Precompile Registry Interface - Solidity\nDESCRIPTION: This snippet defines the Solidity interface for interacting with the Tangle Precompile Registry. It declares methods to check if an address is a precompile (`isPrecompile`), verify if a precompile is active (`isActivePrecompile`), and update the contract bytecode of a precompile address (`updateAccountCode`). To use this interface, import it into a Solidity project and use the Tangle Mainnet or Testnet addresses as the contract instance. All functions are `external`; expected inputs are Ethereum addresses, and the interface requires deployment on the Tangle network for correct operation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/registry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface IPrecompileRegistry {\n    /// @notice Checks if the address is a precompile in the registry\n    /// @param addr Address to check\n    /// @return isPrecompile True if address is a precompile\n    function isPrecompile(address addr) external view returns (bool isPrecompile);\n\n    /// @notice Checks if precompile address is active\n    /// @param addr Precompile address\n    /// @return isActive True if precompile is active\n    function isActivePrecompile(address addr) external view returns (bool isActive);\n\n    /// @notice Updates the account code for a precompile address (dummy code)\n    /// @param addr Precompile address to update\n    /// @param code Bytecode to set at the precompile address\n    function updateAccountCode(address addr, bytes calldata code) external;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Tangle Node - Configuration Command\nDESCRIPTION: Command to initialize and start a Tangle network node with validator configuration, including base path, chain specification, node name, and telemetry settings\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tangle-default-linux-amd64\n\n--base-path <BASE_PATH> \\\n\n--chain tangle-mainnet.json\n\n--name <NODE_NAME>\n\n--validator\n\n--telemetry-url \"wss://telemetry.polkadot.io/submit/ 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tangle Full Node Systemd Service File\nDESCRIPTION: Creates a systemd service file (`/etc/systemd/system/full.service`) for running a Tangle full node. It defines the service description, user, restart policy, and the command to execute the `tangle` binary with specific parameters like base path, node name, chain, node key file, RPC CORS settings, port, and telemetry URL. Requires `sudo` privileges and placeholders like `<USERNAME>`, `<BASE_PATH>`, and `<NODE-NAME>` must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/full.service > /dev/null << EOF\n[Unit]\nDescription=Tangle Full Node\nAfter=network-online.target\nStartLimitIntervalSec=0\n\n[Service]\nUser=<USERNAME>\nRestart=always\nRestartSec=3\nExecStart=/usr/bin/tangle \\\n  --base-path <BASE_PATH> \\\n  --name <NODE-NAME> \\\n  --chain tangle-mainnet \\\n  --node-key-file \"<BASE_PATH>/node-key\" \\\n  --rpc-cors all \\\n  --port 9946 \\\n  --no-mdns \\\n  --telemetry-url \"wss://telemetry.polkadot.io/submit/ 1\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Hello World Job in Rust for Tangle Blueprint\nDESCRIPTION: This code snippet defines a simple 'Hello World' job for a Tangle Blueprint. It uses the #[job] attribute macro to define a job that takes an optional 'who' parameter and returns a greeting string.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/tangle-avs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[job(id = 1, version = 1)]\nasync fn hello_world(\n    ctx: &JobContext,\n    #[default = \"World\"] who: String,\n) -> Result<String, JobError> {\n    let greeting = format!(\"Hello, {}!\", who);\n    tracing::info!(\"Greeting: {}\", greeting);\n    Ok(greeting)\n}\n\n#[job(id = 2, version = 1)]\nasync fn echo(\n    ctx: &JobContext,\n    message: String,\n) -> Result<String, JobError> {\n    Ok(message)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Context with P2P Networking in Rust\nDESCRIPTION: This snippet shows how to create a service context that includes P2P networking capabilities. It initializes the network, sets up a local database, and prepares the context for use in jobs and background services.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/usage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// The context holds necessary information for the service to run.\n#[derive(Clone, KeystoreContext, TangleClientContext, ServicesContext)]\npub struct BlsContext {\n    #[config]\n    pub config: GadgetConfiguration,\n    #[call_id]\n    pub call_id: Option<u64>,\n    pub network_backend: NetworkServiceHandle,\n    pub store: Arc<LocalDatabase<BlsState>>,\n    pub identity: sp_core::ecdsa::Pair,\n}\n\n// Core context management implementation\nimpl BlsContext {\n    /// Creates a new service context with the provided configuration\n    ///\n    /// # Errors\n    /// Returns an error if:\n    /// - Network initialization fails\n    /// - Configuration is invalid\n    pub async fn new(config: GadgetConfiguration) -> Result<Self> {\n        let operator_keys: HashSet<InstanceMsgPublicKey> = config\n            .tangle_client()\n            .await?\n            .get_operators()\n            .await?\n            .values()\n            .map(|key| InstanceMsgPublicKey(*key))\n            .collect();\n\n        let network_config = config.libp2p_network_config(NETWORK_PROTOCOL)?;\n        let identity = network_config.instance_key_pair.0.clone();\n\n        let network_backend = config.libp2p_start_network(network_config, operator_keys)?;\n\n        let keystore_dir = PathBuf::from(&config.keystore_uri).join(\"bls.json\");\n        let store = Arc::new(LocalDatabase::open(keystore_dir));\n\n        Ok(Self {\n            config,\n            call_id: None,\n            network_backend,\n            store,\n            identity,\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ECRecoverPublicKey Contract Implementation\nDESCRIPTION: Solidity smart contract that implements the ECRecoverPublicKey precompile to recover a public key from signature components.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/non-specific.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.2 <0.9.0;\n\ncontract RecoverPublicKey {\n    function recoverPublicKey(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public view returns (bytes memory) {\n        address precompileAddress = 0x0000000000000000000000000000000000000402;\n        (bool success, bytes memory publicKey) = precompileAddress.staticcall(\n            abi.encodeWithSignature(\n                \"ECRecoverPublicKey(bytes32,uint8,bytes32,bytes32)\",\n                hash,\n                v,\n                r,\n                s\n            )\n        );\n        require(success, \"ECRecoverPublicKey failed\");\n        return publicKey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tangle Network Binary via wget (Shell Script)\nDESCRIPTION: This shell command downloads the specified Tangle Network node binary using wget from GitHub releases. It requires network access and appropriate version substitution by the user. The key parameter is <VERSION>, which should be replaced with the desired Tangle release tag. The output is the downloaded binary for the specified architecture (typically linux-amd64) in the current working directory.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget wget https://github.com/tangle-network/tangle/releases/download/<VERSION>/tangle-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-node Test Structure\nDESCRIPTION: Comprehensive example showing a complete test structure including setup, execution, and verification.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test(flavor = \"multi_thread\")]\nasync fn test_blueprint() -> color_eyre::Result<()> {\n    logging::setup_log();\n    let tmp_dir = tempfile::TempDir::new()?;\n    let harness = TangleTestHarness::setup(tmp_dir).await?;\n\n    // Initialize nodes\n    let (mut test_env, service_id, ) = harness.setup_services::<3>(false).await?;\n    test_env.initialize().await?;\n\n    // Configure nodes\n    let handles = test_env.node_handles().await;\n    for handle in handles {\n        // Add handlers\n        // ...\n    }\n\n    // Wait for network setup\n    tokio::time::sleep(std::time::Duration::from_secs(10)).await;\n    test_env.start().await?;\n\n    // Run test jobs\n    let job = harness.submit_job(service_id, JOB_ID, vec![/ args /]).await?;\n    let results = harness.wait_for_job_execution(service_id, job).await?;\n\n    // Verify results\n    assert_eq!(results.service_id, service_id);\n\n    // Additional verification...\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EVM Provider Context in Rust\nDESCRIPTION: Example implementation of a context struct that implements the EvmProviderContext trait, showing how to set up the required fields for EVM interaction.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/evm-provider-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse derive_context::context;\n\n#[derive(Debug)]\n#[context]\npub struct MyContext {\n    pub evm_rpc_endpoint: String,\n    pub evm_private_key: Option<PrivateKey>,\n    pub evm_contract_address: Option<Address>,\n    // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Solidity Interface for Tangle MultiAssetDelegation Precompile\nDESCRIPTION: This Solidity interface defines the functions available on the Tangle MultiAssetDelegation precompiled contract. It allows interaction with Tangle's native delegation features (deposit, withdraw, delegate, etc.) using standard Ethereum tools. The actual code is hosted on GitHub and referenced in the documentation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// The Solidity interface code is referenced from:\n// https://github.com/tangle-network/tangle/blob/main/precompiles/multi-asset-delegation/MultiAssetDelegation.sol\n// It should be copied and pasted into Remix or included in your project to interact with the precompile.\n```\n\n----------------------------------------\n\nTITLE: Defining EvmInstrumentedClientContext Trait in Rust\nDESCRIPTION: The trait definition for EvmInstrumentedClientContext which provides a standardized alloy-rs EVM provider for interacting with EVM-compatible blockchain networks.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/evm-provider-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait EvmInstrumentedClientContext {\n    fn provider(&self) -> EvmProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Tangle LRT Vault Deployment\nDESCRIPTION: This snippet shows example environment variables required for the deployment script (`DeployVault.s.sol`). It includes the Tangle RPC URL, the deployer's private key, the base token address, and specific Tangle operator/blueprint IDs. These variables are typically stored in a `.env` file.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nTANGLE_RPC_URL=\"https://testnet-rpc.tangle.tools\"  # or mainnet\nPRIVATE_KEY=\"your-private-key\"\nBASE_TOKEN=\"0x...\"\nOPERATOR_ID=\"1\"  # your operator ID\nBLUEPRINT_ID=\"1\"  # your blueprint ID\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment Script for Tangle Network in JavaScript\nDESCRIPTION: A deployment script (deploy.js) for Hardhat to deploy smart contracts to Tangle Network. It includes logging the deployer's address and balance, deploying the contract, and logging the deployed contract's address.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  const [deployer] = await ethers.getSigners();\n\n  console.log(\n    \"Deploying contracts with the account:\",\n    deployer.address\n  );\n\n  console.log(\"Account balance:\", (await deployer.getBalance()).toString());\n\n  const Contract = await ethers.getContractFactory(\"<YourContract>\");\n  const contract = await Contract.deploy(<YourContractParameters>);\n\n  console.log(\"Contract address:\", contract.address);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Checking Tangle Full Node Service Status\nDESCRIPTION: Checks the current status of the `full` systemd service, showing whether it's active, running, or encountered errors. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status full\n```\n\n----------------------------------------\n\nTITLE: Defining TangleLst Precompile Interface in Solidity\nDESCRIPTION: This snippet defines the Solidity interface for the TangleLst precompiled contract and demonstrates how to initialize references to it. The interface exposes methods for pool joining, bonding, unbonding, withdrawals, pool creation and configuration, nomination, and metadata management. Dependencies include Solidity version >=0.8.3 and access to the precompile address (0x0000000000000000000000000000000000000809); inputs and outputs are primarily uint256, uint8, and bytes32 types representing pool and user properties, with all methods returning a uint8 status code (e.g., 0 for success). Implementers should note interface is for calling the precompile from other Solidity contracts and does not include implementation logic.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst_developers/lst_precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.3;\\n\\n/// @dev The TangleLst contract's address.\\naddress constant TANGLE_LST = 0x0000000000000000000000000000000000000809;\\n\\n/// @dev The TangleLst contract's instance.\\nTangleLst constant TANGLE_LST_CONTRACT = TangleLst(TANGLE_LST);\\n\\n/// @author The Tangle Team\\n/// @title Pallet TangleLst Interface\\n/// @title The interface through which solidity contracts will interact with the TangleLst pallet\\n/// @custom:address 0x0000000000000000000000000000000000000809\\ninterface TangleLst {\\n    /// @dev Join a pool with a specified amount.\\n    /// @param amount The amount to join with.\\n    /// @param poolId The ID of the pool to join.\\n    function join(uint256 amount, uint256 poolId) external returns (uint8);\\n\\n    /// @dev Bond extra to a pool.\\n    /// @param poolId The ID of the pool.\\n    /// @param extraType The type of extra bond (0 for FreeBalance, 1 for Rewards).\\n    /// @param extra The amount of extra bond.\\n    function bondExtra(uint256 poolId, uint8 extraType, uint256 extra) external returns (uint8);\\n\\n    /// @dev Unbond from a pool.\\n    /// @param memberAccount The account of the member.\\n    /// @param poolId The ID of the pool.\\n    /// @param unbondingPoints The amount of unbonding points.\\n    function unbond(bytes32 memberAccount, uint256 poolId, uint256 unbondingPoints) external returns (uint8);\\n\\n    /// @dev Withdraw unbonded funds from a pool.\\n    /// @param poolId The ID of the pool.\\n    /// @param numSlashingSpans The number of slashing spans.\\n    function poolWithdrawUnbonded(uint256 poolId, uint32 numSlashingSpans) external returns (uint8);\\n\\n    /// @dev Withdraw unbonded funds for a member.\\n    /// @param memberAccount The account of the member.\\n    /// @param poolId The ID of the pool.\\n    /// @param numSlashingSpans The number of slashing spans.\\n    function withdrawUnbonded(bytes32 memberAccount, uint256 poolId, uint32 numSlashingSpans) external returns (uint8);\\n\\n    /// @dev Create a new pool.\\n    /// @param amount The initial amount to create the pool with.\\n    /// @param root The root account of the pool.\\n    /// @param nominator The nominator account of the pool.\\n    /// @param bouncer The bouncer account of the pool.\\n    function create(uint256 amount, bytes32 root, bytes32 nominator, bytes32 bouncer) external returns (uint8);\\n\\n    /// @dev Create a new pool with a specific pool ID.\\n    /// @param amount The initial amount to create the pool with.\\n    /// @param root The root account of the pool.\\n    /// @param nominator The nominator account of the pool.\\n    /// @param bouncer The bouncer account of the pool.\\n    /// @param poolId The desired pool ID.\\n    function createWithPoolId(uint256 amount, bytes32 root, bytes32 nominator, bytes32 bouncer, uint256 poolId) external returns (uint8);\\n\\n    /// @dev Nominate validators for a pool.\\n    /// @param poolId The ID of the pool.\\n    /// @param validators An array of validator accounts to nominate.\\n    function nominate(uint256 poolId, bytes32[] calldata validators) external returns (uint8);\\n\\n    /// @dev Set the state of a pool.\\n    /// @param poolId The ID of the pool.\\n    /// @param state The new state (0 for Open, 1 for Blocked, 2 for Destroying).\\n    function setState(uint256 poolId, uint8 state) external returns (uint8);\\n\\n    /// @dev Set metadata for a pool.\\n    /// @param poolId The ID of the pool.\\n    /// @param metadata The metadata to set.\\n    function setMetadata(uint256 poolId, bytes calldata metadata) external returns (uint8);\\n\\n    /// @dev Set global configurations (only callable by root).\\n    /// @param minJoinBond The minimum bond required to join a pool (0 for no change).\\n    /// @param minCreateBond The minimum bond required to create a pool (0 for no change).\\n    /// @param maxPools The maximum number of pools (0 for no change).\\n    /// @param globalMaxCommission The global maximum commission percentage (0 for no change).\\n    function setConfigs(uint256 minJoinBond, uint256 minCreateBond, uint32 maxPools, uint32 globalMaxCommission) external returns (uint8);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating EIP-712 Permit Signature via MetaMask and Ethers.js in JavaScript\nDESCRIPTION: Demonstrates how to sign an EIP-712 permit message in a browser using MetaMask and Ethers.js. This asynchronous function uses MetaMask's provider to request accounts, builds the EIP-712 Call Permit structure with all required fields, and requests a user signature. Prerequisites include a browser with MetaMask installed and Ethers.js available, and knowledge of the call data to encode. Inputs are contract addresses, call data, user parameters, and the output is a signature (hex string) suitable for dispatch by the Call Permit Precompile.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/call-permit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example snippet to sign the data via MetaMask in the browser\\n\\n// IMPORTANT: This is a simplified code snippet for demonstration only.\\nasync function main() {\\n  // Request accounts from MetaMask\\n  const accounts = await window.ethereum.request({ method: \\\"eth_requestAccounts\\\" });\\n  const from = accounts[0];\\n\\n  // Replace these as appropriate\\n  const to = \\\"0x1234567890123456789012345678901234567890\\\";\\n  const value = 0; // Setting to 0 for this example\\n  const data = \\\"0x4ed3885e...\\\" // (truncated) your data from above\\n  const gaslimit = 100000;\\n  const nonce = 0; // The first time you do this, it might be 0\\n  const deadline = Math.floor(Date.now() / 1000) + 600; // 10 mins from \\\"now\\\"\\n\\n  const typedData = JSON.stringify({\\n    types: {\\n      EIP712Domain: [\\n        { name: \\\"name\\\", type: \\\"string\\\" },\\n        { name: \\\"version\\\", type: \\\"string\\\" },\\n        { name: \\\"chainId\\\", type: \\\"uint256\\\" },\\n        { name: \\\"verifyingContract\\\", type: \\\"address\\\" },\\n      ],\\n      CallPermit: [\\n        { name: \\\"from\\\", type: \\\"address\\\" },\\n        { name: \\\"to\\\", type: \\\"address\\\" },\\n        { name: \\\"value\\\", type: \\\"uint256\\\" },\\n        { name: \\\"data\\\", type: \\\"bytes\\\" },\\n        { name: \\\"gaslimit\\\", type: \\\"uint64\\\" },\\n        { name: \\\"nonce\\\", type: \\\"uint256\\\" },\\n        { name: \\\"deadline\\\", type: \\\"uint256\\\" },\\n      ],\\n    },\\n    primaryType: \\\"CallPermit\\\",\\n    domain: {\\n      name: \\\"Call Permit Precompile\\\",\\n      version: \\\"1\\\",\\n      chainId: 3799, // Tangle Testnet\\n      verifyingContract: \\\"0x0000000000000000000000000000000000000805\\\",\\n    },\\n    message: {\\n      from,\\n      to,\\n      value,\\n      data,\\n      gaslimit,\\n      nonce,\\n      deadline,\\n    },\\n  });\\n\\n  // Request the user to sign typed data\\n  const signature = await window.ethereum.request({\\n    method: \\\"eth_signTypedData_v4\\\",\\n    params: [from, typedData],\\n  });\\n\\n  console.log(\\\"Signature:\\\", signature);\\n}\\n\\nmain().catch(console.error);\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider for EigenLayer AVS in Rust\nDESCRIPTION: Creates an HTTP provider with a wallet enabled for transacting on the Ethereum network. This setup is essential for the Blueprint Runner to interact with EVM smart contracts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// Setup the HTTP provider\nlet http_provider_url = \"http://127.0.0.1:8545\";\nlet provider = alloy::providers::provider::Provider::new_http(alloy::providers::provider::Http::new(\n    http_provider_url,\n));\n```\n\n----------------------------------------\n\nTITLE: Batch Transferring Tokens with MultiSend in Solidity\nDESCRIPTION: Implements a smart contract for batch sending identical tokens (TNT) to multiple recipients within a single transaction, most useful for airdrops and mass payouts. Requires a Solidity-compatible EVM chain and enough ETH to cover total disbursement. Key parameters are the recipients and amounts arrays, which must match in length; the contract ensures funds are sufficient, handles all transfers, and refunds any excess ETH to the caller. Throws on mismatched array lengths, insufficient funds, or failed sub-transfers.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/useful-contracts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract MultiSend {\\n    constructor() {}\\n\\n    function multiSend(address[] calldata recipients, uint256[] calldata amounts) external payable {\\n        require(recipients.length == amounts.length, \\\"Arrays must be same length\\\");\\n        require(recipients.length > 0, \\\"Must provide at least one recipient\\\");\\n\\n        uint256 total = 0;\\n        for(uint256 i = 0; i < amounts.length; i++) {\\n            total += amounts[i];\\n        }\\n        require(msg.value >= total, \\\"Insufficient funds sent\\\");\\n\\n        for(uint256 i = 0; i < recipients.length; i++) {\\n            (bool success,) = recipients[i].call{value: amounts[i]}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n\\n        // Return excess ETH if any\\n        uint256 remaining = msg.value - total;\\n        if (remaining > 0) {\\n            (bool success,) = msg.sender.call{value: remaining}(\\\"\\\");\\n            require(success, \\\"Failed to return remaining ETH\\\");\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tangle LST Precompile in Solidity\nDESCRIPTION: This snippet illustrates how to import the LSTPrecompile interface into a Solidity project, a prerequisite for interacting with Tangle's liquid staking precompile contract. The import assumes that the interface definition file, 'LSTPrecompile.sol', is available in the project. Developers must ensure correct project configuration and dependency management so that the Solidity compiler can resolve the import path.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst_developers/intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nimport \\\"LSTPrecompile.sol\\\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Service Autostart with systemd in Shell\nDESCRIPTION: Executes `sudo systemctl enable prometheus.service` to configure the Prometheus service to start automatically upon system boot. This creates the necessary symbolic links within systemd's configuration directories. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable prometheus.service\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Contracts in Rust using Alloy's sol! macro\nDESCRIPTION: Defines Solidity contract interfaces in Rust using Alloy's sol! macro. This enables type-safe interaction with EVM smart contracts from Rust code in the Incredible Squaring AVS.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Contracts\npub static AGGREGATOR: Lazy<Address> =\n    Lazy::new(|| Address::parse_checksummed(\"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", None).unwrap());\n\nsol! {\n    interface IncredibleSquaringAggregator {\n        function respondToTask(uint256 taskId, uint256 result, bytes32 r, bytes32 vs) external;\n    }\n\n    interface IncredibleSquaringTaskManager {\n        event TaskInitialized(uint256 taskId, uint256 val);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pricing Service and Message Contracts - Protocol Buffers - protobuf\nDESCRIPTION: Defines the gRPC service for requesting signed blueprint price quotes and the associated types for communicating requirements and responses between clients and operators. This Protocol Buffer schema includes service methods, enums, messages for assets, security, resources, and quote details—all of which must be adhered to by API providers (operators) and consumers (clients) for correct and type-safe integration. Inputs include blueprint ID, TTL, PoW, and resource/security details; outputs include signed quotes tied to the operator and the requested properties. Dependencies: gRPC, Protocol Buffers v3, and the Equix Equihash PoW implementation on the Operator side.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/pricing-engine.mdx#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// The pricing service definition\\nservice Pricing {\\n  // Retrieves a signed price quote for a given blueprint\\n  rpc GetPrice (GetPriceRequest) returns (GetPriceResponse);\\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n// The pricing service definition\\nservice PricingEngine {\\n  // Retrieves a signed price quote for a given blueprint\\n  rpc GetPrice (GetPriceRequest) returns (GetPriceResponse);\\n}\\n\\n// Asset type enumeration\\nenum AssetType {\\n  CUSTOM = 0;\\n  ERC20 = 1;\\n}\\n\\n// Asset type definition\\nmessage Asset {\\n  oneof asset_type {\\n    // Custom asset with a numeric identifier\\n    uint64 custom = 1;\\n    // ERC20 token with an H160 address\\n    bytes erc20 = 2;\\n  }\\n}\\n\\n// Security requirements for an asset\\nmessage AssetSecurityRequirements {\\n  // The asset type\\n  Asset asset = 1;\\n  // Minimum exposure percentage (0-100)\\n  uint32 minimum_exposure_percent = 2;\\n  // Maximum exposure percentage (0-100)\\n  uint32 maximum_exposure_percent = 3;\\n}\\n\\n// Security commitment for an asset\\nmessage AssetSecurityCommitment {\\n  // The asset type\\n  Asset asset = 1;\\n  // Committed exposure percentage (0-100)\\n  uint32 exposure_percent = 2;\\n}\\n\\n// Resource requirement for a specific resource type\\nmessage ResourceRequirement {\\n  // Resource kind (CPU, Memory, GPU, etc.)\\n  string kind = 1;\\n  // Quantity required\\n  uint64 count = 2;\\n}\\n\\n// Pricing for a specific resource type\\nmessage ResourcePricing {\\n  // Resource kind (CPU, Memory, GPU, etc.)\\n  string kind = 1;\\n  // Quantity of the resource\\n  uint64 count = 2;\\n  // Price per unit in USD with decimal precision\\n  double price_per_unit_rate = 3;\\n}\\n\\n// Request message for GetPrice RPC\\nmessage GetPriceRequest {\\n  // The blueprint ID\\n  uint64 blueprint_id = 1;\\n  // Time-to-live for service in blocks\\n  uint64 ttl_blocks = 2;\\n  // Proof of work to prevent DDOS\\n  bytes proof_of_work = 3;\\n  // Optional resource recommendations\\n  repeated ResourceRequirement resource_requirements = 4;\\n  // Security requirements for assets\\n  AssetSecurityRequirements security_requirements = 5;\\n}\\n\\n// Response message for GetPrice RPC\\nmessage GetPriceResponse {\\n  // The quote details\\n  QuoteDetails quote_details = 1;\\n  // Signature of the hash of the body\\n  bytes signature = 2;\\n  // Operator ID\\n  bytes operator_id = 3;\\n  // Proof of work response\\n  bytes proof_of_work = 4;\\n}\\n\\n// The detailed quote information\\nmessage QuoteDetails {\\n  // The blueprint ID\\n  uint64 blueprint_id = 1;\\n  // Time-to-live for service in blocks\\n  uint64 ttl_blocks = 2;\\n  // Total cost in USD with decimal precision\\n  double total_cost_rate = 3;\\n  // Timestamp when quote was generated\\n  uint64 timestamp = 4;\\n  // Expiry timestamp\\n  uint64 expiry = 5;\\n  // Resource pricing details\\n  repeated ResourcePricing resources = 6;\\n  // Security commitments for assets\\n  AssetSecurityCommitment security_commitments = 7;\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Tangle Validator Node Startup Output\nDESCRIPTION: Shows sample log output from a Tangle validator node upon startup. It includes node version, chain specification, node name, role, database location, runtime version, and initialization messages like loading authority sets.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n2023-03-22 14:55:51 Tangle Standalone Node\n2023-03-22 14:55:51 ✌️  version 0.1.15-54624e3-aarch64-macos\n2023-03-22 14:55:51 ❤️  by Webb Technologies Inc., 2017-2023\n2023-03-22 14:55:51 📋 Chain specification: Tangle Mainnet\n2023-03-22 14:55:51 🏷  Node name: cooing-morning-2891\n2023-03-22 14:55:51 👤 Role: FULL\n2023-03-22 14:55:51 💾 Database: RocksDb at /Users/local/Library/Application Support/tangle/chains/local_testnet/db/full\n2023-03-22 14:55:51 ⛓  Native runtime: tangle-115 (tangle-1.tx1.au1)\n2023-03-22 14:55:51 Bn254 x5 w3 params\n2023-03-22 14:55:51 [0] 💸 generated 5 npos voters, 5 from validators and 0 nominators\n2023-03-22 14:55:51 [0] 💸 generated 5 npos targets\n2023-03-22 14:55:51 [0] 💸 generated 5 npos voters, 5 from validators and 0 nominators\n2023-03-22 14:55:51 [0] 💸 generated 5 npos targets\n2023-03-22 14:55:51 [0] 💸 new validator set of size 5 has been processed for era 1\n2023-03-22 14:55:52 🔨 Initializing Genesis block/state (state: 0xfd16…aefd, header-hash: 0x7c05…a27d)\n2023-03-22 14:55:52 👴 Loading GRANDPA authority set from genesis on what appears to be first startup.\n2023-03-22 14:55:53 Using default protocol ID \"sup\" because none is configured in the chain specs\n```\n\n----------------------------------------\n\nTITLE: Nominating Validators via Polkadot-JS CLI (Shell)\nDESCRIPTION: This command uses the `polkadot-js-api` CLI tool to execute the `staking.nominate` transaction, nominating selected validators. It requires the nominator account's mnemonic seed (`MNEMONIC_PHRASE`), a JSON array string containing the addresses of the validators to nominate (`'[\"VALIDATOR_ADDRESS_1\",\"VALIDATOR_ADDRESS_2\"]'`), and the specific WebSocket endpoint for the Tangle Network (`wss:\\\\rpc.tangle.tools`). Up to 24 validators can be nominated.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/nominator.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npolkadot-js-api --seed \"MNEMONIC_PHRASE\" tx.staking.nominate '[\"VALIDATOR_ADDRESS_1\",\"VALIDATOR_ADDRESS_2\"]' --ws wss:\\\\rpc.tangle.tools\n```\n\n----------------------------------------\n\nTITLE: Defining Tangle Restaking Deposit Function Interface in Solidity\nDESCRIPTION: This snippet shows the function signature for the `deposit` function within the Tangle MultiAssetDelegation precompile interface. This function is used to deposit a specified `amount` of tokens into the precompile, attributing the deposited value to the provided `to` address within the restaking system. It's declared as `external`, meaning it can be called from other contracts and externally owned accounts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake_developers/integration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit(uint256 amount, address to) external;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Tangle Network in JavaScript\nDESCRIPTION: Hardhat configuration file (hardhat.config.js) setup for deploying to Tangle Network. It includes network-specific settings such as RPC URL, private key for deployment, chain ID, and gas price.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-waffle\");\n\nmodule.exports = {\n  solidity: \"0.8.0\",\n  networks: {\n    tangle: {\n      url: \"<Tangle RPC URL>\",\n      accounts: [`0x${<PRIVATE_KEY>}`],\n      chainId: <Tangle ChainId>,\n      gasPrice: 10000000000,\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Eigenlayer AVS Contracts\nDESCRIPTION: Command to deploy AVS contracts using the Eigenlayer CLI. It offers options for specifying RPC URL, contracts path, deployment order, network, and keystore path.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Bonding Tokens via Polkadot-JS CLI (Shell)\nDESCRIPTION: This command uses the installed `polkadot-js-api` CLI tool to execute the `staking.bond` transaction. It bonds a specified amount of tokens from a stash account to prepare for nominating. Key parameters include the account's mnemonic seed (`MNEMONIC_PHRASE`), the stash account address (`STASH_ADDRESS`), the number of tokens to bond (`NUMBER_OF_TOKENS`), the destination for rewards (`REWARD_DESTINATION`), and the network's WebSocket endpoint (`WEBSOCKET_ENDPOINT`).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/nominator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npolkadot-js-api --seed \"MNEMONIC_PHRASE\" tx.staking.bond STASH_ADDRESS NUMBER_OF_TOKENS REWARD_DESTINATION --ws WEBSOCKET_ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator Babe Key (Sr25519)\nDESCRIPTION: Inserts an Sr25519 Babe key (`babe`) into the node's keystore. This key is used for block production. It requires specifying the base path, chain, scheme (Sr25519), and the SURI. The `<BASE_PATH>` and `<\"12-MNEMONIC-PHRASE\">` placeholders must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key insert --base-path <BASE_PATH> \\\n--chain tangle-mainnet \\\n--scheme Sr25519 \\\n--suri <\"12-MNEMONIC-PHRASE\"> \\\n--key-type babe\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Runner Entry Point in Rust\nDESCRIPTION: This code snippet shows the main entry point for a Tangle Blueprint Runner. It sets up the environment, initializes clients and components, and starts the Blueprint Runner with configured producers, consumers, and background services.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/tangle-avs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    dotenvy::dotenv().ok();\n    let config = Config::load()?;\n    tracing_subscriber::fmt::init();\n\n    let eth_client = Arc::new(Provider::<Http>::try_from(config.rpc_endpoint.clone())?)\n        as Arc<dyn EthMiddleware>;\n\n    let tangle_client = Arc::new(Provider::<Http>::try_from(config.rpc_endpoint)?) as Arc<dyn TangleMiddleware>;\n\n    let router = Router::builder()\n        .job(hello_world)\n        .job(echo)\n        .build();\n\n    let producers = vec![\n        Arc::new(EthEventsProducer::new(\n            eth_client.clone(),\n            tangle_client.clone(),\n            config.registry_address,\n        )) as Arc<dyn Producer>,\n        Arc::new(HttpJsonRpcProducer::default()) as Arc<dyn Producer>,\n    ];\n\n    let consumers = vec![\n        Arc::new(EthEventsConsumer::new(\n            eth_client.clone(),\n            tangle_client.clone(),\n            config.registry_address,\n        )) as Arc<dyn Consumer>,\n        Arc::new(HttpJsonRpcConsumer::default()) as Arc<dyn Consumer>,\n    ];\n\n    let background_services: Vec<Arc<dyn Service>> = vec![];\n\n    let runner = BlueprintRunner::new(\n        router,\n        producers,\n        consumers,\n        background_services,\n        config.clone(),\n    );\n\n    runner.run().await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SetMessage Example Contract in Solidity\nDESCRIPTION: Defines a minimal Solidity contract storing a string. It provides a public setter and getter for a message. The contract is used as the target for call permit dispatch in Tangle, requires no external dependencies beyond Solidity 0.8.7. Inputs are strings to set, outputs the last-set string via the getter, and there are no complex requirements or constraints.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/call-permit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ncontract SetMessage {\\n    string storedMessage;\\n\\n    function set(string calldata x) public {\\n        storedMessage = x;\\n    }\\n\\n    function get() public view returns (string memory) {\\n        return storedMessage;\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Running Blueprint Instance\nDESCRIPTION: Command to run a Blueprint with specified configuration including protocol settings and network parameters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint run --protocol tangle --rpc-url <url> --keystore-path <path> --settings-file <file>\n```\n\n----------------------------------------\n\nTITLE: Running Eigenlayer AVS Service\nDESCRIPTION: Command to run an AVS service using the Eigenlayer CLI. It provides options for specifying protocol, RPC URL, keystore path, binary path, network, data directory, bootnodes, and settings file.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint run [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Defining Anvil Development Private Keys (Rust)\nDESCRIPTION: Declares a public constant array `ANVIL_PRIVATE_KEYS` in Rust, containing ten hexadecimal private keys. These keys are likely intended for use with the Anvil local development blockchain, providing deterministic addresses for testing and development purposes. Includes keys specifically mentioned for aggregator and task generator roles.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub const ANVIL_PRIVATE_KEYS: [&str; 10] = [\n    \"ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\",\n    \"59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\",\n    \"5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\",\n    \"7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\",\n    \"47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\",\n    \"8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba\",\n    \"92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e\",\n    \"4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356\",\n    \"dbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97\",\n    \"2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6\",\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Monitoring Stack\nDESCRIPTION: Command to start the monitoring stack using Docker Compose in detached mode. This launches all configured monitoring services including Prometheus, Grafana, Alert Manager, Loki, and Promtail.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd monitoring\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Contexts for EigenLayer AVS Jobs in Rust\nDESCRIPTION: Creates contexts that will be used by the jobs in the Incredible Squaring AVS. The contexts provide access to necessary resources and configurations for job execution.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Setup contexts\nlet wallet = LocalWallet::from_str(DEVNET_PRIVATE_KEY)?;\nlet compute_x_square_context = Provider {\n    provider: provider.clone(),\n    wallet,\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Tangle Network Blueprint Runner\nDESCRIPTION: Final step to build and run the Blueprint Runner. This code snippet starts the runner and returns a result indicating success or failure.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet result = BlueprintRunner::builder(tangle_config, env)\n    // ... configuration ...\n    .run()\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Consumer Setup in Rust\nDESCRIPTION: Demonstrates how to set up and configure a basic TangleConsumer in a Blueprint Runner, including environment setup, signer configuration, and runner initialization.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/consumers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet env = BlueprintEnvironment::load()?;\nlet sr25519_signer = env.keystore().first_local::<SpSr25519>()?;\nlet sr25519_pair = env.keystore().get_secret::<SpSr25519>(&sr25519_signer)?;\nlet sr25519_signer = TanglePairSigner::new(sr25519_pair.0);\n\nlet tangle_client = env.tangle_client().await?;\nlet tangle_producer = TangleProducer::finalized_blocks(tangle_client.rpc_client.clone()).await?;\nlet tangle_consumer = TangleConsumer::new(tangle_client.rpc_client.clone(), sr25519_signer);\n\nBlueprintRunner::builder(tangle_config, env)\n    .router(router)\n    .producer(tangle_producer)\n    .consumer(tangle_consumer)\n    .run()\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Structuring a Test Contract for Tangle LRT Vault using Solidity\nDESCRIPTION: This Solidity code demonstrates the basic structure of a test contract using the Foundry testing framework (`forge-std/Test.sol`). It includes a `setUp` function to deploy the `TangleLiquidRestakingVault` and a `testDeposit` function to verify the deposit functionality. It requires the `TangleLiquidRestakingVault.sol` contract and uses Foundry's cheatcodes (`deal`, `assertEq`).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"forge-std/Test.sol\";\nimport \"../src/TangleLiquidRestakingVault.sol\";\n\ncontract TangleLiquidRestakingVaultTest is Test {\n    TangleLiquidRestakingVault vault;\n    address baseToken;\n    bytes32 operator;\n    uint64[] blueprintSelection;\n\n    function setUp() public {\n        // Setup test environment\n        baseToken = address(new ERC20(\"Test Token\", \"TEST\"));\n        operator = bytes32(uint256(1));\n        blueprintSelection = new uint64[](1);\n        blueprintSelection[0] = 1;\n\n        // Deploy vault\n        vault = new TangleLiquidRestakingVault(\n            baseToken,\n            operator,\n            blueprintSelection,\n            MULTI_ASSET_DELEGATION_CONTRACT,\n            \"Liquid Restaked Test\",\n            \"lrTEST\"\n        );\n    }\n\n    function testDeposit() public {\n        uint256 amount = 1000e18;\n        deal(baseToken, address(this), amount);\n\n        ERC20(baseToken).approve(address(vault), amount);\n        vault.deposit(amount, address(this));\n\n        assertEq(vault.balanceOf(address(this)), amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tangle MultiAssetDelegation Precompile Address\nDESCRIPTION: The fixed blockchain address for the Tangle MultiAssetDelegation precompiled contract on both Tangle Mainnet and Testnet. This address is used in Ethereum tools (like Remix) to load and interact with the contract's interface.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x0000000000000000000000000000000000000822\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-tangle CLI via Git (Shell)\nDESCRIPTION: Installs the `cargo-tangle` command-line interface tool directly from the Tangle Network's blueprint GitHub repository. The `--force` flag ensures it overwrites any existing installation. This tool is a prerequisite for creating and managing Tangle AVS projects.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install cargo-tangle --git https://github.com/tangle-network/blueprint --force\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator Role Key (Ecdsa)\nDESCRIPTION: Inserts an Ecdsa Role key (`role`) into the node's keystore. Requires base path, chain, scheme (Ecdsa), and SURI. The `<BASE_PATH>` and `<\"12-MNEMONIC-PHRASE\">` placeholders must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key insert --base-path <BASE_PATH> \\\n--chain tangle-mainnet \\\n--scheme Ecdsa \\\n--suri <\"12-MNEMONIC-PHRASE\"> \\\n--key-type role\n```\n\n----------------------------------------\n\nTITLE: Generating Account Keys\nDESCRIPTION: Docker command to generate Sr25519 account keys for a validator node.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -it --platform linux/amd64 --network=\"host\"  \\\nghcr.io/tangle-network/tangle/tangle:main \\\n     key insert --base-path /var/lib/tangle/ \\\n    --chain tangle-mainnet \\\n    --scheme Sr25519 \\\n    --key-type acco\n```\n\n----------------------------------------\n\nTITLE: Accessing RPC Methods Format\nDESCRIPTION: Demonstrates the format for accessing RPC methods through the Polkadot.js API interface, including both standard and Ethereum-specific endpoints.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/json-rpc-endpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.<module>.<method>(...params[])\n```\n\nLANGUAGE: typescript\nCODE:\n```\npolkadotApi.rpc.eth.*\n```\n\n----------------------------------------\n\nTITLE: EVM Consumer Structure Definition\nDESCRIPTION: Defines the structure of an EVMConsumer with its associated types and implementation details for handling EVM-specific transactions.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/consumers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub struct EvmConsumer<Client, Signer> {\n    client: Client,\n    signer: Signer,\n    submission_strategy: Arc<SubmissionStrategy>,\n    call_filter: Option<Box<dyn CallFilter>>,\n    nonce: AtomicU64,\n    pending_calls: Arc<Mutex<HashSet<PendingCall>>>,\n    call_timeout: Option<Duration>,\n    submission_timeout: Option<Duration>,\n    _marker: PhantomData<Client>,\n}\n```\n\n----------------------------------------\n\nTITLE: Tangle Staking Precompile Address Definition\nDESCRIPTION: The contract address for the Tangle staking precompile that's consistent across both mainnet and testnet networks.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/staking.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x0000000000000000000000000000000000000800\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer for Tangle Network Blueprint Runner\nDESCRIPTION: Adds a TangleConsumer to the Blueprint Runner configuration. This consumer processes job results and can send transactions to the Tangle network based on those results.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet result = BlueprintRunner::builder(tangle_config, env)\n    // ... other configuration ...\n    .add_consumer(consumer)\n    // ... more configuration ...\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Rustup for Tangle Node Development\nDESCRIPTION: Instructions for installing Rustup and configuring the environment for Tangle node development. This is a prerequisite for building the Tangle node.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n# Configure\nsource ~/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Example Workflow: Deploying Eigenlayer Contracts to Testnet\nDESCRIPTION: Example command for deploying contracts to a testnet, specifying the network, RPC URL, and using ordered deployment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer \\\n  --network testnet \\\n  --rpc-url <YOUR_RPC_URL> \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Creating Tangle Validator Node Systemd Service File\nDESCRIPTION: Creates a systemd service file (`/etc/systemd/system/validator.service`) for running a Tangle validator node. It specifies similar parameters as the full node but includes the `--validator` flag to enable validator mode and typically uses port `30333` for P2P communication. Requires `sudo` privileges and placeholders like `<USERNAME>`, `<BASE_PATH>`, and `<NODE-NAME>` must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/validator.service > /dev/null << EOF\n[Unit]\nDescription=Tangle Validator Node\nAfter=network-online.target\nStartLimitIntervalSec=0\n\n[Service]\nUser=<USERNAME>\nRestart=always\nRestartSec=3\nExecStart=/usr/bin/tangle \\\n  --base-path <BASE_PATH> \\\n  --name <NODE-NAME> \\\n  --chain tangle-mainnet \\\n  --node-key-file \"<BASE_PATH>/node-key\" \\\n  --port 30333 \\\n  --validator \\\n  --no-mdns \\\n  --telemetry-url \"wss://telemetry.polkadot.io/submit/ 1\"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Required Hardhat Plugins in Bash\nDESCRIPTION: Command to install necessary Hardhat plugins including ethers and waffle for Ethereum development and testing. These plugins are essential for deploying and interacting with smart contracts on Tangle Network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomiclabs/hardhat-ethers @nomiclabs/hardhat-waffle ethereum-waffle ethers\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd Daemon Configuration in Shell\nDESCRIPTION: Executes `sudo systemctl daemon-reload` to instruct systemd to re-read its configuration files. This command is necessary after creating or modifying service unit files (like those for Node Exporter and Process Exporter) for the changes to take effect. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Message Signing Implementation\nDESCRIPTION: JavaScript implementation using Web3.js to sign a message and retrieve signature components for use with ECRecoverPublicKey precompile.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/non-specific.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example script to sign a message using an account on Tangle Testnet\n\nconst { Web3 } = require('web3');\n\n// Provider\nconst web3 = new Web3('https://testnet-rpc.tangle.tools');\n\n// Address and Private Key\nconst address = '0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b';\nconst pk1 = '99B3C12287537E38C90A9219D4CB074A89A16E9CDB20BF85728EBD97C343E342';\nconst msg = web3.utils.sha3('supercalifragilisticexpialidocious');\n\nasync function signMessage(pk) {\n  try {\n    // Sign and get Signed Message\n    const smsg = await web3.eth.accounts.sign(msg, pk);\n    console.log(smsg);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nsignMessage(pk1);\n```\n\n----------------------------------------\n\nTITLE: Submitting Blueprint Job\nDESCRIPTION: Command to submit a job to a running Blueprint with optional job parameters and result watching.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint submit --ws-rpc-url <ws-url> --service-id <id> --blueprint-id <id> --keystore-uri <path> --job <job-id> --params-file <file> --watcher\n```\n\n----------------------------------------\n\nTITLE: Creating Node Exporter systemd Service File in Shell\nDESCRIPTION: This command uses `sudo tee` with a heredoc (EOF) to create and populate the systemd service file for Node Exporter located at `/etc/systemd/system/node_exporter.service`. The service is configured to run as the `node_exporter` user and group, execute `/usr/local/bin/node_exporter`, and start after the network is online. Requires `sudo` privileges and the `node_exporter` user/group and binary to exist.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/node_exporter.service > /dev/null << EOF\n[Unit]\n  Description=Node Exporter\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=node_exporter\n  Group=node_exporter\n  Type=simple\n  ExecStart=/usr/local/bin/node_exporter\n\n[Install]\n  WantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using the TangleLst Precompile: Pool Join Example in Solidity\nDESCRIPTION: This example smart contract demonstrates how to interact with the TangleLst precompile's join function using Solidity. It shows the initialization of the precompile interface at the fixed address, and the 'joinPool' function that calls 'join(amount, poolId)' and requires a successful status code (0). This contract depends on the TangleLst interface being defined and the precompile address being correct; it accepts uint256 parameters for pool amount and ID, returning the status code for further handling.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst_developers/lst_precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract JoinPoolExample {\\n    address constant precompileAddress = 0x0000000000000000000000000000000000000809;\\n    ITangleLstPrecompile precompile = ITangleLstPrecompile(precompileAddress);\\n\\n    function joinPool(uint256 amount, uint256 poolId) public returns (uint256) {\\n        // Call the join function on the precompile contract\\n        uint256 statusCode = precompile.join(amount, poolId);\\n\\n        // Handle the status code as needed\\n        require(statusCode == 0, \\\"Join pool failed\\\");\\n\\n        return statusCode;\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Test Harness\nDESCRIPTION: Initialize the test harness with a temporary directory for test execution.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet tmp_dir = tempfile::TempDir::new()?;\nlet harness = TangleTestHarness::setup(tmp_dir).await?\n```\n\n----------------------------------------\n\nTITLE: Creating a New Eigenlayer AVS Project\nDESCRIPTION: Command to create a new AVS project using the Eigenlayer CLI. It requires specifying a project name and choosing between BLS or ECDSA variants.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create -n <NAME> --eigenlayer [BLS|ECDSA]\n```\n\n----------------------------------------\n\nTITLE: Depositing Tokens with Tangle LST Precompile in Solidity\nDESCRIPTION: This snippet defines the signature of the 'join' function, which allows users to deposit a specified amount of tokens into the Tangle LST precompile, associating them with a particular staking pool. The function is marked as 'external', meaning it can be called from other contracts or transactions, and requires two parameters: 'amount' (the quantity of tokens to deposit) and 'poolId' (the target liquid staking pool identifier). Inputs are 256-bit unsigned integers corresponding to the deposit amount and pool ID, with no return value. The function expects that token approval and standard precompile interfacing practices are handled by the caller.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst_developers/intro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction join(uint256 amount, uint256 poolId) external;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables and Deploying Tangle Blueprint (Shell)\nDESCRIPTION: This shell snippet sets environment variables for signer credentials and then executes the Tangle CLI command to deploy a blueprint to the devnet. 'SIGNER' and 'EVM_SIGNER' must be replaced with valid credentials. The deployment command requires the blueprint to already be created and may prompt for additional confirmation. Outputs include deployment logs and status messages.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport SIGNER=\"//Alice\"\nexport EVM_SIGNER=\"0xcb6df9de1efca7a3998a8ead4e02159d5fa99c3e0d4fd6432667390bb4726854\"\ncargo tangle blueprint deploy tangle --devnet\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Environment\nDESCRIPTION: Setup services with N nodes and initialize the test environment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// N specifies number of nodes (e.g. N = 3)\nlet (mut test_env, service_id, blueprint_id) = harness.setup_services::<N>(false).await?;\ntest_env.initialize().await?\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Container\nDESCRIPTION: Command to stop a running Tangle node Docker container.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker stop `CONTAINER_ID`\n```\n\n----------------------------------------\n\nTITLE: Delegating Assets via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for delegating assets to an operator using the Tangle MultiAssetDelegation precompile. Requires the operator's account ID (as bytes32), asset ID, token address (if ERC20), the amount to delegate, and an array for blueprint selection parameters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\ndelegate(bytes32 operator, uint256 assetId, address tokenAddress, uint256 amount, uint64[] memory blueprintSelection)\n```\n\n----------------------------------------\n\nTITLE: Accessing EVM Provider Parameters in Rust\nDESCRIPTION: Example showing how to access EVM provider parameters from a context that implements the EvmProviderContext trait.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/evm-provider-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n    let ctx_provider = ctx.provider();\n```\n\n----------------------------------------\n\nTITLE: Creating a Blueprint Project with Tangle CLI\nDESCRIPTION: Uses the Tangle CLI to create a new Blueprint project, setting up the necessary workspace and package structure.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create --name <BLUEPRINT_NAME>\n```\n\n----------------------------------------\n\nTITLE: Demo: Job Submission\nDESCRIPTION: Example command for submitting a job to the running blueprint with result watching.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint submit --job 0 --blueprint-id 0 --service-id 0 --watcher --keystore-uri ./deploy-keystore\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Nodes\nDESCRIPTION: Setup individual node configurations including gadget config and job handlers.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet handles = test_env.node_handles().await;\nfor handle in handles {\n// Get node configuration\nlet config = handle.gadget_config().await;\n// Initialize node-specific context\nlet blueprint_ctx = YourContext::new(config.clone()).await?;\n// Add job handlers\nlet job_handler = YourJobHandler::new(&config, blueprint_ctx.clone()).await?;\nhandle.add_job(job_handler).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Delegator Unstake via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for canceling a scheduled unstake operation using the Tangle MultiAssetDelegation precompile. Requires providing the same operator ID, asset details (ID and token address if applicable), and amount that were used when scheduling the unstake.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\ncancelDelegatorUnstake(bytes32 operator, uint256 assetId, address tokenAddress, uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Debugging Blueprint Build Failure\nDESCRIPTION: Example error output when blueprint metadata build fails, typically due to implementation issues or SDK breaking changes. The error occurs during the custom build command execution and indicates a JSON parsing failure in the metadata generation process.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nerror: failed to run custom build command for `<YOUR_BLUEPRINT> v0.1.0 (<PATH_TO_YOUR_BLUEPRINT>)`\n\nCaused by:\n  process didn't exit successfully: `<PATH_TO_YOUR_BLUEPRINT>/target/release/build/<YOUR_BLUEPRINT>-<ID>/build-script-build` (exit status: 101)\n  --- stdout\n  cargo:rerun-if-changed=src/main.rs\n\n  --- stderr\n      Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.75s\n     Generated <PATH_TO_YOUR_BLUEPRINT>/target/blueprint/doc/<YOUR_BLUEPRINT>.json\n  Reading JSON from <PATH_TO_YOUR_BLUEPRINT>/target/blueprint/doc/<YOUR_BLUEPRINT>.json\n  thread 'main' panicked at /Users/drew/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blueprint-metadata-0.1.6/src/lib.rs:410:59:\n  Failed to parse rustdoc JSON: Error(\"invalid type: string \\\"0:0:2495\\\", expected u32\", line: 1, column: 18)\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```\n\n----------------------------------------\n\nTITLE: Checking Delegated Asset Balance via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for querying the amount of a specific asset actively delegated by a given address using the Tangle MultiAssetDelegation precompile. Requires the delegator's address (`who`), the asset ID (0 for ERC20), and the token address (if ERC20).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\ndelegatedBalanceOf(address who, uint256 assetId, address tokenAddress)\n```\n\n----------------------------------------\n\nTITLE: Checking Tangle Validator Node Service Status\nDESCRIPTION: Checks the current status of the `validator` systemd service. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status validator\n```\n\n----------------------------------------\n\nTITLE: Listing Available RPC Methods\nDESCRIPTION: Shows how to query for a list of all available RPC methods using the Polkadot.js API.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/json-rpc-endpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.rpc.rpc.methods()\n```\n\n----------------------------------------\n\nTITLE: Generating an Eigenlayer BLS AVS Project with cargo-tangle (Bash)\nDESCRIPTION: Uses the `cargo tangle blueprint create` command to scaffold a new AVS project named `my-avs` based on the Eigenlayer BLS template. The command prompts the user for various project configuration details, offering safe defaults. Requires the `cargo-tangle` CLI to be installed.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create --name my-avs --eigenlayer bls\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Local Devnet (Shell)\nDESCRIPTION: Deploys the AVS smart contracts to a local development network (Anvil) using the `cargo-tangle` tool. The `--devnet` flag initiates a local Anvil instance, and `--ordered-deployment` provides an interactive deployment process. This is intended for local development and testing.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Deploy to local devnet\ncargo tangle blueprint deploy eigenlayer \\\n  --devnet \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Instantiating the EigenlayerContext in Main Runner in Rust\nDESCRIPTION: Code for instantiating an AggregatorContext in the main application runner. This shows how to create the context with the necessary services and configuration before using it in the application.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/eigenlayer-context.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet context = AggregatorContext::new(\n    config,\n    task_manager,\n    // Other required services...\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Canceling Scheduled Withdrawal via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for canceling a previously scheduled asset withdrawal using the Tangle MultiAssetDelegation precompile. Requires providing the exact same asset ID, token address (if applicable), and amount that were used when scheduling the withdrawal.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ncancelWithdraw(uint256 assetId, address tokenAddress, uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator Grandpa Key (Ed25519)\nDESCRIPTION: Inserts an Ed25519 Grandpa key (`gran`) into the node's keystore. This key is used for participating in the Grandpa finality gadget. Requires base path, chain, scheme (Ed25519), and SURI. The `<BASE_PATH>` and `<\"12-MNEMONIC-PHRASE\">` placeholders must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key insert --base-path <BASE_PATH> \\\n--chain tangle-mainnet \\\n--scheme Ed25519 \\\n--suri <\"12-MNEMONIC-PHRASE\"> \\\n--key-type gran\n```\n\n----------------------------------------\n\nTITLE: Registering a Job with Router Context in Rust\nDESCRIPTION: Example of how to register a job to a route with a router using context. This snippet demonstrates setting up a router with a job ID and associated job function, along with providing context.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/jobs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet router = Router::builder()\n    .route(MY_JOB_ID, my_job)\n    .with_context(my_context);\n```\n\n----------------------------------------\n\nTITLE: Demo: Running Blueprint Instance\nDESCRIPTION: Example command for running a blueprint instance with test keystore.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint run --protocol tangle --keystore-path ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Building Tangle AVS\nDESCRIPTION: Command to build the Tangle AVS project in release mode using Cargo.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/tangle-avs/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Precompile Interaction Flow Diagram\nDESCRIPTION: Sequence diagram showing the flow of interaction between User, EVM, and Tangle Runtime when using precompiles. Illustrates how user interactions are processed through the EVM layer to access Substrate runtime functionality.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant EVM\n    participant Tangle\n    User->>EVM: Interact with precompile\n    EVM->>Tangle: Calls the precompile on Tangle Runtime\n    Tangle->>Tangle: Access the Substrate runtime\n    Tangle->>EVM: Return result\n    EVM->>User: Return result\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service\nDESCRIPTION: Command to start the Grafana server service.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start grafana-server\n```\n\n----------------------------------------\n\nTITLE: Executing Scheduled Delegator Unstake via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for executing previously scheduled unstake operations for the caller using the Tangle MultiAssetDelegation precompile. This function takes no parameters and finalizes all eligible unstakes for the caller.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nexecuteDelegatorUnstake()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tangle Blueprint with Cargo (Shell)\nDESCRIPTION: This shell snippet invokes the Tangle CLI to generate a new blueprint using cargo. The '--name' flag specifies the desired name for the blueprint. The user must have the Tangle CLI and cargo installed and available in the system PATH. The output is a new project scaffold based on user input provided to the CLI prompts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint create --name <blueprint-name>\n```\n\n----------------------------------------\n\nTITLE: Defining EigenlayerContext Trait in Rust\nDESCRIPTION: Definition of the EigenlayerContext trait that provides a standardized interface for interacting with Eigenlayer services and utilities including core services for AVS registry interactions, operator information management, and BLS signature aggregation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/eigenlayer-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse ethers::prelude::*;\nuse eyre::Result;\nuse std::sync::Arc;\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests (Shell)\nDESCRIPTION: Executes the test suite defined within the AVS project using Cargo's test runner. This is used to verify the functionality and correctness of the AVS implementation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in Tangle CLI Keystore\nDESCRIPTION: Command for listing all keys stored in the Tangle keystore with the required keystore path parameter.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key list --keystore-path <PATH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key list --keystore-path ./keystore\n```\n\n----------------------------------------\n\nTITLE: Aggregating ERC20 Contract Calls Using Multicall3 in TypeScript\nDESCRIPTION: Demonstrates how to use the viem library in TypeScript to make efficient aggregate calls to ERC20 contracts via Multicall3 on the Tangle Testnet. Requires Node.js, the viem library, a valid RPC_URL env variable, and a deployed Multicall3 instance. The script defines the testnet chain, sets up a public client, and uses multicall to retrieve the ERC20 token name, symbol, and decimals in one batched request. Inputs are contract addresses and ABI data; outputs are the decoded ERC20 metadata printed to the console. All calls are configured to disallow partial failure, meaning any call failure aborts the batch result.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/useful-contracts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport assert from 'node:assert';\\nimport { createPublicClient, defineChain, erc20Abi, http } from 'viem';\\n\\nassert(process.env.RPC_URL, 'RPC_URL is not set');\\n\\nconst TANGLE_TESTNET = defineChain({\\n  id: 3799,\\n  name: 'Tangle EVM Testnet',\\n  nativeCurrency: {\\n    name: 'Tangle Native Token',\\n    symbol: 'tTNT',\\n    decimals: 18,\\n  },\\n  rpcUrls: {\\n    default: {\\n      http: [process.env.RPC_URL],\\n    },\\n  },\\n  contracts: {\\n    multicall3: {\\n      address: '0xcA11bde05977b3631167028862bE2a173976CA11',\\n      blockCreated: 776767,\\n    },\\n  },\\n});\\n\\n// Setup the client.\\nconst client = createPublicClient({\\n  chain: TANGLE_TESTNET,\\n  transport: http(process.env.RPC_URL),\\n});\\n\\nconst ERC20_ADDRESS = '0x87d95f134221D9c2b3dE15aCe58BACe4121c07B0';\\n\\nasync function example1() {\\n  // Execute the multicall and get the erc20 metadata (name, symbol, decimals). None of these calls can fail so we set\\n  // `allowFailure` to false. This results in each return value's type matching the type of the\\n  // corresponding call, e.g. `0x${string}` for addresses, `bigint` for uint256, etc. If we set\\n  // `allowFailure` to true then the returns types are of the following shape, using the example of\\n  // the address return type:\\n  //   {\\n  //       error: Error;\\n  //       result?: undefined;\\n  //       status: \"error\";\\n  //   } | {\\n  //       error?: undefined;\\n  //       result: `0x${string}`;\\n  //       status: \"success\";\\n  //   }\\n  const [name, symbol, decimals] = await client.multicall({\\n    contracts: [\\n      {\\n        address: ERC20_ADDRESS,\\n        abi: erc20Abi,\\n        functionName: 'name',\\n      },\\n      {\\n        address: ERC20_ADDRESS,\\n        abi: erc20Abi,\\n        functionName: 'symbol',\\n      },\\n      {\\n        address: ERC20_ADDRESS,\\n        abi: erc20Abi,\\n        functionName: 'decimals',\\n      },\\n    ],\\n    allowFailure: false,\\n  });\\n\\n  console.log(\\n    `Token ${name} has a symbol of ${symbol} and ${decimals} decimals at address ${ERC20_ADDRESS} on ${TANGLE_TESTNET.name}`,\\n  );\\n}\\n\\nexample1().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing Producer and Consumer for Tangle Network Blueprint Runner\nDESCRIPTION: Creates a TangleProducer and TangleConsumer for handling events and job results in a Tangle Network Blueprint Runner.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet producer = TangleProducer::new(tangle_config.clone());\nlet consumer = TangleConsumer::new(tangle_config.clone());\n```\n\n----------------------------------------\n\nTITLE: Installing Tangle CLI from source using Cargo\nDESCRIPTION: Command to install the Tangle CLI directly from the GitHub repository using Cargo. This uses the nightly version and works on Linux, MacOS, and Windows (WSL2).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install cargo-tangle --git https://github.com/tangle-network/blueprint --force\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delegator Unstake via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for scheduling the unstaking of delegated assets using the Tangle MultiAssetDelegation precompile. Requires the operator's account ID (bytes32), asset ID, token address (if ERC20), and the amount to unstake. The unstake must be executed later.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nscheduleDelegatorUnstake(bytes32 operator, uint256 assetId, address tokenAddress, uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment Script for Tangle LRT Vault using Solidity and Forge\nDESCRIPTION: This Solidity script uses Foundry's scripting capabilities (`forge-std/Script.sol`) to define a deployment process for the `TangleLiquidRestakingVault`. It retrieves environment variables (`PRIVATE_KEY`, `OPERATOR_ID`, etc.) using `vm.env*` cheatcodes and deploys the vault within a `vm.startBroadcast`/`vm.stopBroadcast` block. It depends on `forge-std` and the vault contract.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"forge-std/Script.sol\";\nimport \"../src/TangleLiquidRestakingVault.sol\";\n\ncontract DeployVault is Script {\n    function run() external {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        vm.startBroadcast(deployerPrivateKey);\n\n        // Deploy vault\n        bytes32 operator = bytes32(uint256(vm.envUint(\"OPERATOR_ID\")));\n        uint64[] memory blueprintSelection = new uint64[](1);\n        blueprintSelection[0] = uint64(vm.envUint(\"BLUEPRINT_ID\"));\n\n        TangleLiquidRestakingVault vault = new TangleLiquidRestakingVault(\n            vm.envAddress(\"BASE_TOKEN\"),\n            operator,\n            blueprintSelection,\n            MULTI_ASSET_DELEGATION_CONTRACT,\n            \"Liquid Restaked Token\",\n            \"LRT\"\n        );\n\n        vm.stopBroadcast();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServicesContext Trait in Rust\nDESCRIPTION: Core trait definition for ServicesContext that provides access to a Subxt client for interacting with Tangle network services.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/services-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait ServicesContext {\n    /// Returns a subxt client for interacting with Tangle services\n    fn services_client(&self) -> &subxt::OnlineClient<PolkadotConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator ImOnline Key (Sr25519) (Optional)\nDESCRIPTION: Inserts an optional Sr25519 ImOnline key (`imon`) into the node's keystore. This key is used for sending heartbeat messages to indicate the node's availability. Requires base path, chain, scheme (Sr25519), and SURI. The `<BASE_PATH>` and `<\"12-MNEMONIC-PHRASE\">` placeholders must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key insert --base-path <BASE_PATH> \\\n--chain tangle-mainnet \\\n--scheme Sr25519 \\\n--suri <\"12-MNEMONIC-PHRASE\"> \\\n--key-type imon\n```\n\n----------------------------------------\n\nTITLE: Defining KeystoreContext Trait in Rust\nDESCRIPTION: This snippet shows the definition of the KeystoreContext trait, which provides access to a Keystore implementing the Backend trait. It offers functionality for key creation, storage, management, signing, and import/export operations.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/keystore-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait KeystoreContext {\n    type Keystore: Backend;\n    fn keystore(&self) -> &Self::Keystore;\n}\n```\n\n----------------------------------------\n\nTITLE: Using EigenlayerContext in Job Implementation in Rust\nDESCRIPTION: Example of using the EigenlayerContext in a job implementation. This code snippet shows how to define a job that takes a context implementing the EigenlayerContext trait and uses it to initialize tasks.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/eigenlayer-context.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub async fn initialize_task<C: AggregatorContextTrait>(\n    ctx: Arc<C>,\n) -> Result<()> {\n    // Job implementation\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contracts with Hardhat in Bash\nDESCRIPTION: Command to compile smart contracts using Hardhat. This step is necessary before deploying contracts to ensure they are properly compiled and ready for deployment on Tangle Network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Structuring To Addresses Array for BatchAll in Tangle Network\nDESCRIPTION: This code snippet shows the structure of the 'to' array for a batchAll transaction combining a native token transfer and two contract calls to SimpleContract.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/batch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[\n  \"0x6Be02d1d3665660d22FF9624b7BE0551ee1Ac91b\",\n  \"0xd14b70a55F6cBAc06d4FA49b99be0370D0e1BD39\",\n  \"0xd14b70a55F6cBAc06d4FA49b99be0370D0e1BD39\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Tangle Node (Shell Script)\nDESCRIPTION: This shell script updates the package index, upgrades installed packages, and installs all the necessary system dependencies for compiling and running the Tangle node. Dependencies include networking tools, build essentials, libraries for SSL, LevelDB, GMP, and developer utilities such as git and wget. This script requires sudo privileges and is intended to be run on Debian/Ubuntu-derived Linux distributions.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update && sudo apt upgrade -y\nsudo apt install curl iptables build-essential git wget jq make gcc nano tmux htop nvme-cli pkg-config libssl-dev libleveldb-dev libgmp3-dev tar clang bsdmainutils ncdu unzip llvm libudev-dev make protobuf-compiler -y\n```\n\n----------------------------------------\n\nTITLE: Simple Contract Implementation in Solidity\nDESCRIPTION: Basic example contract used to demonstrate batch interactions. Implements a mapping of messages that can be set with a public function.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/batch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\ncontract SimpleContract {\n    mapping(uint256 => string) public messages;\n\n    function setMessage(uint256 id, string memory message) public {\n        messages[id] = message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BackgroundService Trait in Rust\nDESCRIPTION: Demonstrates how to define a background service by implementing the BackgroundService trait. The service includes a run method that executes in a background thread and cleanup functionality.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/background-services.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\npub trait BackgroundService: Send + Sync {\n    async fn run(&self) -> Result<(), Error>;\n\n    fn cleanup(&self) {\n        // Optional cleanup code\n    }\n\n    fn name(&self) -> String {\n        String::from(\"Background Service\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Validator Keystore Content\nDESCRIPTION: Lists the contents of the validator's keystore directory within the specified base path and chain directory to confirm that the various key insertion commands were successful. The `<BASE_PATH>` placeholder must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nls <BASE_PATH>/chains/tangle-mainnet/keystore/\n# You should see a some file(s) there, these are the keys.\n```\n\n----------------------------------------\n\nTITLE: Deploying Tangle LRT Vault using Forge Script via Bash\nDESCRIPTION: This command executes the Foundry deployment script (`DeployVault.s.sol`) specified by its path and contract name (`DeployVault`). It uses the `--rpc-url` flag to specify the target Tangle network endpoint (read from the `$TANGLE_RPC_URL` environment variable) and the `--broadcast` flag to send the transaction to the network. It requires Foundry, a configured deployment script, and set environment variables.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge script script/DeployVault.s.sol:DeployVault --rpc-url $TANGLE_RPC_URL --broadcast\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Service in Blueprint Runner\nDESCRIPTION: Shows how to integrate a background service into the Blueprint Runner builder pattern. Includes setup of the service, error handling, and shutdown handler configuration.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/background-services.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub async fn main() -> Result<(), Error> {\n    let config = Arc::new(Config::default());\n\n    let router = Router::new(config.clone());\n    let mut router = router\n        .with_producer(\n            EventProducer::new(\"test\".to_string(), config.clone())\n                .await\n                .expect(\"failed to create producer\"),\n        )\n        .with_job_handler(Box::new(JobHandler::new()))\n        .with_consumer(\n            EventConsumer::new(\"test\".to_string(), config.clone())\n                .await\n                .expect(\"failed to create consumer\"),\n        )\n        .with_background_service(Box::new(BackgroundService::new()))\n        .with_shutdown_handler(|| async {\n            println!(\"Shutting down background service...\");\n        });\n\n    router.run().await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Validator Account Key (Sr25519)\nDESCRIPTION: Inserts an Sr25519 Account key (`acco`) into the node's keystore using the `tangle` binary. It requires specifying the base path, chain, scheme (Sr25519), and the secret URI (SURI), typically a 12-word mnemonic phrase. The `<BASE_PATH>` and `<\"12-MNEMONIC-PHRASE\">` placeholders must be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key insert --base-path <BASE_PATH> \\\n--chain tangle-mainnet \\\n--scheme Sr25519 \\\n--suri <\"12-MNEMONIC-PHRASE\"> \\\n--key-type acco\n```\n\n----------------------------------------\n\nTITLE: Submitting Test Jobs\nDESCRIPTION: Example of submitting a job with arguments to the test harness.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet job = harness\n    .submit_job(\n    service_id,\n    JOB_ID,\n    vec![InputValue::Uint16(2)] // Example job argument\n)\n.await?;\nlogging::info!(\"Submitted job {JOB_ID} with service ID {service_id}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring the BlueprintRunner for EigenLayer AVS in Rust\nDESCRIPTION: Sets up the BlueprintRunner with the router, producers, consumers, and background services. This is the core component that orchestrates the execution of the Incredible Squaring AVS Blueprint.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// setup router\nlet mut router = Router::default();\nrouter.add_job(\n    InitializeTaskJob,\n    (),\n    (),\n    Arc::new(|input, _| {\n        Box::pin(async move { Ok(vec![JobCall::from_input::<ComputeXSquareJob, _>(input)]) })\n    }),\n);\nrouter.add_job(ComputeXSquareJob, (), compute_x_square_context, Arc::new(|_, _| Box::pin(async move { Ok(vec![]) })));\n\n// Setup the blueprint runner\nlet mut blueprint_runner = BlueprintRunner::new(router);\n```\n\n----------------------------------------\n\nTITLE: Starting Node Exporter Service with systemd in Shell\nDESCRIPTION: Executes `sudo systemctl start node_exporter.service` to initiate the Node Exporter service. This requires the `node_exporter.service` file to have been created and the systemd daemon reloaded. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start node_exporter.service\n```\n\n----------------------------------------\n\nTITLE: Converting EVM Address to Substrate Address in TypeScript\nDESCRIPTION: Script that converts an EVM address to a Substrate address using blake2 hashing and proper encoding. This is a one-way conversion process that cannot be reversed.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/evm-substrate-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  blake2AsU8a,\n  encodeAddress,\n} from \"https://esm.sh/@polkadot/util-crypto\";\nimport {\n  hexToU8a,\n  stringToU8a,\n  u8aConcat,\n} from \"https://esm.sh/@polkadot/util\";\n\nconst input = Deno.args[0];\nif (!input) {\n  console.error(\"usage: deno run evmToSubstrate.ts <ETH_ADDRESS_HERE>\");\n  Deno.exit(1);\n}\nconst addr = hexToU8a(input);\nconst data = stringToU8a(\"evm:\");\nconst res = blake2AsU8a(u8aConcat(data, addr));\nconst output = encodeAddress(res, 42);\nconsole.log({ input, output });\n// run using:\n// $ deno run evmToSubstrate.ts <ETH_ADDRESS_HERE>\n```\n\n----------------------------------------\n\nTITLE: Deploying Tangle Blueprint\nDESCRIPTION: Command to deploy a Blueprint to the Tangle Network with configurable RPC endpoints and keystore location.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint deploy tangle --ws-rpc-url <ws-url> --http-rpc-url <http-url> --keystore-path <path>\n```\n\n----------------------------------------\n\nTITLE: Defining a Job in Rust for Tangle Network Blueprint\nDESCRIPTION: Demonstrates how to define a job within the library package of a Tangle Network Blueprint. This example shows a 'square' job that takes a number and returns its square.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, Deserialize, Serialize)]\npub struct SquareJobParams {\n    pub number: u64,\n}\n\n#[async_trait]\nimpl Job for SquareJobParams {\n    type Output = u64;\n    async fn run(&self) -> Result<Self::Output> {\n        Ok(self.number * self.number)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demo: Accepting Service Request\nDESCRIPTION: Example command for accepting a service request with test keystore.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint accept-request --request-id 0 --keystore-uri ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Setting Up Producers for EigenLayer AVS in Rust\nDESCRIPTION: Configures producers that listen for EVM events and prepare them for processing. These producers handle the task initialization events from the Incredible Squaring TaskManager contract.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// Setup producers\nlet mut producers = vec![];\nlet producer = EventProducerBuilder::new()\n    .add_event::<TaskInitializedEvent>(TaskInitializedProcessor,TASK_MANAGER, 0)\n    .build(provider.clone());\nproducers.push(Box::new(producer));\n```\n\n----------------------------------------\n\nTITLE: Nominate Validators Example Call Format\nDESCRIPTION: Example format showing how to structure validator nomination data for the nominate function call.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/staking.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n[\"0xabc123...\",\"0xdef456...\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Testnet (Shell)\nDESCRIPTION: Deploys the AVS smart contracts to a specified testnet using the `cargo-tangle` tool. Requires providing a valid RPC endpoint URL via `--rpc-url <YOUR_RPC_URL>`. The `--network testnet` flag specifies the target network, and `--ordered-deployment` enables interactive deployment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Deploy to testnet\ncargo tangle blueprint deploy eigenlayer \\\n  --network testnet \\\n  --rpc-url <YOUR_RPC_URL> \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Downloading Tangle Node Binary using wget (Shell)\nDESCRIPTION: This command uses the `wget` utility to download the Tangle node binary version 1.0.0 specifically for Linux AMD64 architecture directly from the project's GitHub releases page. This is typically the first step in setting up a node using pre-compiled binaries.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/node-software.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/tangle-network/tangle/releases/download/v1.0.0/tangle-default-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining Value Array for BatchAll Transaction in Tangle Network\nDESCRIPTION: This snippet illustrates the 'value' array for a batchAll transaction, specifying the amount of native tokens to transfer in the first subtransaction and zero values for the contract calls.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/batch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[\"1000000000000000000\", \"0\", \"0\"]\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Daemons - Shell\nDESCRIPTION: This shell command reloads systemd manager configuration to recognize newly added or modified service files. It must be run after creating or editing service files before starting or managing services. Requires systemd and administrative privileges. The command does not take additional parameters, and its output is a refreshed systemd state.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Executing Scheduled Withdrawal via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for executing previously scheduled asset withdrawals using the Tangle MultiAssetDelegation precompile. This function takes no parameters and executes all eligible scheduled withdrawals for the calling address.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nexecuteWithdraw()\n```\n\n----------------------------------------\n\nTITLE: Accessing Keystore Functionality in Rust\nDESCRIPTION: This snippet shows how to access the keystore functionality using the implemented KeystoreContext. It demonstrates retrieving the keystore from the context.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/keystore-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet keystore = context.keystore();\n```\n\n----------------------------------------\n\nTITLE: Starting Tangle Validator Node\nDESCRIPTION: Command to start a Tangle Network node in validator mode with a custom name that will appear on telemetry.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/validator/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntangle --validator --name \"YourNodeNameOnTelemetry\"\n```\n\n----------------------------------------\n\nTITLE: Demo: Service Request\nDESCRIPTION: Example command for requesting service from an operator using deployment keystore.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint request-service --blueprint-id 0 --target-operators 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY --value 0 --keystore-uri ./deploy-keystore\n```\n\n----------------------------------------\n\nTITLE: Generating Validator Node Key File\nDESCRIPTION: Generates a node key file specifically for a validator node setup. This is the same command as used for the full node setup but executed in the context of setting up a validator. Requires the `<BASE_PATH>` placeholder to be replaced.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key generate-node-key \\\n--file <BASE_PATH>/node-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Tangle Full Node Service\nDESCRIPTION: This snippet creates a systemd service configuration file for running a Tangle Full Node. It includes settings for the node's base path, chain selection, RPC configuration, and other parameters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/full.service > /dev/null << EOF\n[Unit]\nDescription=Tangle Full Node\nAfter=network-online.target\nStartLimitIntervalSec=0\n\n[Service]\nUser=<USERNAME>\nRestart=always\nRestartSec=3\nExecStart=/usr/bin/tangle \\\n  --base-path <BASE_PATH> \\\n  --name <NODE-NAME> \\\n  --chain tangle-mainnet \\\n  --node-key-file \"<BASE_PATH>/node-key\" \\\n  --rpc-cors all \\\n  --port 9946 \\\n  --no-mdns --ethapi trace,debug,txpool\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Cloning the Tangle Node Repository\nDESCRIPTION: Commands to clone the Tangle network repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tangle-network/tangle\ncd tangle\n```\n\n----------------------------------------\n\nTITLE: Moving Tangle Binary to System Path\nDESCRIPTION: Moves the compiled `tangle` executable from the `target/release` directory (assuming the command is run from the repository root) to the system's binary directory `/usr/bin/`. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Move the tangle binary to the bin directory (assumes you are in repo root directory)\nsudo mv ./target/release/tangle /usr/bin/\n```\n\n----------------------------------------\n\nTITLE: Promtail Configuration File\nDESCRIPTION: YAML configuration for Promtail including server settings and log scraping configurations.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /data/loki/positions.yaml\n\nclients:\n  - url: http://localhost:3100/loki/api/v1/push\n\nscrape_configs:\n- job_name: system\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: varlogs\n      __path__: /var/log/dkg/*log\n```\n\n----------------------------------------\n\nTITLE: Depositing Assets via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for depositing assets using the Tangle MultiAssetDelegation precompile. Requires the asset ID (0 for ERC20), token address (if ERC20), the amount to deposit (in smallest units), and an optional lock multiplier. This function is called via an Ethereum tool like Remix connected to the Tangle network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ndeposit(uint256 assetId, address tokenAddress, uint256 amount, uint8 lockMultiplier)\n```\n\n----------------------------------------\n\nTITLE: Requesting Blueprint Service\nDESCRIPTION: Command to request a service from a Blueprint with configurable exposure percentages and target operators.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint request-service --ws-rpc-url <ws-url> --blueprint-id <id> --min-exposure-percent <min> --max-exposure-percent <max> --target-operators <operators> --value <value> --keystore-uri <path>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tangle Producer and Blueprint Runner in Rust\nDESCRIPTION: This snippet demonstrates the basic setup of a `TangleProducer` in Rust. It initializes the `BlueprintEnvironment`, obtains a Tangle client, creates a `TangleProducer` specifically for finalized blocks, and then configures and runs the `BlueprintRunner` using this producer and a pre-defined router.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/producers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n```rust\nlet env = BlueprintEnvironment::load()?;\nlet tangle_client = env.tangle_client().await?;\nlet tangle_producer = TangleProducer::finalized_blocks(tangle_client.rpc_client.clone()).await?;\n\nBlueprintRunner::builder(tangle_config, env)\n    .router(router) // Assuming your router is already defined\n    .producer(tangle_producer)\n    .run()\n    .await?;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregator Context Structure in Rust\nDESCRIPTION: Definition of an AggregatorContext struct that implements the EigenlayerContext trait. It includes fields for various services such as task manager, EVS client, operator info service, and BLS verification service.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/eigenlayer-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct AggregatorContext {\n    chain_id: u64,\n    pub task_manager: Arc<dyn tasks::TaskManager<Self>>,\n    instrumented_evm_client: Arc<dyn InstrumentedEvmClient>,\n    operator_info_service: Arc<dyn operator_info::OperatorInfoService>,\n    bls_verification_service: Arc<dyn bls_verification::BlsVerificationService>,\n    aggregator: Arc<dyn aggregator::AggregatorService>,\n    avs_registry_reader: Arc<dyn avs_registry::AvsRegistryReader>,\n    avs_registry_writer: Arc<dyn avs_registry::AvsRegistryWriter>,\n    operator_state_reader: Arc<dyn operator_state::OperatorStateReader>,\n    signer: Option<LocalWallet>,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Tangle Validator Node Service\nDESCRIPTION: Reloads the systemd daemon, enables the `validator` service to start on boot, and starts the service immediately. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable validator\nsudo systemctl start validator\n```\n\n----------------------------------------\n\nTITLE: Moving Tangle Binary (Validator Setup)\nDESCRIPTION: Moves the compiled `tangle` executable to `/usr/bin/` as part of the validator setup process. This is identical to the command used in the full node setup but shown here for completeness in the validator context. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n# Move the tangle binary to the bin directory (assumes you are in repo root directory)\nsudo mv ./target/release/tangle /usr/bin/\n```\n\n----------------------------------------\n\nTITLE: Starting Test Environment\nDESCRIPTION: Start the test environment after configuration is complete.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ntest_env.start().await?\n```\n\n----------------------------------------\n\nTITLE: Specifying Empty GasLimit Array for BatchAll in Tangle Network\nDESCRIPTION: This snippet shows an empty 'gasLimit' array for a batchAll transaction, allowing the network to automatically determine gas limits for each subtransaction.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/batch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Creating Process Exporter systemd Service File in Shell\nDESCRIPTION: This command utilizes `sudo tee` and a heredoc (EOF) to generate the systemd service file for Process Exporter at `/etc/systemd/system/process-exporter.service`. It defines the service to run as the `process-exporter` user and group, execute `/usr/local/bin/process-exporter` with a specified configuration file (`/etc/process-exporter/config.yml`), and depend on the network being online. Requires `sudo` privileges, the `process-exporter` user/group, the binary, and the specified config file.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/process-exporter.service > /dev/null << EOF\n[Unit]\n  Description=Process Exporter\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=process-exporter\n  Group=process-exporter\n  Type=simple\n  ExecStart=/usr/local/bin/process-exporter \\\n   --config.path /etc/process-exporter/config.yml\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Scheduling Asset Withdrawal via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for scheduling an asset withdrawal using the Tangle MultiAssetDelegation precompile. Requires the asset ID (0 for ERC20), token address (if ERC20), and the amount to withdraw. The withdrawal must be executed later using `executeWithdraw`.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nscheduleWithdraw(uint256 assetId, address tokenAddress, uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Exporting Keys from Tangle CLI Keystore\nDESCRIPTION: Command for exporting keys from the Tangle keystore with required parameters for key type, public key, and keystore path. Includes an example for ECDSA key export.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key export --key-type <KEY_TYPE> --public <PUBLIC_KEY> --keystore-path <PATH>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key export --key-type ecdsa --public <YOUR_PUBLIC_KEY> --keystore-path ./keystore\n```\n\n----------------------------------------\n\nTITLE: Creating a New BLS AVS Project (Shell)\nDESCRIPTION: Uses the `cargo-tangle` CLI to scaffold a new Actively Validated Service (AVS) project based on the EigenLayer BLS template. Replace `<blueprint_name>` with the desired name for the AVS project. The command will prompt for configuration settings.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint create --name <blueprint_name> --eigenlayer bls\n```\n\n----------------------------------------\n\nTITLE: Defining TangleClientContext Trait in Rust\nDESCRIPTION: Core trait definition that provides a standardized interface for interacting with the Tangle network through a Subxt OnlineClient. This enables transaction submission, state queries, event monitoring, and RPC calls.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/tangle-client-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait TangleClientContext {\n    type RuntimeConfig: subxt::Config;\n    fn client(&self) -> &subxt::OnlineClient<Self::RuntimeConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Tangle Node with Regular Testnet Configuration\nDESCRIPTION: Command to build the Tangle node with regular testnet configuration without instant-seal. This produces blocks at regular intervals, similar to the production environment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --features txpool,testnet\n```\n\n----------------------------------------\n\nTITLE: Downloading Prometheus Binary\nDESCRIPTION: Commands for downloading Prometheus binaries for different architectures and operating systems\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/prometheus/prometheus/releases/download/v2.40.3/prometheus-2.40.3.linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: SHA3FIPS256 Precompile Implementation\nDESCRIPTION: Solidity contract implementing the SHA3FIPS256 precompile for computing SHA3-256 hashes using inline assembly.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/non-specific.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.7.0;\n\ncontract Precompiles {\n    function sha3fips(bytes memory data) public view returns (bytes32) {\n        bytes32[1] memory h;\n        assembly {\n            if iszero(\n                staticcall(not(0), 0x400, add(data, 32), mload(data), h, 32)\n            ) {\n                invalid()\n            }\n        }\n        return h[0];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Keys into Tangle CLI Keystore\nDESCRIPTION: Command for importing existing cryptographic keys into the Tangle keystore with options for key type, secret key, and protocol selection. Includes examples for different key types and interactive import.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key import --keystore-path <PATH> [OPTIONS]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Import an ECDSA key for Tangle\ncargo tangle key import --keystore-path ./keystore --key-type ecdsa --secret <YOUR_SECRET_KEY>\n\n# Import an ECDSA key for Eigenlayer\ncargo tangle key import --keystore-path ./keystore --key-type ecdsa --protocol eigenlayer --secret <YOUR_SECRET_KEY>\n\n# Import an sr25519 key\ncargo tangle key import --keystore-path ./keystore --key-type sr25519 --secret <YOUR_SECRET_KEY>\n\n# Import with interactive prompt\ncargo tangle key import --keystore-path ./keystore\n```\n\n----------------------------------------\n\nTITLE: Creating Tangle Blueprint with CLI\nDESCRIPTION: Command to generate a new blueprint from template. Supports custom repository sources and branch/tag specifications.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint create --name <blueprint-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing KeystoreContext Trait for Custom Context in Rust\nDESCRIPTION: This example demonstrates how to define a custom context struct that implements the KeystoreContext trait. It includes a keystore field of type Arc<Keystore> and derives the Context trait.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/keystore-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Context)]\nstruct MyContext {\n    #[context(keystore)]\n    keystore: Arc<Keystore>,\n    #[context(state)]\n    state: StateContext,\n    #[context(network)]\n    network: NetworkContext,\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Session Change Logs\nDESCRIPTION: These log messages indicate the successful application of an authority set change during a validator upgrade or transition. They show the block number at which the change was scheduled and confirm the application of the new GRANDPA consensus set with a specified number of authorities. Monitoring these logs helps verify that the validator switch is proceeding as expected.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/validator/upgrade-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2019-10-28 21:44:13 Applying authority set change scheduled at block #450092\n2019-10-28 21:44:13 Applying GRANDPA set change to new set with 20 authorities\n```\n\n----------------------------------------\n\nTITLE: AlertManager Email and Slack Configuration\nDESCRIPTION: Configuration for AlertManager with Gmail and Slack integration\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n resolve_timeout: 1m\n\nroute:\n receiver: 'gmail-notifications'\n\nreceivers:\n- name: 'gmail-notifications'\n  email_configs:\n  - to: 'EMAIL-ADDRESS'\n    from: 'EMAIL-ADDRESS'\n    smarthost: 'smtp.gmail.com:587'\n    auth_username: 'EMAIL-ADDRESS'\n    auth_identity: 'EMAIL-ADDRESS'\n    auth_password: 'EMAIL-ADDRESS'\n    send_resolved: true\n\n\n# ********************************************************************************************************************************************\n# Alert Manager for Slack Notifications  *\n# ********************************************************************************************************************************************\n\n global:\n   resolve_timeout: 1m\n   slack_api_url: 'INSERT SLACK API URL'\n\n route:\n   receiver: 'slack-notifications'\n\n receivers:\n - name: 'slack-notifications'\n   slack_configs:\n   - channel: 'channel-name'\n     send_resolved: true\n     icon_url: https://avatars3.githubusercontent.com/u/3380462\n     title: |-\n      [{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}\n      {{- if gt (len .CommonLabels) (len .GroupLabels) -}}\n        {{\" \"}}(\n        {{- with .CommonLabels.Remove .GroupLabels.Names }}\n          {{- range $index, $label := .SortedPairs -}}\n            {{ if $index }}, {{ end }}\n            {{- $label.Name }}=\"{{ $label.Value -}}\"\n          {{- end }}\n        {{- end -}}\n        )\n      {{- end }}\n     text: >\n      {{ range .Alerts -}}\n      *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}\n      *Description:* {{ .Annotations.description }}\n      *Details:*\n        {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`\n        {{ end }}\n      {{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Package\nDESCRIPTION: Command to install the Grafana package on Linux systems.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install grafana\n```\n\n----------------------------------------\n\nTITLE: Illustrating Security Features in Tangle LRT Vault using Solidity\nDESCRIPTION: This Solidity snippet highlights key security considerations within the `TangleLiquidRestakingVault` contract. It shows the definition of `REWARD_FACTOR` for scaling, the use of `mulDivUp` from `FixedPointMathLib` for safe reward calculations, and a `revert` statement for validating withdrawal amounts against scheduled amounts. These demonstrate the contract's approach to precision and safety.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Scale factor for reward index calculations\nuint256 private constant REWARD_FACTOR = 1e18;\n\n/// @notice Uses mulDivUp for final reward calculation\nuint256 newRewards = snapshot.shareBalance.mulDivUp(indexDelta, REWARD_FACTOR);\n\n/// @notice Validates withdrawal amounts\nif (scheduledWithdrawAmount[owner] < assets) revert NoScheduledAmount();\n```\n\n----------------------------------------\n\nTITLE: Resource Cost Calculation Formula - Markdown Fenced Block\nDESCRIPTION: Documents the canonical cost calculation formula for blueprint execution pricing, presented as a plaintext code block for reference. Intended as a reference for implementers/external systems to understand or reproduce cost computations in their own integrations. Inputs are derived from operator quotes, resource quantities, execution durations, and security parameters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/pricing-engine.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPrice = Resource Cost × Duration Factor × Security Factor\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus Service with systemd in Shell\nDESCRIPTION: Uses `sudo systemctl start prometheus.service` to start the Prometheus service immediately. This command assumes a `prometheus.service` unit file is already defined and loaded by systemd. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start prometheus.service\n```\n\n----------------------------------------\n\nTITLE: Defining a Background Service for Tangle Network Blueprint\nDESCRIPTION: Demonstrates how to define a background service for a Tangle Network Blueprint. This example creates a simple counter service that increments every second.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct Counter {\n    count: Arc<AtomicU64>,\n}\n\n#[async_trait]\nimpl BackgroundService for Counter {\n    async fn run(&self) -> Result<()> {\n        loop {\n            self.count.fetch_add(1, Ordering::SeqCst);\n            tokio::time::sleep(Duration::from_secs(1)).await;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging for Tangle Node\nDESCRIPTION: Command to run the node with customizable verbose logging levels. Supports debug, error, info, trace, and warn logging levels.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=runtime=debug ./target/release/<YOUR-NODE-TEMPLATE> --dev\n```\n\n----------------------------------------\n\nTITLE: Creating AlertManager Directories\nDESCRIPTION: Commands to create necessary directories for AlertManager\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /etc/alertmanager &&\nsudo mkdir /var/lib/alertmanager\n```\n\n----------------------------------------\n\nTITLE: Glacis Router Contract Address on Tangle Mainnet (Plaintext)\nDESCRIPTION: Provides the deployed Ethereum address for the Glacis Router core contract on the Tangle mainnet. The Glacis Router is essential for managing cross-chain message routing via the Glacis protocol. Use this address to interact with the router contract on Tangle.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/glacis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x68E70e39d4d6A072644E68106678971103A4E044\n```\n\n----------------------------------------\n\nTITLE: Setting AlertManager Permissions\nDESCRIPTION: Commands to set proper ownership for AlertManager directories and files\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown alertmanager:alertmanager /etc/alertmanager/ -R &&\nsudo chown alertmanager:alertmanager /var/lib/alertmanager/ -R &&\nsudo chown alertmanager:alertmanager /usr/local/bin/alertmanager &&\nsudo chown alertmanager:alertmanager /usr/local/bin/amtool\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Installing and Testing EigenLayer AVS\nDESCRIPTION: Shell commands for cloning the repository, installing Anvil, and running tests for the Incredible Squaring AVS Blueprint on a local Anvil Testnet.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/incredible-squaring-avs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/tangle-network/blueprint.git\ncd blueprint\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\nfoundryup\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --package incredible-squaring-blueprint-eigenlayer test_eigenlayer_incredible_squaring_blueprint\n```\n\n----------------------------------------\n\nTITLE: Importing Tangle Restaking Precompile Interface in Solidity\nDESCRIPTION: This code snippet demonstrates how to import the `MultiAssetDelegationPrecompile.sol` interface file into a Solidity smart contract. This import makes the functions and types defined in the precompile interface available for use within the importing contract, allowing interaction with the Tangle Restaking precompile.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake_developers/integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"MultiAssetDelegationPrecompile.sol\";\n```\n\n----------------------------------------\n\nTITLE: Basic Router Configuration in Rust\nDESCRIPTION: Demonstrates basic router setup using BlueprintRunner and Router from blueprint_sdk. Shows how to create a router, define routes and set context.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/routers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse blueprint_sdk::runner::BlueprintRunner;\nuse blueprint_sdk::Router;\n\nlet router = Router::builder()\n    .route(MY_JOB_ID, my_job)\n    .with_context(my_context);\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup script\nDESCRIPTION: Command to install Rust programming language using the official rustup installation script. This is a prerequisite for installing the Tangle CLI.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana on MacOS using Homebrew\nDESCRIPTION: Commands to install Grafana using Homebrew package manager on MacOS systems.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew update\nbrew install grafana\n```\n\n----------------------------------------\n\nTITLE: Extracting Downloaded Monitoring Tools\nDESCRIPTION: Command to extract the downloaded Prometheus, Node Exporter, and Process Exporter archives\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntar xvf prometheus-*.tar.gz &&\ntar xvf node_exporter-*.tar.gz &&\ntar xvf process-exporter-*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Generating Node Key File for Tangle Network\nDESCRIPTION: This command generates a node key file for the Tangle Network node. The key file is essential for node identification and security.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n./target/release/tangle key generate-node-key \\\n--file <BASE_PATH>/node-key\n```\n\n----------------------------------------\n\nTITLE: Demo: Deploying Blueprint\nDESCRIPTION: Example command for deploying a blueprint in devnet mode for testing.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint deploy tangle --devnet\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts to Tangle Network using Hardhat in Bash\nDESCRIPTION: Command to run the deployment script using Hardhat, which deploys the smart contract to the Tangle Network. This command executes the deployment script with the network configuration specified in hardhat.config.js.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run --network tangle scripts/deploy.js\n```\n\n----------------------------------------\n\nTITLE: Implementing TangleClientContext in Rust\nDESCRIPTION: Example implementation of a context struct that implements the TangleClientContext trait. Demonstrates how to set up a basic context with configuration and client handling.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/tangle-client-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone)]\npub struct Context {\n    pub client: subxt::OnlineClient<Config>,\n    pub signer: Pair,\n}\n\nimpl TangleClientContext for Context {\n    type RuntimeConfig = Config;\n    fn client(&self) -> &subxt::OnlineClient<Self::RuntimeConfig> {\n        &self.client\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Process Exporter Configuration\nDESCRIPTION: YAML configuration for Process Exporter defining process monitoring settings\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprocess_names:\n  - name: \"{{.Comm}}\"\n    cmdline:\n    - '.+'\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat and Creating a New Project in Bash\nDESCRIPTION: Commands to install Hardhat via npm, create a new project directory, and initialize a Hardhat project. This sets up the basic structure for deploying smart contracts on Tangle Network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/deploy-using-hardhat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir <project-name>\ncd <project-name>\nnpm init -y\nnpm install --save-dev hardhat\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Blueprints\nDESCRIPTION: Command to list all Blueprints deployed on the Tangle network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint list-blueprints --ws-rpc-url <ws-url>\n```\n\n----------------------------------------\n\nTITLE: Loki Configuration File\nDESCRIPTION: YAML configuration for Loki server including HTTP ports, storage settings, and retention policies.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9096\n\ningester:\n  lifecycler:\n    address: 127.0.0.1\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\n    final_sleep: 0s\n  chunk_idle_period: 5m\n  chunk_retain_period: 30s\n  max_transfer_retries: 0\n\nschema_config:\n  configs:\n    - from: 2020-10-24\n      store: boltdb-shipper\n      object_store: filesystem\n      schema: v11\n      index:\n        prefix: index_\n        period: 168h\n\n\nstorage_config:\n  boltdb:\n    directory: /data/loki/index\n\n  filesystem:\n    directory: /data/loki/chunks\n\nlimits_config:\n  enforce_metric_name: false\n  reject_old_samples: true\n  reject_old_samples_max_age: 168h\n\nchunk_store_config:\n  max_look_back_period: 0s\n\ntable_manager:\n  retention_deletes_enabled: false\n  retention_period: 0\n```\n\n----------------------------------------\n\nTITLE: Deploying AVS Contracts to a Local Testnet with cargo-tangle (Bash)\nDESCRIPTION: Deploys the AVS smart contracts to a local development network using `cargo-tangle`. The `--devnet` flag initiates a local testnet, and `--ordered-deployment` ensures contracts are deployed in the correct order to satisfy dependencies (e.g., TangleTaskManager before TangleServiceManager). The user will be prompted for constructor arguments and initialization parameters during deployment. Requires `cargo-tangle`, Docker Desktop, Foundry, and Rust.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-example.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer \\\n    --devnet \\\n    --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Constructing CallData Array for BatchAll in Tangle Network\nDESCRIPTION: This code block shows the 'callData' array for a batchAll transaction. It includes an empty string for the token transfer and two encoded calls to the setMessage function of SimpleContract with different parameters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/ux/batch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[\n  \"0x\",\n  \"0x648345c8000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000009796f752061726520610000000000000000000000000000000000000000000000\",\n  \"0x648345c800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000e61206d6f6f6e6265616d2070726f000000000000000000000000000000000000\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ServicesContext Struct in Rust\nDESCRIPTION: Example implementation of a context struct that implements the ServicesContext trait with required client functionality.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/services-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Context)]\nstruct MyContext {\n    #[context(client)]\n    services_client: subxt::OnlineClient<PolkadotConfig>,\n\n    #[context(pallet = \"Services\")]\n    services: ServicesProvider,\n\n    id: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Tangle AVS Repository\nDESCRIPTION: Commands to clone the Tangle AVS repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/tangle-avs/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/tangle-network/avs.git tangle-avs\ncd tangle-avs\n```\n\n----------------------------------------\n\nTITLE: Pulling Tangle Docker Image\nDESCRIPTION: Command to pull the latest Tangle node Docker image from the GitHub Container Registry.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/tangle-network/tangle/tangle:main\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Synchronization Output\nDESCRIPTION: This snippet shows the console output during the node synchronization process. It displays information such as sync speed, target block, peer count, and network activity.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n2021-06-17 03:07:39 🔍 Discovered new external address for our node: /ip4/10.26.16.1/tcp/30333/ws/p2p/12D3KooWLtXFWf1oGrnxMGmPKPW54xWCHAXHbFh4Eap6KXmxoi9u\n2021-06-17 03:07:40 ⚙️  Syncing 218.8 bps, target=#5553764 (17 peers), best: #24034 (0x08af…dcf5), finalized #23552 (0xd4f0…2642), ⬇ 173.5kiB/s ⬆ 12.7kiB/s\n2021-06-17 03:07:45 ⚙️  Syncing 214.8 bps, target=#5553765 (20 peers), best: #25108 (0xb272…e800), finalized #25088 (0x94e6…8a9f), ⬇ 134.3kiB/s ⬆ 7.4kiB/s\n2021-06-17 03:07:50 ⚙️  Syncing 214.8 bps, target=#5553766 (21 peers), best: #26182 (0xe7a5…01a2), finalized #26112 (0xcc29…b1a9), ⬇ 5.0kiB/s ⬆ 1.1kiB/s\n2021-06-17 03:07:55 ⚙️  Syncing 138.4 bps, target=#5553767 (21 peers), best: #26874 (0xcf4b…6553), finalized #26624 (0x9dd9…27f8), ⬇ 18.9kiB/s ⬆ 2.0kiB/s\n2021-06-17 03:08:00 ⚙️  Syncing 37.0 bps, target=#5553768 (22 peers), best: #27059 (0x5b73…6fc9), finalized #26624 (0x9dd9…27f8), ⬇ 14.3kiB/s ⬆ 4.4kiB/s\n```\n\n----------------------------------------\n\nTITLE: Cloning LRT Repository and Updating Dependencies using Bash\nDESCRIPTION: These commands clone the `tangle-network/lrt` GitHub repository, change the directory into the cloned project, and use `forge soldeer update` to install or update Solidity dependencies defined in the project. This is the first step in setting up the project environment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tangle-network/lrt\ncd lrt\nforge soldeer update -d\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Key File Generation\nDESCRIPTION: This command checks if the node key file has been successfully generated by listing its presence in the specified directory.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nls <BASE_PATH>/node-key\n```\n\n----------------------------------------\n\nTITLE: Building Tangle Node with Feature Flags using Cargo (Shell)\nDESCRIPTION: Compiles the Tangle node from source code using Rust's package manager, `cargo`. The `--release` flag optimizes the build for performance, and the `--features <feature-flag>` argument enables specific compile-time features like `txpool`, `relayer`, or `light-client`. Requires the Rust toolchain and the node's source code.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/node-software.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release --features <feature-flag>\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Tangle Binary Example (Shell Script)\nDESCRIPTION: This shell example illustrates downloading a specific, up-to-date Tangle mainnet binary (version v0.6.1 at time of writing). It uses wget to fetch the release directly. This snippet assumes the user has already determined the desired binary version, ensuring a reproducible and versioned installation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/tangle-network/tangle/releases/download/v0.6.1/tangle-mainnet-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Local Devnet\nDESCRIPTION: Command to deploy contracts to a local development network with ordered deployment\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer \\\n  --devnet \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Configuring Producer for Tangle Network Blueprint Runner\nDESCRIPTION: Sets up a TangleProducer in the Blueprint Runner configuration. This producer listens for finalized blocks on the Tangle network and converts them into job calls.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet result = BlueprintRunner::builder(tangle_config, env)\n    // ... other configuration ...\n    .add_producer(producer)\n    // ... more configuration ...\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Package Version\nDESCRIPTION: Command to verify the version of Grafana that will be installed from the repository.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\napt-cache policy grafana\n```\n\n----------------------------------------\n\nTITLE: Purging Mapped Tangle Node Data Directory (Shell)\nDESCRIPTION: This command recursively removes all files and directories within the specified path (`/data/chains/*`). It's used to purge the Tangle parachain node data when the data directory was mapped to a local path (e.g., using the `-v` flag during `docker run`). The comment indicates its specific purpose is purging standalone data.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# purges standalone data\nsudo rm -rf /data/chains/*\n```\n\n----------------------------------------\n\nTITLE: Calculating Ethereum Transaction Fees on Tangle Network using Fee Formula - plaintext\nDESCRIPTION: Shows the formula for computing Ethereum-like transaction fees on Tangle, reflecting modifications such as EIP-1559-like pricing plus substrate weight-to-gas conversion. Intended for integration into backend tooling or documentation logic. Inputs required are BaseFee, MaxPriorityFeePerGas, MaxFeePerGas, GasPrice, and Weight; output yields the computed fee. No external dependencies beyond context-specific values queried via Tangle's RPC. The formula highlights the 25000 divisor used for unit conversion.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/transaction-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGasPrice = min(BaseFee + MaxPriorityFeePerGas, MaxFeePerGas)\nTx Fee = (GasPrice * Weight) / 25000\n```\n\n----------------------------------------\n\nTITLE: Stopping Tangle Node Docker Container (Shell)\nDESCRIPTION: This command stops a running Docker container identified by its `CONTAINER_ID`. This step is necessary before purging node data, especially if the data volume was not mapped to a local directory using the `-v` flag.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker stop `CONTAINER_ID`\n```\n\n----------------------------------------\n\nTITLE: Running Tangle Node with Regular Testnet Configuration\nDESCRIPTION: Command to run the Tangle node with regular testnet configuration. This creates a node that produces blocks at fixed intervals rather than only when transactions are available.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/tangle --tmp --dev --validator -linfo \\\n--alice --rpc-cors all --rpc-methods=unsafe --rpc-external \\\n--rpc-port 9944 -levm=debug -lgadget=trace\n```\n\n----------------------------------------\n\nTITLE: Rotating Session Keys via CLI\nDESCRIPTION: cURL command to rotate session keys for a Tangle Network validator node through the RPC interface. This generates new session keys and returns their public parts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/validator/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"author_rotateKeys\", \"params\":[]}' http://localhost:9933\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Keys with Tangle CLI\nDESCRIPTION: Command for generating a new cryptographic key with options for key type, output path, seed, and showing the secret key. Includes examples for ECDSA and BLS key generation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key generate --key-type <KEY_TYPE> [OPTIONS]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Generate an ECDSA key and show the secret\ncargo tangle key generate --key-type ecdsa --show-secret\n\n# Generate a BLS key and save to a file\ncargo tangle key generate --key-type bls381 --output ./my-keystore\n```\n\n----------------------------------------\n\nTITLE: Demo: Creating New Blueprint\nDESCRIPTION: Example command for creating a new blueprint in the demo workflow.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint create --name my-blueprint\n```\n\n----------------------------------------\n\nTITLE: Running Binary with Help Flag\nDESCRIPTION: Commands to view all available flags using either a pre-built binary or a locally compiled binary of the Tangle node.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/flags.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tangle-YOUR-VERSION-HERE> --help\n```\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/tangle-YOUR-VERSION-HERE> --help\n```\n\n----------------------------------------\n\nTITLE: Cleanup Installation Files\nDESCRIPTION: Command to remove temporary installation files\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf ./alertmanager*\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for Homebrew\nDESCRIPTION: Command to add Homebrew binary path to system PATH configuration.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=/opt/homebrew/bin:$PATH' >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Rules Configuration\nDESCRIPTION: Example alert rules configuration for Prometheus\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n  - name: alert_rules\n    rules:\n      - alert: InstanceDown\n        expr: up == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Instance $labels.instance down\"\n          description: \"[{{ $labels.instance }}] of job [{{ $labels.job }}] has been down for more than 1 minute.\"\n\n      - alert: HostHighCpuLoad\n        expr: 100 - (avg by(instance)(rate(node_cpu_seconds_total{mode=\"idle\"}[2m])) * 100) > 80\n        for: 0m\n        labels:\n          severity: warning\n        annotations:\n          summary: Host high CPU load (instance bLd Kusama)\n          description: \"CPU load is > 80%\\n  VALUE = {{ $value }}\\n  LABELS: {{ $labels }}\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Annual Deposit Rewards Example (Plaintext)\nDESCRIPTION: Example calculation demonstrating how annual deposit rewards are determined for a user (Alice) based on APY, their score (including lock multipliers), total system score, total deposits, and maximum capacity. This applies the deposit reward formula presented earlier in the document.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/incentives-restakers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n5% × (2000/150,000) × (100,000/1,000,000) × 1000 TNT = 0.67 TNT\n```\n\n----------------------------------------\n\nTITLE: Starting Tangle Validator Node\nDESCRIPTION: Docker command to start a Tangle validator node with specific execution parameters and validator flag enabled.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --platform linux/amd64 --network=\"host\" \\\nghcr.io/tangle-network/tangle/tangle:main \\\n--base-path=/data \\\n--chain tangle-mainnet \\\n--name=\"YOUR-NODE-NAME\" \\\n--execution wasm \\\n--wasm-execution compiled \\\n--trie-cache-size 0 \\\n--validator \\\n--telemetry-url \"wss://telemetry.polkadot.io/submit/ 1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling AlertManager Service on Boot - Shell\nDESCRIPTION: This shell command enables the AlertManager service to start automatically at system boot. It uses systemctl to create the necessary symlinks in systemd and requires administrative privileges. The main parameter is the service name 'alertmanager.service', and successful execution ensures the monitoring service starts at every boot.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable alertmanager.service\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Tangle Network Blueprint Runner\nDESCRIPTION: Sets up a router for directing job calls to appropriate handlers in a Tangle Network Blueprint. This example configures a route for a 'square' job with specific layers and filters.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet router = Router::builder()\n    .add_route(\n        RouteBuilder::new(XSQUARE_JOB_ID)\n            .add_layer(TangleLayer::new(tangle_config.clone()))\n            .add_layer(FilterLayer::new(move |context| {\n                context\n                    .service_id\n                    .map(|id| id == service_id)\n                    .unwrap_or(false)\n            }))\n            .build::<SquareJobParams>(),\n    )\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating AlertManager User\nDESCRIPTION: Command to create a dedicated system user for AlertManager\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo useradd --no-create-home --shell /usr/sbin/nologin alertmanager\n```\n\n----------------------------------------\n\nTITLE: Initializing Logging Setup\nDESCRIPTION: Basic logging initialization for the test environment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlogging::setup_log();\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration File\nDESCRIPTION: YAML configuration for Prometheus defining scrape intervals, targets, and alert settings\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - 'rules.yml'\n\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - localhost:9093\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9090\"]\n  - job_name: \"substrate_node\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9615\"]\n  - job_name: \"node_exporter\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9100\"]\n  - job_name: \"process-exporter\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9256\"]\n```\n\n----------------------------------------\n\nTITLE: Starting AlertManager Service with Systemd - Shell\nDESCRIPTION: This shell snippet starts the AlertManager service using systemctl. Requires that the service unit file exists and systemd has reloaded its configuration. The key parameter is the service name 'alertmanager.service'. The expected outcome is that the service is launched if dependencies are satisfied.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start alertmanager.service\n```\n\n----------------------------------------\n\nTITLE: Using TangleClientContext in Rust\nDESCRIPTION: Example showing how to access and use the Subxt client functionality through the implemented context.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/tangle-client-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet _ = context.client();\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Callout in Markdown\nDESCRIPTION: This snippet demonstrates the use of the Callout component to create a warning message. It informs users about the deadline for claiming the TNT airdrop distribution.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/claim-airdrop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout emoji=\"⚠️\">\n  Genesis participants will have 1 year to claim their distribution, **the deadline is April 10 2025.** otherwise the amount is sent to the Tangle Network on-chain treasury.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Running the Tangle Node Binary (Shell)\nDESCRIPTION: Executes the Tangle node binary located in the current directory (`./`). This command starts the node process, which will then begin connecting to peers and synchronizing with the Tangle Network blockchain.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/node-software.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./tangle-default-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Installing AlertManager - Linux Downloads\nDESCRIPTION: Commands to download AlertManager for Linux AMD and ARM architectures\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.linux-amd64.tar.gz\n\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.linux-arm64.tar.gz &&\n```\n\n----------------------------------------\n\nTITLE: Running the AVS Service (Shell)\nDESCRIPTION: Starts the AVS service using the `cargo-tangle` blueprint run command. It specifies the Eigenlayer protocol (`-p eigenlayer`), requires an RPC URL (`-u <YOUR_RPC_URL>`), and optionally accepts a custom keystore path (`--keystore-path`). This command executes the built AVS binary.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint run \\\n  -p eigenlayer \\\n  -u <YOUR_RPC_URL> \\\n  (OPTIONAL) --keystore-path ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Starting Tangle Full Node\nDESCRIPTION: Docker command to start a Tangle full node with configuration for mainnet, including network ports and telemetry settings.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -it -v /var/lib/tangle/:/data ghcr.io/tangle-network/tangle/tangle:main \\\n  --chain tangle-mainnet \\\n  --name=\"YOUR-NODE-NAME\" \\\n  --base-path /data \\\n  --rpc-cors all \\\n  --port 9946 \\\n  --telemetry-url \"wss://telemetry.polkadot.io/submit/ 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Blueprint Runner with Background Service in Rust\nDESCRIPTION: Adds a background service to a Tangle Network Blueprint Runner configuration. This snippet shows how to include the Counter service in the runner setup.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet result = BlueprintRunner::builder(tangle_config, env)\n    .add_background_service(Arc::new(Counter {\n        count: Arc::new(AtomicU64::new(0)),\n    }))\n    // ... other configuration ...\n    .run()\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Downloading Tangle Binary - Linux Shell Command\nDESCRIPTION: Command to download the Tangle node binary from GitHub releases for Linux systems\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/tangle-network/tangle/releases/download/v1.0.0/tangle-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Initial Liquid Token Calculation\nDESCRIPTION: Formula to calculate immediately available tokens at launch based on total allocation and liquidity percentage.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/allocation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=Total_Tokens_Allocated * Immediate_Liquidity_Percentage\n```\n\n----------------------------------------\n\nTITLE: Whitelisting a Blueprint for Rewards in Tangle Network (Conceptual)\nDESCRIPTION: Describes the conceptual function `whitelist_blueprint_for_rewards` used in the Tangle Network. This function marks a specific blueprint as eligible for reward distribution, allowing services built using this blueprint to attract incentivized staking from operators and delegators.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/incentives/vaults.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwhitelist_blueprint_for_rewards\n```\n\n----------------------------------------\n\nTITLE: Cliff-Release Token Calculation\nDESCRIPTION: Formula to determine tokens released at the end of cliff period for allocations with retroactive vesting cliff.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/allocation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n=Total_Tokens_Allocated * (Cliff_Duration / Total_Vesting_Period)\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana AlertManager Plugin\nDESCRIPTION: Command to install the Prometheus AlertManager datasource plugin for Grafana.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource\n```\n\n----------------------------------------\n\nTITLE: Running AVS Service\nDESCRIPTION: Command to run the AVS service with custom RPC URL and optional keystore path\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint run \\\n  -p eigenlayer \\\n  -u <YOUR_RPC_URL> \\\n  (OPTIONAL) --keystore-path ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Compose Variables\nDESCRIPTION: Environment variable configuration for Docker Compose deployment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nRELEASE_VERSION=main\nCHAINSPEC_PATH=/tmp/chainspec/\n```\n\n----------------------------------------\n\nTITLE: Accessing Services Client in Rust\nDESCRIPTION: Example of accessing the services client functionality through the implemented context.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/services-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet services_client = ctx.services_client();\n```\n\n----------------------------------------\n\nTITLE: Installing GMP Dependency\nDESCRIPTION: Command to install the GMP (GNU Multiple Precision Arithmetic Library) via Homebrew.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gmp\n```\n\n----------------------------------------\n\nTITLE: Rendering AVS Resource Cards with CardGrid Component\nDESCRIPTION: TSX component implementation that renders a grid of cards showcasing different AVS development resources, including an example AVS and templates for BLS and ECDSA implementations.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CardGrid\n  cards={[\n      {\n          title: \"Incredible Squaring AVS\",\n          description: \"Explore the Incredible Squaring AVS example to understand how we implement an AVS.\",\n          link: \"/developers/eigenlayer-avs/incredible-squaring-avs\"\n      },\n      {\n          title: \"EigenLayer BLS AVS Template\",\n          description: \"Kickstart your AVS development with this BLS template.\",\n          link: \"/developers/eigenlayer-avs/bls-template\"\n      },\n      {\n          title: \"EigenLayer ECDSA AVS Template\",\n          description: \"Simplify your AVS development process using this ECDSA template.\",\n          link: \"/developers/eigenlayer-avs/ecdsa-template\"\n      }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Non-Vested Allocation Calculation\nDESCRIPTION: Formula for calculating total tokens for entities without vesting plans like Treasury and Foundation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/allocation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n=Total_Tokens_Allocated\n```\n\n----------------------------------------\n\nTITLE: Preimage Precompile Contract Address\nDESCRIPTION: The fixed contract address for the Preimage Precompile on both Tangle Mainnet and Testnet networks.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/governance/preimage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x0000000000000000000000000000000000000806\n```\n\n----------------------------------------\n\nTITLE: Installing Polkadot-JS CLI Tool (Shell)\nDESCRIPTION: This command installs the `@polkadot/api-cli` package globally using npm (Node Package Manager). This CLI tool is required to interact with the Tangle Network for staking operations via the command line. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/nominator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @polkadot/api-cli\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Generated AVS Project (Bash)\nDESCRIPTION: Navigates the command line session into the newly created `my-avs` project directory. This step is necessary before running subsequent commands that operate within the project's context, such as deployment or running the AVS.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-example.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-avs\n```\n\n----------------------------------------\n\nTITLE: Running Tangle Node with Instant-Seal Configuration\nDESCRIPTION: Command to run the Tangle node with instant-seal configuration. This sets up a development environment with various debugging and external RPC options enabled.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/tangle --tmp --dev --validator -linfo \\\n--alice --rpc-cors all --rpc-methods=unsafe --rpc-external \\\n--rpc-port 9944 -levm=debug -lgadget=trace --sealing instant\n```\n\n----------------------------------------\n\nTITLE: Tailing Tangle Validator Node Service Logs\nDESCRIPTION: Displays the latest log output from the `validator.service` in real-time using `journalctl`. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u validator.service -f\n```\n\n----------------------------------------\n\nTITLE: Job Registration in Router Configuration for Incredible Squaring Blueprint\nDESCRIPTION: Example from the Incredible Squaring Blueprint showing how to register a job with a router in a Blueprint Runner implementation. This snippet demonstrates the main function setting up a router with a specific job route.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/jobs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// GitHub file content referenced but not directly shown in the snippet\n```\n\n----------------------------------------\n\nTITLE: Tailing Tangle Full Node Service Logs\nDESCRIPTION: Displays the latest log output from the `full.service` in real-time using `journalctl`. Useful for monitoring node activity and troubleshooting. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo journalctl -u full.service -f\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigational Cards for Staking Concepts using JSX\nDESCRIPTION: This JSX snippet utilizes a custom 'CardGrid' component, likely imported from '../../components/CardGrid', to display a grid of interactive cards. Each card provides a title, description, and a relative link ('../restake/...') directing users to more detailed documentation pages covering Validator Staking, Restaking, Liquid Staking, and Liquid Restaking within the Tangle network. The component takes an array of card objects as its 'cards' prop.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid cards={[\n  {\n    title: \"Validator Staking\",\n    description: \"Learn about Tangle's Nominated Proof of Stake (NPoS) system for validator selection and rewards.\",\n    link: \"../restake/staking-intro\"\n  },\n  {\n    title: \"Restaking\", \n    description: \"Discover Tangle's permissionless and asset-configurable restaking system for Blueprints and shared security.\",\n    link: \"../restake/restake-introduction\"\n  },\n  {\n    title: \"Liquid Staking\",\n    description: \"Explore Tangle's liquid staking protocols for validator-specific staking operations and liquid staked tokens (LSTs).\",\n    link: \"../restake/lst-concepts\"\n  },\n  {\n    title: \"Liqued Restaking\", \n    description: \"Learn about how to build a LRT (Liquid Restaking Token) vaults and how to use it for restaking.\",\n    link: \"../restake/lrt-concepts\"\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Governance Parameter Durations in Markdown\nDESCRIPTION: A markdown table showing the durations of various governance parameters for Tangle Network, including LaunchPeriod, VotingPeriod, FastTrackVotingPeriod, EnactmentPeriod, and CooloffPeriod. Durations are provided in both minutes and days.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/governance/governance-parameters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter               | Duration (minutes) | Duration (days) |\n| ----------------------- | -----------------: | --------------: |\n| `LaunchPeriod`          |              40320 |              28 |\n| `VotingPeriod`          |              40320 |              28 |\n| `FastTrackVotingPeriod` |               4320 |               3 |\n| `EnactmentPeriod`       |              43200 |              30 |\n| `CooloffPeriod`         |              40320 |              28 |\n```\n\n----------------------------------------\n\nTITLE: Example Workflow: Building Eigenlayer AVS\nDESCRIPTION: Command to build the AVS project in release mode.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Building Tangle Node with Instant-Seal Feature\nDESCRIPTION: Command to build the Tangle node with instant-seal feature, which produces blocks only when transactions are available. This accelerates the testing process compared to the production runtime.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release --features manual-seal,txpool,testnet\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Service Status with systemd in Shell\nDESCRIPTION: Uses `systemctl status prometheus.service` to display the current status of the Prometheus service, including whether it's active, logs, and other relevant information. `sudo` is often required to see full details, though not strictly necessary just to check basic status.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl status prometheus.service\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods for the Aggregator Context in Rust\nDESCRIPTION: Implementation of custom functionality for the AggregatorContext including methods to submit tasks to the task registry contract. The method handles creating the transaction call data, submitting it, and returning the result.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-contexts/eigenlayer-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl AggregatorContext {\n    pub async fn submit_task_to_task_registry(\n        &self,\n        task_response_commitment: [u8; 32],\n        task_response_signature: Vec<u8>,\n        task_index: U256,\n    ) -> Result<TxHash> {\n        let contract = task_registry::TaskRegistry::new(\n            self.config.task_registry_addr.parse::<Address>()?,\n            Arc::clone(&self.client),\n        );\n        let call = contract.submit_task_response(\n            task_response_commitment,\n            task_response_signature,\n            task_index,\n        );\n        Ok(self.submit_transaction(call, \"submit_task_response\").await?)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AlertManager Systemd Service - Shell\nDESCRIPTION: This shell script creates a new systemd service file for AlertManager, specifying configuration such as user, group, and startup parameters. It uses 'sudo tee' to write the unit file to '/etc/systemd/system/alertmanager.service' and includes necessary directives for running and restarting the service. Dependencies include systemd and administrative privileges. Inputs are provided directly in the script, and the output is the creation of the service file for further use.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/alertmanager.service > /dev/null << EOF\\n[Unit]\\n  Description=AlertManager Server Service\\n  Wants=network-online.target\\n  After=network-online.target\\n\\n[Service]\\n  User=alertmanager\\n  Group=alertmanager\\n  Type=simple\\n  ExecStart=/usr/local/bin/alertmanager \\\\\\n   --config.file /etc/alertmanager/alertmanager.yml \\\\\\n   --storage.path /var/lib/alertmanager \\\\\\n   --web.external-url=http://localhost:9093 \\\\\\n   --cluster.advertise-address='0.0.0.0:9093'\\n\\n[Install]\\nWantedBy=multi-user.target\\nEOF\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NetworkTabs Component in Markdown\nDESCRIPTION: This snippet demonstrates how to import a React component called NetworkTabs and use it within a Markdown file. The component is imported from a relative path and then inserted into the markdown content.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/endpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NetworkTabs from \"../../components/NetworkResources.tsx\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<NetworkTabs />\n```\n\n----------------------------------------\n\nTITLE: Rendering CardGrid Component with Blueprint Information\nDESCRIPTION: This JSX code renders the CardGrid component with an array of card objects. Each card contains information about different aspects of Tangle Blueprints, including titles, descriptions, and links to further resources.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid\n  cards={[\n    {\n      title: \"Tangle's Blueprint Gadget SDK\",\n      description: \"Learn about the Gadget SDK and how to get started building your own gadgets.\",\n      link: \"/developers/gadget-sdk\"\n    },\n    {\n      title: \"Hello World Blueprint\", \n      description: \"Get started with a simple Hello World example using Tangle Blueprints.\",\n      link: \"/developers/tangle-avs\"\n    },\n    {\n      title: \"Build an Eigenlayer AVS\",\n      description: \"Build an Eigenlayer AVS with the Tangle Blueprint SDK and hook into a variety of EVM compatible utilities for task automation, slashing, and more.\",\n      link: \"/developers/eigenlayer-avs/overview\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining the MultiAssetDelegationPrecompile Interface in Solidity\nDESCRIPTION: This Solidity interface defines the structure and functions available for interacting with the MultiAssetDelegationPrecompile contract (address 0x0000000000000000000000000000000000000822). It includes functions for operator management (joining, leaving, bonding, unstaking, status changes), asset handling (deposit, withdraw), and delegation operations (delegate, unstake). Requires Solidity compiler version 0.8.3 or higher.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake_developers/restake_precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.3;\n\n/// @dev The MultiAssetDelegation contract's address.\naddress constant MULTI_ASSET_DELEGATION = 0x0000000000000000000000000000000000000822;\n\n/// @dev The MultiAssetDelegation contract's instance.\nMultiAssetDelegation constant MULTI_ASSET_DELEGATION_CONTRACT = MultiAssetDelegation(MULTI_ASSET_DELEGATION);\n\n/// @author The Tangle Team\n/// @title Pallet MultiAssetDelegation Interface\n/// @title The interface through which solidity contracts will interact with the MultiAssetDelegation pallet\n/// @custom:address 0x0000000000000000000000000000000000000822\ninterface MultiAssetDelegation {\n    /// @dev Join as an operator with a bond amount.\n    /// @param bondAmount The amount to bond as an operator.\n    function joinOperators(uint256 bondAmount) external returns (uint8);\n\n    /// @dev Schedule to leave as an operator.\n    function scheduleLeaveOperators() external returns (uint8);\n\n    /// @dev Cancel the scheduled leave as an operator.\n    function cancelLeaveOperators() external returns (uint8);\n\n    /// @dev Execute the leave as an operator.\n    function executeLeaveOperators() external returns (uint8);\n\n    /// @dev Bond more as an operator.\n    /// @param additionalBond The additional amount to bond.\n    function operatorBondMore(uint256 additionalBond) external returns (uint8);\n\n    /// @dev Schedule to unstake as an operator.\n    /// @param unstakeAmount The amount to unstake.\n    function scheduleOperatorUnstake(uint256 unstakeAmount) external returns (uint8);\n\n    /// @dev Execute the unstake as an operator.\n    function executeOperatorUnstake() external returns (uint8);\n\n    /// @dev Cancel the scheduled unstake as an operator.\n    function cancelOperatorUnstake() external returns (uint8);\n\n    /// @dev Go offline as an operator.\n    function goOffline() external returns (uint8);\n\n    /// @dev Go online as an operator.\n    function goOnline() external returns (uint8);\n\n    /// @dev Deposit an amount of an asset.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to deposit.\n    function deposit(uint256 assetId, uint256 amount) external returns (uint8);\n\n    /// @dev Schedule a withdrawal of an amount of an asset.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to withdraw.\n    function scheduleWithdraw(uint256 assetId, uint256 amount) external returns (uint8);\n\n    /// @dev Execute the scheduled withdrawal.\n    function executeWithdraw() external returns (uint8);\n\n    /// @dev Cancel the scheduled withdrawal.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to cancel withdrawal.\n    function cancelWithdraw(uint256 assetId, uint256 amount) external returns (uint8);\n\n    /// @dev Delegate an amount of an asset to an operator.\n    /// @param operator The address of the operator.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to delegate.\n    function delegate(bytes32 operator, uint256 assetId, uint256 amount) external returns (uint8);\n\n    /// @dev Schedule an unstake of an amount of an asset as a delegator.\n    /// @param operator The address of the operator.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to unstake.\n    function scheduleDelegatorUnstake(bytes32 operator, uint256 assetId, uint256 amount) external returns (uint8);\n\n    /// @dev Execute the scheduled unstake as a delegator.\n    function executeDelegatorUnstake() external returns (uint8);\n\n    /// @dev Cancel the scheduled unstake as a delegator.\n    /// @param operator The address of the operator.\n    /// @param assetId The ID of the asset.\n    /// @param amount The amount to cancel unstake.\n    function cancelDelegatorUnstake(bytes32 operator, uint256 assetId, uint256 amount) external returns (uint8);\n}\n```\n\n----------------------------------------\n\nTITLE: Building AVS Project\nDESCRIPTION: Command to build the AVS project in release mode\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Starting Process Exporter Service with systemd in Shell\nDESCRIPTION: Runs `sudo systemctl start process-exporter.service` to start the Process Exporter service. This command depends on the prior creation of the `process-exporter.service` file and a systemd daemon reload. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl start process-exporter.service\n```\n\n----------------------------------------\n\nTITLE: Building the AVS Project (Shell)\nDESCRIPTION: Compiles the Rust-based AVS project in release mode using Cargo, the Rust package manager. This creates an optimized executable for deployment and running the service.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/bls-template.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Checking Node Exporter Service Status with systemd in Shell\nDESCRIPTION: Executes `systemctl status node_exporter.service` to check and report the current runtime status of the Node Exporter service. It shows if the service is running, recent log entries, and process details. `sudo` may be needed for complete information.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl status node_exporter.service\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in Markdown\nDESCRIPTION: This code snippet imports the Callout component from the nextra/components library. It's used to create highlighted information boxes in the markdown document.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/claim-airdrop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Using CardGrid Component to Display Example Links in TSX\nDESCRIPTION: Demonstrates the usage of the imported `CardGrid` component in TSX. It is passed a `cards` prop containing an array of objects. Each object represents a card with properties for `title`, `description`, and a `link` URL, showcasing example Blueprint implementations (FROST and BLS).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CardGrid\n    cards={[\n        {\n            title: \"FROST Blueprint\",\n            description: \"A FROST Blueprint for Tangle Network.\",\n            link: \"https://github.com/tangle-network/frost-blueprint\"\n        },\n        {\n            title: \"BLS Blueprint\",\n            description: \"A BLS Blueprint that can run keygen and signing jobs on demand from the Tangle network.\",\n            link: \"https://github.com/tangle-network/bls-blueprint\"\n        }\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Grid Component in TSX\nDESCRIPTION: Import statement for a CardGrid component used to display AVS development resources in a grid layout.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport CardGrid from \"../../../components/CardGrid.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Running Tangle AVS Tests\nDESCRIPTION: Command to run tests for Tangle AVS against local testnets with detailed logging enabled.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/tangle-avs/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=gadget=trace cargo test test_full_tangle_avs -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Example Tangle Node Synchronization Output\nDESCRIPTION: Shows sample log output from a Tangle node as it syncs with the network. It includes information about discovered peers, synchronization speed (bps), block height targets, best and finalized blocks, and network traffic.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n2021-06-17 03:07:39 🔍 Discovered new external address for our node: /ip4/10.26.16.1/tcp/30333/ws/p2p/12D3KooWLtXFWf1oGrnxMGmPKPW54xWCHAXHbFh4Eap6KXmxoi9u\n2021-06-17 03:07:40 ⚙️  Syncing 218.8 bps, target=#5553764 (17 peers), best: #24034 (0x08af…dcf5), finalized #23552 (0xd4f0…2642), ⬇ 173.5kiB/s ⬆ 12.7kiB/s\n2021-06-17 03:07:45 ⚙️  Syncing 214.8 bps, target=#5553765 (20 peers), best: #25108 (0xb272…e800), finalized #25088 (0x94e6…8a9f), ⬇ 134.3kiB/s ⬆ 7.4kiB/s\n2021-06-17 03:07:50 ⚙️  Syncing 214.8 bps, target=#5553766 (21 peers), best: #26182 (0xe7a5…01a2), finalized #26112 (0xcc29…b1a9), ⬇ 5.0kiB/s ⬆ 1.1kiB/s\n2021-06-17 03:07:55 ⚙️  Syncing 138.4 bps, target=#5553767 (21 peers), best: #26874 (0xcf4b…6553), finalized #26624 (0x9dd9…27f8), ⬇ 18.9kiB/s ⬆ 2.0kiB/s\n2021-06-17 03:08:00 ⚙️  Syncing 37.0 bps, target=#5553768 (22 peers), best: #27059 (0x5b73…6fc9), finalized #26624 (0x9dd9…27f8), ⬇ 14.3kiB/s ⬆ 4.4kiB/s\n```\n\n----------------------------------------\n\nTITLE: Network Setup Delay\nDESCRIPTION: Add delay to allow for network handshakes to complete.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ntokio::time::sleep(std::time::Duration::from_secs(10)).await;\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: Service definitions for Loki and Promtail systemd services.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/loki.service > /dev/null << EOF\n[Unit]\n  Description=Loki Service\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=loki\n  Group=loki\n  Type=simple\n  ExecStart=/usr/local/bin/loki-linux-amd64 -config.file /etc/loki/config.yml\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Service Requests\nDESCRIPTION: Command to list all pending service requests in the system.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint list-requests --ws-rpc-url <ws-url>\n```\n\n----------------------------------------\n\nTITLE: Checking Process Exporter Service Status with systemd in Shell\nDESCRIPTION: Runs `systemctl status process-exporter.service` to query and display the status of the Process Exporter service managed by systemd. This helps verify if the service started correctly and is currently running. `sudo` might be required for full details.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl status process-exporter.service\n```\n\n----------------------------------------\n\nTITLE: Importing CardGrid Component in TSX\nDESCRIPTION: Imports the `CardGrid` component from a relative path (`../../../components/CardGrid.tsx`) within the project structure. This component is used later in the file to render a grid of cards.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport CardGrid from \"../../../components/CardGrid.tsx\"\n```\n\n----------------------------------------\n\nTITLE: ExpandableImage Component Usage for Tangle Diagram\nDESCRIPTION: JSX implementation showing how the ExpandableImage component is used to display the Tangle architecture diagram with zoom capability\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/differences.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableImage src=\"/images/architecture/tangle.png\" alt=\"Tangle Architecture\" allowZoom={true}/>\n```\n\n----------------------------------------\n\nTITLE: Accepting Service Requests\nDESCRIPTION: Command for operators to accept service requests with configurable exposure and restaking percentages.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint accept-request --ws-rpc-url <ws-url> --min-exposure-percent <min> --max-exposure-percent <max> --restaking-percent <percent> --keystore-uri <path> --request-id <id>\n```\n\n----------------------------------------\n\nTITLE: Executing Solidity Tests with Forge using Bash\nDESCRIPTION: This command uses the Forge tool (`forge test`) to execute the Solidity tests defined in the project's `test` directory. The `-vv` flag increases verbosity, providing more detailed output during the test execution. It requires Foundry to be installed and tests to be written.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge test -vv\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-tangle CLI Tool\nDESCRIPTION: Command to install the cargo-tangle CLI tool from the Tangle Network blueprint repository\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install cargo-tangle --git https://github.com/tangle-network/blueprint --force\n```\n\n----------------------------------------\n\nTITLE: Downloading Loki for Different Architectures\nDESCRIPTION: Commands for downloading Loki binary files for different operating systems and architectures (AMD/ARM).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O -L \"https://github.com/grafana/loki/releases/download/v2.7.0/loki-darwin-amd64.zip\"\n```\n\n----------------------------------------\n\nTITLE: Registering for Blueprint Operation\nDESCRIPTION: Command to register as an operator for a specific Blueprint using blueprint ID and keystore.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint register --ws-rpc-url <ws-url> --blueprint-id <id> --keystore-uri <path>\n```\n\n----------------------------------------\n\nTITLE: Copying AlertManager Binaries\nDESCRIPTION: Commands to copy AlertManager binaries to system directory\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo cp ./alertmanager-*.linux-amd64/alertmanager /usr/local/bin/ &&\nsudo cp ./alertmanager-*.linux-amd64/amtool /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Importing ExpandableImage Component in JavaScript/JSX\nDESCRIPTION: This JavaScript code imports the `ExpandableImage` component from a relative path (`../../components/ExpandableImage`). This component is intended for use within the documentation page, likely within a framework like MDX or React, to display images with interactive capabilities such as expansion.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake-introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExpandableImage from \"../../components/ExpandableImage\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering LandingPage Component in React/JSX\nDESCRIPTION: This code imports a LandingPage component from the components directory and renders it within the current page. The component likely contains the main content for an overview of the Tangle Network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LandingPage from \"../components/LandingPage\";\n\n<LandingPage />\n```\n\n----------------------------------------\n\nTITLE: Using Callout Component in JSX/MDX\nDESCRIPTION: Renders an informational callout box using the previously imported 'Callout' component. The 'type=\"info\"' prop specifies the style or type of the callout. The content emphasizes the importance of using the correct network when performing liquid staking operations.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst-assets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\nWhen performing liquid staking operations, ensure that you are using the correct network for the asset you are working with.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Blueprint Pricing in TOML\nDESCRIPTION: TOML configuration file that defines pricing structure for blueprint services. Includes default pricing for all blueprints and specific pricing for individual blueprints based on resource types like CPU, Memory, Storage, Network, and GPU usage.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/pricing/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Default pricing for all blueprints\n[default]\nresources = [\n  { kind = \"CPU\", count = 1, price_per_unit_rate = 0.001 },\n  { kind = \"MemoryMB\", count = 1024, price_per_unit_rate = 0.00005 },\n  { kind = \"StorageMB\", count = 1024, price_per_unit_rate = 0.00002 },\n  { kind = \"NetworkEgressMB\", count = 1024, price_per_unit_rate = 0.00003 },\n  { kind = \"NetworkIngressMB\", count = 1024, price_per_unit_rate = 0.00001 },\n  { kind = \"GPU\", count = 1, price_per_unit_rate = 0.005 }\n]\n\n# Blueprint-specific pricing (overrides default)\n[123]  # Blueprint ID\nresources = [\n  { kind = \"CPU\", count = 1, price_per_unit_rate = 0.0012 },\n  { kind = \"MemoryMB\", count = 2048, price_per_unit_rate = 0.00006 },\n  { kind = \"StorageMB\", count = 1024, price_per_unit_rate = 0.00002 },\n  { kind = \"NetworkEgressMB\", count = 1024, price_per_unit_rate = 0.00003 },\n  { kind = \"NetworkIngressMB\", count = 1024, price_per_unit_rate = 0.00001 },\n  { kind = \"GPU\", count = 1, price_per_unit_rate = 0.005 }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating New ECDSA AVS Project\nDESCRIPTION: Command to create a new ECDSA AVS project using the cargo-tangle blueprint tool\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint create --name <blueprint_name> --eigenlayer ecdsa\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose\nDESCRIPTION: Command to start the Tangle node using Docker Compose in detached mode.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Build Tool using Bash\nDESCRIPTION: This command downloads and executes the Foundry installation script using `curl` and `bash`, then updates Foundry using `foundryup`. Foundry is required for compiling, testing, and deploying the Solidity smart contracts for the LRT Vault.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lrt_developers/lrt-vault.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Enabling Node Exporter Service Autostart with systemd in Shell\nDESCRIPTION: Uses `sudo systemctl enable node_exporter.service` to enable the Node Exporter service, ensuring it starts automatically when the system boots up. This command modifies systemd's service links. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable node_exporter.service\n```\n\n----------------------------------------\n\nTITLE: Displaying USDT Token Symbol with Icon using HTML/JSX\nDESCRIPTION: This HTML/JSX snippet renders the USDT token symbol along with its corresponding icon. It uses a `span` element with Tailwind CSS classes for layout (`flex items-center gap-1`) and an `img` tag to display the icon (`/icons/usdt.svg`). Assumes necessary CSS (Tailwind) and image assets are available.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span className=\\\"flex items-center gap-1\\\"><img src=\\\"/icons/usdt.svg\\\" alt=\\\"USDT\\\" width=\\\"24\\\" height=\\\"24\\\" /> USDT</span>\n```\n\n----------------------------------------\n\nTITLE: Embedding Expandable Image in Markdown (JavaScript/Markdown)\nDESCRIPTION: This snippet embeds the 'ExpandableImage' React component within Markdown, displaying an interactive image with zoom capabilities. The component requires 'src', 'alt', and 'allowZoom' props to configure the image source, accessibility text, and zoom behavior. It depends on the prior import and is designed to visually support documentation with scalable images for user exploration.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/inflation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ExpandableImage src=\"/images/desmos-graph.png\" alt=\"Inflation Graph\" allowZoom={true} />\n```\n\n----------------------------------------\n\nTITLE: Tangle Consumer Structure Definition\nDESCRIPTION: Defines the structure of a TangleConsumer with its associated types and implementation details for handling Tangle-specific transactions.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/consumers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct TangleConsumer<Client, Signer> {\n    client: Client,\n    signer: Signer,\n    submission_strategy: Arc<SubmissionStrategy>,\n    call_filter: Option<Box<dyn CallFilter>>,\n    nonce: AtomicU32,\n    pending_calls: Arc<Mutex<HashSet<PendingCall>>>,\n    call_timeout: Option<Duration>,\n    submission_timeout: Option<Duration>,\n    max_pending_calls: Option<usize>,\n    _marker: PhantomData<Client>,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Rust Environment for Tangle Node (Shell Script)\nDESCRIPTION: This shell block installs Rust via the rustup installer, enables the nightly toolchain, and adds the wasm32-unknown-unknown target for compiling to WebAssembly. It uses curl to fetch the installation script, sources cargo environment variables, and updates both stable and nightly channels. Users need to select installation option 1 when prompted. Requires a working internet connection and sufficient user permissions.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n# choose option 1\nsource $HOME/.cargo/env\nrustup default nightly\nrustup update\nrustup update nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: Configuring GMP Library Path\nDESCRIPTION: Commands to clean cargo build and configure GMP library path for proper linking.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo clean\nexport LIBRARY_PATH=$LIBRARY_PATH:$(brew --prefix)/lib:$(brew --prefix)/opt/gmp/lib\n```\n\n----------------------------------------\n\nTITLE: Rejecting Service Requests\nDESCRIPTION: Command for operators to reject specific service requests.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint reject-request --ws-rpc-url <ws-url> --keystore-uri <path> --request-id <id>\n```\n\n----------------------------------------\n\nTITLE: File Extraction and Installation\nDESCRIPTION: Commands for extracting and installing Loki and Promtail binaries.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nunzip \"loki-linux-amd64.zip\" &&\nunzip \"promtail-linux-amd64.zip\"\n```\n\n----------------------------------------\n\nTITLE: Blueprint Price Calculation Formula\nDESCRIPTION: Mathematical formula used to calculate the final price for blueprint execution. The price is determined by multiplying the resource cost by duration and security factors.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/pricing/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPrice = Resource Cost × Duration Factor × Security Factor\n```\n\n----------------------------------------\n\nTITLE: Development Private Keys Configuration\nDESCRIPTION: Constant array containing private keys used for development and testing purposes\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub const ANVIL_PRIVATE_KEYS: [&str; 10] = [\n    \"ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\",\n    \"59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\",\n    \"5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\",\n    \"7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\",\n    \"47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\",\n    \"8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba\",\n    \"92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e\",\n    \"4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356\",\n    \"dbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97\",\n    \"2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6\"\n];\n```\n\n----------------------------------------\n\nTITLE: Reloading SystemD Daemon\nDESCRIPTION: Command to reload systemd daemon to recognize new service configurations.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Router Configuration in Incredible Squaring Example\nDESCRIPTION: Real-world example from the Incredible Squaring Blueprint showing router configuration with service ID filtering and layer implementation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/routers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet blueprint_runner = BlueprintRunner::new(\"incredible-squaring\".to_string())\n    .router(\n        Router::builder()\n            .service_id(service_id)\n            .route(\n                \"square\".to_string(),\n                Job::new(square)\n                    .with_layer(TangleLayer)\n                    .with_context(context.clone()),\n            )\n            .route(\n                \"multiply\".to_string(),\n                Job::new(multiply).with_context(context.clone()),\n            ),\n    )\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Installing AlertManager - Darwin ARM Download\nDESCRIPTION: Command to download AlertManager for macOS ARM architecture\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.darwin-arm64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Network Parameters Table in Markdown\nDESCRIPTION: A markdown table defining the time durations for different network intervals including slots, epochs, sessions and eras in the Tangle network.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/network-parameters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tangle  | Time      |\n| ------- | --------- |\n| Slot    | 6 seconds |\n| Epoch   | 4 hours   |\n| Session | 4 hours   |\n| Era     | 24 hours  |\n```\n\n----------------------------------------\n\nTITLE: Example Output of Successfully Running Tangle Node\nDESCRIPTION: The expected console output when the Tangle node starts running successfully. It shows the Tangle ASCII art logo and initialization information.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/testing-with-tangle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/tangle --tmp --dev --validator -linfo --alice --rpc-cors all --rpc-methods=unsafe --rpc-external --rpc-port 9944 -levm=debug -lgadget=trace --sealing instant\n    ++++++++++++++++++++++++\n\t+++++++++++++++++++++++++++\n\t+++++++++++++++++++++++++++\n\t+++        ++++++      +++         @%%%%%%%%%%%                                     %%%\n\t++++++      ++++      +++++        %%%%%%%%%%%%                                     %%%@\n\t++++++++++++++++++++++++++            %%%%      %%%%@     %%% %%@       @%%%%%%%   %%%@    %%%%@\n\t       ++++++++                       %%%%    @%%%%%%%@   %%%%%%%%%   @%%%%%%%%%   %%%@  %%%%%%%%%\n\t       ++++++++                       %%%%    %%%%%%%%%   %%%% @%%%@  %%%%  %%%%   %%%@  %%%%%%%%%%\n\t++++++++++++++++++++++++++            %%%%    %%%%%%%%%   %%%   %%%%  %%%   @%%%   %%%@ @%%%%%  %%%%%\n\t++++++      ++++      ++++++          %%%%    %%%%%%%%%   %%%   %%%%  %%%%%%%%%%   %%%@  %%%%%%%%%@\n\t+++        ++++++        +++          %%%%    %%%%%%%%%   %%%   %%%@   %%%%%%%%%   %%%    %%%%%%%@\n\t++++      +++++++++      +++                                           %%%%  %%%%\n\t++++++++++++++++++++++++++++                                           %%%%%%%%%\n\t  +++++++++++++++++++++++                                                 %%%%%\n\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: Tangle Node\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: ✌️  version 1.2.0-cedde5d83a0\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: ❤️  by Webb Technologies Inc., 2023-2024\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: 📋 Chain specification: Local Testnet\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: 🏷  Node name: Alice\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: 👤 Role: AUTHORITY\n2024-10-30 16:00:54.306  INFO main sc_cli::runner: 💾 Database: RocksDb at /var/folders/ht/41y18g597_9_1035dlw0m3700000gn/T/substrateGSJexb/chains/local_testnet/db/full\n2024-10-30 16:00:55.347  INFO main runtime::staking: [0] 💸 generated 5 npos voters, 5 from validators and 0 nominators\n2024-10-30 16:00:55.347  INFO main runtime::staking: [0] 💸 generated 5 npos targets\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Key File Existence\nDESCRIPTION: Lists the contents of the specified base path directory to confirm that the `node-key` file was successfully generated in the previous step. The `<BASE_PATH>` placeholder must be replaced with the actual path.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/systemd.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nls <BASE_PATH>/node-key\n```\n\n----------------------------------------\n\nTITLE: Generating Mnemonic Phrases with Tangle CLI\nDESCRIPTION: Command for generating a new mnemonic phrase for key recovery with an option to specify the word count. Includes an example for a 24-word mnemonic.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key generate-mnemonic [OPTIONS]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a 24-word mnemonic\ncargo tangle key generate-mnemonic --word-count 24\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Repository to APT Sources\nDESCRIPTION: Command to add the official Grafana repository to APT sources list.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo add-apt-repository \"deb https://packages.grafana.com/oss/deb stable main\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run the test suite for the AVS implementation\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Calculating Individual User's Service Revenue Share (Plaintext)\nDESCRIPTION: Example calculation demonstrating how an individual restaker's (Alice's) share of the monthly service revenue is calculated. It uses her total restaking score (3000 points) relative to the total service restaking score (10000 points) and applies this ratio to the total revenue allocated to restakers (300 USDC).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/incentives-restakers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n300 USDC × (3000/10000) = 90 USDC per month\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Dependency\nDESCRIPTION: Command to install Protocol Buffers dependency via Homebrew.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install protobuf\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shutdown Logic for Tangle Network Blueprint Runner\nDESCRIPTION: Demonstrates how to add custom shutdown logic to a Tangle Network Blueprint Runner. This example simply prints a message when the runner is shutting down.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/building.mdx#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet result = BlueprintRunner::builder(tangle_config, env)\n    // ... other configuration ...\n    .on_shutdown(|| async {\n        println!(\"Blueprint Runner is shutting down\");\n    })\n    // ... more configuration ...\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Page (JavaScript/JSX)\nDESCRIPTION: Imports custom React components (`CommonActions`, `ExpandableImage`) from relative paths and a standard Nextra component (`Callout`) for use within the MDX documentation page. These components are likely used to enhance the page's structure and interactivity, such as displaying common actions, expandable images, and informational callouts.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/account-manage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CommonActions } from \"../../components/CommonActions\";\nimport ExpandableImage from \"../../components/ExpandableImage\";\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Glacis Sample Client Contract Address on Tangle Mainnet (Plaintext)\nDESCRIPTION: Provides the deployed Ethereum address for the Glacis Sample Client contract on the Tangle mainnet. This contract serves as a reference implementation for developers building applications that utilize the Glacis protocol for cross-chain operations on Tangle.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/glacis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0xD2bE908f2e24C14Cd24b80A7A6d093Ee2a740A6A\n```\n\n----------------------------------------\n\nTITLE: Extracting AlertManager Archive\nDESCRIPTION: Command to extract the downloaded AlertManager archive\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntar xvf alertmanager-*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: ExpandableImage Component Usage for Eigenlayer Diagram\nDESCRIPTION: JSX implementation showing how the ExpandableImage component is used to display the Eigenlayer architecture diagram with zoom capability\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/differences.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableImage src=\"/images/architecture/eigenlayer.png\" alt=\"Eigenlayer vs Tangle\" allowZoom={true}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on macOS\nDESCRIPTION: Command to install Homebrew package manager on macOS systems.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Total Asset Balance via MultiAssetDelegation Precompile (Solidity)\nDESCRIPTION: Example function signature for querying the total balance (deposited + delegated) of a specific asset for a given address using the Tangle MultiAssetDelegation precompile. Requires the address to check (`who`), the asset ID (0 for ERC20), and the token address (if ERC20).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/features/multi-asset-delegation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nbalanceOf(address who, uint256 assetId, address tokenAddress)\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Dependencies on Linux\nDESCRIPTION: Commands to install required dependencies and add Grafana GPG key on Linux systems.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install -y apt-transport-https\nsudo apt-get install -y software-properties-common wget\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Importing TokenContracts Component into React Docs File - JavaScript\nDESCRIPTION: This snippet imports the TokenContracts component from the ../../components/TokenContracts module for use within a React-based documentation page. The import ensures that contract-related UI components or data can be rendered dynamically as part of the documentation flow. It requires the file structure of the project to contain the specified path, and assumes that TokenContracts is a valid React component; no parameters are passed at import time. Expected behavior is that the page is able to use the <TokenContracts /> tag for displaying token contract details; missing or misnamed files will result in a build or runtime error.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/hyperlane.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TokenContracts } from \"../../components/TokenContracts\";\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Help Flag\nDESCRIPTION: Command to view all available flags for a Tangle node using Docker container. Mounts a data volume and runs with host network access.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/flags.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=\"host\" -v \"/var/lib/data:/data\"\n-u $(id -u ${USER}):$(id -g ${USER})\nghcr.io/tangle-network/tangle/tangle:main --help\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Permissions - Linux Shell Command\nDESCRIPTION: Command to make the downloaded Tangle binary executable\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x tangle-default-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Demo: Blueprint Registration\nDESCRIPTION: Example command for registering to a deployed blueprint using test keystore.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/tangle.mdx#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint register --blueprint-id 0 --keystore-uri ./test-keystore\n```\n\n----------------------------------------\n\nTITLE: Tangle Network URLs\nDESCRIPTION: Direct access URLs for connecting to Tangle Network's testnet and mainnet environments through PolkadotJS Apps interface.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/operator/join_operator/stake.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Tangle Testnet: https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Ftestnet-rpc.tangle.tools#/explorer\n- Tangle Mainnet: https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frpc.tangle.tools#/explorer\n```\n\n----------------------------------------\n\nTITLE: Cloning the Tangle Docs Repository\nDESCRIPTION: Command to clone the Tangle Network documentation repository from GitHub to a local environment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new folder to get going\ngit clone https://github.com/tangle-network/tangle-docs.git\n```\n\n----------------------------------------\n\nTITLE: Basic Key Command Structure in Tangle CLI\nDESCRIPTION: The base command structure for accessing key management functionality in Tangle CLI, with both the full command and its shorthand alias.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/keys.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle key <COMMAND>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle k <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Linking USDC Token Address on Tangle Block Explorer using Markdown\nDESCRIPTION: This Markdown snippet displays the Tangle mainnet address for the USDC token (`0x97ee...601d`) as a clickable link. The link points to the Tangle Blockscout Explorer page for that specific address, allowing users to inspect the token contract details.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[`0x97eec1c29f745dc7c267f90292aa663d997a601d`](https://explorer.tangle.tools/address/0x97eec1c29f745dc7c267f90292aa663d997a601d)\n```\n\n----------------------------------------\n\nTITLE: Enabling Process Exporter Service Autostart with systemd in Shell\nDESCRIPTION: Runs `sudo systemctl enable process-exporter.service` to set the Process Exporter service to launch automatically during the system startup sequence. Systemd service links are adjusted accordingly. Requires `sudo` privileges.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable process-exporter.service\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Tangle Docs\nDESCRIPTION: Commands to navigate to the cloned repository directory and install all required dependencies using Yarn package manager.\nSOURCE: https://github.com/tangle-network/docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tangle-docs/\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Interacting with MultiAssetDelegationPrecompile: Deposit Example in Solidity\nDESCRIPTION: This Solidity contract provides an example of how to interact with the MultiAssetDelegationPrecompile. It defines a function `depositAsset` that takes an `assetId` and `amount` as input, calls the `deposit` function on the precompile contract at address 0x0000000000000000000000000000000000000822, and checks the returned status code, requiring it to be 0 for success. It depends on an interface `IMultiAssetDelegationPrecompile` (assumed to be similar or identical to the `MultiAssetDelegation` interface).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake_developers/restake_precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract DepositExample {\n    address constant precompileAddress = 0x0000000000000000000000000000000000000822;\n    IMultiAssetDelegationPrecompile precompile = IMultiAssetDelegationPrecompile(precompileAddress);\n\n    function depositAsset(uint256 assetId, uint256 amount) public returns (uint256) {\n        // Call the deposit function on the precompile contract\n        uint256 statusCode = precompile.deposit(assetId, amount);\n\n        // Handle the status code as needed\n        require(statusCode == 0, \"Deposit failed\");\n\n        return statusCode;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Task Output Options\nDESCRIPTION: A markdown table that documents the available output display options for tasks. Includes four modes: full output (default), hash-only for displaying just task hashes, new-only for showing only cache misses, and none for suppressing all output.\nSOURCE: https://github.com/tangle-network/docs/blob/main/components/OutputModeTable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| option    | description                              |\n| --------- | ---------------------------------------- |\n| full      | This is the default. Displays all output |\n| hash-only | Show only the hashes of the tasks        |\n| new-only  | Only show output from cache misses       |\n| none      | Hides all task output                    |\n```\n\n----------------------------------------\n\nTITLE: Creating Message Signing Script\nDESCRIPTION: Command to create a new file for the message signing script.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/non-specific.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch signMessage.js\n```\n\n----------------------------------------\n\nTITLE: Linking AVAIL Token Address on Tangle Block Explorer using Markdown\nDESCRIPTION: This Markdown snippet displays the Tangle mainnet address for the AVAIL token (`0xb8a0...207A9`) as a clickable link. The link points to the Tangle Blockscout Explorer page for that specific address, allowing users to inspect the token contract details.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[`0xb8a09939F27908505C4241C3c251f3DA33a207A9`](https://explorer.tangle.tools/address/0xb8a09939F27908505C4241C3c251f3DA33a207A9)\n```\n\n----------------------------------------\n\nTITLE: Installing AlertManager - Windows Downloads\nDESCRIPTION: Commands to download AlertManager for Windows AMD and ARM architectures\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.windows-amd64.tar.gz\n\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.windows-arm64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Rendering NetworkInfo Component in JSX (JavaScript)\nDESCRIPTION: Renders the NetworkInfo React component within a resources and tools section of the documentation using JSX. The component displays network-related information for the Tangle Network project. This snippet assumes that NetworkInfo is a valid React component, and the code is meant to be used in a React file with appropriate setup.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/resources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<NetworkInfo />\n```\n\n----------------------------------------\n\nTITLE: Checking Status of AlertManager Service - Shell\nDESCRIPTION: This shell snippet checks and displays the current status of the AlertManager service using systemctl. It provides diagnostic output about whether the service is running, failed, or inactive. Requires sudo privileges and a valid service unit file for AlertManager.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status alertmanager.service\n```\n\n----------------------------------------\n\nTITLE: Displaying USDC Token Symbol with Icon using HTML/JSX\nDESCRIPTION: This HTML/JSX snippet renders the USDC token symbol along with its corresponding icon. It uses a `span` element with Tailwind CSS classes for layout (`flex items-center gap-1`) and an `img` tag to display the icon (`/icons/usdc.svg`). Assumes necessary CSS (Tailwind) and image assets are available.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span className=\\\"flex items-center gap-1\\\"><img src=\\\"/icons/usdc.svg\\\" alt=\\\"USDC\\\" width=\\\"24\\\" height=\\\"24\\\" /> USDC</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging for Tangle Node (Bash)\nDESCRIPTION: These command-line arguments are added during the initial setup of the Tangle node to enable verbose logging for specific components like DKG, runtime offchain activities, and proposal handling. The logging level (e.g., `debug`) can be adjusted to `error`, `info`, `trace`, or `warn` as needed for troubleshooting or monitoring.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-ldkg=debug \\\n-ldkg_metadata=debug \\\n-lruntime::offchain=debug \\\n-ldkg_proposal_handler=debug \\\n-ldkg_proposals=debug\n```\n\n----------------------------------------\n\nTITLE: Removing an Asset from a Tangle Network Vault (Conceptual)\nDESCRIPTION: Details the conceptual function `remove_asset_from_Vault` used to remove an existing asset from a specified reward Vault in the Tangle Network. It takes the `Vault_id` and the `asset_id` as inputs and verifies that the asset is indeed part of the specified Vault before proceeding with the removal.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/incentives/vaults.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nremove_asset_from_Vault\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directory\nDESCRIPTION: Creates a directory to store chain data and logs for the Tangle node.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/docker-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /var/lib/tangle/\n```\n\n----------------------------------------\n\nTITLE: Importing RepoArea Component in TypeScript/JSX\nDESCRIPTION: Imports the `RepoArea` component from a relative path (`../../components/RepoArea.tsx`) within the project's `components` directory. This component is likely a React component written in TypeScript (TSX) used to display information about Tangle Network repositories.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/contribute.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RepoArea } from \"../../components/RepoArea.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Service Status\nDESCRIPTION: Command to check the status of the Grafana server service.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsystemctl status grafana-server\n```\n\n----------------------------------------\n\nTITLE: Monthly Vesting Rate Calculation\nDESCRIPTION: Formula to calculate the monthly token vesting rate after cliff period, accounting for initial liquid tokens and cliff releases.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/allocation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n=(Total_Tokens_Allocated - Initial_Liquid_Tokens - Cliff_Release_Tokens) / (Vesting_Period - Cliff_Duration)\n```\n\n----------------------------------------\n\nTITLE: Downloading Promtail for Different Architectures\nDESCRIPTION: Commands for downloading Promtail binary files for different operating systems and architectures (AMD/ARM).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/loki.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O -L \"https://github.com/grafana/loki/releases/download/v2.7.0/promtail-darwin-amd64.zip\"\n```\n\n----------------------------------------\n\nTITLE: Displaying WETH Token Symbol with Icon using HTML/JSX\nDESCRIPTION: This HTML/JSX snippet renders the WETH token symbol along with its corresponding icon. It uses a `span` element with Tailwind CSS classes for layout (`flex items-center gap-1`) and an `img` tag to display the icon (`/icons/eth.svg`). Assumes necessary CSS (Tailwind) and image assets are available.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span className=\\\"flex items-center gap-1\\\"><img src=\\\"/icons/eth.svg\\\" alt=\\\"WETH\\\" width=\\\"24\\\" height=\\\"24\\\" /> WETH</span>\n```\n\n----------------------------------------\n\nTITLE: Installing AlertManager - Darwin AMD Download\nDESCRIPTION: Command to download AlertManager for macOS AMD architecture\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/alert-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.darwin-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Importing Operator Introduction Component in TypeScript\nDESCRIPTION: Imports a React component called OperatorIntroCards from a relative path in the components directory.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport OperatorIntroCards from \"../../components/OperatorIntro.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Genesis Mismatch Error Example\nDESCRIPTION: Example log message showing a genesis mismatch error between nodes, indicating version incompatibility.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATE [Relaychain] Bootnode with peer id ID is on a different chain (our genesis: 0x3f5... theirs: 0x45j...)\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Network Resources (JavaScript)\nDESCRIPTION: Imports the NetworkInfo and WalletTable components from the project’s components directory into the current JavaScript/JSX file. This establishes the dependencies required for rendering network information and wallet data on the page. These imports are prerequisites for subsequent rendering and require the respective component files to be present in the specified paths.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/resources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NetworkInfo from \"../../components/NetworkResources\"\nimport WalletTable from \"../../components/WalletTable\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL via Homebrew\nDESCRIPTION: Commands to update Homebrew and install OpenSSL dependency.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/node-basics/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Importing ExpandableImage Component in JSX\nDESCRIPTION: Import statement for the ExpandableImage component used to display expandable banner and flow diagram images in the documentation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ExpandableImage from \"../../components/ExpandableImage\";\n```\n\n----------------------------------------\n\nTITLE: Importing Expandable Image Component in React (JavaScript)\nDESCRIPTION: This snippet imports the 'ExpandableImage' React component from a relative path, allowing usage of expandable images within the documentation. The dependency is a JavaScript React component, typically residing in the project's 'components' directory. The main purpose is to enable interactive visuals that users can zoom or expand within documentation or Markdown-rendered pages.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/tokenomics/inflation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExpandableImage from \"../../../components/ExpandableImage\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Grid Component in TSX\nDESCRIPTION: TSX component implementation showing the card grid navigation structure for Blueprint Runner documentation. Uses CardGrid component to display various sections of the documentation with titles, descriptions, and navigation links.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-runner/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<CardGrid\n  cards={[\n    {\n      title: \"Jobs\",\n      description: \"Learn how to create jobs for your Blueprint.\",\n      link: \"/developers/blueprint-runner/jobs\"\n    },\n    {\n      title: \"Routers\",\n      description: \"Learn how to configure and use routers in your Blueprint Runner.\",\n      link: \"/developers/blueprint-runner/routers\"\n    },\n    {\n      title: \"Producers\",\n      description: \"Understand how producers capture and process events for your Blueprint.\",\n      link: \"/developers/blueprint-runner/producers\"\n    },\n    {\n      title: \"Consumers\",\n      description: \"Learn how consumers handle job results in your Blueprint Runner.\",\n      link: \"/developers/blueprint-runner/consumers\"\n    },\n    {\n      title: \"Background Services\",\n      description: \"Explore how background services support your Blueprint Runner.\",\n      link: \"/developers/blueprint-runner/background-services\"\n    },\n    {\n      title: \"Building a Blueprint Runner\",\n      description: \"Step-by-step guide to building your own Blueprint Runner.\",\n      link: \"/developers/blueprint-runner/building\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JavaScript/MDX\nDESCRIPTION: Imports the 'Callout' component from the relative path '/components/Callout'. This component is subsequently used within the document, likely in an MDX or React-based environment, to render styled notification boxes.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/lst-assets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Callout from \"/components/Callout\";\n```\n\n----------------------------------------\n\nTITLE: Importing CardGrid Component in JSX/TSX\nDESCRIPTION: This code snippet imports the CardGrid component from a relative path. The CardGrid component is likely used to display a grid of cards with information about different aspects of Tangle Blueprints.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CardGrid from \"../../../components/CardGrid.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Simple-Majority Referenda Process\nDESCRIPTION: Comprehensive markdown documentation detailing the four main steps for creating and executing a Simple-Majority proposal in on-chain governance. Includes steps for treasury proposal creation, preimage generation, council motion proposal, and obtaining council approval.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/governance/governance-procedures.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Procedures in On-chain Governance\n\n## Launching a Simple-Majority Referenda\n\nA Simple Majority proposal is a proposal that necessitates a majority, or more than 51% of votes, to pass, rather than the 'Super Majority' (2/3 of voters) which is the default requirement. This method ensures a predisposition towards approval, preventing the potential override of the general will of many smaller stakeholders by a single party that might vote 6x against a proposal. This strategy aligns power with the broader community, rather than just a few individuals.\n\n### Process to Execute a Simple Majority Proposal\n\nThe process is slightly intricate at the moment, requiring multiple stages and council approval. The objective is to automate this via modifications to the existing treasury pallet. However, until that is achieved, here's the process.\n```\n\n----------------------------------------\n\nTITLE: Adding an Asset to a Tangle Network Vault (Conceptual)\nDESCRIPTION: Outlines the conceptual function `add_asset_to_Vault` for adding a new asset to an existing reward Vault in the Tangle Network. It requires the `Vault_id` and `asset_id` as inputs and includes a check to ensure the asset is not already associated with another Vault before adding it.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/incentives/vaults.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nadd_asset_to_Vault\n```\n\n----------------------------------------\n\nTITLE: Calculating Equal Validator Payouts in Tangle Network (Example)\nDESCRIPTION: This example demonstrates the Tangle Network's validator reward distribution. Given a set of 4 validators with varying stakes (18, 9, 8, 7 tokens) and a total payout of 8 TNT for the era, the calculation shows that each validator receives an equal share (8 TNT / 4 validators = 2 TNT each), irrespective of their individual staked amount. This highlights that rewards are split equally among the active set, differing from systems where rewards are proportional to stake.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/validator/validator-rewards.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nValidator Set Size (v): 4\nValidator 1 Stake (v1): 18 tokens\nValidator 2 Stake (v2):  9 tokens\nValidator 3 Stake (v3):  8 tokens\nValidator 4 Stake (v4):  7 tokens\nPayout (p): 8 TNT\n\nPayout for each validator (v1 - v4):\np / v = 8 / 4 = 2 tokens\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Callout - React/MDX\nDESCRIPTION: This snippet shows how to use the imported React Callout component in MDX to provide contextual information within the documentation. The Callout component, configured with the 'info' type, displays a styled, informational message to guide users through the prerequisite of depositing tokens before delegating. Usage of this component requires support for React syntax within the MDX rendering environment, and its props structure is determined by the Callout component's implementation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/how_to_restake/how_to_restake_tangle/delegate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"info\">\nYou should have deposited your tokens to the multiasset delegation vault before you can delegate. See the [Deposit Using Tangle DApp page](./deposit-tangle.mdx) for more information. If you have already deposited **and** delegated your assets under the **Deposit** tab, you can skip this step.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Rendering ExpandableImage Components in JSX\nDESCRIPTION: JSX code blocks showing the implementation of ExpandableImage components to display the Tangle banner and service instance flow diagram with optional zoom capability.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableImage src=\"/images/banners/TangleBanner.png\" alt=\"Tangle Banner\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableImage src=\"/images/ServiceInstanceFlow.png\" alt=\"Service Instance Flow\" allowZoom={true} />\n```\n\n----------------------------------------\n\nTITLE: Linking USDT Token Address on Tangle Block Explorer using Markdown\nDESCRIPTION: This Markdown snippet displays the Tangle mainnet address for the USDT token (`0xb6dc...d1c6`) as a clickable link. The link points to the Tangle Blockscout Explorer page for that specific address, allowing users to inspect the token contract details.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`0xb6dc6c8b71e88642cead3be1025565a9ee74d1c6`](https://explorer.tangle.tools/address/0xb6dc6c8b71e88642cead3be1025565a9ee74d1c6)\n```\n\n----------------------------------------\n\nTITLE: Calculating Monthly Service Revenue Share for Restakers (Plaintext)\nDESCRIPTION: Example calculation showing how the total monthly service revenue allocated to all restakers is determined. It applies the restaker allocation percentage (30%) to the total monthly service fees (1000 USDC).\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/incentives-restakers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1000 USDC × 30% = 300 USDC to restakers\n```\n\n----------------------------------------\n\nTITLE: Converting Substrate Address to EVM Address in TypeScript\nDESCRIPTION: Script that converts a Substrate address to an EVM-compatible address by decoding the Substrate address and extracting the first 20 bytes, then converting to hexadecimal format.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/evm-substrate-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeAddress } from \"https://esm.sh/@polkadot/util-crypto\";\nimport { u8aToHex } from \"https://esm.sh/@polkadot/util\";\n\nconst input = Deno.args[0];\nif (!input) {\n  console.error(\"usage: deno run substrateToEvm.ts <SUBSTRATE_ADDRESS_HERE>\");\n  Deno.exit(1);\n}\nconst accountId = decodeAddress(input);\nconst res = accountId.subarray(0, 20);\nconst output = u8aToHex(res);\nconsole.log({ input, output });\n// run using:\n// $ deno run substrateToEvm.ts <SUBSTRATE_ADDRESS_HERE>\n```\n\n----------------------------------------\n\nTITLE: Linking WETH Token Address on Tangle Block Explorer using Markdown\nDESCRIPTION: This Markdown snippet displays the Tangle mainnet address for the WETH token (`0x01b4...b894`) as a clickable link. The link points to the Tangle Blockscout Explorer page for that specific address, allowing users to inspect the token contract details.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[`0x01b4ce0d48ce91eb6bcaf5db33870c65d641b894`](https://explorer.tangle.tools/address/0x01b4ce0d48ce91eb6bcaf5db33870c65d641b894)\n```\n\n----------------------------------------\n\nTITLE: Prometheus Systemd Service Configuration\nDESCRIPTION: Systemd service definition for running Prometheus as a system service\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/prometheus.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo tee /etc/systemd/system/prometheus.service > /dev/null << EOF\n[Unit]\n  Description=Prometheus Monitoring\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=prometheus\n  Group=prometheus\n  Type=simple\n  ExecStart=/usr/local/bin/prometheus \\\n   --config.file /etc/prometheus/prometheus.yml \\\n   --storage.tsdb.path /var/lib/prometheus/ \\\n   --web.console.templates=/etc/prometheus/consoles \\\n   --web.console.libraries=/etc/prometheus/console_libraries\n  ExecReload=/bin/kill -HUP $MAINPID\n\n[Install]\n  WantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Displaying AVAIL Token Symbol with Icon using HTML/JSX\nDESCRIPTION: This HTML/JSX snippet renders the AVAIL token symbol along with its corresponding icon. It uses a `span` element with Tailwind CSS classes for layout (`flex items-center gap-1`) and an `img` tag to display the icon (`/icons/avail.svg`). Assumes necessary CSS (Tailwind) and image assets are available.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/resources/router.mdx#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span className=\\\"flex items-center gap-1\\\"><img src=\\\"/icons/avail.svg\\\" alt=\\\"AVAIL\\\" width=\\\"24\\\" height=\\\"24\\\" /> AVAIL</span>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table of Contents with React Component in JSX\nDESCRIPTION: This code snippet demonstrates the use of a custom React component called TableOfContentCards to render a structured table of contents for the Gadget SDK documentation. It includes sections for Getting Started, CLI Tools, Building Eigenlayer AVS, and Blueprint Contexts, each with their respective subsections and links.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprint-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContentCards items={[\n  {\n    title: \"Getting Started\",\n    href: \"/developers/tangle-avs\",\n    subItems: [\n      {\n        title: \"Installation & Setup\",\n        description: \"Install dependencies and create your first Blueprint\"\n      },\n      {\n        title: \"Building & Deploying\",\n        description: \"Build and deploy your Blueprint to Tangle Network\"\n      }\n    ]\n  },\n  {\n    title: \"CLI Tools\", \n    href: \"/developers/cli/quickstart\",\n    subItems: [\n      {\n        title: \"Installation\",\n        href: \"/developers/cli/installation\",\n        description: \"Install the Tangle CLI tools\"\n      },\n      {\n        title: \"Quickstart\",\n        href: \"/developers/cli/quickstart\", \n        description: \"Get started with basic CLI commands\"\n      },\n      {\n        title: \"Tangle Blueprints\",\n        href: \"/developers/cli/tangle\",\n        description: \"Build and deploy Tangle Blueprints\"\n      },\n      {\n        title: \"Eigenlayer AVS Blueprints\",\n        href: \"/developers/cli/eigenlayer\",\n        description: \"Build and deploy Eigenlayer AVS Blueprints\"\n      },\n      {\n        title: \"Key Management\",\n        href: \"/developers/cli/keys\",\n        description: \"Create and manage keys and keystores for Blueprints\"\n      }\n    ]\n  },\n    {\n    title: \"Build Eigenlayer AVS\",\n    href: \"/developers/eigenlayer-avs/overview\",\n    subItems: [\n      {\n        title: \"CLI Usage\",\n        href: \"/developers/cli/eigenlayer\",\n        description: \"Use the CLI to create, deploy, and test your AVS\"\n      },\n      {\n        title: \"Eigenlayer Context\",\n        href: \"/developers/blueprint-contexts/eigenlayer-context\",\n        description: \"Eigenlayer integration utilities\"\n      },\n      {\n        title: \"BLS Template\",\n        href: \"/developers/eigenlayer-avs/bls-template\",\n        description: \"Build AVS with BLS aggregation service\"\n      },\n      {\n        title: \"ECDSA Template\", \n        href: \"/developers/eigenlayer-avs/ecdsa-template\",\n        description: \"Build AVS with ECDSA contracts\"\n      }\n    ]\n  },\n  {\n    title: \"Blueprint Contexts\",\n    href: \"/developers/blueprint-contexts\",\n    subItems: [\n      {\n        title: \"Introduction\",\n        href: \"/developers/blueprint-contexts/introduction\",\n        description: \"Overview of context system\"\n      },\n      {\n        title: \"Keystore Context\",\n        href: \"/developers/blueprint-contexts/keystore-context\",\n        description: \"Secure key management\"\n      },\n      {\n        title: \"EVM Provider Context\",\n        href: \"/developers/blueprint-contexts/evm-provider-context\",\n        description: \"Interact with EVM chains\"\n      },\n      {\n        title: \"Tangle Client Context\",\n        href: \"/developers/blueprint-contexts/tangle-client-context\",\n        description: \"Interact with Tangle Network\"\n      },\n      {\n        title: \"Services Context\",\n        href: \"/developers/blueprint-contexts/services-context\",\n        description: \"Access Tangle services\"\n      },\n      {\n        title: \"Eigenlayer Context\",\n        href: \"/developers/blueprint-contexts/eigenlayer-context\",\n        description: \"Eigenlayer integration utilities\"\n      }\n    ]\n  },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Testing Utilities in Rust\nDESCRIPTION: Required imports for setting up the testing environment including the TangleTestHarness, TestHarness, tempfile, and logging utilities.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse blueprint_sdk::testing::utils::tangle::TangleTestHarness;\nuse blueprint_sdk::testing::utils::harness::TestHarness;\nuse blueprint_sdk::testing::tempfile;\nuse blueprint_sdk::logging;\n```\n\n----------------------------------------\n\nTITLE: Example Substrate to EVM Address Conversion\nDESCRIPTION: Example code showing the conversion of a Substrate address to an EVM address using the substrateToEvm function.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/evm-substrate-transfers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nsubstrateToEvm(\"5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y\");\n// => 0x90b5ab205c6974c9ea841be688864633dc9ca8a3\n```\n\n----------------------------------------\n\nTITLE: Example EVM to Substrate Address Conversion\nDESCRIPTION: Example code showing the conversion of an EVM address to a Substrate address using the evmToSubstrate function.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/technicals/evm-substrate-transfers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nevmToSubstrate(\"0xa5fAA47a324754354CB0A305941C8cCc6b5de296\");\n// => 5C9ysBsWKpw3D8MFaEauFgdtMPqboS64YNYHyu1rCynLyKMZ\n```\n\n----------------------------------------\n\nTITLE: Verifying Job Results\nDESCRIPTION: Wait for job completion and verify the results against expected outputs.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/p2p-networking/testing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet results = harness.wait_for_job_execution(service_id, job).await?;\nassert_eq!(results.service_id, service_id);\n\nif !expected_outputs.is_empty() {\nassert_eq!(\n    results.result.len(),\n    expected_outputs.len(),\n    \"Number of outputs doesn't match expected\"\n);\n\n// Add more verification logic as needed...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Development Server\nDESCRIPTION: Command to start the local development server for previewing the documentation site. This launches the site at http://localhost:3000/.\nSOURCE: https://github.com/tangle-network/docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev # alias for `yarn start` and `yarn develop`\n```\n\n----------------------------------------\n\nTITLE: Example Workflow: Creating a New Eigenlayer AVS Project\nDESCRIPTION: Example command for creating a new AVS project named 'my-avs' using the BLS template.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint create -n my-avs --eigenlayer bls\n```\n\n----------------------------------------\n\nTITLE: Example Workflow: Running Eigenlayer AVS Service\nDESCRIPTION: Example command for running the AVS service, specifying the protocol and RPC URL.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint run \\\n  -p eigenlayer \\\n  -u <YOUR_RPC_URL>\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Testnet\nDESCRIPTION: Command to deploy contracts to testnet with custom RPC URL\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/eigenlayer-avs/ecdsa-template.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer \\\n  --network testnet \\\n  --rpc-url <YOUR_RPC_URL> \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Example Workflow: Deploying Eigenlayer Contracts to Local Devnet\nDESCRIPTION: Example command for deploying contracts to a local devnet using ordered deployment.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/cli/eigenlayer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo tangle blueprint deploy eigenlayer \\\n  --devnet \\\n  --ordered-deployment\n```\n\n----------------------------------------\n\nTITLE: Updating APT Cache\nDESCRIPTION: Command to refresh APT cache and update package lists.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Enabling Grafana Service\nDESCRIPTION: Command to enable the Grafana service to start on system boot.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/monitoring/grafana.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable grafana-server\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Package\nDESCRIPTION: Command to install the Web3.js package as a project dependency.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/precompiles/utility/non-specific.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save web3\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in MDX - React/JavaScript\nDESCRIPTION: This snippet demonstrates importing a reusable React UI component called Callout for use within an MDX documentation file. The imported component enables the integration of custom informational callouts, enhancing the user experience in mixed Markdown/React documentation systems. The import assumes the Callout component is available in the specified relative path and requires the documentation environment to support React components within MDX.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/how_to_restake/how_to_restake_tangle/delegate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Callout from \"/components/Callout\";\n```\n\n----------------------------------------\n\nTITLE: Importing Component Dependencies in React\nDESCRIPTION: Imports custom React components for displaying table of contents cards and GitHub repository information.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/use-cases.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NonuniformTableOfContentCards from \"../../../components/NonuniformTableOfContentCards\";\nimport GithubRepoCard, { GithubRepoList } from \"../../../components/GithubRepoCard\";\n```\n\n----------------------------------------\n\nTITLE: Importing ExpandableImage Component in JSX\nDESCRIPTION: Import statement for a custom ExpandableImage component used to display architecture diagrams with zoom functionality\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/network/differences.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ExpandableImage from \"../../components/ExpandableImage\";\n```\n\n----------------------------------------\n\nTITLE: Using ExpandableImage Component in JSX/MDX\nDESCRIPTION: This JSX/MDX snippet demonstrates the usage of the imported `ExpandableImage` component to render an image. It specifies the image source (`src`) and alternative text (`alt`). This component is used here to display the 'Restaking Workflow' diagram within the documentation.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/restake-introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpandableImage src=\"/images/restake-workflow.png\" alt=\"Restaking Workflow\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Repository Card Component\nDESCRIPTION: Example usage of GithubRepoCard component to display repository information with name, description, URL and display style properties.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/blueprints/use-cases.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<GithubRepoCard\n  name=\"layerzero-dvn-blueprint-template\"\n  description=\"Template for creating LayerZero DVN (Decentralized Verifier Network) blueprints\"\n  url=\"https://github.com/tangle-network/layerzero-dvn-blueprint-template\"\n  displayStyle=\"row\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering RepoArea Component in JSX\nDESCRIPTION: Renders the imported `RepoArea` component within the document using JSX syntax. This component presumably fetches and displays relevant GitHub repository information for contributors, placed under the 'Find the Repository' section.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/developers/contribute.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RepoArea />\n```\n\n----------------------------------------\n\nTITLE: Rendering Operator Introduction Component in Markdown\nDESCRIPTION: Renders the OperatorIntroCards component within a Markdown document using JSX syntax.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/operators/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<OperatorIntroCards />\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component - React JavaScript\nDESCRIPTION: Imports the Callout React component from the shared components directory for displaying styled information notices within the documentation. This requires a React environment and the existence of a /components/Callout module. No parameters or logic are included; this is solely for UI rendering purposes.\nSOURCE: https://github.com/tangle-network/docs/blob/main/pages/restake/how_to_restake/how_to_restake_polkadotjs/delegate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Callout from \"/components/Callout\";\n```"
  }
]