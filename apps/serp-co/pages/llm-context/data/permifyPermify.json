[
  {
    "owner": "permify",
    "repo": "permify",
    "content": "TITLE: Complete Project Management Permission Schema\nDESCRIPTION: Defines the complete permission schema for a project management system with user groups, organizations, teams, and projects. Includes relations and permissions for different access levels.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/user-groups.mdx#2025-04-17_snippet_0\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n\nentity organization {\n    // organizational roles\n    relation admin @user\n    relation member @user\n}\n\nentity team {\n    // represents owner or creator of the team\n    relation owner @user\n\n    // represents direct member of the team\n    relation member @user\n\n    // reference for organization that team belong\n    relation org @organization\n\n    // organization admins or owners can edit, delete the team details\n    permission edit = org.admin or owner\n    permission delete = org.admin or owner\n\n    // to invite someone you need to be admin and either owner or member of this team\n    permission invite = org.admin and (owner or member)\n\n    // only owners can remove users\n    permission remove_user =  owner\n}\n\nentity project {\n    // references for team and organization that project belongs\n    relation team @team\n    relation org @organization\n\n    permission view = org.admin or team.member\n    permission edit = org.admin or team.member\n    permission delete = team.member\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Authorization with Permify Schema\nDESCRIPTION: Example of creating an authorization model using Permify Schema, defining user and organization entities with relations and actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity user {} \n\nentity organization {\n\n    relation admin @user    \n    relation member @user     \n    \n    action view_files = admin or member\n    action edit_files = admin\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Team and Group Permissions in Permify Schema\nDESCRIPTION: Schema defining permissions for team-based project management with user groups and resource hierarchies. Implements granular access control for team and project management actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rebac.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    //organizational roles\n    relation admin @user\n    relation member @user\n}\n\nentity team {\n    // represents owner or creator of the team\n\trelation owner @user\n    // represents direct member of the team\n\trelation member @user\n    // represents the organization that the team belongs to\n    relation org @organization\n\n    // organization admins or team owners can edit, delete the team details\n    action edit = org.admin or owner\n    action delete = org.admin or owner\n    // to invite someone you need to be an organization admin and either an owner or member of this team\n    action invite = org.admin and (owner or member)\n    // only team owners can remove users\n    action remove_user =  owner\n}\n\nentity project {\n    // represents team and organization that a project belongs to\n\trelation team @team\n    relation org @organization\n\n    action view = org.admin or team.member\n    action edit = org.admin or team.member\n    action delete = team.member\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notion Authorization Model Schema in Permify\nDESCRIPTION: A comprehensive Permify schema that defines the authorization model for Notion. It establishes entities like users, workspaces, pages, databases, blocks, comments, templates, and integrations with their relationships and permission rules. The schema demonstrates permission inheritance between related entities and role-based access control.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity workspace {\n    // The owner of the workspace\n    relation owner @user\n    // Members of the workspace\n    relation member @user\n    // Guests (users with read-only access) of the workspace\n    relation guest @user\n    // Bots associated with the workspace\n    relation bot @user\n    // Admin users who have permission to manage the workspace\n    relation admin @user\n\n    // Define permissions for workspace actions\n    permission create_page = owner or member or admin\n    permission invite_member = owner or admin\n    permission view_workspace = owner or member or guest or bot\n    permission manage_workspace = owner or admin\n\n    // Define permissions that can be inherited by child entities\n    permission read = member or guest or bot or admin\n    permission write = owner or admin\n}\n\nentity page {\n    // The workspace associated with the page\n    relation workspace @workspace\n     // The user who can write to the page\n    relation writer @user\n     // The user(s) who can read the page (members of the workspace or guests)\n    relation reader @user @workspace#member @workspace#guest\n\n    // Define permissions for page actions\n    permission read = reader or workspace.read\n    permission write = writer or workspace.write\n}\n\nentity database {\n    // The workspace associated with the database\n    relation workspace @workspace\n    // The user who can edit the database\n    relation editor @user\n    // The user(s) who can view the database (members of the workspace or guests)\n    relation viewer @user @workspace#member @workspace#guest\n\n    // Define permissions for database actions\n    permission read = viewer or workspace.read\n    permission write = editor or workspace.write\n    permission create = editor or workspace.write\n    permission delete = editor or workspace.write\n}\n\nentity block {\n    // The page associated with the block\n    relation page @page\n    // The database associated with the block\n\n    relation database @database\n    // The user who can edit the block\n    relation editor @user\n    // The user(s) who can comment on the block (readers of the parent object)\n    relation commenter @user @page#reader\n\n    // Define permissions for block actions\n    permission read = database.read or commenter\n    permission write = editor or database.write\n    permission comment = commenter\n}\n\nentity comment {\n    // The block associated with the comment\n    relation block @block\n\n     // The author of the comment\n    relation author @user\n\n    // Define permissions for comment actions\n    permission read = block.read\n    permission write = author\n}\n\nentity template {\n   // The workspace associated with the template\n    relation workspace @workspace\n    // The user who creates the template\n    relation creator @user\n\n    // The user(s) who can view the page (members of the workspace or guests)\n    relation viewer @user @workspace#member @workspace#guest\n\n    // Define permissions for template actions\n    permission read = viewer or workspace.read\n    permission write = creator or workspace.write\n    permission create = creator or workspace.write\n    permission delete = creator or workspace.write\n}\n\nentity integration {\n    // The workspace associated with the integration\n    relation workspace @workspace\n\n    // The owner of the integration\n    relation owner @user\n\n    // Define permissions for integration actions\n    permission read = workspace.read\n    permission write = owner or workspace.write\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource-Specific Roles and Permissions in Permify\nDESCRIPTION: This schema defines a complete authorization model with resource-specific roles and permissions. It includes user, organization, file, and vendor entities with their relationships and permission rules, demonstrating how to implement fine-grained access control based on organizational roles.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/resource-specific-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n\nentity organization {\n    // roles\n    relation admin @user\n    relation member @user\n    relation manager @user\n    relation agent @user\n}\n\nentity file {\n    // file-specific relations\n    relation owner @user\n    relation org @organization\n    relation vendor @vendor\n\n    // file-specific permissions\n    permission view = org.admin or org.manager or (org.member not org.agent) or owner\n    permission edit = org.admin or org.manager or owner\n    permission delete = org.admin or owner\n}\n\nentity vendor {\n    // vendor-specific relations\n    relation primary_contact @user\n    relation org @organization\n    \n    // vendor-specific permissions\n    permission manage = org.admin or org.agent\n    permission view = org.admin or org.manager or org.agent or primary_contact\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Authorization Data with Permify API\nDESCRIPTION: JSON payload for the Write Data API to grant an admin role to a user in an organization, demonstrating how to store authorization data in Permify.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n       \"entity\": {\n        \"type\": \"organization\",\n        \"id\": \"1\" //Organization identifier\n        },\n        \"relation\": \"admin\",\n        \"subject\": {\n            \"type\": \"user\",\n            \"id\": \"1\", //Ashley's identifier\n            \"relation\": \"\"\n        }\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Entity with Exclusion in Permify DSL\nDESCRIPTION: This snippet demonstrates the use of the 'not' operator for exclusion in Permify DSL. It defines a 'post' entity with relations and actions, showing how to exclude restricted users from commenting and liking.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_6\n\nLANGUAGE: perm\nCODE:\n```\nentity post {\n    // posts are linked with accounts.\n    relation account @account\n\n    // comments are limited to people followed by the parent account.\n    attribute restricted boolean\n\n    ..\n    ..\n\n    // users can comment and like on unrestricted posts or posts by owners who follow them.\n    action comment = account.following not restricted\n    action like = account.following not restricted\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Schema and Relationships for Testing\nDESCRIPTION: This YAML snippet defines the complete schema for users, organizations, groups, and documents. It also specifies relationships between entities and scenarios for testing permissions. This configuration is used with the Permify validator to test access checks.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n    entity user {}\n\n    entity organization {\n        relation group @group\n        relation document @document\n        relation administrator @user @group#direct_member @group#manager\n        relation direct_member @user\n\n        permission admin = administrator\n        permission member = direct_member or administrator or group.member\n    }\n\n    entity group {\n        relation manager @user @group#direct_member @group#manager\n        relation direct_member @user @group#direct_member @group#manager\n\n        permission member = direct_member or manager\n    }\n\n    entity document {\n        relation org @organization\n\n        relation viewer  @user  @group#direct_member @group#manager\n        relation manager @user @group#direct_member @group#manager\n\n        action edit = manager or org.admin\n        action view = viewer or manager or org.admin\n    }\n\nrelationships:\n  - group:tech#manager@user:ashley\n  - group:tech#direct_member@user:david\n  - group:marketing#manager@user:john\n  - group:marketing#direct_member@user:jenny\n  - group:hr#manager@user:josh\n  - group:hr#direct_member@user:joe\n\n  - group:tech#direct_member@group:marketing#direct_member\n  - group:tech#direct_member@group:hr#direct_member\n\n  - organization:acme#group@group:tech\n  - organization:acme#group@group:marketing\n  - organization:acme#group@group:hr\n  - organization:acme#document@document:product_database\n  - organization:acme#document@document:marketing_materials\n  - organization:acme#document@document:hr_documents\n  - organization:acme#administrator@group:tech#manager\n  - organization:acme#administrator@user:jenny\n    \n  - document:product_database#manager@group:tech#manager\n  - document:product_database#viewer@group:tech#direct_member\n  - document:marketing_materials#viewer@group:marketing#direct_member\n  - document:hr_documents#manager@group:hr#manager\n  - document:hr_documents#viewer@group:hr#direct_member\n\n\nscenarios:\n  - name: \"scenario 1\"\n    description: \"test description\"\n    checks:\n      - entity: \"document:product_database\"\n        subject: \"user:ashley\"\n        assertions:\n          edit: true\n      - entity: \"document:hr_documents\"\n        subject: \"user:joe\"\n        assertions:\n          view: true\n      - entity: \"document:marketing_materials\"\n        subject: \"user:david\"\n        assertions:\n          view: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Service with Database and Caching Options in YAML\nDESCRIPTION: This YAML configuration sets up the Permify service with database connection details, caching options, and various service parameters. It includes settings for PostgreSQL database, Redis caching, and service-specific configurations like Watch Mode and tenant mode.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/examples.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  # database config\n  url: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable\n\ncache:\n  # cache config\n  url: redis://localhost:6379\n\nservice:\n  # watch mode config\n  watch: true\n\n  # tenant mode config\n  tenancy_mode: multi\n\n  # rate limit config\n  rate_limit:\n    enabled: false\n    limit: 100\n    burst: 50\n```\n\n----------------------------------------\n\nTITLE: Performing Access Check with Permify in Java\nDESCRIPTION: Java implementation for verifying whether a user has permission to edit a repository using the Permify REST SDK. The code creates a permission check request with the necessary entity, subject, and permission parameters, setting a depth of 20 for the permission tree traversal.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n// Rest SDK for Java\nimport org.permify.api.PermissionApi;\nimport org.permify.model.*;\n\npublic static void main(String[] args) {\n\n    PermissionApi permissionApi = new PermissionApi(apiClient);\n\n    try {\n      PermissionsCheckRequest req = new PermissionsCheckRequest();\n      PermissionCheckRequestMetadata metadata = new PermissionCheckRequestMetadata();\n      metadata.setDepth(20);\n\n      // Create the entity for the organization\n      Entity entity = new Entity();\n      entity.setId(\"repository1\");\n      entity.setType(\"repository\");\n\n      // Create the subject for the user\n      Subject subject = new Subject();\n      subject.setId(\"user1\");\n      subject.setType(\"user\");\n\n      req.setSubject(subject);\n      req.setEntity(entity);\n      req.setPermission(\"edit\");\n      req.setMetadata(metadata);\n\n      permissionApi.permissionsCheck(\"t1\", req);\n\n    } catch (Exception e) {\n      System.out.println(\"Error occurred: \" + e.getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource-Based Permission Check in Node.js\nDESCRIPTION: Example of a resource-based permission check request using the Node.js client. The request checks if a user has edit permission on a repository within a tenant context.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.permission.check({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        console.log(\"RESULT_ALLOWED\")\n    } else {\n        console.log(\"RESULT_DENIED\")\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify\nDESCRIPTION: Example Permify schema definition that establishes entities (user, organization, repository), their relationships, and permission rules. This schema defines the authorization model that will be synchronized with database changes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/data-sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity repository {\n    relation parent @organization\n    relation owner  @user\n\n    attribute is_public boolean\n\n    permission view   = is_public\n    permission edit   = parent.admin or owner\n    permission delete = owner\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Healthcare System Permissions Using Permify Schema Language\nDESCRIPTION: A complete Permify schema defining the permission model for a healthcare system. It includes entities for users, doctors, patients, medical records, appointments, and more, with fine-grained access control rules based on relationships and attributes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/healthcare.mdx#2025-04-17_snippet_0\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n\nentity doctor {\n    // Doctors can have multiple patients.\n    relation patient @patient\n    relation group @group\n}\n\nentity partner {\n    relation admin @user\n    relation member @user\n\n    permission edit = admin\n    permission view = edit or member\n}\n\nentity group {\n    relation partner @partner\n    relation doctor @doctor\n\n    permission edit = partner.edit or doctor\n    permission view = edit or partner.view\n}\n\nentity state {\n    attribute age_limit integer\n\n    rule check_age(age integer) {\n        this.age_limit > age\n    }\n}\n\nentity patient {\n    // Patients can have multiple doctors and be linked to groups and states.\n    relation primary_doctor @doctor\n    relation consultant @doctor\n    relation group @group\n    relation state @state\n    relation owner @user\n    relation guardian @user\n\n    attribute age integer\n\n    // Permissions for accessing patient data.\n    permission parent_access = state.check_age(age)\n    permission edit = owner or group.edit or primary_doctor or consultant\n    permission view = edit or group.view or guardian\n}\n\nentity medical_record {\n    // Each medical record pertains to a patient and a doctor.\n    relation patient @patient\n    relation doctor @doctor\n\n    // Permissions for medical record access.\n    action view = doctor.patient or patient or patient.guardian\n    action create = doctor.patient\n    action update = doctor.patient\n    action delete = doctor.patient\n}\n\nentity hospital {\n    // Hospitals can have doctors, patients, and groups.\n    relation doctor @doctor\n    relation patient @patient\n    relation group @group\n\n    // Actions for managing hospital processes.\n    action admit_patient = doctor\n    action discharge_patient = doctor\n    action view_patient_records = doctor or patient.guardian or group.view\n}\n\nentity appointment {\n    // Appointments link a patient with a doctor.\n    relation doctor @doctor\n    relation patient @patient\n\n    // Patients or doctors can manage appointments.\n    action create = patient or doctor\n    action update = patient or doctor.patient\n    action delete = doctor.patient\n}\n\nentity claims {\n    // Claims link a patient with a group and can involve multiple entities.\n    relation group @group\n    relation patient @patient\n\n    action edit = patient.edit or group.edit\n    action view = edit or patient.view or group.view\n    action parent_access = patient.parent_access\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Permify YAML Configuration Example\nDESCRIPTION: A comprehensive YAML configuration file for Permify Server, including server settings, authentication, logging, tracing, database connections, and distributed deployment options.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The server section specifies the HTTP and gRPC server settings,\n# including whether or not TLS is enabled and the certificate and\n# key file locations.\nserver:\n  rate_limit: 100\n  http:\n    enabled: true\n    port: 3476\n    tls:\n      enabled: true\n      cert: /etc/letsencrypt/live/yourdomain.com/fullchain.pem\n      key: /etc/letsencrypt/live/yourdomain.com/privkey.pem\n  grpc:\n    port: 3478\n    tls:\n      enabled: true\n      cert: /etc/letsencrypt/live/yourdomain.com/fullchain.pem\n      key: /etc/letsencrypt/live/yourdomain.com/privkey.pem\n\n# The logger section sets the logging level for the service.\nlogger:\n  level: info\n\n# The profiler section enables or disables the pprof profiler and\n# sets the port number for the profiler endpoint.\nprofiler:\n  enabled: true\n  port: 6060\n\n# The authn section specifies the authentication method for the service.\nauthn:\n  enabled: true\n  method: preshared\n  preshared:\n    keys: [ ]\n\n# The tracer section enables or disables distributed tracing and sets the\n# exporter and endpoint for the tracing data.\ntracer:\n  exporter: zipkin\n  endpoint: http://localhost:9411/api/v2/spans\n  enabled: true\n\n# The meter section enables or disables metrics collection and sets the\n# exporter and endpoint for the collected metrics.\nmeter:\n  exporter: otlp\n  endpoint: localhost:4318\n  enabled: true\n\n# The service section sets various service-level settings, including whether\n# or not to use a circuit breaker, and cache sizes for schema, permission,\n# and relationship data.\nservice:\n  circuit_breaker: false\n  watch:\n    enabled: false\n  schema:\n    cache:\n      number_of_counters: 1_000\n      max_cost: 10MiB\n  permission:\n    bulk_limit: 100\n    concurrency_limit: 100\n    cache:\n      number_of_counters: 10_000\n      max_cost: 10MiB\n\n# The database section specifies the database engine and connection settings,\n# including the URI for the database, whether or not to auto-migrate the database,\n# and connection pool settings.\ndatabase:\n  engine: postgres\n  uri: postgres://user:password@host:5432/db_name\n  auto_migrate: false\n  max_open_connections: 20\n  max_idle_connections: 1\n  max_connection_lifetime: 300s\n  max_connection_idle_time: 60s\n  garbage_collection:\n    enabled: true\n    interval: 200h\n    window: 200h\n    timeout: 5m\n\n# distributed configuration settings\ndistributed:\n  # Indicates whether the distributed mode is enabled or not\n  enabled: true\n\n  # The address of the distributed service.\n  # Using a Kubernetes DNS name suggests this service runs in a Kubernetes cluster\n  # under the 'default' namespace and is named 'permify'\n  address: \"kubernetes:///permify.default\"\n\n  # The port on which the service is exposed\n  port: \"5000\"\n```\n\n----------------------------------------\n\nTITLE: Permission Definition Example with Boolean Logic\nDESCRIPTION: Demonstrates how to combine roles using boolean logic to define file viewing permissions. This example shows how admins, managers, or members who are not agents can view files.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/global-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: schema\nCODE:\n```\nview_files = admin or manager or (member not agent)\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify DSL\nDESCRIPTION: This code snippet demonstrates how to define entities, relations, and permissions using Permify's domain-specific language. It creates a simple authorization model with user, organization, and repository entities, along with their relationships and access control rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/playground.md#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    // organizational roles\n    relation admin @user\n    relation member @user\n}\n\nentity repository {\n\n    // represents repositories parent organization\n    relation parent @organization\n\n    // represents owner of this repository\n    relation owner  @user\n\n    // permissions\n    permission edit   = parent.admin or owner\n    permission delete = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify\nDESCRIPTION: This code snippet defines a Permify schema for a document management system, including entities for users, organizations, and documents, along with their relationships and actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {} \n\nentity organization {\n\n    relation admin  @user\n    relation member @user\n\n} \n\nentity document {\n    \n    relation  owner  @user   \n    relation  parent    @organization   \n    relation  maintainer  @user @organization#member      \n\n    action view   = owner or parent.member or maintainer or parent.admin\n    action edit   = owner or maintainer or parent.admin\n    action delete = owner or parent.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Phase Commit Approach for Permify Integration with Database\nDESCRIPTION: This Go code demonstrates a two-phase commit approach for writing relationships to both an application database and Permify. It ensures consistency by rolling back Permify operations if the database transaction fails.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateDocuments(db *gorm.DB) error {\n\n  tx := db.Begin()\n  defer func() {\n    if r := recover(); r != nil {\n      tx.Rollback()\n      // if transaction fails, then delete malformed relation tuple\n      permify.DeleteData(...)\n    }\n  }()\n\n  if err := tx.Error; err != nil {\n    return err\n  }\n\n  if err := tx.Create(docs).Error; err != nil {\n     tx.Rollback()\n     // if transaction fails, then delete malformed relation tuple\n     permify.DeleteData(...)\n     return err\n  }\n\n  // if transaction successful, write relation tuple to Permify\n  permify.WriteData(...)\n\n  return tx.Commit().Error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Schema in Permify\nDESCRIPTION: This snippet defines the complete RBAC schema using Permify's authorization language. It includes user and organization entities, role relations, and actions for file access permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rbac.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {} \n\nentity organization {\n\n    //roles \n    relation admin @user    \n    relation member @user    \n    relation manager @user    \n    relation agent @user  \n\n    //organization files access permissions\n    action view_files = admin or manager or (member not agent)\n    action edit_files = admin or manager\n    action delete_file = admin \n\n    //vendor files access permissions\n    action view_vendor_files = admin or manager or agent\n    action edit_vendor_files = admin or agent\n    action delete_vendor_file = agent\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization RBAC Schema with User Roles and Permissions\nDESCRIPTION: Defines an RBAC schema with user and organization entities, various user roles (admin, member, manager, agent), and permissions for both organizational and vendor files. Uses boolean logic to combine roles for permission definitions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/global-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: schema\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    // roles\n    relation admin @user\n    relation member @user\n    relation manager @user\n    relation agent @user\n\n    // organization files access permissions\n    permission view_files = admin or manager or (member not agent)\n    permission delete_file = admin\n\n    // vendor files access permissions\n    permission view_vendor_files = admin or manager or agent\n    permission delete_vendor_file = agent\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Permissions in Facebook Groups Model with Permify\nDESCRIPTION: This code demonstrates how permissions are inherited across entities in a Facebook Groups model. It shows how a 'view' action on a comment is determined by either direct ownership or inherited group membership through the post entity.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/impersonation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\n// Represents a post in a Facebook group\nentity post {\n\n    ..\n    ..\n\n    // Relation to represent the group that the post belongs to\n    relation group @group\n\n    // Permissions for the post entity\n\n    ..\n    ..\n    permission group_member = group.member\n}\n\n// Represents a comment on a post in a Facebook group\nentity comment {\n\n    // Relation to represent the owner of the comment\n    relation owner @user\n\n    // Relation to represent the post that the comment belongs to\n    relation post @post\n    relation comment @comment\n\n    ..\n    ..\n\n    // Permissions\n    action view = owner or post.group_member\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Access Check Scenario in YAML\nDESCRIPTION: This YAML snippet defines a test scenario for conducting access checks. It specifies the entity (repository), subject (user), and assertions for edit and delete permissions. This scenario tests whether a user with admin rights can edit and delete a repository.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/playground.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: admin_access_test\nentity: repository:1\nsubject: user:1\nassertions:\n  - edit: true\n  - delete: false\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema and Relationships in YAML\nDESCRIPTION: This YAML snippet defines the complete schema for all entities, their relationships, and permissions. It also includes a list of relationship tuples and test scenarios for validating the authorization logic.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n  entity user {}\n\n  entity workspace {\n      // The owner of the workspace\n      relation owner @user\n      // Members of the workspace\n      relation member @user\n      // Guests (users with read-only access) of the workspace\n      relation guest @user\n      // Bots associated with the workspace\n      relation bot @user\n      // Admin users who have permission to manage the workspace\n      relation admin @user\n\n      // Define permissions for workspace actions\n      permission create_page = owner or member or admin\n      permission invite_member = owner or admin\n      permission view_workspace = owner or member or guest or bot\n      permission manage_workspace = owner or admin\n\n      // Define permissions that can be inherited by child entities\n      permission read = member or guest or bot or admin\n      permission write = owner or admin\n  }\n\n  entity page {\n      // The workspace associated with the page\n      relation workspace @workspace\n      // The user who can write to the page\n      relation writer @user\n      // The user(s) who can read the page (members of the workspace or guests)\n      relation reader @user @workspace#member @workspace#guest\n\n      // Define permissions for page actions\n      permission read = reader or workspace.read\n      permission write = writer or workspace.write\n  }\n\n  entity database {\n      // The workspace associated with the database\n      relation workspace @workspace\n      // The user who can edit the database\n      relation editor @user\n      // The user(s) who can view the database (members of the workspace or guests)\n      relation viewer @user @workspace#member @workspace#guest\n\n      // Define permissions for database actions\n      permission read = viewer or workspace.read\n      permission write = editor or workspace.write\n      permission create = editor or workspace.write\n      permission delete = editor or workspace.write\n  }\n\n  entity block {\n      // The page associated with the block\n      relation page @page\n      // The database associated with the block\n\n      relation database @database\n      // The user who can edit the block\n      relation editor @user\n      // The user(s) who can comment on the block (readers of the parent object)\n      relation commenter @user @page#reader\n\n      // Define permissions for block actions\n      permission read = database.read or commenter\n      permission write = editor or database.write\n      permission comment = commenter\n  }\n\n  entity comment {\n      // The block associated with the comment\n      relation block @block\n\n      // The author of the comment\n      relation author @user\n\n      // Define permissions for comment actions\n      permission read = block.read\n      permission write = author\n  }\n\n  entity template {\n  // The workspace associated with the template\n      relation workspace @workspace\n      // The user who creates the template\n      relation creator @user\n\n      // The user(s) who can view the page (members of the workspace or guests)\n      relation viewer @user @workspace#member @workspace#guest\n\n      // Define permissions for template actions\n      permission read = viewer or workspace.read\n      permission write = creator or workspace.write\n      permission create = creator or workspace.write\n      permission delete = creator or workspace.write\n  }\n\n  entity integration {\n      // The workspace associated with the integration\n      relation workspace @workspace\n\n      // The owner of the integration\n      relation owner @user\n\n      // Define permissions for integration actions\n      permission read = workspace.read\n      permission write = owner or workspace.write\n  }\n\nrelationships:\n  - workspace:engineering_team#owner@user:alice\n  - workspace:engineering_team#member@user:bob\n  - workspace:engineering_team#guest@user:charlie\n  - workspace:engineering_team#admin@user:alice\n  - workspace:sales_team#owner@user:david\n  - workspace:sales_team#member@user:eve\n  - workspace:sales_team#guest@user:frank\n  - workspace:sales_team#admin@user:david\n  - page:project_plan#workspace@workspace:engineering_team\n  - page:product_spec#workspace@workspace:engineering_team\n  - database:task_list#workspace@workspace:engineering_team\n  - template:weekly_report#workspace@workspace:sales_team\n  - database:customer_list#workspace@workspace:sales_team\n  - template:marketing_campaign#workspace@workspace:sales_team\n  - page:project_plan#writer@user:frank\n  - page:project_plan#reader@user:bob\n  - database:task_list#editor@user:alice\n  - database:task_list#viewer@user:bob\n  - template:weekly_report#creator@user:alice\n  - template:weekly_report#viewer@user:bob\n  - page:product_spec#writer@user:david\n  - page:product_spec#reader@user:eve\n  - database:customer_list#editor@user:david\n  - database:customer_list#viewer@user:eve\n  - template:marketing_campaign#creator@user:david\n  - template:marketing_campaign#viewer@user:eve\n  - block:task_list_1#database@database:task_list\n  - block:task_list_1#editor@user:alice\n  - block:task_list_1#commenter@user:bob\n  - block:task_list_2#database@database:task_list\n  - block:task_list_2#editor@user:alice\n  - block:task_list_2#commenter@user:bob\n  - comment:task_list_1_comment_1#block@block:task_list_1\n  - comment:task_list_1_comment_1#author@user:bob\n  - comment:task_list_1_comment_2#block@block:task_list_1\n  - comment:task_list_1_comment_2#author@user:charlie\n  - comment:task_list_2_comment_1#block@block:task_list_2\n  - comment:task_list_2_comment_1#author@user:bob\n  - comment:task_list_2_comment_2#block@block:task_list_2\n  - comment:task_list_2_comment_2#author@user:charlie\n\nscenarios:\n  - name: \"scenario 1\"\n    description: \"test description\"\n    checks:\n      - entity: \"database:task_list\"\n        subject: \"user:alice\"\n        assertions:\n          write: true\n      - entity: \"page:product_spec\"\n        subject: \"user:charlie\"\n        assertions:\n          write: false\n```\n\n----------------------------------------\n\nTITLE: Performing Access Check with Permify in Python\nDESCRIPTION: Python implementation for checking if a user can edit a repository using the Permify REST SDK. The code initializes the Permify API client, creates a check request with metadata, entity, permission, and subject details, then handles the response.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Rest SDK for Python\napi_instance = permify.PermissionApi(api_client)\nmetadata = permify.PermissionCheckRequestMetadata(depth=20)\nbody = permify.CheckBody(metadata=metadata, entity=permify.Entity(id=\"repository1\", type=\"repository\"), permission=\"edit\", subject=permify.Subject(id=\"user1\", type=\"user\"))\ntry:\n    response = api_instance.permissions_check(\"t1\", body)\n    pprint(response.to_dict())\nexcept ApiException as e:\n    print(\"Exception when checking permission: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Permission Relationships in Permify\nDESCRIPTION: This improved schema implements a recursive relationship between parent-child organizations. By using 'parent.view' instead of 'parent.member', it allows for multiple levels of upward traversal in the organization hierarchy, enabling members to view details of any descendant organization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/recursive-rebac.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation parent @organization\n    relation member @user @organization#member\n\n    action view = member or parent.view\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Access Check with Permify in JavaScript\nDESCRIPTION: JavaScript implementation for verifying permissions using the Permify REST SDK. The code creates a permission check request to see if a user can edit a repository, specifying a depth of 20 for the permission check, and handles both success and error responses.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest SDK for Javascript\nconst api = permify.PermissionApi(apiClient)\nconst body = {\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"repository1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"user1\"\n    }\n};\ntry {\n    api.permissionsCheck(tenantId, body, (error, data, response) => {\n    if (error) {\n        // handle the error\n    }\n    // handle the response\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Facebook Group Authorization Schema in Permify\nDESCRIPTION: This snippet defines the complete schema for a Facebook-like group system using Permify. It includes entity definitions for users, groups, posts, comments, likes, polls, files, and events, along with their relationships and permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\n// Represents a user\nentity user {}\n\n// Represents a Facebook group\nentity group {\n\n    // Relation to represent the members of the group\n    relation member @user\n    // Relation to represent the admins of the group\n    relation admin @user\n    // Relation to represent the moderators of the group\n    relation moderator @user\n\n    // Permissions for the group entity\n    action create = member\n    action join = member\n    action leave = member\n    action invite_to_group = admin\n    action remove_from_group = admin or moderator\n    action edit_settings = admin or moderator\n    action post_to_group = member\n    action comment_on_post = member\n    action view_group_insights = admin or moderator\n}\n\n// Represents a post in a Facebook group\nentity post {\n\n    // Relation to represent the owner of the post\n    relation owner @user\n    // Relation to represent the group that the post belongs to\n    relation group @group\n\n    // Permissions for the post entity\n    action view_post = owner or group.member\n    action edit_post = owner or group.admin\n    action delete_post = owner or group.admin\n\n    permission group_member = group.member\n}\n\n// Represents a comment on a post in a Facebook group\nentity comment {\n\n    // Relation to represent the owner of the comment\n    relation owner @user\n\n    // Relation to represent the post that the comment belongs to\n    relation post @post\n\n    // Permissions for the comment entity\n    action view_comment = owner or post.group_member\n    action edit_comment = owner\n    action delete_comment = owner\n}\n\n// Represents a comment like on a post in a Facebook group\nentity like {\n\n    // Relation to represent the owner of the like\n    relation owner @user\n\n    // Relation to represent the post that the like belongs to\n    relation post @post\n\n    // Permissions for the like entity\n    action like_post = owner or post.group_member\n    action unlike_post = owner or post.group_member\n}\n\n// Definition of poll entity\nentity poll {\n\n     // Relation to represent the owner of the poll\n    relation owner @user\n\n    // Relation to represent the group that the poll belongs to\n    relation group @group\n\n    // Permissions for the poll entity\n    action create_poll = owner or group.admin\n    action view_poll = owner or group.member\n    action edit_poll = owner or group.admin\n    action delete_poll = owner or group.admin\n}\n\n// Definition of file entity\nentity file {\n\n    // Relation to represent the owner of the file\n    relation owner @user\n\n    // Relation to represent the group that the file belongs to\n    relation group @group\n\n    // Permissions for the file entity\n    action upload_file = owner or group.member\n    action view_file = owner or group.member\n    action delete_file = owner or group.admin\n}\n\n// Definition of event entity\nentity event {\n\n    // Relation to represent the owner of the event\n    relation owner @user\n    // Relation to represent the group that the event belongs to\n    relation group @group\n\n    // Permissions for the event entity\n    action create_event = owner or group.admin\n    action view_event = owner or group.member\n    action edit_event = owner or group.admin\n    action delete_event = owner or group.admin\n    action RSVP_to_event = owner or group.member\n}\n```\n\n----------------------------------------\n\nTITLE: Bank Account Withdrawal Authorization System in Permify\nDESCRIPTION: A complete banking system model that implements withdrawal authorization logic using double attributes and relations. It checks both account ownership and balance conditions before granting withdrawal permission.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/numerical-conditions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(request.amount, balance) and owner\n}\n\nrule check_balance(amount double, balance double) {\n    (balance >= amount) && (amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Instagram Authorization Schema in Permify\nDESCRIPTION: Defines entities, relations, attributes, and actions for users, accounts, and posts in an Instagram-like system. It sets up rules for viewing accounts, posts, and interacting with content based on relationships and privacy settings.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/instagram.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    // users have accounts\n    relation owner @user\n\n    // accounts can follow other users/accounts.\n    relation following @user\n\n    // other users/accounts can follow account.\n    relation follower @user\n\n    // accounts can be private or public.\n    attribute public boolean\n\n    // users can view an account if they're followers, owners, or if the account is not private.\n    action view = (owner or follower) or public\n\n}\n\nentity post {\n    // posts are linked with accounts.\n    relation account @account\n\n    // comments are limited to people followed by the parent account.\n    attribute restricted boolean\n\n    // users can view the posts, if they have access to view the linked accounts.\n    action view = account.view\n\n    // users can comment and like on unrestricted posts or posts by owners who follow them.\n    action comment = account.following not restricted\n    action like = account.following not restricted\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Access Check Request with Permify Check API (JSON)\nDESCRIPTION: This snippet shows the JSON structure for sending an access check request to Permify's Check API. It includes metadata, entity details, permission to check, and subject information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"schema_version\": \"\",\n    \"snap_token\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"organization\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"view_files\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weekday-Based Access Control in Perm\nDESCRIPTION: This example demonstrates a model where repository access is granted based on the day of the week and organization membership. It uses a custom rule to check valid weekdays.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_7\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    relation member @user\n\n    attribute valid_weekdays string[]\n\n    permission view = is_weekday(valid_weekdays) and member\n}\n\nentity repository {\n\n    relation organization  @organization\n\n    permission view = organization.view\n}\n\nrule is_weekday(valid_weekdays string[]) {\n      context.data.day_of_week in valid_weekdays\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Parent-Child Permission Relationship in Permify\nDESCRIPTION: This code defines a basic permission model with parent-child organization relationships. It allows members of an organization to view it, and also allows members of parent organizations to view child organizations through a single upward traversal.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/recursive-rebac.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation parent @organization\n    relation member @user @organization#member\n\n    action view = member or parent.member\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Management Schema in Permify\nDESCRIPTION: Complete schema definition for a document management system with users, organizations, groups, and documents. It establishes relations between entities and defines permissions for document access and editing.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation group @group\n    relation document @document\n    relation administrator @user @group#direct_member @group#manager\n    relation direct_member @user\n\n    permission admin = administrator\n    permission member = direct_member or administrator or group.member\n}\n\nentity group {\n    relation manager @user @group#direct_member @group#manager\n    relation direct_member @user @group#direct_member @group#manager\n\n    permission member = direct_member or manager\n}\n\nentity document {\n    relation org @organization\n\n    relation viewer  @user  @group#direct_member @group#manager\n    relation manager @user @group#direct_member @group#manager\n\n    action edit = manager or org.admin\n    action view = viewer or manager or org.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Roles Schema in Permify\nDESCRIPTION: Schema definition for implementing custom roles with relationships between users, roles, dashboards, and tasks. Establishes view and edit permissions for dashboard and task entities through role assignments.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/custom-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity role {\n    relation assignee @user\n}\n\nentity dashboard {\n    relation view @role#assignee\n    relation edit @role#assignee\n}\n\nentity task {\n    relation view @role#assignee\n    relation edit @role#assignee\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples in Node.js\nDESCRIPTION: Example showing how to create a relation tuple in Node.js where user:3 is granted admin role in organization:1. This uses the Permify client to write the relationship data to the specified tenant.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.data\n  .write({\n    tenantId: \"t1\",\n    metadata: {\n      schemaVersion: \"\",\n    },\n    tuples: [\n      {\n        entity: {\n          type: \"organization\",\n          id: \"1\",\n        },\n        relation: \"admin\",\n        subject: {\n          type: \"user\",\n          id: \"3\",\n        },\n      },\n    ],\n  })\n  .then((response) => {\n    // handle response\n  });\n```\n\n----------------------------------------\n\nTITLE: Authorization Model Definition in Permify Schema\nDESCRIPTION: Example of an authorization model defined using Permify Schema. This model defines entities (user, organization, document), their relationships, and permission actions that determine access control decisions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n        \nentity organization {\n\n    // organizational roles\n    relation admin @user\n    relation member @user\n}\n\nentity document {\n\n    // represents documents parent organization\n    relation parent @organization\n    \n    // represents owner of this document\n    relation owner  @user\n    \n    // permissions\n    action edit   = parent.admin or owner\n    action delete = owner\n} \n```\n\n----------------------------------------\n\nTITLE: Performing Access Check with Permify in TypeScript\nDESCRIPTION: TypeScript implementation for permission checking using the Permify REST SDK. This snippet demonstrates how to create a request to verify if a user has edit permissions on a repository, with detailed request body structure and error handling.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest SDK for Typescript\nconst api = permify.PermissionApi(apiClient)\nconst body = {\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"repository1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"user1\"\n    }\n};\ntry {\n    api.permissionsCheck(tenantId, body, (error, data, response) => {\n    if (error) {\n        // handle the error\n    }\n    // handle the response\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify\nDESCRIPTION: This JSON schema defines the entities, relations, and permissions for a complex authorization system in Permify. It includes user roles, organization structure, and access control for different types of resources based on confidentiality levels.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/llm-authorization.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entity user {}\"\n\n    \"entity organization {\n        relation director @user\n        relation member @user\n    }\"\n\n    \"entity team {\n        relation lead @user\n        relation member @user\n        relation parent @organization\n    }\"\n\n    \"entity db_table {\n        relation parent @organization\n        relation team @team\n        attribute confidentiality_level integer\n        \n        permission view_director = check_confidentiality_high(confidentiality_level) and parent.director\n        permission view_team_lead = check_confidentiality_medium_high(confidentiality_level) and (parent.director or team.lead)\n        permission view_team_member = check_confidentiality_medium(confidentiality_level) and (team.lead or team.member)\n        permission view_org_member = check_confidentiality_low(confidentiality_level) and parent.member\n\n        action view = view_director or view_team_lead or view_team_member or view_org_member\n        action edit = team.lead\n    }\"\n\n    \"entity report {\n        relation parent @organization\n        relation team @team\n        attribute confidentiality_level integer\n        \n        permission view_director = check_confidentiality_high(confidentiality_level) and parent.director\n        permission view_team_lead = check_confidentiality_medium_high(confidentiality_level) and (parent.director or team.lead)\n        permission view_team_member = check_confidentiality_medium(confidentiality_level) and (team.lead or team.member)\n        permission view_org_member = check_confidentiality_low(confidentiality_level) and parent.member\n\n        action view = view_director or view_team_lead or view_team_member or view_org_member\n        action edit = team.lead\n    }\"\n\n    \"entity excel_file {\n        relation parent @organization\n        relation team @team\n        attribute confidentiality_level integer\n        \n        permission view_director = check_confidentiality_high(confidentiality_level) and parent.director\n        permission view_team_lead = check_confidentiality_medium_high(confidentiality_level) and (parent.director or team.lead)\n        permission view_team_member = check_confidentiality_medium(confidentiality_level) and (parent.director or team.lead or team.member)\n        permission view_org_member = check_confidentiality_low(confidentiality_level) and (parent.director or team.lead or team.member or parent.member)\n\n        action view = view_director or view_team_lead or view_team_member or view_org_member\n        action edit = team.lead\n    }\"\n\n    \"rule check_confidentiality_high(confidentiality_level integer) {\n        confidentiality_level == 4\n    }\"\n\n    \"rule check_confidentiality_medium_high(confidentiality_level integer) {\n        confidentiality_level == 3\n    }\"\n\n    \"rule check_confidentiality_medium(confidentiality_level integer) {\n        confidentiality_level == 2\n    }\"\n\n    \"rule check_confidentiality_low(confidentiality_level integer) {\n        confidentiality_level == 1\n    }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Check with Multi-Tenancy in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the Permify client to perform a permission check with multi-tenancy support. It includes setting up the client, creating the request with tenant ID, and handling the check result.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/multi-tenancy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport permify\nfrom permify.models.permission_check_request import PermissionCheckRequest\nfrom permify.rest import ApiException\nfrom pprint import pprint\n\nconfiguration = permify.Configuration(host=\"http://localhost\")\n\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.PermissionApi(api_client)\n    tenant_id = 't1'\n\n    body = PermissionCheckRequest(\n        tenant_id=tenant_id,\n        metadata={\n            \"snapToken\": \"\",\n            \"schemaVersion\": \"\",\n            \"depth\": 20\n        },\n        entity={\n            \"type\": \"repository\",\n            \"id\": \"1\",\n        },\n        permission=\"edit\",\n        subject={\n            \"type\": \"user\",\n            \"id\": \"1\",\n        }\n    )\n\n    try:\n        api_response = api_instance.permissions_check(tenant_id, body)\n        if api_response.can == PermissionCheckResponse.Result.RESULT_ALLOWED:\n            print(\"RESULT_ALLOWED\")\n        else:\n            print(\"RESULT_DENIED\")\n    except ApiException as e:\n        print(f\"Exception when calling PermissionApi->permissions_check: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Permify ABAC Validation File\nDESCRIPTION: Complete example of a Permify ABAC validation file including schema, relationships, attributes, and scenarios.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n  entity user {}\n\n  entity organization {\n\n      relation member @user\n\n      attribute credit integer\n\n      permission view = check_credit(credit) and member\n  }\n\n  entity repository {\n\n      relation organization  @organization\n\n      attribute is_public boolean\n      attribute valid_weekdays string[]\n\n      permission view = is_public\n      permission edit = organization.view\n      permission delete = is_weekday(valid_weekdays)\n  }\n\n  rule check_credit(credit integer) {\n      credit > 5000\n  }\n\n  rule is_weekday(valid_weekdays string[]) {\n      context.data.day_of_week in valid_weekdays\n  }\n\nrelationships:\n  - organization:1#member@user:1\n  - repository:1#organization@organization:1\n\nattributes:\n  - organization:1$credit|integer:6000\n  - repository:1$is_public|boolean:true\n\nscenarios:\n  - name: \"scenario 1\"\n    description: \"test description\"\n    checks:\n      - entity: \"repository:1\"\n        subject: \"user:1\"\n        context:\n        assertions:\n          view: true\n      - entity: \"repository:1\"\n        subject: \"user:1\"\n        context:\n          tuples: []\n          attributes: []\n          data:\n            day_of_week: \"saturday\"\n        assertions:\n          view: true\n          delete: false\n      - entity: \"organization:1\"\n        subject: \"user:1\"\n        context:\n        assertions:\n          view: true\n    entity_filters:\n      - entity_type: \"repository\"\n        subject: \"user:1\"\n        context:\n        assertions:\n          view: [\"1\"]\n    subject_filters:\n      - subject_reference: \"user\"\n        entity: \"repository:1\"\n        context:\n        assertions:\n          view: [\"1\"]\n          edit: [\"1\"]\n```\n\n----------------------------------------\n\nTITLE: Managing Nested Hierarchies in Permify Schema\nDESCRIPTION: Schema implementing deeply nested hierarchical permissions between organizations, teams and projects. Demonstrates permission inheritance through entity relationships.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rebac.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    // organization user types\n    relation admin @user\n}\n\nentity team {\n    //refers to the organization that a team belongs to \n    relation org @organization\n\n    // Only the organization administrator can edit\n    action edit = org.admin\n}\n\nentity project {\n    //refers to the team that a project belongs to \n    relation team @team\n\n    // This action is responsible for nested permission inheritance\n    // team.edit refers to the edit action on the team entity which we defined above \n    action edit = team.edit\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Permify with Postgres and Redis\nDESCRIPTION: A Docker Compose configuration that sets up a complete Permify environment with three services: Permify authorization engine, PostgreSQL database, and Redis cache. Each service is configured with appropriate environment variables, ports, and dependencies.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/reference/snap-tokens.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.9\"\n\nservices:\n  permify:\n    image: \"ghcr.io/permify/permify\"\n    command: \"serve\"\n    ports:\n      - \"3476:3476\"\n      - \"3478:3478\"\n    environment:\n      - PERMIFY_DATABASE_ENGINE=postgres\n      - PERMIFY_POSTGRES_CONNECTION_STRING=postgres://postgres:postgres@postgres:5432/permify?sslmode=disable\n      - PERMIFY_CACHE_ENGINE=redis\n      - PERMIFY_REDIS_ADDRESS=redis:6379\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n\n  postgres:\n    image: postgres:15.3-alpine\n    container_name: postgres\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_DB=permify\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7.0.12-alpine\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"redis-cli ping | grep PONG\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes and Relationships using cURL with Permify API\nDESCRIPTION: This cURL command shows how to create both a relational tuple and an attribute in a single request using Permify's REST API. It creates a document editor relationship and sets a boolean attribute for document privacy.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n      {\n        \"entity\": {\n          \"type\": \"document\",\n          \"id\": \"1\"\n        },\n        \"relation\": \"editor\",\n        \"subject\": {\n          \"type\": \"user\",\n          \"id\": \"1\"\n        }\n    }\n    ],\n    \"attributes\": [\n        {\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": {\n                \"@type\": \"type.googleapis.com/base.v1.BooleanValue\",\n                \"data\": true\n            }\n        }\n    ]\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify\nDESCRIPTION: A code snippet showing how to define entities, relations, and actions in Permify's schema language. This example defines a user entity, organization entity with admin and member relations, and document entity with parent and owner relations plus edit and delete actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/permify-overview/faqs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n        \nentity organization {\n\n    // organizational roles\n    relation admin @user\n    relation member @user\n}\n\nentity document {\n\n    // represents documents parent organization\n    relation parent @organization\n    \n    // represents owner of this document\n    relation owner  @user\n    \n    // permissions\n    action edit   = parent.admin or owner\n    action delete = owner\n} \n```\n\n----------------------------------------\n\nTITLE: Defining User and Resource Entities with Permissions in Permify\nDESCRIPTION: This schema defines user and resource entities, with the resource having an owner relation and an is_public attribute. It sets up view permissions for public resources or owners, and edit permissions for owners only.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/public-private.mdx#2025-04-17_snippet_0\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n\nentity resource {\n  relation owner @user\n  attribute is_public boolean\n\n  permission view = is_public or owner\n  permission edit = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Project Management Authorization Schema in Permify\nDESCRIPTION: This Permify schema defines authorization rules for a project management system. It models users, teams, and projects with their relationships and defines view, edit, and delete permissions based on user roles and team membership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_14\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity team {\n\n    relation owner @user\n    relation member @user\n}\n\nentity project {\n\n    relation team @team\n    relation owner @user\n\n    action view = team.member or team.owner or project.owner\n    action edit = project.owner or team.owner\n    action delete = project.owner or team.owner\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python API Client for Permify Cloud Integration\nDESCRIPTION: Code for initializing the Permify API client in Python, configuring the host and adding the API key for authorization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Rest SDK for Python\nimport permify\n\nconfiguration = permify.Configuration(\n    host = \"<your-permify-endpoint>:3476\"\n)\n\napi_client = permify.ApiClient(configuration, \n                       header_name=\"Authorization\", \n                       header_value=\"Bearer <your-permify-api-key>\")\n```\n\n----------------------------------------\n\nTITLE: String Attribute and Rule Example in Permify Schema\nDESCRIPTION: This example shows how to use string attributes and define a custom rule for location-based access control in a Permify schema. It includes entity definitions and a rule for checking locations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n\trelation admin @user\n\n\tattribute location string[]\n\n\tpermission view = check_location(location) or admin\n}\n\nrule check_location(location string[]) {\n\tcontext.data.current_location in location\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Union-based Permission Definition in Go\nDESCRIPTION: This code demonstrates how to create a permission definition using a union operator in Permify. It establishes a 'view' permission that is granted if the user is either in the 'viewer' relation or has 'edit' permission, showing how to build complex permission logic.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"viewer\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"editor\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"view\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperation: entity.Operation_UNION,\n\t\t\t\t\tChildren: []*entity.ComputedUserset{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"viewer\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"editor\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization-Wide Resource Protection in Permify Schema\nDESCRIPTION: Schema defining access control for organization-wide resources using GitHub-like repository permissions model. Implements push, read and delete actions based on user roles and relationships.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rebac.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {} \n\nentity organization {\n    // organizational roles\n    relation admin @user    \n    relation member @user    \n} \n\nentity repository {\n    // represents repositories parent organization\n    relation parent @organization \n\n    // represents user of this repository\n    relation owner  @user           \n\n    // permissions\n    action push   = owner\n    action read   = owner and (parent.admin or parent.member)\n    action delete = parent.admin or owner\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Mercury Authorization Schema with Rules\nDESCRIPTION: The final authorization schema for Mercury banking that implements attribute-based access control with rules for balance checking, withdrawal limits, and approval requirements based on user roles and transaction amounts.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/mercury.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n\n    attribute admin_approval_limit integer\n    attribute member_approval_limit integer\n    attribute approval_num integer\n\n    action approve = admin\n    action create_account = admin\n\n    permission approval = (member and check_member_approval(approval_num, member_approval_limit)) or (admin and check_admin_approval(approval_num, admin_approval_limit))\n}\n\nentity account {\n    relation checkings @account\n    relation savings @account\n\n    relation owner @organization\n    \n    attribute withdraw_limit double\n    attribute balance double \n\n    action withdraw = check_balance(balance, request.amount) and (check_limit(withdraw_limit, request.amount) or owner.approval)\n}\n\nrule check_balance(balance double, amount double) {\n    balance >= amount\n}\n\nrule check_limit(withdraw_limit double, amount double) {\n    withdraw_limit >= amount \n}\n\nrule check_admin_approval(approval_num integer, admin_approval_limit integer) {\n    approval_num >= admin_approval_limit\n}\n\nrule check_member_approval(approval_num integer, member_approval_limit integer) {\n    approval_num >= member_approval_limit\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions using TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to add permissions (relationships) to Permify using the TypeScript SDK and the Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest SDK for Typescript\nconst api = permify.DataApi(apiClient)\nconst body = {\n        tenantId: \"t1\",\n        metadata: {\n            schemaVersion: \"\"\n        },\n        tuples: [{\n            entity: {\n                type: \"organization\",\n                id: \"organization1\"\n            },\n            relation: \"admin\",\n            subject: {\n                type: \"user\",\n                id: \"user1\"\n            }\n        }],\n        attributes: []\n};\ntry {\n    api.dataWrite(tenantId, body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Schema with Relations in Permify\nDESCRIPTION: An example schema defining entity relationships and permission rules used to demonstrate how Permify's lookup operations work. The schema shows relationships between users, organizations, containers, and documents with corresponding access rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/lookup-entity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nentity user {}\n\nentity organization {\n\t\trelation admin @user\n}\n\nentity container {\n\t\trelation parent @organization\n\t\trelation container_admin @user\n\t\taction admin = parent.admin or container_admin\n}\n\t\nentity document {\n\t\trelation container @container\n\t\trelation viewer @user\n\t\trelation owner @user\n\t\taction view = viewer or owner or container.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Authorization Schema in YAML\nDESCRIPTION: Comprehensive YAML configuration defining the entire authorization schema including entities, relationships, and test scenarios for Facebook group permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n    entity user {}\n\n    entity group {\n        // Relation to represent the members of the group\n        relation member @user\n        // Relation to represent the admins of the group\n        relation admin @user\n        // Relation to represent the moderators of the group\n        relation moderator @user\n\n        // Permissions for the group entity\n        action create = member\n        action join = member\n        action leave = member\n        action invite_to_group = admin\n        action remove_from_group = admin or moderator\n        action edit_settings = admin or moderator\n        action post_to_group = member\n        action comment_on_post = member\n        action view_group_insights = admin or moderator\n    }\n\n    entity post {\n        // Relation to represent the owner of the post\n        relation owner @user\n        // Relation to represent the group that the post belongs to\n        relation group @group\n\n        // Permissions for the post entity\n        action view_post = owner or group.member\n        action edit_post = owner or group.admin\n        action delete_post = owner or group.admin\n\n        permission group_member = group.member\n    }\n\n    entity comment {\n        // Relation to represent the owner of the comment\n        relation owner @user\n\n        // Relation to represent the post that the comment belongs to\n        relation post @post\n\n        // Permissions for the comment entity\n        action view_comment = owner or post.group_member\n        action edit_comment = owner\n        action delete_comment = owner\n    }\n\n    entity like {\n        // Relation to represent the owner of the like\n        relation owner @user\n\n        // Relation to represent the post that the like belongs to\n        relation post @post\n\n        // Permissions for the like entity\n        action like_post = owner or post.group_member\n        action unlike_post = owner or post.group_member\n    }\n\n    entity poll {\n        // Relation to represent the owner of the poll\n        relation owner @user\n\n        // Relation to represent the group that the poll belongs to\n        relation group @group\n\n        // Permissions for the poll entity\n        action create_poll = owner or group.admin\n        action view_poll = owner or group.member\n        action edit_poll = owner or group.admin\n        action delete_poll = owner or group.admin\n    }\n\n    entity file {\n        // Relation to represent the owner of the file\n        relation owner @user\n\n        // Relation to represent the group that the file belongs to\n        relation group @group\n\n        // Permissions for the file entity\n        action upload_file = owner or group.member\n        action view_file = owner or group.member\n        action delete_file = owner or group.admin\n    }\n\n    entity event {\n        // Relation to represent the owner of the event\n        relation owner @user\n        // Relation to represent the group that the event belongs to\n        relation group @group\n\n        // Permissions for the event entity\n        action create_event = owner or group.admin\n        action view_event = owner or group.member\n        action edit_event = owner or group.admin\n        action delete_event = owner or group.admin\n        action RSVP_to_event = owner or group.member\n    }\n\nrelationships:\n    - group:1#member@user:1\n    - group:1#admin@user:2\n    - group:2#moderator@user:3\n    - group:2#member@user:4\n    - group:1#member@user:5\n    - post:1#owner@user:1\n    - post:1#group@group:1\n    - post:2#owner@user:4\n    - post:2#group@group:1\n    - comment:1#owner@user:2\n    - comment:1#post@post:1\n    - comment:2#owner@user:5\n    - comment:2#post@post:2\n    - like:1#owner@user:3\n    - like:1#post@post:1\n    - like:2#owner@user:4\n    - like:2#post@post:2\n    - poll:1#owner@user:2\n    - poll:1#group@group:1\n    - poll:2#owner@user:5\n    - poll:2#group@group:1\n    - file:1#owner@user:1\n    - file:1#group@group:1\n    - event:1#owner@user:3\n    - event:1#group@group:1\n\nscenarios:\n  - name: \"scenario 1\"\n    description: \"test description\"\n    checks:\n      - entity: \"event:1\"\n        subject: \"user:4\"\n        assertions:\n          RSVP_to_event : false\n      - entity: \"comment:1\"\n        subject: \"user:5\"\n        assertions:\n          view_comment : true\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Relationships and Attributes in Permify\nDESCRIPTION: Sets up sample relationships between users, accounts, and posts, as well as attributes for accounts and posts to test the authorization schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/instagram.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\n// Relationships\n// Users, Accounts and Posts:\n  account:1#owner@user:kevin\n  account:2#owner@user:george\n  account:1#following@user:george\n  account:2#follower@user:kevin\n  post:1#account@account:1\n  post:2#account@account:2\n\n// Attributes\n// Accounts and Posts:\n  account:1$public|boolean:true\n  account:2$public|boolean:false\n  post:1$restricted|boolean:false\n  post:2$restricted|boolean:true\n```\n\n----------------------------------------\n\nTITLE: Defining Database Entity Permissions in Perm\nDESCRIPTION: This snippet defines the schema for a database entity, including its relationships and permissions. It specifies that write permission is granted to editors or those with write permission in the associated workspace.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity database {\n    // The workspace associated with the database\n    relation workspace @workspace\n    // The user who can edit the database\n    relation editor @user\n\n    ..\n    ..\n\n    // Define permissions for database actions\n    ..\n    ..\n\n    permission write = editor or workspace.write\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Double Attribute and Rule Example in Permify Schema\nDESCRIPTION: This example shows how to use double attributes and define a custom rule for balance-based access control in a Permify schema. It includes an 'account' entity with a 'balance' attribute and a withdrawal permission.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(balance) and owner\n}\n\nrule check_balance(balance double) {\n\t(balance >= context.data.amount) && (context.data.amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Rule in Permify Model\nDESCRIPTION: Example of defining a delete permission rule in the Permify model that uses a function to check if it's a weekday.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\npermission delete = is_weekday(valid_weekdays)\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Relationships in Perm Language\nDESCRIPTION: This code snippet defines various relationships and permissions for a Notion-like application using the Perm language. It includes user-workspace assignments, content-workspace connections, and permission settings for different entities.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\n// Assign users to different workspaces:\nworkspace:engineering_team#owner@user:alice\nworkspace:engineering_team#member@user:bob\nworkspace:engineering_team#guest@user:charlie\nworkspace:engineering_team#admin@user:alice\nworkspace:sales_team#owner@user:david\nworkspace:sales_team#member@user:eve\nworkspace:sales_team#guest@user:frank\nworkspace:sales_team#admin@user:david\n\n// Connect pages, databases, and templates to workspaces:\npage:project_plan#workspace@workspace:engineering_team\npage:product_spec#workspace@workspace:engineering_team\ndatabase:task_list#workspace@workspace:engineering_team\ntemplate:weekly_report#workspace@workspace:sales_team\ndatabase:customer_list#workspace@workspace:sales_team\ntemplate:marketing_campaign#workspace@workspace:sales_team\n\n// Set permissions for pages, databases, and templates:\npage:project_plan#writer@user:frank\npage:project_plan#reader@user:bob\n\ndatabase:task_list#editor@user:alice\ndatabase:task_list#viewer@user:bob\n\ntemplate:weekly_report#creator@user:alice\ntemplate:weekly_report#viewer@user:bob\n\npage:product_spec#writer@user:david\npage:product_spec#reader@user:eve\n\ndatabase:customer_list#editor@user:david\ndatabase:customer_list#viewer@user:eve\n\ntemplate:marketing_campaign#creator@user:david\ntemplate:marketing_campaign#viewer@user:eve\n\n// Set relationships for blocks and comments:\nblock:task_list_1#database@database:task_list\nblock:task_list_1#editor@user:alice\nblock:task_list_1#commenter@user:bob\nblock:task_list_2#database@database:task_list\nblock:task_list_2#editor@user:alice\nblock:task_list_2#commenter@user:bob\n\ncomment:task_list_1_comment_1#block@block:task_list_1\ncomment:task_list_1_comment_1#author@user:bob\ncomment:task_list_1_comment_2#block@block:task_list_1\ncomment:task_list_1_comment_2#author@user:charlie\ncomment:task_list_2_comment_1#block@block:task_list_2\ncomment:task_list_2_comment_1#author@user:bob\ncomment:task_list_2_comment_2#block@block:task_list_2\ncomment:task_list_2_comment_2#author@user:charlie\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Checks with Double Attributes in Permify\nDESCRIPTION: Example showing how to use double attributes for financial transactions. This snippet defines an account entity with a balance attribute and a rule to check if withdrawal amounts are valid.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/numerical-conditions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(request.amount, balance) and owner\n}\n\nrule check_balance(amount double, balance double) {\n\t(balance >= amount) && (amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Data in Node.js\nDESCRIPTION: Example showing how to create an attribute in Node.js where document:1 has a boolean attribute 'is_private' set to true. This demonstrates how to properly format and encode attribute values using protobuf Any type.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst booleanValue = BooleanValue.fromJSON({ data: true });\n\nconst value = Any.fromJSON({\n    typeUrl: 'type.googleapis.com/base.v1.BooleanValue',\n    value: BooleanValue.encode(booleanValue).finish()\n});\n\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    attributes: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        attribute: \"is_private\",\n        value: value,\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Entities in a Single Schema in Go\nDESCRIPTION: This code demonstrates defining multiple entities within a single schema in Permify. It creates both 'organization' and 'document' entities with their respective relations and permissions, showing how to build a complete access control model with entity relationships.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"organization\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"member\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\tnil,\n\t),\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"organization\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"organization\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"view\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\tRelation: \"organization\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"member\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ABAC with Rules in Permify DSL\nDESCRIPTION: This snippet demonstrates how to implement Attribute-Based Access Control (ABAC) using rules in Permify DSL. It defines entities, attributes, and a rule to check IP range for access control.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_9\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n\trelation admin @user\n\n\tattribute ip_range string[]\n\n\tpermission view = check_ip_range(ip_range) or admin\n}\n\nrule check_ip_range(ip_range string[]) {\n\tcontext.data.ip in ip_range\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Hierarchical Permissions in Permify\nDESCRIPTION: This snippet demonstrates how to set up nested hierarchical permissions in Permify. It shows how to define a 'view_comment' permission that checks if the user is the comment owner or a member of the group to which the comment's post belongs.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\n// Represents a post in a Facebook group\nentity post {\n\n    ..\n    ..\n\n    // Relation to represent the group that the post belongs to\n    relation group @group\n\n    // Permissions for the post entity\n    \n    ..\n    ..\n    permission group_member = group.member\n}\n\n// Represents a comment on a post in a Facebook group\nentity comment {\n\n    // Relation to represent the owner of the comment\n    relation owner @user\n\n    // Relation to represent the post that the comment belongs to\n    relation post @post\n    relation comment @comment\n\n    ..\n    ..\n\n    // Permissions \n    action view_comment = owner or post.group_member\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Resource-Based Permission Check in Go\nDESCRIPTION: Example of a resource-based permission check request using the Go client. The request verifies if a user has edit permission on a repository resource within a tenant context.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncr, err: = client.Permission.Check(context.Background(), &v1.PermissionCheckRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionCheckRequestMetadata {\n        SnapToken: \"\",\n        SchemaVersion: \"\",\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n\n    if (cr.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        // RESULT_ALLOWED\n    } else {\n        // RESULT_DENIED\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Age-Based Access Control with Integer Attributes in Permify\nDESCRIPTION: A simple example demonstrating how to use integer attributes for age verification. The rule checks if the requester's age is at least 18 years old to grant the 'view' permission on content.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/numerical-conditions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity content {\n    permission view = check_age(request.age)\n}\n\nrule check_age(age integer) {\n\t\tage >= 18\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Permission Rule with Parent-Child Relationship in Go\nDESCRIPTION: Example showing a parent-child relationship between entities, where permissions can be propagated from parent to child. This demonstrates Permify's capability for hierarchical access control.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/bundle.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation owner @user\n    relation parent @organization\n\n    permission admin = owner\n    permission edit = admin\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Permission Schema Definition\nDESCRIPTION: Defines entities and their relationships for a repository access control system, including userfs, organization, and repository entities with associated permissions and access rules.\nSOURCE: https://github.com/Permify/permify/blob/master/pkg/schema/schema.txt#2025-04-17_snippet_0\n\nLANGUAGE: schema\nCODE:\n```\nentity userfs {}\n\nentity organization {\n    relation admin @userfs\n    relation member @userfs\n\n    action create_repository = (admin or member)\n    action delete = admin\n}\n\nentity repository {\n    relation owner @userfs @organization#member\n    relation parent @organization\n\n    action push = owner\n    action read = (owner and (parent.admin and parent.member))\n    action delete = (parent.member and (parent.admin or owner))\n    action edit = parent.member not owner\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Schema into Permify using JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to insert the example schema into Permify using the JavaScript SDK and the Write Schema API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest SDK for Javascript\nconst api = permify.SchemaApi(apiClient)\nconst schema = \"entity user {}\\n\\nentity organization {\\n    relation admin @user\\n    relation member @user\\n}\\n\\nentity repository {\\n    relation parent @organization\\n    relation owner @user\\n    \\n    permission edit = parent.admin or owner\\n    permission delete = owner\\n}\";\nconst. body = {\n    tenantId: \"t1\",\n    schema: schema\n};\ntry {\n    api.schemasWrite(\"t1\", body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Admin Relational Tuple in Node.js\nDESCRIPTION: This Node.js code snippet shows how to use the Write Data API to create a relational tuple representing an organization administrator.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"organization\",\n            id: \"1\"\n        },\n        relation: \"admin\",\n        subject: {\n            type: \"user\",\n            id: \"3\"\n        }\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring an ABAC Check Request in JSON\nDESCRIPTION: This JSON structure represents a complete check request for Attribute-Based Access Control, including entity, permission, subject, and context information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"type\": \"organization\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"view\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\"\n  },\n  \"context\": {\n    \"data\": {\n      \"ip_address\": \"187.182.51.206\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relations to Mercury Entities\nDESCRIPTION: Extends basic entities by defining relationships between them, such as admin and member relations for organizations, and account types for the accounts entity.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/mercury.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\trelation admin @user\n\trelation member @user\n}\n\nentity accounts {\n\trelation checkings @accounts\n\trelation savings @accounts\n\n\trelation org @organization\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Permission Definition in Go\nDESCRIPTION: This snippet shows how to create an entity with permissions in Permify. It defines a 'document' entity with 'view' and 'edit' permissions, where 'view' is granted to users in the 'viewer' relation or those with 'edit' permission.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"viewer\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"editor\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"view\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\tRelation: \"viewer\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t\tentity.NewPermission(\n\t\t\t\t\"edit\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\tRelation: \"editor\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Rules and Using Attributes in Permify Schema\nDESCRIPTION: This example shows how to define rules and use attributes in a Permify schema. It includes entity definitions, relations, attributes, and a custom rule for checking IP ranges.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n\trelation admin @user\n\n\tattribute ip_range string[]\n\n\tpermission view = check_ip_range(ip_range) or admin\n}\n\nrule check_ip_range(ip string, ip_range string[]) {\n\tcontext.data.ip in ip_range\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permify Request Control with gRPC in Go\nDESCRIPTION: An implementation of a request control handler using Permify with gRPC. The code creates a transport layer service that intercepts and authorizes requests using Permify's permission checking. It includes setup, context extraction, and permission enforcement.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases/simple-rbac.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype service struct {\n    permify permify.PermissionClient\n    // Your service dependencies\n}\n\nfunc NewServer(client permify.PermissionClient) pb.YourServiceServer {\n    return &service{\n        permify: client,\n    }\n}\n\nfunc (s *service) YourEndpoint(ctx context.Context, req *pb.YourRequest) (*pb.YourResponse, error) {\n    // Extract the user ID from the context\n    userID, err := extractUserID(ctx)\n    if err != nil {\n        return nil, status.Error(codes.Unauthenticated, \"authentication required\")\n    }\n\n    // Perform the permission check\n    resp, err := s.permify.Check(ctx, &permify.CheckRequest{\n        TenantId: \"t1\",\n        Metadata: &v1.PermissionCheckRequestMetadata{\n            SchemaVersion: \"1\",\n            SnapToken:     \"\",\n            Depth:         20,\n        },\n        Entity: &v1.Entity{\n            Type: \"user\",\n            Id:   userID,\n        },\n        Permission: \"create\",\n        Resource: &v1.Resource{\n            Type: \"repository\",\n            Id:   req.RepositoryId,\n        },\n    })\n\n    if err != nil {\n        return nil, status.Errorf(codes.Internal, \"permission check failed: %v\", err)\n    }\n\n    if resp.Can != permify.CheckResponse_ALLOWED {\n        return nil, status.Error(codes.PermissionDenied, \"insufficient permissions\")\n    }\n\n    // Permission is granted, proceed with your service logic\n    return &pb.YourResponse{\n        // Response data\n    }, nil\n}\n\nfunc extractUserID(ctx context.Context) (string, error) {\n    // Implementation depends on your authentication system\n    // This is just an example\n    md, ok := metadata.FromIncomingContext(ctx)\n    if !ok {\n        return \"\", errors.New(\"no metadata found\")\n    }\n\n    auth := md.Get(\"authorization\")\n    if len(auth) == 0 {\n        return \"\", errors.New(\"no authorization token\")\n    }\n\n    // Parse the token and extract the user ID\n    // ...\n\n    return \"user_id\", nil\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Permify Authorization Schema\nDESCRIPTION: Example schema definition for a Permify authorization model. Shows how to define entities, relations, permissions, and rules for a document-sharing system.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/instagram.md#2025-04-17_snippet_3\n\nLANGUAGE: schema\nCODE:\n```\nentity user {}\n\nentity document {\n    relation viewer @user\n    relation editor @user\n    relation owner @user\n    \n    permission view = viewer or editor or owner\n    permission edit = editor or owner\n    permission own = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Union in Permify DSL\nDESCRIPTION: This snippet shows how to implement permission union in Permify DSL. It defines actions that combine multiple permissions, demonstrating how to create more complex access rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_7\n\nLANGUAGE: perm\nCODE:\n```\naction edit =  member or manager\naction delete =  edit or org.admin\n```\n\n----------------------------------------\n\nTITLE: Defining Service Configuration Structure in YAML\nDESCRIPTION: This YAML structure outlines the configuration options for the Permify service, including circuit breaker, watch settings, and cache configurations for schema and permission services.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n├── service\n|   ├── circuit_breaker\n|   ├── watch:\n|   |   ├── enabled\n|   ├── schema:\n|   |   ├── cache:\n|   |   |   ├── number_of_counters\n|   |   |   ├── max_cost\n|   |   permission:\n|   |   |   ├── bulk_limit\n|   |   |   ├── concurrency_limit\n|   |   |   ├── cache:\n|   |   |   |   ├── number_of_counters\n|   |   |   |   ├── max_cost\n```\n\n----------------------------------------\n\nTITLE: Contextual Permission Check in Python with Permify Client\nDESCRIPTION: Python implementation of a permission check with contextual data. The code configures the Permify client and makes an API call to check permissions based on user ID and IP address.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport permify\nfrom permify.models.permission_check_request import PermissionCheckRequest\nfrom permify.models.permission_check_response import PermissionCheckResponse\nfrom permify.rest import ApiException\nfrom pprint import pprint\n\nconfiguration = permify.Configuration(host=\"http://localhost\")\n\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.PermissionApi(api_client)\n    tenant_id = 't1'\n\n    body = PermissionCheckRequest(\n        tenant_id=tenant_id,\n        metadata={\n            \"snapToken\": \"\",\n            \"schemaVersion\": \"\",\n            \"depth\": 20\n        },\n        entity={\n            \"type\": \"organization\",\n            \"id\": \"1\",\n        },\n        permission=\"hr_manager\",\n        subject={\n            \"type\": \"user\",\n            \"id\": \"1\",\n        },\n        context={\n            \"data\": {\n                \"ip_address\": \"192.158.1.38\",\n            },\n        },\n    )\n\n    try:\n        api_response = api_instance.permissions_check(tenant_id, body)\n        if api_response.can == PermissionCheckResponse.Result.RESULT_ALLOWED:\n            print(\"RESULT_ALLOWED\")\n        else:\n            print(\"RESULT_DENIED\")\n    except ApiException as e:\n        print(f\"Exception when calling PermissionApi->permissions_check: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Document Permissions in Permify\nDESCRIPTION: This snippet defines the permissions for a document entity, including relations and actions for viewing and editing. It specifies that managers and organization admins can edit, while viewers, managers, and admins can view.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: perm\nCODE:\n```\nentity document {\n    relation org @organization\n\n    relation viewer  @user  @group#member @group#manager\n    relation manager @user @group#member @group#manager\n\n    action edit = manager or org.admin\n    action view = viewer or manager or org.admin\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Relations and Attributes in Go\nDESCRIPTION: This code shows how to define an entity with relations and attributes in the Permify schema system. It creates a 'document' entity with relations to users and organizations, plus boolean attributes for representing document states.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"viewer\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"editor\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"parent\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"folder\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"organization\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"organization\",\n\t\t\t}),\n\t\t},\n\t\t[]*entity.Attribute{\n\t\t\tentity.NewAttribute(\"private\", entity.EntityAttributes_BOOLEAN),\n\t\t\tentity.NewAttribute(\"archived\", entity.EntityAttributes_BOOLEAN),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Roles in Permify\nDESCRIPTION: This snippet defines the organization entity with role relations in Permify Schema. It includes admin, member, manager, and agent roles.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rbac.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity organization {\n\n    //roles \n    relation admin @user    \n    relation member @user    \n    relation manager @user \n    relation agent @user     \n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Banking System Permissions with Balance Checks in Perm\nDESCRIPTION: This model represents a banking system with user and account entities. It includes a rule to check account balance for withdrawals and ensures the owner is making the transaction.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_8\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(balance) and owner\n}\n\nrule check_balance(balance double) {\n    (balance >= context.data.amount) && (context.data.amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Organization Entity with Role-Based Access\nDESCRIPTION: Defines an organization entity with admin and member roles. Includes view permissions for both roles and edit permissions restricted to admins only.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/hierarchies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: permify\nCODE:\n```\nentity organization {\n    relation admin @user\n    relation member @user\n    \n    action view = admin or member\n    action edit = admin\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Access Check with Permify in Node.js using gRPC\nDESCRIPTION: Node.js implementation for checking permissions using the Permify gRPC SDK. This code shows how to structure a permission check request to determine if a user has edit access to a repository, using Promise handling for asynchronous response processing.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// gRPC SDK for Node\nconst body = {\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"repository1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"user1\"\n    }\n};\n\ntry {\n    client.permission.check(body)\n        .then((response) => {\n            // handle the response\n        })\n        .catch((error) => {\n            // handle the error\n        });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch gRPC errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Entity Relationships in Go Authorization System\nDESCRIPTION: Implements the Lookup function that retrieves all entities of a specified type that a subject has permission on. It handles both synchronous and streaming query modes, applying filtering based on permission requirements.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Lookup is a function that returns the resources of a specific type that a subject can access.\nfunc (q *query) Lookup(ctx context.Context, request *v1.LookupRequest) (*v1.LookupResponse, error) {\n\tspan, ctx := tracer.Start(ctx, \"query.Lookup\", trace.WithAttributes(attribute.String(\"component\", \"query\")))\n\tdefer span.End()\n\n\t// Handle streaming query mode \n\tif q.mode == storage.STREAM {\n\t\tentities, err := q.lookup(ctx, span, request)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn &v1.LookupResponse{\n\t\t\tEntities: entities,\n\t\t}, nil\n\t}\n\n\t_, err := q.ds.LoadCache(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tentities, err := q.lookup(ctx, span, request)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &v1.LookupResponse{\n\t\tEntities: entities,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Document Entity Schema in Permify\nDESCRIPTION: Definition for the document entity with its relations and actions. Includes viewer and manager relations, as well as view and edit actions with their permission rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity document {\n    relation org @organization\n\n    relation viewer  @user  @group#direct_member @group#manager\n    relation manager @user @group#direct_member @group#manager\n\n    action edit = manager or org.admin\n    action view = viewer or manager or org.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Check with Multi-Tenancy in Go\nDESCRIPTION: This Go code snippet demonstrates how to perform a permission check using the Permify client with multi-tenancy support. It includes setting the tenant ID and handling the check result.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/multi-tenancy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncr, err: = client.Permission.Check(context.Background(), & v1.PermissionCheckRequest {\n    TenantId: \"t1\",\n    Metadata: & v1.PermissionCheckRequestMetadata {\n        SnapToken: \"\"\n        SchemaVersion: \"\"\n        Depth: 20,\n    },\n    Entity: & v1.Entity {\n        Type: \"repository\",\n        Id: \"1\",\n    },\n    Permission: \"edit\",\n    Subject: & v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n\n    if (cr.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        // RESULT_ALLOWED\n    } else {\n        // RESULT_DENIED\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission in Go Authorization System\nDESCRIPTION: Implements the Check function that determines if a subject has permission to access a resource. It returns the result of the permission check along with any errors. The function handles both synchronous and streaming query modes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Check is a function that determines whether the subject has the requested permission on the given resource or not.\nfunc (q *query) Check(ctx context.Context, request *v1.CheckRequest) (*v1.CheckResponse, error) {\n\tspan, ctx := tracer.Start(ctx, \"query.Check\", trace.WithAttributes(attribute.String(\"component\", \"query\")))\n\tdefer span.End()\n\n\t// Handle stream query mode.\n\tif q.mode == storage.STREAM {\n\t\tsubject := request.GetSubject()\n\t\tdecisionParameters := request.GetDepth()\n\n\t\tpermissionChecks, _, err := q.check(ctx, span, request)\n\t\tif err != nil {\n\t\trecorder.RecordErrorCheckRequest(\n\t\t\tq.recordSpanExporter, subject.GetType(), subject.GetId(), request.GetResource().GetType(), request.GetPermission(), nil, err)\n\t\t\treturn nil, err\n\t\t}\n\n\t\toutcomes := utils.Map(permissionChecks, func(permissionCheck *corev1.PermissionCheck) bool {\n\t\t\treturn permissionCheck.GetResult() == corev1.CheckResult_CHECK_RESULT_ALLOWED\n\t\t})\n\n\t\tcanAccess := false\n\t\tfor _, outcome := range outcomes {\n\t\t\tif outcome {\n\t\t\t\tcanAccess = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\t// Distributed tracing span annotations\n\t\tspan.SetAttributes(attribute.Int(\"depth\", int(decisionParameters)))\n\t\tspan.SetAttributes(attribute.Bool(\"can_access\", canAccess))\n\n\t\tres := &v1.CheckResponse{\n\t\t\tCan: canAccess,\n\t\t}\n\n\t\trecorder.RecordCheckRequest(\n\t\t\tq.recordSpanExporter, subject.GetType(), subject.GetId(), request.GetResource().GetType(), request.GetPermission(), res.GetCan(), nil)\n\n\t\treturn res, nil\n\t}\n\n\t// Synchronous query mode.\n\tsubject := request.GetSubject()\n\tcache, err := q.ds.LoadCache(ctx)\n\tif err != nil {\n\t\trecorder.RecordErrorCheckRequest(\n\t\t\tq.recordSpanExporter, subject.GetType(), subject.GetId(), request.GetResource().GetType(), request.GetPermission(), nil, err)\n\t\treturn nil, err\n\t}\n\n\tdecisionParameters := request.GetDepth()\n\n\tpermissionChecks, metadata, err := q.check(ctx, span, request)\n\tif err != nil {\n\t\trecorder.RecordErrorCheckRequest(\n\t\t\tq.recordSpanExporter, subject.GetType(), subject.GetId(), request.GetResource().GetType(), request.GetPermission(), nil, err)\n\t\treturn nil, err\n\t}\n\n\toutcomes := utils.Map(permissionChecks, func(permissionCheck *corev1.PermissionCheck) bool {\n\t\treturn permissionCheck.GetResult() == corev1.CheckResult_CHECK_RESULT_ALLOWED\n\t})\n\n\tcanAccess := false\n\tfor _, outcome := range outcomes {\n\t\tif outcome {\n\t\t\tcanAccess = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Distributed tracing span annotations\n\tspan.SetAttributes(attribute.Int(\"depth\", int(decisionParameters)))\n\tspan.SetAttributes(attribute.Bool(\"can_access\", canAccess))\n\n\ttunableParameters := v1.TunableParameters{\n\t\tDepth:                  decisionParameters,\n\t\tFullyQualifiedFilters: []*v1.FullyQualifiedFilter{},\n\t}\n\n\tres := &v1.CheckResponse{\n\t\tCan:               canAccess,\n\t\tMetadata:          metadata,\n\t\tTunableParameters: &tunableParameters,\n\t}\n\n\t// Add check result caching capability when enabled\n\tif q.cacheEnabled {\n\t\tctx = contextx.WithTransactionID(ctx, utils.CalcHash(utils.Hash(request.String())))\n\t\tgocache.Write(ctx, gocache.WithCheckResponse(res))\n\t}\n\n\trecorder.RecordCheckRequest(\n\t\tq.recordSpanExporter, subject.GetType(), subject.GetId(), request.GetResource().GetType(), request.GetPermission(), res.GetCan(), nil)\n\n\treturn res, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with Intersection-based Permission in Go\nDESCRIPTION: This code demonstrates creating a permission definition using an intersection operator in Permify. It establishes an 'edit' permission that is granted only if the user is both an 'editor' and belongs to the same 'organization' as the document, showing how to implement complex access control rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"editor\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"organization\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"organization\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"edit\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperation: entity.Operation_INTERSECTION,\n\t\t\t\t\tChildren: []*entity.ComputedUserset{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"editor\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"organization\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\t\t\tRelation: \"member\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Page Entity Permissions in Perm\nDESCRIPTION: This snippet defines the schema for a page entity, including its relationships and permissions. It specifies that write permission is granted to writers or those with write permission in the associated workspace.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\nentity page {\n    // The workspace associated with the page\n    relation workspace @workspace\n    // The user who can write to the page\n    relation writer @user\n\n    ..\n    ..\n\n    permission write = writer or workspace.write\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Permissions with Direct Members\nDESCRIPTION: This snippet is a variation of the document permissions, specifying direct members for viewer and manager relations. It maintains the same action rules for edit and view as the previous snippet.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_7\n\nLANGUAGE: perm\nCODE:\n```\nentity document {\n    relation org @organization\n\n    relation viewer  @user  @group#direct_member @group#manager\n    relation manager @user @group#direct_member @group#manager\n\n    action edit = manager or org.admin\n    action view = viewer or manager or org.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Access Permissions in Permify\nDESCRIPTION: This snippet defines actions for controlling access permissions on organization files and vendor files using Permify Schema. It includes view, edit, and delete permissions for different roles.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rbac.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity organization {\n\n    //organization files access permissions\n    action view_files = admin or manager or (member not agent)\n    action edit_files = admin or manager\n    action delete_file = admin \n\n    //vendor files access permissions\n    action view_vendor_files = admin or manager or agent\n    action edit_vendor_files = admin or agent\n    action delete_vendor_file = agent\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema for Relationship-based Access Control\nDESCRIPTION: A schema definition for Permify that models entities (user, organization, repository), their relationships, and permission rules for a sample application.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity repository {\n    relation parent @organization\n    relation owner @user\n    \n    permission edit = parent.admin or owner\n    permission delete = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Permify in Go\nDESCRIPTION: This code demonstrates how to check user permissions using Permify's access control system. It shows permission verification for a user 'user_1' trying to read a repository 'repo_1', including both the check implementation and handling the response.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases/simple-rbac.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create subject, action, and resource\nusername := \"user_1\"\naction := \"read\"\nrepoid := \"repo_1\"\n\n// Check whether user has permission to read the repo\nresp, err := client.Check(context.Background(), &permify.CheckRequest{\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionCheckRequestMetadata{\n        SchemaVersion: \"1\",\n        SnapToken:     \"\",\n        Depth:         20,\n    },\n    Entity: &v1.Entity{\n        Type: \"user\",\n        Id:   username,\n    },\n    Permission: \"read\",\n    Resource: &v1.Resource{\n        Type: \"repository\",\n        Id:   repoid,\n    },\n})\n\nif err != nil {\n    return 0, fmt.Errorf(\"failed to check permission: %v\", err)\n}\n\nif resp.Can == permify.CheckResponse_ALLOWED {\n    // The user is allowed to perform the action\n} else {\n    // The user is not allowed to perform the action\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entities in Permify Schema\nDESCRIPTION: Basic entity definitions for core components of the authorization system including user, organization, team and repository entities.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {}\n\nentity team {}\n\nentity repository {}\n```\n\n----------------------------------------\n\nTITLE: Sample Relationship Data for Document Management in Permify\nDESCRIPTION: Example relationship data to test the schema and authorization logic. Includes user-group assignments, group nesting, organization structure, and document permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\n// Assign users to different groups\ngroup:tech#manager@user:ashley\ngroup:tech#direct_member@user:david\ngroup:marketing#manager@user:john\ngroup:marketing#direct_member@user:jenny\ngroup:hr#manager@user:josh\ngroup:hr#direct_member@user:joe\n\n// Assign groups to other groups\ngroup:tech#direct_member@group:marketing#direct_member\ngroup:tech#direct_member@group:hr#direct_member\n\n// Connect groups to organization\norganization:acme#group@group:tech\norganization:acme#group@group:marketing\norganization:acme#group@group:hr\n\n// Add some documents under the organization\norganization:acme#document@document:product_database\norganization:acme#document@document:marketing_materials\norganization:acme#document@document:hr_documents\n\n// Assign a user and members of a group as administrators for the organization\norganization:acme#administrator@group:tech#manager\norganization:acme#administrator@user:jenny\n\n// Set the permissions on some documents\ndocument:product_database#manager@group:tech#manager\ndocument:product_database#viewer@group:tech#direct_member\ndocument:marketing_materials#viewer@group:marketing#direct_member\ndocument:hr_documents#manager@group:hr#manager\ndocument:hr_documents#viewer@group:hr#direct_member\n```\n\n----------------------------------------\n\nTITLE: Executing Permission Check in Go Authorization System\nDESCRIPTION: Implements the internal check function that performs the actual permission check logic. It processes permission checks for a subject on a resource and handles the complexity of relationship-based permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *query) check(ctx context.Context, span trace.Span, request *v1.CheckRequest) ([]*corev1.PermissionCheck, *v1.Metadata, error) {\n\ttenantID := request.GetTenantId()\n\tsubject := request.GetSubject()\n\tresource := request.GetResource()\n\tpermission := request.GetPermission()\n\tdepth := request.GetDepth()\n\n\tpermissionChecks, metadata, err := q.engine.Check(ctx, tenantID, subject, permission, resource, depth, &conf.EngineOptions{})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tspan.SetAttributes(attribute.StringSlice(\"checks\", utils.Map(permissionChecks, func(permissionCheck *corev1.PermissionCheck) string {\n\t\treturn fmt.Sprintf(\"%s-%v\", permissionCheck.GetPermission(), permissionCheck.GetResult().String())\n\t})))\n\n\treturn permissionChecks, metadata, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Project Entity Definition\nDESCRIPTION: Project entity definition with team and organization relations, including permissions for project access and management.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/user-groups.mdx#2025-04-17_snippet_4\n\nLANGUAGE: permify\nCODE:\n```\nentity project {\n    relation team @team\n    relation org @organization\n\n    permission view = org.admin or team.member\n    permission edit = org.admin or team.member\n    permission delete = team.member\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Definition in Post Entity with Permify\nDESCRIPTION: This snippet demonstrates how to define a permission that can be inherited by other entities. The 'group_member' permission in the post entity refers to members of the group to which the post belongs.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/impersonation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\npermission group_member = group.member\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Connector for Data Synchronization\nDESCRIPTION: Detailed configuration for a Postgres connector that maps database tables to Permify entities, relationships, and attributes. Includes settings for logging, retry policy, and recovery options to ensure reliable data synchronization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/data-sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# my_postgres_instance.yaml\n\nconnector: postgres\nmetadata:\n  name: my_postgres_instance\ntables:\n  - name: repository\n    permify_entity: repository\n    primary_key: id\n    relationships:\n      - column: owner_id\n        column_type: uint64\n        permify_reference: owner\n      - column: organization_id\n        column_type: uint64\n        permify_reference: parent\n    attributes:\n      - column: is_public\n        column_type: boolean\n        permify_reference: is_public\n  - name: organization\n    permify_entity: organization\n    primary_key: id\n    relationships:\n      - column: user_id\n        column_type: uint64\n        join_table: organization_admins\n        join_column: organization_id\n        join_column_type: uint64\n        permify_reference: admin\n      - column: user_id\n        column_type: uint64\n        join_table: organization_members\n        join_column: organization_id\n        join_column_type: uint64\n        permify_reference: member\nlogger:\n  enabled: true\n  level: error\nretry_policy:\n  max_retries: 5\n  backoff_strategy: exponential\n  backoff_interval: 2s\nrecovery:\n  backup:\n    enabled: true\n    schedule: \"0 */12 * * *\"\n    location: \"s3://backup-bucket/my-postgres-instance-backups\"\n\n```\n\n----------------------------------------\n\nTITLE: Permission Model with Intersecting Relations\nDESCRIPTION: Complex permission model demonstrating intersection between organization roles across different entities.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    relation member @user\n    relation admin @user\n\n    permission view = member and admin\n}\n\nentity repository {\n\n    relation parent @organization\n\n    permission view = parent.member and parent.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Authorization Model with IP Address Context in Permify\nDESCRIPTION: This extended authorization model incorporates IP address ranges as contextual entities for dynamic permission checking. It defines the view_employee action that requires both HR manager status and a valid IP address.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    relation employee @user\n    relation hr_manager @user @organization#employee\n\n    relation ip_address_range @ip_address_range\n\n    action view_employee = hr_manager and ip_address_range.user\n\n}\n\nentity ip_address_range {\n    relation user @user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Actions in Permify Schema\nDESCRIPTION: This snippet defines actions for the project entity in Permify Schema. It specifies permissions for viewing, editing, and deleting project resources based on organizational roles and team membership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rebac.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity project {\n\n    action view = org.admin or team.member\n    action edit = org.admin or team.member\n    action delete = team.member\n\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute-Based (ABAC) Check with Context Data in Node.js\nDESCRIPTION: Example of an attribute-based access control check using the Node.js client. The request includes context data (IP address) to determine if a user has hr_manager permission for an organization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.permission.check({\n    tenantId: \"t1\",\n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20,\n    },\n    entity: {\n        type: \"organization\",\n        id: \"1\",\n    },\n    permission: \"hr_manager\",\n    subject: {\n        type: \"user\",\n        id: \"1\",\n    },\n    context: {\n        data: {\n            ip_address: \"192.158.1.38\",\n        },\n    },\n}).then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        console.log(\"RESULT_ALLOWED\");\n    } else {\n        console.log(\"RESULT_DENIED\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Data Bundle Definition for Organization Creation\nDESCRIPTION: Example of defining a data bundle using WriteBundle API that creates admin and manager relationships and sets public attribute when an organization is created. The bundle takes creatorID and organizationID as arguments.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/bundle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"bundles\": [\n    {\n        \"name\": \"organization_created\"\n        \"arguments\": [\n            \"creatorID\",\n            \"organizationID\"\n        ],\n        \"operations\": [\n            {\n                \"relationships_write\": [\n                    \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                    \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                ],\n                \"attributes_write\": [\n                    \"organization:{{.organizationID}}$public|boolean:false\",\n                ],\n            },\n        ],\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Write Bundle for Organization Creation in JSON\nDESCRIPTION: This snippet demonstrates how to define a data bundle named 'organization_created' that creates specific relationships and attributes when an organization is created. It specifies the required arguments and operations to be performed.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/bundle/write-bundle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"bundles\": [\n    {\n        \"name\": \"organization_created\"\n        \"arguments\": [\n            \"creatorID\",\n            \"organizationID\"\n        ],\n        \"operations\": [\n            {\n                \"relationships_write\": [\n                    \"organization:{{.organizationID}}#admin@user:{{.creatorID}}\",\n                    \"organization:{{.organizationID}}#manager@user:{{.creatorID}}\",\n                ],\n                \"attributes_write\": [\n                    \"organization:{{.organizationID}}$public|boolean:false\",\n                ],\n            },\n        ],\n    },\n],\n```\n\n----------------------------------------\n\nTITLE: Project Entity with Department Inheritance\nDESCRIPTION: Defines a project entity that inherits permissions from its parent department while adding lead-specific permissions. Includes both view and edit actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/hierarchies.mdx#2025-04-17_snippet_4\n\nLANGUAGE: permify\nCODE:\n```\nentity project {\n    relation parent @department\n    relation lead @user\n    \n    action view = parent.view or lead\n    action edit = parent.edit or lead\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Entity Permissions in Perm\nDESCRIPTION: This snippet shows the schema for a workspace entity, defining relationships and permissions. It specifies that write permission is granted to owners or admins of the workspace.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity workspace {\n    // The owner of the workspace\n    relation owner @user\n    ..\n    ..\n    // Admin users who have permission to manage the workspace\n    relation admin @user\n\n    ..\n    ..\n\n    // Define permissions that can be inherited by child entities\n    ..\n    permission write = owner or admin\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions using Node.js gRPC SDK\nDESCRIPTION: This code shows how to add permissions (relationships) to Permify using the Node.js gRPC SDK and the Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// gRPC SDK for Node\nconst body = {\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"organization\",\n            id: \"organization1\"\n        },\n        relation: \"admin\",\n        subject: {\n            type: \"user\",\n            id: \"user1\"\n        }\n    }],\n    attributes: []\n};\ntry {\n    client.data.write(body)\n        .then((response) => {\n            // handle the response\n        })\n        .catch((error) => {\n            // handle the error\n        });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch gRPC errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Schema into Permify using Node.js gRPC SDK\nDESCRIPTION: This snippet shows how to insert the example schema into Permify using the Node.js gRPC SDK and the Write Schema API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// gRPC SDK for Node\nconst schema = \"entity user {}\\n\\nentity organization {\\n    relation admin @user\\n    relation member @user\\n}\\n\\nentity repository {\\n    relation parent @organization\\n    relation owner @user\\n    \\n    permission edit = parent.admin or owner\\n    permission delete = owner\\n}\";\nconst. body = {\n    tenantId: \"t1\",\n    schema: schema\n};\ntry {\n    client.schema.write(body)\n        .then((response) => {\n            // handle the response\n        })\n        .catch((error) => {\n            // handle the error\n        });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch gRPC errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource with Public/Private Attribute in Go\nDESCRIPTION: This Go code snippet demonstrates how to create a resource with the is_public attribute using Permify's Go client. It uses the anypb package to create a boolean value and sends a data write request to set the attribute.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/public-private.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalue, err := anypb.New(&v1.BooleanValue{\n    Data: true, // or false for private resources\n})\nif err != nil {\n    // Handle error\n}\n\ncr, err := client.Data.Write(context.Background(), &v1.DataWriteRequest{\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata{\n        SchemaVersion: \"\",\n    },\n    Attributes: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"resource\",\n                Id:   \"1\",\n            },\n            Attribute: \"is_public\",\n            Value:     value,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Cross-Entity Attribute Usage with Rules in Permify DSL\nDESCRIPTION: This snippet shows how to use attributes across entities with rules in Permify DSL. It defines entities with attributes and rules, demonstrating complex access control based on authority levels.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_10\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    attribute authority integer\n\n    // organizational roles\n    relation admin @user\n    relation member @user\n\n    rule check_confidentiality(authority integer) {\n        this.authority >= authority\n    }\n}\n\nentity repository {\n\n    attribute authority integer\n\n    // represents repositories parent organization\n    relation parent @organization\n\n    // permissions\n    permission edit = parent.check_confidentiality(authority)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes for Access Control\nDESCRIPTION: Incorporates attributes to the account entity that will be used for implementing attribute-based access control for withdrawals, including approval requirements and account balance.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/mercury.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity account {\n\n    relation checkings @account\n    relation savings @account\n\n    relation org @organization\n\n    attribute approval integer\n    attribute balance double\n\n    action withdraw =\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snap Token in Permify Check API Request (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to include a snap token in a Permify Check API request. The snap token is used to ensure fresh results in access control checks, alongside other parameters like schema version, entity details, permission, and subject information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/snap-tokens.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schema_version\": \"ce8siqtmmud16etrelag\",\n  \"snap_token\": \"gp/twGSvLBc=\",\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes and Relationships in Node.js using Permify Client\nDESCRIPTION: This JavaScript code shows how to create both a relational tuple and an attribute in a single request using Permify's Node.js client. It creates a document editor relationship and sets a boolean attribute for document privacy.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst booleanValue = BooleanValue.fromJSON({ data: true });\n\nconst value = Any.fromJSON({\n    typeUrl: 'type.googleapis.com/base.v1.BooleanValue',\n    value: BooleanValue.encode(booleanValue).finish()\n});\n\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        relation: \"editor\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    }],\n    attributes: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        attribute: \"is_private\",\n        value: value,\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Context Data for ABAC Checks in JSON\nDESCRIPTION: This JSON snippet shows how to structure context data for Attribute-Based Access Control checks, including IP address and day of the week information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\"context\": {\n\t\"data\": {\n\t\t\"ip_address\": \"187.182.51.206\",\n        \"day_of_week\": \"monday\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Existing Schema in Permify DSL\nDESCRIPTION: This snippet shows the existing schema definitions for user, organization, and team entities, including their relationships and permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/partial-write.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity team {\n    relation owner @user\n    relation org @organization\n\n    permission edit = org.admin or owner\n    permission delete = org.admin or owner\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Organization Hierarchy Schema Definition in Permify\nDESCRIPTION: Defines a complete hierarchical schema with organization, department, and project entities. Each entity has specific roles and actions that cascade down the hierarchy with inheritance.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/hierarchies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n\nentity organization { \n    relation admin @user \n    relation member @user \n    \n    action view = admin or member \n    action edit = admin \n} \n\nentity department { \n    relation parent @organization \n    relation manager @user \n    \n    action view = parent.view or manager \n    action edit = parent.edit or manager\n} \n\nentity project { \n    relation parent @department \n    relation lead @user \n    \n    action view = parent.view or lead \n    action edit = parent.edit or lead \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Entity, Attribute, and Relation in Go\nDESCRIPTION: Example of a Permify schema definition that creates relationships between entities (user, organization) with attributes (owner, member) and defines permissions using the 'relation' keyword.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/bundle.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation owner @user\n    relation member @user\n\n    permission admin = owner\n    permission edit = admin or member\n    permission view = edit or member\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify gRPC Client in JavaScript\nDESCRIPTION: Code snippet showing how to create a simple Permify gRPC client in a JavaScript project. It imports the Permify Node package and initializes a client with a specified endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/grpc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permify = require(\"@permify/permify-node\");\n\nconst client = permify.grpc.newClient({\n    endpoint: \"localhost:3478\",\n    cert: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples in Go\nDESCRIPTION: Example showing how to create a relation tuple in Go where user:3 is granted admin role in organization:1. This uses the Permify client to write the relationship data to the specified tenant.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrr, err: = client.Data.Write(context.Background(), & v1.DataWriteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata {\n        SchemaVersion: \"\"\n    },\n    Tuples: [] * v1.Tuple {\n        {\n            Entity: & v1.Entity {\n                Type: \"organization\",\n                Id: \"1\",\n            },\n            Relation: \"admin\",\n            Subject: & v1.Subject {\n                Type: \"user\",\n                Id: \"3\",\n            },\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Subject Permissions Check in Go Authorization System\nDESCRIPTION: Implements the internal permissions function that performs the actual permissions retrieval logic. It processes all permissions a subject has on a resource entity and returns a filtered list based on access rights.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *query) permissions(ctx context.Context, span trace.Span, request *v1.GetPermissionsRequest) ([]string, error) {\n\ttenantID := request.GetTenantId()\n\tsubject := request.GetSubject()\n\tresource := request.GetResource()\n\tdepth := request.GetDepth()\n\tpermissions := request.GetAvailablePermissions()\n\n\tallowedPermissions, err := q.engine.Permissions(ctx, tenantID, subject, resource, permissions, depth, &conf.EngineOptions{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tspan.SetAttributes(attribute.Int(\"depth\", int(depth)))\n\tspan.SetAttributes(attribute.StringSlice(\"allowed\", allowedPermissions))\n\n\treturn allowedPermissions, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Schema Validation in YAML\nDESCRIPTION: Defines the complete Instagram authorization schema, relationships, attributes, and test scenarios in YAML format for use with Permify validator. It includes checks for account viewing, post viewing, and post commenting permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/instagram.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschema: |-\n  entity user {}\n\n  entity account {\n      // users have accounts\n      relation owner @user\n      \n      // accounts can follow other users/accounts.\n      relation following @user\n\n      // other users/accounts can follow account.\n      relation follower @user\n\n      // accounts can be private or public.\n      attribute public boolean\n\n      // users can view an account if they're followers, owners, or if the account is not private.\n      action view = (owner or follower) or public\n      \n  }\n\n  entity post {\n      // posts are linked with accounts.\n      relation account @account\n\n      // comments are limited to people followed by the parent account.\n      attribute restricted boolean\n\n      // users can view the posts, if they have access to view the linked accounts.\n      action view = account.view\n\n      // users can comment and like on unrestricted posts or posts by owners who follow them.\n      action comment = account.following not restricted\n      action like = account.following not restricted\n  }\nrelationships:\n  - account:1#owner@user:kevin\n  - account:2#owner@user:george\n  - account:1#following@user:george\n  - account:2#follower@user:kevin\n  - post:1#account@account:1\n  - post:2#account@account:2\nattributes:\n  - account:1$public|boolean:true\n  - account:2$public|boolean:false\n  - post:1$restricted|boolean:false\n  - post:2$restricted|boolean:true\nscenarios:\n  - name: Account Viewing Permissions\n    description: Evaluate account viewing permissions for 'kevin' and 'george'.\n    checks:\n      - entity: account:1\n        subject: user:kevin\n        assertions:\n          view: true\n      - entity: account:2\n        subject: user:kevin\n        assertions:\n          view: true\n      - entity: account:1\n        subject: user:george\n        assertions:\n          view: true\n      - entity: account:2\n        subject: user:george\n        assertions:\n          view: true\n  - name: Post Viewing Permissions\n    description: Determine post viewing permissions for 'kevin' and 'george'.\n    checks:\n      - entity: post:1\n        subject: user:george\n        assertions:\n          view: true\n      - entity: post:2\n        subject: user:kevin\n        assertions:\n          view: true\n      - entity: post:2\n        subject: user:george\n        assertions:\n          view: true\n  - name: Post Commenting Permissions\n    description: Evaluate post commenting permissions for 'kevin' and 'george'.\n    checks:\n      - entity: post:1\n        subject: user:george\n        assertions:\n          comment: true\n      - entity: post:2\n        subject: user:kevin\n        assertions:\n          comment: false\n```\n\n----------------------------------------\n\nTITLE: Batched Permission Checks in Go\nDESCRIPTION: Code that performs multiple permission checks in a single batch request, checking if a user has 'create_repo' permission for three different organizations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/google.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nbatchCheck, err := permify.Permissions().CheckBatch(context.Background(), &base.PermissionCheckBatchRequest{\n  TenantId: \"t1\",\n  Requests: []*base.PermissionCheckRequestItem{\n    {\n      Subject:    &base.Subject{Type: \"user\", Id: \"user1\"},\n      Permission: \"create_repo\",\n      Resource:   &base.Resource{Type: \"organization\", Id: \"org1\"},\n    },\n    {\n      Subject:    &base.Subject{Type: \"user\", Id: \"user1\"},\n      Permission: \"create_repo\",\n      Resource:   &base.Resource{Type: \"organization\", Id: \"org2\"},\n    },\n    {\n      Subject:    &base.Subject{Type: \"user\", Id: \"user1\"},\n      Permission: \"create_repo\",\n      Resource:   &base.Resource{Type: \"organization\", Id: \"org3\"},\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Data in Python\nDESCRIPTION: Example showing how to create an attribute in Python where document:1 has a boolean attribute 'is_private' set to true. This demonstrates how to properly format and encode attribute values using protobuf Any type.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nboolean_value = BooleanValue.from_json({\"data\": True})\n\nvalue = Any.from_json({\n    \"typeUrl\": 'type.googleapis.com/base.v1.BooleanValue',\n    \"value\": BooleanValue.encode(boolean_value).finish()\n})\n\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.DataApi(api_client)\n    tenant_id = 't1'\n\n    body = permify.DataWriteRequest(\n        tenant_id=tenant_id,\n        metadata={\"schemaVersion\": \"\"},\n        attributes=[{\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": value,\n        }]\n    )\n```\n\n----------------------------------------\n\nTITLE: Weekday-Based Repository Access Control in Permify\nDESCRIPTION: Implements access control based on weekdays using string array attributes. Users can only view repositories on specified weekdays when they are members of the organization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/text-object-based-conditions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation member @user\n\n    attribute valid_weekdays string[]\n\n    permission view = is_weekday(valid_weekdays) and member\n}\n\nentity repository {\n    relation organization  @organization\n\n    permission view = organization.view\n}\n\nrule is_weekday(valid_weekdays string[]) {\n    context.data.day_of_week in valid_weekdays\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Partial Schema Update Request in JSON\nDESCRIPTION: This snippet demonstrates a PATCH request payload to update the team entity by adding new permissions, deleting existing ones, and modifying others.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/partial-write.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"schema_version\": \"\"\n  },\n  \"entities\": {\n\t\t\"team\": {\n\t\t  \"write\": [\n\t\t    \"relation member @user\",\n\t\t    \"permission invite = org.admin and (owner or member)\",\n\t\t    \"permission remove_user = owner\"\n\t\t  ],\n\t\t  \"delete\": [\n\t\t    \"edit\"\n\t\t  ],\n\t\t  \"update\": [\n\t\t    \"permission delete = member\"\n\t\t  ]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Actions in Permify Schema\nDESCRIPTION: This snippet defines actions for the team entity in Permify Schema. It specifies permissions for editing, deleting, inviting, and removing users from a team based on organizational roles and team membership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rebac.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity team {\n\n    action edit = org.admin or owner\n    action delete = org.admin or owner\n\n    action invite = org.admin and (owner or member)\n    action remove_user =  owner\n\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Attribute Example in Permify Schema\nDESCRIPTION: This snippet demonstrates how to use a boolean attribute for a simple true/false condition in a Permify schema. It defines a 'post' entity with an 'is_public' attribute.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity post {\n\t\tattribute is_public boolean\n\n\t\tpermission view = is_public\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Read Permission with Logical Operators\nDESCRIPTION: Read permission definition using and/or operators to implement complex access control logic.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity repository {\n\n    relation  parent   @organization\n\n    relation  owner @user\n    relation  maintainer @user @team#member\n\n\n    ..\n    ..\n\n    action read =  org.admin and (owner or maintainer or org.member)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify with Jaeger Tracing\nDESCRIPTION: YAML configuration for enabling Jaeger tracing in Permify. This specifies the exporter type as Jaeger, sets the collector endpoint, enables tracing, and configures the connection security settings.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/jaeger.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: jaeger\n  endpoint: http://localhost:14268/api/traces\n  enabled: true\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Organization Entity Definition\nDESCRIPTION: Organization entity definition with admin and member relations for user role assignments within an organization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/user-groups.mdx#2025-04-17_snippet_2\n\nLANGUAGE: permify\nCODE:\n```\nentity organization {\n    relation admin @user\n    relation member @user\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Tuple with Write Data API in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the Write Data API to create a relational tuple representing document ownership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrr, err: = client.Data.Write(context.Background(), & v1.DataWriteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata {\n        SchemaVersion: \"\"\n    },\n    Tuples: [] * v1.Tuple {\n        {\n            Entity: & v1.Entity {\n                Type: \"document\",\n                Id: \"2\",\n            },\n            Relation: \"owner\",\n            Subject: & v1.Subject {\n                Type: \"user\",\n                Id: \"1\",\n            },\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Method for Permission Check Command in Go\nDESCRIPTION: This method executes the permission check command in the REPL. It validates command arguments, builds the request, calls the permission service, and formats the response for display. It handles error cases and provides contextual feedback.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Command) Execute(args []string) error {\n\tif len(args) < 3 {\n\t\treturn fmt.Errorf(\"three arguments are required: <subject> <permission> <object>\")\n\t}\n\n\tsubject := args[0]\n\tpermission := args[1]\n\tobject := args[2]\n\n\tstart := time.Now()\n\n\tctx := context.Background()\n\treq := &schema.PermissionCheckRequest{\n\t\tTenant:     \"t\",\n\t\tSubject:    subject,\n\t\tPermission: permission,\n\t\tObject:     object,\n\t}\n\n\tctx, _ = context.WithTimeout(ctx, 30*time.Second)\n\n\tresp, err := c.cn.Check(ctx, req)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\telapsed := time.Since(start)\n\n\tcontext := map[string]string{\n\t\t\"subject\":    subject,\n\t\t\"permission\": permission,\n\t\t\"object\":     object,\n\t}\n\n\toutput := replout.NewOutput(\n\t\tresp.Can,\n\t\telapsed,\n\t\tcontext,\n\t)\n\n\toutBytes, err := output.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Fprintf(c.wr, string(outBytes))\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ABAC Access Checks with IP Range in Perm\nDESCRIPTION: This model showcases Attribute-Based Access Control (ABAC) using IP range checks. It defines an organization entity with an IP range attribute and a rule to verify if a given IP is within the allowed range.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_10\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    relation admin @user\n\n    attribute ip_range string[]\n\n    permission view = check_ip_range(ip_range) or admin\n}\n\nrule check_ip_range(ip_range string[]) {\n    context.data.ip in ip_range\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation YAML Structure for Permify ABAC\nDESCRIPTION: YAML structure for defining schema, relationships, attributes, and scenarios for Permify ABAC validation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n    {string schema}\n\nrelationships:\n    - entity_name:entity_id#relation@subject_type:subject_id\n\nattributes:\n    - entity_name:entity_id#attribute@attribute_type:attribute_value\n\nscenarios:\n  - name: \"name\"\n    description: \"description\"\n    checks:\n            - entity: \"entity_name:entity_id\"\n        subject: \"subject_name:subject_id\"\n        context:\n          tuples: []\n          attributes: []\n          data:\n            key: {value}\n        assertions:\n          permission: result\n    entity_filters:\n            - entity_type: \"entity_name\"\n        subject: \"subject_name:subject_id\"\n        context:\n          tuples: []\n          attributes: []\n          data:\n            key: {value}\n        assertions:\n          permission: result_array\n    subject_filters:\n            - subject_reference: \"subject_name\"\n        entity: \"entity_name:entity_id\"\n        context:\n          tuples: []\n          attributes: []\n          data:\n            key: {value}\n        assertions:\n          permission: result_array\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify gRPC Client\nDESCRIPTION: Python code demonstrating how to set up a basic Permify client using gRPC. Creates a channel connection to the local Permify server and initializes the TenancyStub service.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/grpc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom base.v1.service_pb2_grpc import TenancyStub\nfrom base.v1.service_pb2 import TenantCreateRequest\n\nfrom grpc import insecure_channel as Channel\nfrom datetime import datetime\nfrom pprint import pprint\n\nchannel = Channel(\"127.0.0.1:3478\")\nservice = TenancyStub(channel)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic User-Organization Authorization Model in Permify\nDESCRIPTION: This code defines a basic authorization model with user and organization entities, where an organization can have employees and HR managers.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\n    relation employee @user\n    relation hr_manager @user @organization#employee\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Relationships in Permify\nDESCRIPTION: This snippet provides sample relationships to test the schema and authorization logic. It includes relationships for groups, posts, comments, likes, polls, files, and events.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\n//group relationships\ngroup:1#member@user:1\ngroup:1#admin@user:2\ngroup:2#moderator@user:3\ngroup:2#member@user:4\ngroup:1#member@user:5\n\n//post relationships\npost:1#owner@user:1\npost:1#group@group:1\npost:2#owner@user:4\npost:2#group@group:1\n\n//comment relationships\ncomment:1#owner@user:2\ncomment:1#post@post:1\ncomment:2#owner@user:5\ncomment:2#post@post:2\n\n//like relationships\nlike:1#owner@user:3\nlike:1#post@post:1\nlike:2#owner@user:4\nlike:2#post@post:2\n\n//poll relationships\npoll:1#owner@user:2\npoll:1#group@group:1\npoll:2#owner@user:5\npoll:2#group@group:1\n\n//like relationships\nfile:1#owner@user:1\nfile:1#group@group:1\n\n//event relationships\nevent:1#owner@user:3\nevent:1#group@group:1\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Organization Relationship\nDESCRIPTION: Creates a parent relationship between an organization and a document using Permify's Data Write API. This establishes Organization 1 as the parent of Document 1.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nrr, err: = client.Data.Write(context.Background(), & v1.DataWriteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata {\n        SchemaVersion: \"\"\n    },\n    Tuples: [] * v1.Tuple {\n        {\n            Entity: & v1.Entity {\n                Type: \"document\",\n                Id: \"1\",\n            },\n            Relation: \"parent\",\n            Subject: & v1.Subject {\n                Type: \"organization\",\n                Id: \"1\",\n                Relation: \"...\"\n            },\n        }\n    },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        relation: \"parent\",\n        subject: {\n            type: \"organization\",\n            id: \"1\",\n            relation: \"...\"\n        }\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n        \"entity\": {\n            \"type\": \"document\",\n            \"id\": \"1\"\n        },\n        \"relation\": \"parent\",\n        \"subject\":{\n            \"type\": \"organization\",\n            \"id\": \"1\",\n            \"relation\": \"...\"\n        }\n    }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Contextual Permission Check with cURL in Permify\nDESCRIPTION: cURL command for making a direct HTTP request to check permissions with contextual data. The request includes the entity, subject, permission, and IP address context.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/permissions/check' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"organization\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"hr_manager\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n  \"context\": {\n    \"data\": {\n        \"ip_address\": \"192.158.1.38\",\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Data Bundle for Organization Creation\nDESCRIPTION: Example of executing a data bundle using RunBundle API by providing specific identifiers for creatorID and organizationID to create authorization relationships and attributes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/bundle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"project_created\",\n   \"arguments\": {\n       \"creatorID\": \"564\",\n       \"organizationID\": \"789\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual Permission Check in Node.js with Permify Client\nDESCRIPTION: JavaScript implementation of a permission check that includes IP address context. The code makes an API call to check if a user has HR manager permissions based on their network address.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.permission\n  .check({\n    tenantId: \"t1\",\n    metadata: {\n      snapToken: \"\",\n      schemaVersion: \"\",\n      depth: 20,\n    },\n    entity: {\n      type: \"organization\",\n      id: \"1\",\n    },\n    permission: \"hr_manager\",\n    subject: {\n      type: \"user\",\n      id: \"1\",\n    },\n    context: {\n      data: {\n        ip_address: \"192.158.1.38\",\n      },\n    },\n  })\n  .then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n      console.log(\"RESULT_ALLOWED\");\n    } else {\n      console.log(\"RESULT_DENIED\");\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Generating Access Token with curl in Bash\nDESCRIPTION: This command uses curl to send a POST request to generate an access token with specified attributes and an expiration time of 24 hours.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/bundle/read-bundle.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:3476/v1/tenants/t1/token' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"attributes\": {\n        \"tenant_id\": \"t1\",\n        \"env\": \"test\"\n    },\n    \"expiration\": {\n        \"seconds\": 86400\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Examining Page Read Permission in Notion Authorization Model\nDESCRIPTION: This code snippet demonstrates how the read permission for a page entity is defined in the Notion authorization model. It shows the inheritance of permissions from the workspace entity and how users can be granted read access based on their relationship to the workspace or direct assignment.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/notion.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity workspace {\n    // The owner of the workspace\n    relation owner @user\n    // Members of the workspace\n    relation member @user\n    // Guests (users with read-only access) of the workspace\n    relation guest @user\n    // Bots associated with the workspace\n    relation bot @user\n    // Admin users who have permission to manage the workspace\n    relation admin @user\n\n    // Define permissions for workspace actions\n\n    ..\n    ..\n\n    // Define permissions that can be inherited by child entities\n    permission read = member or guest or bot or admin\n    ..\n}\n\nentity page {\n\n    // The workspace associated with the page\n    relation workspace @workspace\n\n    ..\n    ..\n\n    // The user(s) who can read the page (members of the workspace or guests)\n    relation reader @user @workspace#member @workspace#guest\n\n    ..\n    ..\n\n    // Define permissions for page actions\n    permission read = reader or workspace.read\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Check API Request for Task View\nDESCRIPTION: API request example for checking if user:1 has permission to view task:5621. Shows the structure of a permission check request with entity and subject details.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/custom-roles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"schema_version\": \"\",\n    \"snap_token\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"task\",\n    \"id\": \"5621\"\n  },\n  \"permission\": \"view\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes in Permify Schema\nDESCRIPTION: This snippet demonstrates how to define attributes in Permify's schema language. It shows the syntax for defining a string array attribute.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nattribute ip_range string[]\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Tuple with Write Data API using cURL\nDESCRIPTION: This cURL command demonstrates how to use the Write Data API to create a relational tuple representing document ownership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n        \"entity\": {\n            \"type\": \"document\",\n            \"id\": \"2s\"\n        },\n        \"relation\": \"owner\",\n        \"subject\":{\n            \"type\": \"user\",\n            \"id\": \"1\",\n            \"relation\": \"\"\n        }\n    }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Admin Relational Tuple using cURL\nDESCRIPTION: This cURL command demonstrates how to use the Write Data API to create a relational tuple representing an organization administrator.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n        \"entity\": {\n            \"type\": \"organization\",\n            \"id\": \"1\"\n        },\n        \"relation\": \"admin\",\n        \"subject\":{\n            \"type\": \"user\",\n            \"id\": \"3\",\n            \"relation\": \"\"\n        }\n    }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Resource-Based Permission Check in Python\nDESCRIPTION: Example of a resource-based permission check request using the Python client. The request verifies if a user has edit permission on a repository resource.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.PermissionApi(api_client)\n    tenant_id = 't1' \n\n    body = PermissionsCheckRequest(\n        tenant_id=tenant_id,\n        metadata={\n            \"snapToken\": \"\",\n            \"schemaVersion\": \"\",\n            \"depth\": 20\n        },\n        entity={\n            \"type\": \"repository\",\n            \"id\": \"1\"\n        },\n        permission=\"edit\",\n        subject={\n            \"type\": \"user\",\n            \"id\": \"1\"\n        }\n    )\n\n    try:\n        api_response = api_instance.permissions_check(tenant_id, body)\n        if api_response.can == PermissionCheckResponse.Result.RESULT_ALLOWED:\n            print(\"RESULT_ALLOWED\")\n        else:\n            print(\"RESULT_DENIED\")\n    except ApiException as e:\n        print(f\"Exception permissions_check: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Permify Helm Chart Values Example\nDESCRIPTION: Sample YAML configuration for customizing a Permify Helm chart installation. It specifies the database configuration, replication settings, and service parameters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/instagram.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  engine: postgres\n  uri: \"postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable\"\n\nreplication:\n  enabled: true\n  servers:\n    - \"nats://nats-server:4222\"\n\nservice:\n  port: 3476\n  metricsPort: 3477\n  grpcPort: 3478\n```\n\n----------------------------------------\n\nTITLE: Reading Tuples from Permission System in Go\nDESCRIPTION: A method that reads tuples from the system based on filters. It processes query parameters, accesses the database, and returns the matching tuples with continuation token support for pagination.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) Read(ctx context.Context, request *v1.ReadRequest) (*v1.ReadResponse, error) {\n\tctx, span := s.tracer.Start(ctx, \"permify.api.service.Read\")\n\tdefer span.End()\n\n\t// Start database transaction\n\ttx, err := s.db.BeginTx(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer func() {\n\t\terr = s.db.RollbackTx(ctx, tx, err)\n\t}()\n\n\tsnap, err := s.snapshotReadTx(ctx, tx, request.Metadata)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar tuples []*base.Tuple\n\n\t// get continuation token and prepare filter\n\tcontToken := request.GetContinuationToken()\n\tfilter := s.createFilter(request)\n\n\t// read tuples\n\tresult, contToken, err := s.db.ReadTuples(ctx, tx, filter, contToken)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// read result\n\ttuples = result\n\n\terr = s.db.CommitTx(ctx, tx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// return response\n\treturn &v1.ReadResponse{\n\t\tTuples:            tuples,\n\t\tContinuationToken: contToken,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hierarchical Permissions for Organizations in Perm\nDESCRIPTION: This model demonstrates hierarchical permissions for employees, organizations, and departments. It includes rules for checking founding year and budget, with permissions cascading from organization to department.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_9\n\nLANGUAGE: perm\nCODE:\n```\nentity employee {}\n\nentity organization {\n    attribute founding_year integer\n\n    permission view = check_founding_year(founding_year)\n}\n\nentity department {\n    relation organization @organization\n    attribute budget double\n\n    permission view = check_budget(budget) and organization.view\n}\n\nrule check_founding_year(founding_year integer) {\n        founding_year > 2000\n}\n\nrule check_budget(budget double) {\n        budget > 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group Permission in Permify\nDESCRIPTION: This snippet demonstrates how to define the permission for creating a group in the Facebook-like system. It specifies that only members can create a group.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity group {\n\n    // Relation to represent the members of the group\n    relation member @user\n    \n    ..\n\n    // Create group permission \n    action create_group = member\n    \n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Reading Permify Schema\nDESCRIPTION: HTTP POST request to read a schema configuration for a specific tenant. The endpoint allows retrieving the authorization model schema that was previously written.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/read-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/tenants/{tenant_id}/schemas/read\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify Client in Go\nDESCRIPTION: Example of creating a new Permify client instance with gRPC configuration. Demonstrates basic client setup with endpoint configuration and insecure credentials.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/go/grpc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\tv1 \"github.com/Permify/permify-go/generated/base/v1\"\n\tpermify \"github.com/Permify/permify-go/v1\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc main() {\n\tclient, err := permify.NewClient(\n\t\tpermify.Config{\n\t\t\tEndpoint: `localhost:3478`,\n\t\t},\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create Permify client: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Schema into Permify using TypeScript SDK\nDESCRIPTION: This code illustrates how to insert the example schema into Permify using the TypeScript SDK and the Write Schema API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest SDK for Typescript\nconst api = permify.SchemaApi(apiClient)\nconst schema = \"entity user {}\\n\\nentity organization {\\n    relation admin @user\\n    relation member @user\\n}\\n\\nentity repository {\\n    relation parent @organization\\n    relation owner @user\\n    \\n    permission edit = parent.admin or owner\\n    permission delete = owner\\n}\";\nconst. body = {\n    tenantId: \"t1\",\n    schema: schema\n};\ntry {\n    api.schemasWrite(\"t1\", body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Admin Relational Tuple in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the Write Data API to create a relational tuple representing an organization administrator.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrr, err: = client.Data.Write(context.Background(), & v1.DataWriteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata {\n        SchemaVersion: \"\"\n    },\n    Tuples: [] * v1.Tuple {\n        {\n            Entity: & v1.Entity {\n                Type: \"organization\",\n                Id: \"1\",\n            },\n            Relation: \"admin\",\n            Subject: & v1.Subject {\n                Type: \"user\",\n                Id: \"3\",\n            },\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Token Verification in Go\nDESCRIPTION: This code shows how to manually verify an access token by parsing the JWT, checking the signature, and validating the expiration time, without using the Permify SDK.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/bundle/read-bundle.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"errors\"\n    \"strings\"\n    \"time\"\n\n    \"github.com/golang-jwt/jwt/v5\"\n)\n\nfunc VerifyToken(tokenString, secretKey string) (map[string]interface{}, error) {\n    // Split the token into parts\n    parts := strings.Split(tokenString, \".\")\n    if len(parts) != 3 {\n        return nil, errors.New(\"invalid token format\")\n    }\n\n    // Parse and verify token\n    token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n        return []byte(secretKey), nil\n    })\n\n    if err != nil {\n        return nil, err\n    }\n\n    if !token.Valid {\n        return nil, errors.New(\"invalid token\")\n    }\n\n    // Get claims from token\n    claims, ok := token.Claims.(jwt.MapClaims)\n    if !ok {\n        return nil, errors.New(\"invalid token claims\")\n    }\n\n    // Check expiration\n    exp, ok := claims[\"exp\"].(float64)\n    if !ok {\n        return nil, errors.New(\"invalid expiration claim\")\n    }\n\n    if time.Now().Unix() > int64(exp) {\n        return nil, errors.New(\"token expired\")\n    }\n\n    // Extract attributes\n    attr, ok := claims[\"attributes\"].(map[string]interface{})\n    if !ok {\n        return nil, errors.New(\"invalid attributes claim\")\n    }\n\n    return attr, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions using Java SDK\nDESCRIPTION: This code demonstrates how to add permissions (relationships) to Permify using the Java SDK and the Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Rest SDK for Java\nimport org.permify.api.DataApi;\n\nimport org.permify.model.Tuple;\nimport org.permify.model.Entity;\nimport org.permify.model.Subject;\n\nimport org.permify.model.DataWriteRequest;\nimport org.permify.model.DataWriteResponse;\n\nDataApi dataApi = new DataApi(apiClient); // previously created apiClient\ntry {\n    DataWriteRequest req = new DataWriteRequest();\n    \n    // Create a tuple for the relation\n    Tuple tuple = new Tuple();\n    tuple.setRelation(\"admin\");\n\n    // Create the entity for the organization\n    Entity entity = new Entity();\n    entity.setId(\"organization1\");\n    entity.setType(\"organization\");\n    tuple.setEntity(entity);\n\n    // Create the subject for the user\n    Subject subject = new Subject();\n    subject.setId(\"user1\");\n    subject.setType(\"user\");\n    tuple.setSubject(subject);\n\n    // Add the tuple to the DataWriteRequest\n    req.addTuplesItem(tuple);\n    dataApi.dataWrite(\"t1\", req);\n} catch (Exception e) {\n    System.out.println(\"Error occurred: \" + e.getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Tuple Data in Go\nDESCRIPTION: A method that validates a collection of tuples against the schema definition. It ensures entities, relations, and subjects conform to the defined schema types and rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) validate(ctx context.Context, tuples []*base.Tuple, snap *base.Snapshot) error {\n\tif snap.Schema == nil || len(snap.Schema.GetEntityDefinitions()) == 0 {\n\t\treturn nil\n\t}\n\n\tvalidator := schema_validation.NewTupleValidator(snap.Schema)\n\n\terrs := make([]error, 0)\n\tfor _, tpl := range tuples {\n\t\terr := validator.ValidateTuple(tpl)\n\t\tif err != nil {\n\t\t\terrs = append(errs, v1.NewInvalidTupleError(err.Error()))\n\t\t}\n\t}\n\n\tif len(errs) > 0 {\n\t\treturn v1.NewAggregateError(errs)\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Role Schema in Permify\nDESCRIPTION: Schema definition for implementing custom roles with user, role, dashboard and task entities. Establishes relationships between roles and permissions for view/edit access.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/custom-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity role {\n    relation assignee @user\n}\n\nentity dashboard {\n    relation view @role#assignee\n    relation edit @role#assignee\n}\n\nentity task {\n    relation view @role#assignee\n    relation edit @role#assignee\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Check with Multi-Tenancy using cURL\nDESCRIPTION: This cURL command demonstrates how to perform a permission check with multi-tenancy support using the Permify API directly. It includes setting the tenant ID in the URL and providing the necessary request body.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/multi-tenancy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/permissions/check' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples in Python\nDESCRIPTION: Example showing how to create a relation tuple in Python where user:3 is granted admin role in organization:1. This uses the Permify client to write the relationship data to the specified tenant.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.DataApi(api_client)\n\n    body = permify.DataWriteRequest(\n        tenant_id='t1',  \n        metadata={\"schemaVersion\": \"\"},\n        tuples=[{\n            \"entity\": {\n                \"type\": \"organization\",\n                \"id\": \"1\",\n            },\n            \"relation\": \"admin\",\n            \"subject\": {\n                \"type\": \"user\",\n                \"id\": \"3\",\n            },\n        }]\n    )\n```\n\n----------------------------------------\n\nTITLE: Validating Permissions for Documents in Go\nDESCRIPTION: Code snippet that demonstrates checking if a user has 'edit_document' permission for a document with ID 'document1'.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/google.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncheck, err := permify.Permissions().Check(context.Background(), &base.PermissionCheckRequest{\n  TenantId:   \"t1\",\n  Subject:    &base.Subject{Type: \"user\", Id: \"user1\"},\n  Permission: \"edit_document\",\n  Resource:   &base.Resource{Type: \"document\", Id: \"document1\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Public/Private Repository Permissions in Perm\nDESCRIPTION: This snippet defines a model for a post entity with public/private visibility and owner-based permissions. It uses a boolean attribute 'is_public' to determine view access.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_6\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity post {\n\n  relation owner  @user\n\n  attribute is_public boolean\n\n  permission view = is_public or owner\n  permission edit = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Lookup Entity Request with Scope\nDESCRIPTION: Full example of a lookup entity request including the new scope field, metadata, and pagination parameters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/migration/v1.0-v1.1.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metadata\": {\n        \"snap_token\": {{snap_token}},\n        \"schema_version\": {{schema_version}},\n        \"depth\": 100\n    },\n    \"entity_type\": \"repository\",\n    \"permission\": \"edit\",\n    \"subject\": {\n        \"type\": \"user\",\n        \"id\": \"u1\",\n        \"relation\": \"\"\n    },\n    \"scope\": {\n        \"repository\": {\n            \"data\": [\"r1\", \"r2\"]\n        },\n        \"organization\": {\n            \"data\": [\"o2\"]\n        }\n    },\n    \"page_size\": 20,\n    \"continuous_token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples Table in PostgreSQL for Permify\nDESCRIPTION: Creates a 'relationship_tuples' table to store relationships between entities with columns for entity properties, timestamps, and references. The table includes indexes on various combinations of columns for query optimization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/cache.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS relationship_tuples (\n    entity_type TEXT NOT NULL,\n    entity_id TEXT NOT NULL,\n    relation TEXT NOT NULL,\n    subject_type TEXT NOT NULL,\n    subject_id TEXT NOT NULL,\n    subject_relation TEXT,\n    created_at TIMESTAMPTZ NOT NULL,\n    updated_at TIMESTAMPTZ NOT NULL,\n    tenant_id TEXT,\n    schema_version BIGINT,\n    PRIMARY KEY(tenant_id, entity_type, entity_id, relation, subject_type, subject_id, subject_relation),\n    CONSTRAINT fk_tenant_id FOREIGN KEY(tenant_id) REFERENCES tenant_id(tenant_id) ON DELETE CASCADE,\n    CONSTRAINT fk_schema_version FOREIGN KEY(tenant_id, schema_version) REFERENCES schema(tenant_id, version) ON DELETE CASCADE\n);\n\nCREATE INDEX IF NOT EXISTS idx_subject ON relationship_tuples (tenant_id, subject_type, subject_id, subject_relation);\nCREATE INDEX IF NOT EXISTS idx_entity ON relationship_tuples (tenant_id, entity_type, entity_id);\nCREATE INDEX IF NOT EXISTS idx_entity_relation ON relationship_tuples (tenant_id, entity_type, entity_id, relation);\nCREATE INDEX IF NOT EXISTS idx_tuple ON relationship_tuples (tenant_id, entity_type, entity_id, relation, subject_type, subject_id, subject_relation);\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions using Python SDK\nDESCRIPTION: This snippet shows how to add permissions (relationships) to Permify using the Python SDK and the Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Rest SDK for Python\napi_instance = permify.DataApi(api_client)\ntuples = [permify.Tuple(permify.Entity(\"organization\", \"organization1\"), \"admin\", permify.Subject(\"user\", \"user1\"))]\nmetadata = permify.DataWriteRequestMetadata()\nbody = permify.DataWriteBody(metadata=metadata, tuples=tuples, attributes=[])\ntry:\n    response = api_instance.data_write(\"t1\", body)\n    # handle response here\nexcept ApiException as e:\n    # handle error here\n```\n\n----------------------------------------\n\nTITLE: Organization Entity Schema in Permify\nDESCRIPTION: Definition for the organization entity with its relations to groups, documents, administrators, and direct members. Includes admin and member permissions with their rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity organization {\n    relation group @group\n    relation document @document\n    relation administrator @user @group#direct_member @group#manager\n    relation direct_member @user\n\n    permission admin = administrator\n    permission member = direct_member or administrator or group.member\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Deployment Example - YAML Schema Update\nDESCRIPTION: Example showing how to update a schema by adding a manager role and including it in repository action permissions\nSOURCE: https://github.com/Permify/permify/blob/master/docs/cloud/intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nentity manager {\n    relations {\n        create repository\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Entity with Parent-Child Relations\nDESCRIPTION: Team entity definition showing parent-child relationship with organization and member relations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity organization {\n\n    relation admin  @user\n    relation member @user\n\n}\n\nentity team {\n\n    relation parent  @organization\n    relation member  @user\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Definition for YouTube-like Authorization Model in Zed\nDESCRIPTION: This schema defines a comprehensive authorization model for a YouTube-like application with users, videos, and comments. It includes entity definitions, relation configurations, permissions, and attribute-based access control rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/data/delete-data.md#2025-04-17_snippet_0\n\nLANGUAGE: zed\nCODE:\n```\nentity user {}\n\nentity video {\n    attr private boolean\n}\n\nentity team {}\n\nentity team_member {}\n\nentity comment {}\n\nentity test {}\n\nrelation admin @user {}\n\nrelation account.owner @user {}\n\nrelation owner @user @team {\n    // one video can have one relation between this subject, for example a video can have one `owner` user or `owner` team.\n    union(\n        (user & account.owner),\n        team\n    )\n}\n\nrelation editor @user {\n    owner\n}\n\nrelation commenter @user {\n    owner\n    editor\n}\n\nrelation team.member @user {\n    team_member\n}\n\nrelation parent @video {\n\n}\n\npermission video_read = owner or editor or commenter\n\npermission video_write = owner or editor\n\npermission video_share = owner or editor\n\npermission video_delete = owner\n\npermission comment_write = video_write or commenter\n\npermission comment_read = video_read\n\npermission comment_delete = comment_write or video_write\n\n// allows write only if the video is not private\npermission comment_edit = (comment_write and (not video.private)) or admin\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions using JavaScript SDK\nDESCRIPTION: This code illustrates how to add permissions (relationships) to Permify using the JavaScript SDK and the Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest SDK for Javascript\nconst api = permify.DataApi(apiClient)\nconst body = {\n        tenantId: \"t1\",\n        metadata: {\n            schemaVersion: \"\"\n        },\n        tuples: [{\n            entity: {\n                type: \"organization\",\n                id: \"organization1\"\n            },\n            relation: \"admin\",\n            subject: {\n                type: \"user\",\n                id: \"user1\"\n            }\n        }],\n        attributes: []\n};\ntry {\n    api.dataWrite(tenantId, body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Check Results with Transaction ID (Pseudo-code)\nDESCRIPTION: This pseudo-code snippet illustrates how Permify caches check results when a Snap Token is not provided. It shows the format of the cache key, which includes the transaction ID, schema version, context, and entity information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/snap-tokens.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncheck_{TRANSACTION_ID}_{schema_version}_{context}_organization:1#admin@user:1 -> true\n```\n\n----------------------------------------\n\nTITLE: Checking for Permify Schema Changes in Go\nDESCRIPTION: This function compares two Permify schema definitions to detect any changes. It returns true if there are differences between the schemas.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/comparision.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc HasChanges(oldSchema, newSchema string) (bool, error) {\n\toldSchema = strings.TrimSpace(oldSchema)\n\tnewSchema = strings.TrimSpace(newSchema)\n\n\tif oldSchema == newSchema {\n\t\treturn false, nil\n\t}\n\n\told, err := parser.NewParser(strings.NewReader(oldSchema)).Parse()\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid old schema: %w\", err)\n\t}\n\n\tnew, err := parser.NewParser(strings.NewReader(newSchema)).Parse()\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid new schema: %w\", err)\n\t}\n\n\treturn !reflect.DeepEqual(old, new), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expand API Endpoint in OpenAPI\nDESCRIPTION: Specifies the OpenAPI endpoint for the Expand API. It's a POST request to /v1/tenants/{tenant_id}/permissions/expand, used to retrieve all subjects with a relationship or attribute to a given entity and permission.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/expand-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\npost /v1/tenants/{tenant_id}/permissions/expand\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Server Health Check Endpoint in Go\nDESCRIPTION: This test function validates that the HTTP server health check endpoint returns a 200 OK status code and the expected JSON response when the server is healthy. It sets up a test HTTP server, defines a health check route, and asserts the expected response.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestHealthCheckSuccess(t *testing.T) {\\n\\ttable := []struct {\\n\\t\\tpath string\\n\\t}{\\n\\t\\t{\\n\\t\\t\\tpath: \"/healthz\",\\n\\t\\t},\\n\\t\\treturn\\n\\t}\\n\\n\\tfor _, test := range table {\\n\\t\\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\\n\\t\\t\\tHealthCheckHandler(w, r)\\n\\t\\t}))\\n\\t\\tdefer server.Close()\\n\\n\\t\\tclient := server.Client()\\n\\n\\t\\turl := fmt.Sprintf(\"%s%s\", server.URL, test.path)\\n\\n\\t\\tresp, err := client.Get(url)\\n\\t\\tif err != nil {\\n\\t\\t\\tt.Fatal(err)\\n\\t\\t}\\n\\t\\tdefer resp.Body.Close()\\n\\n\\t\\tassert.Equal(t, http.StatusOK, resp.StatusCode)\\n\\n\\t\\tvar resMap map[string]interface{}\\n\\t\\terr = json.NewDecoder(resp.Body).Decode(&resMap)\\n\\t\\tif err != nil {\\n\\t\\t\\tt.Fatal(err)\\n\\t\\t}\\n\\n\\t\\texpectedResponse := map[string]interface{}{\\n\\t\\t\\t\\\"status\\\":  \\\"ok\\\",\\n\\t\\t\\t\\\"version\\\": version.Version,\\n\\t\\t}\\n\\n\\t\\tassert.Equal(t, expectedResponse, resMap)\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: User Entity Schema in Permify\nDESCRIPTION: Definition for the user entity in the document management system. Users can be granted access to documents directly or through group/organization membership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n```\n\n----------------------------------------\n\nTITLE: Resolving 'Before' Constraint Between Two Times in Go\nDESCRIPTION: Function that compares two time points to determine if the first time is before the second time, based on configured temporal constraints. It applies a duration buffer if specified in the configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/modeling.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// IsBefore returns true if t1 is before t2 considering the buffer duration.\nfunc IsBefore(t1, t2 time.Time, constraintConfigs ...types.ConstraintConfig) bool {\n\tconfig := resolveConstraintConfig(constraintConfigs)\n\n\tt1Time := t1\n\tt2Time := t2\n\n\t// Apply duration\n\tif config.BeforeDuration != nil {\n\t\tt2Time = t2Time.Add(*config.BeforeDuration)\n\t}\n\n\treturn t1Time.Before(t2Time)\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Partial Schema Update Request Body in JSON\nDESCRIPTION: This snippet outlines the structure of the JSON payload for the partial schema update request, including metadata and entity modifications.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/partial-write.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"schema_version\": \"\"\n  },\n  \"entities\": {\n\t\t\"<entity-name>\": {\n\t\t\t\"write\": [],\n\t\t\t\"delete\": [],\n\t\t\t\"update\": []\n\t\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions Schema in Permify\nDESCRIPTION: This snippet defines the permissions schema for repositories, specifying edit and delete permissions based on user roles.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nentity repository {\n    permission edit = parent.admin or owner\n    permission delete = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Method for Command Interface in Go\nDESCRIPTION: This method returns the usage pattern for the command. It's part of the ShellCommand interface that provides a concise example of how to use the command correctly.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Command) Usage() string {\n\treturn c.usage\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Attribute Type in Permify Schema\nDESCRIPTION: This code tests validation of schema definitions with invalid attribute types. It creates a schema with an attribute that has an undefined type value, then verifies that the validation correctly identifies this error and provides an appropriate error message.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithInvalidAttribute(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"user\": {\n\t\t\t\tAttributes: map[string]*base.Attribute{\n\t\t\t\t\t\"unknown\": {\n\t\t\t\t\t\tType: 999,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"attribute type '999' in user.unknown is not valid\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubjectTree Structure in Go\nDESCRIPTION: Defines a SubjectTree data structure with nested layers of maps to represent subject hierarchies. The structure organizes subjects by type, ID, and relation, with depth tracking for recursive expansions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases/multi-tenancy.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype SubjectTree struct {\n\tRelation     string\n\tSubjectType  string\n\tSubjectIds   []string\n\tDepth        int\n\tRelationTree RelationTree\n}\n\ntype RelationTree map[string]TypeTree         // relation -> type -> id -> SubjectTree\ntype TypeTree map[string]map[string]SubjectTree // type -> id -> SubjectTree\n```\n\n----------------------------------------\n\nTITLE: Migrating Permify Schema in Go\nDESCRIPTION: This function performs a migration between two Permify schema versions. It applies the necessary changes to update the schema from the old version to the new version.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/comparision.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Migrate(oldSchema, newSchema string) error {\n\toldSchema = strings.TrimSpace(oldSchema)\n\tnewSchema = strings.TrimSpace(newSchema)\n\n\tif oldSchema == newSchema {\n\t\treturn nil\n\t}\n\n\told, err := parser.NewParser(strings.NewReader(oldSchema)).Parse()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid old schema: %w\", err)\n\t}\n\n\tnew, err := parser.NewParser(strings.NewReader(newSchema)).Parse()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid new schema: %w\", err)\n\t}\n\n\t// TODO: Implement migration logic\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes with References to Other Entities in Go\nDESCRIPTION: This snippet demonstrates how to define attributes that reference other entities within a schema. It shows the relationship between 'organization' and 'user' entities.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/bundle.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nentity organization {\n    relation owner @user\n    relation member @user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event RSVP Permission in Perm Language\nDESCRIPTION: Defines the authorization schema for event entity, specifying RSVP permissions based on event ownership or group membership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_5\n\nLANGUAGE: perm\nCODE:\n```\nentity event {\n        // Relation to represent the owner of the event\n        relation owner @user\n        // Relation to represent the group that the event belongs to\n        relation group @group\n\n        // Permissions for the event entity\n        ..\n        ..\n\n        action RSVP_to_event = owner or group.member\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Definition with Multiple Relations in Go\nDESCRIPTION: This snippet demonstrates how to create a complex entity definition with multiple relations. It constructs a 'user' entity with two relations ('manager' pointing to another user, and 'organization' pointing to an organization entity) and applies these to a schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\t\"user\",\n\tEntityDefinition{\n\t\t\"manager\":     DirectRelation(\"user\"),\n\t\t\"organization\": DirectRelation(\"organization\"),\n\t},\n)\n\n```\n\n----------------------------------------\n\nTITLE: Permission Check API Request for Dashboard View\nDESCRIPTION: API request example for checking if user:1 has permission to view dashboard:145. Includes metadata, entity details, permission type, and subject information.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rbac/custom-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"schema_version\": \"\",\n    \"snap_token\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"dashboard\",\n    \"id\": \"145\"\n  },\n  \"permission\": \"view\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relation Tuples for Testing Organization Permissions in Go\nDESCRIPTION: This code creates relation tuples for testing authorization in an organization structure. It defines relationships between users, repositories, and organizations including membership and permission relationships for testing scenarios.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/data/write-data.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create relationships for testing\ntuples := []tuple.Tuple{\n    // organization - user memberships\n    {\n        Entity: tuple.NewEntityAndRelation(\"organization\", \"1\", \"member\"),\n        Subject: tuple.NewEntity(\"user\", \"1\"),\n    },\n    {\n        Entity: tuple.NewEntityAndRelation(\"organization\", \"1\", \"member\"),\n        Subject: tuple.NewEntity(\"user\", \"3\"),\n    },\n    {\n        Entity: tuple.NewEntityAndRelation(\"organization\", \"1\", \"owner\"),\n        Subject: tuple.NewEntity(\"user\", \"2\"),\n    },\n\n    // organization - repository attributes\n    {\n        Entity: tuple.NewEntityAndAttribute(\"organization\", \"1\", \"repository\"),\n        Subject: tuple.NewEntity(\"repository\", \"1\"),\n    },\n    {\n        Entity: tuple.NewEntityAndAttribute(\"organization\", \"1\", \"repository\"),\n        Subject: tuple.NewEntity(\"repository\", \"2\"),\n    },\n\n    // repository - user permissions\n    {\n        Entity: tuple.NewEntityAndRelation(\"repository\", \"1\", \"reader\"),\n        Subject: tuple.NewEntity(\"user\", \"3\"),\n    },\n    {\n        Entity: tuple.NewEntityAndRelation(\"repository\", \"1\", \"admin\"),\n        Subject: tuple.NewEntity(\"user\", \"1\"),\n    },\n    {\n        Entity: tuple.NewEntityAndRelation(\"repository\", \"2\", \"maintainer\"),\n        Subject: tuple.NewEntity(\"user\", \"1\"),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Server with PostgreSQL and Redis in YAML\nDESCRIPTION: This YAML configuration sets up a Permify server using PostgreSQL as the database and Redis for caching. It specifies connection details, database name, and cache parameters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/container.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\\n  # database name\\n  name: permify\\n  # database engine (postgres or mysql)\\n  engine: postgres\\n  # database connection string\\n  url: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable\\n\\ncache:\\n  # cache engine (redis or memcached)\\n  engine: redis\\n  # cache connection string\\n  url: redis://localhost:6379\\n\\nserver:\\n  # server name\\n  name: permify-server\\n  # server port\\n  port: 3476\n```\n\n----------------------------------------\n\nTITLE: Executing Entity Lookup in Go Authorization System\nDESCRIPTION: Implements the internal lookup function that performs the actual entity lookup logic. It filters entities based on subject permissions and applies context limitations to the results.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *query) lookup(ctx context.Context, span trace.Span, request *v1.LookupRequest) ([]*v1.EntityAndRelation, error) {\n\ttenantID := request.GetTenantId()\n\tsubject := request.GetSubject()\n\tresourceType := request.GetEntityType()\n\trelation := request.GetRelation()\n\tresourceIDs := request.GetEntityIds()\n\t\n\trefEntityFilters := []*v1.EntityFilter{}\n\tfor _, entityFilter := range request.GetContextFilter() {\n\t\trefEntityFilters = append(refEntityFilters, entityFilter)\n\t}\n\n\tentities, err := q.engine.Lookup(ctx, tenantID, subject, resourceType, relation, resourceIDs, refEntityFilters, &conf.EngineOptions{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tspan.SetAttributes(attribute.Int(\"found\", len(entities)))\n\n\treturn entities, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Server Endpoint Path Validation in Go\nDESCRIPTION: This test function validates that an HTTP request to a non-health check endpoint is correctly identified and not processed by the health check handler. It sets up a test HTTP server with a different path and verifies that the handler doesn't process the request.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestHealthCheckValidateEndpoint(t *testing.T) {\\n\\ttable := []struct {\\n\\t\\tpath string\\n\\t}{\\n\\t\\t{\\n\\t\\t\\tpath: \"/testing\",\\n\\t\\t},\\n\\t\\treturn\\n\\t}\\n\\n\\tfor _, test := range table {\\n\\t\\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\\n\\t\\t\\tHealthCheckHandler(w, r)\\n\\t\\t}))\\n\\t\\tdefer server.Close()\\n\\n\\t\\tclient := server.Client()\\n\\n\\t\\turl := fmt.Sprintf(\"%s%s\", server.URL, test.path)\\n\\n\\t\\tresp, err := client.Get(url)\\n\\t\\tif err != nil {\\n\\t\\t\\tt.Fatal(err)\\n\\t\\t}\\n\\t\\tdefer resp.Body.Close()\\n\\n\\t\\tb, err := io.ReadAll(resp.Body)\\n\\t\\tif err != nil {\\n\\t\\t\\tt.Fatal(err)\\n\\t\\t}\\n\\n\\t\\tassert.Equal(t, \\\"\\\", string(b))\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Entity References from Filters in Go\nDESCRIPTION: A helper method that extracts entity references from tuple filters. This processes filter conditions to identify all entities that will be affected by an operation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) extractEntityReferencesFromFilters(filter *base.TupleFilter) ([]*base.EntityReference, error) {\n\tentityReferences := make([]*base.EntityReference, 0)\n\n\tif filter.GetEntity() != \"\" {\n\t\t// Extract entity reference from entity\n\t\tentityReference, err := (&base.EntityReference{}).FromString(filter.GetEntity())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tentityReferences = append(entityReferences, entityReference)\n\t}\n\n\tif subject := filter.GetSubject(); subject != nil {\n\t\t// Extract entity reference from subject if subject type is entity\n\t\tif subjectID, ok := subject.GetRef().(*base.SubjectReference_EntityRef); ok {\n\t\t\tentityReference, err := (&base.EntityReference{}).FromString(subjectID.EntityRef)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tentityReferences = append(entityReferences, entityReference)\n\t\t}\n\t}\n\n\treturn entityReferences, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Check with Multi-Tenancy in Node.js\nDESCRIPTION: This Node.js code snippet shows how to use the Permify client to perform a permission check with multi-tenancy support. It includes setting the tenant ID and handling the check result asynchronously.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/multi-tenancy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.permission.check({\n    tenantId: \"t1\", \n    metadata: {\n        snapToken: \"\",\n        schemaVersion: \"\",\n        depth: 20\n    },\n    entity: {\n        type: \"repository\",\n        id: \"1\"\n    },\n    permission: \"edit\",\n    subject: {\n        type: \"user\",\n        id: \"1\"\n    }\n}).then((response) => {\n    if (response.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        console.log(\"RESULT_ALLOWED\")\n    } else {\n        console.log(\"RESULT_DENIED\")\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Repository Entity with Multiple Relation Types\nDESCRIPTION: Repository entity definition showing ownership and maintainer relations with feature locking using the # operator.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity repository {\n\n    relation  parent @organization\n\n    relation  owner  @user\n    relation  maintainer @user @team#member\n\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Write Permify Schema to Tenant\nDESCRIPTION: An example HTTP request to the Permify API endpoint for writing a schema to a specific tenant. This POST request is sent to /v1/tenants/{tenant_id}/schemas/write and should include the Permify Schema as a string in the request body.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/write-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/tenants/{tenant_id}/schemas/write\n```\n\n----------------------------------------\n\nTITLE: Validating TypeScript Client Connection with List Tenants API Request\nDESCRIPTION: Code for testing the Permify API client connection in TypeScript by sending a List Tenants API request using both promise-based and callback approaches.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest SDK for Typescript\nimport * as permify from 'permify-typescript';\nconst apiClient = new permify.ApiClient(\"<your-permify-endpoint:3476>\");\napiClient.defaultHeaders = {'Authorization': \"Bearer <your-permify-api-key>\"};\napiClient.tenancy.list({\n    pageSize: 20\n}).then((response) => {\n    console.log(response);\n    // handle response\n})\nconst api = permify.TenancyApi(apiClient)\nconst body = {\n    pageSize: 20\n};\ntry {\n    api.tenantsList(body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Data in Go\nDESCRIPTION: Example showing how to create an attribute in Go where document:1 has a boolean attribute 'is_private' set to true. This demonstrates how to properly format and encode attribute values using protobuf Any type.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Convert the wrapped attribute value into Any proto message\nvalue, err := anypb.New(&v1.BooleanValue{\n    Data: true,\n})\nif err != nil {\n\t// Handle error\n}\n\ncr, err := client.Data.Write(context.Background(), &v1.DataWriteRequest{\n    TenantId: \"t1\",,\n    Metadata: &v1.DataWriteRequestMetadata{\n        SchemaVersion: \"\",\n    },\n    Attributes: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Attribute: \"is_private\",\n            Value:     value,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Self-Reference in Permify Schema Relations\nDESCRIPTION: This code tests validation of self-referential relations in a schema. It creates a schema with a recursive relation reference that could potentially cause infinite loops, then verifies that the validation correctly identifies this issue.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithSelfReference(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {},\n\t\t\t\"repository\": {},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"user\",\n\t\t\t\t\t\t\t\tRelation: \"manager\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"relation reference in user.manager contains relation self reference\")\n}\n```\n\n----------------------------------------\n\nTITLE: Permify Kubernetes Deployment Manifest\nDESCRIPTION: YAML configuration for deploying Permify containers in Kubernetes with postgres database configuration\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    labels:\n        app: permify\n    name: permify\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: permify\n  strategy:\n      type: Recreate\n  template:\n      metadata:\n        labels:\n          app: permify\n      spec:\n        containers:\n          - image: ghcr.io/permify/permify\n            name: permify\n            args:\n            - \"serve\"\n            - \"--database-engine=postgres\"\n            - \"--database-uri=postgres://postgres:nOcodeSTIAnLAba@permify-test.ceuo5kqsxyea.us-east-1.rds.amazonaws.com:5432/demo\"\n            - \"--database-max-open-connections=20\"\n            ports:\n                - containerPort: 3476\n                  protocol: TCP\n            resources: {}\n        restartPolicy: Always\nstatus: {}\n```\n\n----------------------------------------\n\nTITLE: Filtering Suspended Entities in Go\nDESCRIPTION: A method that filters entities based on suspension status. It verifies which entities are suspended in the system and returns a mapping of entity URLs to their filter status.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) filterSuspended(ctx context.Context, tx database.Tx, entityURLs []string, snap *base.Snapshot) (map[string]bool, error) {\n\tentityFilters := make(map[string]bool)\n\n\tsuspendedEntities, err := s.db.IsSuspended(ctx, tx, entityURLs, snap.TenantID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, id := range entityURLs {\n\t\t// If the entity is suspended, we set it to false, meaning it's filtered out\n\t\tentityFilters[id] = !slices.Contains(suspendedEntities, id)\n\t}\n\n\treturn entityFilters, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js gRPC Client for Permify Cloud Integration\nDESCRIPTION: Code for initializing the Permify gRPC client in Node.js, configuring the endpoint and adding the API key through an interceptor.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// gRPC SDK for Node\nconst permify = require(\"@permify/permify-node\");\n\nconst interceptor = permify.grpc.newAccessTokenInterceptor(\"<your-permify-api-key>\");\nconst client = permify.grpc.newClient({\n    endpoint: \"<your-permify-endpoint:3478>\",\n    cert: undefined,\n    pk: undefined,\n    certChain: undefined,\n    insecure: false\n}, interceptor);\n```\n\n----------------------------------------\n\nTITLE: User Entity Definition\nDESCRIPTION: Basic entity definition for representing users in the system without any specific relations or permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/user-groups.mdx#2025-04-17_snippet_1\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Schema Update Endpoint in Bash\nDESCRIPTION: This snippet shows the HTTP method, endpoint, and content type for the partial schema update request.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/partial-write.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPATCH /v1/{tenant_id}/schemas/partial-write\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Getting Subject Permissions in Go Authorization System\nDESCRIPTION: Implements the GetPermissions function that retrieves all permissions a subject has on a resource. It handles both synchronous and streaming query modes and returns a list of permissions that the subject can perform.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/check-api.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// GetPermissions is a function that returns the permissions that a subject has on a resource.\nfunc (q *query) GetPermissions(ctx context.Context, request *v1.GetPermissionsRequest) (*v1.GetPermissionsResponse, error) {\n\tspan, ctx := tracer.Start(ctx, \"query.Permissions\", trace.WithAttributes(attribute.String(\"component\", \"query\")))\n\tdefer span.End()\n\n\t// Handle streaming query mode\n\tif q.mode == storage.STREAM {\n\t\tpermissions, err := q.permissions(ctx, span, request)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tspan.SetAttributes(attribute.StringSlice(\"permissions\", permissions))\n\n\t\treturn &v1.GetPermissionsResponse{\n\t\t\tPermissions: permissions,\n\t\t}, nil\n\t}\n\n\t_, err := q.ds.LoadCache(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpermissions, err := q.permissions(ctx, span, request)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tspan.SetAttributes(attribute.StringSlice(\"permissions\", permissions))\n\n\treturn &v1.GetPermissionsResponse{\n\t\tPermissions: permissions,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Tuples to Permission System in Go\nDESCRIPTION: A method for writing permission tuples to the system. It validates input, transforms data, and manages database transactions while handling relationships and entity references.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) Write(ctx context.Context, request *v1.WriteRequest) (*v1.WriteResponse, error) {\n\tctx, span := s.tracer.Start(ctx, \"permify.api.service.Write\")\n\tdefer span.End()\n\n\t// Start database transaction\n\ttx, err := s.db.BeginTx(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer func() {\n\t\terr = s.db.RollbackTx(ctx, tx, err)\n\t}()\n\n\tsnap, err := s.snapshotWriteTx(ctx, tx, request.Metadata)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttuples := request.GetTuples()\n\n\t// Check if there are any tuples provided in the write request\n\tif len(tuples) == 0 {\n\t\treturn &v1.WriteResponse{}, nil\n\t}\n\n\t// extract entity references from tuples to know which entities we will be using to check entity filters\n\tentityReferences, err := s.extractEntityReferencesFromTuples(tuples)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tentityFilters, err := s.filterSuspended(ctx, tx, entrypoints.CollectURLs(entityReferences...), snap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// validate tuples based on schema and context\n\terr = s.validate(ctx, tuples, snap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Transform tuples based on schema and context\n\ttransformedTuples, err := s.transform(ctx, tuples, snap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// write tuples into storage\n\terr = s.attrFilter.FilterAttributes(ctx, tx, transformedTuples, entityFilters, snap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = s.db.WriteTuples(ctx, tx, transformedTuples)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// get change logs\n\tchangelogs, err := tuple.GetChangelogs(tuple.DataDelete, transformedTuples)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Write changeLog into database and send changes to notifier\n\terr = s.db.WriteChangelog(ctx, tx, changelogs, snap.TenantID, s.notifier)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = s.db.CommitTx(ctx, tx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// return writes\n\treturn &v1.WriteResponse{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Members as Document Maintainers\nDESCRIPTION: Establishes a relationship where members of Organization 2 are granted maintainer permissions for Document 1 using Permify's Data Write API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nrr, err: = client.Data.Write(context.Background(), & v1.DataWriteRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.DataWriteRequestMetadata {\n        SchemaVersion: \"\"\n    },\n    Tuples: [] * v1.Tuple {\n        {\n            Entity: & v1.Entity {\n                Type: \"document\",\n                Id: \"1\",\n            },\n            Relation: \"maintainer\",\n            Subject: & v1.Subject {\n                Type: \"organization\",\n                Id: \"2\",\n                Relation: \"member\"\n            },\n        }\n    },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"1\"\n        },\n        relation: \"maintainer\",\n        subject: {\n            type: \"organization\",\n            id: \"2\",\n            relation: \"member\"\n        }\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n        \"entity\": {\n            \"type\": \"document\",\n            \"id\": \"1\"\n        },\n        \"relation\": \"maintainer\",\n        \"subject\":{\n            \"type\": \"organization\",\n            \"id\": \"2\",\n            \"relation\": \"member\"\n        }\n    }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Validating Schema External Consistency in Go\nDESCRIPTION: A Go function that checks external consistency between a schema and actual data in the database. It validates that all relations and references in data records have corresponding definitions in the schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/schema/read-schema.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *SchemaService) CheckDataConsistency(ctx context.Context, req *v1.CheckDataConsistencyRequest) (*v1.CheckConsistencyResponse, error) {\n    // Creates schema object\n    sch, err := s.invoker.Call(ctx, NewCheckSchemaPrepare(&v1.CheckConsistencyRequest{\n        SchemaDefinition: req.SchemaDefinition,\n        TenantId:         req.TenantId,\n    }, s.schemaReader))\n    if err != nil {\n        return nil, err\n    }\n\n    // Transform schema\n    schema := sch.(*base.SchemaDefinition)\n\n    report, err := s.dataReader.CheckDataConsistency(ctx, schema, req.TenantId)\n    if err != nil {\n        return nil, err\n    }\n\n    return &v1.CheckConsistencyResponse{\n        ConsistencyReport: report,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment and Service for Permify\nDESCRIPTION: This Kubernetes manifest defines a deployment and service for running Permify. It configures a deployment with 2 replicas and sets environment variables for PostgreSQL database connection. The service exposes ports 3476 and 3478 for the Permify API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/sync-data.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: permify\n  labels:\n    app: permify\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: permify\n  template:\n    metadata:\n      labels:\n        app: permify\n    spec:\n      containers:\n      - name: permify\n        image: ghcr.io/permify/permify\n        args: [\"serve\"]\n        ports:\n        - containerPort: 3476\n          name: http\n        - containerPort: 3478\n          name: grpc\n        env:\n        - name: PERMIFY_DATASTORE_ENGINE\n          value: postgres\n        - name: PERMIFY_DATASTORE_URI\n          value: postgres://postgres:password@localhost:5432/permify # replace it with your postgres URI\n        - name: PERMIFY_DATASTORE_MAX_OPEN_CONNECTIONS\n          value: \"100\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: permify\nspec:\n  selector:\n    app: permify\n  ports:\n  - port: 3476\n    targetPort: 3476\n    name: http\n  - port: 3478\n    targetPort: 3478\n    name: grpc\n```\n\n----------------------------------------\n\nTITLE: Setting up Java API Client for Permify Cloud Integration\nDESCRIPTION: Code for initializing the Permify API client in Java, configuring the base path and adding the API key as an authorization header.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.permify.ApiClient;\nimport org.permify.api.TenancyApi;\nimport org.permify.model.TenantListRequest;\n\nApiClient apiClient = new ApiClient();\napiClient.setBasePath(\"<your-permify-endpoint:3476>\");\napiClient.addDefaultHeader(\"Authorization\", \"Bearer <your-permify-api-key>\");\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema and Relations for Permission Testing in Go\nDESCRIPTION: This code defines an entity schema for an organization with repositories and user relationships. It establishes entity definitions, relation tuples, and attributes that model a permission system structure for testing purposes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/data/write-data.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create entity definitions.\nuser := tuple.EntityDefinition{\n    Name: \"user\",\n}\n\nrepository := tuple.EntityDefinition{\n    Name: \"repository\",\n    Relations: []tuple.RelationDefinition{\n        {\n            Name: \"admin\",\n            Types: []string{\"user\"},\n        },\n        {\n            Name: \"maintainer\",\n            Types: []string{\"user\"},\n            InheritIf: []tuple.InheritIf{\n                {\n                    RelationName: \"admin\",\n                },\n            },\n        },\n        {\n            Name: \"reader\",\n            Types: []string{\"user\"},\n            InheritIf: []tuple.InheritIf{\n                {\n                    RelationName: \"maintainer\",\n                },\n            },\n        },\n    },\n}\n\norg := tuple.EntityDefinition{\n    Name: \"organization\",\n    Relations: []tuple.RelationDefinition{\n        {\n            Name: \"member\",\n            Types: []string{\"user\"},\n        },\n        {\n            Name: \"owner\",\n            Types: []string{\"user\"},\n            InheritIf: []tuple.InheritIf{\n                {\n                    RelationName: \"member\",\n                },\n            },\n        },\n    },\n    Attributes: []tuple.AttributeDefinition{\n        {\n            Name: \"repository\",\n            Types: []string{\"repository\"},\n        },\n    },\n}\n\n// Add entity definitions to schema.\nschema := &tuple.SchemaDefinition{}\nschema.AddEntities(user, repository, org)\n```\n\n----------------------------------------\n\nTITLE: Permission Definition for View Employee Action in Permify\nDESCRIPTION: This snippet shows the specific action definition for view_employee permission that combines HR manager status with IP address validation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\naction view_employee = hr_manager and ip_address_range.user\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Permify\nDESCRIPTION: This snippet defines the user entity in Permify Schema. The entity is empty as it's only responsible for referencing users.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/rbac.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Validate Action with External URL\nDESCRIPTION: GitHub Action workflow configuration for validating Permify schema using an external URL\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: \"permify/permify-validate-action@v1.0.0\"\n  with:\n    validationFile: \"https://gist.github.com/permify-bot/bb8f95acb64525d2a41688ae0a6f4274\"\n```\n\n----------------------------------------\n\nTITLE: Distributed Permify Deployment\nDESCRIPTION: Deployment configuration for Permify with distributed setup enabled and Serf integration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: permify-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: permify\n  template:\n    metadata:\n      labels:\n        app: permify\n    spec:\n      containers:\n        - image: permify/permify:tagname\n          name: permify\n          args:\n            - \"serve\"\n            - \"--database-engine=postgres\"\n            - \"--database-uri=postgres://user:password@host:5432/db_name\"\n            - \"--database-max-open-connections=20\"\n            - \"--distributed-enabled=true\"\n            - \"--distributed-node=serf:7946\"\n            - \"--distributed-node-name=main-serf\"\n            - \"--distributed-protocol=serf\"\n          resources:\n             requests:\n               memory: \"128Mi\"\n               cpu: \"200m\"\n             limits:\n              memory: \"128Mi\"\n              cpu: \"400m\"\n          ports:\n          - containerPort: 3476\n            name: permify-port\n          - containerPort: 7946\n            name: permify-dist\n          - containerPort: 6060\n            name: permify-pprof\n```\n\n----------------------------------------\n\nTITLE: E2E Test Integration Example in Go\nDESCRIPTION: Example of an end-to-end test in Go showing how to integrate with databases and external services, while following the proper test organization pattern.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage e2e_test\n\nimport (\n    \"context\"\n    \"testing\"\n    \n    \"github.com/stretchr/testify/require\"\n    \"github.com/testcontainers/testcontainers-go\"\n    \"github.com/testcontainers/testcontainers-go/wait\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Server with MySQL and Memcached in YAML\nDESCRIPTION: This YAML configuration demonstrates setting up a Permify server with MySQL as the database and Memcached for caching. It includes connection details and server configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/container.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\\n  # database name\\n  name: permify\\n  # database engine (postgres or mysql)\\n  engine: mysql\\n  # database connection string\\n  url: mysql://root:root@tcp(localhost:3306)/permify?parseTime=true\\n\\ncache:\\n  # cache engine (redis or memcached)\\n  engine: memcached\\n  # cache connection string\\n  url: localhost:11211\\n\\nserver:\\n  # server name\\n  name: permify-server\\n  # server port\\n  port: 3476\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization Token in Go for Permify API Access\nDESCRIPTION: A Go function that generates an authorization token for accessing Permify APIs. The function creates and signs a JWT token with a predetermined secret using the HS256 algorithm.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc GenerateToken() string {\n    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n        \"exp\":  time.Now().Add(time.Hour * 24).Unix(),\n        \"sub\": \"permify\",\n    })\n\n    tokenString, _ := token.SignedString([]byte(\"permify-sample-token\"))\n    return tokenString\n}\n```\n\n----------------------------------------\n\nTITLE: Resource-Based Permission Check using cURL\nDESCRIPTION: Example of a resource-based permission check request using cURL. The request checks if a user has edit permission on a repository within a tenant context.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/permission/check-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/permissions/check' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"metadata\":{\n    \"snap_token\": \"\",\n    \"schema_version\": \"\",\n    \"depth\": 20\n  },\n  \"entity\": {\n    \"type\": \"repository\",\n    \"id\": \"1\"\n  },\n  \"permission\": \"edit\",\n  \"subject\": {\n    \"type\": \"user\",\n    \"id\": \"1\",\n    \"relation\": \"\"\n  },\n}'\n```\n\n----------------------------------------\n\nTITLE: Editing Post Permission in Permify\nDESCRIPTION: This snippet shows how to define the permission for editing a post in the Facebook-like system. It allows the post owner or group admin to edit the post.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity post {\n\n    // Relation to represent the owner of the post\n    relation owner @user\n    // Relation to represent the group that the post belongs to\n    relation group @group\n\n    // Permissions for the post entity\n    ..\n\n    action edit_post = owner or group.admin\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Schema Definition in Permify\nDESCRIPTION: This code snippet demonstrates how to validate a schema definition in Permify. It creates a schema definition with entity types and relations, then validates it using the ValidateSchemaDefinition function, checking for potential errors in the schema structure.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinition(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {},\n\t\t\t\"repository\": {},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Nil(t, err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Snapshot for Read Transactions in Go\nDESCRIPTION: A method that prepares a schema snapshot for read operations. Similar to the write snapshot, but handles cases where schemas may not be found differently for read operations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) snapshotReadTx(ctx context.Context, tx database.Tx, metadata *base.Metadata) (*base.Snapshot, error) {\n\t// Set Tenant ID\n\tvar tenantID string\n\tvar schemaVersion string\n\n\tif metadata != nil {\n\t\ttenantID = metadata.GetTenantId()\n\t\tschemaVersion = metadata.GetSchemaVersion()\n\t}\n\n\t// Create schema snapshot with tenant id and schema version\n\tschema, found, err := s.db.ReadSchema(ctx, tx, tenantID, schemaVersion)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !found {\n\t\treturn &base.Snapshot{\n\t\t\tTenantID: tenantID,\n\t\t}, nil\n\t}\n\n\treturn &base.Snapshot{\n\t\tSchema:        schema,\n\t\tTenantID:      tenantID,\n\t\tSchemaVersion: schema.GetVersion(),\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting track_commit_timestamp in postgresql.conf\nDESCRIPTION: Configuration line to add to the postgresql.conf file to enable track_commit_timestamp. This is an alternative method to the SQL command approach.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/watch/watch-changes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntrack_commit_timestamp = on\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Group Inbound Rules for Permify Deployment\nDESCRIPTION: JSON configuration for setting up inbound rules in the EC2 security group. It defines rules for HTTP, RPC, and SSH ports required for Permify deployment.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/aws.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n//for mapping HTTP request port.\ntype = \"Custom TCP\", protocol = \"TCP\", port_range = \"3476\",source = \"Anywhere\", ::/0\n\ntype = \"Custom TCP\", protocol = \"TCP\", port_range = \"3476\",source = \"Anywhere\", 0.0.0.0/0\n\n//for mapping RPC request port.\ntype = \"Custom TCP\", protocol = \"TCP\", port_range = \"3478\",source = \"Anywhere\", ::/0\n\ntype = \"Custom TCP\", protocol = \"TCP\", port_range = \"3476\",source = \"Anywhere\", 0.0.0.0/0\n\n//for using SSH for connecting from your local computer.\ntype = \"Custom TCP\", protocol = \"TCP\", port_range = \"22\",source = \"Anywhere\", 0.0.0.0/0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Comment View Permission in Perm Language\nDESCRIPTION: Defines the authorization schema for post and comment entities, establishing view permissions based on ownership and group membership hierarchy.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/facebook-groups.mdx#2025-04-17_snippet_6\n\nLANGUAGE: perm\nCODE:\n```\nentity post {\n    ..\n    ..\n\n    // Relation to represent the group that the post belongs to\n    relation group @group\n\n    // Permissions for the post entity\n    \n    ..\n    ..\n    permission group_member = group.member\n}\n\nentity comment {\n    // Relation to represent the owner of the comment\n    relation owner @user\n\n    // Relation to represent the post that the comment belongs to\n    relation post @post\n    relation comment @comment\n\n    ..\n    ..\n\n    // Permissions \n    action view_comment = owner or post.group_member\n\n    ..\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tuple Filters from API Requests in Go\nDESCRIPTION: A utility method that transforms API request parameters into database filter objects for tuple queries. It handles different filter types like entity, relation, and subject filters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) createFilter(request interface{}) *base.TupleFilter {\n\tswitch v := request.(type) {\n\tcase *v1.ReadRequest:\n\t\treturn &base.TupleFilter{\n\t\t\tEntity:   v.GetEntity(),\n\t\t\tRelation: v.GetRelation(),\n\t\t\tSubject:  v.GetSubject(),\n\t\t}\n\tcase *v1.DeleteRequest:\n\t\treturn &base.TupleFilter{\n\t\t\tEntity:   v.GetEntity(),\n\t\t\tRelation: v.GetRelation(),\n\t\t\tSubject:  v.GetSubject(),\n\t\t}\n\tdefault:\n\t\treturn &base.TupleFilter{}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Permify Configuration with Tracing\nDESCRIPTION: Full YAML configuration example showing how tracing settings integrate with other Permify configurations including HTTP, logging, and database settings.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/tracing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n  name: 'permify'\nhttp:\n  port: 3476\nlogger:\n  log_level: 'debug'\n  rollbar_env: 'permify'\ntracer:\n  exporter: 'zipkin'\n  endpoint: 'http://172.17.0.4:9411/api/v2/spans'\n  disabled: false\ndatabase:\n  write:\n    connection: 'postgres'\n    database: 'morf-health-demo'\n    uri: 'postgres://postgres:SphU4Uf3QXNntT@permify.us-east-1.rds.amazonaws.com:5432'\n    pool_max: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Types in Permify DSL\nDESCRIPTION: This snippet lists all available attribute types in Permify DSL, including boolean, string, integer, and double, both as single values and arrays.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_8\n\nLANGUAGE: perm\nCODE:\n```\n// A boolean attribute type\nboolean\n\n// A boolean array attribute type.\nboolean[]\n\n// A string attribute type.\nstring\n\n// A string array attribute type.\nstring[]\n\n// An integer attribute type.\ninteger\n\n// An integer array attribute type.\ninteger[]\n\n// A double attribute type.\ndouble\n\n// A double array attribute type.\ndouble[]\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Complex Permify Schema with Attributes\nDESCRIPTION: This code tests validation of a complete and valid schema definition with attributes. It creates a complex schema with multiple entity types, relations, and attributes, then verifies that the validation correctly accepts this well-formed schema as valid.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithAttributes(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"admin\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tAttributes: map[string]*base.Attribute{\n\t\t\t\t\t\"public\": {\n\t\t\t\t\t\tType: base.TypeBool,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"repository\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"admin\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"organization\",\n\t\t\t\t\t\t\t\tRelation: \"admin\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"parent\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"organization\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tAttributes: map[string]*base.Attribute{\n\t\t\t\t\t\"visibility\": {\n\t\t\t\t\t\tType: base.TypeString,\n\t\t\t\t\t},\n\t\t\t\t\t\"department\": {\n\t\t\t\t\t\tType: base.TypeString,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"team\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"member\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"user\": {},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Nil(t, err)\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Attribute and Rule Example in Permify Schema\nDESCRIPTION: This snippet demonstrates how to use integer attributes and define a custom rule for age-based access control in a Permify schema. It includes a 'content' entity with a 'min_age' attribute.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_4\n\nLANGUAGE: perm\nCODE:\n```\nentity content {\n    attribute min_age integer\n\n    permission view = check_age(min_age)\n}\n\nrule check_age(min_age integer) {\n\t\tcontext.data.age >= min_age\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Long-Chain Circular References in Permify Schema\nDESCRIPTION: This code tests validation for complex circular references that span multiple entity types in a longer chain. It creates a schema with a circular reference pattern across different entity types, then verifies that the validation correctly identifies this circular dependency.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithCircularReferenceWithMultipleEntityTypes(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"repo\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"repository\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"repository\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"team\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"team\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"team\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"user\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"user\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"organization\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"organization\",\n\t\t\t\t\t\t\t\tRelation: \"repo\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"relation reference graph contains a cycle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permission Cache in Permify\nDESCRIPTION: Configuration settings for permission caching in Permify, including bulk limits, concurrency limits, and cache parameters using the ristretto library.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/cache.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  ...\n  permission:\n    bulk_limit: 100\n    concurrency_limit: 100\n    cache:\n      number_of_counters: 10_000\n      max_cost: 10MiB\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Rules Based on Relations in Go\nDESCRIPTION: Example showing how to define permission rules in Permify that are based on entity relationships. The permission 'admin' is granted to 'owner', while 'edit' is granted to 'admin or member', creating a hierarchical permission structure.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/bundle.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npermission admin = owner\npermission edit = admin or member\npermission view = edit or member\n```\n\n----------------------------------------\n\nTITLE: Defining Database Configuration Structure in YAML\nDESCRIPTION: This snippet shows the structure of the database configuration in YAML format. It includes settings for the engine, URI, auto-migrate flag, connection pool parameters, and garbage collection options.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n├── database\n|   ├── engine\n|   ├── uri\n|   ├── auto_migrate\n|   ├── max_open_connections\n|   ├── max_idle_connections\n|   ├── max_connection_lifetime\n|   ├── max_connection_idle_time\n|   ├──garbage_collection\n|       ├──enable: true\n|       ├──interval: 3m\n|       ├──timeout: 3m\n|       ├──window: 720h\n```\n\n----------------------------------------\n\nTITLE: Enabling track_commit_timestamp via SQL Command in PostgreSQL\nDESCRIPTION: SQL command to enable the track_commit_timestamp setting in PostgreSQL, which is required for the Permify Watch API to function properly. This setting ensures data consistency and synchronization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/watch/watch-changes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER SYSTEM SET track_commit_timestamp = ON;\n```\n\n----------------------------------------\n\nTITLE: Complete Schema Validation Configuration\nDESCRIPTION: Full example of a schema validation file including entity definitions, relationships, and test scenarios\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n  entity user {}\n\n  entity organization {\n\n      relation admin @user\n      relation member @user\n\n      action create_repository = (admin or member)\n      action delete = admin\n  }\n\n  entity repository {\n\n      relation owner @user @organization#member\n      relation parent @organization\n\n      action push = owner\n      action read = (owner and (parent.admin and parent.member))\n      action delete = (parent.member and (parent.admin or owner))\n      action edit = parent.member not owner\n  }\n\nrelationships:\n  - \"organization:1#admin@user:1\"\n  - \"organization:1#member@user:1\"\n  - \"repository:1#owner@user:1\"\n  - \"repository:2#owner@user:2\"\n  - \"repository:2#owner@user:3\"\n  - \"repository:1#parent@organization:1#...\"\n  - \"organization:1#member@user:43\"\n  - \"repository:1#owner@user:43\"\n\nscenarios:\n  - name: \"scenario 1\"\n    description: \"test description\"\n    checks:\n      - entity: \"repository:1\"\n        subject: \"user:1\"\n        assertions:\n          push : true\n          owner : true\n      - entity: \"repository:2\"\n        subject: \"user:1\"\n        assertions:\n          push : false\n      - entity: \"repository:3\"\n        subject: \"user:1\"\n        context:\n          - \"repository:3#owner@user:1\"\n        assertions:\n          push : true\n      - entity: \"repository:1\"\n        subject: \"user:43\"\n        assertions:\n          edit : false\n    entity_filters:\n      - entity_type: \"repository\"\n        subject: \"user:1\"\n        context:\n          - \"repository:3#owner@user:1\"\n          - \"repository:4#owner@user:1\"\n          - \"repository:5#owner@user:1\"\n        assertions:\n          push : [\"1\", \"3\", \"4\", \"5\"]\n          edit : []\n    subject_filters:\n      - subject_reference: \"user\"\n        entity: \"repository:1\"\n        context:\n          - \"organization:1#member@user:58\"\n        assertions:\n          push : [\"1\", \"43\"]\n          edit : [\"58\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for Organizations in Go\nDESCRIPTION: Code snippet showing how to check if a user has 'create_repo' permission for an organization with ID 'org1'.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/google.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncheck, err := permify.Permissions().Check(context.Background(), &base.PermissionCheckRequest{\n  TenantId:   \"t1\",\n  Subject:    &base.Subject{Type: \"user\", Id: \"user1\"},\n  Permission: \"create_repo\",\n  Resource:   &base.Resource{Type: \"organization\", Id: \"org1\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Table in PostgreSQL for Permify\nDESCRIPTION: Creates a 'schema' table to store schema information with columns for tenant_id, schema, created_at, and version. The table is indexed on tenant_id with a foreign key constraint.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/cache.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS schema (\n    tenant_id TEXT,\n    schema TEXT NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL,\n    version BIGINT,\n    PRIMARY KEY(tenant_id, version),\n    CONSTRAINT fk_tenant_id FOREIGN KEY(tenant_id) REFERENCES tenant_id(tenant_id) ON DELETE CASCADE\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify for Zipkin Tracing\nDESCRIPTION: YAML configuration for setting up Zipkin as the trace exporter in Permify. This configuration enables tracing, specifies Zipkin as the exporter, and sets the endpoint for sending trace data using HTTP.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/zipkin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: zipkin\n  endpoint: http://localhost:9411/api/v2/spans\n  enabled: true\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Running Permify Docker Container\nDESCRIPTION: This command starts a Permify container, exposing ports 3476 for REST API and 3478 for GRPC Service. It uses the default configuration with authorization data stored in memory.\nSOURCE: https://github.com/Permify/permify/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 ghcr.io/permify/permify serve\n```\n\n----------------------------------------\n\nTITLE: Group Entity Schema in Permify\nDESCRIPTION: Definition for the group entity with manager and direct_member relations. Includes the member permission that can be granted to direct members or managers.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/google-docs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: perm\nCODE:\n```\nentity group {\n    relation manager @user @group#direct_member @group#manager\n    relation direct_member @user @group#direct_member @group#manager\n\n    permission member = direct_member or manager\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Tuples in Go\nDESCRIPTION: A method that transforms tuples based on schema definitions. It processes each tuple and returns a transformed version according to any transformation rules defined in the schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) transform(ctx context.Context, tuples []*base.Tuple, snap *base.Snapshot) ([]*base.Tuple, error) {\n\tif snap.Schema == nil || len(snap.Schema.GetEntityDefinitions()) == 0 {\n\t\treturn tuples, nil\n\t}\n\n\ttransformer := schema_validation.NewTupleTransformer(snap.Schema)\n\n\ttransformedTuples := make([]*base.Tuple, 0, len(tuples))\n\tfor _, tpl := range tuples {\n\t\ttransformedTuple, err := transformer.TransformTuple(tpl)\n\t\tif err != nil {\n\t\t\treturn nil, v1.NewInvalidTupleError(err.Error())\n\t\t}\n\t\ttransformedTuples = append(transformedTuples, transformedTuple)\n\t}\n\n\treturn transformedTuples, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Distributed Configuration Structure in YAML\nDESCRIPTION: This YAML structure outlines the configuration options for the distributed system in Permify, including enabling distributed mode, setting the address, and port.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n├── distributed\n|   ├── enabled\n|   ├── address\n|   ├── port\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Startup Commands for ECS Task Definition\nDESCRIPTION: YAML configuration specifying the startup commands for Permify in the ECS task definition. It includes database connection settings and other parameters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/aws.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserve, --database-engine=postgres, --database-uri=postgres://<user_name>:<password>@<db_endpoint>:<db_port>/<db_name>, --database-pool-max=20\n```\n\n----------------------------------------\n\nTITLE: Implementing REPL Command Executor in Go\nDESCRIPTION: This code snippet defines a struct Command that implements the ShellCommand interface for executing commands in the Permify REPL environment. It includes initialization of command properties and dependency injection.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Command struct {\n\tname        string\n\taliases     []string\n\tdescription string\n\tusage       string\n\n\t// Services\n\tcn schema.PermissionClient\n\tschemaClient     schema.SchemaClient\n\tdataClient       schema.DataClient\n\tvalidationClient schema.ValidationClient\n\n\t// Writer\n\twr io.Writer\n\n\t// Store\n\tst store.Store\n\tdb *sql.DB\n}\n\nfunc NewCommand(\n\tcn schema.PermissionClient,\n\tschemaClient schema.SchemaClient,\n\tdataClient schema.DataClient,\n\tvalidationClient schema.ValidationClient,\n\twr io.Writer,\n\tstore store.Store,\n\tdb *sql.DB,\n) *Command {\n\treturn &Command{\n\t\tname:             \"check\",\n\t\taliases:          []string{\"c\"},\n\t\tdescription:      \"\\033[31mcheck\\033[0m <subject> <permission> <object> - Evaluates permission by subject, object and action\",\n\t\tusage:            \"check <subject> <permission> <object>\",\n\t\tcn:         cn,\n\t\tschemaClient:     schemaClient,\n\t\tdataClient:       dataClient,\n\t\tvalidationClient: validationClient,\n\t\twr:               wr,\n\t\tst:               store,\n\t\tdb:               db,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify for SigNoz Tracing\nDESCRIPTION: This YAML configuration sets up SigNoz as the exporter for Permify traces. It specifies the endpoint, enables tracing, and allows insecure connections.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/signoz.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: signoz\n  endpoint: http://localhost:4317\n  enabled: true\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Creating tenant_id Schema Table in PostgreSQL for Permify\nDESCRIPTION: Creates a 'tenant_id' table that acts as a mapping for tenant identifiers with columns for tenant_id and id. This table is essential for multi-tenant functionality in the Permify system.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/cache.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS tenant_id (\n    tenant_id TEXT,\n    id BIGSERIAL,\n    PRIMARY KEY(tenant_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Cache in Permify\nDESCRIPTION: Configuration settings for schema caching in Permify using the ristretto cache library. Defines the number of counters and maximum cache size.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/cache.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  schema:\n    cache:\n      number_of_counters: 1_000\n      max_cost: 10MiB\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Permify Helm Repository\nDESCRIPTION: Commands to add and search the Permify Helm Charts repository\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/helm.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add permify https://permify.github.io/helm-charts\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ helm search repo permify\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Client with Dynamic Token in Go for Permify Access\nDESCRIPTION: A Go implementation that shows how to set up an HTTP client with a dynamically generated token for Permify authorization. It uses a token provider function for runtime token generation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc tokenProviderAuthClient() {\n    client := permify.NewClient(\n        \"localhost:3476\",\n        permify.WithHTTPClient(newHTTPClient()),\n        permify.WithTokenProvider(func() string {\n            return GenerateToken()\n        }),\n    )\n\n    // ... use client\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Node.js using dotenv\nDESCRIPTION: This snippet demonstrates how to load environment variables from a .env file in a Node.js application using the dotenv package. It's a common pattern for keeping configuration values like API keys and connection strings outside of source code.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/tenancy/create-tenant.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in Permify\nDESCRIPTION: YAML configuration for setting up OpenTelemetry tracing in Permify, specifying the exporter, endpoint, and connection settings.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/otlp.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: otlp\n  endpoint: http://localhost:4317\n  enabled: true\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics in Permify\nDESCRIPTION: YAML configuration for OpenTelemetry metrics export settings, including endpoint, path, and connection parameters.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/otlp.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmeter:\n  enabled: true\n  exporter: otlp\n  endpoint: collector:4317\n  insecure: true\n  urlpath: /v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Tuples with cURL\nDESCRIPTION: Example showing how to create a relation tuple using cURL where user:3 is granted admin role in organization:1. This directly calls the Permify API endpoint to write the relationship data.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"tuples\": [\n        {\n        \"entity\": {\n            \"type\": \"organization\",\n            \"id\": \"1\"\n        },\n        \"relation\": \"admin\",\n        \"subject\":{\n            \"type\": \"user\",\n            \"id\": \"3\",\n            \"relation\": \"\"\n        }\n    }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting up Permify with PostgreSQL using Docker Compose\nDESCRIPTION: This Docker Compose configuration creates a Permify service connected to a PostgreSQL database. The Permify service runs on port 3476 with a PostgreSQL persistence layer, while the PostgreSQL database is configured with appropriate credentials and a dedicated volume for data persistence.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/contextual-tuples.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\n\nservices:\n  permify:\n    image: \"ghcr.io/permify/permify:latest\"\n    command: \"serve\"\n    ports:\n      - \"3476:3476\"\n    environment:\n      PERMIFY_DATABASE_DRIVER: postgres\n      PERMIFY_DATABASE_URI: postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable\n    depends_on:\n      - postgres\n\n  postgres:\n    image: postgres:13\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  postgres-data:\n```\n\n----------------------------------------\n\nTITLE: Running Permify Service via Docker\nDESCRIPTION: Docker command to start the Permify service with default configuration options, exposing ports 3476 for REST API and 3478 for GRPC Service.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478  ghcr.io/permify/permify serve\n```\n\n----------------------------------------\n\nTITLE: Validating Java Client Connection with List Tenants API Request\nDESCRIPTION: Code for testing the Permify API client connection in Java by sending a List Tenants API request.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Rest SDK for Java\nimport org.permify.ApiClient;\nimport org.permify.api.TenancyApi;\nimport org.permify.model.TenantListRequest;\n\nApiClient apiClient = new ApiClient();\napiClient.setBasePath(\"<your-permify-endpoint:3476>\");\napiClient.addDefaultHeader(\"Authorization\", \"Bearer <your-permify-api-key>\");\n\nTenancyApi tenancyApi = new TenancyApi(apiClient); // previously created apiClient\ntry {\n  TenantListRequest req = new TenantListRequest();\n  req.setPageSize((long) 20);\n  tenancyApi.tenantsList(req);\n\n} catch (Exception e) {\n    System.out.println(\"Error occurred: \" + e.getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permify with Homebrew\nDESCRIPTION: Command to install Permify using Homebrew package manager from the permify/tap repository.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/brew.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install permify/tap/permify\n```\n\n----------------------------------------\n\nTITLE: Contextual Permission Check in Go with Permify Client\nDESCRIPTION: Go implementation of a permission check that includes contextual IP address data. The code creates a struct with the IP address and sends it as part of the permission check request.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/contextual-tuples.mdx#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndata, err := structpb.NewStruct(map[string]interface{}{\n\t\"ip_address\": \"192.158.1.38\",\n})\n\ncr, err: = client.Permission.Check(context.Background(), &v1.PermissionCheckRequest {\n    TenantId: \"t1\",\n    Metadata: &v1.PermissionCheckRequestMetadata {\n        SnapToken: \"\"\n        SchemaVersion: \"\"\n        Depth: 20,\n    },\n    Entity: &v1.Entity {\n        Type: \"organization\",\n        Id: \"1\",\n    },\n    Permission: \"hr_manager\",\n    Subject: &v1.Subject {\n        Type: \"user\",\n        Id: \"1\",\n    },\n    Context: *v1.Context {\n        Data: data,\n    }\n\n    if (cr.can === PermissionCheckResponse_Result.RESULT_ALLOWED) {\n        // RESULT_ALLOWED\n    } else {\n        // RESULT_DENIED\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Client with Basic Auth in Go for Permify Access\nDESCRIPTION: A Go code example that demonstrates how to create an HTTP client with basic authentication for accessing Permify services. This implementation uses username and password credentials.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newHTTPClient() *http.Client {\n    return &http.Client{\n        Transport: &http.Transport{\n            TLSClientConfig: &tls.Config{\n                InsecureSkipVerify: true,\n            },\n        },\n    }\n}\n\nfunc basicAuthClient() {\n    client := permify.NewClient(\n        \"localhost:3476\",\n        permify.WithHTTPClient(newHTTPClient()),\n        permify.WithBasicAuth(\"username\", \"password\"),\n    )\n\n    // ... use client\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Cache in Permify\nDESCRIPTION: Configuration for Permify's distributed caching system using consistent hashing. Specifies distributed mode settings, service address, and port configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/cache.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndistributed:\n  # Indicates whether the distributed mode is enabled or not\n  enabled: true\n\n  # The address of the distributed service.\n  # Using a Kubernetes DNS name suggests this service runs in a Kubernetes cluster\n  # under the 'default' namespace and is named 'permify'\n  address: \"kubernetes:///permify.default:5000\"\n\n  # The port on which the service is exposed\n  port: \"5000\"\n```\n\n----------------------------------------\n\nTITLE: Testing Database Operations with Testify in Go\nDESCRIPTION: Unit test for database operations in a permission system, using the Testify framework. Tests the FilterAttributes function by creating mock data, executing the filter operation, and verifying the expected results against actual values.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases/multi-tenancy.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestSQLiteStorage_FilterAttributes(t *testing.T) {\n\ttestCases := []struct {\n\t\tname string\n\n\t\tschemaVersion string\n\t\targs          []base.Attribute\n\t\tfilter        *v1.AttributeFilter\n\n\t\texpected []*base.AttributeFilter\n\t}{\n\t\t{\n\t\t\tname:          \"no filter\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"org\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"test\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"filter by entity type\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{\n\t\t\t\tEntityType: \"user\",\n\t\t\t},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"test\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"filter by attribute\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{\n\t\t\t\tAttribute: \"name\",\n\t\t\t},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"org\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"filter by entity type and attribute\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{\n\t\t\t\tEntityType: \"user\",\n\t\t\t\tAttribute:  \"name\",\n\t\t\t},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"filter by schema version\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{\n\t\t\t\tSchemaVersion: \"1\",\n\t\t\t},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"org\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"test\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"filter by entity type, attribute and schema version\",\n\t\t\tschemaVersion: \"1\",\n\t\t\targs: []base.Attribute{\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"user\",\n\t\t\t\t\tAttribute:  \"test\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tEntityType: \"org\",\n\t\t\t\t\tAttribute:  \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilter: &v1.AttributeFilter{\n\t\t\t\tEntityType:    \"user\",\n\t\t\t\tAttribute:     \"name\",\n\t\t\t\tSchemaVersion: \"1\",\n\t\t\t},\n\t\t\texpected: []*base.AttributeFilter{\n\t\t\t\t{\n\t\t\t\t\tEntityType:    \"user\",\n\t\t\t\t\tAttribute:     \"name\",\n\t\t\t\t\tSchemaVersion: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\ts := NewSQLiteStorage(t)\n\n\t\t\terr := s.CreateSchema(context.Background(), tc.schemaVersion)\n\t\t\tassert.NoError(t, err)\n\n\t\t\tfor _, arg := range tc.args {\n\t\t\t\terr := s.WriteAttribute(context.Background(), &arg, tc.schemaVersion)\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\n\t\t\tcandidates, token, err := s.FilterAttributes(context.Background(), tc.filter)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Nil(t, token)\n\n\t\t\tif len(tc.expected) == 0 {\n\t\t\t\tassert.Len(t, candidates, 0)\n\t\t\t} else {\n\t\t\t\tassert.ElementsMatch(t, tc.expected, candidates)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Schema in Permify\nDESCRIPTION: Authorization schema defining user, content and interaction entities with their relations, attributes and permissions for load testing.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/performance-test/README.md#2025-04-17_snippet_0\n\nLANGUAGE: policyLanguage\nCODE:\n```\nentity user {\n    relation self @user\n    relation follower @user\n    relation blocked @user\n    \n    attribute is_public boolean\n\n    permission view = self or (is_public or follower) not blocked\n}\n\nentity content {\n    relation owner @user\n    attribute is_public boolean\n\n    permission view = owner.self or (is_public or owner.follower) not owner.blocked\n}\n\nentity interaction {\n    relation creator @user\n    relation parent @content\n\n    permission view = creator.self or (creator.view and parent.view)\n}\n```\n\n----------------------------------------\n\nTITLE: K6 Load Testing Script for Permify\nDESCRIPTION: JavaScript test script using k6 for load testing Permify with ramping arrival rate, performing permission checks with configurable entity and subject IDs.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/performance-test/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from 'k6/http';\nimport {check, sleep} from 'k6';\n\nexport let options = {\n    cloud: {\n        distribution: {\n            distributionLabel1: {loadZone: 'amazon:de:frankfurt', percent: 100},\n        },\n    },\n    scenarios: {\n        contacts_load: {\n            executor: 'ramping-arrival-rate',\n            startRate: 10,  // starting rate of new iterations per timeUnit\n            timeUnit: '1s', // new iterations per second\n            preAllocatedVUs: 50, // minimum number of VUs before the test starts\n            maxVUs: 100,    // maximum number of VUs during the test\n            stages: [\n                {target: 100, duration: '10s'},  // Warm-up phase\n                {target: 1000, duration: '30s'},  // Warm-up phase\n                {target: 10000, duration: '1m' }, // Ramp up to full load\n            ]\n        }\n    }\n};\n\nfunction getRandomId() {\n    return Math.floor(Math.random() * 100000).toString();\n}\n\nlet reuseIdProbability = 0.3;\nlet currentId = getRandomId();\n\nexport default function () {\n    let entityId, subjectId;\n\n    // Decide whether to reuse the current ID for the entity\n    if (Math.random() < reuseIdProbability) {\n        entityId = currentId; // Reuse the existing ID\n    } else {\n        entityId = getRandomId(); // Generate a new ID\n        currentId = entityId; // Update current ID to the new one\n    }\n\n    // Decide whether to reuse the current ID for the subject\n    if (Math.random() < reuseIdProbability) {\n        subjectId = currentId; // Reuse the existing ID\n    } else {\n        subjectId = getRandomId(); // Generate a new ID\n        currentId = subjectId; // Update current ID to the new one\n    }\n\n    const url = '<your-api-endpoint>';\n    const payload = JSON.stringify({\n        metadata: {\n            snap_token: \"\",\n            schema_version: \"<schema-version>\",\n            depth: 20\n        },\n        entity: {\n            type: \"content\",\n            id: entityId,\n        },\n        permission: 'view',\n        subject: {\n            type: 'user',\n            id: subjectId\n        },\n        page_size: 20\n    });\n\n    const params = {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer <your-token>`\n        },\n        timeout: 360000\n    };\n\n    let response = http.post(url, payload, params);\n    //console.log(response);\n    check(response, {\n        \"is status 200\": (r) => r.status === 200\n    });\n    sleep(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify Client\nDESCRIPTION: Example code showing how to initialize a basic Permify client with configuration settings. Sets up the API client and creates a TenancyApi instance.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/rest/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport permify\nfrom permify import ApiException\n\nconfiguration = permify.Configuration(\n    host = \"http://localhost:3476\"\n)\n\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.TenancyApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Connection for SigNoz Tracing\nDESCRIPTION: This YAML configuration demonstrates how to set up a secure HTTPS connection for exporting traces to SigNoz. It disables the insecure option and uses an HTTPS endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/signoz.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: signoz\n  endpoint: https://your-signoz-endpoint\n  enabled: true\n  insecure: false\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entities in Mercury Schema\nDESCRIPTION: Initial setup of the basic entities required for Mercury's authorization schema, including users, organizations, teams, and accounts.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/mercury.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {}\n\nentity teams {}\n\nentity accounts {}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration in Permify\nDESCRIPTION: Configuration examples for setting up MySQL database connections in Permify. Shows both Docker environment variable setup and YAML configuration with connection pool settings.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 \\\n-e PERMIFY_DATABASE_ENGINE=mysql \\\n-e PERMIFY_MYSQL_URI=mysql://root:mysql@localhost:3306/permify \\\npermify/permify:latest serve\n```\n\nLANGUAGE: json\nCODE:\n```\ndatabase:\n  engine: mysql\n  mysql:\n    uri: \"mysql://root:mysql@localhost:3306/permify\"\n    max_open_connections: 20\n    max_idle_connections: 1\n```\n\n----------------------------------------\n\nTITLE: Applying Sync Configuration Using CLI\nDESCRIPTION: Command to apply the Permify Sync Service configuration using the CLI tool. This command takes the configuration file and sets up the synchronization between the database and Permify.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/data-sync.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npermfiy-sync apply -f ./my_postgres_instance.yaml\n```\n\n----------------------------------------\n\nTITLE: Resolving 'After' Constraint Between Two Times in Go\nDESCRIPTION: Function that determines if the first time point is after the second time point while taking into account configured temporal constraints. It applies a duration buffer when specified in the configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/modeling.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// IsAfter returns true if t1 is after t2 considering the buffer duration.\nfunc IsAfter(t1, t2 time.Time, constraintConfigs ...types.ConstraintConfig) bool {\n\tconfig := resolveConstraintConfig(constraintConfigs)\n\n\tt1Time := t1\n\tt2Time := t2\n\n\t// Apply duration\n\tif config.AfterDuration != nil {\n\t\tt2Time = t2Time.Add(*config.AfterDuration)\n\t}\n\n\treturn t1Time.After(t2Time)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Consistency in Protocol Buffers\nDESCRIPTION: A Protocol Buffers schema definition for consistency validation in Permify. It defines the Response message structure containing a ConsistencyReport with collections for errors found in relations and permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/schema/read-schema.md#2025-04-17_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage Response {\n    ConsistencyReport consistency_report = 1;\n}\n\nmessage ConsistencyReport {\n    repeated RelationError relation_errors = 1;\n    repeated PermissionError permission_errors = 2;\n}\n\nmessage RelationError {\n    string entity_type = 1;\n    string relation = 2;\n    string message = 3;\n}\n\nmessage PermissionError {\n    string entity_type = 1;\n    string permission = 2;\n    string message = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zed Editor for Permify Schema Files\nDESCRIPTION: JSON configuration for the Zed code editor to properly handle Permify schema files with .permify extension. It specifies grammar settings to improve syntax highlighting and editing experience.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/data/read-attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"language\": \"permify\",\n  \"name\": \"Permify Schema\",\n  \"scope\": \"source.permify\",\n  \"file_types\": [\"permify\"],\n  \"grammar\": \"syntax/permify.scm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Table in PostgreSQL for Permify\nDESCRIPTION: Creates an 'attribute' table for storing entity attributes with columns for entity details, attribute values, timestamps, and tenant references. The table has a primary key constraint and foreign key references to tenant_id and schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/cache.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS attribute (\n    entity_type TEXT NOT NULL,\n    entity_id TEXT NOT NULL,\n    attribute TEXT NOT NULL,\n    value TEXT NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL,\n    updated_at TIMESTAMPTZ NOT NULL,\n    tenant_id TEXT,\n    schema_version BIGINT,\n    PRIMARY KEY(tenant_id, entity_type, entity_id, attribute),\n    CONSTRAINT fk_tenant_id FOREIGN KEY(tenant_id) REFERENCES tenant_id(tenant_id) ON DELETE CASCADE,\n    CONSTRAINT fk_schema_version FOREIGN KEY(tenant_id, schema_version) REFERENCES schema(tenant_id, version) ON DELETE CASCADE\n);\n\nCREATE INDEX IF NOT EXISTS idx_entity_attr ON attribute (tenant_id, entity_type, entity_id);\n```\n\n----------------------------------------\n\nTITLE: Standalone Permify Dockerfile\nDESCRIPTION: Dockerfile configuration for deploying Permify without a database\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# file: ./permify-fly-deploy/Dockerfile\nFROM ghcr.io/permify/permify:latest\nCMD [\"serve\"]\n```\n\n----------------------------------------\n\nTITLE: Department Entity with Inherited Permissions\nDESCRIPTION: Defines a department entity that inherits permissions from its parent organization while adding manager-specific permissions. Includes both view and edit actions.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/hierarchies.mdx#2025-04-17_snippet_3\n\nLANGUAGE: permify\nCODE:\n```\nentity department {\n    relation parent @organization\n    relation manager @user\n    \n    action view = parent.view or manager\n    action edit = parent.edit or manager\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Entity with Roles\nDESCRIPTION: Organization entity definition with admin and member user role relations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/modeling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity organization {\n\n    relation admin  @user\n    relation member @user\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Connection for Jaeger in Permify\nDESCRIPTION: YAML configuration for setting up a secure HTTPS connection between Permify and Jaeger. This optional configuration disables the insecure flag and uses an HTTPS endpoint for enhanced security.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/jaeger.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: jaeger\n  endpoint: https://your-jaeger-endpoint\n  enabled: true\n  insecure: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Validate Action with Local File\nDESCRIPTION: GitHub Action workflow configuration for validating Permify schema using a local validation file\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: \"permify/permify-validate-action@v1.0.0\"\n  with:\n    validationFile: \"test.yaml\"\n```\n\n----------------------------------------\n\nTITLE: User Entity Definition\nDESCRIPTION: Defines a basic user entity without any relations or actions. This entity serves as a reference point for user associations throughout the schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/hierarchies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: permify\nCODE:\n```\nentity user {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Tracer Settings in YAML\nDESCRIPTION: Basic configuration block for setting up a tracer in Permify. Demonstrates how to configure the exporter type, endpoint URL, and enable/disable tracing functionality.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/tracing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: 'zipkin'\n  endpoint: 'http://172.17.0.4:9411/api/v2/spans'\n  disabled: false\n```\n\n----------------------------------------\n\nTITLE: Permify Service Configuration\nDESCRIPTION: Kubernetes service manifest for exposing Permify deployment with LoadBalancer.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: permify\nspec:\n  ports:\n      - name: 3476-tcp\n        port: 3476\n        protocol: TCP\n        targetPort: 3476\n  selector:\n        app: permify\n  type: LoadBalancer\nstatus:\n  loadBalancer: {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Description Method for Command Interface in Go\nDESCRIPTION: This method returns the description of the command. It's part of the ShellCommand interface that provides help text explaining what the command does and how to use it.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Command) Description() string {\n\treturn c.description\n}\n```\n\n----------------------------------------\n\nTITLE: Go Unit Test Example with Table-Driven Tests\nDESCRIPTION: An example of writing Go unit tests using the table-driven testing pattern, including test case definition, test execution, and validation of results.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestValidation(t *testing.T) {\n    // Create test cases\n    tt := []struct {\n        name         string\n        entity       string\n        relation     string\n        subject      string\n        expectedResp bool\n    }{\n        {\n            name:         \"validate for user:1 can read document:1\",\n            entity:       \"document:1\", \n            relation:     \"reader\",\n            subject:      \"user:1\",\n            expectedResp: true,\n        },\n    }\n    \n    // mock dependencies\n    client, err := createClient() \n    if err != nil {\n        t.Fatal(err)\n    }\n    \n    // Call the function and validate the results for each test case\n    for _, tc := range tt {\n        t.Run(tc.name, func(t *testing.T) {\n            // make the function call using the test case parameters\n            result, err := client.Check(context.Background(), tc.entity, tc.relation, tc.subject)\n            if err != nil {\n                t.Fatalf(\"unexpected error: %v\", err)\n            }\n            \n            // compare the result with the expected result\n            if tc.expectedResp != result.GetCan() {\n                t.Fatalf(\"expected: %v but got: %v\", tc.expectedResp, result.GetCan())\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger All-in-One Container with Docker\nDESCRIPTION: A Docker command to deploy Jaeger's all-in-one image which includes agent, collector, query service, and UI components. It exposes all necessary ports for tracing functionality and UI access at http://localhost:16686.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/jaeger.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\n  -p 5775:5775/udp \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 14268:14268 \\\n  -p 14250:14250 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:1.32\n```\n\n----------------------------------------\n\nTITLE: Distributed Permify Service\nDESCRIPTION: Service configuration for distributed Permify setup with multiple ports exposed.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: permify\nspec:\n  ports:\n      - name: permify-port\n        port: 3476\n        targetPort: 3476\n      - name: permify-dist\n        port: 7946\n        targetPort: 7946\n  selector:\n        app: permify\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Running Permify Docker Container\nDESCRIPTION: Command to run the Permify Docker container, mapping ports and mounting a configuration file.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/container.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 -v {YOUR-CONFIG-PATH}:/config ghcr.io/permify/permify\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Site Configuration\nDESCRIPTION: Commands to enable the Nginx site configuration by creating a symlink and testing the configuration for syntax errors before restarting the Nginx service.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/domain.name /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Basic Permify Deployment Configuration\nDESCRIPTION: Kubernetes deployment manifest for basic Permify setup with postgres database configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    labels:\n        app: permify\n    name: permify\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: permify\n  strategy:\n      type: Recreate\n  template:\n      metadata:\n        labels:\n          app: permify\n      spec:\n        containers:\n          - image: ghcr.io/permify/permify\n            name: permify\n            args:\n            - \"serve\"\n            - \"--database-engine=postgres\"\n            - \"--database-uri=postgres://user:password@host:5432/db_name\"\n            - \"--database-max-open-connections=20\"\n            ports:\n                - containerPort: 3476\n                  protocol: TCP\n            resources: {}\n        restartPolicy: Always\nstatus: {}\n```\n\n----------------------------------------\n\nTITLE: Testing Direct Circular References in Permify Schema\nDESCRIPTION: This code tests validation for direct circular references between different entity types. It creates a schema where two different entity types reference each other in their relations, forming a circular dependency that should be detected during validation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithCircularReferenceWithDifferentEntityTypes(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"repo\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"repository\",\n\t\t\t\t\t\t\t\tRelation: \"org\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"repository\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"org\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"organization\",\n\t\t\t\t\t\t\t\tRelation: \"repo\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"relation reference graph contains a cycle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl and GKE Authentication Plugin\nDESCRIPTION: Commands for installing kubectl component and GKE authentication plugin for cluster management.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud components install kubectl\nkubectl version\ngcloud components install gke-gcloud-auth-plugin\ngke-gcloud-auth-plugin --version\n```\n\n----------------------------------------\n\nTITLE: Displaying Permify Docker Container Help\nDESCRIPTION: Command to display all available configuration flags for the Permify Docker container.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/container.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 ghcr.io/permify/permify --help\n```\n\n----------------------------------------\n\nTITLE: Integration Test Directory Structure in Go\nDESCRIPTION: Shows how integration test files should be organized with a specific directory structure and naming pattern. These tests run in parallel with other tests unless skipped with the -short flag.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage integration_test\n\nimport (\n    \"context\"\n    \"testing\"\n    \n    \"github.com/stretchr/testify/require\"\n)\n```\n\n----------------------------------------\n\nTITLE: Team Entity Definition\nDESCRIPTION: Team entity definition with owner, member, and organization relations, plus permissions for team management operations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/rebac/user-groups.mdx#2025-04-17_snippet_3\n\nLANGUAGE: permify\nCODE:\n```\nentity team {\n    relation owner @user\n    relation member @user\n    relation org @organization\n\n    permission edit = org.admin or owner\n    permission delete = org.admin or owner\n    permission invite = org.admin and (owner or member)\n    permission remove_user = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Serving Swagger UI in Go HTTP Handler\nDESCRIPTION: This snippet creates an HTTP handler to serve Swagger UI documentation for the Permify API. It configures middleware for CORS, sets up Swagger documentation endpoints, and handles API documentation requests.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Server) swaggerHandler() http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\toptions := middleware.SwaggerUIOpts{\n\t\t\tBasePath: \"/api/v1\",\n\t\t\tPath:     \"/docs\",\n\t\t\tSpecURL:  \"/api/v1/swagger.json\",\n\t\t\tTitle:    \"Permify API\",\n\t\t}\n\n\t\tmiddleware.ServeSwaggerUI(w, r, options)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Docker Container\nDESCRIPTION: Docker command to run a Zipkin container for tracing collection and visualization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/operations/tracing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Fly.io Configuration with PostgreSQL\nDESCRIPTION: TOML configuration file for Fly.io deployment with PostgreSQL database connection\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# fly.toml app configuration file generated\n#\n# See https://fly.io/docs/reference/configuration/ for information about how to use this file.\napp = 'permify-fly-deploy-with-postgres'\nprimary_region = 'lax'\n\n[experimental]\n  # you'll want to avoid committing the actual username and password in source control for your database\n  # and possibly generate this file in a build process to deploy to inject your database secrets.\n  cmd = [\"serve\", \"--database-engine=postgres\", \"--database-uri=postgres://<username>:<password>@permify-psql.flycast:5432\"]\n\n[[services]]\n  internal_port = 3476\n  protocol = 'tcp'\n  auto_stop_machines = 'stop'\n  auto_start_machines = true\n  min_machines_running = 1\n  processes = ['app']\n\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 3476\n\n[[services]]\n  internal_port = 3478\n  protocol = 'tcp'\n  auto_stop_machines = 'stop'\n  auto_start_machines = true\n  min_machines_running = 1\n  processes = ['app']\n\n  [services.ports]\n  # we don't need any handlers for this one since the permify grpc server\n  # handles tls termination for us.\n    port = 3478\n    tls_options = { \"alpn\" = [\"h2\"] }\n\n[[vm]]\n  memory = '1gb'\n  cpu_kind = 'shared'\n  cpus = 1\n```\n\n----------------------------------------\n\nTITLE: Testing Entity Type References in Permify Schema\nDESCRIPTION: This code tests validation of entity type references in a schema definition. It creates a schema with a relation reference pointing to a non-existent entity type, then verifies that the validation correctly identifies this error.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithMissingType(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {},\n\t\t\t\"repository\": {},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType: \"UNKNOWN_ENTITY_TYPE\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"entity type 'UNKNOWN_ENTITY_TYPE' in relation reference in user.manager is not defined\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Docker\nDESCRIPTION: Docker command to run the OpenTelemetry Collector with exposed ports 4317 and 4318 for telemetry data collection.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/otlp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 4317:4317 -p 4318:4318 otel/opentelemetry-collector:latest\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database on Fly.io\nDESCRIPTION: Command to create a PostgreSQL database instance on Fly.io with connection details output\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfly postgres create\n\n# output\n# Postgres cluster permify-example-psql created\n#  Username:    <username>\n#  Password:    <password>\n#  Hostname:    permify-example-psql.internal\n#  Flycast:     fdaa:9:9110:0:1::2\n#  Proxy port:  5432\n#  Postgres port:  5433\n#  Connection string: postgres://<username>:<password>@permify-example-psql.flycast:5432\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Server Packages\nDESCRIPTION: Updates package repositories and installs necessary tools including ufw (Uncomplicated Firewall), nginx for web serving, certbot for SSL certificates, and other development tools.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y ufw nginx certbot python3-certbot-nginx net-tools unzip git\n```\n\n----------------------------------------\n\nTITLE: Validating Node.js gRPC Client Connection with List Tenants API Request\nDESCRIPTION: Code for testing the Permify gRPC client connection in Node.js by sending a List Tenants API request with promise-based handling.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// gRPC SDK for Node\nconst permify = require(\"@permify/permify-node\");\n\nconst interceptor = permify.grpc.newAccessTokenInterceptor(\"<your-permify-api-key>\");\nconst client = permify.grpc.newClient({\n    endpoint: \"<your-permify-endpoint:3478>\",\n    cert: undefined,\n    pk: undefined,\n    certChain: undefined,\n    insecure: false\n}, interceptor);\n\nclient.tenancy.list({\n    pageSize: 20\n}).then((response) => {\n    console.log(response);\n    // handle response\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify JavaScript Client\nDESCRIPTION: Example of initializing the Permify JavaScript client with a local server URL and creating a tenant API instance.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/rest/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst permify = require(\"permify-javascript\");\n\nconst apiInstance = new permify.ApiClient(\"http://127.0.0.1:3476\"); // Fixed URL format\nconst tenantApi = new permify.TenancyApi(apiInstance);\n```\n\n----------------------------------------\n\nTITLE: Validating JavaScript Client Connection with List Tenants API Request\nDESCRIPTION: Code for testing the Permify API client connection in JavaScript by sending a List Tenants API request with callback error handling.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest SDK for Javascript\nconst permify = require('permify-javascript');\nconst apiClient = new permify.ApiClient(\"<your-permify-endpoint>:3476\");\napiClient.defaultHeaders = {'Authorization': \"Bearer <your-permify-api-key>\"};\nconst api = permify.TenancyApi(apiClient)\nconst body = {\n    pageSize: 20\n};\ntry {\n    api.tenantsList(body, (error, data, response) => {\n        if (error) {\n            // handle the error\n        }\n        // handle the response\n    });\n} catch (error) {\n    // This block will only handle synchronous errors, \n    // so you generally wouldn't catch REST errors here.\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Fly.io Configuration\nDESCRIPTION: TOML configuration for deploying Permify without a database, exposing both REST and gRPC ports\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# fly.toml\napp = 'permify-fly-deploy'\nprimary_region = 'lax'\n\n[experimental]\n  allowed_public_ports = [3476, 3478]\n  auto_rollback = true\n\n[[services]]\n  internal_port = 3476\n  protocol = 'tcp'\n  auto_stop_machines = 'stop'\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = ['app']\n\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 3476\n\n[[services]]\n  internal_port = 3478\n  protocol = 'tcp'\n  auto_stop_machines = 'stop'\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = ['app']\n\n  [[services.ports]]\n  # we don't need http handlers for our fly machines for port 3478 since our gRPC server handles\n  # tls termination for us\n  port = 3478\n\n[[vm]]\n  memory = '1gb'\n  cpu_kind = 'shared'\n  cpus = 1\n```\n\n----------------------------------------\n\nTITLE: Testing Relation References in Permify Schema\nDESCRIPTION: This code tests validation of relation references in a schema. It creates a schema with a relation reference pointing to a non-existent relation, then verifies that the validation correctly identifies this error and provides an appropriate error message.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithMissingRelation(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {},\n\t\t\t\"repository\": {},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"user\",\n\t\t\t\t\t\t\t\tRelation: \"UNKNOWN_RELATION\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"relation 'UNKNOWN_RELATION' in relation reference in user.manager is not defined\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Commands to clone and navigate to the Permify SDK samples repository.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/go/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/go/grpc\n```\n\n----------------------------------------\n\nTITLE: Verifying Helm Installation\nDESCRIPTION: Commands to verify Helm installation and expected output\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/helm.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm version\n```\n\nLANGUAGE: bash\nCODE:\n```\nWARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/vagrant/.kube/config\nversion.BuildInfo{Version:\"v3.4.0\", GitCommit:\"7090a89efc8a18f3d8178bf47d2462450349a004\", GitTreeState:\"clean\", GoVersion:\"go1.14.10\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a SSH Key for AWS EC2 Access\nDESCRIPTION: Commands to generate a SSH key pair and set appropriate permissions for connecting to AWS EC2 instances. The key is generated in the ed25519 format for enhanced security.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.ssh\nssh-keygen -t ed25519 -f ~/.ssh/aws\nchmod 600 ~/.ssh/aws\n```\n\n----------------------------------------\n\nTITLE: Running a Bundle with RunBundle API in JSON\nDESCRIPTION: This example shows how to execute a previously defined bundle named 'project_created' by calling the RunBundle API endpoint. It provides the required arguments with specific values that will be substituted in the bundle's operations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/bundle/write-bundle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /bundle\nBODY\n{\n   \"name\": \"project_created\",\n   \"arguments\": {\n       \"creatorID\": \"564\",\n       \"organizationID\": \"789\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Python Client Connection with List Tenants API Request\nDESCRIPTION: Code for testing the Permify API client connection in Python by sending a List Tenants API request with error handling.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Rest SDK for Python\nimport permify\n\nconfiguration = permify.Configuration(\n    host = \"<your-permify-endpoint>:3476\"\n)\n\napi_client = permify.ApiClient(configuration, \n                       header_name=\"Authorization\", \n                       header_value=\"Bearer <your-permify-api-key>\")\n\napi_instance = permify.TenancyApi(api_client)\nbody = permify.TenantListRequest(page_size=20)\ntry:\n    response = api_instance.tenants_list(body)\n    pprint(response.continuous_token)\nexcept ApiException as e:\n    print(\"Exception when listing tenants: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Permify gRPC Client (TypeScript)\nDESCRIPTION: TypeScript code snippet demonstrating how to create a simple Permify gRPC client. It imports the Permify Node package and initializes a client with a specified endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/grpc/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as permify from \"@permify/permify-node\";\n\nconst client = permify.grpc.newClient({\n    endpoint: \"localhost:3478\",\n    cert: undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify Typescript Client\nDESCRIPTION: Example of creating a Permify client instance with configuration for the REST API endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/rest/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as permify from \"permify-typescript\";\n\nconst configuration = new permify.Configuration({\n    basePath: \"http://localhost:3476\"\n})\n\nconst apiInstance = new permify.TenancyApi(configuration);\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch API in Permify Configuration\nDESCRIPTION: YAML configuration required to enable the Watch API feature in Permify. This must be added to your configuration file to use the Watch API functionality.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/watch/watch-changes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  watch:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service for Permify with LoadBalancer Type\nDESCRIPTION: This Kubernetes manifest creates a LoadBalancer service for Permify. It exposes Permify's HTTP and gRPC endpoints (ports 3476 and 3478) to external traffic through a cloud provider's load balancer.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/sync-data.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: permify\nspec:\n  type: LoadBalancer\n  selector:\n    app: permify\n  ports:\n  - port: 3476\n    targetPort: 3476\n    name: http\n  - port: 3478\n    targetPort: 3478\n    name: grpc\n```\n\n----------------------------------------\n\nTITLE: Running Permify Sample Application\nDESCRIPTION: Command to execute the create_tenant.ts script, which demonstrates the usage of the Permify SDK.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode create_tenant.ts\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster\nDESCRIPTION: Command to create an EKS cluster with specified configuration including node type and count\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neksctl create cluster \\\n--name <your-cluster-name> \\\n--version 1.24 \\\n--region <region-of-choice> \\\n--nodegroup-name permify \\\n--node-type t2.small \\\n--nodes 2\n```\n\n----------------------------------------\n\nTITLE: Cloning the Application Repository\nDESCRIPTION: Clones the Permify application repository from GitHub and navigates to the project directory to prepare for deployment. Uses the specified repository URL.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Permify/permify.git\ncd permify\n```\n\n----------------------------------------\n\nTITLE: Documenting Protocol Buffers Usage in Permify\nDESCRIPTION: This markdown snippet introduces the purpose of the folder, which contains Protocol Buffers used in the Permify project. It also includes links to the official Protocol Buffers documentation and the Buf GitHub repository for further reference.\nSOURCE: https://github.com/Permify/permify/blob/master/proto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Permify Protocol Buffers\n\nThis folder contains Protocol Buffers used on Permify.\n\n[Protocol Buffers]: https://developers.google.com/protocol-buffers/\n[Buf]: https://github.com/bufbuild/buf\n```\n\n----------------------------------------\n\nTITLE: Running Permify Server with Go\nDESCRIPTION: Commands to clone the Permify repository, build it using Go, and run the server.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/kubernetes.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Permify/permify.git\ncd permify\ngo build -o permify cmd/permify/main.go\n./permify server\n```\n\n----------------------------------------\n\nTITLE: Permify SDK Maven Dependencies\nDESCRIPTION: Maven dependencies required for integrating Permify SDK into a Java project.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/grpc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>build.buf.gen</groupId>\n    <artifactId>permifyco_permify_grpc_java</artifactId>\n    <version>1.65.1.1.20240628085453.215bbf832f82</version>\n</dependency>\n\n<dependency>\n    <groupId>build.buf.gen</groupId>\n    <artifactId>permifyco_permify_protocolbuffers_java</artifactId>\n    <version>27.2.0.1.20240628085453.215bbf832f82</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Command to clone the Permify SDK samples repository and navigate to the typescript REST example directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/rest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/typescript/rest\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgreSQL Configuration via SQL\nDESCRIPTION: SQL command to reload the PostgreSQL configuration after making changes, ensuring the new settings take effect without requiring a server restart.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/watch/watch-changes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pg_reload_conf();\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Commands to clone the Permify SDK samples repository and navigate to the Java REST implementation directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/rest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/java/rest\n```\n\n----------------------------------------\n\nTITLE: Fly.io Launch Command Output\nDESCRIPTION: Example output from the fly launch command showing default configuration options\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nfly launch\n\n# output for basic configuration:\n#\n# Organization: Your Organization            (fly launch defaults to the personal org)\n# Name:         permify-fly-deploy           (derived from your directory name)\n# Region:       Los Angeles, California (US) (this is the fastest region for you)\n# App Machines: shared-cpu-1x, 1GB RAM       (most apps need about 1GB of RAM)\n# Postgres:     <none>                       (not requested)\n# Redis:        <none>                       (not requested)\n# Tigris:       <none>                       (not requested)\n```\n\n----------------------------------------\n\nTITLE: Testing Circular References in Permify Schema\nDESCRIPTION: This code tests validation of circular relation references in a schema. It creates a schema with relations that form a circular dependency (user->manager->director->user), then verifies that the validation correctly identifies this circular reference pattern.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/azure.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestValidateSchemaDefinitionWithCircularReference(t *testing.T) {\n\tdef := &base.SchemaDefinition{\n\t\tEntityTypes: map[string]*base.EntityType{\n\t\t\t\"organization\": {},\n\t\t\t\"repository\": {},\n\t\t\t\"team\": {},\n\t\t\t\"user\": {\n\t\t\t\tRelations: map[string]*base.Relation{\n\t\t\t\t\t\"manager\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"user\",\n\t\t\t\t\t\t\t\tRelation: \"director\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"director\": {\n\t\t\t\t\t\tRelationReferences: []*base.RelationReference{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:     \"user\",\n\t\t\t\t\t\t\t\tRelation: \"manager\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\terr := ValidateSchemaDefinition(def)\n\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"relation reference graph contains a cycle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes and Relationships in Go using Permify Client\nDESCRIPTION: This Go code demonstrates how to create both a relational tuple and an attribute in a single request using Permify's client. It creates a document editor relationship and sets a boolean attribute for document privacy.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Convert the wrapped attribute value into Any proto message\nvalue, err := anypb.New(&v1.BooleanValue{\n    Data: true,\n})\nif err != nil {\n\t// Handle error\n}\n\ncr, err := client.Data.Write(context.Background(), &v1.DataWriteRequest{\n    TenantId: \"t1\",,\n    Metadata: &v1.DataWriteRequestMetadata{\n        SchemaVersion: \"\",\n    },\n\tTuples: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Relation: \"editor\",\n            Subject:  &v1.Subject{\n\t\tType: \"user\",\n\t\tId:   \"1\",\n\t\t\tRelation: \"\",\n\t\t},\n        },\n    },\n    Attributes: []*v1.Attribute{\n        {\n            Entity: &v1.Entity{\n                Type: \"document\",\n                Id:   \"1\",\n            },\n            Attribute: \"is_private\",\n            Value:     value,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Data with cURL\nDESCRIPTION: Example showing how to create an attribute using cURL where document:1 has a boolean attribute 'is_private' set to true. This directly calls the Permify API endpoint to write the attribute data.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_8\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location --request POST 'localhost:3476/v1/tenants/{tenant_id}/data/write' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n{\n    \"metadata\": {\n        \"schema_version\": \"\"\n    },\n    \"attributes\": [\n        {\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": {\n                \"@type\": \"type.googleapis.com/base.v1.BooleanValue\",\n                \"data\": true\n            }\n        }\n    ]\n}\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Permify with Docker\nDESCRIPTION: Command to run Permify using Docker with default configuration. This sets up a Permify server using SQLite as the database.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/instagram.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 ghcr.io/permify/permify serve\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Docker Compose\nDESCRIPTION: Step-by-step instructions for installing Docker and Docker Compose on the server. Includes setting up the Docker repository, installing Docker Engine, and downloading Docker Compose.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install Docker\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo apt-get update\nsudo apt-get install -y docker-compose-plugin\n\n# Verify Docker installation\ndocker --version\ndocker compose version\n```\n\n----------------------------------------\n\nTITLE: Installing Permify\nDESCRIPTION: Command to install Permify using Helm Charts\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/helm.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install permify permify/permify\n```\n\n----------------------------------------\n\nTITLE: Defining Tracer Configuration Structure in YAML\nDESCRIPTION: This snippet shows the structure of the tracer configuration in YAML format. It includes settings for the exporter, endpoint, enabled flag, insecure flag, and URL path.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n├── tracer\n|   ├── exporter\n|   ├── endpoint\n|   ├── enabled\n|   ├── insecure\n|   ├── urlpath\n```\n\n----------------------------------------\n\nTITLE: Running Typescript Application\nDESCRIPTION: Command to execute the create_tenant.ts script using ts-node.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/rest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nts-node create_tenant.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Permify Maven Dependency\nDESCRIPTION: Maven dependency configuration for including Permify SDK in a Java project's pom.xml file.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/rest/README.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>co.permify</groupId>\n  <artifactId>permify</artifactId>\n  <version>0.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Filtering Schema Attributes using SQL in Go\nDESCRIPTION: Generates a SQL query to filter schema attributes based on given criteria. The function builds a parameterized query with filters for tables, entity types, and schema versions, returning the attribute records and any query errors.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases/multi-tenancy.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *sqlStorage) FilterAttributes(ctx context.Context, filter *v1.AttributeFilter, opts ...pagination.Option) ([]*base.AttributeFilter, *pagination.PageToken, error) {\n\tquery := `\n\t\tSELECT entity_type, attribute, schema_version\n\t\tFROM $1\n\t\tWHERE 1=1\n\t\t$2\n\t\t$3\n\t\t$4\n\t\tORDER BY entity_type, attribute, schema_version\n\t\t$5\n\t`\n\n\ttable := s.attributeTable()\n\n\targs := make([]interface{}, 0, 10)\n\targs = append(args, table)\n\n\tentityTypeFilter := \"\"\n\tif filter.GetEntityType() != \"\" {\n\t\tentityTypeFilter = \"AND entity_type = $\"\n\t\targs = append(args, filter.GetEntityType())\n\t\tentityTypeFilter = fmt.Sprintf(entityTypeFilter, len(args))\n\t}\n\n\tattributeFilter := \"\"\n\tif filter.GetAttribute() != \"\" {\n\t\tattributeFilter = \"AND attribute = $\"\n\t\targs = append(args, filter.GetAttribute())\n\t\tattributeFilter = fmt.Sprintf(attributeFilter, len(args))\n\t}\n\n\tschemaVersionFilter := \"\"\n\tif filter.GetSchemaVersion() != \"\" {\n\t\tschemaVersionFilter = \"AND schema_version = $\"\n\t\targs = append(args, filter.GetSchemaVersion())\n\t\tschemaVersionFilter = fmt.Sprintf(schemaVersionFilter, len(args))\n\t}\n\n\tpag := pagination.NewPaginator(opts...)\n\n\ttokenFilter := \"\"\n\tif pag.GetToken() != nil {\n\t\ttoken := pag.GetToken()\n\t\ttokenFilter = \"LIMIT $\"\n\t\targs = append(args, token.Limit)\n\t\ttokenFilter = fmt.Sprintf(tokenFilter, len(args))\n\t}\n\n\tquery = strings.Replace(query, \"$1\", \"$1\", 1)\n\tquery = strings.Replace(query, \"$2\", entityTypeFilter, 1)\n\tquery = strings.Replace(query, \"$3\", attributeFilter, 1)\n\tquery = strings.Replace(query, \"$4\", schemaVersionFilter, 1)\n\tquery = strings.Replace(query, \"$5\", tokenFilter, 1)\n\n\trows, err := s.db.QueryContext(ctx, query, args...)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"error executing the query to filter attributes: %w\", err)\n\t}\n\n\tdefer rows.Close()\n\n\tattributes := make([]*base.AttributeFilter, 0)\n\n\tfor rows.Next() {\n\t\tvar entityType, attribute, schemaVersion string\n\n\t\terr := rows.Scan(&entityType, &attribute, &schemaVersion)\n\t\tif err != nil {\n\t\t\treturn nil, nil, fmt.Errorf(\"error scanning attribute row: %w\", err)\n\t\t}\n\n\t\tattributes = append(attributes, &base.AttributeFilter{\n\t\t\tEntityType:    entityType,\n\t\t\tAttribute:     attribute,\n\t\t\tSchemaVersion: schemaVersion,\n\t\t})\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"error iterating through attribute rows: %w\", err)\n\t}\n\n\treturn attributes, pag.GetNewToken(len(attributes)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Permify Client in Node.js\nDESCRIPTION: This code creates a new Permify client instance using environment variables for connection details. It establishes a connection to the Permify service using the specified server address and TLS settings from environment variables.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/tenancy/create-tenant.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst permify = require('@permify/permify');\n\nconst client = new permify.Client({\n    // Server address e.g., localhost:3476 or permify.example.com:3476\n    serverAddress: process.env.PERMIFY_SERVER_ADDRESS,\n    // TLS configuration\n    tls: process.env.PERMIFY_TLS === 'true',\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Permify Service Connection\nDESCRIPTION: HTTP GET request to test if the Permify service is running correctly by checking the health endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/brew.mdx#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nlocalhost:3476/healthz\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud SDK\nDESCRIPTION: Commands to install and configure Google Cloud SDK with PATH setup and initialization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI\nDESCRIPTION: Command to start AWS CLI configuration process where user needs to input access credentials\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Running Permify Java Application\nDESCRIPTION: Command to execute the built JAR file.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -jar target/your-artifact-name-0.0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin with Docker\nDESCRIPTION: Command to run a Zipkin server in Docker, exposing the UI on port 9411. This creates a containerized Zipkin instance that will receive and display traces from Permify.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/zipkin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Lookup Entity Scope Structure\nDESCRIPTION: Example of the new scope field structure for filtering entities by type in lookup operations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/migration/v1.0-v1.1.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scope\": {\n    \"repository\": {\n        \"data\": [\"r1\", \"r2\"]\n    },\n    \"organization\": {\n        \"data\": [\"o2\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Schema Definition Example\nDESCRIPTION: Example of defining a Permify schema directly within a YAML file\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschema: >\n  entity user {}\n  entity organization {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Access Check Configuration\nDESCRIPTION: Example of configuring an access check within test scenarios\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchecks:\n   - entity: \"repository:3\" // resource/entity that you want to check access for\n     subject: \"user:1\" // subject that performs the access check\n     context: // additional data provided during an access check to be evaluated\n       - \"repository:3#owner@user:1\" \n     assertions: // expected result/results for specific action/s or an permission/s.\n       push : true\n```\n\n----------------------------------------\n\nTITLE: Viewing Permify Service Configuration Options\nDESCRIPTION: Command to display all available configuration flags for the Permify service.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/brew.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npermify serve --help\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Package\nDESCRIPTION: Command to install the Permify Python package using pip. May require root permissions.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/rest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install permify\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Permify deployment\nDESCRIPTION: Shell command to start the Permify stack in detached mode using Docker Compose. This command runs the services defined in the docker-compose.yml file.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/reference/snap-tokens.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Profiler Configuration Structure in YAML\nDESCRIPTION: This YAML structure shows the configuration options for the performance profiler in Permify, including enabling the profiler and setting the port.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n├── profiler\n|   ├── enabled\n|   ├── port\n```\n\n----------------------------------------\n\nTITLE: Deployment Options Navigation Cards in MDX/JSX\nDESCRIPTION: React/MDX component structure for displaying various deployment options as cards with icons and links to detailed documentation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<div style={{ flex: \"1 1 calc(50% - 20px)\", margin: \"10px\" }}>\n  <Card title=\"Try Permify Locally\" icon=\"laptop\" href=\"../../getting-started/quickstart\">\n    Set up Permify instance a with single docker command in your local.\n  </Card>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resolving Constraint Configuration in Go\nDESCRIPTION: Helper function that resolves constraint configuration by either using the provided configuration or returning a default empty configuration. This ensures that the temporal comparison functions always have a valid configuration to work with.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/modeling.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc resolveConstraintConfig(constraintConfigs []types.ConstraintConfig) types.ConstraintConfig {\n\tif len(constraintConfigs) > 0 {\n\t\treturn constraintConfigs[0]\n\t}\n\treturn types.ConstraintConfig{}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aliases Method for Command Interface in Go\nDESCRIPTION: This method returns the aliases (alternative names) for the command. It's part of the ShellCommand interface implementation that allows the command to be called using shorter or alternative names.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Command) Aliases() []string {\n\treturn c.aliases\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Access Check Response from Permify Check API (JSON)\nDESCRIPTION: This snippet demonstrates the JSON structure of the response received from Permify's Check API after an access check. It includes the authorization result and metadata about the check.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"can\": \"RESULT_ALLOW\",\n  \"metadata\": {\n    \"check_count\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Name Method for Command Interface in Go\nDESCRIPTION: This method returns the name of the command. It's a part of the ShellCommand interface implementation that allows the command to be identified in the REPL system.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/enforcement.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Command) Name() string {\n\treturn c.name\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Permify using Docker\nDESCRIPTION: Command to pull the latest Permify Docker image from GitHub Container Registry.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndocker pull **ghcr.io/permify/permify:latest**\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Connection for Zipkin\nDESCRIPTION: YAML configuration for using HTTPS with Zipkin for secure trace export. This optional configuration shows how to set up a secure connection to Zipkin by setting insecure to false and using an HTTPS endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/zipkin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntracer:\n  exporter: zipkin\n  endpoint: https://your-zipkin-endpoint/api/v2/spans\n  enabled: true\n  insecure: false\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Code\nDESCRIPTION: Command to generate Protobuf code using buf tool\nSOURCE: https://github.com/Permify/permify/blob/master/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbuf generate\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgreSQL Service via Command Line\nDESCRIPTION: Bash command to reload the PostgreSQL service after modifying the configuration file, making the changes effective without a full restart.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/watch/watch-changes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo service postgresql reload\n```\n\n----------------------------------------\n\nTITLE: Validating Schema Internal Consistency in Go\nDESCRIPTION: A Go function to validate the internal consistency of a Permify schema. It iterates through entity types, relation references, and permissions to ensure all references are valid within the schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/schema/read-schema.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *SchemaService) CheckSchemaConsistency(ctx context.Context, req *v1.CheckConsistencyRequest) (*v1.CheckConsistencyResponse, error) {\n    // Creates schema object\n    sch, err := s.invoker.Call(ctx, NewCheckSchemaPrepare(req, s.schemaReader))\n    if err != nil {\n        return nil, err\n    }\n\n    // Transform schema\n    schema := sch.(*base.SchemaDefinition)\n\n    // Create consistent report\n    report := &v1.ConsistencyReport{\n        RelationErrors:   []*v1.RelationError{},\n        PermissionErrors: []*v1.PermissionError{},\n    }\n\n    // Check internal consistency per entity\n    for entityType, entity := range schema.EntityDefinitions {\n        // Check relation reference\n        for _, reference := range entity.GetRelationReferences() {\n            entityDefinition, exists := schema.EntityDefinitions[reference.GetEntityType()]\n            if !exists {\n                report.RelationErrors = append(report.RelationErrors, &v1.RelationError{\n                    EntityType: entityType,\n                    Relation:   reference.GetRelation(),\n                    Message:    fmt.Sprintf(\"relation refers to entity type '%s' which is not defined in the schema\", reference.GetEntityType()),\n                })\n                continue\n            }\n\n            relationDefinition, exists := entityDefinition.GetRelation(reference.GetRelation())\n            if !exists {\n                report.RelationErrors = append(report.RelationErrors, &v1.RelationError{\n                    EntityType: entityType,\n                    Relation:   reference.GetRelation(),\n                    Message:    fmt.Sprintf(\"relation refers to relation '%s' which is not defined in entity type '%s'\", reference.GetRelation(), reference.GetEntityType()),\n                })\n            } else {\n                if relationDefinition.GetType() != base.RelationTypeDirected {\n                    report.RelationErrors = append(report.RelationErrors, &v1.RelationError{\n                        EntityType: entityType,\n                        Relation:   reference.GetRelation(),\n                        Message:    fmt.Sprintf(\"relation refers to relation '%s.%s' which is not of type RELATION_TYPE_DIRECTED\", reference.GetEntityType(), reference.GetRelation()),\n                    })\n                }\n            }\n        }\n\n        // Check permission references\n        for _, permissionName := range entity.GetPermissions() {\n            permission, _ := entity.GetPermission(permissionName)\n\n            for _, reference := range permission.GetEntityReferences() {\n                entityDefinition, exists := schema.EntityDefinitions[reference.GetEntityType()]\n                if !exists {\n                    report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                        EntityType: entityType,\n                        Permission: permissionName,\n                        Message:    fmt.Sprintf(\"permission refers to entity type '%s' which is not defined in the schema\", reference.GetEntityType()),\n                    })\n                    continue\n                }\n\n                switch reference.GetTypeOfReference() {\n                case base.EntityReferenceTypePermission:\n                    permissionDefinition, exists := entityDefinition.GetPermission(reference.GetReference())\n                    if !exists {\n                        report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                            EntityType: entityType,\n                            Permission: permissionName,\n                            Message:    fmt.Sprintf(\"permission refers to permission '%s' which is not defined in entity type '%s'\", reference.GetReference(), reference.GetEntityType()),\n                        })\n                    } else {\n                        if permissionDefinition.HasCycle() {\n                            report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                                EntityType: entityType,\n                                Permission: permissionName,\n                                Message:    fmt.Sprintf(\"permission refers to permission '%s.%s' which has a cycle\", reference.GetEntityType(), reference.GetReference()),\n                            })\n                        }\n                    }\n                case base.EntityReferenceTypeRelation:\n                    relationDefinition, exists := entityDefinition.GetRelation(reference.GetReference())\n                    if !exists {\n                        report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                            EntityType: entityType,\n                            Permission: permissionName,\n                            Message:    fmt.Sprintf(\"permission refers to relation '%s' which is not defined in entity type '%s'\", reference.GetReference(), reference.GetEntityType()),\n                        })\n                    } else {\n                        // check referenced relation attributes\n                        if reference.GetRelationAttribute() != nil {\n                            attr := reference.GetRelationAttribute()\n                            if relationDefinition.GetType() != base.RelationTypeSetAttribute {\n                                report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                                    EntityType: entityType,\n                                    Permission: permissionName,\n                                    Message:    fmt.Sprintf(\"permission refers to relation '%s.%s' with attribute, but relation is not of type RELATION_TYPE_SET_ATTRIBUTES\", reference.GetEntityType(), reference.GetReference()),\n                                })\n                            } else if !relationDefinition.ContainsAttribute(attr.GetName()) {\n                                report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                                    EntityType: entityType,\n                                    Permission: permissionName,\n                                    Message:    fmt.Sprintf(\"permission refers to relation '%s.%s' with attribute '%s', but attribute is not defined in relation\", reference.GetEntityType(), reference.GetReference(), attr.GetName()),\n                                })\n                            }\n                        }\n                    }\n                case base.EntityReferenceTypeAttribute:\n                    attributeDefinition, exists := entityDefinition.GetAttribute(reference.GetReference())\n                    if !exists {\n                        report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                            EntityType: entityType,\n                            Permission: permissionName,\n                            Message:    fmt.Sprintf(\"permission refers to attribute '%s' which is not defined in entity type '%s'\", reference.GetReference(), reference.GetEntityType()),\n                        })\n                    } else {\n                        if attributeDefinition.GetType() != base.AttributeTypeBoolean {\n                            report.PermissionErrors = append(report.PermissionErrors, &v1.PermissionError{\n                                EntityType: entityType,\n                                Permission: permissionName,\n                                Message:    fmt.Sprintf(\"permission refers to attribute '%s.%s' which is not of type ATTRIBUTE_TYPE_BOOLEAN\", reference.GetEntityType(), reference.GetReference()),\n                            })\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return &v1.CheckConsistencyResponse{\n        ConsistencyReport: report,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Permify Dockerfile Configuration\nDESCRIPTION: Minimal Dockerfile configuration using the official Permify image\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/fly.mdx#2025-04-17_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/permify/permify:latest\n```\n\n----------------------------------------\n\nTITLE: Building Permify Java Project\nDESCRIPTION: Maven command to clean and install the SDK project.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Typescript Package\nDESCRIPTION: NPM command to install the Permify Typescript package as a dependency.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/rest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install permify-typescript\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Node Package (Shell)\nDESCRIPTION: npm commands to set the Buf registry and install the Permify Node package.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm config set @buf:registry https://buf.build/gen/npm/v1/\nnpm install @permify/permify-node\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSL Certificate with Certbot\nDESCRIPTION: Uses Certbot to obtain and install an SSL certificate for the domain. The certificate enables HTTPS connections and Certbot automatically configures Nginx to use the certificate.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot --nginx -d domain.name\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JavaScript Libraries (JSON)\nDESCRIPTION: JSON configuration for tsconfig.json to allow running JavaScript libraries in a TypeScript project.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n      \"allowJs\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Permify Schema Syntax in Go\nDESCRIPTION: This function validates the syntax of a Permify schema definition. It checks for proper formatting and structure of the schema file.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/comparision.md#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Validate(schema string) error {\n\tschema = strings.TrimSpace(schema)\n\n\tif schema == \"\" {\n\t\treturn errors.New(\"empty schema\")\n\t}\n\n\t_, err := parser.NewParser(strings.NewReader(schema)).Parse()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid schema: %w\", err)\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Permify Docker Image URI for ECS Task Definition\nDESCRIPTION: YAML snippet defining the Docker image URI for Permify, used in the ECS task definition to specify the container image to be deployed.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/aws.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nghcr.io/permify/permify:latest\n```\n\n----------------------------------------\n\nTITLE: Building Permify Java Project\nDESCRIPTION: Maven command to clean and install the SDK dependencies.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/rest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Running Permify Server Command\nDESCRIPTION: Command to build and run a local Permify instance for schema validation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/instagram.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Go SDK\nDESCRIPTION: Command to add Permify SDK as a dependency to your Go project.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/go/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/Permify/permify-go/v1\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify development server\nDESCRIPTION: Command to start the Mintlify development server in the directory containing mint.json. This makes the documentation available at http://localhost:3000.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Commands to clone the Permify SDK samples repository and navigate to the Python gRPC example directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/python/grpc\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Samples Repository\nDESCRIPTION: Commands to clone the Permify SDK samples repository and navigate to the Javascript gRPC example directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/javascript/grpc\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Tuple with Write Data API in Node.js\nDESCRIPTION: This Node.js code snippet shows how to use the Write Data API to create a relational tuple representing document ownership.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/sync-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.data.write({\n    tenantId: \"t1\",\n    metadata: {\n        schemaVersion: \"\"\n    },\n    tuples: [{\n        entity: {\n            type: \"document\",\n            id: \"2\"\n        },\n        relation: \"owner\",\n        subject: {\n            type: \"user\",\n            id: \"1\"\n        }\n    }]\n}).then((response) => {\n    // handle response\n})\n```\n\n----------------------------------------\n\nTITLE: Installing eksctl via Homebrew\nDESCRIPTION: Commands to install eksctl tool using Homebrew package manager\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nbrew tap weaveworks/tap\n```\n\nLANGUAGE: jsx\nCODE:\n```\nbrew install weaveworks/tap/eksctl\n```\n\n----------------------------------------\n\nTITLE: Building Permify Playground for Production\nDESCRIPTION: Command to create an optimized production build of the playground\nSOURCE: https://github.com/Permify/permify/blob/master/playground/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Starting Permify Playground Development Server\nDESCRIPTION: Commands to start the playground in development mode using yarn or make\nSOURCE: https://github.com/Permify/permify/blob/master/playground/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake serve-playground\n```\n\n----------------------------------------\n\nTITLE: Running Permify Application\nDESCRIPTION: Command to run the Permify application using Go.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/go/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo run create_tenant.go\n```\n\n----------------------------------------\n\nTITLE: Permify Service Manifest\nDESCRIPTION: YAML configuration for creating a Kubernetes service with LoadBalancer type\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: permify\nspec:\n  ports:\n      - name: 3476-tcp\n        port: 3476\n        protocol: TCP\n        targetPort: 3476\n  selector:\n        app: permify\n  type: LoadBalancer\nstatus:\n  loadBalancer: {}\n```\n\n----------------------------------------\n\nTITLE: Adding Go Dependencies\nDESCRIPTION: Command to add new dependencies to the project using Go modules\nSOURCE: https://github.com/Permify/permify/blob/master/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/org/newdependency@version\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI using npm\nDESCRIPTION: Command to install the Mintlify CLI globally using npm package manager. This is required to preview documentation locally.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Installing Permify JavaScript Package\nDESCRIPTION: NPM command to install the Permify JavaScript package as a dependency.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/rest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install permify-javascript\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Node Package\nDESCRIPTION: Commands to set up the npm registry for Buf and install the Permify Node package.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm config set @buf:registry https://buf.build/gen/npm/v1/\nnpm install @permify/permify-node\n```\n\n----------------------------------------\n\nTITLE: Configuring UFW Firewall Rules\nDESCRIPTION: Sets up the Uncomplicated Firewall (UFW) with rules to allow SSH, HTTP, and HTTPS traffic while blocking other incoming connections for security. Includes enabling the firewall after configuration.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw enable\n```\n\n----------------------------------------\n\nTITLE: Running Permify Java Application\nDESCRIPTION: Command to run the compiled Java application JAR file.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/rest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -jar target/your-artifact-name-0.0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server in the root directory of your documentation where mint.json is located. This allows you to preview changes locally.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Running Permify Application\nDESCRIPTION: Command to execute the create_tenant.py script that implements Permify functionality.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/grpc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 create_tenant.py\n```\n\n----------------------------------------\n\nTITLE: Creating Permission with Rewrite Rules in Go\nDESCRIPTION: This snippet shows how to create a permission with rewrite rule functionality in Permify. It defines a 'view' permission on a 'document' entity that includes a rewrite rule referencing a 'parent' entity's permission, demonstrating permission inheritance.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"viewer\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t\tentity.NewRelation(\"parent\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"folder\",\n\t\t\t}),\n\t\t},\n\t\tnil,\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"view\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperation: entity.Operation_UNION,\n\t\t\t\t\tChildren: []*entity.ComputedUserset{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"viewer\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"parent\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{},\n\t\t\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\t\t\tOperand: entity.UsersetRewrite{\n\t\t\t\t\t\t\t\t\t\t\t\tRewrite: entity.RewritePermission{\n\t\t\t\t\t\t\t\t\t\t\t\t\tPermission: \"view\",\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Format\nDESCRIPTION: Demonstrates the format for conventional commit messages used in the project, following the conventional commits specification\nSOURCE: https://github.com/Permify/permify/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<type>(optional scope): <description>\n```\n\n----------------------------------------\n\nTITLE: Running Permify Application\nDESCRIPTION: Command to execute the tenant creation TypeScript file.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/rest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode create_tenant.ts\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Samples Repository (Shell)\nDESCRIPTION: Shell commands to clone the Permify SDK samples repository and navigate to the Typescript gRPC directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/typescript/grpc\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI with npm\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This allows you to preview documentation changes locally.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Running Permify Server with Docker\nDESCRIPTION: Command to run the Permify server using Docker, exposing port 3476.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/kubernetes.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3476:3476 permify/permify:latest server\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for AWS EC2 Connection\nDESCRIPTION: Creates an SSH configuration entry for connecting to AWS EC2 instances, specifying the host, hostname, user, and identity file to use. This simplifies future SSH connections to the server.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim ~/.ssh/config\n\n# Content to add to the SSH config file\nHost aws\n  Hostname ec2-X-X-X-X.us-east-2.compute.amazonaws.com\n  User ubuntu\n  IdentityFile ~/.ssh/aws\n```\n\n----------------------------------------\n\nTITLE: Running Permify Application\nDESCRIPTION: Command to execute the create_tenant.py script using Python 3.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/rest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython3 create_tenant.py\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Command\nDESCRIPTION: Command to run all tests in the Permify codebase using Go test runner. Requires Go version 1.19 or higher.\nSOURCE: https://github.com/Permify/permify/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: DSL Context Implementation - Permify v1.0\nDESCRIPTION: Example showing how context data was accessed in v1.0 using request.field_name syntax in permission rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/migration/v1.0-v1.1.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(request.amount, balance) and owner\n}\n\nrule check_balance(amount double, balance double) {\n    (balance >= amount) && (amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Commands to clone the Permify SDK samples repository and navigate to the Python REST example directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/rest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/python/rest\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Full Access\nDESCRIPTION: This snippet configures the robots.txt file to allow all user agents full access to the website. It uses the 'User-agent: *' directive to target all robots and does not specify any 'Disallow' rules.\nSOURCE: https://github.com/Permify/permify/blob/master/playground/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Application (Shell)\nDESCRIPTION: Shell command to run a TypeScript application using ts-node.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/typescript/grpc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nts-node create_tenant.ts\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly for Permify Playground\nDESCRIPTION: Command to build the play.wasm file required for the playground\nSOURCE: https://github.com/Permify/permify/blob/master/playground/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake wasm-build\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Exclusion-based Permission in Go\nDESCRIPTION: This snippet shows how to implement an exclusion-based permission in Permify. It defines a 'view' permission that is granted to viewers of a document, except when the document is marked as private. This demonstrates implementing conditional access controls based on document attributes.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/lookup-entity.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nSchemaBuilder{}.BuildSchema(\n\tentity.NewEntityDefinition(\n\t\t\"document\",\n\t\t[]*entity.Relation{\n\t\t\tentity.NewRelation(\"viewer\", entity.EntityAndRelation{\n\t\t\t\tEntity: \"user\",\n\t\t\t}),\n\t\t},\n\t\t[]*entity.Attribute{\n\t\t\tentity.NewAttribute(\"private\", entity.EntityAttributes_BOOLEAN),\n\t\t},\n\t\t[]*entity.Permission{\n\t\t\tentity.NewPermission(\n\t\t\t\t\"view\",\n\t\t\t\tentity.ComputedUserset{\n\t\t\t\t\tOperation: entity.Operation_EXCLUSION,\n\t\t\t\t\tChildren: []*entity.ComputedUserset{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\tRelation: \"viewer\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOperand: entity.UsersetExpression{\n\t\t\t\t\t\t\t\tOperand: entity.TupleToUserset{\n\t\t\t\t\t\t\t\t\tTupleset: entity.TuplesetRelation{\n\t\t\t\t\t\t\t\t\t\tRelation: \"viewer\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tComputedUserset: entity.ComputedUserset{\n\t\t\t\t\t\t\t\t\t\tOperand: entity.DirectUserset{},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tExpression: entity.Expression{\n\t\t\t\t\t\t\t\t\tAttribute: \"private\",\n\t\t\t\t\t\t\t\t\tOperator: entity.Expression_EQUALS,\n\t\t\t\t\t\t\t\t\tBooleanValue: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t},\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests with Coverage\nDESCRIPTION: Command for running Go unit tests with coverage reporting, excluding vendor directory and skipping integration tests.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/reference/configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -coverprofile=cover.out -covermode=atomic ./... -short\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Data API Endpoint in OpenAPI Specification\nDESCRIPTION: This snippet defines the OpenAPI specification for the DELETE data endpoint. It specifies the HTTP method as POST and the path including the tenant_id parameter.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/delete-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Delete Data\nopenapi: post /v1/tenants/{tenant_id}/data/delete\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Repository\nDESCRIPTION: Commands to clone and navigate to the Permify SDK samples repository.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/grpc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/java/grpc\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify Service with YAML Configuration File\nDESCRIPTION: Commands to run the Permify service using a YAML configuration file instead of command-line flags.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/brew.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npermify serve -c=config.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Permify Playground Tests\nDESCRIPTION: Command to launch the test runner in interactive watch mode\nSOURCE: https://github.com/Permify/permify/blob/master/playground/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: POST API Endpoint for Writing Authorization Data\nDESCRIPTION: The endpoint path for writing authorization data to Permify. This endpoint can be used for creating both relation tuples and attribute data.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n POST /v1/tenants/{tenant_id}/data/write\n```\n\n----------------------------------------\n\nTITLE: Resulting Updated Schema in JSON\nDESCRIPTION: This snippet shows the updated schema after processing the partial update request, including new permissions and relations for the team entity.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/schema/partial-write.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity team {\n    relation owner @user\n    relation member @user\n    relation org @organization\n\n    permission delete = member\n    permission invite = org.admin and (owner or member)\n    permission remove_user = owner\n}\n```\n\n----------------------------------------\n\nTITLE: Port already in use error message\nDESCRIPTION: Error message displayed when trying to run Mintlify on a port that is already being used by another process.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nError: listen EADDRINUSE: address already in use :::3000\n```\n\n----------------------------------------\n\nTITLE: Test Scenario Structure\nDESCRIPTION: JavaScript object structure showing the format for defining test scenarios\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/testing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscenarios:\n  - name: // name of the scenario\n    description: // description of the scenario\n    checks: // simple access check case/cases\n    entity_filters: // entity (data) filtering query/queries\n    subject_filters: // subject filtering query/queries\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Snapshot for Write Transactions in Go\nDESCRIPTION: A method that prepares a schema snapshot for write operations. It loads the schema definition for the current tenant and context, which is used for validating write operations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) snapshotWriteTx(ctx context.Context, tx database.Tx, metadata *base.Metadata) (*base.Snapshot, error) {\n\t// Set Tenant ID\n\tvar tenantID string\n\tvar schemaVersion string\n\n\tif metadata != nil {\n\t\ttenantID = metadata.GetTenantId()\n\t\tschemaVersion = metadata.GetSchemaVersion()\n\t}\n\n\t// Create schema snapshot with tenant id and schema version\n\tschema, found, err := s.db.ReadSchema(ctx, tx, tenantID, schemaVersion)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !found {\n\t\treturn nil, v1.NewSchemaNotFoundError(tenantID, schemaVersion)\n\t}\n\n\treturn &base.Snapshot{\n\t\tSchema:        schema,\n\t\tTenantID:      tenantID,\n\t\tSchemaVersion: schema.GetVersion(),\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Permify Connection\nDESCRIPTION: This curl command tests the connection to the Permify service by sending a GET request to the health check endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlocalhost:3476/healthz\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify on a custom port\nDESCRIPTION: Command to start Mintlify on a specific port rather than the default port 3000. This example uses port 3333.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev --port 3333\n```\n\n----------------------------------------\n\nTITLE: Deleting Tuples from Permission System in Go\nDESCRIPTION: A method for deleting permission tuples from the system based on filters. It handles database transactions, entity filtering, and manages changesets for deleted records.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) Delete(ctx context.Context, request *v1.DeleteRequest) (*v1.DeleteResponse, error) {\n\tctx, span := s.tracer.Start(ctx, \"permify.api.service.Delete\")\n\tdefer span.End()\n\n\t// Start database transaction\n\ttx, err := s.db.BeginTx(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer func() {\n\t\terr = s.db.RollbackTx(ctx, tx, err)\n\t}()\n\n\tsnap, err := s.snapshotWriteTx(ctx, tx, request.Metadata)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// prepare filter\n\tfilter := s.createFilter(request)\n\n\tentityReferences, err := s.extractEntityReferencesFromFilters(filter)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = s.filterSuspended(ctx, tx, entrypoints.CollectURLs(entityReferences...), snap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// read tuples before deleting to get a log\n\ttuples, _, err := s.db.ReadTuples(ctx, tx, filter, \"\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// delete tuples\n\terr = s.db.DeleteTuples(ctx, tx, filter)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// get change logs\n\tchangelogs, err := tuple.GetChangelogs(tuple.DataDelete, tuples)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Write changeLog into database and send changes to notifier\n\terr = s.db.WriteChangelog(ctx, tx, changelogs, snap.TenantID, s.notifier)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = s.db.CommitTx(ctx, tx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &v1.DeleteResponse{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Permify Server Connection\nDESCRIPTION: HTTP GET request to test the connection to the Permify server running in a Docker container.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/container.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nlocalhost:3476/healthz\n```\n\n----------------------------------------\n\nTITLE: Defining Actions for Account Withdrawals\nDESCRIPTION: Introduces the withdraw action for account entities, building upon the previously defined entities and relations for Mercury's authorization schema.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/mercury.mdx#2025-04-17_snippet_2\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n    relation admin @user\n    relation member @user\n}\n\nentity account {\n\n    relation checkings @account\n    relation savings @account\n\n    relation org @organization\n\n    action withdraw =\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Deployment Manifest\nDESCRIPTION: Command to apply the Kubernetes deployment configuration\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Meter Configuration Structure in YAML\nDESCRIPTION: This snippet outlines the structure of the meter configuration in YAML format. It includes settings for the exporter, endpoint, enabled flag, insecure flag, and URL path.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n├── meter\n|   ├── exporter\n|   ├── endpoint\n|   ├── enabled\n|   ├── insecure\n|   ├── urlpath\n```\n\n----------------------------------------\n\nTITLE: Running Permify Validation Command\nDESCRIPTION: Docker command to run the Permify validation using the created YAML file.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndocker run -v {your_config_folder}:/config **ghcr.io/permify/permify-beta:latest validate /config/validation.yaml**\n```\n\n----------------------------------------\n\nTITLE: Verifying Access Token with Permify SDK in Go\nDESCRIPTION: This code snippet demonstrates how to verify an access token using the Permify SDK, which handles validation internally and returns the decoded access token.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/bundle/read-bundle.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/permify/permify-go/token\"\n)\n\nfunc main() {\n    // The secret key and access token\n    tokenValue := \"YOUR_TOKEN\"\n    secretKey := \"YOUR_SECRET_KEY\"\n\n    // Verify token\n    verifiedToken, err := token.VerifyAccessToken(tokenValue, secretKey)\n    if err != nil {\n        // Handle error\n    }\n\n    // Use the token attributes\n    tenantID := verifiedToken.Attributes[\"tenant_id\"]\n    env := verifiedToken.Attributes[\"env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Package Manager Installation Commands\nDESCRIPTION: Various package manager commands for installing Helm across different platforms\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/helm.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install helm\n```\n\nLANGUAGE: bash\nCODE:\n```\nchoco install kubernetes-helm\n```\n\nLANGUAGE: bash\nCODE:\n```\nscoop install helm\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install helm --classic\n```\n\n----------------------------------------\n\nTITLE: Creating Attributes and Relationships in Python using Permify Client\nDESCRIPTION: This Python code demonstrates how to create both a relational tuple and an attribute in a single request using Permify's Python client. It creates a document editor relationship and sets a boolean attribute for document privacy.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/data/write-data.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nboolean_value = BooleanValue.from_json({\"data\": True})\n\nvalue = Any.from_json({\n    \"typeUrl\": 'type.googleapis.com/base.v1.BooleanValue',\n    \"value\": BooleanValue.encode(boolean_value).finish()\n})\n\nwith permify.ApiClient(configuration) as api_client:\n    api_instance = permify.DataApi(api_client)\n    tenant_id = 't1'\n\n    body = permify.DataWriteRequest(\n        tenant_id=tenant_id,\n        metadata={\"schemaVersion\": \"\"},\n        tuples=[{\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"relation\": \"editor\",\n            \"subject\": {\n                \"type\": \"user\",\n                \"id\": \"1\"\n            },\n        }],\n        attributes=[{\n            \"entity\": {\n                \"type\": \"document\",\n                \"id\": \"1\"\n            },\n            \"attribute\": \"is_private\",\n            \"value\": value,\n        }]\n    )\n```\n\n----------------------------------------\n\nTITLE: Specifying Context Data in Permify Validation YAML\nDESCRIPTION: Example of specifying context data in the validation YAML file, which can be accessed in the model using 'request.key'.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/use-cases/abac.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncontext:\n  tuples: []\n  attributes: []\n  data:\n    day_of_week: \"saturday\"\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Script\nDESCRIPTION: Downloads and executes the Helm installation script\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/helm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod 700 get_helm.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Setting up JavaScript API Client for Permify Cloud Integration\nDESCRIPTION: Code for initializing the Permify API client in JavaScript, configuring the endpoint and adding the API key as an authorization header.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest SDK for Javascript\nconst permify = require('permify-javascript');\nconst apiClient = new permify.ApiClient(\"<your-permify-endpoint>:3476\");\napiClient.defaultHeaders = {'Authorization': \"Bearer <your-permify-api-key>\"};\n```\n\n----------------------------------------\n\nTITLE: Cloning Permify SDK Sample Repository\nDESCRIPTION: Command to clone the Permify SDK samples repository and navigate to the JavaScript REST implementation directory.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/javascript/rest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ucatbas/permify-sdk-samples.git\ncd permify-sdk-samples/javascript/rest\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Deployment\nDESCRIPTION: Creates a .env file with required environment variables for the application deployment. Includes settings for the database connection, API token, and other application-specific configurations.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvim .env\n\n# Content for the .env file\nPERMIFY_DATABASE_READ_WRITE_URL=postgres://postgres:postgres@postgres:5432/permify?sslmode=disable\nPERMIFY_DATABASE_READ_ONLY_URLS=postgres://postgres:postgres@postgres:5432/permify?sslmode=disable\nPERMIFY_AUTH_TOKEN=token\nPERMIFY_WATCH_ENABLED=false\nPERMIFY_WATCH_DATABASE_URL=postgres://postgres:postgres@watch:5432/permify?sslmode=disable\nPERMIFY_WATCH_DATABASE_REFRESH_INTERVAL=5s\nPERMIFY_WATCH_DATABASE_PING_INTERVAL=10s\nPERMIFY_PROFILER_ENABLED=false\nPERMIFY_API_ENABLED=true\nPERMIFY_PLAYGROUND_ENABLED=true\nPERMIFY_DASHBOARD_ENABLED=true\nPERMIFY_DASHBOARD_GITHUB_URL=https://github.com/Permify/permify\n```\n\n----------------------------------------\n\nTITLE: Implementing Permify gRPC Client\nDESCRIPTION: Java code example showing how to create and use a Permify gRPC client for tenant creation. Demonstrates channel creation, stub initialization, request building, and proper cleanup.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/grpc/README.md#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  // Create the channel\n  ManagedChannel channel = ManagedChannelBuilder.forAddress(\"127.0.0.1\", 3478).usePlaintext().build();\n\n  try {\n      // Create the blocking stub\n      TenancyGrpc.TenancyBlockingStub blockingStub = TenancyGrpc.newBlockingStub(channel);\n\n      String timeStamp = new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\").format(new Date());\n      TenantCreateRequest req = TenantCreateRequest.newBuilder()\n              .setId(\"tenant_\" + timeStamp)\n              .setName(\"tenant id name\")\n              .build();\n\n      TenantCreateResponse response = blockingStub.create(req);\n      System.out.println(response);\n\n  } finally {\n      // Gracefully shutdown the channel\n      try {\n          channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException e) {\n          e.printStackTrace();\n          channel.shutdownNow();\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Extracting Entity References from Tuples in Go\nDESCRIPTION: A helper method that extracts entity references from a collection of tuples. It processes both entity and subject components to build a comprehensive list of all entity references.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/installation/aws.md#2025-04-17_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (s *Service) extractEntityReferencesFromTuples(tuples []*base.Tuple) ([]*base.EntityReference, error) {\n\tentityReferences := make([]*base.EntityReference, 0, len(tuples)*2)\n\n\tfor _, t := range tuples {\n\t\t// Extract entity reference from entity\n\t\tentityReference, err := (&base.EntityReference{}).FromString(t.GetEntity())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tentityReferences = append(entityReferences, entityReference)\n\n\t\t// Extract entity reference from subject if subject type is entity\n\t\tsubjectReference := t.GetSubject()\n\t\tif subjectID, ok := subjectReference.GetRef().(*base.SubjectReference_EntityRef); ok {\n\t\t\tentityReference, err := (&base.EntityReference{}).FromString(subjectID.EntityRef)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tentityReferences = append(entityReferences, entityReference)\n\t\t}\n\t}\n\n\treturn entityReferences, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeScript API Client for Permify Cloud Integration\nDESCRIPTION: Code for initializing the Permify API client in TypeScript, configuring the endpoint and adding the API key as an authorization header.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest SDK for Typescript\nimport * as permify from 'permify-typescript';\nconst apiClient = new permify.ApiClient(\"<your-permify-endpoint:3476>\");\napiClient.defaultHeaders = {'Authorization': \"Bearer <your-permify-api-key>\"};\n```\n\n----------------------------------------\n\nTITLE: Updating Mintlify CLI using yarn\nDESCRIPTION: Command to update the Mintlify CLI to the latest version using yarn. This ensures your local preview matches the production environment.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn global upgrade mintlify\n```\n\n----------------------------------------\n\nTITLE: Inserting Schema into Permify using Java SDK\nDESCRIPTION: This code demonstrates how to insert the example schema into Permify using the Java SDK and the Write Schema API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Rest SDK for Java\nimport org.permify.api.SchemaApi;\nimport org.permify.model.SchemasWriteRequest;\nimport org.permify.model.SchemaWriteResponse;\n\nSchemaApi schemaApi = new SchemaApi(apiClient); // previously created apiClient\ntry {\n    SchemasWriteRequest req = new SchemasWriteRequest();\n    req.setSchema(\"entity user {}\\n\\nentity organization {\\n    relation admin @user\\n    relation member @user\\n}\\n\\nentity repository {\\n    relation parent @organization\\n    relation owner @user\\n    \\n    permission edit = parent.admin or owner\\n    permission delete = owner\\n}\");\n    schemaApi.schemasWrite(\"t1\", req);\n} catch (Exception e) {\n    System.out.println(\"Error occurred: \" + e.getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Schema into Permify using Python SDK\nDESCRIPTION: This code shows how to insert the example schema into Permify using the Python SDK and the Write Schema API.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/end-to-end-example.mdx#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Rest SDK for Python\nschema = \"entity user {}\\n\\nentity organization {\\n    relation admin @user\\n    relation member @user\\n}\\n\\nentity repository {\\n    relation parent @organization\\n    relation owner @user\\n    \\n    permission edit = parent.admin or owner\\n    permission delete = owner\\n}\"\nbody = permify.SchemaWriteBody(schema=schema)\ntry:\n    response = api_instance.schemas_write(\"t1\", body)\n    pprint(response)\nexcept ApiException as e:\n    print(\"Exception when inserting schema: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Starting the Application with Docker Compose\nDESCRIPTION: Commands to build and start the application using Docker Compose. This sets up the entire application stack including the Permify service, database, and any other required components.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Hostname\nDESCRIPTION: Commands to configure the server's hostname to match the domain name. This includes updating the hostname file and hosts file to ensure proper system identification.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo hostnamectl set-hostname domain.name\nsudo vim /etc/hosts\n# Add the line below to the hosts file\n127.0.0.1 domain.name\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swagger Endpoints in API Gateway Server\nDESCRIPTION: This code initializes Swagger routes for the Permify API server. It registers endpoints for the Swagger documentation UI and JSON specification, providing developers with access to interactive API documentation.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/use-cases.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Server) setupDocs() {\n\ts.router.Handle(\"/api/v1/docs\", s.swaggerHandler())\n\ts.router.HandleFunc(\"/api/v1/swagger.json\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tio.Copy(w, strings.NewReader(swagger.PdpAPISwagger))\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Location-Based Access Control Implementation in Permify\nDESCRIPTION: Demonstrates implementing location-based access control using string array attributes. The organization entity includes a location attribute and defines view permission based on location check or admin status.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/modeling-guides/abac/text-object-based-conditions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity organization {\n\trelation admin @user\n\n\tattribute location string[]\n\n\tpermission view = check_location(location) or admin\n}\n\nrule check_location(location string[]) {\n\tcontext.data.current_location in location\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nginx Configuration for the Application\nDESCRIPTION: Creates an Nginx server block configuration for the web application. This configuration sets up a reverse proxy to forward traffic to the application running on port 3476.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/api-overview/permission/expand-api.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo vim /etc/nginx/sites-available/domain.name\n\n# Content for the Nginx configuration file\nserver {\n    listen 80;\n    server_name domain.name;\n\n    location / {\n        proxy_pass http://localhost:3476;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Client with Token Auth in Go for Permify Access\nDESCRIPTION: A Go code snippet showing how to configure an HTTP client with token authentication for Permify services. It creates a secure client and attaches a token for authorization.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc tokenAuthClient() {\n    client := permify.NewClient(\n        \"localhost:3476\",\n        permify.WithHTTPClient(newHTTPClient()),\n        permify.WithToken(\"YOUR_TOKEN\"),\n    )\n\n    // ... use client\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Service Manifest\nDESCRIPTION: Command to apply the Kubernetes service configuration\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/kubernetes.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nkubectl apply -f service.yaml\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration in Permify\nDESCRIPTION: Configuration examples for setting up PostgreSQL database connections in Permify. Includes both Docker environment variable configuration and direct YAML configuration options.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/notion.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 \\\n-e PERMIFY_DATABASE_ENGINE=postgres \\\n-e PERMIFY_POSTGRES_URI=postgres://postgres:postgres@localhost:5432/permify \\\npermify/permify:latest serve\n```\n\nLANGUAGE: json\nCODE:\n```\ndatabase:\n  engine: postgres\n  postgres:\n    uri: \"postgres://postgres:postgres@localhost:5432/permify\"\n    max_open_connections: 20\n    max_idle_connections: 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring GKE Cluster\nDESCRIPTION: Commands for creating and authenticating a Google Kubernetes Engine cluster.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\ngcloud container clusters create [CLUSTER_NAME]\ngcloud container clusters get-credentials [CLUSTER_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Permify in Kubernetes with Helm Chart\nDESCRIPTION: Example of installing Permify in a Kubernetes cluster using Helm. Shows how to add the Permify Helm repository and install the chart with custom values.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/docs/getting-started/examples/instagram.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add permify https://charts.permify.co\nhelm repo update\nhelm install permify permify/permify -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Serf Distributed Configuration\nDESCRIPTION: Combined deployment and service configuration for Serf distributed setup.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/google.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: serf-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: serf\n  template:\n    metadata:\n      labels:\n        app: serf\n    spec:\n      containers:\n      - name: serf\n        image: permify/serf:v1.0\n        args: \n         - \"-node=main-serf\"\n        ports:\n        - containerPort: 7946\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: serf\nspec:\n  selector:\n    app: serf\n  ports:\n  - protocol: TCP\n    port: 7946\n    targetPort: 7946\n    name: serf\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Configuration File\nDESCRIPTION: Alternative syntax for running Permify service with a configuration file using the full flag name.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/installation/brew.mdx#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npermify serve --config=config.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Mintlify CLI using npm\nDESCRIPTION: Command to update the Mintlify CLI to the latest version using npm. This ensures your local preview matches the production environment.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Local Preview (Bash)\nDESCRIPTION: This command installs the Mintlify CLI globally using npm. The CLI is used to preview documentation changes locally.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Initializing Permify Java Client\nDESCRIPTION: Example code showing how to initialize a basic Permify API client with a base URL.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/java/rest/README.md#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  public static void main(String[] args) {\n    String baseUrl = \"http://localhost:3476\";\n    ApiClient apiClient = new ApiClient();\n    apiClient.setBasePath(baseUrl);\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Permify with Docker and displaying help\nDESCRIPTION: Command to run the Permify Docker container and display all available configuration flags.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/setting-up/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3476:3476 -p 3478:3478 ghcr.io/permify/permify --help\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Health Check Endpoint Definition\nDESCRIPTION: OpenAPI specification for a health check endpoint at /healthz path. Typically used for service monitoring and health verification.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/api-reference/health/health-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /healthz\n```\n\n----------------------------------------\n\nTITLE: Markdown Link References\nDESCRIPTION: Markdown reference-style link definitions for navigation between example documentation pages.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Google Docs]:./google-docs\n[Facebook Groups]:./facebook-groups\n[Notion]:./notion\n[Instagram]:./instagram\n[Mercury]:./mercury\n```\n\n----------------------------------------\n\nTITLE: Installing Permify Python Package\nDESCRIPTION: Command to install the Permify gRPC Python package using pip with a custom package index.\nSOURCE: https://github.com/Permify/permify/blob/master/sdk/python/grpc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m pip install permifyco-permify-grpc-python --extra-index-url https://buf.build/gen/python\n```\n\n----------------------------------------\n\nTITLE: Executing Schema Validation Command\nDESCRIPTION: Command to validate a schema file using the Permify CLI tool.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/examples/instagram.mdx#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npermify validate {path of your schema validation file}\n```\n\n----------------------------------------\n\nTITLE: DSL Context Implementation - Permify v1.1\nDESCRIPTION: Updated syntax for accessing context data in v1.1 using context.data.field_name within permission rules.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/migration/v1.0-v1.1.mdx#2025-04-17_snippet_1\n\nLANGUAGE: perm\nCODE:\n```\nentity user {}\n\nentity account {\n    relation owner @user\n    attribute balance double\n\n    permission withdraw = check_balance(balance) and owner\n}\n\nrule check_balance(balance double) {\n    (balance >= context.data.amount) && (context.data.amount <= 5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Permify Connection with HTTP GET Request\nDESCRIPTION: Shell command to test the connection to the Permify service by making an HTTP GET request to the health check endpoint.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/getting-started/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlocalhost:3476/healthz\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Dev Server for Local Preview (Bash)\nDESCRIPTION: This command starts the Mintlify development server to preview documentation changes locally. It should be run at the root of the documentation where the mint.json file is located.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing SigNoz via Docker\nDESCRIPTION: This bash script clones the SigNoz repository and runs the installation script to set up SigNoz in your environment.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/integrations/metrics/signoz.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SigNoz/signoz.git\ncd signoz/deploy/\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI using yarn\nDESCRIPTION: Command to install the Mintlify CLI globally using yarn package manager. This is an alternative to npm for installing the required CLI.\nSOURCE: https://github.com/Permify/permify/blob/master/docs/development.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add mintlify\n```"
  }
]