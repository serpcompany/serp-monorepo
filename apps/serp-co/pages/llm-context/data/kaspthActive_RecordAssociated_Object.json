[
  {
    "owner": "kaspth",
    "repo": "active_record-associated_object",
    "content": "TITLE: Declaring Associated Object in Model\nDESCRIPTION: Shows how to declare the Publisher associated object within the Post model using has_object.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_object :publisher\nend\n```\n\n----------------------------------------\n\nTITLE: Associated Object Class Definition\nDESCRIPTION: Definition of a Publisher associated object class that inherits from ActiveRecord::AssociatedObject.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post/publisher.rb\nclass Post::Publisher < ActiveRecord::AssociatedObject\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ActiveRecord Object Association in Ruby\nDESCRIPTION: Shows how to associate an object with an ActiveRecord model using has_object declaration.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ActiveRecord::Base\n  has_object :publisher\nend\n```\n\n----------------------------------------\n\nTITLE: Publisher Implementation with Transaction\nDESCRIPTION: Example implementation of a Publisher associated object with a publish method using transactions.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  def publish\n    transaction do\n      post.update! published: true\n      post.subscribers.post_published post\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Publishers Controller with Associated Objects\nDESCRIPTION: Demonstrates how to create a controller that works with Associated Objects. The controller leverages Active Model integration to find the publisher object and handle form submissions.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/post/publishers_controller.rb\nclass Post::PublishersController < ApplicationController\n  before_action :set_publisher\n\n  def new\n  end\n\n  def create\n    @publisher.publish params.expect(publisher: :toast)\n    redirect_back_or_to root_url, notice: \"Out it goes!\"\n  end\n\n  private\n    def set_publisher\n      # Associated Objects are POROs, so behind the scenes we're really doing `Post.find(…).publisher`.\n      @publisher = Post::Publisher.find(params[:id])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Associated Objects in Ruby on Rails\nDESCRIPTION: Shows how to test an Associated Object by extracting it from a model using fixtures or FactoryBot. The test verifies that the publisher object correctly updates the associated post.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# test/models/post/publisher_test.rb\nclass Post::PublisherTest < ActiveSupport::TestCase\n  # You can use Fixtures/FactoryBot to get a `post` and then extract its `publisher`:\n  setup { @publisher = posts(:one).publisher }\n  setup { @publisher = FactoryBot.build(:post).publisher }\n\n  test \"publish updates the post\" do\n    @publisher.publish\n    assert @publisher.post.reload.published?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Forms with Associated Objects in ERB Templates\nDESCRIPTION: Shows how to use form_with helper with Associated Objects in view templates. The example demonstrates how ActiveModel integration allows Associated Objects to be used with Rails form helpers.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/post/publishers/new.html.erb %>\n<%# Here `form_with` calls `url_for(@publisher)` which calls `post_publisher_path(@publisher)`. %>\n<%= form_with model: @publisher do |form| %>\n  <%= form.text_field :toast %>\n  <%= form.submit \"Publish with toast\" %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Associated Objects\nDESCRIPTION: Demonstrates how to set up Rails routes for Associated Objects using standard namespace conventions. This allows RESTful URLs for working with the Associated Objects.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :post do\n  resources :publishers\nend\n```\n\n----------------------------------------\n\nTITLE: Callback Forwarding Implementation\nDESCRIPTION: Shows how to forward callbacks from the model to the associated object with various examples.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ActiveRecord::Base\n  has_object :publisher, after_touch: true, after_create_commit: :publish,\n    before_destroy: :prevent_errant_post_destroy\nend\n\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  def publish\n  end\n\n  def after_touch\n  end\n\n  def prevent_errant_post_destroy\n    throw :abort if haha_business?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Under-the-hood Implementation\nDESCRIPTION: Demonstrates the underlying implementation of how Associated Objects work with instance variable management.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher\n  attr_reader :post\n  def initialize(post) = @post = post\nend\n\nclass Post < ApplicationRecord\n  def publisher = (@associated_objects ||= {})[:publisher] ||= Post::Publisher.new(self)\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Associated Objects with Active Job\nDESCRIPTION: Shows how Associated Objects can be passed to Active Job using GlobalID serialization. This enables background processing of methods on Associated Objects.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  class PublishJob < ApplicationJob\n    def perform(publisher) = publisher.publish\n  end\n\n  def publish_later\n    PublishJob.perform_later self # We're passing this PORO to the job!\n  end\n\n  def publish\n    # …\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the performs Macro with Associated Objects\nDESCRIPTION: Demonstrates how to use the performs macro from active_job-performs with Associated Objects to simplify job creation. This eliminates boilerplate code for common job patterns.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  performs queue_as: :important\n  performs :publish\n  performs :retract\n\n  def publish\n  end\n\n  def retract(reason:)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Comparison of performs Macro vs. Manual Job Implementation\nDESCRIPTION: Shows the equivalent manual implementation that the performs macro generates. This demonstrates how much boilerplate code the performs macro eliminates.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  # `performs` without a method defines a general job to share between method jobs.\n  class Job < ApplicationJob\n    queue_as :important\n  end\n\n  # Individual method jobs inherit from the `Post::Publisher::Job` defined above.\n  class PublishJob < Job\n    # Here's the GlobalID integration again, i.e. we don't have to do `post.publisher`.\n    def perform(publisher, *, **) = publisher.publish(*, **)\n  end\n\n  class RetractJob < Job\n    def perform(publisher, *, **) = publisher.retract(*, **)\n  end\n\n  def publish_later(*, **) = PublishJob.perform_later(self, *, **)\n  def retract_later(*, **) = RetractJob.perform_later(self, *, **)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Job Performs Pattern in Ruby\nDESCRIPTION: Demonstrates the simplified performs syntax for creating Active Job boilerplate in an ActiveRecord::AssociatedObject class. Uses performs :publish with queue configuration.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  performs :publish, queue_as: :important\n\n  def publish\n    …\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic Associated Objects with Ruby Modules\nDESCRIPTION: Shows how to share logic between different Associated Objects by using standard Ruby modules. This pattern enables code reuse while maintaining the appropriate associations.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/pricing.rb\nmodule Pricing\n  # If you need to share an `extension` across associated objects you can override `Module::included` like this:\n  def self.included(object) = object.extension do\n    # Add common integration methods onto `Account`/`User` when the module is included.\n    # See the `extension` block in the `Extending` section above for an example.\n  end\n\n  def price_set?\n    # Instead of referring to `account` or `user`, use the `record` method to target either.\n    record.price_cents.positive?\n  end\nend\n\n# app/models/account/pricing.rb\nclass Account::Pricing < ActiveRecord::AssociatedObject\n  include ::Pricing\nend\n\n# app/models/user/pricing.rb\nclass User::Pricing < ActiveRecord::AssociatedObject\n  include ::Pricing\nend\n```\n\n----------------------------------------\n\nTITLE: Using ActiveSupport::Concern with Associated Objects\nDESCRIPTION: Demonstrates how to use ActiveSupport::Concern as an alternative to standard Ruby modules for sharing logic between Associated Objects. This approach leverages Rails' concern pattern.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/pricing.rb\nmodule Pricing\n  extend ActiveSupport::Concern\n\n  included do\n    extension do\n      # Add common integration methods onto `Account`/`User` when the concern is included.\n    end\n  end\n\n  def price_set?\n    # Instead of referring to `account` or `user`, use the `record` method to target either.\n    record.price_cents.positive?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Associated Objects in ERB Templates\nDESCRIPTION: Shows how to render Associated Objects directly in view templates using Rails' partial rendering conventions. Includes examples of rendering simple objects and using fragment caching.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%# With a Post::Publisher, this renders app/views/post/publishers/_publisher.html.erb %>\n<%= render publisher %>\n\n<%# With a Post::Comment::Rating, this renders app/views/post/comment/ratings/_rating.html.erb %>\n<%= render rating %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fragment Caching with Associated Objects\nDESCRIPTION: Demonstrates how to use Rails' fragment caching with Associated Objects. The objects support proper cache key methods to enable standard caching patterns.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_14\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/post/publishers/_publisher.html.erb %>\n<%= cache publisher do %>\n  <%# More publishing specific view logic. %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Extension Block Implementation\nDESCRIPTION: Shows how to use the extension block to add multiple extensions to the Active Record model.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  extension do\n    has_many :contracts, dependent: :destroy do\n      def signed? = all?(&:signed?)\n    end\n\n    def self.with_contracts = includes(:contracts)\n\n    after_create_commit :publish_later, if: -> { contracts.signed? }\n\n    private def publish_later = publisher.publish_later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Record Extension Example\nDESCRIPTION: Demonstrates how to extend the Active Record model from within the Associated Object using record.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  record.has_many :contracts, dependent: :destroy\nend\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Object Association with Callbacks in Ruby\nDESCRIPTION: Demonstrates has_object usage with callback configurations including after_touch and before_destroy hooks.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ActiveRecord::Base\n  has_object :publisher, after_touch: true, before_destroy: :prevent_errant_post_destroy\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring performs with Advanced Options\nDESCRIPTION: Demonstrates how to use advanced configuration options with the performs macro, including queue selection, error handling, and retry policies.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nperforms :publish, queue_as: :important, discard_on: SomeError do\n  retry_on TimeoutError, wait: :exponentially_longer\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Namespaced Associated Objects in Ruby\nDESCRIPTION: Shows how to write tests for namespaced Associated Objects using both fixture and FactoryBot approaches.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Comment::RatingTest < ActiveSupport::TestCase\n  setup { @rating = posts(:one).comments.first.rating }\n  setup { @rating = FactoryBot.build(:post_comment).rating }\n\n  test \"pretty, pretty, pretty, pretty good\" do\n    assert @rating.good?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced ActiveRecord Model with Associated Object in Ruby\nDESCRIPTION: Shows how to define a namespaced Active Record model with an associated object using has_object declaration.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post/comment.rb\nclass Post::Comment < ApplicationRecord\n  belongs_to :post\n  belongs_to :creator, class_name: \"User\"\n\n  has_object :rating\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Namespaced Associated Object Class in Ruby\nDESCRIPTION: Demonstrates implementation of a namespaced Associated Object class with access to the parent record through generated methods.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post/comment/rating.rb\nclass Post::Comment::Rating < ActiveRecord::AssociatedObject\n  def good?\n    # A `comment` method is generated to access the associated comment. There's also a `record` alias available.\n    comment.creator.subscriber_of? comment.post.creator\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Expanded Active Job Implementation in Ruby\nDESCRIPTION: Shows the full equivalent implementation of the performs pattern, including job class definitions and perform_later method setup.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  class Job < ApplicationJob; end\n  class PublishJob < Job\n    queue_as :important\n\n    def perform(publisher, *arguments, **options)\n      publisher.publish(*arguments, **options)\n    end\n  end\n\n  def publish_later(*arguments, **options)\n    PublishJob.perform_later(self, *arguments, **options)\n  end\n\n  def publish\n    …\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Kredis with Associated Objects in Ruby\nDESCRIPTION: Demonstrates how to use kredis_datetime type in an Associated Object class. The example shows automatic namespacing of Kredis keys based on the parent model.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post::Publisher < ActiveRecord::AssociatedObject\n  kredis_datetime :publish_at # Uses a namespaced \"post:publishers:<post_id>:publish_at\" key.\nend\n```\n\n----------------------------------------\n\nTITLE: Traditional Concern Implementation\nDESCRIPTION: Shows the traditional ActiveSupport::Concern approach for comparison with Associated Objects pattern.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  include Published\nend\n\n# app/models/post/published.rb\nmodule Post::Published\n  extend ActiveSupport::Concern\n\n  included do\n    has_many :contracts, dependent: :destroy do\n      def signed? = all?(&:signed?)\n    end\n\n    has_object :publisher\n    after_create_commit :publish_later, if: -> { contracts.signed? }\n  end\n\n  class_methods do\n    def with_contracts = includes(:contracts)\n  end\n\n  private def publish_later = publisher.publish_later\nend\n```\n\n----------------------------------------\n\nTITLE: Adding active_job-performs to Gemfile\nDESCRIPTION: Shows how to include both the active_record-associated_object and active_job-performs gems in a Rails application's Gemfile to enable the performs macro.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"active_job-performs\"\ngem \"active_record-associated_object\"\n```\n\n----------------------------------------\n\nTITLE: Basic Active Record Model Definition\nDESCRIPTION: Initial empty Post model class definition that will be enhanced with Associated Objects.\nSOURCE: https://github.com/kaspth/active_record-associated_object/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\nend\n```"
  }
]