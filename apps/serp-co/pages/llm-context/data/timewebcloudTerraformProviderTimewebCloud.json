[
  {
    "owner": "timeweb-cloud",
    "repo": "terraform-provider-timeweb-cloud",
    "content": "TITLE: Creating Firewall and Linking Servers - Terraform\nDESCRIPTION: This Terraform code snippet creates a firewall resource named `example-firewall` and links it to two server resources. The `name` and `description` attributes define the firewall's identifying information.  The `link` blocks specify the server IDs and resource types to associate with the firewall. The expected input is a valid Terraform configuration, and the output is the creation of a firewall with the specified configuration in Timeweb Cloud.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_firewall\" \"example-firewall\" {\n  name = \"example-firewall\"\n  description = \"Some example firewall\"\n\n  link {\n    id = resource.twc_server.vds-with-preset.id\n    type = \"server\"\n  }\n\n  link {\n    id = resource.twc_server.vds-with-preset-2.id\n    type = \"server\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Server with Project Assignment in Timeweb Cloud\nDESCRIPTION: Provisions a server and assigns it to a specific project. This example references an existing project by name and creates a server with the same configuration as the previous example, but with a project assignment.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_projects\" \"example-project\" {\n  name = \"Example\"\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server with project\"\n  os_id = data.twc_os.example-os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n\n  project_id = data.twc_projects.example-project.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database with Backup Schedule in Terraform\nDESCRIPTION: Example demonstrating how to set up a PostgreSQL database with Timeweb Cloud and configure an automated backup schedule. The example includes finding an appropriate database preset, creating the database with custom configuration parameters, and setting up a monthly backup schedule.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_backup_schedule.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Setup example database for backup schedule configuration\ndata \"twc_db_preset\" \"example-db-postgres-preset\" {\n  location = \"ru-1\"\n\n  type = \"postgres\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\nresource \"twc_db_postgres\" \"example-postgres\" {\n  name = \"example_postgres\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-postgres-preset.id\n\n  autovacuum_analyze_scale_factor = 0.001\n  bgwriter_delay = 101\n  bgwriter_lru_maxpages = 102\n  deadlock_timeout = 103\n  gin_pending_list_limit = 104\n  idle_in_transaction_session_timeout = 115\n  idle_session_timeout = 106\n  join_collapse_limit = 107\n  lock_timeout = 108\n  max_prepared_transactions = 109\n  max_connections = 110\n  shared_buffers = 111\n  wal_buffers = 112\n  temp_buffers = 113\n  work_mem = 114\n\n  is_external_ip = true\n}\n\n# Configure backup schedule for example database\nresource \"twc_db_backup_schedule\" \"example-db-backup-schedule\" {\n  source_db_id = twc_db_postgres.example-postgres.id\n\n  copy_count = 5\n  creation_start_at = \"2023-02-02T00:00:00.000Z\"\n  interval = \"month\"\n  enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Provisioning Database Cluster and Instance Using Timeweb Cloud in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to select a database preset with filters like location, disk size, and price, create a MySQL database cluster with a specified preset, and provision a database instance within that cluster. Dependencies include the Timeweb Cloud Terraform provider and access to a Timeweb Cloud project. Key parameters are 'location', 'type', 'disk', and 'price_filter' for the preset selection, as well as 'preset_id' for the cluster and 'cluster_id' for the instance. Expected input is provider credentials, and the output is a configured database infrastructure on Timeweb Cloud. Limitations: instance and cluster creation depend on available presets and quota.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_instance.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Select any preset from location = \"ru-1\", 8 Gb disk space with price between 100 and 500 RUB for MySQL\ndata \"twc_database_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  type = \"mysql\"\n\n  disk = 8 * 1024\n\n  price_filter {\n    from = 100\n    to   = 500\n  }\n}\n\n# Create example cluster of MySQL\nresource \"twc_database_cluster\" \"example-mysql-8\" {\n  name = \"example_mysql_8\"\n\n  type = \"mysql\"\n\n  preset_id = data.twc_database_preset.example-db-preset.id\n}\n\n# Create example instance in previously created cluster\nresource \"twc_database_instance\" \"example-mysql-8-instance\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  name = \"example\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Database Preset and Creating MySQL 8 Database Resource with Terraform\nDESCRIPTION: This snippet demonstrates how to query available database presets using the 'twc_db_preset' data source with specific filters (location, disk size, type, price range) and then create a MySQL 8 database using the 'twc_db_mysql_8' resource. Required dependencies include the Timeweb Cloud Terraform provider and configured authentication. Key parameters include preset selection criteria, database name, login, and password. Outputs include the provisioned database and its configuration. Sensitive values like password should be managed securely.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mysql_8.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n# Select any preset from location = \"ru-1\", 8 Gb disk space, for database type `mysql`, with price between 100 and 200 RUB\ndata \"twc_db_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  disk = 8 * 1024\n  type = \"mysql\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\n# Example usage of MySQL 8 database resource\nresource \"twc_db_mysql_8\" \"example-mysql-8\" {\n  name = \"example_mysql_8\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-preset.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeweb Cloud Firewall and Adding a Rule using Terraform\nDESCRIPTION: This Terraform configuration demonstrates creating a `twc_firewall` resource named 'example-firewall' and then adding a `twc_firewall_rule` to it. The rule allows incoming (`ingress`) TCP traffic (`protocol = \"tcp\"`) on port 80 (`port = 80`) from any source IP address (`cidr = \"0.0.0.0/0\"`). The rule resource references the created firewall's ID using `resource.twc_firewall.example-firewall.id`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall_rule.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n// Create example firewall\nresource \"twc_firewall\" \"example-firewall\" {\n  name = \"example-firewall\"\n  description = \"Some example firewall\"\n}\n\n// Add rule to created firewall that allow TCP on 80 port from any source\nresource \"twc_firewall_rule\" \"example-firewall-rules\" {\n  firewall_id = resource.twc_firewall.example-firewall.id\n  description = \"Some example firewall rule\"\n\n  direction = \"ingress\"\n  port = 80\n  protocol = \"tcp\"\n  cidr = \"0.0.0.0/0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server with Configurator in Terraform for Timeweb Cloud\nDESCRIPTION: Creates a server using a custom configuration with a specific operating system. This example selects a configurator in a specific location and Ubuntu 22.04 as the operating system, then provisions a server with 10GB disk, 1 CPU, and 1GB RAM.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_configurator\" \"example-configurator\" {\n  location = \"ru-1\"\n}\n\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timeweb Cloud Database Users with Terraform\nDESCRIPTION: This Terraform configuration demonstrates creating various `twc_database_user` resources within a Timeweb Cloud MySQL cluster. It shows examples for granting privileges cluster-wide, restricting to a single database instance, and granting access to multiple specific instances. The configuration depends on pre-existing `twc_database_preset`, `twc_database_cluster`, and `twc_database_instance` resources.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_user.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Select any preset from location = \"ru-1\", 8 Gb disk space with price between 100 and 500 RUB for MySQL\ndata \"twc_database_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  type = \"mysql\"\n\n  disk = 8 * 1024\n\n  price_filter {\n    from = 100\n    to   = 500\n  }\n}\n\n# Create example cluster of MySQL\nresource \"twc_database_cluster\" \"example-mysql-8\" {\n  name = \"example_mysql_8\"\n\n  type = \"mysql\"\n\n  preset_id = data.twc_database_preset.example-db-preset.id\n}\n\n# Create example instance in previously created cluster\nresource \"twc_database_instance\" \"example-mysql-8-instance\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  name = \"example\"\n}\n\n# Create other example instance in previously created cluster\nresource \"twc_database_instance\" \"example-mysql-8-other-instance\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  name = \"otherexample\"\n}\n\n# Create some other example instance in previously created cluster\nresource \"twc_database_instance\" \"example-mysql-8-some-other-instance\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  name = \"someotherexample\"\n}\n\n# Create user with access across all cluster instances\nresource \"twc_database_user\" \"example-mysql-8-user\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  login      = \"admin\"\n  password   = \"examplepassword1\"\n  privileges = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"ALTER\", \"REFERENCES\", \"CREATE\", \"DROP\", \"INDEX\"]\n}\n\n# Create user with privileges to one cluster instance\nresource \"twc_database_user\" \"example-mysql-8-user\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  login    = \"otheruser\"\n  password = \"examplepassword1\"\n\n  instance {\n    instance_id = twc_database_instance.example-mysql-8-instance.id\n    privileges  = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"]\n  }\n}\n\n# Create other user with privileges to multiple cluster instances\nresource \"twc_database_user\" \"example-mysql-8-user\" {\n  cluster_id = twc_database_cluster.example-mysql-8.id\n\n  login    = \"someotheruser\"\n  password = \"examplepassword1\"\n\n  instance {\n    instance_id = twc_database_instance.example-mysql-8-instance.id\n    privileges  = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"]\n  }\n\n  instance {\n    instance_id = twc_database_instance.example-mysql-8-other-instance.id\n    privileges  = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Load Balancer Preset - Terraform\nDESCRIPTION: This snippet demonstrates how to use a data source (`twc_lb_preset`) to select a load balancer preset based on criteria such as requests per second and price range. It fetches a preset ID that will be used when creating the actual load balancer resource.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/lb.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"twc_lb_preset\" \"example-lb-preset\" {\n  requests_per_second = \"10K\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Configuration for Server Disk Backup Schedule\nDESCRIPTION: This comprehensive Terraform example demonstrates configuring automatic backup schedules for server disks in Timeweb Cloud. It includes defining data sources for OS and presets, creating a server and an additional disk, and then applying the `twc_server_disk_backup_schedule` resource twice: once for the server's main disk (accessed via `disks[0].id`) and once for the explicitly created additional disk. Key parameters shown are `copy_count`, `creation_start_at`, and `interval`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_disk_backup_schedule.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server with preset\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n\nresource \"twc_server_disk\" \"example-additional-disk\" {\n  source_server_id = twc_server.example-server.id\n\n  size = 1024 * 10\n}\n\n# Usage example for auto backup schedule on main disk\nresource \"twc_server_disk_backup_schedule\" \"main-disk-example\" {\n  source_server_id = twc_server.example-server.id\n  source_server_disk_id = twc_server.example-server.disks[0].id\n\n  copy_count = 10\n  creation_start_at = \"2023-02-02T00:00:00.000Z\"\n  interval = \"month\"\n}\n\n# Usage example for auto backup schedule on additional disk\nresource \"twc_server_disk_backup_schedule\" \"additional-disk-example\" {\n  source_server_id = twc_server.example-server.id\n  source_server_disk_id = twc_server_disk.example-additional-disk.id\n\n  copy_count = 10\n  creation_start_at = \"2023-02-02T00:00:00.000Z\"\n  interval = \"month\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Disk for a Timeweb Cloud Server using Terraform\nDESCRIPTION: This example demonstrates how to create a new server with a preset configuration and then attach an additional 10GB disk to it. It includes retrieving OS and preset data, creating a server, and adding the additional disk.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_disk.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server with preset\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n\n# Create additional disk for server with 10 Gb size\nresource \"twc_server_disk\" \"example\" {\n  source_server_id = twc_server.example-server.id\n\n  size = 1024 * 10\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning a Server with Selected Preset - Terraform\nDESCRIPTION: Shows usage of a selected OS and server preset to create a Timeweb Cloud server using the 'twc_server' resource. This example depends on previous data sources ('twc_os' and 'twc_presets') to provide 'os_id' and 'preset_id', respectively. The resource expects a server name and references to the chosen OS and preset IDs. Creates a cloud server instance parameterized by filtered data source results.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/presets.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Timeweb Cloud SSH Key in Terraform\nDESCRIPTION: This example demonstrates how to create a new SSH key resource (`twc_ssh_key`) using a public key file (`~/.ssh/some-key.pub`). It also shows how to reference the created key's ID (`twc_ssh_key.example-key.id`) within the `ssh_keys_ids` attribute of a `twc_server` resource definition. The example depends on data sources `twc_os` and `twc_presets` to configure the server.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/ssh_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\n# Create new SSH key\nresource \"twc_ssh_key\" \"example-key\" {\n  name = \"Example\"\n  body = file(\"~/.ssh/some-key.pub\")\n}\n\n# Usage example of created SSH key\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  ssh_keys_ids = [twc_ssh_key.example-key.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OS and Presets with Filters - Terraform\nDESCRIPTION: Demonstrates how to use the 'twc_os' data source to select an Ubuntu OS version and how to filter available server presets using the 'twc_presets' data source in Terraform. Dependencies include the Timeweb Cloud Terraform provider. Key parameters such as 'location', 'disk_type', 'cpu', 'ram', and a nested 'price_filter' are used to narrow down preset selection. Inputs are attribute filters; output is the filtered preset object with accessible ID, price, and other fields.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/presets.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  location = \"ru-1\"\n  disk_type = \"nvme\"\n  cpu = 1\n  ram = 2048\n\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeweb Cloud Project and Associated Server using Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define data sources for a specific OS (`twc_os`) and server preset (`twc_presets`), then create a new Timeweb Cloud project (`twc_project`) with a name and description. Finally, it shows how to create a server (`twc_server`) within that newly created project by referencing the project's ID.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/project.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name    = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to   = 400\n  }\n}\n\n# Create new Project\nresource \"twc_project\" \"example-project\" {\n  name        = \"Example\"\n  description = \"Some example project\"\n}\n\n# Usage example of created Project\nresource \"twc_server\" \"example-project\" {\n  name  = \"Example project\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  project_id = resource.twc_project.example-project.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private S3 Bucket with Preset - Terraform\nDESCRIPTION: This Terraform example demonstrates how to first fetch a suitable S3 preset configuration using the `twc_s3_preset` data source based on location, disk size, and price criteria, and then use the resulting preset ID to create a private S3 bucket resource named \"example-s3-bucket\". This requires the Timeweb Cloud provider to be configured.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/s3_bucket.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Select any preset from location = \"ru-1\", 10 Gb disk space with price between 50 and 100 RUB\ndata \"twc_s3_preset\" \"example-s3-preset\" {\n  location = \"ru-1\"\n\n  disk = 10 * 1024\n\n  price_filter {\n    from = 50\n    to = 100\n  }\n}\n\n# Example private S3 bucket\nresource \"twc_s3_bucket\" \"example-s3-bucket\" {\n  name = \"example-s3-bucket\"\n  type = \"private\"\n  preset_id = data.twc_s3_preset.example-s3-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using MongoDB Database Presets with Timeweb Cloud in Terraform\nDESCRIPTION: This Terraform example demonstrates querying available MongoDB database presets for a specific location (ru-1), disk size (20GB), type (mongodb), and a price range (200-300 RUB). It then shows how to provision a new twc_db_mongodb resource using the selected preset, as well as custom credentials (login and password). Dependencies include the Timeweb Cloud Terraform provider and valid authentication with the provider. Parameters such as preset_id, name, login, and password are required. Inputs relate to resource names and credentials, while outputs reflect actual resource state and endpoints. Limitation: password must be handled securely and preset_id must be retrieved before database creation.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mongodb.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n# Select any preset from location = \"ru-1\", 20 Gb disk space, for database type `mongodb`, with price between 200 and 300 RUB\ndata \"twc_db_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  disk = 20 * 1024\n  type = \"mongodb\"\n\n  price_filter {\n    from = 200\n    to = 300\n  }\n}\n\n# Example usage of MongoDB database resource\nresource \"twc_db_mongodb\" \"example-mongodb\" {\n  name = \"example_mongodb\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Load Balancer Preset and Creating Balancer - Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to select a load balancer preset based on desired request rates and price, and then create a load balancer using the selected preset. It defines data sources for presets and resources for a load balancer, and sets various configurations like algorithm, stickiness, and health checks. The code prepares the necessary infrastructure for creating the balancer rules.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/lb_rule.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n// Select balancer preset that may process 10K RPS with price between 100 and 200 RUB\ndata \"twc_lb_preset\" \"example-lb-preset\" {\n  requests_per_second = \"10K\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\n// Create balancer example\nresource \"twc_lb\" \"example-lb\" {\n  name = \"example-lb\"\n\n  algo = \"roundrobin\"\n\n  is_sticky = false\n  is_use_proxy = false\n  is_ssl = false\n  is_keepalive = false\n\n  health_check {\n    proto = \"http\"\n\n    port = 80\n\n    path = \"/lala\"\n\n    inter = 10\n    timeout = 5\n    fall = 3\n    rise = 2\n  }\n\n  ips = []\n\n  preset_id = data.twc_lb_preset.example-lb-preset.id\n\n  project_id = resource.twc_project.example-project.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional Server IP Address using Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to provision a Timeweb Cloud server using data sources for OS and presets (`twc_os`, `twc_presets`, `twc_server`) and then allocate an additional IPv4 address to it using the `twc_server_ip` resource. It specifies the server ID, IP type (`ipv4`), and a PTR record.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_ip.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server with preset\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n\n# Usage example for create additional IP address\nresource \"twc_server_ip\" \"example\" {\n  source_server_id = twc_server.example-server.id\n\n  type = \"ipv4\"\n  ptr = \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Resource with Configurator Selection - Terraform\nDESCRIPTION: Terraform resource definition for creating a Timeweb Cloud server using a previously selected operating system and configurator. The resource accepts properties such as server name, OS identifier, and hardware configuration parameters including configurator ID, disk size (in MB), CPU count, and RAM (in MB). It demonstrates integrating data sources with resource provisioning, ensuring that server hardware adheres to constraints defined by the selected configurator.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/configurator.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Selecting a DB Preset (Postgres, Terraform)\nDESCRIPTION: This data source selects a suitable database preset based on specified criteria such as location, disk space, database type (postgres), and price range. It filters available presets to find one matching the defined parameters. The selected preset's ID is then used to provision a new database.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_postgres.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_db_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  disk = 8 * 1024\n  type = \"postgres\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket Files using twc_s3_bucket_file Resource in Terraform\nDESCRIPTION: This Terraform configuration demonstrates creating files within a Timeweb Cloud S3 bucket. It first looks up an S3 preset, creates a bucket (`twc_s3_bucket`), and then uses `twc_s3_bucket_file` to upload `some_image.png` both to the bucket root and within a subdirectory (`some_directory`). The subdirectory is created using `twc_s3_bucket_directory`. The `file` attribute takes the base64-encoded content of the local file. A `depends_on` block ensures the directory is created before the nested file.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/s3_bucket_file.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_s3_preset\" \"example-s3-preset\" {\n  location = \"ru-1\"\n\n  disk = 10 * 1024\n\n  price_filter {\n    from = 50\n    to = 100\n  }\n}\n\nresource \"twc_s3_bucket\" \"example-s3-bucket\" {\n  name = \"example-s3-bucket\"\n  type = \"private\"\n  preset_id = data.twc_s3_preset.example-s3-preset.id\n}\n\n# Create some_image.png in previously created bucket\nresource \"twc_s3_bucket_file\" \"example-s3-bucket-file\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  path = \"some_image.png\"\n\n  file = filebase64(\"./some_image.png\")\n}\n\n\n# Create some_directory for next example\nresource \"twc_s3_bucket_directory\" \"example-s3-bucket-directory\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  name = \"some_directory\"\n}\n\n# Create some_image.png in previously created directory\nresource \"twc_s3_bucket_file\" \"example-s3-bucket-file-in-directory\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  path = \"some_directory/some_image.png\"\n\n  file = filebase64(\"./some_image.png\")\n\n  ## Explicit dependencies helps terraform to build correct plan\n  depends_on = [twc_s3_bucket_directory.example-s3-bucket-directory]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Servers with VPC Network in Timeweb Cloud\nDESCRIPTION: Creates a VPC network and assigns servers to it. This example creates a VPC with a specific subnet, then creates servers connected to that network - one with automatic IP assignment and one with a manually specified IP address.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_vpc\" \"example-vpc\" {\n  name = \"Example VPC\"\n  description = \"Some example VPC\"\n  subnet_v4 = \"192.168.0.0/24\"\n  location = \"ru-1\"\n}\n\n# With VPC network\nresource \"twc_server\" \"example-server-with-local-network\" {\n  name = \"Example server with local network\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n  }\n}\n\n# With VPC network and specified ID IP\nresource \"twc_server\" \"example-server-with-local-network-and-address\" {\n  name = \"Example server with local network and address\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n    ip = \"192.168.0.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying twc_software Data Source - Terraform\nDESCRIPTION: This Terraform code defines a data source named `twc_software`. It filters software based on the name and operating system. The `name` attribute specifies the software (Docker). The `os` block specifies the operating system name (ubuntu) and version (22.04). The output returns the software data.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/software.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_software\" \"example-software\" {\n  name = \"Docker\"\n\n  os {\n    name = \"ubuntu\"\n    version = \"22.04\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring twc_db_backup Resource in Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to configure the twc_db_backup resource to create a backup of a PostgreSQL database managed under the Timeweb Cloud provider. It includes setup for a database preset and a PostgreSQL instance with detailed configuration parameters, followed by the backup resource which requires the source database ID to specify which database to back up. The snippet assumes the Timeweb Cloud Terraform provider is used and that required credentials are configured separately. Inputs include database configuration parameters and the source_db_id for backup. Outputs are indicated by automatically populated read-only backup details from the provider.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_backup.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Setup example database for backup schedule configuration\ndata \"twc_db_preset\" \"example-db-postgres-preset\" {\n  location = \"ru-1\"\n\n  type = \"postgres\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\nresource \"twc_db_postgres\" \"example-postgres\" {\n  name = \"example_postgres\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-postgres-preset.id\n\n  autovacuum_analyze_scale_factor = 0.001\n  bgwriter_delay = 101\n  bgwriter_lru_maxpages = 102\n  deadlock_timeout = 103\n  gin_pending_list_limit = 104\n  idle_in_transaction_session_timeout = 115\n  idle_session_timeout = 106\n  join_collapse_limit = 107\n  lock_timeout = 108\n  max_prepared_transactions = 109\n  max_connections = 110\n  shared_buffers = 111\n  wal_buffers = 112\n  temp_buffers = 113\n  work_mem = 114\n\n  is_external_ip = true\n}\n\n# Create backup for example database\nresource \"twc_db_backup\" \"example-db-backup\" {\n  source_db_id = twc_db_postgres.example-postgres.id\n\n  comment = \"Example database\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server with VPC Connection (Terraform)\nDESCRIPTION: Defines a Timeweb Cloud server and connects it to the specified VPC using the `local_network` block, referencing the VPC resource ID. This setup allocates an IP automatically from the VPC subnet. Depends on `twc_vpc`, `twc_presets` data, and `twc_os` data resources.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/vpc.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\n# With VPC network\nresource \"twc_server\" \"example-server-with-local-network\" {\n  name = \"Example server with local network\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying DB Preset Data\nDESCRIPTION: This code snippet demonstrates how to use the `data \"twc_db_preset\"` data source to retrieve a suitable database preset based on location, disk space, type, and price. It's a prerequisite step for creating a database instance because it provides the necessary `preset_id`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mysql_5.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Select any preset from location = \"ru-1\", 8 Gb disk space, for database type `mysql`, with price between 100 and 200 RUB\ndata \"twc_db_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  disk = 8 * 1024\n  type = \"mysql\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server with Image - Terraform\nDESCRIPTION: This Terraform snippet creates a server resource and utilizes the previously selected image. It retrieves the `id` of the selected image through the `data.twc_image.example-image.id` attribute. The configuration block further details the server's setup by referring to the `configurator_id` and resources such as the `disk`, `cpu`, and `ram`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/image.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  image_id = data.twc_image.example-image.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating twc_server Resource - Terraform\nDESCRIPTION: This Terraform code defines a resource named `twc_server`. It uses the previously defined `twc_software` and `twc_presets` data sources to configure a server. It assigns the OS ID and software ID from the `twc_software` data source and a preset ID from the `twc_presets` data source to the server.  It relies on the previous examples to configure the server with the chosen software and preset.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/software.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_software.example-software.os[0].id\n  software_id = data.twc_software.example-software.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting K8S Node Preset and Creating twc_k8s_cluster Resource in Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to select a Kubernetes master node preset based on CPU count and type, and how to create a Kubernetes cluster resource with configured properties such as name, description, version, network driver, ingress, and high availability. Dependencies include the Timeweb Cloud Terraform provider and the availability of presets and cluster versions from the API. Inputs include parameters like CPU count for the preset and cluster configuration fields. Outputs include the created cluster resource with access to its status and kubeconfig.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/k8s_cluster.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Select any preset for master node with 4 CPUs\ndata \"twc_k8s_preset\" \"example-k8s-preset-master\" {\n  cpu = 4\n  type = \"master\"\n}\n\n# Create example cluster with selected preset\nresource \"twc_k8s_cluster\" \"example-k8s-cluster\" {\n  name = \"example-cluster\"\n  description = \"some example cluster\"\n\n  high_availability = false\n  version = \"v1.22.17\"\n  network_driver = \"flannel\"\n  ingress = true\n\n  preset_id = data.twc_k8s_preset.example-k8s-preset-master.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server with Specified VPC IP (Terraform)\nDESCRIPTION: Defines a Timeweb Cloud server and connects it to the specified VPC using the `local_network` block, referencing the VPC resource ID and providing a specific IP address within the VPC subnet. Depends on `twc_vpc`, `twc_presets` data, and `twc_os` data resources.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/vpc.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n# With VPC network and specified ID IP\nresource \"twc_server\" \"example-server-with-local-network-and-address\" {\n  name = \"Example server with local network and address\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n    ip = \"192.168.0.15\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Another Server with Preset - Terraform\nDESCRIPTION: Similar to the previous snippet, this code creates another server resource, `vds-with-preset-2`. It also uses the same OS and preset IDs fetched earlier. This shows how to deploy multiple servers using the same preset and OS configuration. Prerequisites are valid OS and preset data.  The expected output is the creation of a second server with the specified configuration in Timeweb Cloud.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_server\" \"vds-with-preset-2\" {\n  name = \"Some server with preset 2\"\n  os_id = data.twc_os.os.id\n\n  preset_id = data.twc_presets.preset.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating IP bound to a Server resource in Terraform\nDESCRIPTION: This Terraform configuration creates a server and then associates a floating IP with that server. It uses data sources to fetch the OS image and configurator details before creating the server. The `resource` block within the `twc_floating_ip` resource defines the association with the created server.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/floating_ip.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n# Create example floating IP with bounded resource\n\ndata \"twc_configurator\" \"example-configurator\" {\n  location = \"ru-1\"\n}\n\ndata \"twc_os\" \"example-os\" {\n  name    = \"ubuntu\"\n  version = \"22.04\"\n}\n\nresource \"twc_server\" \"example-server\" {\n  name              = \"Example server\"\n  os_id             = data.twc_os.example-os.id\n  availability_zone = \"spb-3\"\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk            = 1024 * 10\n    cpu             = 1\n    ram             = 1024\n  }\n}\n\nresource \"twc_floating_ip\" \"example-floating-ip\" {\n  availability_zone = \"spb-3\"\n\n  comment = \"Some floating IP\"\n\n  resource {\n    type = \"server\"\n    id   = twc_server.example-server.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Timeweb Cloud S3 Bucket Subdomain in Terraform\nDESCRIPTION: This Terraform snippet demonstrates the creation of a custom subdomain resource for a Timeweb Cloud S3 bucket, associating a previously created S3 bucket with a valid subdomain name. It includes handling of data presets for bucket configuration and enabling SSL certificate release. Required dependencies include prior definition of the S3 bucket and valid DNS CNAME pointing to s3.timeweb.com. Key parameters are 'bucket_id' to link the S3 bucket, 'subdomain' for the custom domain name, and 'release_cert' to issue SSL certificates. Outputs include the subdomain status and resource ID. The snippet must be used within a valid Terraform configuration targeting the Timeweb Cloud provider.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/s3_bucket_subdomain.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_s3_preset\" \"example-s3-preset\" {\n  location = \"ru-1\"\n\n  disk = 10 * 1024\n\n  price_filter {\n    from = 50\n    to = 100\n  }\n}\n\nresource \"twc_s3_bucket\" \"example-s3-bucket\" {\n  name = \"example-s3-bucket\"\n  type = \"private\"\n  preset_id = data.twc_s3_preset.example-s3-preset.id\n}\n\n# Example subdomain for S3 bucket\nresource \"twc_s3_bucket_subdomain\" \"example-s3-bucket-subdomain\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  ## This example requires valid domain name with CNAME record to s3.timeweb.com\n  subdomain = \"s3.example.com\"\n\n  release_cert = true\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Using Timeweb Cloud Projects in Terraform\nDESCRIPTION: This snippet demonstrates how to select a Timeweb Cloud project by name and use it when creating server resources. It includes examples of related data sources for OS and pricing presets, showing a complete workflow for server provisioning.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/projects.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\n# Select project with name = \"Example\"\ndata \"twc_projects\" \"example-project\" {\n  name = \"Example\"\n}\n\n# Usage example of selected project\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  project_id = data.twc_projects.example-project.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating K8S Node Group - Terraform\nDESCRIPTION: This Terraform snippet demonstrates the creation of a K8S node group. It first selects a preset for the worker nodes using a data source.  It then defines the `twc_k8s_node_group` resource, referencing the ID of an existing cluster and the ID of the worker node preset. Key parameters include `cluster_id`, `name`, `preset_id`, and `node_count`.  The output will be a running node group within a K8S cluster.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/k8s_node_group.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Select any preset for master node with 4 CPUs\ndata \"twc_k8s_preset\" \"example-k8s-preset-master\" {\n  cpu = 4\n  type = \"master\"\n}\n\n# Create example cluster with selected preset\nresource \"twc_k8s_cluster\" \"example-k8s-cluster\" {\n  name = \"example-cluster\"\n  description = \"some example cluster\"\n\n  high_availability = false\n  version = \"v1.22.17\"\n  network_driver = \"flannel\"\n  ingress = true\n\n  preset_id = data.twc_k8s_preset.example-k8s-preset-master.id\n}\n\n# Select any preset for nodes in group with 2 CPUs\ndata \"twc_k8s_preset\" \"example-k8s-preset-worker\" {\n  cpu = 2\n  type = \"worker\"\n}\n\n# Create example node group preset in previously created cluster and selected preset with 2 nodes\nresource \"twc_k8s_node_group\" \"example-k8s-node-group\" {\n  cluster_id = resource.twc_k8s_cluster.example-k8s-cluster.id\n  name = \"example-k8s-node-group\"\n\n  preset_id = data.twc_k8s_preset.example-k8s-preset-worker.id\n\n  node_count = 2\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket and Directory - Terraform\nDESCRIPTION: This snippet demonstrates how to create an S3 bucket and then create directories within that bucket using the `twc_s3_bucket_directory` resource. It utilizes a data source for `twc_s3_preset` to determine bucket parameters.  The `bucket_id` parameter of `twc_s3_bucket_directory` links the directory to the created S3 bucket, and the `name` parameter specifies the directory's name, supporting nested directory structures. Ensure the Timeweb Cloud provider is configured and authenticated within the Terraform environment.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/s3_bucket_directory.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_s3_preset\" \"example-s3-preset\" {\n  location = \"ru-1\"\n\n  disk = 10 * 1024\n\n  price_filter {\n    from = 50\n    to = 100\n  }\n}\n\nresource \"twc_s3_bucket\" \"example-s3-bucket\" {\n  name = \"example-s3-bucket\"\n  type = \"private\"\n  preset_id = data.twc_s3_preset.example-s3-preset.id\n}\n\n# Create some_directory in previously created bucket\nresource \"twc_s3_bucket_directory\" \"example-s3-bucket-directory\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  name = \"some_directory\"\n}\n\n# This resource also allow to create nested directories\nresource \"twc_s3_bucket_directory\" \"example-s3-bucket-nested-directories\" {\n  bucket_id = twc_s3_bucket.example-s3-bucket.id\n\n  name = \"some/nested/directory\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting OS Data Source - Terraform\nDESCRIPTION: Defines a Terraform data source to select an operating system by name and version. This snippet relies on the twc_os data source and allows retrieval of OS information to be used in server resource definitions. The variables 'name' and 'version' specify the OS type and version respectively, which the provider uses to query matching OS entries.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/configurator.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OS Data - Terraform\nDESCRIPTION: This Terraform code uses the `twc_os` data source to retrieve operating system information.  The `family`, `name`, and `version` attributes specify the OS details to fetch. The output is a data structure containing the OS ID and other related information.  The input is a valid Terraform configuration using the Timeweb Cloud provider.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_os\" \"os\" {\n  family = \"linux\"\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing MySQL 8 Database Resource with Terraform CLI\nDESCRIPTION: This shell snippet shows how to import an existing 'twc_db_mysql_8' resource into Terraform state using its numeric identifier. It requires an initialized Terraform configuration with the resource defined and the Timeweb Cloud provider configured. The argument '42' should be replaced with the actual database ID from the resource URL. After import, the resource's current state will be reflected in Terraform.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mysql_8.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Database can be imported by specifying the numeric identifier from URL\nterraform import twc_db_mysql_8.example 42\n\n```\n\n----------------------------------------\n\nTITLE: Creating Load Balancer with Specified VPC IP (Terraform)\nDESCRIPTION: Defines a Timeweb Cloud Load Balancer resource and connects it to the specified VPC using the `local_network` block, referencing the VPC resource ID and providing a specific IP address within the VPC subnet. Includes configuration for health checks. Depends on `twc_vpc`, `twc_lb_preset` data, and `twc_project` resources.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/vpc.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n### Example load balancer with VPC network\n\ndata \"twc_lb_preset\" \"example-lb-preset\" {\n  requests_per_second = \"10K\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\nresource \"twc_lb\" \"example-lb\" {\n  name = \"example-lb\"\n\n  algo = \"roundrobin\"\n\n  is_sticky = false\n  is_use_proxy = false\n  is_ssl = false\n  is_keepalive = false\n\n  health_check {\n    proto = \"http\"\n\n    port = 80\n\n    path = \"/lala\"\n\n    inter = 10\n    timeout = 5\n    fall = 3\n    rise = 2\n  }\n\n  ips = []\n\n  preset_id = data.twc_lb_preset.example-lb-preset.id\n\n  project_id = resource.twc_project.example-project.id\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n    ip = \"192.168.0.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting SSH Key by Name - Terraform\nDESCRIPTION: This code uses the `twc_ssh_keys` data source to retrieve an SSH key by its name, \"Example.\" The `name` parameter is a filter that specifies which SSH key to select.  The data source returns information about the SSH key, including its ID, which can then be utilized for various resources within the configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/ssh_keys.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_ssh_keys\" \"example-key\" {\n  name = \"Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Load Balancer - Terraform\nDESCRIPTION: This snippet creates a load balancer resource (`twc_lb`). It defines various parameters like name, algorithm, health checks, and dependencies on other resources such as the preset ID and project ID. The load balancer is configured with several boolean flags determining its behavior.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/lb.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"twc_lb\" \"example-lb\" {\n  name = \"example-lb\"\n\n  algo = \"roundrobin\"\n\n  is_sticky = false\n  is_use_proxy = false\n  is_ssl = false\n  is_keepalive = false\n\n  health_check {\n    proto = \"http\"\n\n    port = 80\n\n    path = \"/lala\"\n\n    inter = 10\n    timeout = 5\n    fall = 3\n    rise = 2\n  }\n\n  ips = []\n\n  preset_id = data.twc_lb_preset.example-lb-preset.id\n\n  project_id = resource.twc_project.example-project.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Disk Backups with Terraform HCL\nDESCRIPTION: This snippet demonstrates how to configure the `twc_server_disk_backup` resource in Terraform to create backups for a Timeweb Cloud server's main disk and an attached additional disk. It shows dependencies on data sources (`twc_os`, `twc_presets`) and resources (`twc_server`, `twc_server_disk`) required to provision the environment before creating backups. The resource requires `source_server_id` and `source_server_disk_id` to specify the target disk, and an optional `comment` can be added.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_disk_backup.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server with preset\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n\nresource \"twc_server_disk\" \"example-additional-disk\" {\n  source_server_id = twc_server.example-server.id\n\n  size = 1024 * 10\n}\n\n### Backup from main server disk\nresource \"twc_server_disk_backup\" \"example\" {\n  source_server_id = twc_server.example-server.id\n  source_server_disk_id = twc_server.example-server.disks[0].id\n\n  comment = \"example with main disk\"\n}\n\n### Backup from additional disk resource\nresource \"twc_server_disk_backup\" \"example-with-additional-disk\" {\n  source_server_id = twc_server_disk.example-disk.source_server_id\n  source_server_disk_id = twc_server_disk.example-additional-disk.id\n\n  comment = \"example with additional disk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the twc_db_preset Data Source in Terraform for Timeweb Cloud\nDESCRIPTION: This snippet demonstrates how to use the twc_db_preset data source to filter available database presets based on specific requirements such as database type, location, and price range. The data source allows you to find appropriate database configurations for your infrastructure needs.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/db_preset.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"twc_db_preset\" \"example\" {\n  type     = \"postgres\"\n  location = \"ru-1\"\n  cpu      = 2\n  ram      = 4\n  disk     = 10\n  \n  price_filter {\n    from = 500\n    to   = 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying twc_presets Data Source - Terraform\nDESCRIPTION: This Terraform code defines a data source named `twc_presets`. It filters presets based on price, specifying a range from 300 to 400.  The `twc_presets` data source is used to select a preset for server configuration. The output is a preset ID.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/software.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server with Preset Configuration in Timeweb Cloud\nDESCRIPTION: Creates a server using a predefined preset configuration within a specific price range. This example filters presets by price (300-400 units) and applies the preset to a new server with a specified OS.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\nresource \"twc_server\" \"example-server-with-preset\" {\n  name = \"Example server with preset\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Resource\nDESCRIPTION: This HCL snippet defines a `twc_server` resource, creating a virtual machine in Timeweb Cloud.  It sets the `name`, `os_id`, and uses the  `configuration` block with settings such as `configurator_id`, `disk`, `cpu`, and `ram`.  It depends on data sources to provide OS and configuration settings.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.configurator.id\n    disk = 1024 * 15\n    cpu = 1\n    ram = 1024\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting OS and Preset - Terraform\nDESCRIPTION: This snippet defines data sources for retrieving OS and preset information for subsequent use in a server resource. It uses the `twc_os` data source to find an Ubuntu OS with version 22.04 and the `twc_presets` data source to find presets based on a price range.  The results of these data sources are used in later examples.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/ssh_keys.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\ndata \"twc_presets\" \"example-preset\" {\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Location - Terraform\nDESCRIPTION: This Terraform snippet configures the location for subsequent operations. It utilizes the `twc_configurator` data source to specify the location. The `location` parameter sets the geographic region for the configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/image.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_configurator\" \"example-configurator\" {\n  location = \"ru-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Rules to Load Balancer - Terraform\nDESCRIPTION: This snippet creates a rule (`twc_lb_rule`) associated with the previously created load balancer. It sets the protocol and port for both the balancer and the server, defining how traffic should be routed. It uses the ID of the created load balancer as a dependency.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/lb.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"twc_lb_rule\" \"example-lb-rule\" {\n  lb_id = resource.twc_lb.example-lb.id\n\n  balancer_proto = \"http2\"\n  balancer_port = 83\n  server_proto = \"http\"\n  server_port = 82\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Server with Pre-installed Software in Timeweb Cloud\nDESCRIPTION: Provisions a server with specific software (Docker) pre-installed. This example queries for software compatible with Ubuntu 22.04 and creates a server with that software and OS combination using a preset configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_software\" \"example-software\" {\n  name = \"Docker\"\n\n  os {\n    family = \"linux\"\n    name = \"ubuntu\"\n    version = \"22.04\"\n  }\n}\n\nresource \"twc_server\" \"server-with-software\" {\n  name = \"Example server with software\"\n  preset_id = data.twc_presets.example-preset.id\n\n  os_id = data.twc_software.example-software.os[0].id\n  software_id = data.twc_software.example-software.id\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Configurator Data\nDESCRIPTION: This HCL snippet retrieves configuration data using the `twc_configurator` data source.  It specifies the `location` and `disk_type` to filter the returned configurator. The output will contain information on hardware configurations available in the selected region.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"twc_configurator\" \"configurator\" {\n  location = \"ru-1\"\n  disk_type = \"nvme\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Database Preset for MySQL - Terraform\nDESCRIPTION: This code snippet demonstrates how to query a database preset in Timeweb Cloud using the `twc_database_preset` data source. It filters presets based on location, database type (MySQL), disk size, and price range. The `location`, `type`, and `disk` attributes are used to filter based on location, type, and storage of the available presets. The nested `price_filter` block is used to limit search to a specific price range.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_cluster.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_database_preset\" \"example-db-preset\" {\n  location = \"ru-1\"\n\n  type = \"mysql\"\n\n  disk = 8 * 1024\n\n  price_filter {\n    from = 100\n    to   = 500\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning an Existing Server in Timeweb Cloud\nDESCRIPTION: Creates a new server by cloning an existing one. This example references a previously created server as the source and adjusts the disk size in the new configuration to 20GB.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_server\" \"cloned-server-example\" {\n  name = \"Example of cloned server\"\n  source_server_id = twc_server.example-server.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 5 * 4\n    cpu = 1\n    ram = 1024\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating IP resource in Terraform\nDESCRIPTION: This Terraform resource creates a floating IP in a specified availability zone and adds a comment. No DDoS protection is enabled in this example. The resource block defines the desired state for the floating IP within Timeweb Cloud.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/floating_ip.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Creata example floating IP\nresource \"twc_floating_ip\" \"example-floating-ip\" {\n  availability_zone = \"spb-3\"\n\n  comment = \"Some floating IP\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timeweb Cloud VPC (Terraform)\nDESCRIPTION: Defines a VPC network with a name, description, subnet, and location using the `twc_vpc` resource. Requires a name, subnet in CIDR notation, and location. Outputs the created VPC resource.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/vpc.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n# Example VPC network\nresource \"twc_vpc\" \"example-vpc\" {\n  name = \"Example VPC\"\n  description = \"Some example VPC\"\n  subnet_v4 = \"192.168.0.0/24\"\n  location = \"ru-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define twc_network_drive Terraform Resource Schema\nDESCRIPTION: This schema defines the configuration attributes for the `twc_network_drive` Terraform resource. It specifies optional parameters like `availability_zone`, `name`, `preset_id`, `size`, `comment`, and a nested `resource` block for mounting. Read-only attributes like `id`, `location`, `status`, and `type` provide information about the created drive after provisioning.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/network_drive.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n### Optional\n\n- `availability_zone` (String) Zone of specified network drive\n- `comment` (String) Comment for the network drive\n- `name` (String) Name of the network drive\n- `preset_id` (Number) Preset id of the network drive\n- `resource` (Block List, Max: 1) Mount network drive to resource (see [below for nested schema](#nestedblock--resource))\n- `size` (Number) Size of the network drive\n\n### Read-Only\n\n- `id` (String) The ID of this resource.\n- `location` (String) Location of specified network drive\n- `status` (String) Status of the network drive\n- `type` (String) Type of the network drive\n\n<a id=\"nestedblock--resource\"></a>\n### Nested Schema for `resource`\n\nOptional:\n\n- `id` (Number) ID of resource that mounts to network drive\n- `type` (String) Type of resource that mounts with network drive (`server`)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL DB with Specified VPC IP (Terraform)\nDESCRIPTION: Defines a Timeweb Cloud PostgreSQL database and connects it to the specified VPC using the `local_network` block, referencing the VPC resource ID and providing a specific IP address within the VPC subnet. Also includes various database configuration options. Depends on `twc_vpc` and `twc_db_preset` data resources.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/vpc.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n### Example database with VPC network\n\ndata \"twc_db_preset\" \"example-db-postgres-preset\" {\n  location = \"ru-1\"\n\n  type = \"postgres\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n\nresource \"twc_db_postgres\" \"example-postgres\" {\n  name = \"example_postgres\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-postgres-preset.id\n\n  autovacuum_analyze_scale_factor = 0.001\n  bgwriter_delay = 101\n  bgwriter_lru_maxpages = 102\n  deadlock_timeout = 103\n  gin_pending_list_limit = 104\n  idle_in_transaction_session_timeout = 115\n  idle_session_timeout = 106\n  join_collapse_limit = 107\n  lock_timeout = 108\n  max_prepared_transactions = 109\n  max_connections = 110\n  shared_buffers = 111\n  wal_buffers = 112\n  temp_buffers = 113\n  work_mem = 114\n\n  is_external_ip = true\n\n  local_network {\n    id = twc_vpc.example-vpc.id\n    ip = \"192.168.0.14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Timeweb Cloud SSH Key into Terraform\nDESCRIPTION: This shell command demonstrates how to import an existing Timeweb Cloud SSH key into Terraform state management. The command associates the key identified by its numeric ID (e.g., `42`) with the Terraform resource named `twc_ssh_key.example` defined in the configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/ssh_key.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# SSH key can be imported by specifying the numeric identifier from URL\nterraform import twc_ssh_key.example 42\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating IP with DDoS Guard in Terraform\nDESCRIPTION: This Terraform resource creates a floating IP and enables DDoS protection for it. The availability zone and comment are specified.  Setting `ddos_guard = true` enables DDoS Guard for the floating IP.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/floating_ip.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n# Creata example floating IP with DDoS Guard\nresource \"twc_floating_ip\" \"example-floating-ip\" {\n  availability_zone = \"spb-3\"\n  ddos_guard        = true\n\n  comment = \"Some floating IP with DDoS Guard\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Rules to Created Balancer - Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to add rules to an existing load balancer. It uses the `twc_lb_rule` resource to define the specific routing rules, specifying the balancer protocol and port, as well as the server protocol and port. This configuration directs traffic from the balancer to the specified server ports and protocols. The `lb_id` references the ID of the previously created load balancer.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/lb_rule.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n// Add rules to created balancer\nresource \"twc_lb_rule\" \"example-lb-rule\" {\n  lb_id = resource.twc_lb.example-lb.id\n\n  balancer_proto = \"http2\"\n  balancer_port = 83\n  server_proto = \"http\"\n  server_port = 82\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database Cluster - Terraform\nDESCRIPTION: This code snippet demonstrates how to create a MySQL database cluster in Timeweb Cloud using the `twc_database_cluster` resource. It specifies the cluster's name, type (MySQL), and preset ID, referencing the previously queried database preset. The `config_parameters` argument allows overriding default database configuration parameters, in this case setting `auto_increment_increment` to `3`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_cluster.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_database_cluster\" \"example-mysql-8\" {\n  name = \"example_mysql_8\"\n\n  type = \"mysql\"\n\n  config_parameters = {\n    auto_increment_increment = 3\n  }\n\n  preset_id = data.twc_database_preset.example-db-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Timeweb Cloud LB Preset using Filters in Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to use the `twc_lb_preset` data source to find a suitable load balancer preset. It filters for presets capable of handling '10K' requests per second and having a price between 100 and 200 RUB using the nested `price_filter` block.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/lb_preset.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_lb_preset\" \"example-lb-preset\" {\n  requests_per_second = \"10K\"\n\n  price_filter {\n    from = 100\n    to = 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Image with Filters - Terraform\nDESCRIPTION: This Terraform snippet demonstrates the use of the `twc_image` data source to select an image. It filters images by name using the `name` attribute. This allows the user to fetch data of the specified image which is then used to configure resources like a server.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/image.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_image\" \"example-image\" {\n  name = \"TimewebCloud_Daring Jackdaw_15.08.2023\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Using Selected SSH Key - Terraform\nDESCRIPTION: This code snippet demonstrates how to create a server resource using the `twc_os`, `twc_presets` and `twc_ssh_keys` defined earlier. The `os_id`, `preset_id`, and `ssh_keys_ids` attributes of the `twc_server` resource are populated with the IDs of the selected OS, preset and SSH key, respectively, which retrieved by the data sources. This configuration assumes the successful retrieval of these resources before server creation.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/ssh_keys.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  preset_id = data.twc_presets.example-preset.id\n\n  ssh_keys_ids = [data.twc_ssh_keys.example-key.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing MongoDB Database Resource in Timeweb Cloud using Shell\nDESCRIPTION: This shell command illustrates how to import an existing MongoDB database resource into Terraform state by specifying the numeric identifier found in the URL. The terraform import command requires the resource type and resource name in the Terraform configuration, followed by the database ID as the argument. Prerequisites include a correctly configured Terraform provider and an existing resource already managed outside Terraform. The input is the numeric database ID, and successful import will enable further management within Terraform, but no physical changes to the resource occur.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mongodb.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Database can be imported by specifying the numeric identifier from URL\nterraform import twc_db_mongodb.example 42\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 5.7 Database Resource\nDESCRIPTION: This snippet illustrates the creation of a MySQL 5.7 database using the `twc_db_mysql_5` resource. It takes the `name`, `login`, `password`, and `preset_id` as required parameters, which are used to configure the database.  The `preset_id` is obtained from a `twc_db_preset` data source.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mysql_5.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n# Example usage of MySQL 5.7 database resource\nresource \"twc_db_mysql_5\" \"example-mysql-5\" {\n  name = \"example_mysql_5\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting K8S Worker Node Preset in Terraform\nDESCRIPTION: This Terraform configuration selects a K8S node group preset with 2 CPUs. It utilizes the `twc_k8s_preset` data source, specifying the `cpu` count and the `type` as \"worker\". This example demonstrates a simple selection based on CPU count and node type.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/k8s_preset.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n# Select preset for K8S node group with 2 CPUs\ndata \"twc_k8s_preset\" \"example-k8s-preset-worker\" {\n  cpu = 2\n  type = \"worker\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TWC Server with OS - Terraform\nDESCRIPTION: This snippet shows how to create a `twc_server` resource using the ID of a selected OS from the `twc_os` data source. It also uses the `twc_configurator` data source to configure the server's hardware resources such as disk, CPU, and RAM. The `os_id` attribute is set to the ID of the selected OS.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/os.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.example-os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.example-configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the twc_s3_configurator Data Source in Terraform\nDESCRIPTION: The snippet describes the schema of the 'twc_s3_configurator' data source, including optional filters for disk type, location, and storage class, as well as read-only attributes for resource ID and configuration requirements. The nested 'requirements' block specifies constraints such as maximum, minimum, and step sizes for disk capacities.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/s3_configurator.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n## Schema Definition for the twc_s3_configurator Data Source\n\n# Optional filters to narrow down configurations\n- `disk_type` (String):\n  Description: \"Disk type of the S3 configurator\"\n  Default/Example: \"nvme\"\n\n- `location` (String):\n  Description: \"Location of the S3 configurator\"\n  Default/Example: \"ru-1\"\n\n- `storage_class` (String):\n  Description: \"Storage class of the S3 configurator\"\n  Default/Example: \"cold\", \"hot\"\n\n# Read-only attributes providing resource identifiers and restrictions\n- `id` (String):\n  Description: \"The ID of this resource\"\n\n- `requirements` (Block List):\n  Description: \"Configuration limitations for the specified configurator\"\n  Nested schema:\n    - `disk_max` (Number):\n        Description: \"Maximum allowed disk size\"\n    - `disk_min` (Number):\n        Description: \"Minimum allowed disk size\"\n    - `disk_step` (Number):\n        Description: \"Step between allowed disk sizes\"\n```\n\n----------------------------------------\n\nTITLE: Resource: Creating a Postgres Database (Terraform)\nDESCRIPTION: This resource defines a new Postgres database with a specific name, login, password, and preset ID. It uses the `twc_db_postgres` resource to create a database instance.  The `preset_id` is obtained from the `twc_db_preset` data source.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_postgres.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_db_postgres\" \"example-postgres\" {\n  name = \"example_postgres\"\n\n  login = \"example_login\"\n  password = \"example_password\"\n\n  preset_id = data.twc_db_preset.example-db-preset.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Resource Schema for Timeweb Cloud Database Backup Schedule (HCL)\nDESCRIPTION: This HCL schema defines the attributes for the `twc_database_backup_schedule` Terraform resource. It includes required fields like `cluster_id`, `copy_count`, `creation_start_at`, and `interval`, optional fields like `day_of_week` and `enabled`, and a read-only `id` field. This allows users to declaratively manage Timeweb Cloud database backup configurations.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_backup_schedule.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n### Required\n\n- `cluster_id` (Number) Database cluster ID for which database auto backups should be configured\n- `copy_count` (Number) Maximum stored copy count\n- `creation_start_at` (String) Creation date for first backup\n- `interval` (String) Interval between auto backups\n\n### Optional\n\n- `day_of_week` (Number) Day of the week when auto backup should be created. Allowed only for week interval, counting starts from 1 (Monday)\n- `enabled` (Boolean) Enable auto backups\n\n### Read-Only\n\n- `id` (String) The ID of this resource.\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Resources\nDESCRIPTION: This shell command, `terraform destroy`, removes all resources managed by the Terraform configuration. It prompts for confirmation before deleting resources. This command should be used carefully as it can lead to the loss of data.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Example Server Configuration - HCL\nDESCRIPTION: This configuration creates a virtual machine on Timeweb Cloud. It defines the provider, retrieves data for the OS and configuration, and defines the server resource itself. Dependencies include the Timeweb Cloud provider.  Key parameters include `name`, `os_id`, and the `configuration` block that defines the server's resources.  The output is a server instance in Timeweb Cloud.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    twc = {\n      source = \"tf.timeweb.cloud/timeweb-cloud/timeweb-cloud\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n\ndata \"twc_configurator\" \"configurator\" {\n  location = \"ru-1\"\n  disk_type = \"nvme\"\n}\n\ndata \"twc_os\" \"os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\nresource \"twc_server\" \"example-server\" {\n  name = \"Example server\"\n  os_id = data.twc_os.os.id\n\n  configuration {\n    configurator_id = data.twc_configurator.configurator.id\n    disk = 1024 * 10\n    cpu = 1\n    ram = 1024\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Filtering TWC OS Data Source - Terraform\nDESCRIPTION: This snippet demonstrates how to filter the `twc_os` data source to select an OS with a specific name and version. The `name` and `version` parameters are used as filters to find a suitable OS. The selected OS's ID can then be used to create a server with that OS.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/os.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_os\" \"example-os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Configurator Data Source by Location - Terraform\nDESCRIPTION: Defines a Terraform data source to select a Timeweb Cloud server configurator filtered by location. The 'location' parameter (e.g., 'ru-1') constrains the selection to configurators available in the specified physical data center. This enables conditional selection of hardware configurations suitable for resource deployment within a specific region.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/configurator.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_configurator\" \"example-configurator\" {\n  location = \"ru-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TWC Configurator - Terraform\nDESCRIPTION: This snippet retrieves a `twc_configurator` data source by its location. It is used as a prerequisite for creating a server with a specific OS and hardware configuration. The `location` parameter specifies the desired location for the configurator.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/os.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"twc_configurator\" \"example-configurator\" {\n  location = \"ru-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Preset Data - Terraform\nDESCRIPTION: This Terraform code snippet fetches preset data from the Timeweb Cloud provider using the `twc_presets` data source.  It filters based on `location`, `disk_type`, `cpu_frequency`, `cpu`, `ram`, `disk`, `bandwidth`, `description_short`, and `price_filter`.  The `price_filter` uses `from` and `to` to define a price range. The output is a data structure containing preset details, used for creating servers. This requires a valid Timeweb Cloud provider configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"twc_presets\" \"preset\" {\n  location = \"ru-1\"\n  disk_type = \"nvme\"\n  cpu_frequency = \"3.3\"\n  cpu = 1\n  ram = 2048\n  disk = 30720\n  bandwidth = 200\n  description_short = \"Cloud 30\"\n\n  price_filter {\n    from = 300\n    to = 400\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Terraform Configuration\nDESCRIPTION: This shell command runs the `terraform validate` command to check the syntax and validity of your Terraform configuration files.  It helps ensure the configuration is correct before applying any changes.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nterraform validate\n```\n\n----------------------------------------\n\nTITLE: Defining twc_database_cluster Data Source Schema in Terraform\nDESCRIPTION: This schema defines the structure of the twc_database_cluster data source in Terraform. It includes optional filter parameters and read-only attributes that provide detailed information about the selected database cluster.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/database_cluster.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Schema for twc_database_cluster data source\n\n# Optional filter parameters\navailability_zone (String) # Availability zone for database cluster\nid (String) # Database cluster ID\nlocation (String) # Location where database cluster was created\nname (String) # Name of specified database cluster\ntype (String) # Type of specified database cluster\n\n# Read-only attributes\ndescription (String) # Description of specified database cluster\ndisk_stats (List of Object) # Information about database disk stats\nis_external_ip (Boolean) # Flag that shows allowability database only by external IP address\nnetworks (List of Object) # Network configuration information\nparameters (Map of String) # Configuration parameters for database cluster\nport (Number) # Listening port for incoming connections\nstatus (String) # Current status of database cluster (started, starting, stopped, no_paid)\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Token - Bash\nDESCRIPTION: This bash snippet shows how to set the TWC_TOKEN environment variable, which is one way of authenticating with the Timeweb Cloud provider.  It's an alternative to providing the token directly in the provider block. This is a command-line instruction, typically executed before running Terraform commands.  It sets an environment variable that can be accessed by the Terraform provider.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport TWC_TOKEN=eyJhbGc...\n```\n\n----------------------------------------\n\nTITLE: Creating Server with Preset - Terraform\nDESCRIPTION: This Terraform code creates a server resource (`vds-with-preset`) using the `twc_server` resource. It sets the `name` and `os_id` from the `twc_os` data source and `preset_id` from the `twc_presets` data source. The input requires valid OS and preset IDs. The output is the creation of a server in Timeweb Cloud with the specified configuration.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/firewall.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"twc_server\" \"vds-with-preset\" {\n  name = \"Some server with preset\"\n  os_id = data.twc_os.os.id\n\n  preset_id = data.twc_presets.preset.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Provider\nDESCRIPTION: This snippet initializes the Terraform provider for Timeweb Cloud. It specifies the provider's source and the required Terraform version.  This is a fundamental step for using the provider.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    twc = {\n      source = \"tf.timeweb.cloud/timeweb-cloud/timeweb-cloud\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider using Token\nDESCRIPTION: This snippet demonstrates how to configure the Timeweb Cloud provider by providing an API token.  The token allows the provider to authenticate with the Timeweb Cloud API and manage resources. The `token` parameter should be replaced with the actual API token.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"twc\" {\n  token = \"eyJhbGci...\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Configuration - Bash\nDESCRIPTION: This command validates the configuration files using Terraform.  It checks for syntax errors and other configuration issues. Prerequisites include a configured Terraform environment and configuration files. The command `terraform validate` performs the validation. The output will be a success message or an error message.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nterraform validate\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for twc_floating_ip Data Source (HCL)\nDESCRIPTION: Defines the optional filter attributes for the `twc_floating_ip` data source in Terraform. These attributes allow users to query Timeweb Cloud for floating IPs based on criteria like ID, IP address, availability zone, comment, DDoS guard status, PTR record, and associated resource ID/type. The `resource` block is nested to specify the linked resource.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/floating_ip.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n## Schema\n\n### Optional\n\n- `availability_zone` (String) Address of specified floating IP Address\n- `comment` (String) Comment of specified floating IP Address\n- `ddos_guard` (Boolean) Enabled DDoS Guard for specified floating IP Address\n- `id` (String) ID of specified floating IP Address\n- `ip` (String) Address of specified floating IP Address\n- `ptr` (String) PTR record in DNS zone of specified floating IP Address\n- `resource` (Block List, Max: 1) Address of specified floating IP Address (see [below for nested schema](#nestedblock--resource))\n\n<a id=\"nestedblock--resource\"></a>\n### Nested Schema for `resource`\n\nOptional:\n\n- `id` (String) ID of resource that bind with floating IP Address\n- `type` (String) Type of resource that bind with floating IP Address\n```\n\n----------------------------------------\n\nTITLE: Initializing Provider - HCL\nDESCRIPTION: This snippet shows the initial setup for the Timeweb Cloud provider within a Terraform configuration file. It specifies the required provider source and version. It's a prerequisite for interacting with Timeweb Cloud resources. The `required_providers` block declares that the `twc` provider is needed. The `required_version` specifies the minimal required Terraform version.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    twc = {\n      source = \"tf.timeweb.cloud/timeweb-cloud/timeweb-cloud\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: twc_database_backup Resource Schema\nDESCRIPTION: This schema defines the structure and attributes of the `twc_database_backup` resource in Terraform. It includes required attributes such as `cluster_id`, optional attributes like `comment`, and read-only attributes that provide information about the created backup.  The schema details the data types and descriptions for each attribute, allowing users to effectively configure and manage database backups.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/database_backup.md#_snippet_0\n\nLANGUAGE: Schema\nCODE:\n```\n## Schema\n\n### Required\n\n- `cluster_id` (Number) Database cluster ID for which backup should be created\n\n### Optional\n\n- `comment` (String) Comment for backup\n\n### Read-Only\n\n- `created_at` (String) Date when backup was created\n- `id` (String) The ID of this resource.\n- `name` (String) Name of backup\n- `size` (Number) Backups size\n- `status` (String) Current status of backup\n- `type` (String) Backup type (`manual` or `auto`)\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Token - HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the Timeweb Cloud provider with an API token.  The token is used for authentication.  It can be provided via an environment variable (TWC_TOKEN) or directly within the provider block. The `token` parameter in the provider block specifies the API token value, which is a sensitive piece of information.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"twc\" {\n  # Token may be configured from environment variable\n  #   export TWC_TOKEN=eyJhbGc...\n  # or used as provider parameter\n  token = \"eyJhbGci...\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration\nDESCRIPTION: This shell command applies the Terraform configuration, creating or modifying resources defined in the configuration files. The `terraform apply` command will prompt the user for confirmation before making any changes.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Fetching OS Data\nDESCRIPTION: This HCL code fetches OS data using the `twc_os` data source. It filters the OS data by `name` and `version`.  The data returned includes the OS ID, which can be used to create a server.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"twc_os\" \"os\" {\n  name = \"ubuntu\"\n  version = \"22.04\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Configuration\nDESCRIPTION: This shell command, `terraform plan`, generates an execution plan. It shows the changes Terraform will make to your infrastructure when you apply the configuration. It doesn't make any changes but is a critical step for reviewing changes before applying.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration - Bash\nDESCRIPTION: This command applies the configuration to create or modify resources in Timeweb Cloud. Prerequisites include a valid Terraform plan and a configured Terraform environment.  The command `terraform apply` is used.  The output is the result of the resource creation or modification and requires manual confirmation by typing \"yes\".\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating Plan - Bash\nDESCRIPTION: This command generates an execution plan.  The plan outlines the changes that Terraform will make to your infrastructure when applying the configuration.  This is a dry-run, and it does not actually modify resources. Prerequisites include a configured Terraform environment and configuration files. The command `terraform plan` generates the plan. The output is a list of planned changes.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Timeweb Cloud Project into Terraform State\nDESCRIPTION: This shell command demonstrates how to import an existing Timeweb Cloud project into Terraform management. Replace `twc_project.example` with the Terraform resource address and `42` with the actual numeric ID of the project found in the Timeweb Cloud control panel URL.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/project.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Project can be imported by specifying the numeric identifier from URL\nterraform import twc_project.example 42\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Servers in Timeweb Cloud\nDESCRIPTION: Demonstrates how to import an existing Timeweb Cloud server into Terraform state. This example shows the command to import a server using its numeric identifier from the URL.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Server can be imported by specifying the numeric identifier (from URL)\nterraform import twc_server.example 42\n```\n\n----------------------------------------\n\nTITLE: Importing a Floating IP resource in Terraform\nDESCRIPTION: This Terraform command demonstrates how to import an existing `twc_floating_ip` resource into your Terraform state.  The identifier (ID) of the floating IP must be provided. The ID is typically obtained from the Timeweb Cloud console or API.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/floating_ip.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Floating IP can be imported by specifying the identifier (from URL)\nterraform import twc_server.example 968769c4-06ac-4b37-8e21-1fc8ff6c5a9b\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Server Disks in Terraform\nDESCRIPTION: This snippet shows the shell command syntax for importing an existing server disk into Terraform state. The import requires specifying both the server ID and the disk ID in a specific format.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_disk.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Server disk can be imported by specifying the numeric identifier in format SERVER-ID/SERVER-DISK-ID (all parameters from URL)\nterraform import twc_server_disk.example 42/13\n```\n\n----------------------------------------\n\nTITLE: Importing Server Disk Backups with Terraform Shell Command\nDESCRIPTION: This snippet provides the shell command syntax to import an existing Timeweb Cloud server disk backup into the Terraform state. The command uses `terraform import` and requires the Terraform resource address (e.g., `twc_server_disk_backup.example`) followed by a specific import ID format: `SERVER-ID/SERVER-DISK-ID/SERVER-DISK-BACKUP-ID`. This allows managing resources created outside of Terraform.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_disk_backup.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import twc_server_disk_backup.example 42/13/5\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL Database Resource\nDESCRIPTION: This snippet shows how to import an existing `twc_db_mysql_5` resource into Terraform state.  The import command uses the resource's identifier (e.g., numeric ID) to associate the managed resource with the Terraform configuration.  This facilitates management of an existing resource from Terraform.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_mysql_5.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\n# Database can be imported by specifying the numeric identifier from URL\nterraform import twc_db_mysql_5.example 42\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Postgres Database (Terraform)\nDESCRIPTION: This code snippet shows how to import an existing Postgres database into Terraform management. It uses the `terraform import` command with the resource name and the numeric identifier of the database obtained from the Timeweb Cloud URL. This allows managing pre-existing resources with Terraform.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/db_postgres.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Database can be imported by specifying the numeric identifier from URL\nterraform import twc_db_postgres.example 42\n```\n\n----------------------------------------\n\nTITLE: Importing a Server IP Resource into Terraform State\nDESCRIPTION: This shell command shows how to import an existing Timeweb Cloud server IP address into Terraform management using the `terraform import` command. The import requires the resource type (`twc_server_disk_backup`), a chosen Terraform resource name (`example`), and the unique identifier composed of the server ID and the IP address (e.g., `42/1.1.1.1`). Note: The example shows `twc_server_disk_backup` but context implies it should be `twc_server_ip`.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/resources/server_ip.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Server IP can be imported by specifying the numeric identifier in format SERVER-ID/SERVER-IP (SERVER-ID from URL)\nterraform import twc_server_disk_backup.example 42/1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Selecting K8S Master Node Preset in Terraform\nDESCRIPTION: This Terraform configuration selects a K8S master node preset with 4 CPUs and a price between 1000 and 2000. It uses the `twc_k8s_preset` data source and specifies `cpu` and `type` along with a `price_filter` block to define the price range. The `from` and `to` attributes within `price_filter` define the minimum and maximum prices respectively.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/data-sources/k8s_preset.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n# Select preset for K8S master node with 4 CPUs and price between 1000 and 2000\ndata \"twc_k8s_preset\" \"example-k8s-preset-master\" {\n  cpu = 4\n  type = \"master\"\n\n  price_filter {\n    from = 1000\n    to = 2000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Resources - Bash\nDESCRIPTION: This command removes all resources managed by Terraform.  It is a destructive operation. Prerequisites are a configured Terraform environment and the existing managed resources.  The command `terraform destroy` is used.  The output is the confirmation prompt and the resources being destroyed. Manual confirmation via typing \"yes\" is required.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Setting API Token Environment Variable\nDESCRIPTION: This shell command sets the `TWC_TOKEN` environment variable, which is then used by the Terraform provider for authentication. The token should be obtained from the Timeweb Cloud control panel. This is a common way to provide sensitive information securely.\nSOURCE: https://github.com/timeweb-cloud/terraform-provider-timeweb-cloud/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport TWC_TOKEN=eyJhbGc...\n```"
  }
]