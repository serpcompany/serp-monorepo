[
  {
    "owner": "dry-rb",
    "repo": "dry-struct",
    "content": "TITLE: Defining and Using a Basic Struct in Ruby with dry-struct\nDESCRIPTION: This snippet demonstrates how to define a User struct with typed attributes using dry-struct and dry-types. It shows how to create instances of the struct and access its attributes.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/index.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry-struct'\n\nmodule Types\n  include Dry.Types()\nend\n\nclass User < Dry::Struct\n  attribute :name, Types::String.optional\n  attribute :age, Types::Coercible::Integer\nend\n\nuser = User.new(name: nil, age: '21')\n\nuser.name # nil\nuser.age # 21\n\nuser = User.new(name: 'Jane', age: '21')\n\nuser.name # => \"Jane\"\nuser.age # => 21\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Structs in Ruby using dry-struct\nDESCRIPTION: This snippet shows how to define a User struct with a nested Address struct using the dry-struct gem. It demonstrates attribute definition and automatic constant creation for nested structs.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/nested-structs.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attribute :address do\n    attribute :city,   Types::String\n    attribute :street, Types::String\n  end\nend\n\nUser.new(name: 'Jane', address: { city: 'London', street: 'Oxford' })\n# => #<User name=\"Jane\" address=#<User::Address city=\"London\" street=\"Oxford\">>\n\n# constants for nested structs are automatically defined\nUser::Address\n# => User::Address\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dry::Struct Base Class (Ruby)\nDESCRIPTION: This example shows how to create a custom base struct class that combines multiple features such as strict schema, key symbolization, and default value resolution for nil. This class can be reused across an application or gem.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyStruct < Dry::Struct\n  # throw an error when unknown keys provided\n  schema schema.strict\n\n  # convert string keys to symbols\n  transform_keys(&:to_sym)\n\n  # resolve default types on nil\n  transform_types do |type|\n    if type.default?\n      type.constructor do |value|\n        value.nil? ? Dry::Types::Undefined : value\n      end\n    else\n      type\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Attributes in Dry::Struct (Ruby)\nDESCRIPTION: This example demonstrates how to assign default values to attributes in a Dry::Struct class. It uses the default method on the type to specify a default value.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attribute :age,  Types::Integer.default(18)\nend\n\nUser.new(name: 'Jane')\n# => #<User name=\"Jane\" age=18>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Attributes in Dry::Struct (Ruby)\nDESCRIPTION: This snippet shows how to mark certain attributes as optional in a Dry::Struct class using the attribute? method. Optional attributes can be omitted without raising an error.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attribute? :age, Types::Integer\nend\n\nuser = User.new(name: 'Jane')\n# => #<User name=\"Jane\" age=nil>\nuser.age\n# => nil\n```\n\n----------------------------------------\n\nTITLE: Composing Structs in Dry::Struct (Ruby)\nDESCRIPTION: These examples show how to compose structs by reusing attributes from other struct classes. The first snippet demonstrates top-level composition, while the second shows composition within a nested attribute.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Address < Dry::Struct\n  attribute :city, Types::String\n  attribute :country, Types::String\nend\n\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attributes_from Address\nend\n\nUser.new(name: 'Quispe', city: 'La Paz', country: 'Bolivia')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attribute :address do\n    attributes_from Address\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Nested Hashes in Dry::Struct (Ruby)\nDESCRIPTION: These snippets demonstrate two approaches to setting default values for nested attributes in a Dry::Struct class. The first uses an inline nested schema, while the second defines a separate struct class for the nested attribute.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Foo < Dry::Struct\n  attribute :bar do\n    attribute :nested, Types::Integer\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Foo < Dry::Struct\n  class Bar < Dry::Struct\n    attribute :nested, Types::Integer\n  end\n\n  attribute :bar, Bar.default { Bar.new(nested: 1) }\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Dry::Struct.call in Ruby\nDESCRIPTION: Example showing how to use Struct.call with a block for error handling on failed coercion, providing a fallback value when coercion fails.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nUser = Dry::Struct(name: 'string')\nUser.(1) { :oh_no }\n# => :oh_no\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Attributes with attribute? in Dry::Struct\nDESCRIPTION: Example showing how to define optional attributes using the attribute? method, which creates attributes that can be omitted when constructing the struct.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute  :name,  Types::Strict::String\n  attribute? :email, Types::Strict::String\nend\n# User.new(name: 'John') # => #<User name=\"John\">\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Struct Attributes in Ruby with Dry::Struct\nDESCRIPTION: Example of creating a User class with optional nested address attribute using Dry::Struct.optional. The address can be set to nil without raising validation errors.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::String\n  attribute :address, Dry::Struct.optional do\n    attribute :city, Types::String\n  end\nend\n\nUser.new(name: \"John\", address: nil) # => #<User name=\"John\" address=nil>\n```\n\n----------------------------------------\n\nTITLE: Using Hash Schemas with Key Transformation in dry-struct\nDESCRIPTION: This snippet demonstrates how to use hash schemas from dry-types to process input hashes in dry-struct. It shows how to transform keys to symbols using the transform_keys method.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/index.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  transform_keys(&:to_sym)\n\n  attribute :name, Types::String.optional\n  attribute :age, Types::Coercible::Integer\nend\n\nUser.new('name' => 'Jane', 'age' => '21')\n# => #<User name=\"Jane\" age=21>\n```\n\n----------------------------------------\n\nTITLE: Symbolizing Input Keys in Dry::Struct (Ruby)\nDESCRIPTION: This snippet shows how to automatically symbolize input keys when creating a Dry::Struct instance. It uses the transform_keys method to convert string keys to symbols.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry-struct'\n\nmodule Types\n  include Dry.Types()\nend\n\nclass User < Dry::Struct\n  transform_keys(&:to_sym)\n\n  attribute :name, Types::String\nend\n\nUser.new('name' => 'Jane')\n# => #<User name=\"Jane\">\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Keys in Dry::Struct with transform_types\nDESCRIPTION: Example of using transform_types to make all struct attributes optional (omittable) by transforming each key to be non-required.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass StructWithOptionalKeys < Dry::Struct\n  transform_types { |key| key.required(false) }\n  # or simply\n  transform_types(&:omittable)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching with Dry::Struct in Ruby\nDESCRIPTION: Example of Ruby pattern matching syntax with Dry::Struct objects using deconstruct_keys. This allows extracting struct attributes directly in case statements.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nUser = Dry.Struct(name: 'string', email: 'string')\n\nuser = User.new(name: 'John Doe', email: 'john@acme.org')\n\ncase user\nin User(name: 'John Doe', email:)\n  puts email\nelse\n  puts 'Not John'\nend\n```\n\n----------------------------------------\n\nTITLE: Struct Composition with attributes_from in Ruby\nDESCRIPTION: Example showing how to use attributes_from for flexible struct composition as an alternative to inheritance. This allows reusing attributes from an Address struct in both Buyer and Seller structs.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Address < Dry::Struct\n  attribute :city, Types::String\n  attribute :zipcode, Types::String\nend\n\nclass Buyer < Dry::Struct\n  attribute :name, Types::String\n  attributes_from Address\nend\n\nclass Seller < Dry::Struct\n  attribute :name, Types::String\n  attribute :email, Types::String\n  attributes_from Address\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays of Nested Structs in Ruby using dry-struct\nDESCRIPTION: This snippet illustrates how to define an array of nested structs within the User class. It also shows that constants for nested structs are still automatically defined.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/nested-structs.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :addresses, Types::Array do\n    attribute :city,   Types::String\n    attribute :street, Types::String\n  end\nend\n\n# constants are still there!\nUser::Address\n# => User::Address\n```\n\n----------------------------------------\n\nTITLE: Resolving Default Values on nil in Dry::Struct (Ruby)\nDESCRIPTION: This snippet shows how to replace nil values with default values in a Dry::Struct class. It uses transform_types to create a custom type constructor that maps nil to Dry::Types::Undefined.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  transform_types do |type|\n    if type.default?\n      type.constructor do |value|\n        value.nil? ? Dry::Types::Undefined : value\n      end\n    else\n      type\n    end\n  end\n\n  attribute :name, Types::String\n  attribute :age,  Types::Integer.default(18)\nend\n\nUser.new(name: 'Jane')\n# => #<User name=\"Jane\" age=18>\nUser.new(name: 'Jane', age: nil)\n# => #<User name=\"Jane\" age=18>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Structs in Dry::Struct (Ruby)\nDESCRIPTION: Illustrates how to define nested structs and arrays within a Dry::Struct class, automatically creating nested constants.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Types::Strict::String\n  attribute :address do\n    attribute :country, Types::Strict::String\n    attribute :city, Types::Strict::String\n  end\n  attribute :accounts, Types::Strict::Array do\n    attribute :currency, Types::Strict::String\n    attribute :balance, Types::Strict::Decimal\n  end\nend\n\n# ^This automatically defines User::Address and User::Account\n```\n\n----------------------------------------\n\nTITLE: Using Custom Base Classes for Nested Structs in Ruby with dry-struct\nDESCRIPTION: This example demonstrates how to use a custom base class (MyStruct) for a nested struct within the User class, instead of the default Dry::Struct.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/nested-structs.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :address, MyStruct do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Dry::Struct Schema Keys\nDESCRIPTION: Example showing how to iterate through a struct's schema keys to access their names and types, plus how to retrieve a specific key by name.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nUser.schema.each do |key|\n  puts \"Key name: #{ key.name }\"\n  puts \"Key type: #{ key.type }\"\nend\n\nUser.schema.key(:id) # => #<Dry::Types::Hash::Key ...>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Key Checking in Dry::Struct (Ruby)\nDESCRIPTION: This example demonstrates how to make a Dry::Struct class intolerant to extra keys. It uses the schema.strict method to raise an error when unexpected keys are provided.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/recipes.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  # This does the trick\n  schema schema.strict\n\n  attribute :name, Types::String\nend\n\nUser.new(name: 'Jane', age: 21)\n# => Dry::Struct::Error ([User.new] unexpected keys [:age] in Hash input)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Key Transformations in Nested Dry::Struct Classes\nDESCRIPTION: Demonstrates how nested structures inherit key transformations from the parent struct when defined inline, but not when given an explicit parent struct.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  transform_keys(&:to_sym)\n\n  attribute :name, Types::String\n  attribute :address do\n    # this struct will inherit transform_keys(&:to_sym)\n    attribute :city, Types::String\n  end\n\n  # nested struct will _not_ transform keys because a parent\n  # struct is given\n  attribute :contacts, Dry::Struct do\n    attribute :email, Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Struct for Key Symbolization in Ruby\nDESCRIPTION: This example shows how to create a base struct class that symbolizes input keys, which can then be inherited by other struct classes to reuse the key transformation functionality.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/index.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass SymbolizeStruct < Dry::Struct\n  transform_keys(&:to_sym)\nend\n\nclass User < SymbolizeStruct\n  attribute :name, Types::String.optional\n  attribute :age, Types::Coercible::Integer\nend\n```\n\n----------------------------------------\n\nTITLE: Using Struct.meta in Dry::Struct (Ruby)\nDESCRIPTION: Shows how to use Struct.meta to create a new class with metadata, highlighting that it returns a new class.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  attribute :name, Dry::Types['strict.string']\nend\n\nUserWithMeta = User.meta(foo: :bar)\n\nUser.new(name: 'Jade').class == UserWithMeta.new(name: 'Jade').class # => false\n```\n\n----------------------------------------\n\nTITLE: Transforming Types in Dry::Struct (Ruby)\nDESCRIPTION: Example of using transform_types to evaluate defaults on nil values in a Dry::Struct class.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < Dry::Struct\n  transform_types do |type|\n    type.constructor { |value| value.nil? ? Undefined : value  }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dry::Struct with Attribute Hash (Ruby)\nDESCRIPTION: Demonstrates how to build a Dry::Struct using a hash of attribute names and types.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nUser = Dry::Struct(name: 'strict.string') do\n  attribute :email, 'strict.string'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Object with dry-struct in Ruby\nDESCRIPTION: This example shows how to define a Location value object using Dry::Struct::Value. Value objects are deeply frozen and compared by value. Note that Dry::Struct::Value is deprecated as of version 1.2.0.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/docsite/source/index.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Location < Dry::Struct::Value\n  attribute :lat, Types::Float\n  attribute :lng, Types::Float\nend\n\nloc1 = Location.new(lat: 1.23, lng: 4.56)\nloc2 = Location.new(lat: 1.23, lng: 4.56)\n\nloc1.frozen? # true\nloc2.frozen? # true\n\nloc1 == loc2\n# true\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretty Print Extension for Dry::Struct\nDESCRIPTION: Example showing how to load and use the pretty_print extension for improved formatting of Dry::Struct objects when using PP.pp.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Struct.load_extensions(:pretty_print)\nPP.pp(user)\n#<Test::User\n name=\"Jane\",\n age=21,\n address=#<Test::Address city=\"NYC\", zipcode=\"123\">>\n```\n\n----------------------------------------\n\nTITLE: Activating SuperDiff Extension in RSpec for Dry::Struct\nDESCRIPTION: Code to activate the super_diff extension in your spec_helper file, enabling improved diff output for Dry::Struct objects in test failures.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Struct.load_extensions(:super_diff)\n```\n\n----------------------------------------\n\nTITLE: Installing SuperDiff Extension with Bundler in Ruby\nDESCRIPTION: Adding the super_diff gem to your Gemfile for improved struct diffing in RSpec tests. This should be added to the test group.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'super_diff', group: :test\n```\n\n----------------------------------------\n\nTITLE: Enhanced SuperDiff Output Example for Dry::Struct\nDESCRIPTION: Example showing the improved SuperDiff extension output when comparing two Dry::Struct objects, highlighting only the differing age property with +/- indicators.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpected: #<Test::User name: \"Jane\", age: 22>\n      got: #<Test::User name: \"Jane\", age: 21>\n\n(compared using eql?)\n\n  #<Test::User {\n    name: \"Jane\",\n-   age: 22\n+   age: 21\n  }>\n```\n\n----------------------------------------\n\nTITLE: Standard RSpec Diff Output Example for Dry::Struct\nDESCRIPTION: Example showing the standard RSpec diff output when comparing two Dry::Struct objects with a difference in the age property.\nSOURCE: https://github.com/dry-rb/dry-struct/blob/main/CHANGELOG.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nexpected: #<Test::User name=\"Jane\" age=22>\n      got: #<Test::User name=\"Jane\" age=21>\n\n(compared using eql?)\n\nDiff:\n@@ -1 +1 @@\n-#<Test::User name=\"Jane\" age=22>\n+#<Test::User name=\"Jane\" age=21>\n```"
  }
]