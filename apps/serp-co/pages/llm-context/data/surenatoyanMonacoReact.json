[
  {
    "owner": "suren-atoyan",
    "repo": "monaco-react",
    "content": "TITLE: Basic Monaco Editor Integration in React\nDESCRIPTION: Simple example of integrating Monaco Editor into a React application using the Editor component.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  return <Editor height=\"90vh\" defaultLanguage=\"javascript\" defaultValue=\"// some comment\" />;\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Using onChange Prop with Monaco Editor in React\nDESCRIPTION: Example of using the onChange prop to get the current value of Monaco Editor when it changes.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  function handleEditorChange(value, event) {\n    console.log('here is the current model value:', value);\n  }\n\n  return (\n    <Editor\n      height=\"90vh\"\n      defaultLanguage=\"javascript\"\n      defaultValue=\"// some comment\"\n      onChange={handleEditorChange}\n    />\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Accessing Monaco Instance via onMount/beforeMount in React\nDESCRIPTION: This snippet demonstrates how to access the Monaco editor instance using onMount and beforeMount callbacks in a React component. It shows how to store the instance in a ref and perform actions before and after the editor is mounted.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  const monacoRef = useRef(null);\n\n  function handleEditorWillMount(monaco) {\n    // here is the monaco instance\n    // do something before editor is mounted\n    monaco.languages.typescript.javascriptDefaults.setEagerModelSync(true);\n  }\n\n  function handleEditorDidMount(editor, monaco) {\n    // here is another way to get monaco instance\n    // you can also store it in `useRef` for further usage\n    monacoRef.current = monaco;\n  }\n\n  return (\n    <Editor\n      height=\"90vh\"\n      defaultLanguage=\"javascript\"\n      defaultValue=\"// some comment\"\n      beforeMount={handleEditorWillMount}\n      onMount={handleEditorDidMount}\n    />\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-model Editor in React\nDESCRIPTION: This snippet demonstrates how to implement a multi-model editor in React using the @monaco-editor/react package. It shows how to switch between different files and maintain separate models for each file.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  const [fileName, setFileName] = useState('script.js');\n\n  const file = files[fileName];\n\n  return (\n    <>\n      <button disabled={fileName === 'script.js'} onClick={() => setFileName('script.js')}>\n        script.js\n      </button>\n      <button disabled={fileName === 'style.css'} onClick={() => setFileName('style.css')}>\n        style.css\n      </button>\n      <button disabled={fileName === 'index.html'} onClick={() => setFileName('index.html')}>\n        index.html\n      </button>\n      <Editor\n        height=\"80vh\"\n        theme=\"vs-dark\"\n        path={file.name}\n        defaultLanguage={file.language}\n        defaultValue={file.value}\n      />\n    </>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Monaco Editor Instance\nDESCRIPTION: Shows how to create a custom Monaco Editor instance using the loader utility, allowing for more control over the editor setup.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport loader from '@monaco-editor/loader';\n\nloader.init().then((monaco) => {\n  const wrapper = document.getElementById('root');\n  wrapper.style.height = '100vh';\n  const properties = {\n    value: 'function hello() {\\n\\talert(\"Hello world!\");\\n}',\n    language: 'javascript',\n  };\n\n  monaco.editor.create(wrapper, properties);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onValidate in Monaco React Editor\nDESCRIPTION: Demonstrates how to use the onValidate property in the Monaco React Editor to handle validation events and log model markers.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  function handleEditorValidation(markers) {\n    // model markers\n    markers.forEach((marker) => console.log('onValidate:', marker.message));\n  }\n\n  return (\n    <Editor\n      height=\"90vh\"\n      defaultLanguage=\"javascript\"\n      defaultValue=\"// let's write some broken code ðŸ˜ˆ\"\n      onValidate={handleEditorValidation}\n    />\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Accessing Monaco Instance via useMonaco Hook\nDESCRIPTION: This snippet demonstrates how to access the Monaco editor instance using the useMonaco hook in a React component. It shows how to handle the asynchronous initialization of Monaco and perform actions once the instance is available.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor, { useMonaco } from '@monaco-editor/react';\n\nfunction App() {\n  const monaco = useMonaco();\n\n  useEffect(() => {\n    if (monaco) {\n      console.log('here is the monaco instance:', monaco);\n    }\n  }, [monaco]);\n\n  return <Editor height=\"90vh\" defaultValue=\"// some comment\" defaultLanguage=\"javascript\" />;\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Using useMonaco Hook with Conditional Chaining\nDESCRIPTION: This snippet shows how to use the useMonaco hook with conditional chaining to safely access the Monaco instance. It demonstrates how to handle the asynchronous initialization and perform actions only when the instance is available.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor, { useMonaco } from '@monaco-editor/react';\n\nfunction App() {\n  const monaco = useMonaco();\n\n  useEffect(() => {\n    // do conditional chaining\n    monaco?.languages.typescript.javascriptDefaults.setEagerModelSync(true);\n    // or make sure that it exists by other ways\n    if (monaco) {\n      console.log('here is the monaco instance:', monaco);\n    }\n  }, [monaco]);\n\n  return <Editor height=\"90vh\" defaultValue=\"// some comment\" defaultLanguage=\"javascript\" />;\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Accessing Monaco Editor Instance in React\nDESCRIPTION: Example of accessing the Monaco Editor instance using the onMount prop and storing it in a ref for further usage.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  const editorRef = useRef(null);\n\n  function handleEditorDidMount(editor, monaco) {\n    // here is the editor instance\n    // you can store it in `useRef` for further usage\n    editorRef.current = editor;\n  }\n\n  return (\n    <Editor\n      height=\"90vh\"\n      defaultLanguage=\"javascript\"\n      defaultValue=\"// some comment\"\n      onMount={handleEditorDidMount}\n    />\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Accessing Monaco Editor Value in React\nDESCRIPTION: Example of accessing the current value of Monaco Editor using a ref and a button click event.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Editor from '@monaco-editor/react';\n\nfunction App() {\n  const editorRef = useRef(null);\n\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n\n  function showValue() {\n    alert(editorRef.current.getValue());\n  }\n\n  return (\n    <>\n      <button onClick={showValue}>Show value</button>\n      <Editor\n        height=\"90vh\"\n        defaultLanguage=\"javascript\"\n        defaultValue=\"// some comment\"\n        onMount={handleEditorDidMount}\n      />\n    </>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n```\n\n----------------------------------------\n\nTITLE: Using Monaco Editor as npm Package with Vite\nDESCRIPTION: This snippet shows how to use Monaco editor as an npm package with Vite. It demonstrates how to import Monaco and configure workers for different languages.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loader } from '@monaco-editor/react';\n\nimport * as monaco from 'monaco-editor';\nimport editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';\nimport jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';\nimport cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';\nimport htmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';\nimport tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';\n\nself.MonacoEnvironment = {\n  getWorker(_, label) {\n    if (label === 'json') {\n      return new jsonWorker();\n    }\n    if (label === 'css' || label === 'scss' || label === 'less') {\n      return new cssWorker();\n    }\n    if (label === 'html' || label === 'handlebars' || label === 'razor') {\n      return new htmlWorker();\n    }\n    if (label === 'typescript' || label === 'javascript') {\n      return new tsWorker();\n    }\n    return new editorWorker();\n  },\n};\n\nloader.config({ monaco });\n\nloader.init().then(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Configuring Monaco Editor Loader\nDESCRIPTION: This snippet demonstrates how to configure the Monaco editor loader. It shows how to change the source of Monaco files and configure locales using the loader.config method.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loader } from '@monaco-editor/react';\n\n// you can change the source of the monaco files\nloader.config({ paths: { vs: '...' } });\n\n// you can configure the locales\nloader.config({ 'vs/nls': { availableLanguages: { '*': 'de' } } });\n\n// or\nloader.config({\n  paths: {\n    vs: '...',\n  },\n  'vs/nls': {\n    availableLanguages: {\n      '*': 'de',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Monaco Editor Loader for Local Files\nDESCRIPTION: Shows how to configure the Monaco Editor loader to use local files instead of CDN sources, which is useful for Electron environments.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loader } from '@monaco-editor/react';\n\nloader.config({ paths: { vs: '../path-to-monaco' } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Monaco Editor Loader with Absolute URLs for Electron\nDESCRIPTION: Demonstrates how to configure the Monaco Editor loader with absolute URLs for Electron environments, loading from node_modules.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ensureFirstBackSlash(str) {\n  return str.length > 0 && str.charAt(0) !== '/' ? '/' + str : str;\n}\n\nfunction uriFromPath(_path) {\n  const pathName = path.resolve(_path).replace(/\\\\/g, '/');\n  return encodeURI('file://' + ensureFirstBackSlash(pathName));\n}\n\nloader.config({\n  paths: {\n    vs: uriFromPath(path.join(__dirname, '../node_modules/monaco-editor/min/vs')),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Monaco Instance via Loader Utility\nDESCRIPTION: This snippet shows how to access the Monaco editor instance using the loader utility. It initializes the loader and logs the Monaco instance to the console.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loader } from '@monaco-editor/react';\n\nloader.init().then((monaco) => console.log('here is the monaco instance:', monaco));\n```\n\n----------------------------------------\n\nTITLE: Editor Mount Handler - Legacy vs New\nDESCRIPTION: Comparison between old editorDidMount and new onMount handler signatures, showing the transition from v3 to v4 pattern.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/v4.changes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Old v3 signature\nfunction(getEditorValue: () => string, editor: monaco.editor.IStandaloneCodeEditor) => void\n\n// New v4 signature\nfunction(editor: monaco.editor.IStandaloneCodeEditor, monaco: Monaco) => void\n```\n\n----------------------------------------\n\nTITLE: OnChange Event Handler Signature\nDESCRIPTION: Comparison of onChange event handler signatures between old and new versions.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/v4.changes.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Old signature\nfunction(ev: any, value: string | undefined) => string | undefined\n\n// New signature\nfunction(value: string | undefined, ev: monaco.editor.IModelContentChangedEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Model Creation with Default Path\nDESCRIPTION: Example of how default path is used in model creation with monaco editor.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/v4.changes.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmonaco.editor.createModel(..., ..., monaco.Uri.parse(defaultPath))\n```\n\n----------------------------------------\n\nTITLE: Importing Monaco Editor Components in React\nDESCRIPTION: Example of importing Editor, DiffEditor, useMonaco hook, and loader utility from the @monaco-editor/react package.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Editor, { DiffEditor, useMonaco, loader } from '@monaco-editor/react';\n```\n\n----------------------------------------\n\nTITLE: Installing @monaco-editor/react Package\nDESCRIPTION: Commands to install the @monaco-editor/react package using npm or yarn package managers.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @monaco-editor/react # or @monaco-editor/react@next for React v19\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @monaco-editor/react\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Playground for Monaco React\nDESCRIPTION: Provides instructions for setting up and running the development playground for the Monaco React library.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/README.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/suren-atoyan/monaco-react.git\ncd monaco-react\nnpm install # yarn\ncd playground\nnpm install # yarn\nnpm run dev # yarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin Support\nDESCRIPTION: Example showing how to set up ESLint configuration with React plugin support. It imports the react plugin, sets the React version, and enables recommended rules for React and JSX runtime.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/demo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TSESlint Parser Options for TypeScript Projects\nDESCRIPTION: Configuration example showing how to set up the parser options for ESLint in a TypeScript project. It specifies project configuration files and the root directory for TypeScript configuration.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/demo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access with robots.txt\nDESCRIPTION: This snippet configures the robots.txt file to allow all web crawlers full access to the website. It specifies a wildcard User-agent and an empty Disallow directive, indicating no restrictions on crawler access.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/demo/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Setting Default Access Rules in robots.txt\nDESCRIPTION: A basic robots.txt configuration that allows all user agents (web crawlers) full access to the website by not specifying any disallowed paths.\nSOURCE: https://github.com/suren-atoyan/monaco-react/blob/master/demo/dist/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]