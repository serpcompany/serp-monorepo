[
  {
    "owner": "chainlit",
    "repo": "chainlit",
    "content": "TITLE: Basic Chainlit Application Example\nDESCRIPTION: Example Python code demonstrating a basic Chainlit application with a tool step and message handler. Shows how to create async functions for handling user messages and tool responses.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/backend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chainlit as cl\n\n\n@cl.step(type=\"tool\")\nasync def tool():\n    # Fake tool\n    await cl.sleep(2)\n    return \"Response from the tool!\"\n\n\n@cl.on_message  # this function will be called every time a user inputs a message in the UI\nasync def main(message: cl.Message):\n    \"\"\"\n    This function is called every time a user inputs a message in the UI.\n    It sends back an intermediate response from the tool, followed by the final answer.\n\n    Args:\n        message: The user's message.\n\n    Returns:\n        None.\n    \"\"\"\n\n\n    # Call the tool\n    tool_res = await tool()\n\n    await cl.Message(content=tool_res).send()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Chainlit Application with Tool Step\nDESCRIPTION: A sample Python script demonstrating how to create a simple Chainlit application with a tool step and message handler that processes user input and returns responses.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport chainlit as cl\n\n\n@cl.step(type=\"tool\")\nasync def tool():\n    # Fake tool\n    await cl.sleep(2)\n    return \"Response from the tool!\"\n\n\n@cl.on_message  # this function will be called every time a user inputs a message in the UI\nasync def main(message: cl.Message):\n    \"\"\"\n    This function is called every time a user inputs a message in the UI.\n    It sends back an intermediate response from the tool, followed by the final answer.\n\n    Args:\n        message: The user's message.\n\n    Returns:\n        None.\n    \"\"\"\n\n\n    # Call the tool\n    tool_res = await tool()\n\n    await cl.Message(content=tool_res).send()\n```\n\n----------------------------------------\n\nTITLE: Using useChatInteract Hook in React\nDESCRIPTION: Example showing how to interact with the chat using the useChatInteract hook in a React component. The hook provides methods to send messages, reply to messages, and perform other chat interactions.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useChatInteract } from '@chainlit/react-client';\n\nconst InteractionComponent = () => {\n  const { sendMessage, replyMessage } = useChatInteract();\n\n  const handleSendMessage = () => {\n    const message = { output: 'Hello, World!', id: 'message-id' };\n    sendMessage(message);\n  };\n\n  const handleReplyMessage = () => {\n    const message = { output: 'Replying to your message', id: 'reply-id' };\n    replyMessage(message);\n  };\n\n  // Render your interaction component\n  return (\n    <div>\n      <button onClick={handleSendMessage}>Send Message</button>\n      <button onClick={handleReplyMessage}>Reply to Message</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useChatSession Hook in React\nDESCRIPTION: Example demonstrating how to use the useChatSession hook to manage WebSocket connections in a React component. The hook provides methods to connect, disconnect, and set chat profiles.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useChatSession } from '@chainlit/react-client';\n\nconst ChatComponent = () => {\n  const { connect, disconnect, chatProfile, setChatProfile } = useChatSession();\n\n  // Connect to the WebSocket server\n  useEffect(() => {\n    connect({\n      userEnv: {\n        /* user environment variables */\n      }\n    });\n\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  // Rest of your component logic\n};\n```\n\n----------------------------------------\n\nTITLE: Using useChatData Hook in React\nDESCRIPTION: Example demonstrating how to access various chat-related data and states using the useChatData hook in a React component. The hook provides properties like loading status, connection state, and error handling.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useChatData } from '@chainlit/react-client';\n\nconst ChatDataComponent = () => {\n  const { loading, connected, error } = useChatData();\n\n  // Use the data to render your component\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error connecting to chat...</p>;\n  if (!connected) return <p>Disconnected...</p>;\n\n  // Rest of your component logic\n};\n```\n\n----------------------------------------\n\nTITLE: Using useChatMessages Hook in React\nDESCRIPTION: Example showing how to access chat messages and the first user message using the useChatMessages hook in a React component.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useChatMessages } from '@chainlit/react-client';\n\nconst MessagesComponent = () => {\n  const { messages, firstUserMessage } = useChatMessages();\n\n  // Render your messages\n  return (\n    <div>\n      {messages.map((message) => (\n        <p key={message.id}>{message.output}</p>\n      ))}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chainlit with Recoil Provider in React\nDESCRIPTION: Example of how to set up the Chainlit API client and context provider wrapped with Recoil for state management in a React application.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { RecoilRoot } from 'recoil';\n\nimport { ChainlitAPI, ChainlitContext } from '@chainlit/react-client';\n\nconst CHAINLIT_SERVER_URL = 'http://localhost:8000';\n\nconst apiClient = new ChainlitAPI(CHAINLIT_SERVER_URL, 'webapp');\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <ChainlitContext.Provider value={apiClient}>\n      <RecoilRoot>\n        <MyApp />\n      </RecoilRoot>\n    </ChainlitContext.Provider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: New Data Layer Decorator Configuration\nDESCRIPTION: Demonstrates the new @data_layer decorator pattern for configuring custom data layers declaratively. This replaces the previous environment variable configuration approach.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@data_layer\n```\n\n----------------------------------------\n\nTITLE: Installing Chainlit via pip and Running Hello Example\nDESCRIPTION: Shows how to install Chainlit using pip and verify installation by running the built-in hello example application.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install chainlit\nchainlit hello\n```\n\n----------------------------------------\n\nTITLE: Installing Chainlit via pip\nDESCRIPTION: Basic installation commands for Chainlit using pip package manager and running the hello app.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install chainlit\nchainlit hello\n```\n\n----------------------------------------\n\nTITLE: Running Chainlit Application\nDESCRIPTION: Command to run a Chainlit application with the watch flag enabled.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/backend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchainlit run demo.py -w\n```\n\n----------------------------------------\n\nTITLE: Running a Chainlit Application\nDESCRIPTION: Command to run a Chainlit application with the watch flag enabled, which automatically reloads the application when changes are detected in the source file.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchainlit run demo.py -w\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install Python dependencies using Poetry\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd backend\npoetry install --with tests --with mypy --with dev\n```\n\n----------------------------------------\n\nTITLE: Installing Chainlit Development Version\nDESCRIPTION: Installation command for the latest development version directly from GitHub. Requires Node and pnpm installed.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install git+https://github.com/Chainlit/chainlit.git#subdirectory=backend/\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Chainlit from GitHub\nDESCRIPTION: Instructions for installing the latest in-development version of Chainlit directly from GitHub repository. Requires Node and pnpm installed on the system.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install git+https://github.com/Chainlit/chainlit.git#subdirectory=backend/\n```\n\n----------------------------------------\n\nTITLE: Starting Chainlit Server from Source\nDESCRIPTION: Commands to start the Chainlit server using Poetry\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd backend\npoetry self add poetry-plugin-shell\npoetry shell\nchainlit run chainlit/hello.py\n```\n\n----------------------------------------\n\nTITLE: Installing Chainlit React Client Package\nDESCRIPTION: Command to install the @chainlit/react-client package using npm in your project directory.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/libs/react-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @chainlit/react-client\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Configuration in TOML\nDESCRIPTION: Configuration setting to disable telemetry data collection in Chainlit by adding to the .chainlit/config.toml file.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/PRIVACY_POLICY.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nenable_telemetry = false\n```\n\n----------------------------------------\n\nTITLE: Cloning Chainlit Fork Repository\nDESCRIPTION: Command to clone your personal fork of the Chainlit repository locally\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/YOUR_FORK.git\n```\n\n----------------------------------------\n\nTITLE: Starting UI Development Server\nDESCRIPTION: Command to start the frontend UI development server using pnpm\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd frontend\npnpm run dev --port 5174 --host\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for App Root Configuration\nDESCRIPTION: Shows the environment variable used to modify the APP_ROOT location for config.toml and other settings files.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCHAINLIT_APP_ROOT\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote Repository\nDESCRIPTION: Series of git commands to configure and verify remote repositories for syncing with the main Chainlit repository\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote -v\n> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/Chainlit/chainlit.git\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote -v\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n> upstream  https://github.com/Chainlit/chainlit.git (fetch)\n> upstream  https://github.com/Chainlit/chainlit.git (push)\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Environment Variable\nDESCRIPTION: Environment variable setting to enable debug mode when mounting Chainlit as a sub-application.\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCHAINLIT_DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests\nDESCRIPTION: Command to run backend unit tests using pytest\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd backend\npytest\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Commands for running end-to-end tests and single test debugging\nSOURCE: https://github.com/chainlit/chainlit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: sh\nCODE:\n```\nSINGLE_TEST=password_auth CYPRESS_OPTIONS='--headed --no-exit' pnpm test\n```"
  }
]