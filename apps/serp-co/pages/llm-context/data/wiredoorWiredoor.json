[
  {
    "owner": "wiredoor",
    "repo": "wiredoor",
    "content": "TITLE: Exposing TCP Service via Wiredoor\nDESCRIPTION: Commands to expose TCP/UDP services through Wiredoor with optional SSL and IP restrictions.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor tcp ssh-access --port 22\nwiredoor tcp redis --port 6379 --ssl --allowedIps 192.168.0.0/24\n```\n\n----------------------------------------\n\nTITLE: Exposing HTTP Service with Domain in Wiredoor\nDESCRIPTION: Command to expose a local HTTP service running on port 3000 through Wiredoor with a specific domain name.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http my-service --port 3000 --domain service.example.com\n```\n\n----------------------------------------\n\nTITLE: Exposing HTTP Services with Wiredoor CLI\nDESCRIPTION: Command to expose an HTTP service running on port 3000 through a specified domain. Options include path specification, protocol selection, and access restrictions.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http myapp --domain app.your.domain.com --port 3000\n```\n\n----------------------------------------\n\nTITLE: Exposing HTTP Service via Wiredoor\nDESCRIPTION: Command to expose a local HTTP service through Wiredoor with domain and port configuration.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http my-website --domain website.com --port 3000\n```\n\n----------------------------------------\n\nTITLE: Exposing a Local Service with Wiredoor CLI\nDESCRIPTION: Command to expose a locally running service (on port 3000) through the Wiredoor server. This creates an HTTP endpoint accessible via the specified domain that tunnels traffic to the local service.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http myapp --domain app.your.domain.com --port 3000\n```\n\n----------------------------------------\n\nTITLE: Exposing TCP/UDP Services with Wiredoor CLI\nDESCRIPTION: Command to expose a TCP service (SSH in this example) through Wiredoor. Additional options allow protocol specification, TLS wrapping, and IP-based access controls.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor tcp ssh-access --port 22\n```\n\n----------------------------------------\n\nTITLE: Exposing TCP Service in Wiredoor\nDESCRIPTION: Command to expose a local TCP service (SSH in this example) through Wiredoor with automatic port assignment from the configured TCP port range.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor tcp my-ssh --port 22\n```\n\n----------------------------------------\n\nTITLE: Exposing a Local Service\nDESCRIPTION: Command to expose a local service running on port 3000 through Wiredoor\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http myapp --domain app.your.domain.com --port 3000\n```\n\n----------------------------------------\n\nTITLE: Logging into Wiredoor and Creating Node\nDESCRIPTION: Command to authenticate with a Wiredoor server and register a new node through interactive prompts.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor login --url https://your-wiredoor-instance-or-ip\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to TCP Service with IP Filtering\nDESCRIPTION: Command to expose an SSH service while restricting access to specific IP subnets and addresses using the --allow flag.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor tcp my-ssh --port 22 --allow 94.173.54.0/24 --allow 94.173.59.54/32\n```\n\n----------------------------------------\n\nTITLE: Restricting Service Access with IP Filtering in Wiredoor CLI\nDESCRIPTION: This bash command demonstrates how to expose a dashboard service with IP restrictions. It limits access to the service to only clients from the 192.168.100.0/24 CIDR range, while specifically blocking the IP 192.168.100.5/32.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/security.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor http dashboard --domain grafana.example.com --port 3000 --allow 192.168.100.0/24 --block 192.168.100.5/32\n```\n\n----------------------------------------\n\nTITLE: Connecting to Wiredoor Node\nDESCRIPTION: Commands to establish VPN connection using either saved credentials or explicitly provided URL and token.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor connect\nwiredoor connect --url=https://wiredoor.example.com --token=ABC123\n```\n\n----------------------------------------\n\nTITLE: Logging in and Registering a Node with Wiredoor CLI\nDESCRIPTION: Command to authenticate with the Wiredoor server and register the current device as a node. This establishes the WireGuard connection to the server for secure tunneling.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor login --url=https://your_deployed_wiredoor_domain_or_ip\n```\n\n----------------------------------------\n\nTITLE: Logging in to Wiredoor Server\nDESCRIPTION: Command to log in to the Wiredoor server using the CLI and register a node\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor login --url=https://your_deployed_wiredoor_domain_or_ip\n```\n\n----------------------------------------\n\nTITLE: Registering a Node with Wiredoor CLI\nDESCRIPTION: Command to register a node with the Wiredoor Server using the CLI. This establishes a secure connection and enables service exposure from the node.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor login --url https://your-wiredoor-ip-or-domain\n```\n\n----------------------------------------\n\nTITLE: Checking Wiredoor Node Status\nDESCRIPTION: Command to check the current connection status of a Wiredoor node, including active services and health information.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor status\n```\n\n----------------------------------------\n\nTITLE: Checking Wiredoor Status\nDESCRIPTION: Commands to view VPN and service status with options for health checks and continuous monitoring.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor status\nwiredoor status --health\nwiredoor status --watch --interval 10\n```\n\n----------------------------------------\n\nTITLE: Installing Wiredoor CLI via Auto-installer\nDESCRIPTION: Command to automatically download and install the Wiredoor CLI using a shell script.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://www.wiredoor.net/install-wiredoor-cli.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Installing Wiredoor CLI\nDESCRIPTION: Command to install Wiredoor CLI using the auto-installer script\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://www.wiredoor.net/install-wiredoor-cli.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Wiredoor Settings\nDESCRIPTION: Command to write server URL and token to the config file without initiating a connection.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor config --url=https://wiredoor.example.com --token=ABC123\n```\n\n----------------------------------------\n\nTITLE: Enabling Wiredoor Service for Automatic Reconnection\nDESCRIPTION: Command to enable the Wiredoor service to start automatically at boot and ensure automatic reconnection after server or node restarts.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable --now wiredoor\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Wiredoor Node with Token\nDESCRIPTION: Command to connect a service to an already created Wiredoor node using an existing authentication token.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor connect --url https://wiredoor_ip_or_domain --token XXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Enabling Wiredoor Services\nDESCRIPTION: Commands to re-enable previously disabled services.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor enable http my-website\nwiredoor enable tcp db-access\n```\n\n----------------------------------------\n\nTITLE: Disabling Wiredoor Services\nDESCRIPTION: Commands to temporarily disable exposed HTTP or TCP services.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor disable http my-website\nwiredoor disable tcp db-access\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Wiredoor\nDESCRIPTION: Command to stop the active VPN tunnel and temporarily disable all services.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor disconnect\n```\n\n----------------------------------------\n\nTITLE: Logging into Wiredoor from CLI\nDESCRIPTION: Command for administrators to authenticate and create a node directly from the CLI, connecting to a Wiredoor server instance.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwiredoor login --url https://wiredoor_ip_or_domain\n```\n\n----------------------------------------\n\nTITLE: Enabling IP Forwarding for Wiredoor Gateway Node\nDESCRIPTION: This command enables IP forwarding on the system, which is necessary for the Wiredoor Gateway node to properly route traffic to internal network IPs.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w net.ipv4.ip_forward=1\n```\n\n----------------------------------------\n\nTITLE: Identifying Kubernetes Service Subnet\nDESCRIPTION: Command to retrieve the cluster's service subnet information by querying the kube-dns service\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/kubernetes-gateway.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system get svc kube-dns -o wide\n```\n\n----------------------------------------\n\nTITLE: Installing Wiredoor Gateway Helm Chart\nDESCRIPTION: Commands to add the Wiredoor Helm repository and install the gateway with server configuration and token\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/kubernetes-gateway.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add wiredoor https://charts.wiredoor.net\n\nhelm -n default install my-wiredoor-gateway wiredoor/wiredoor-gateway \\\n  --set wiredoor.server=https://your-wiredoor-server.com \\\n  --set wiredoor.token=your_gateway_node_token\n```\n\n----------------------------------------\n\nTITLE: Viewing Wiredoor Server Logs in Docker\nDESCRIPTION: This command displays the logs for the Wiredoor Docker container, which is useful for diagnosing server-side issues.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs wiredoor\n```\n\n----------------------------------------\n\nTITLE: Starting Wiredoor Server\nDESCRIPTION: Command to start the Wiredoor server using Docker Compose in detached mode\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Wiredoor Server with Docker Compose\nDESCRIPTION: Command to start the Wiredoor server in detached mode using Docker Compose. This launches all required containers based on the configuration in docker-compose.yml.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Managing Wiredoor OpenRC Service\nDESCRIPTION: Commands for setting up and starting the Wiredoor service on OpenRC-based systems like Alpine Linux.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x /etc/init.d/wiredoor\nrc-update add wiredoor\nrc-service wiredoor start\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Masquerading for Wiredoor Gateway\nDESCRIPTION: These commands enable masquerading in firewalld and reload the firewall configuration, which is necessary for the Wiredoor Gateway node to properly handle network traffic.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirewall-cmd --permanent --add-masquerade\nfirewall-cmd --reload\n```\n\n----------------------------------------\n\nTITLE: Managing Wiredoor Systemd Service\nDESCRIPTION: Commands for enabling and starting the Wiredoor service on systemd-based systems.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/cli.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable wiredoor\nsudo systemctl start wiredoor\n```\n\n----------------------------------------\n\nTITLE: Network Policy Configuration\nDESCRIPTION: Example YAML configuration for implementing network policies to restrict gateway access to specific services\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/kubernetes-gateway.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwiredoor:\n  server: https://my-wiredoor.com\n  token: your_gateway_token\n\nnetworkPolicy:\n  enabled: true\n  egress:\n    - podSelector:\n        matchLabels:\n          app.kubernetes.io/name: argocd-server\n      namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: argocd\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux to Permissive Mode for Wiredoor Testing\nDESCRIPTION: This command sets SELinux to permissive mode, which can help identify if SELinux policies are blocking Wiredoor Gateway node functionality.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsetenforce 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes NetworkPolicy for Wiredoor Gateway\nDESCRIPTION: This YAML configuration example shows how to set up a Wiredoor gateway in Kubernetes with network policies. It enables egress restrictions that limit the gateway to only access pods with specific labels in the production namespace.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/security.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwiredoor:\n  server: https://my-wiredoor.com\n  token: your_gateway_token\n\nnetworkPolicy:\n  enabled: true\n  egress:\n    - podSelector:\n        matchLabels:\n          app.kubernetes.io/name: my-app\n      namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: production\n```\n\n----------------------------------------\n\nTITLE: Cloning Wiredoor Docker Setup\nDESCRIPTION: Commands to clone the Wiredoor Docker setup repository and navigate to the project directory\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/wiredoor/docker-setup.git\ncd docker-setup\n```\n\n----------------------------------------\n\nTITLE: Cloning Wiredoor Docker Setup in Bash\nDESCRIPTION: Command to clone the Wiredoor Docker setup repository and navigate to the directory. This is the first step in deploying the Wiredoor server to a remote machine.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/wiredoor/docker-setup.git\ncd docker-setup\n```\n\n----------------------------------------\n\nTITLE: Displaying Wiredoor Config File Location\nDESCRIPTION: Shows the default location of the Wiredoor configuration file on the system.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/faq.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/etc/wiredoor/config.ini\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Wiredoor Gateway and Services\nDESCRIPTION: This docker-compose.yml file demonstrates how to set up a Wiredoor Gateway container along with WordPress and MySQL services. It defines the necessary networks, volumes, and environment variables for the gateway and services to communicate properly.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/docker-gateway.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  wiredoor:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.18.50.0/24 # Make sure that this match with Gateway Subnet defined in your wiredoor gateway node\n  stack:\n\nservices:\n  wiredoor-gw:\n    image: ghcr.io/wiredoor/wiredoor-cli:latest\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.ip_forward=1\n    environment:\n      WIREDOOR_URL: https://your-wiredoor-instance_or_ip\n      TOKEN: your-gateway-node-token\n    networks:\n      - wiredoor\n  \n  wordpress:\n    image: wordpress\n    restart: always\n    ports:\n      - 8080:80\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: exampleuser\n      WORDPRESS_DB_PASSWORD: examplepass\n      WORDPRESS_DB_NAME: exampledb\n    volumes:\n      - wordpress:/var/www/html\n    networks:\n      - wiredoor\n      - stack\n\n  db:\n    image: mysql:8.0\n    restart: always\n    environment:\n      MYSQL_DATABASE: exampledb\n      MYSQL_USER: exampleuser\n      MYSQL_PASSWORD: examplepass\n      MYSQL_RANDOM_ROOT_PASSWORD: '1'\n    volumes:\n      - db:/var/lib/mysql\n    networks:\n      - stack\n\nvolumes:\n  wordpress:\n  db:\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Name Format\nDESCRIPTION: Format specification for referencing Kubernetes services when exposing them through Wiredoor\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/kubernetes-gateway.mdx#2025-04-23_snippet_2\n\nLANGUAGE: perl\nCODE:\n```\n{service}.{namespace}.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Visualizing Docker Gateway Network Flow with Mermaid\nDESCRIPTION: This diagram illustrates the network flow between the Internet, Wiredoor Server, and Docker containers through the Wiredoor Gateway. It shows how traffic is routed and tunneled securely.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/docker-gateway.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  public[(Internet)]\n  wiredoor(Wiredoor Server)\n  subgraph Server\n    direction TB\n    subgraph Docker Network\n      direction TB\n      gateway[wiredoor-gateway container]\n      containers@{ shape: procs, label: \"Containers\"}\n    end\n  end\n\n  public <-- Traffic -->\n  wiredoor <--> |Traffic| gateway\n  gateway == Tunnel ==> wiredoor \n  gateway <-- Traffic --> containers\n```\n\n----------------------------------------\n\nTITLE: Configuring Wiredoor Environment Variables in Bash\nDESCRIPTION: Commands to copy the example environment file to create a configuration file and open it for editing. This configures essential settings like admin credentials and network parameters.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Commands to copy the example environment file and open it for editing\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gateway Node Traffic Flow with Mermaid\nDESCRIPTION: Diagram showing how a Gateway Node acts as a site-to-site VPN bridge, forwarding traffic from Wiredoor Server to any IP in its local subnet. This enables access to devices without WireGuard support.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  public[(Internet)]\n  wiredoor(Wiredoor Server)\n  subgraph Private network\n    direction RL\n    gateway[Gateway Server]\n    clients@{ shape: procs, label: \"Servers\"}\n  end\n\n  public -- Traffic -->\n  wiredoor <-- Traffic -->\n  gateway ==> |Tunnel| wiredoor\n  gateway <--> |Traffic| clients\n```\n\n----------------------------------------\n\nTITLE: Visualizing Client Node Traffic Flow with Mermaid\nDESCRIPTION: Diagram illustrating how Client Nodes connect to the Wiredoor Server via secure WireGuard tunnels. This allows services from private networks to be exposed to the internet through Wiredoor.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  public[(Internet)]\n  wiredoor(Wiredoor Server)\n  subgraph Private network\n    clients@{ shape: procs, label: \"Client Servers Nodes\"}\n  end\n\n  public <--> |Traffic over SSL| wiredoor\n  wiredoor <--> |Traffic| clients\n  clients ==> |Tunnel| wiredoor\n```\n\n----------------------------------------\n\nTITLE: Visualizing Wiredoor Network Architecture with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the network architecture of Wiredoor, showing how internal services in a private network connect to the public internet through the Wiredoor Server and NGINX Reverse Proxy using a WireGuard Tunnel.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph Private Network\n      A[Node / Gateway] <--> B[Internal Service]\n    end\n    A <-->|WireGuard Tunnel| W[Wiredoor Server]\n    W <--> N[NGINX Reverse Proxy]\n    N <--> I[Public Internet]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Local Node Traffic Flow with Mermaid\nDESCRIPTION: Diagram showing how traffic flows from the internet through the Wiredoor Server to local services. The Local Node doesn't use a WireGuard tunnel as it runs on the same server as Wiredoor.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/docs/usage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  public[(Internet)]\n  subgraph Wiredoor Server\n    wiredoor\n    clients@{ shape: procs, label: \"Other services\"}\n  end\n\n  public <--> |Traffic over SSL| wiredoor\n  wiredoor <--> |Traffic| clients\n```\n\n----------------------------------------\n\nTITLE: Installing Wiredoor CLI with Auto-Installer Script\nDESCRIPTION: Command to download and execute the Wiredoor CLI auto-installer script. This installs the command-line tool required to register nodes and manage services from private networks.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://www.wiredoor.net/install-wiredoor-cli.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Link in Markdown\nDESCRIPTION: This snippet demonstrates how to create a clickable email link using Markdown syntax. It's used to provide contact information for support inquiries related to the Wiredoor project.\nSOURCE: https://github.com/wiredoor/wiredoor/blob/main/TERMS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[support@wiredoor.net](mailto:support@wiredoor.net)\n```"
  }
]