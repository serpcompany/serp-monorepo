[
  {
    "owner": "langchain-ai",
    "repo": "langgraphjs-gen-ui-examples",
    "content": "TITLE: Initializing React TypeScript Project with Directory Structure\nDESCRIPTION: Creates a new React TypeScript project using create-react-app and sets up a basic directory structure with components, styles, and utils folders. These commands establish the foundation for a well-organized React application.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-1.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app todo-app --template typescript\ncd todo-app\nmkdir -p src/{components,styles,utils}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Context Provider with TypeScript and React\nDESCRIPTION: Creates a Todo context and provider component using React's Context API with TypeScript. Defines todo item types, state management types, and implements a context provider wrapper component for managing todo state.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-3.txt#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/context/TodoContext.tsx\nimport React, { createContext, useContext, useReducer } from 'react';\n\ntype Todo = { id: string; text: string; completed: boolean; };\n\ntype TodoState = { todos: Todo[]; };\ntype TodoAction = \n  | { type: 'ADD_TODO'; payload: string }\n  | { type: 'TOGGLE_TODO'; payload: string }\n  | { type: 'DELETE_TODO'; payload: string };\n\nconst TodoContext = createContext<{\n  state: TodoState;\n  dispatch: React.Dispatch<TodoAction>;\n} | undefined>(undefined);\n\nexport const TodoProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(todoReducer, { todos: [] });\n  return <TodoContext.Provider value={{ state, dispatch }}>{children}</TodoContext.Provider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Item React Component with TypeScript\nDESCRIPTION: A TypeScript React functional component that renders a todo item with checkbox for completion status, text display, and delete button. The component accepts props for item ID, text content, completion status, and handler functions for toggle and delete actions.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-2.txt#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/TodoItem.tsx\nimport React from 'react';\nimport styles from '../styles/TodoItem.module.css';\n\ninterface TodoItemProps {\n  id: string;\n  text: string;\n  completed: boolean;\n  onToggle: (id: string) => void;\n  onDelete: (id: string) => void;\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = ({ id, text, completed, onToggle, onDelete }) => (\n  <div className={styles.todoItem}>\n    <input type='checkbox' checked={completed} onChange={() => onToggle(id)} />\n    <span className={completed ? styles.completed : ''}>{text}</span>\n    <button onClick={() => onDelete(id)}>Delete</button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AddTodo Component in React with TypeScript\nDESCRIPTION: This code defines a React functional component called AddTodo. It manages the state for the todo text input and error messages, handles form submission, and renders a form with input validation.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-4.txt#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport styles from '../styles/AddTodo.module.css';\n\nexport const AddTodo: React.FC<{ onAdd: (text: string) => void }> = ({ onAdd }) => {\n  const [text, setText] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!text.trim()) {\n      setError('Todo text cannot be empty');\n      return;\n    }\n    onAdd(text.trim());\n    setText('');\n    setError('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <input\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        placeholder='Add a new todo'\n      />\n      {error && <div className={styles.error}>{error}</div>}\n      <button type='submit'>Add Todo</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Filters Component in React TypeScript\nDESCRIPTION: A React functional component that handles todo list filtering and sorting. It provides a dropdown menu to filter todos by 'all', 'active', or 'completed' status, and buttons to sort items alphabetically in ascending or descending order. The component accepts props for current filter state and callback functions for handling filter and sort changes.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-5.txt#2025-04-21_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n// src/components/TodoFilters.tsx\nimport React from 'react';\n\ntype FilterType = 'all' | 'active' | 'completed';\n\nexport const TodoFilters: React.FC<{\n  currentFilter: FilterType;\n  onFilterChange: (filter: FilterType) => void;\n  onSortChange: (ascending: boolean) => void;\n}> = ({ currentFilter, onFilterChange, onSortChange }) => (\n  <div>\n    <select value={currentFilter} onChange={(e) => onFilterChange(e.target.value as FilterType)}>\n      <option value='all'>All</option>\n      <option value='active'>Active</option>\n      <option value='completed'>Completed</option>\n    </select>\n    <button onClick={() => onSortChange(true)}>Sort A-Z</button>\n    <button onClick={() => onSortChange(false)}>Sort Z-A</button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Todos using Local Storage in TypeScript\nDESCRIPTION: This snippet defines two functions for managing todo items in browser local storage. The saveTodos function stores an array of Todo objects, while loadTodos retrieves and parses the stored data. It uses a constant STORAGE_KEY for consistent storage location.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/src/agent/open-code/nodes/plan-code/step-6.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst STORAGE_KEY = 'todos';\n\nexport const saveTodos = (todos: Todo[]) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(todos));\n};\n\nexport const loadTodos = (): Todo[] => {\n  const stored = localStorage.getItem(STORAGE_KEY);\n  return stored ? JSON.parse(stored) : [];\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning the LangGraph Generative UI Examples Repository\nDESCRIPTION: Commands to clone the repository and navigate to the project directory.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/langchain-ai/langgraphjs-gen-ui-examples.git\n\ncd langgraphjs-gen-ui-examples\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LangGraph Generative UI Examples\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm is the default package manager in this project\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LangGraph Agents\nDESCRIPTION: Example of environment variables setup, including API keys for OpenAI, Google GenAI, and optional services.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n# Required\nOPENAI_API_KEY=\"\"\nGOOGLE_API_KEY=\"\"\n\n# Optional, but recommended for best in class tracing and observability.\n# LANGSMITH_PROJECT=\"default\"\n# LANGSMITH_API_KEY=\"\"\n# LANGSMITH_TRACING_V2=true\n\n# Optional\n# ANTHROPIC_API_KEY=\"\"\n# FINANCIAL_DATASETS_API_KEY=\"\"\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables File for LangGraph Setup\nDESCRIPTION: Command to create a copy of the example environment variables file for configuration.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting the LangGraph Server\nDESCRIPTION: Command to start the LangGraph server using pnpm.\nSOURCE: https://github.com/langchain-ai/langgraphjs-gen-ui-examples/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm agent\n```"
  }
]