[
  {
    "owner": "elgatosf",
    "repo": "streamdeck",
    "content": "TITLE: Creating a Stream Deck Action in TypeScript\nDESCRIPTION: This TypeScript code defines a Stream Deck action that extends `SingletonAction`. When a key down event occurs, the `onKeyDown` method is triggered, setting the title of the action to \"Hello world\".  It requires the `@elgato/streamdeck` package.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action, KeyDownEvent, SingletonAction } from \"@elgato/streamdeck\";\n\n@action({ UUID: \"com.elgato.hello-world.say-hello\" })\nexport class SayHelloAction extends SingletonAction {\n    /**\n     * Listen for the key down event that occurs when a user presses\n     * a Stream Deck button, and change the title of the action.\n     */\n    async onKeyDown(ev: KeyDownEvent) {\n        await ev.action.setTitle(\"Hello world\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugging in manifest.json\nDESCRIPTION: This JSON configuration snippet shows how to enable debugging for a Stream Deck plugin in the manifest file. It sets the Node.js version and enables debugging, allowing debuggers to connect to the plugin.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/README.md#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // ...\n    \"Nodejs\": {\n        \"Version\": \"20\",\n        \"Debug\": \"enabled\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Deck CLI with npm\nDESCRIPTION: This command installs the Stream Deck CLI globally using npm, enabling developers to create, test, and bundle Stream Deck plugins. It requires Node.js to be installed.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @elgato/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Deck Plugin\nDESCRIPTION: This command initializes a creation wizard using the Stream Deck CLI to help developers set up the initial structure and configuration for a new Stream Deck plugin.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamdeck create\n```\n\n----------------------------------------\n\nTITLE: Accessing Key and Dial Actions (v1.0.0) TypeScript\nDESCRIPTION: Demonstrates how to access methods specific to key and dial actions by using type-narrowing to check action types before invoking methods like `setFeedback` or `setState`. This approach accurately reflects methods and information available to actions.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonWillAppear(ev: WillAppearEvent): void {\n    if (ev.action.isDial()) { // <- Check the action is a dial.\n        ev.action.setFeedback({\n            title: \"Hello world\"\n        });\n    } else {\n        ev.action.setState(0) // <- Action is a key, as it is not a dial\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending to Property Inspector (v1.0.0) TypeScript\nDESCRIPTION: Demonstrates how to send messages directly to the current property inspector using `streamDeck.ui.current?.sendToPropertyInspector(...)`, which prevents sending messages to inactive inspectors. `streamDeck` and `streamDeck.ui` must be correctly initialized.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonPropertyInspectorDidAppear(ev: PropertyInspectorDidAppearEvent): void {\n    streamDeck.ui.current?.sendToPropertyInspector(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Action Controllers (v1.0.0) TypeScript\nDESCRIPTION: Shows how to obtain action controllers using `streamDeck.actions.getActionById` instead of `streamDeck.actions.createController`. It assumes that an action with the specified ID already exists.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstreamDeck.actions.getActionById(id);\n```\n\n----------------------------------------\n\nTITLE: Accessing Device ID (v1.0.0) TypeScript\nDESCRIPTION: Illustrates how to retrieve the device ID from the action instance via `ev.action.device.id` instead of directly accessing it from the event using `ev.deviceId`. The `action` instance provides access to the related device.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonWillAppear(ev: WillAppearEvent): void {\n    ev.action.device.id;\n}\n```\n\n----------------------------------------\n\nTITLE: UI Connection Event Listener (v1.0.0) TypeScript\nDESCRIPTION: Shows the change in event listener names for UI connections. The `onDidConnect` event listener is renamed to `onConnected` and adds the `onConnecting` event listener to support the connection initialization start.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstreamDeck.onConnected(listener);\n```\n\n----------------------------------------\n\nTITLE: PayloadObject Deprecation (v0.4.0) TypeScript\nDESCRIPTION: Shows the deprecation of `PayloadObject<T>` in favor of the `JsonObject` type. `JsonObject` is now the preferred constraint for action settings types, facilitating base action creation. Requires `JsonObject` to be defined or imported.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseAction<T extends JsonObject> extends SingletonAction<T> {\n```\n\n----------------------------------------\n\nTITLE: Localization JSON Structure (v0.4.0) JSON\nDESCRIPTION: Demonstrates the updated structure for localization JSON files, where localizations are now nested under a `Localization` object. This ensures a consistent structure for localization data.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Localization\": {\n        \"Hello world\": \"Hallo Welt\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Localization Lookup (v0.4.0) TypeScript\nDESCRIPTION: Illustrates how localization lookup now returns the original `key` when a translation is not found, rather than `undefined`. It requires the `@elgato/streamdeck` package.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport streamDeck from \"@elgato/streamdeck\";\n\nstreamDeck.i18n.translate(\"test\"); // \"test\"\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Location (v0.4.0) JSON\nDESCRIPTION: Demonstrates how manifest and layout JSON schemas have been relocated to `@elgato/schemas` and are now publicly accessible via URLs.  Update the `$schema` property to point to the new URL.\nSOURCE: https://github.com/elgatosf/streamdeck/blob/main/UPGRADE.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://schemas.elgato.com/streamdeck/plugins/manifest.json\"\n}\n```"
  }
]