[
  {
    "owner": "bigskysoftware",
    "repo": "_hyperscript",
    "content": "TITLE: Exception Handling in hyperscript Event Handlers\nDESCRIPTION: This snippet shows how to handle exceptions in hyperscript event handlers by using the `exception` event. This allows developers to define error-handling logic directly within their event handlers.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"on click call mightThrow()\n        on exception(error) log error\"\n>\n  Click Me!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Hyperscript via CDN in HTML\nDESCRIPTION: This HTML snippet shows the simplest way to include the hyperscript library in a web page using a script tag with a `src` attribute pointing to the library hosted on the unpkg CDN. This method requires no build step.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <script src=\"https://unpkg.com/hyperscript.org@0.9.14\"></script>\n\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML and Querying Content in _hyperscript (HTML)\nDESCRIPTION: Illustrates fetching an HTML page using `fetch` with the `as html` modifier. It then queries the resulting HTML structure for the `textContent` of the first `<h1>` element and displays it using the `alert()` function.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click fetch `${pageUrl}` as html\n                    get the textContent of the <h1/> in it\n                    call alert(result)\">\n  Get the title of the page!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Toggling CSS Class with Hyperscript on Click in HTML\nDESCRIPTION: This HTML example demonstrates a fundamental hyperscript use case. A button element uses the `_` attribute to contain a hyperscript command. When the button is clicked (`on click`), it toggles the CSS class `.red` on itself (`me`).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .red on me\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Function in Hyperscript\nDESCRIPTION: Demonstrates how to define a global function in Hyperscript that waits for 2 seconds and returns a string.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def waitAndReturn()\n    wait 2s\n    return \"I waited...\"\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Hyperscript with HTML Elements\nDESCRIPTION: Demonstrates basic usage of _hyperscript including script inclusion, event handling, class toggling, and asynchronous function calls. Shows common patterns for binding behaviors to HTML elements using the _= syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/hyperscript.org@0.9.14\"></script>\n\n\n<button _=\"on click toggle .clicked\">\n  Toggle the \"clicked\" class on me\n</button>\n\n\n<div _=\"on mouseOver toggle mouse-over on #foo\">\n</div>\n\n<button _=\"on click call aJavascriptFunction() then\n           wait 10s then\n           call anotherJavascriptFunction()\">\n           Do some stuff\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Zone with _hyperscript\nDESCRIPTION: This snippet demonstrates how to create a drop zone that responds to drag events. It handles dragover, dragenter, dragleave, and drop events to provide visual feedback and process the dropped content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/70-drag-n-drop.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre _=\"\n  on dragover or dragenter halt the event\n    then set the target's style.background to 'lightgray'\n  on dragleave or drop set the target's style.background to ''\n  on drop get event.dataTransfer.getData('text/plain')\n    then put it into the next <output/>\">Drop Area\n&nbsp;\n&nbsp;\n&nbsp;\nDrop Area</pre>\nResult: <output></output>\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables within an Event Handler in HTML/Hyperscript\nDESCRIPTION: This HTML example shows a practical use of a local variable within a hyperscript event handler. On click, it sets a variable `x` to `10` (local to this execution of the handler) and then logs its value to the console.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click set x to 10 then log x\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Formatting Pizza Toppings Using Hyperscript\nDESCRIPTION: This snippet shows a function `formatPizzaToppings` which uses the `make` command to create a list formatter and dynamically generate DOM elements for displaying pizza toppings. It requires an argument `toppings` and leverages the Intl.ListFormat for regional formatting in Hyperscript. The output is a HTML structure appended to an element with ID `#toppings`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/make.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef formatPizzaToppings(toppings)\n  make an Intl.ListFormat from \"en\", { type: \"conjunction\" }\n    called listFmt\n\n  for part in listFmt.formatToParts(toppings)\n    if the part's type is \"element\"\n      make a <span.topping/>\n      put the part's value into its textContent\n      append it to #toppings\n    else\n      append the part's value to #toppings\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers in hyperscript syntax\nDESCRIPTION: This snippet defines the syntax for setting up event handlers in hyperscript. It includes options for repeating events, debouncing or throttling, and specifying event sources. This allows for attaching complex event handling logic directly to HTML elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\non [every] <event-name>[(<param-list>)][\\[<filter>\\]] [<count>] [from <expr>] [<debounce> | <throttle>] { or [every] <event-name>[(<param-list>)][\\[<filter>\\]] [<count>] [from <expr>] [<debounce> | <throttle>] } [queue (all | first | last | none)] {<command>} [end]\n```\n\n----------------------------------------\n\nTITLE: Fetching remote content in _hyperscript\nDESCRIPTION: Makes a GET request to /clickedMessage endpoint and puts the response into the output element. Shows _hyperscript's async-transparent fetch command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_72\n\nLANGUAGE: hyperscript\nCODE:\n```\non click fetch /clickedMessage then\n                    put the result into the next <output/>`\n```\n\n----------------------------------------\n\nTITLE: Element Finding Examples\nDESCRIPTION: Shows various ways to find and select elements using Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_52\n\nLANGUAGE: hyperscript\nCODE:\n```\n-- add the class 'highlight' to all paragraph tags in the current element\nadd .highlight to <p/> in me\n\n-- add the class 'highlight' to the closest table row to the current element\nadd .highlight to the closest <tr/>\n\n-- add the class 'highlight' to the closest div to the current element, excluding the current element\nadd .highlight to the closest parent <div/>\n\n-- add the class 'highlight' to the first paragraph tag in the current element\nadd .highlight to the first <p/> in me\n\n-- add the class 'highlight' to the next paragraph found in a forward scan of the DOM\nadd .highlight to the next <p/>\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters in hyperscript Event Handlers\nDESCRIPTION: This snippet shows how to destructure properties from an event's details into parameters for use within an event handler. Hyperscript allows parameters to be extracted for custom event logic, enhancing its integration with the DOM event system.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on anEvent(foo) log foo\">Log Foo</div>\n```\n\n----------------------------------------\n\nTITLE: Using `wait` with Events and Timeouts in Hyperscript\nDESCRIPTION: Demonstrates how to use the `wait` command in `_hyperscript` to pause execution until either a specific event occurs (like `load`) or a specified time elapses (e.g., `1s`). It includes checking the `result` variable (implicitly set by `wait`) to determine if the wait finished due to an event or a timeout, and throwing an error if it timed out. Also shows that parentheses are required around dynamic timeout values.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/wait.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n-- Fail if the thing doesn't load after 1s.\nwait for load or 1s\nif the result is not an Event\n  throw 'Took too long to load.'\nend\n\n-- Parens are required for dynamic timeouts.\nwait for click or (config.clickTimeout) ms\n```\n\n----------------------------------------\n\nTITLE: Toggling Class on Menu with Hyperscript\nDESCRIPTION: A basic example showing how to use Hyperscript to toggle a CSS class on a menu element when a button is clicked. This demonstrates the readable, English-like syntax of Hyperscript for handling DOM events.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/a-fun-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .open on the #menu\">\n  Menu\n</button>\n<ul id=\"menu\">\n  <li><a href=\"/\">Home</a></li>\n  ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request and Handling JSON in _hyperscript (HTML)\nDESCRIPTION: Demonstrates making a POST request using `fetch` in _hyperscript. It specifies the `method` as 'POST' using the `with` keyword, fetches `/test` expecting JSON (`as json`), accesses a property `result` from the response (`its result`), and displays it in the button's `innerHTML`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button _='on click fetch /test as json with method:\"POST\"\n                    put `${its result}` into my innerHTML'>\n  Post to /test!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Mouse Events with Destructuring in Hyperscript\nDESCRIPTION: An HTML example using `_hyperscript`. It waits for either a `mousemove` or `mouseup` event originating from the `document`. It demonstrates destructuring event properties (`clientX`, `clientY`) directly into local variables when the event occurs, which can be useful for implementing drag interactions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/wait.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"wait for mousemove(clientX, clientY) or mouseup(clientX, clientY) from document\"\n>\n  Mouse Dragging...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fading and Removing Element – Vanilla JS – JavaScript/HTML/CSS\nDESCRIPTION: Implements a fade-out effect followed by removal of an element upon click, using Vanilla JavaScript and CSS transitions. Requires a style sheet defining a transition and a 'fade-out' class, and binds to a div's click event, adding the fade class then listening for 'transitionend' before removing the node. Dependencies: browser JS and CSS; requires IDs to be coordinated. Input: user click; Output: disappearing element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\\n.fade-out {\\n  opacity: 0;\\n}\\n#vanilla-remove-me {\\n  transition: opacity 1s ease-in-out;\\n}\\n</style>\\n<!-- Author has to foresee that this element will be faded out \\n     with a transition. Those concerns aren't looking too\\n     separated anymore... -->\\n<div id=\\\"vanilla-remove-me\\\">\\n  Remove Me\\n</div>\\n<script>\\n  document.querySelector('#vanilla-remove-me')\\n    .addEventListener('click', e => {\\n      // Coupled with the page stylesheet.\\n      e.target.classList.add('fade-out')\\n\\n      // Would need changing if we used a @keyframes animation \\n      // instead of a transition for the .fade-out class.\\n      e.target.addEventListener('transitionend', () => {\\n        e.target.remove()\\n      })\\n    })\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Selective Exposure of JS Functions from _hyperscript Blocks - hyperscript\nDESCRIPTION: Demonstrates how to define multiple JavaScript functions within a _hyperscript 'js...end' block and expose only selected functions by returning an object with desired function references. The example defines 'regexExec' and 'regexFind', but only exposes 'regexFind'. Dependencies are standard JavaScript within a hyperscript context. Parameters for 'regexFind' are a regex pattern, group index, and input string, returning the matched group; only functions in the returned object are available externally.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/js.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\njs\n    function regexExec(re, str) {\n        return new RegExp(re).exec(str);\n    }\n\n    function regexFind(re, group, str) {\n        return regexExec(re, str)[group];\n    }\n\n    return { regexFind };\nend\n```\n\n----------------------------------------\n\nTITLE: Interactive Button with Color Transition Using hyperscript\nDESCRIPTION: This button element changes color dynamically while the pointer is down on it. The hyperscript code is embedded within the HTML attribute and requires hyperscript library loading. The color transition is applied through repeated pointerdown events until pointerup.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"crowded padding padding-block allcaps\" \n       _=\"on pointerdown\n              repeat until event pointerup from the document\n                set rand to Math.random() * 360\n                transition *background-color\n                        to `hsl($rand 100% 90%)`\n                      over 250ms\n              end\n              transition *background-color to initial\">\nTry me: press and hold</button>\n```\n\n----------------------------------------\n\nTITLE: Illustrating `repeat` Command Usage in _hyperscript\nDESCRIPTION: This _hyperscript code demonstrates various ways to use the `repeat` command for iteration. Examples include basic `for` loops (with its syntactic sugar alternative), iterating over collections without an explicit variable using `it`, `while` and `until` loops based on element conditions, looping until a specific event occurs, repeating a fixed number of times, and creating infinite loops using `forever`. The examples involve DOM manipulation (adding classes, modifying `innerHTML`) and timing (`wait`).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/repeat.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n  -- the basic for loop\n  repeat for p in <p/>\n    add .example to p\n  end\n\n  -- syntactic sugar for the above\n  for p in <p/>\n    add .example to p\n  end\n\n  -- iterating over an array but without an explicit variable\n  -- instead the keyword it is used\n  repeat in <p/>\n    add .example to it\n  end\n\n  -- iterate while a condition is true\n  repeat while #div matches .active\n    put \"Still waiting.\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting..\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting...\" into #div.innerHTML\n  end\n\n  -- iterate until a condition is true\n  repeat until #div does not match .active\n    put \"Still waiting.\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting..\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting...\" into #div.innerHTML\n  end\n\n  -- iterate until an event 'stop' occurs\n  repeat until event stop\n    put \"Still waiting.\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting..\" into #div.innerHTML\n    wait 1s\n    put \"Still waiting...\" into #div.innerHTML\n  end\n\n  -- iterate five times\n  repeat 5 times\n    put \"Fun \" before end of #div.innerHTML\n  end\n\n  -- iterate forever\n  repeat forever\n    toggle .throb on #div\n    wait 1s\n  end\n```\n\n----------------------------------------\n\nTITLE: Debouncing and Throttling Events in HTML\nDESCRIPTION: These examples show how to debounce and throttle events using hyperscript, delaying or limiting the frequency of event handler execution. Debouncing waits for a pause in the event firing, while throttling ensures events are only processed within a certain timeframe.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n-- will wait until 500ms have passed without a keyup to trigger\non keyup debounced at 500ms ...\n-- will fire every 500ms regardless of the number of events\non mousemove throttled at 500ms ...\n```\n\n----------------------------------------\n\nTITLE: Adding a class with the add command in _hyperscript\nDESCRIPTION: Adds the 'red' CSS class to the button when clicked. Demonstrates class manipulation using the dot notation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_58\n\nLANGUAGE: hyperscript\nCODE:\n```\non click add .red to me\n```\n\n----------------------------------------\n\nTITLE: Configuring an EventSource for Server-Sent Events\nDESCRIPTION: Sets up an EventSource connection for receiving server-sent events. It handles both message events (placing content into a div) and connection open events (logging to console).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_84\n\nLANGUAGE: hyperscript\nCODE:\n```\neventsource ChatUpdates from http://myserver.com/chat-updates\n\n  on message as string\n    put it into #div\n  end\n\n  on open\n    log \"connection opened.\"\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a CryptoMiner Worker in _hyperscript Embedded in HTML (html, hyperscript, javascript)\nDESCRIPTION: This snippet shows an HTML script tag containing _hyperscript code that defines and interacts with a web worker named 'Miner' using an external script. The worker loads a CryptoMiner implementation, exposes methods to start and stop mining, and integrates with a checkbox input to trigger mining in response to user interaction. Dependencies include the '/scripts/mine-crypto.js' external script and a browser environment supporting Web Workers. The code demonstrates how worker methods can be controlled through the DOM, with the main thread invoking asynchronous methods 'startMining' and 'stopMining' as if they were synchronous.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/worker.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  worker Miner(\"/scripts/mine-crypto.js\")\n  \tjs\n  \t\tvar miner = new CryptoMiner();\n  \t\treturn { miner }\n  \tend\n\n  \tdef startMining() miner.start() end\n  \tdef stopMining() miner.stop() end\n  end\n</script>\n\n<label>\n  <input\n    type=\"checkbox\"\n    _=\"on change\n                            if me.checked Miner.startMining()\n                            else Miner.stopMining()\"\n  />\n  Disable ads <small>and enable cryptocurrency mining</small>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Using 'take' Command with Classes in _hyperscript (HTML)\nDESCRIPTION: Demonstrates using the _hyperscript 'take' command to copy the .active class from elsewhere and apply it to the clicked div when the user clicks it. No additional dependencies are required except for the inclusion of _hyperscript in the HTML. The '_=' attribute specifies the _hyperscript action to be taken upon a 'click' event. The command affects the classes on the associated element, toggling .active on when clicked.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/take.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click take .active\">Activate Me!</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Background Transition with hyperscript\nDESCRIPTION: This snippet demonstrates how to use hyperscript to change the background color of an element dynamically on pointer events. It introduces an event loop on pointerdown, generating a random color each time until the pointerup event. Requires hyperscript to be loaded via a script tag.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\non pointerdown\n  repeat until event pointerup from the document\n    set rand to Math.random() * 360\n    transition\n      *background-color\n      to `hsl($rand 100% 90%)`\n      over 250ms\n  end\n  transition *background-color to initial\n```\n\n----------------------------------------\n\nTITLE: Show and hide element with timing in _hyperscript\nDESCRIPTION: Hides the button when clicked, then waits 2 seconds before showing it again. Demonstrates sequential execution with wait command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_65\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n               hide me\n               wait 2s\n               show me\n```\n\n----------------------------------------\n\nTITLE: Clipboard Copy with hyperscript\nDESCRIPTION: A button for copying text from a sibling element to the clipboard. Once clicked, the button updates its label to 'copied!' for one second. Requires hyperscript library loading and access to the navigator clipboard API.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button style=\"font:inherit;font-size:.8em;background:#3465a4;color:white;border:none;padding: 0 .4em; border-radius: .4em\" _=\"on click\n  writeText(my previousElementSibling's innerText) on navigator.clipboard\n  put 'copied!' into me\n  wait 1s\n  put 'copy' into me\">copy</button>\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals for Dynamic URLs in _hyperscript fetch\nDESCRIPTION: Shows how to construct a dynamic URL for a `fetch` request using a hyperscript template literal. It retrieves a `userId` from a data attribute, incorporates it into the URL string using `${userId}`, and fetches the user profile as JSON.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nset userId to my [@data-userId]\nfetch `/users/${userId}/profile` as JSON\n```\n\n----------------------------------------\n\nTITLE: Implementing a Click Counter with hyperscript\nDESCRIPTION: This example showcases the use of a click event in hyperscript to increment and display a counter within a div element's innerHTML. The counter starts at 1 and increases with each click, using the 'increment' command and 'my' possessive reference.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/me.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-script=\\\"on click increment my innerHTML\\\">1</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic _hyperscript Function\nDESCRIPTION: Demonstrates how to define a simple asynchronous _hyperscript function named `delayTheAnswer` within an HTML `<script>` tag. The function waits for 2 seconds using the `wait` command and then returns the value 42.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/def.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def delayTheAnswer()\n    wait 2s\n    return 42\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Clearing Content After htmx Request with Hyperscript\nDESCRIPTION: Shows how to use Hyperscript with htmx to clear a message container after an AJAX request completes. It listens for the htmx:afterRequest event, waits 2 seconds, then clears the content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/a-fun-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button hx-get=\"/message\" hx-target=\"#messages\"\n        _=\"on htmx:afterRequest wait 2s then put '' into #messages\">\n  Get A Message\n</button>\n<div id=\"messages\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using settle command to wait for transitions in _hyperscript\nDESCRIPTION: Adds a class, waits for transitions to complete using settle, then removes the class. Essential for working with CSS transitions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_69\n\nLANGUAGE: hyperscript\nCODE:\n```\non click add .red then settle then remove .red\n```\n\n----------------------------------------\n\nTITLE: Disabling Button During htmx Request - HTML\nDESCRIPTION: This code snippet demonstrates how to disable an HTML button element while an htmx request is pending, re-enabling it once the request is complete. It uses _hyperscript's `on click toggle @disabled until htmx:afterOnLoad` attribute to manage the disabled state based on user interaction and htmx lifecycle events. Dependencies include htmx and _hyperscript libraries, and the button will send a GET request to \"/example\" when clicked, preventing duplicate requests by staying disabled until the response is received.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/40-disable-btn-during-request.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n      class=\"button is-primary\"\n      hx-get=\"/example\"\n      _=\"on click toggle @disabled until htmx:afterOnLoad\">\n      Do It\n</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling Buttons During HTMX Requests with _hyperscript\nDESCRIPTION: This snippet uses _hyperscript to disable all buttons (except those with the 'no-disable' class) during an HTMX request. It toggles the disabled attribute on buttons from the start of the request until after the response is loaded.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/50-disable-btn-during-request-all.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body _=\"on every htmx:beforeSend in <button:not(.no-disable)/> \n           tell it \n               toggle [@disabled='true'] until htmx:afterOnLoad\">\n      \n</body>\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript `alert` from Hyperscript in HTML\nDESCRIPTION: This HTML example shows how to execute standard JavaScript code from within hyperscript. A div element uses the `_` attribute to define an `on click` event handler that calls the built-in JavaScript `alert()` function.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n  <div _=\"on click call alert('You clicked me!')\">\n    Click Me!\n  </div>\n\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic SSE Connections in Hyperscript\nDESCRIPTION: This code snippet illustrates the use of dynamic server connections via the `open(url)` method for an SSE EventSource in Hyperscript. It allows switching between different server URLs while maintaining a single connected EventSource object, handling JSON data in incoming messages.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/event-source.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\neventsource DynamicServer\n    on message as json\n        log it\n    end\nend\n\n-- somewhere else in your code\nDynamicServer.open(\"test.com/test1.sse\") -- creates a new connection to this URL\n\nDynamicServer.open(\"test.com/test2.sse\") -- automatically closes the first connection\nDynamicServer.close()\n\nDynamicServer.open(\"test.com/test3.sse\") -- reconnects to a different endpoint.\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespaced _hyperscript Function\nDESCRIPTION: Shows how to define a namespaced function `utils.delayTheAnswer` in _hyperscript using dot notation within an HTML `<script>` tag. This helps organize functions within a logical structure.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/def.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def utils.delayTheAnswer()\n    wait 2s\n    return 42\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting a Timeout for a fetch Request in _hyperscript (HTML)\nDESCRIPTION: Example showing how to add a timeout to a `fetch` request using the `with` keyword and a `timeout` property within an HTML button's `_` attribute. The fetch request to `/example` will time out after 300 milliseconds, and the result will be placed into the button's innerHTML.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click fetch /example with timeout:300ms\n                    put the result into my innerHTML\">\n  Get from /example!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Toggling Classes with the 'toggle' Command in Hyperscript\nDESCRIPTION: Demonstrates toggling a class or other content on a target element using the 'toggle' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_30\n\nLANGUAGE: hyperscript\nCODE:\n```\ntoggle .clicked on me\n```\n\n----------------------------------------\n\nTITLE: Fade-Out Animation Before Element Removal with Hyperscript\nDESCRIPTION: An enhanced version of the self-removing element that adds a fade-out transition before removal. This example shows how Hyperscript can create simple animations with minimal code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/a-fun-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"messages\">\n  <div _=\"on load wait 2s then transition my opacity to 0 then remove me\">\n    Hyperscript is *REALLY* awesome...\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Examples of Go Command in Hyperscript in HTML\nDESCRIPTION: These HTML examples demonstrate the practical use of the 'go' command in Hyperscript for page navigation. Each button includes an event binding to navigate to a URL or a page section, illustrating different navigation styles and options directly in the HTML context.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/go.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click go to url https://duck.com\">\n  Go Search\n</button>\n\n<button _=\"on click go to the top of the body\">\n  Go To The Top...\n</button>\n\n<button _=\"on click go to the top of #a-div -20px\">\n  Go To The Top Of A Div, with 20px of padding in the viewport\n</button>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Inserting Data – hyperscript – hyperscript/HTML\nDESCRIPTION: Uses an inline hyperscript attribute to fetch data from a URL and insert the result into a specified element upon button click. This approach has no explicit JS or CSS dependency, only hyperscript runtime. Input: button click; Output: updated div content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button _=\\\"on click\\n             fetch /clickedMessage/\\n             put the result into #fetch-target-3\\\">\\n Fetch It\\n</button>\\n<div id=\\\"fetch-target-3\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Attributes with an Object in _hyperscript\nDESCRIPTION: Shows how to set a cookie along with specific attributes like `maxAge` by assigning a JavaScript object to a cookie name using the `cookies` symbol in _hyperscript. The `value` property sets the cookie's value, and other properties (like `maxAge`) are converted to kebab-case and used as cookie attributes. This requires no external dependencies beyond _hyperscript itself.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/cookies.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\n  set cookies['My-Cookie'] to {value: \"true\", maxAge: 600}\n```\n\n----------------------------------------\n\nTITLE: Using Prefixes for Global and Element Scopes in Hyperscript\nDESCRIPTION: This hyperscript snippet illustrates the naming conventions for indicating variable scope. Variables starting with `$` default to global scope (e.g., `$foo`), while those starting with `:` default to element scope (e.g., `:bar`).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_19\n\nLANGUAGE: hyperscript\nCODE:\n```\n  set $foo to 10 -- sets a global named $foo\n  set :bar to 20 -- sets an element scoped variable named :bar\n\n```\n\n----------------------------------------\n\nTITLE: Search Input Implementation with _hyperscript\nDESCRIPTION: HTML implementation of a search input that uses _hyperscript to filter blockquote elements. The input triggers filtering on each keyup event and responds to the Escape key to reset the search.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/60-filter-a-group-of-elements.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" placeholder=\"Search Quotes...\"\n       _=\"on keyup\n           if the event's key is 'Escape'\n             set my value to ''\n             trigger keyup\n           else\n            show <blockquote/> in #quotes when its textContent contains my value\">\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Operations with hyperscript\nDESCRIPTION: Illustrates using hyperscript for performing asynchronous tasks without callbacks or promises. One div waits 5 seconds on a click before sending a 'hello' event; another fetches JSON data and displays it in-place on initialization. Requires hyperscript for execution.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click wait 5s send hello to .target\">\n\n<div _=\"init fetch https://stuff as json then put result into me\">Using fetch() API...</div>\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a WebSocket - hyperscript\nDESCRIPTION: This example shows sending a JSON-like message object to a previously defined hyperscript WebSocket using the 'send' command. It requires the 'socket' feature enabled and the socket defined (e.g., MySocket). Key parameters include the message object (with arbitrary fields) and the named socket. The message is serialized and dispatched to the server. The snippet expects the recipient to process the message accordingly.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n    send myMessage(foo: \"bar\", doh: 42) to MySocket\n```\n\n----------------------------------------\n\nTITLE: Setting innerHTML with put command in _hyperscript\nDESCRIPTION: Puts the string 'Clicked!' into the button's innerHTML when clicked. Shows the 'put' command syntax for updating element content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_54\n\nLANGUAGE: hyperscript\nCODE:\n```\non click put 'Clicked!' into my innerHTML\n```\n\n----------------------------------------\n\nTITLE: Adding Classes with the 'add' Command in Hyperscript\nDESCRIPTION: Demonstrates how to add content (typically CSS classes) to a target element using the 'add' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .myClass to me\n```\n\n----------------------------------------\n\nTITLE: Showing DOM Elements in Hyperscript\nDESCRIPTION: Demonstrates making an element visible in the DOM using the 'show' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_26\n\nLANGUAGE: hyperscript\nCODE:\n```\nshow #anotherDiv\n```\n\n----------------------------------------\n\nTITLE: Toggling element display with style literal in _hyperscript\nDESCRIPTION: Toggles the display property of the next paragraph element when clicked. Uses the star (*) syntax to target CSS properties.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_63\n\nLANGUAGE: hyperscript\nCODE:\n```\non click toggle the *display of the next <p/>\n```\n\n----------------------------------------\n\nTITLE: Basic Show Command Examples in HTML\nDESCRIPTION: Examples demonstrating basic usage of the show command with different display strategies and timing.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/show.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on load wait 2s then show\">I'll show after a few seconds!</div>\n\n<div _=\"on load wait 2s then show:inline\">\n  I'll show inline after a few seconds!\n</div>\n\n<div _=\"on load wait 2s then show with *opacity\">\n  I'll show after a few seconds with opacity!\n</div>\n\n<div _=\"on click show #anotherDiv\">Show Another Div!</div>\n\n<!-- on every keyup show all elements in #quotes that match the inputs value -->\n<input type=\"text\" placeholder=\"Search...\"\n     _=\"on keyup\n          show <p/> in #quotes when its textContent contains my value\">\n```\n\n----------------------------------------\n\nTITLE: Sending or Triggering Events in _hyperscript\nDESCRIPTION: Illustrates the syntax for sending or triggering events using _hyperscript. Events can be sent to a specific target or triggered on it with optional named arguments provided in the `event.detail` object. Ensures dynamic interaction on web pages by using `send` and `trigger` commands in conjunction with HTML elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/send.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nsend <event-name>[(<named arguments>)] [to <expression>] trigger <event-name>[(<named arguments>)] [on <expression>]\n```\n\n----------------------------------------\n\nTITLE: Toggle Command Usage Examples in HTML\nDESCRIPTION: Practical examples demonstrating various ways to use the toggle command, including class toggling, attribute toggling, timed toggles, event-based toggles, and visibility toggles.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .toggled\">Toggle Me!</button>\n\n<div _=\"on click toggle .toggled on #another-div\">Toggle Another Div!</div>\n\n<button _=\"on click toggle [@disabled='true']\">Toggle Disabled!</button>\n\n<div _=\"on click toggle .toggled for 2s\">Toggle for 2 seconds</div>\n\n<div _=\"on mouseenter toggle .visible on #help until mouseleave\">\n  Mouse Over Me!\n</div>\n<div id=\"help\">I'm a helpful message!</div>\n\n<button _=\"on click toggle between .enabled and .disabled\">\n  Toggle Me!\n</button>\n\n<button _=\"on click toggle *display on the next <div/>\">\n  Toggle Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Reading and Toggling Attributes via Literals - Hyperscript in HTML\nDESCRIPTION: These snippets demonstrate accessing and toggling DOM attributes using Hyperscript's short and long attribute literal syntaxes. The short form, '@foo', can read or set attributes, while the bracketed form allows querying or toggling specific attribute values. The target elements must have the relevant attributes and run in an environment with Hyperscript loaded.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div foo=\"bar\" _=\"on click put @foo into me\">Click Me</div>\\n<div _=\"on click toggle [@foo='bar'] into me\">Click Me</div>\n```\n\n----------------------------------------\n\nTITLE: Delaying Execution with the 'wait' Command in Hyperscript\nDESCRIPTION: Demonstrates waiting for a specified time before continuing execution using the 'wait' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_32\n\nLANGUAGE: hyperscript\nCODE:\n```\nwait 2s then remove me\n```\n\n----------------------------------------\n\nTITLE: Setting innerHTML with set command in _hyperscript\nDESCRIPTION: Sets the innerHTML of a button to 'Clicked!' when the button is clicked. Demonstrates the basic 'set' command for DOM manipulation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_53\n\nLANGUAGE: hyperscript\nCODE:\n```\non click set my innerHTML to 'Clicked!'\n```\n\n----------------------------------------\n\nTITLE: Transition Commands Example - hyperscript\nDESCRIPTION: Examples of using the transition command in hyperscript to change properties of elements using transition targets and style properties.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/transition.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition my opacity to 0\ntransition the div's opacity to 0\ntransition #anotherDiv's opacity to 0\ntransition .aClass's opacity to 0\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the `remove` Command in _hyperscript (HTML)\nDESCRIPTION: Provides HTML examples demonstrating various uses of the `_hyperscript` `remove` command triggered by click events within the `_` attribute. Examples include removing the element itself, removing a class from the current element or another element identified by ID, removing multiple classes simultaneously, and removing an attribute (like `disabled`) from a subsequent element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/remove.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click remove me\">Remove Me!</div>\n\n<div _=\"on click remove .not-clicked\">Remove Class From Me!</div>\n\n<div _=\"on click remove .not-clacked from #another-div\">\n  Remove Class From Another Div!\n</div>\n\n<div _=\"on click remove .foo .bar from #another-div\">\n  Remove Class From Another Div!\n</div>\n\n<button _=\"on click remove @disabled from the next <button/>\">Un-Disable The Next Button</button>\n<button _=\"on click call alert('world')\" disabled>Hello!</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Functions and Breakpoints in _hyperscript - hyperscript\nDESCRIPTION: This snippet demonstrates how to define multiple functions in _hyperscript, inserting a `breakpoint` command to trigger the debugger (HDB) during execution. The function `f_c` logs messages before and after the `breakpoint`, allowing the developer to observe control flow and environment. Prerequisites include the _hyperscript runtime and HDB integration in the target environment. The snippet expects an environment where log outputs are visible and the HDB panel is available; the code illustrates using `log` for messaging and `breakpoint` for interactive debugging.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/hdb.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef f_c\n\tlog \"enter f_c\"\n\tbreakpoint\n\tlog \"exit f_c\"\nend\n\ndef f_b\n...\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation Using hyperscript\nDESCRIPTION: Snippets for filtering and modifying DOM elements inspired by HyperTalk and AppleScript syntax. One example adds a class to a paragraph, another closes detail elements. Assumes hyperscript is available in the environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click tell <p/> in me add .highlight\">\n\n<div _=\"tell <details /> in .article set you.open to false\">\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Elements InnerHTML by Class - Hyperscript in HTML\nDESCRIPTION: This snippet illustrates selecting multiple elements by a class literal using Hyperscript, setting their innerHTML property in response to a button click. When the button is clicked, all elements with class 'example' receive the 'Clicked!' value. Dependencies include Hyperscript in the environment and HTML elements with the target class. The key parameter is the class selector, and inputs are user clicks. Output is updated content of all selected elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click put 'Clicked!' into .example.innerHTML\">Click Me</button>\\n<div class=\"example\"></div>\\n<div class=\"example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Attribute Manipulation in HyperScript\nDESCRIPTION: Shows how to set and access element attributes using the @ prefix syntax\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_22\n\nLANGUAGE: hyperscript\nCODE:\n```\nset @my-attr to 10\n```\n\nLANGUAGE: html\nCODE:\n```\n<div my-attr=\"10\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using 'take' Command for ARIA Attributes in _hyperscript (HTML)\nDESCRIPTION: Shows how to utilize the _hyperscript 'take' command with an ARIA attribute ([\\@aria-current=page]) to transfer or update the aria-current attribute among step elements in a wizard or multi-step UI. Requires _hyperscript, with the command executed on click events. The snippet removes the specified attribute from elements matching '.step' and applies it to the event's target. Inputs are user click events; output is ARIA attribute manipulation for accessibility.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/take.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click take [@aria-current=page] from .step for the event's 'target\">\n  <a class=\"step\">Step 1</a>\n  <a class=\"step\">Step 2</a>\n  <a class=\"step\">Step 3</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Triggering _hyperscript Render Command on Click\nDESCRIPTION: This HTML button uses an inline _hyperscript `on click` event handler. When clicked, it calls the `render` command, passing data obtained from `getColors()` to the template with the ID `#color-template`. The rendered result is then placed into the element with the ID `#colors`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/render.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n  _=\"on click\n    render #color-template with (colors: getColors())\n    then put it into #colors\"\n>\n  Get the colors\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Comments in Hyperscript\nDESCRIPTION: This hyperscript snippet shows the standard comment syntax. Comments start with two dashes (`--`) followed by whitespace and extend to the end of the line. It also mentions that `//` and `/* ... */` style comments are supported for easier migration.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_11\n\nLANGUAGE: hyperscript\nCODE:\n```\n  -- this is a comment\n  log \"Yep, that was a comment\"\n\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Elements with hyperscript and \"put\" Command\nDESCRIPTION: This snippet demonstrates the use of the 'on click' event handler in hyperscript to change the text content of a button when it is clicked, using the 'put' command. It requires an HTML element with a data-script attribute, and outputs the updated text into the clicked element itself.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/me.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button data-script=\\\"on click put 'I have been clicked' into me\\\">\\n    click me\\n    </button>\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Conversion Resolver - JavaScript\nDESCRIPTION: Demonstrates how to add a dynamic resolver to the conversion chain in hyperscript by pushing a function into _hyperscript.config.conversions.dynamicResolvers. The resolver examines the conversion name, optionally parses arguments, and returns converted strings for specific conversion names (MyConversion:Short and MyConversion:Long). No output if the conversion name doesn't match expected prefix. Requires hyperscript runtime and is suitable for advanced extension patterns. Inputs: conversionName and value. Outputs: varies based on handler logic.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/as.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n_hyperscript.config.conversions.dynamicResolvers.push(function (\n  conversionName,\n  val\n) {\n  if (conversionName.indexOf(\"MyConversion:\") == 0) {\n    var arg = conversionName.split(\":\")[1];\n    if (arg === \"Short\") {\n      return \"I converted : \" + val;\n    } else if (arg === \"Long\") {\n      return \"I am happy to announce I converted : \" + val;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Show/hide with opacity strategy in _hyperscript\nDESCRIPTION: Uses opacity instead of display for hiding and showing the element. Demonstrates alternative visibility strategies.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_66\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n               hide me with *opacity\n               wait 2s\n               show me with *opacity\n```\n\n----------------------------------------\n\nTITLE: Using Hyperscript `add` Command Examples (HTML/Hyperscript)\nDESCRIPTION: Provides various examples of the `add` command within HTML elements using the `_` attribute for Hyperscript. Demonstrations include adding a class on click, adding a class to a different element, adding/setting an attribute, adding CSS custom properties dynamically on input change, and conditionally adding an attribute to other elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/add.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked\">Click Me!</div>\n\n<div _=\"on click add .clacked to #another-div\">Click Me!</div>\n\n<button _=\"on click add @disabled='true'\">Disable Me!</button>\n\n<input\n  type=\"color\"\n  _=\"on change add { '--accent-color': my.value } to document.body\"\n/>\n\n<button _=\"on click add @disabled='true' to <button/> when it is not me\">Disable Other Buttons</button>\n```\n\n----------------------------------------\n\nTITLE: Adding and Logging Classes Using _hyperscript in HTML\nDESCRIPTION: Demonstrates how to use _hyperscript directives in HTML elements to add a class to the element on click and to log all elements with a specific class. The first snippet adds the .clicked class to a div when clicked; the second logs all elements with the .clicked class upon click. Requires the _hyperscript library and the DOM to be loaded. The _ attribute attaches _hyperscript behaviors, the class reference expression (e.g., .clicked) is used to select all elements with that class, and log is used for output.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/class-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked\">Add the .clicked class to me!</div>\n\n<div _=\"on click log .clicked\">\n  Log all elements with the clicked class on it in the DOM\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tell Command Usage in HTML with HyperScript\nDESCRIPTION: Provides an example of using the 'tell' command within an HTML element. It shows how to highlight paragraphs and log their content when the div is clicked, demonstrating the use of 'tell' to change the target of subsequent commands.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/tell.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click tell <p/> in me\n                   add .highlight -- adds the highlight class to each p\n                                  -- found in this element...\n                   log your textContent\n                 end \"\n>\n  Click to highlight paragraphs\n  <p>Hyperscript is cool!</p>\n  <p>Sure is!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Event Handling with _hyperscript\nDESCRIPTION: Demonstrates how to handle events using the `send` and `trigger` commands in _hyperscript within HTML. Events are associated with HTML elements to perform actions such as logging messages or updating contents based on user interactions. `doIt` events are triggered with named arguments to dynamically change the output or log information.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/send.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click send doIt(answer:42) to #div1\">Send an event</div>\n<div\n  id=\"div1\"\n  _=\"on doIt(answer) put `The answer is $answer` into my.innerHTML\"\n>\n  Check the console for the answer...\n</div>\n\n<div _=\"on click trigger doIt(answer:42) end\n        on doIt(answer) log `The answer is $answer`\">\n  Click Me!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Hyperscript in a JavaScript Build Environment\nDESCRIPTION: This JavaScript snippet demonstrates how to import and initialize hyperscript when using a JavaScript module bundler or build process. It imports the library from the 'hyperscript.org' package and calls `_hyperscript.browserInit()` to activate its functionality in the browser.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  import _hyperscript from 'hyperscript.org';\n\n  _hyperscript.browserInit();\n\n```\n\n----------------------------------------\n\nTITLE: Using Async in Hyperscript Expressions\nDESCRIPTION: This snippet illustrates the syntax for using the async keyword in hyperscript. It allows for asynchronous execution of expressions, bypassing the default synchronization behavior with promises.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/async.md#2025-04-22_snippet_0\n\nLANGUAGE: EBNF\nCODE:\n```\n  async <expression>\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Show Command in _hyperscript\nDESCRIPTION: This code implements a search functionality that filters blockquote elements based on user input. It handles the Escape key to clear the search and shows elements only when their text content contains the search value. The filter operates on keyup events in the input field.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/60-filter-a-group-of-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\non keyup\n           if the event's key is 'Escape'\n             set my value to ''\n             trigger keyup\n           else\n            show <blockquote/> in #quotes when its textContent contains my value\n```\n\n----------------------------------------\n\nTITLE: Extending hyperscript with JavaScript\nDESCRIPTION: Demonstrates adding new commands to hyperscript using JavaScript. Developers can define custom hyperscript commands by interfacing directly with the hyperscript runtime. Requires understanding of both JavaScript and hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n_hyperscript.addCommand(\n  \"foo\",\n  (parser, rt, tokens) => ...)\n```\n\n----------------------------------------\n\nTITLE: Toggling Visibility of Next Sibling Element using _hyperscript\nDESCRIPTION: This HTML snippet demonstrates using the `next` relative positional expression within a _hyperscript attribute (`_`). When the button is clicked (`on click`), it targets the immediately following element matching the CSS selector `<div/>` (`next <div/>`) and toggles the `.hidden` CSS class on it, effectively showing or hiding the div.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/relative-positional.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .hidden on the next <div/>\">Toggle Hidden</button>\n<div class=\"hidden\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incrementing Property Values Using 'your' in Possessive Expressions - _hyperscript\nDESCRIPTION: This _hyperscript snippet uses a possessive expression with 'your' to increment a property (here, 'value') for every element matched by the .counter selector. It demonstrates the use of 'your' to access an element's property in a tell/increment command. Assumes elements matching .counter exist and have a numeric 'value' property.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/you.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell <.counter/>\n    increment your value\n```\n\n----------------------------------------\n\nTITLE: Toggling a Class on Element – hyperscript – hyperscript/HTML\nDESCRIPTION: Toggles a CSS class on a target element using an inline hyperscript attribute on the button, referencing the target by ID. Needs the .red-border CSS class and hyperscript loaded. Input: click event. Output: border toggled.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button _=\\\"on click toggle .red-border on #toggle-target-3\\\">\\n  Toggle Class\\n</button>\\n<div id=\\\"toggle-target-3\\\">\\n  Toggle Target\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying and Removing Class with Delay in Hyperscript\nDESCRIPTION: An HTML example using `_hyperscript`. When the `div` is clicked, it adds the CSS class `.example`, pauses execution for 2 seconds using `wait 2s`, and then removes the `.example` class.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/wait.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .example then wait 2s then remove .example\">\n  Add and then remove a class\n</div>\n```\n\n----------------------------------------\n\nTITLE: Page Navigation with the 'go' Command in Hyperscript\nDESCRIPTION: Shows how to navigate to a new page or smoothly scroll within a page using the 'go' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_9\n\nLANGUAGE: hyperscript\nCODE:\n```\ngo to the top of the body smoothly\n```\n\n----------------------------------------\n\nTITLE: Setting attributes with set command in _hyperscript\nDESCRIPTION: Sets the disabled attribute on a button when clicked. Shows how to target attributes using the @ symbol prefix.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_57\n\nLANGUAGE: hyperscript\nCODE:\n```\non click set @disabled to 'disabled'\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Removable Behavior in Hyperscript\nDESCRIPTION: Behavior definition that accepts a parameter to specify which element should trigger the removal.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_76\n\nLANGUAGE: hyperscript\nCODE:\n```\nbehavior Removable(removeButton)\n  on click from removeButton\n    remove me\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering elements with conditional show command in _hyperscript\nDESCRIPTION: Shows list items that contain the input value when typing. Demonstrates the 'when' clause for conditional filtering.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_67\n\nLANGUAGE: hyperscript\nCODE:\n```\non keyup show <li/> in #color-list\n                     when its innerHTML contains my value\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Positional Expression Syntax using EBNF\nDESCRIPTION: This EBNF snippet formally defines the grammar for the `relative positional` expression in _hyperscript. It specifies the required `next` or `previous` keyword followed by a CSS selector (`<css expression>`), and optional `from <expression>`, `within <expression>`, and `with wrapping` clauses for controlling the DOM search scope and behavior relative to a starting element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/relative-positional.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  (next|previous) <css expression> [from <expression>] [within <expression>] [with wrapping]\n```\n\n----------------------------------------\n\nTITLE: Setting Variable and Property Values in HTML with _hyperscript - html\nDESCRIPTION: Shows HTML examples of using the set command in _hyperscript event handlers. The first div sets a local variable x and logs it; the second sets the color property on the my.style object. The button demonstrates using object literal form to set multiple properties (disabled and innerText) at once. All examples require _hyperscript loaded and are meant to be attached as event handlers on HTML elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/set.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click set x to 'foo' then log x\">\\n  Click Me!\\n</div>\\n\\n<div _=\"on click set my.style.color to 'red'\">\\n  Click Me!\\n</div>\\n\\n<button _=\"on click set { disabled: true, innerText: \\\"Don't click me!\\\" } on me\">\\n  Click Me!\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Selecting Buttons with Query Reference in _hyperscript (HTML)\nDESCRIPTION: This HTML snippet demonstrates using a more complex CSS selector within the _hyperscript `query reference`. It selects only buttons that do not already have the `.clicked` class using the `<button:not(.clicked)/>` syntax and adds the `.clicked` class to them upon clicking the div. This highlights the ability to use advanced CSS selectors like `:not()`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/query-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked to <button:not(.clicked)/>\">\n  Add .clicked to all buttons that don't have .clicked on it already...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Storing Data Using `it` in hyperscript\nDESCRIPTION: Demonstrates using the implicit `it` variable in hyperscript. The `fetch` command retrieves data from `/my-server/people`, parsing it as a JSON Object using an `as` expression. The result of `fetch` is automatically stored in `it`, which is then explicitly moved into a local variable named `people` using the `put` command to prevent it from being overwritten by subsequent commands.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/it.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n    fetch /my-server/people as an Object\n    put it into people\n```\n\n----------------------------------------\n\nTITLE: Incrementing Variables in Hyperscript\nDESCRIPTION: Shows how to add a value to a variable, property, or attribute using the 'increment' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_13\n\nLANGUAGE: hyperscript\nCODE:\n```\nincrement counter\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler in _hyperscript\nDESCRIPTION: Demonstrates a simple click event handler that adds a CSS class to a button when clicked.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click add .clicked\">\n  Add The \"clicked\" Class To Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Putting content before an element in _hyperscript\nDESCRIPTION: Places content before the current element in the DOM using Element.before() when clicked. Shows positional insertion with put command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_56\n\nLANGUAGE: hyperscript\nCODE:\n```\non click put 'Clicked!' before me\n```\n\n----------------------------------------\n\nTITLE: Object Property Access in HyperScript\nDESCRIPTION: Shows various ways to access object properties including dot notation, array notation, and possessive expressions\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_24\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to {name : \"Joe\", age: 35}    -- create an object with some properties\nlog x.name                          -- standard \"dot\" notation\nlog x['name']                       -- standard array-index notation\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to {name : \"Joe\", age: 35}    -- create an object with some properties\nlog x's name                        -- access the name property using a possessive\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nget the first <div/> then          -- get the first div in the DOM, setting the `results` variable\nset my innerHTML to its innerHTML  -- use possessive expressions to set the current elements innerHTML\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to {name : \"Joe\", age: 35}    -- create an object with some properties\nlog the name of x                   -- access the name property using an of expression\n```\n\n----------------------------------------\n\nTITLE: Waiting for CSS Transition End in Hyperscript\nDESCRIPTION: An HTML example demonstrating `_hyperscript`. On clicking the `div`, it adds the CSS class `.example` and then uses `wait for transitionend` to pause the script's execution until the element receives the `transitionend` event, effectively waiting for a CSS transition to complete.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/wait.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .example then wait for transitionend\">\n  Add the class, then wait for the transition to complete\n</div>\n```\n\n----------------------------------------\n\nTITLE: Showing Elements with Hyperscript\nDESCRIPTION: Demonstrates the use of hyperscript to show a hidden element upon a button click, leveraging hyperscript's syntax for DOM manipulations without JavaScript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\"on click show #show-target-3\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-3\">\\n  Hidden Element\\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\"on click show #show-target-3\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-3\">\\n  Hidden Element\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Transitioning font size with animation in _hyperscript\nDESCRIPTION: Animates font size from current to 30px, waits 2 seconds, then animates back to initial size. Shows transition command with timing.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_68\n\nLANGUAGE: hyperscript\nCODE:\n```\non click transition my *font-size to 30px\n               then wait 2s\n               then transition my *font-size to initial\n```\n\n----------------------------------------\n\nTITLE: Using positional expressions with DOM elements in _hyperscript - HTML\nDESCRIPTION: This HTML snippet demonstrates the use of positional expressions within _hyperscript to select the first or last child of a DOM element upon a click event. There are no external dependencies required beyond standard HTML and _hyperscript. The primary parameter utilized here is the 'first' or 'last' keyword within the _hyperscript attribute, which targets respective children of the DOM element. Example inputs are click events on the described elements, and the output is logging the targeted child element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/positional.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click log first in me\">... Log my first child ...</div>\n\n<div _=\"on click log last in me\">\n  ...\n  Log my last child\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Integration with hyperscript\nDESCRIPTION: Showcases the integration of hyperscript with existing JavaScript code. Snippets include executing a simple alert, using regex within hyperscript, and initializing draggable functionality. Assumes hyperscript library is included.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"init js alert('Hello from JavaScript!') end\"></div>\n\n<div _=\"init js(haystack) return /needle/gi.exec(haystack) end\">\n\n<div _=\"install Draggable(dragHandle: .titlebar)\">\n```\n\n----------------------------------------\n\nTITLE: Installing a Behavior in HTML\nDESCRIPTION: Example of installing the Removable behavior on a div element, passing a selector as the removeButton parameter.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_77\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"banner\" _=\"install Removable(removeButton: #close-banner)\">\n  ...\n```\n\n----------------------------------------\n\nTITLE: Conditional If Statement - Hyperscript\nDESCRIPTION: Demonstrates basic if/else conditional flow in Hyperscript for incrementing and displaying values with output elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment :x\n              if :x <= 3\n                put :x into the next <output/>\n              else\n                put '3 is the max...' into the next <output/>\n              end\">\n  Click Me\n</button>\n<output>--</output>\n```\n\n----------------------------------------\n\nTITLE: Setting Values with the 'put' Command in Hyperscript\nDESCRIPTION: Shows how to put a value into a variable or property using the 'put' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_19\n\nLANGUAGE: hyperscript\nCODE:\n```\nput \"cool!\" into me\n```\n\n----------------------------------------\n\nTITLE: Console Logging in Hyperscript\nDESCRIPTION: Shows how to log expressions to the console for debugging purposes using the 'log' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_15\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog me\n```\n\n----------------------------------------\n\nTITLE: Example of Standard Event Handling with hyperscript\nDESCRIPTION: This snippet showcases basic use of hyperscript for adding and removing CSS classes based on mouse events. It highlights hyperscript's simplicity in defining condition-based logic directly in the HTML.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on mouseenter add .visible to #help end\n        on mouseleave remove .visible from #help end\">\n  Mouse Over Me!\n</div>\n<div id=\"help\">I'm a helpful message!</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling an attribute on another element in _hyperscript\nDESCRIPTION: Toggles the disabled attribute on a different button (identified by #say-hello) when clicked. Shows cross-element manipulation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_61\n\nLANGUAGE: hyperscript\nCODE:\n```\non click toggle @disabled on #say-hello\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in _hyperscript Functions with `catch`\nDESCRIPTION: Illustrates error handling in a _hyperscript function using a `catch` block. The `delayTheAnswer` function intentionally throws an error, which is caught by the `catch e` block, and the error message is returned.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/def.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def delayTheAnswer()\n    wait 2s\n    throw \"Nope!\"\n  catch e\n    return e\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Events with a Single Handler in HTML\nDESCRIPTION: This example demonstrates how to use hyperscript to assign a single handler to multiple events using the `or` syntax. When either event is triggered, the handler performs the specified command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click or touchstart fetch /example then put it into my innerHTML\">\n  Fetch it...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying Button Attributes with _hyperscript\nDESCRIPTION: This snippet demonstrates how to add or remove the `disabled` attribute of a button in an HTML document using _hyperscript. It uses the `on click` event handler to toggle the state of the button. Dependencies include a web environment where _hyperscript is supported. The actions are triggered by user interactions with expected input from mouse clicks, resulting in changes to button attributes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/attribute-ref.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button _=\\\"on click add [@disabled]\\\">Disable Me!</button>\\n\\n<button _=\\\"on click remove [@disabled]\\\">Enable Me!</button>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Command Execution in Hyperscript\nDESCRIPTION: Demonstrates running commands asynchronously using the 'async' keyword, allowing operations to run without blocking execution.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nasync fetch /example\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Hyperscript\nDESCRIPTION: Examples of try-catch blocks in both functions and event handlers.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_45\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef example\n  call mightThrowAnException()\ncatch e\n  log e\nend\n\non click\n  call mightThrowAnException()\ncatch e\n  log e\nend\n```\n\n----------------------------------------\n\nTITLE: Using Debounce Modifier in Hyperscript (HTML)\nDESCRIPTION: This snippet showcases the debounce feature for a button's click event in hyperscript. It ensures the event handler runs at most once every second, effectively managing rapid sequences of click events.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    _=\"on click debounced at 1s put 'Finally, you stopped clicking' into me\"\n  >\n    Click me...\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Async Button Click Event in HTML with Hyperscript\nDESCRIPTION: This HTML example demonstrates the use of the async keyword in a button click event handler using hyperscript. When the button is clicked, a promise is generated without blocking the subsequent code execution. It does not require additional dependencies beyond hyperscript itself.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/async.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\"on click async call generatePromise() \">\n  Generate a promise but don\\'t block\n</button>\n```\n\n----------------------------------------\n\nTITLE: Terminating Command Blocks with `end` in Hyperscript\nDESCRIPTION: This hyperscript snippet demonstrates terminating a block of commands associated with another command (like `if`) using the `end` keyword. This delineates the scope of the conditional block.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_13\n\nLANGUAGE: hyperscript\nCODE:\n```\n  if x > 10  -- start of the conditional block\n    log \"Greater than 10\"\n  end        -- end of the conditional block\n\n```\n\n----------------------------------------\n\nTITLE: Event Handling with hyperscript\nDESCRIPTION: Demonstrates how to use hyperscript for handling custom events between HTML elements. A button sends a 'hello' event to a form, which triggers an alert. Requires the hyperscript library for event dispatching and handling.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click send hello to <form />\">Send</button>\n\n<form _=\"on hello alert('got event')\">\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Synchronization using CSS and HTML\nDESCRIPTION: An example of using Hyperscript 'settle' command with CSS transitions. Styles a 'div' with a CSS transition and toggles a class using Hyperscript to change background color upon loading, repeating six times with the 'settle' command ensuring synchronization with CSS transitions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/settle.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #pulsar {\n    transition: all 800ms ease-in-out;\n  }\n  .red {\n    background: red;\n  }\n</style>\n<div\n  id=\"pulsar\"\n  _=\"on load repeat 6 times\n                toggle .red then settle\"\n>\n  You thought the blink tag was dead?\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using break to Exit a Repeat Loop in _hyperscript\nDESCRIPTION: An example demonstrating how to use the break command to exit a repeat loop when a condition is met. The loop waits 2 seconds, checks if the element has a value, and breaks if it does. Otherwise, it appends a message to the #message element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/break.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nrepeat 3 times\n    wait 2s\n    if my @value is not empty\n      break\n    end\n    append \"Value is still empty... <br/>\" to #message\n end\n```\n\n----------------------------------------\n\nTITLE: Handle Click Event with _hyperscript in HTML\nDESCRIPTION: This code snippet demonstrates how to use _hyperscript to concatenate text from two HTML elements and update another element with the result. It sets an event handler for a button click, fetching text from elements with IDs 'first' and 'second' and concatenating them. _hyperscript must be used as the scripting language to implement the functionality.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/10-concat-two-strings.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p id=\"first\">Hello</p>\n<p id=\"second\">World</p>\n<button class=\"btn primary\" _=\"on click set my.innerText to #first.innerText + ' ' + #second.innerText\">\n  Concat\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers using fetch:beforeRequest Event in _hyperscript (HTML)\nDESCRIPTION: Demonstrates attaching an event listener to the `body` element using _hyperscript to intercept the `fetch:beforeRequest` event. Inside the event handler, it sets the `X-AuthToken` header using a value obtained from a hypothetical `getAuthToken()` function.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body _=\"on fetch:beforeRequest(headers)\n            set headers['X-AuthToken'] to getAuthToken()\">\n            ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler with Catch and Finally Blocks in Hyperscript\nDESCRIPTION: Demonstrates the new feature of using catch and finally blocks in event handlers. The handler responds to a click event, performs an action, catches any errors, and executes cleanup code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-12-25-hyperscript-0.9.2-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n  doSomething()\ncatch e\n  log e\nfinally\n  cleanUp()\n```\n\n----------------------------------------\n\nTITLE: Using Transition Commands in Hyperscript\nDESCRIPTION: Demonstrates how to use the `transition` command in Hyperscript for smooth property animations.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click transition opacity to 0 then remove me\">\n  Make Me Disappear!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Event Halting in _hyperscript\nDESCRIPTION: Shows how to halt event propagation and prevent default behavior while continuing execution.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n    on mousedown\n      halt the event -- prevent text selection...\n      -- do other stuff...\n    end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Executing Hyperscript on Element Initialization using init\nDESCRIPTION: This HTML snippet demonstrates using the `_` attribute with the `init` keyword to execute hyperscript commands when the `div` element initializes. The script waits for 2 seconds and then adds the CSS class `explode` to the element. This illustrates a common use case for delayed actions on page load.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/init.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"init wait 2s then add .explode\">\n  This div will explode after 2 seconds...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling Remote Procedure via RPC on Socket - HTML with hyperscript\nDESCRIPTION: Demonstrates invoking a remote method via hyperscript-enabled RPC. The HTML button element uses an inline hyperscript command to call 'rpc.increment' on 'MySocket' with a single argument, then updates the element's content with the result. Relies on the socket feature and correct server-side RPC implementation. Inputs include the RPC method, argument, and event (click). The result is handled asynchronously but appears synchronous due to hyperscript's async-transparency.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button\n  _=\"on click call MySocket.rpc.increment(41) then put the result into me\"\n>\n  Get the answer...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using EventSource Events in Hyperscript\nDESCRIPTION: This example shows how to interact with EventSource events like `open`, `close`, and `error` in Hyperscript. It logs the connection states and handles messages with a direct `message` handler as a string. No additional setup is required beyond a working Hyperscript environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/event-source.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\neventsource demo from http://server/demo\n\n    on message as string\n        put it into #div\n    end\n\n    on open\n        log \"connection opened.\"\n    end\n\n    on close\n        log \"connection closed.\"\n    end\n\n    on error\n        log \"handle error here...\"\n    end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Fading and Removing a DOM Element Using hyperscript - HTML\nDESCRIPTION: This hyperscript snippet demonstrates how to fade out a button by transitioning its opacity to zero and then removing it from the DOM. It utilizes hyperscript's event handling for user interaction on a button click. No additional external dependencies are required beyond hyperscript. Expected input is a click event, and the output is the button disappearing from the page.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/30-fade-and-remove.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\\\"on click transition opacity to 0 then remove me\\\">\\n  Fade & Remove\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Transferring and Assigning Attribute Values with 'take' in _hyperscript (HTML)\nDESCRIPTION: Demonstrates the extended 'take' command in _hyperscript, using both 'from' and 'with' clauses to transfer the [\\@aria-selected=true] attribute from '.item' elements and assign a new value ('false') to the clicked target. Requires _hyperscript. Key parameters include the attribute selector, new value, and target context. This is often used in selectable lists where only one option should be marked as selected at a time.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/take.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click take [@aria-selected=true] with 'false' from .item for the event's 'target\">\n  <a class=\"item\">Option 1</a>\n  <a class=\"item\">Option 2</a>\n  <a class=\"item\">Option 3</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Async Command Usage in HTML Button\nDESCRIPTION: Demonstrates practical usage of the async command in a button element, showing how to make an asynchronous fetch request while immediately updating button text.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/async.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  here we spin off the fetch and put asynchronously and immediately\n  put a value into the button\n-->\n<button\n  _=\"on click async do\n                      fetch /example\n                      put it into my.innerHTML\n                    end\n                    put 'Fetching It!' into my innerHTML\"\n>\n  Fetch it!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining a Behavior in Hyperscript\nDESCRIPTION: This snippet defines a behavior in hyperscript which can be reused across multiple elements. It uses a `behavior` keyword and consists of event-driven actions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  behavior Removable\n    on click\n      remove me\n    end\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using 'append' to Collect Content in _hyperscript\nDESCRIPTION: Demonstrates a more complex use of the 'append' command in _hyperscript, where it's used to build HTML content iteratively. It shows how 'append' writes to the 'result' variable by default when no target is specified.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/append.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\nset result to \"<div>\"\nrepeat for person in people\n    append `\n        <div id=\"${person.id}\">\n            <div class=\"icon\"><img src=\"${person.iconURL}\"></div>\n            <div class=\"label\">${person.firstName} ${person.lastName}</div>\n        </div>\n    `\nend\nappend \"</div>\"\nput it into #people\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with the 'if' Command in Hyperscript\nDESCRIPTION: Demonstrates conditional control flow using the 'if' command to check if an element matches a selector.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_12\n\nLANGUAGE: hyperscript\nCODE:\n```\nif I match .selected then call alert('I\\'m selected!')\n```\n\n----------------------------------------\n\nTITLE: Using the tell Command in Hyperscript\nDESCRIPTION: Demonstrates the use of the 'tell' command as a replacement for 'with' to modify elements without altering the 'me' symbol. It shows how to add a class to a specified element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell #anotherDiv\n  add .foo\nend\n```\n\n----------------------------------------\n\nTITLE: Changing RPC Timeout in hyperscript socket Feature - HTML with hyperscript\nDESCRIPTION: These HTML button elements demonstrate modifying the timeout behavior for RPC calls via hyperscript's socket feature. The first sets a custom timeout (5000 ms) for the next RPC call; the second disables the timeout entirely. Each button sends a remote 'increment' RPC request on click and places the result in the button. Requires a hyperscript-enabled environment with a corresponding socket and server-side handler. The 'timeout' and 'noTimeout' features help manage async reliability.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- a 5 second timeout -->\n<button\n  _=\"on click call MySocket.rpc.timeout(5000).increment(41) then put the result into me\"\n>\n  Get the answer...\n</button>\n\n<!-- no timeout -->\n<button\n  _=\"on click call MySocket.rpc.noTimeout.increment(41) then put the result into me\"\n>\n  Get the answer...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Fetch and Display in _hyperscript (HTML)\nDESCRIPTION: A basic example of using the `fetch` command within an HTML button's `_` attribute. On click, it fetches content from `/example` (as text by default) and puts the result (`it`) into the button's `innerHTML`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click fetch /example\n                    put it into my innerHTML\">\n  Get from /example!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Default Command in _hyperscript\nDESCRIPTION: Demonstrates two examples of using the 'default' command in _hyperscript. The first example sets a default value for an attribute, while the second sets a default value for a variable.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/default.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n    -- default an attribute to a value\n    default @foo to 'bar'\n\n   -- default a variable to a value\n   default x to 10\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events with Logical Operators in HTML + _hyperscript\nDESCRIPTION: This snippet demonstrates an HTML <div> element with an inline _hyperscript event handler using logical operators ('and', 'not'). When the div is clicked, the script checks two conditions: that the element does not match the 'active' class and does not contain a descendant with the 'active' class. If both are true, it adds the 'active' class to the element. Dependencies: The _hyperscript framework must be available in the environment. The primary parameter is the state of classes on the element and its children; the expected input is a click event, and the output is the conditional addition of the 'active' class. Only works in browsers supporting _hyperscript. Syntax is English-like and differs from JavaScript's symbols.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/logical-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"on click\n          if I do not match .active and I do not contain .active\n            add .active\"\n>\n  Activate Me\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Web Workers in Hyperscript\nDESCRIPTION: Creates an inline Web Worker that defines an increment function and calls it from a button click event. Web Workers provide isolated execution environments that don't share namespace with other code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_81\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  worker Incrementer\n    def increment(i)\n      return i + 1\n    end\n  end\n</script>\n<button _=\"on click call Incrementer.increment(41) then put 'The answer is: ' + it into my.innerHTML\">\n  Call a Worker...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Log Command for Debugging in Hyperscript\nDESCRIPTION: Demonstrates basic print debugging in Hyperscript by logging the result of a query selection to the console. This is the simplest way to debug Hyperscript code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_85\n\nLANGUAGE: hyperscript\nCODE:\n```\nget <div.highlighted/> then log the result\n```\n\n----------------------------------------\n\nTITLE: Creating Objects and Elements with the 'make' Command in Hyperscript\nDESCRIPTION: Demonstrates creating JavaScript class instances or DOM elements using the 'make' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_16\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a Set from a, b. c\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a <p/> called para\n```\n\n----------------------------------------\n\nTITLE: Collecting Elements by Attribute - Hyperscript\nDESCRIPTION: This snippet demonstrates using the bracketed attribute query form to collect and iterate over elements possessing the specified attribute, logging their attribute values. It supports attribute-based selection of DOM nodes. Prerequisite is a Hyperscript environment with relevant nodes. The input is each node with the attribute; output is logged attribute values.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_9\n\nLANGUAGE: hyperscript\nCODE:\n```\nfor anchor in [@href]\\n  log anchor@href\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hyperscript in a Script Tag in HTML\nDESCRIPTION: This HTML snippet illustrates defining hyperscript logic within a `<script>` tag by setting its `type` attribute to `text/hyperscript`. Features defined this way apply to the document's `body`. This example defines a `mousedown` handler that halts the event (preventing default actions like text selection) and includes comments.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n  <script type=\"text/hyperscript\">\n    on mousedown\n      halt the event -- prevent text selection...\n      -- do other stuff...\n    end\n  </script>\n\n```\n\n----------------------------------------\n\nTITLE: Using wait Command in Hyperscript\nDESCRIPTION: Equivalent hyperscript code for setTimeout using the wait command, showing the linear flow of operations with a 1 second delay.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_74\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog \"Start...\"\nwait 1s\nlog \"Finish...\"\n```\n\n----------------------------------------\n\nTITLE: Using Async Expressions in Hyperscript\nDESCRIPTION: Demonstrates how to work with asynchronous expressions in _hyperscript by setting a variable to the result of an async function.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to async getPromise()\n```\n\n----------------------------------------\n\nTITLE: Multi-Event Handlers in Hyperscript\nDESCRIPTION: Shows how to specify multiple events for a single event handler in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"on mouseenter or touchstart fetch /content then put it into my.innerHTML\"\n>\n  Fetch it...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inserting Content with the put Command in _hyperscript (HTML)\nDESCRIPTION: Demonstrates the use of the 'put' command embedded within HTML's _ attribute to directly insert content into DOM elements or their properties in response to events (e.g., click). Dependencies include inclusion of the _hyperscript library in the environment. The first two divs show alternative but equivalent patterns for inserting HTML into an element, whereas the third div creates an element via JavaScript and appends it in procedural steps. Inputs are user-triggered events; outputs are DOM mutations updating content or structure. Requires the page to support _hyperscript and its event handling system.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/put.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put '<em>Clicked!</em>' into me\">Click Me!</div>\n\n<!-- equivalent to the above -->\n<div _=\"on click put '<em>Clicked!</em>' into my.innerHTML\">Click Me!</div>\n\n<div\n  _=\"on click\n\tcall document.createElement('em')\n\tput 'Clicked!' in it\n\tput it in me\"\n>\n  Click Me!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the log Command in _hyperscript\nDESCRIPTION: Examples showing different ways to use the log command in _hyperscript: logging a single value, logging multiple values, and specifying a custom logging function with the 'with' clause.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/log.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click log 'clicked'\">Click Me!</div>\n\n<div _=\"on click log 'clicked', 'clacked'\">Click Me!</div>\n\n<div _=\"on click log 'clicked' with console.debug\">Click Me!</div>\n```\n\n----------------------------------------\n\nTITLE: Intersection Observer Implementation\nDESCRIPTION: Shows how to use the intersection observer synthetic event for visibility-based animations.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<img _=\"on intersection(intersecting) having threshold 0.5\n          if intersecting transition opacity to 1\n          else transition opacity to 0 \"\n      src=\"https://placebear.com/200/300\"/>\n```\n\n----------------------------------------\n\nTITLE: Relative Positional Expression Example in Hyperscript\nDESCRIPTION: Demonstrates the usage of the next relative positional expression to find and modify the next element matching a specific selector.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .focused to the next <div.header/>\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Beep Operator for Non-Intrusive Debugging\nDESCRIPTION: Shows the usage of the beep! operator which logs expression details without modifying the code flow. This example attempts to add a class to paragraph elements within a div.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_86\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .highlighted to <p/> in <div.hilight/>\n```\n\n----------------------------------------\n\nTITLE: Referencing DOM Elements by ID with Hyperscript in HTML (HTML)\nDESCRIPTION: This HTML example demonstrates the practical use of Hyperscript's id reference expression within an HTML div. The _ attribute contains a Hyperscript event handler, using the #another-div selector to reference another DOM element by id and add the .clicked class to it on click. This showcases declarative, attribute-based event handling using the Hyperscript DSL. Dependencies: _hyperscript library must be loaded. '_=' attributes are processed by _hyperscript. The referenced id ('another-div') must exist elsewhere in the DOM.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/id-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked to #another-div\">\n  Add the .clicked class to another div!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic CSS Class and ID Assignment with Hyperscript - Hyperscript\nDESCRIPTION: Shows how any expression can be used as a CSS class or ID in Hyperscript, allowing for more dynamic manipulation of elements based on variables or functions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\nget idOfElementToRemove()\\nremove #{it}\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset configuration to { activeClass: \"active\" }\\nadd .{configuration.activeClass} to allActiveElements()\n```\n\n----------------------------------------\n\nTITLE: Manipulating DOM Elements with Hyperscript - Hyperscript\nDESCRIPTION: This snippet demonstrates the enhanced capability of the 'put' command in Hyperscript 0.8, which can now insert DOM elements and HTML strings into other elements. Arrays of elements or strings can also be used.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nput ['<b>hello</b>', document.createElement('hr')] at end of me\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transitions with the 'settle' Command in Hyperscript\nDESCRIPTION: Shows how to wait for CSS transitions to complete before continuing execution using the 'settle' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_25\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .fade-out then settle\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript Functions in Hyperscript\nDESCRIPTION: Shows how to call JavaScript functions and get their return values using the 'call' and 'get' commands.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_5\n\nLANGUAGE: hyperscript\nCODE:\n```\ncall alert('yep, you can call javascript!')\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nget prompt('Enter your name')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Element Scope in HTML/Hyperscript\nDESCRIPTION: This HTML example demonstrates using an element-scoped variable (`:x`) to create a persistent counter for a specific button. On each click, the `:x` variable (scoped to the button element) is incremented, and its new value (`it`) is put into the adjacent `<output>` element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment :x then put it into the next <output/>\">\n  Click Me\n</button>\n<output>--</output>\n```\n\n----------------------------------------\n\nTITLE: Waiting with Time Expressions in Event Attributes - HTML - html\nDESCRIPTION: This HTML snippet shows how to use _hyperscript's time expressions within an inline event attribute. Upon a click event, the handler waits for 2 seconds, then logs 'hello world' to the console. Requires the _hyperscript library. The _ attribute leverages natural-language scripting to handle timing and actions. This example expects user interaction as input and outputs a logged message after the specified time delay.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/time-expression.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click wait 2s then log 'hello world'\">Hello World!</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript vs Hyperscript Comparison\nDESCRIPTION: Compares DOM manipulation code between JavaScript and Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#example-btn')\n  .addEventListener('click', e => {\n    document.querySelectorAll(\".elements-to-remove\").forEach(value => value.remove());\n})\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\non click from #example-btn\n  remove .elements-to-remove\n```\n\n----------------------------------------\n\nTITLE: Relative Positional Expression in Hyperscript\nDESCRIPTION: Shows how to use relative positional expressions to get elements relative to the current context.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_13\n\nLANGUAGE: hyperscript\nCODE:\n```\nnext <div/> from me\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of 'hide' Command in HTML\nDESCRIPTION: HTML examples showing basic usage of the 'hide' command in _hyperscript. It includes examples of hiding the element itself, using opacity, and hiding another element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/hide.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click hide\">Hide Me!</div>\n\n<div _=\"on click hide with opacity\">Hide Me With Opacity!</div>\n\n<div _=\"on click hide #anotherDiv\">Hide Another Div!</div>\n```\n\n----------------------------------------\n\nTITLE: Selecting Items from an Array using `pick items` in _hyperscript\nDESCRIPTION: Demonstrates using the `pick items` command in _hyperscript to select a slice of an array based on start and end indices. It shows the default behavior (inclusive start, exclusive end) and how the `inclusive` and `exclusive` keywords modify the end boundary. The result of the `pick` operation is implicitly stored in the `it` variable.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pick.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\nset arr to [10, 11, 12, 13, 14, 15]\npick items 2 to 4 from arr\n--      it = [12, 13]\npick items 2 to 4 from arr inclusive\n--      it = [12, 13, 14]\npick items 2 to 4 from arr exclusive\n--      it = [13]\n```\n\n----------------------------------------\n\nTITLE: Placing Content in HTML Node with Hyperscript (HTML)\nDESCRIPTION: Illustrates inserting content directly into an HTML node using the 'put' command in hyperscript. On clicking the button, the text 'Some Content...' is placed into the button itself.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click put 'Some Content...' into me\">Click me...</button>\n```\n\n----------------------------------------\n\nTITLE: Managing Events with Hyperscript\nDESCRIPTION: Using hyperscript to simplify event handling, the snippet listens for a custom 'doIt' event to remove an element. This approach doesn't require JavaScript imports but needs hyperscript capabilities.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\"on click send doIt to #event-target-3\">\\n  Trigger Event\\n</button>\\n<div id=\"event-target-3\"\\n     _=\"on doIt remove me\">\\n  Event Target\\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button _=\"on click send doIt to #event-target-3\">\\n  Trigger Event\\n</button>\\n<div id=\"event-target-3\"\\n     _=\"on doIt remove me\">\\n  Event Target\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing with CSS Transitions using settle in Hyperscript\nDESCRIPTION: The 'settle' command in Hyperscript is used to synchronize with the CSS transition on an element. It waits for the 'transitionend' event on a specified element or 'me' if unspecified. If no 'transitionstart' is detected within 500ms, the command continues as if no transition occurs. Requires CSS transitions to be defined on elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/settle.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  settle [<expression>]\n```\n\n----------------------------------------\n\nTITLE: Removing Disabled Elements Using 'yourself' in Tell Command - _hyperscript\nDESCRIPTION: This _hyperscript code removes all DOM elements with the attribute disabled=true by utilizing the 'yourself' reference within a tell command. Each selected element executes the remove command on itself. The code targets <[disabled=true]/> elements and requires _hyperscript installed and initialized on the page.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/you.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell <[disabled=true]/>\n    remove yourself\nend\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with the 'fetch' Command in Hyperscript\nDESCRIPTION: Demonstrates sending a fetch request and using the response in the current element using the 'put' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_8\n\nLANGUAGE: hyperscript\nCODE:\n```\nfetch /demo then put it into my.innerHTML\n```\n\n----------------------------------------\n\nTITLE: Analyzing Hyperscript Structure (Event, Command, Expressions) in HTML\nDESCRIPTION: This HTML snippet repeats the initial button toggle example to explicitly break down its structure. It identifies `on click` as the event handler feature, `toggle` as the command, and `.red` and `me` as expressions used by the command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n  <button _=\"on click toggle .red on me\">\n    Click Me\n  </button>\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie on Button Click using _hyperscript in HTML\nDESCRIPTION: Provides an HTML example where a button uses an inline _hyperscript command (`_`) to set a cookie named 'hello' with the value 'world' when the button is clicked. This demonstrates integrating _hyperscript cookie manipulation directly into HTML elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/cookies.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click set cookies.hello to 'world'\">\n    Set the cookie 'hello' to 'world'!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Converter and Handling Results in JavaScript\nDESCRIPTION: Demonstrates how to invoke the `convert` async function and handle the resulting Promise using `.then()` and `.catch()`. On successful resolution, the conversion message is logged to the console; on rejection, the error message is logged. Assumes the prior definition of `convert`. Expects string inputs for currencies and a numeric amount; output is logged as a string or error.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-04-06-async-transparency-in-practice.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconvert(\"USD\", \"HRK\", 20)\n  .then((message) => {\n    console.log(message);\n  })\n  .catch((error) => {\n    console.log(error.message);\n  });\n```\n\n----------------------------------------\n\nTITLE: Finally Block Usage\nDESCRIPTION: Demonstrates using a finally block for cleanup after an operation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_47\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n  add @disabled to me\n  fetch /example\n  put the result after me\nfinally\n  remove @disabled from me\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Cookies in _hyperscript\nDESCRIPTION: Demonstrates how to iterate through all available cookies using a `for` loop in _hyperscript. Inside the loop, it logs the `name` and `value` of each cookie object (`c`).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/cookies.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\n    for c in cookies\n      log c.name, c.value\n    end\n```\n\n----------------------------------------\n\nTITLE: Function Calling Patterns - Hyperscript\nDESCRIPTION: Illustrates different ways to invoke functions including call, get, and pseudo-command syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_32\n\nLANGUAGE: hyperscript\nCODE:\n```\ncall alert('hello world!')\nget the nextInteger() then log it\n\nlog \"Getting the selection\"\ngetSelection()\nlog \"Got the selection\"\nlog it\n\nreload() the location of the window\nwriteText('evil') into the navigator's clipboard\nreset() the #contact-form\n```\n\n----------------------------------------\n\nTITLE: Interactive Comparison Using Hyperscript in HTML - html\nDESCRIPTION: Demonstrates the use of hyperscript comparison operators within HTML by attaching conditional logic to elements via the _ attribute. The first example logs a message if there are multiple buttons; the second checks if a div has an 'active' class. Requires hyperscript enabled on the page and valid selectors for queries. Key inputs are user clicks; outputs are logs based on conditional evaluations.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/comparison-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\\n  _=\"on click if <button/>.length > 1\\n                   log 'found multiple buttons!'\"\\n>\\n  Find buttons\\n</div>\\n\\n<div\\n  _=\"on click if I match .active\\n                   log 'I'm active!'\"\\n>\\n  Check if active\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using `finally` for Cleanup in _hyperscript Functions\nDESCRIPTION: Demonstrates the use of a `finally` block within a _hyperscript function (`loadExample`). The code within the `finally` block (removing the `@disabled` attribute) is guaranteed to execute after the main function body, regardless of whether an error occurred during the fetch operation or not.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/def.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\n  def loadExample ()\n    add @disabled to me\n    fetch /example\n    put the result after me\n  finally\n    remove @disabled from me\n  end\n```\n\n----------------------------------------\n\nTITLE: Halting Event Propagation in Hyperscript\nDESCRIPTION: Demonstrates how to stop event propagation and prevent default behaviors using the 'halt' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_10\n\nLANGUAGE: hyperscript\nCODE:\n```\nhalt\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox to Indeterminate State with _hyperscript\nDESCRIPTION: This code demonstrates two _hyperscript techniques: setting a checkbox to indeterminate state when the page loads, and restoring that state when a form is reset. It uses the 'indeterminate' property which is only accessible via JavaScript and not through HTML attributes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/20-indeterminate-checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n<input class=\"indeterminate\" type=\"checkbox\" _=\"on load set my.indeterminate to true\">\n<input type=\"reset\" _=\"on click set .indeterminate.indeterminate to true\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Event-Driven Usage of Hyperscript Converter in HTML\nDESCRIPTION: Demonstrates seamless integration of an async Hyperscript function in the HTML attribute for event handling. Uses Hyperscript's linear syntax (`put convert(...) into ...`) to fetch and insert conversion output directly with no explicit Promise handling. Requires Hyperscript to be loaded in the environment and previously defined converter functions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-04-06-async-transparency-in-practice.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"put convert('USD', 'EUR', 10) into #output\">\n  Convert $10 To Euros\n</button>\n<p id=\"output\"></p>\n```\n\n----------------------------------------\n\nTITLE: Using 'as' Conversion Expression in Hyperscript - Hyperscript\nDESCRIPTION: Demonstrates how to use the 'as' expression in hyperscript to convert values. This snippet logs various values after converting them using built-in conversion types like Int, Fixed:2, Object, and String. No additional dependencies are required except for hyperscript runtime. Inputs are values and their target types. Outputs are the converted values shown in logs. Intended as usage examples for built-in conversions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/as.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\n  log '10' as Int            -- logs 10\n  log '3.141568' as Fixed:2  -- logs '3.14'\n  log '{\"foo\":10}' as Object -- logs { \"foo\": 10 }'\n  log 10 as String           -- logs \"10\"\n```\n\n----------------------------------------\n\nTITLE: Simplified put command for element content in _hyperscript\nDESCRIPTION: Demonstrates shorthand syntax for the put command, where innerHTML is implied when putting content directly into an element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_55\n\nLANGUAGE: hyperscript\nCODE:\n```\non click put 'Clicked!' into me\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions\nDESCRIPTION: Example of throwing a custom exception in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_48\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n  if I do not match .selected\n    throw \"I am not selected!\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Count Filters in Hyperscript (HTML)\nDESCRIPTION: This snippet demonstrates the use of the 'on' feature to add count filters to a button, allowing it to respond differently on the first, second, and third clicks. Hyperscript is embedded in HTML to manage click events on a button that changes text based on click count.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n    _=\"on click 1 put 'Thanks for clicking...' into me\n                on click 2 put 'Thanks for clicking...' into me\n                on click 3 and on put 'OK, that\\'s enough' into me\"\n  >\n    Click me...\n  </button>\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation Examples\nDESCRIPTION: Shows various DOM manipulation techniques using Hyperscript syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_49\n\nLANGUAGE: hyperscript\nCODE:\n```\n-- adds the 'disabled' class to the element with the id 'myDiv'\nadd .disabled to #myDiv\n\n-- adds the 'highlight' class to all divs with the class 'tabs' on them\nadd .highlight to <div.tabs/>\n\n-- sets the width of the current element to 35 pixels\nset my *width to 35px\n\n-- adds the `disabled` attribute to the current element\nadd @disabled to me\n```\n\n----------------------------------------\n\nTITLE: Defining and Exposing JS Functions in _hyperscript Blocks - hyperscript\nDESCRIPTION: Demonstrates defining JavaScript functions in a _hyperscript \\\"js...end\\\" block, exposing them to the global scope for use in other hyperscript segments. The 'regexFind' function is defined to extract a regex group from a string, and made available by returning it at the end of the block. No external dependencies are required. Input parameters are the regular expression, the group number, and the input string; output is the matching regex group. Only named functions declared with 'function' are exposed globally.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/js.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\njs\n    function regexFind(re, group, str) {\n        return new RegExp(re).exec(str)[group];\n    }\n\n    return { regexFind };\nend\n```\n\n----------------------------------------\n\nTITLE: Decrementing Variables in Hyperscript\nDESCRIPTION: Shows how to subtract a value from a variable, property, or attribute using the 'decrement' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_7\n\nLANGUAGE: hyperscript\nCODE:\n```\ndecrement counter\n```\n\n----------------------------------------\n\nTITLE: Filtering Click Events with Alt Key in _hyperscript\nDESCRIPTION: This snippet demonstrates how to filter click events in _hyperscript to only trigger when the Alt key is pressed. The code removes the 'primary' class, waits for animations to complete, then adds the class back.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/80-event-filtering.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click[event.altKey] remove .primary then settle then add .primary\">CLICK ME</button>\n```\n\n----------------------------------------\n\nTITLE: Self-Removing Element with Hyperscript Timer\nDESCRIPTION: Demonstrates how to create a message element that removes itself after a delay. This approach allows individual messages to be cleared independently rather than clearing all messages at once.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/a-fun-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"messages\">\n  <div _=\"on load wait 2s then remove me\">\n    Hyperscript is awesome...\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Rows with _hyperscript in HTML\nDESCRIPTION: This snippet demonstrates how to use _hyperscript to create a dynamic table row filter. It uses the 'show' command with 'when' and 'with' clauses to filter rows based on user input. The table body has a fixed height and vertical scrollbar to prevent page reflow during filtering.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/90-filter-table-rows.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead><tr><th><input _=\"on input\n   show <tbody>tr/> in closest <table/>\n     when its textContent.toLowerCase() contains my value.toLowerCase()\n  \"/></th></tr></thead>\n  <tbody style=\"height:10em;display:block;overflow-y:scroll\">\n    <tr><td>Foo Bar</td><td>Item 1</td></tr>\n    <tr><td>Boo Bar</td><td>Item 2</td></tr>\n    <tr><td>Gru Bar</td><td>Item 3</td></tr>\n    <tr><td>Zoo Bar</td><td>Item 4</td></tr>\n    <tr><td>Foo Bar</td><td>Item 5</td></tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Writing to clipboard with parameters in _hyperscript\nDESCRIPTION: This example demonstrates how to pass parameters from _hyperscript to JavaScript using the js command. It takes input text and writes it to the clipboard, then displays a success message or removes the element on failure.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/js.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n  _=\"on click\n           set text to #input.value\n           js(me, text)\n               if ('clipboard' in window.navigator) {\n               \t return navigator.clipboard.writeText(text)\n               \t   .then(() => 'Copied')\n               \t   .catch(() => me.parentElement.remove(me))\n               }\n           end\n           put message in my.innerHTML \"\n></button>\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Queue Strategy\nDESCRIPTION: Example of using 'queue all' strategy with a wait command to process all queued events sequentially.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click queue all\n                    increment :count\n                    wait 1s then put it into the next <output/>\">\n  Click Me Quickly...\n</button>\n<output>--</output>\n```\n\n----------------------------------------\n\nTITLE: Converting JSON with Hyperscript 'as' Expression (HTML)\nDESCRIPTION: This snippet shows converting JSON data to an object and using its properties in hyperscript. It gets JSON data and sets the button's content to a property value from the JSON object.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n    _=\"on click get getSomeJSON() as Object\n                         put result.name into me\"\n  >\n    Click me...\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Using a _hyperscript Block Literal with setTimeout in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use a `_hyperscript` block literal (an anonymous function `\\->console.log('called!')`) within an `on click` event handler. The block literal is passed to the `setTimeout` function, causing the message 'called!' to be logged to the console one second after the `div` element is clicked. This requires the `_hyperscript` library to be included and initialized on the page.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/block-literal.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click setTimeout(\\->console.log('called!'), 1000)\">\n  Log 'called!' in a second\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Behavior in Hyperscript\nDESCRIPTION: Defines a behavior in hyperscript that accepts a parameter, allowing for more interactive and customized functionality based on the passed argument.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  behavior Removable(removeButton)\n    on click from removeButton\n        remove me\n    end\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Form Values Conversion Using Hyperscript (HTML)\nDESCRIPTION: Demonstrates converting form DOM node values into a hyperscript context. On button click, it logs the form's name field using a hyperscript 'as Values' expression.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button\n    _=\"on click get #aForm as Values\n                         put `The name in the form was $result.name` into me\"\n  >\n    Click me...\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Iterating with the 'repeat' Command in Hyperscript\nDESCRIPTION: Shows how to iterate over arrays or a specified number of times using the 'repeat' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_21\n\nLANGUAGE: hyperscript\nCODE:\n```\nrepeat for x in [1, 2, 3] log x end\n```\n\n----------------------------------------\n\nTITLE: Comparison Expressions in Hyperscript\nDESCRIPTION: Illustrates the newly introduced comparison expressions, such as 'is empty', 'is not empty', and type checks. These expressions enable cleaner and more intuitive checks.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\narray is empty\narray is not empty\nx is a String\nx is not a String\n```\n\n----------------------------------------\n\nTITLE: Debug Printing with the 'beep' Command in Hyperscript\nDESCRIPTION: Shows how to use the 'beep' command for debug printing and output of element selectors.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nbeep! <.foo/>\n```\n\n----------------------------------------\n\nTITLE: Populating Lists with the put Command in _hyperscript (hyperscript)\nDESCRIPTION: Showcases a function definition in _hyperscript that uses the 'put' command within a loop to dynamically add list items to a <ul> element. Assumes an execution context where arrays and DOM references can be passed, and uses standard _hyperscript control structures. The function iterates over an input array, creates a <li>, sets its text, and appends it to the UL. Inputs are an array and a UL element; output is updated DOM nodes. Requires _hyperscript runtime with DOM access.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/put.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef fillList(array, ul)\n\tfor item in array\n\t\t-- put `<li>${item}</li>` at end of ul\n\t\tcall document.createElement('li')\n\t\tput the item into its textContent\n\t\tput it at end of the ul\n\tend\nend\n```\n\n----------------------------------------\n\nTITLE: Improved Fetch Command Syntax in hyperscript\nDESCRIPTION: Shows the improved syntax for the fetch command with response transformation before the 'with' clause to eliminate grammatical ambiguity.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_5\n\nLANGUAGE: hyperscript\nCODE:\n```\nfetch /example as json\n  with method: \"POST\"\n```\n\n----------------------------------------\n\nTITLE: Using Wait Command for Event Handling\nDESCRIPTION: Demonstrates the 'wait' command's ability to destructure event properties into local variables and allow waiting for multiple events via the 'or' modifier.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\nwait until event mouseMove(clientX, clientY)\nlog clientX, clientY\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nwait until event mouseMove(clientX, clientY) or mouseUp(clientX, clientY)\nlog clientX, clientY\n```\n\n----------------------------------------\n\nTITLE: Removing a class with the remove command in _hyperscript\nDESCRIPTION: Removes the 'red' CSS class from the button when clicked. Works alongside the add command for toggling classes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_59\n\nLANGUAGE: hyperscript\nCODE:\n```\non click remove .red from me\n```\n\n----------------------------------------\n\nTITLE: Adding Class to Closest Div Relative to Custom Expression in _hyperscript (HTML)\nDESCRIPTION: Illustrates an _hyperscript expression where, on click, the .clicked class is added to the closest ancestor <div/> to the parentElement of the invoking element. This snippet leverages advanced _hyperscript features to control traversal, optionally instructing it to search from a specified node rather than the default. Requires _hyperscript to be loaded and expects that the element has a meaningful parentElement relationship. Outputs an updated class list on a dynamically chosen ancestor node.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/closest.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked to the closest <div/> to the parentElement of me\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Hyperscript Function with Parameters\nDESCRIPTION: Demonstrates defining a function that takes a parameter and returns an incremented value.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def increment(i)\n    return i + 1\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting computed styles in _hyperscript\nDESCRIPTION: Retrieves the computed width of the button and displays it. Demonstrates accessing computed CSS values with *computed- prefix.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_71\n\nLANGUAGE: hyperscript\nCODE:\n```\non click get my *computed-width\n                    put `My width is ${the result}` into the next <output/>`\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Expression for Contextual Queries - Hyperscript in HTML\nDESCRIPTION: This HTML and Hyperscript snippet shows the 'in' expression for limiting queries to a context ('me'). It selects '<p/>' paragraphs within the current element when clicked, and sets their innerHTML. Hyperscript is required. Inputs are click events, output is updated paragraph content within the clicked element. Limitations: context resolution depends on DOM hierarchy.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put 'Clicked!' into (<p/> in me).innerHTML\">Click Me\\n  <p></p>\\n  <p></p>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Query Literals to Set Element InnerHTML - Hyperscript in HTML\nDESCRIPTION: Two related snippets demonstrate the use of Hyperscript's query literal syntax to select elements by general CSS selectors (e.g., '<div/>' or '<div:not(.example)/>'). They set the innerHTML of all matching divs on click. Hyperscript must be loaded. Key parameters are CSS selector queries, and the output is the updated HTML of selected elements. Limitations depend on selector correctness and element existence.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put 'Clicked!' into <div/>.innerHTML\">Click Me</div>\\n<div class=\"example\"></div>\\n<div class=\"example\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put 'Clicked!' into <div:not(.example)/>.innerHTML\">Click Me</div>\\n<div class=\"example\"></div>\\n<div class=\"example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Transition Synchronization with the 'settle' Command\nDESCRIPTION: Shows the use of the `settle` command in Hyperscript to synchronize on transitions initiated by previous commands.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  #pulsar {\n    transition: all 800ms ease-in-out;\n  }\n  .red {\n    background: red;\n  }\n</style>\n<div id=\"pulsar\" _=\"on load repeat 6 times toggle .red then settle\">\n  You thought the blink tag was dead?\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manipulating Cookies with _hyperscript\nDESCRIPTION: Provides examples of how to use the `cookies` symbol in _hyperscript to set, retrieve, count, access by index, clear specific cookies, and clear all cookies using its API methods and properties. This demonstrates the core functionalities of the `cookies` API.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/cookies.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n`set cookies.foo to 'bar'`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\n`set cookies['foo'] to 'bar'`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\n`log cookies.length`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\n`log cookies[0]`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\n`cookies.clear('foo')`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\n`cookies.clearAll()`\n```\n\n----------------------------------------\n\nTITLE: Applying 'take' Command to Tabs Using _hyperscript (HTML)\nDESCRIPTION: Implements the _hyperscript 'take' command to transfer the .active class from any element with the .tab class and apply it to the target of the click event, enabling dynamic activation of the clicked tab. This snippet requires _hyperscript to be available in the page. The 'from .tab' clause identifies elements to remove the .active class from, while 'for the event\\'s target' applies it to the clicked tab. Suitable for building tabbed navigation interfaces.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/take.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click take .active from .tab for the event's target\">\n  <a class=\"tab active\">Tab 1</a>\n  <a class=\"tab\">Tab 2</a>\n  <a class=\"tab\">Tab 3</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the 'on' Event Handler in Hyperscript\nDESCRIPTION: Demonstrates how to create an event listener in _hyperscript that logs a message when an element is clicked.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\non click log \"clicked!\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variables with `set` in Hyperscript\nDESCRIPTION: This hyperscript snippet demonstrates the basic syntax for creating a local variable using the `set` command. It assigns the value `10` to the variable `x`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_17\n\nLANGUAGE: hyperscript\nCODE:\n```\n  set x to 10\n\n```\n\n----------------------------------------\n\nTITLE: Removing an element from the DOM in _hyperscript\nDESCRIPTION: Removes the button itself from the DOM when clicked. Demonstrates self-removal using the remove command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_64\n\nLANGUAGE: hyperscript\nCODE:\n```\non click remove me\n```\n\n----------------------------------------\n\nTITLE: Toggling Attribute with Query Literal on :root - Hyperscript in HTML\nDESCRIPTION: This HTML and Hyperscript snippet toggles the 'data-theme' attribute on the ':root' element by querying using a Hyperscript query literal. The example enables light/dark theme switching by toggling the attribute. Prerequisites include CSS definitions for the '[data-theme]' attribute and loading Hyperscript in the environment. User clicks toggle the attribute, affecting global styles.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle @data-theme='light' on <:root/>\">Dark/Light</button>\n```\n\n----------------------------------------\n\nTITLE: Reverse Dot Notation with Hyperscript 'of' Expression (HTML)\nDESCRIPTION: This example highlights the use of the 'of' expression in hyperscript to reverse standard dot notation. It logs the location of the window using natural language expressions in hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click log the location of the window\">Log Location</button>\n<button _=\"on click log window.location\">Log Location</button>\n```\n\n----------------------------------------\n\nTITLE: Math Operations - Hyperscript\nDESCRIPTION: Shows basic arithmetic operations and operator precedence rules in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_29\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to 10\nset y to 20\nset sum to x + y\nset diff to x - y\nset product to x * y\n```\n\n----------------------------------------\n\nTITLE: Time Expression Example in Hyperscript\nDESCRIPTION: Demonstrates the usage of time expressions in Hyperscript using the wait command. Shows how to create a button that waits for 2 seconds before updating its content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click wait 2s then put 'I waited!' into my.innerHTML\">\n  Click to Wait...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Reversing Property Access in HTML with the 'of' Expression\nDESCRIPTION: Shows how to apply the 'of' expression in _hyperscript to reverse the access order for clarity, enabling the reload function on button click with a more readable syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/of.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click reload() the location of the window\">\n  Reload the Location\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using 'hide' Command with Tailwind CSS in HTML\nDESCRIPTION: HTML examples showing how to use the 'hide' command with Tailwind CSS strategies in _hyperscript. It includes a basic example and one using a specific Tailwind opacity strategy.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/hide.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click hide\">Hide Me!</div>\n\n<!-- Or by specifying the strategy name directly between : twDisplay, twVisibility, twOpacity -->\n<div _=\"on click hide with twOpacity\">Hide Me With Opacity!</div>\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer in Hyperscript\nDESCRIPTION: Shows how to use the 'as' expression in _hyperscript to convert a string value to an integer type.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n\"10\" as Int\n```\n\n----------------------------------------\n\nTITLE: Cancelling a fetch Request in _hyperscript (HTML)\nDESCRIPTION: Demonstrates how to cancel a `fetch` request initiated by one button (`#btn1`) by sending a `fetch:abort` event from another button. The first button fetches data from `/example`, disables itself during the fetch, and re-enables itself afterwards. The second button sends the cancellation event to the first button.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button id=\"btn1\"\n            _=\"on click\n                 add @disabled\n                 fetch /example\n                 put the result after me\n               finally\n                 remove @disabled\">\n        Get Response\n    </button>\n    <button _=\"on click send fetch:abort to #btn1\">\n        Cancel The Request\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Beep Operator to Debug an Expression\nDESCRIPTION: Demonstrates using the beep! operator to debug why a selector isn't working as expected. The beep! operator logs the expression value and type without changing the execution flow.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_87\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .highlighted to <p/> in beep! <div.hilight/>\n```\n\n----------------------------------------\n\nTITLE: Using setTimeout in JavaScript\nDESCRIPTION: Example of using setTimeout in JavaScript to delay execution by 1 second, demonstrating the callback-based approach.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Start...\")\nsetTimeout(function(){\n  console.log(\"Finish...\")\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-Commands in HTML\nDESCRIPTION: Examples of utilizing pseudo-commands in HTML buttons using hyperscript. Demonstrates the use of 'reload()' and 'setAttribute()' as pseudo-commands to modify window location and element attributes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pseudo-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click reload() the location of the window\">\n  Reload the Location\n</button>\n\n<button _=\"on click setAttribute('foo', 'bar') on me\">\n  Set foo to bar on me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Example - Hyperscript\nDESCRIPTION: Shows how to convert values between different types using the 'as' operator.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click\n               get the (value of the next <input/>) as an Int\n               increment it\n               put it into the next <output/>\">\n  Add 1 To :\n</button>\n<input/>\n<output>--</output>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Integration Examples in HTML\nDESCRIPTION: Examples showing how to use the show command with Tailwind CSS utility classes for visibility control.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/show.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on load wait 2s then show\">I'll show after a few seconds!</div>\n\n<!-- Or by specifying the strategy name directly between : twDisplay, twVisibility, twOpacity -->\n<div _=\"on load wait 2s then show with *twOpacity\">\n  I'll show after a few seconds with Tailwind CSS opacity!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Evaluating Hyperscript from JavaScript\nDESCRIPTION: Illustrates the usage of the `_hyperscript` function to execute Hyperscript code from JavaScript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(_hyperscript(\"1 + 1\"));\n```\n\n----------------------------------------\n\nTITLE: Cookies Symbol Usage in Hyperscript\nDESCRIPTION: Shows various operations with the cookies symbol including setting, getting, and manipulating cookie values with different options.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_25\n\nLANGUAGE: hyperscript\nCODE:\n```\nset cookies.myCookie to 'foo'     # sets the cooke 'myCookie' to the value true, forever\nset cookies['myCookie'] to 'bar'  # updates the previous cookies value\nset cookies['myCookie'] to \n  {value: 'doh', \n   expires: maxAge:6000}          # set value and make it expire in 6000 seconds or 100 minutes \ncookies.clear('myCookie')         # clears the given cookie\ncookies.clearAll()                # clears all cookies\ncookies.length                    # returns the number of cookies\ncookies[0]                        # returns the first cookie as a {name:<name>, value:<value>} struct\nfor c in cookies ... end          # iterates over all cookies as {name:<name>, value:<value>} structs\n```\n\n----------------------------------------\n\nTITLE: Continuing Loop Execution in Hyperscript\nDESCRIPTION: Demonstrates using the 'continue' command to skip the current iteration and proceed to the next one in a loop.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_6\n\nLANGUAGE: hyperscript\nCODE:\n```\nrepeat 3 times continue end\n```\n\n----------------------------------------\n\nTITLE: Reading from clipboard with inline JavaScript in _hyperscript\nDESCRIPTION: This example shows using the inline js command to read text from the clipboard and put it into the button's innerHTML. The js block attempts to access the clipboard API and returns the clipboard text content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/js.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  _=\"on click\n           js\n               if ('clipboard' in window.navigator) {\n               \t return navigator.clipboard.readText()\n               }\n           end\n           put it in my.innerHTML \"\n></button>\n```\n\n----------------------------------------\n\nTITLE: Setting Element InnerHTML on Click - Hyperscript in HTML\nDESCRIPTION: This HTML snippet demonstrates using an ID literal in Hyperscript to set the innerHTML property of a DOM element by ID when a button is clicked. The Hyperscript expression is provided via the _ attribute. It requires Hyperscript included in the environment. The input is a user click event, and the output is the updated HTML content of the element with id 'example'.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click put 'Clicked!' into #example.innerHTML\">Click Me</button>\\n<div id=\"example\"></div>\n```\n\n----------------------------------------\n\nTITLE: Updating Paragraph Contents Using 'you' in Tell Command - _hyperscript\nDESCRIPTION: This _hyperscript snippet demonstrates how to use the 'you' keyword within a 'tell' command to append content to every <p> element. The example targets all <p/> elements and appends the string \\\"some value\\\" to each of them. The snippet requires a hyperscript-enabled environment and assumes <p> elements exist in the DOM.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/you.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell <p/>\n    append \"some value\" to you\nend\n```\n\n----------------------------------------\n\nTITLE: Appending Values with the 'append' Command in Hyperscript\nDESCRIPTION: Shows how to append a value to a string, array, or HTML Element using the 'append' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nappend \"value\" to myString\n```\n\n----------------------------------------\n\nTITLE: Separating Commands with `then` in Hyperscript\nDESCRIPTION: This hyperscript snippet illustrates the use of the optional `then` keyword to separate multiple commands written on the same line, similar to a semicolon in JavaScript. It shows two `log` commands executed sequentially.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_12\n\nLANGUAGE: hyperscript\nCODE:\n```\n  log \"Hello\" then log \"World\"\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Commands in Hyperscript\nDESCRIPTION: Describes the `async` command in Hyperscript used to execute commands asynchronously in either single or batch mode.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nasync fetch /foo\nasync do\n  fetch /foo\n  put it into #aDiv.innerHTML\nend\n```\n\n----------------------------------------\n\nTITLE: CSS Querying with Hyperscript\nDESCRIPTION: Demonstrates using query literals to perform CSS queries within Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfor elt in <div.foo/> -- will log all divs with the foo class\n  log elt\nend\n```\n\n----------------------------------------\n\nTITLE: Console Logging in HyperScript\nDESCRIPTION: Demonstrates basic console logging functionality\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_23\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog \"Hello Console!\"\n```\n\n----------------------------------------\n\nTITLE: Hiding DOM Elements in Hyperscript\nDESCRIPTION: Shows how to hide an element in the DOM using the 'hide' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_11\n\nLANGUAGE: hyperscript\nCODE:\n```\nhide me\n```\n\n----------------------------------------\n\nTITLE: Object Creation and Array Operations in HyperScript\nDESCRIPTION: Examples of creating new objects and working with arrays including the make command and array operations\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_25\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a URL from \"/path/\", \"https://origin.example.com\"\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a URL from \"/path/\", \"https://origin.example.com\" called myURL\nlog myURL\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake an <a.navlink/> then put it after me\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset myArr to [1, 2, 3]\nlog myArr[0]           -- logs \"1\"\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset myArr to [1, 2, 3]\nlog the first of myArr  -- logs \"1\"\nlog the last of myArr   -- logs \"3\"\nlog random in myArr     -- logs a random element from the array\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset strs to [\"a\", \"list\", \"of\", \"strings\"]\nset lens to strs.map( \\ s -> s.length )\nlog lens\n```\n\n----------------------------------------\n\nTITLE: Using Possessive Expressions in HTML with _hyperscript\nDESCRIPTION: This HTML snippet illustrates the use of possessive expressions in _hyperscript for setting DOM element attributes and properties. It handles events to perform actions like changing the window location or transferring attribute data. Dependencies include the _hyperscript library and a proper HTML environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/possessive.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click set the window's location to 'https://duck.com'\">\n  Go to Duck Duck Go\n</div>\n<div\n  data-demo=\"Here is some data...\"\n  _=\"on click put my attribute data-demo into me\"\n>\n  Replace Me w/ Attribute Data\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Hyperscript - Hyperscript\nDESCRIPTION: Demonstrates the use of the 'make' command in Hyperscript to instantiate objects or create DOM elements. The snippet creates a WeakMap, a URL, and a button element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a WeakMap\\nmake an URL from \"/path\", \"https://origin.example.com\"\\nmake a <button.btn-primary/>\n```\n\n----------------------------------------\n\nTITLE: Appending to an HTML Element in _hyperscript\nDESCRIPTION: Illustrates how to use the 'append' command to add HTML content to an existing HTML element in _hyperscript. It appends the string to the element's innerHTML.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/append.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nappend \"<i>More HTML here</i>\" to #myDIV\n```\n\n----------------------------------------\n\nTITLE: Omitting `end` at End of Script in HTML/Hyperscript\nDESCRIPTION: This HTML example demonstrates that the `end` keyword can often be omitted if the feature or command block is the last thing in the hyperscript code within an attribute. Here, the `if` block doesn't need an explicit `end`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n  <button _=\"on click if true log 'Clicked!'\">\n  Click Me\n  </button>\n\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a WebSocket in Hyperscript\nDESCRIPTION: Demonstrates how to send a structured message to a previously defined WebSocket using the 'send' command. The message is formatted as a JSON object with key-value pairs.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_83\n\nLANGUAGE: hyperscript\nCODE:\n```\nsend myMessage(foo: \"bar\", doh: 42) to MySocket\n```\n\n----------------------------------------\n\nTITLE: Toggling a class with the toggle command in _hyperscript\nDESCRIPTION: Toggles the 'red' CSS class on the button when clicked. Simplifies adding/removing classes with a single command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_60\n\nLANGUAGE: hyperscript\nCODE:\n```\non click toggle .red on me\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with the 'remove' Command in Hyperscript\nDESCRIPTION: Demonstrates removing content or elements from the DOM after logging a message.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_20\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog \"bye, bye\" then remove me\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Fixed-Precision String in Hyperscript\nDESCRIPTION: Shows the usage of the new 'Fixed' conversion in hyperscript, which converts a number to a fixed-precision string representation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-12-25-hyperscript-0.9.2-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog 3.1415 as Fixed:2 -- prints \"3.14\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Receiving Messages via WebSocket - hyperscript\nDESCRIPTION: This snippet demonstrates declaring a named WebSocket in hyperscript, connecting to a specified URL, and logging all incoming messages as parsed JSON. Requires inclusion of hyperscript's socket feature. Accepted parameters include the socket name, WebSocket endpoint URL, and an optional on message handler (here using 'as json' to auto-deserialize). The message will be logged to the console upon receipt. Limitations include hyperscript compatibility and reliance on browser WebSocket support.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\nsocket MySocket ws://myserver.com/example\n  on message as json\n    log message\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML with Hyperscript Fetch - Hyperscript\nDESCRIPTION: This snippet shows how the 'fetch' command can now use conversions such as 'as Int', 'Float' or 'Date' to transform the result into the desired data type, including 'as html' for parsing HTML into DOM trees.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_5\n\nLANGUAGE: hyperscript\nCODE:\n```\nfetch /count as Int -- or Float, Date...\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Targets with the 'tell' Command in Hyperscript\nDESCRIPTION: Demonstrates temporarily changing the target for commands using the 'tell' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_28\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell <p/> add .highlight\n```\n\n----------------------------------------\n\nTITLE: Handling Intersection Events with hyperscript\nDESCRIPTION: This snippet uses the `intersection` event in hyperscript to respond to changes in an element's visibility within the viewport. The example adjusts the element's opacity based on its intersection state.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img\n  _=\"on intersection(intersecting) having threshold 0.5\n         if intersecting transition opacity to 1\n         else transition opacity to 0 \"\n  src=\"https://placebear.com/200/300\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using String Templates and Dynamic Strings - Hyperscript in HTML\nDESCRIPTION: Several snippets demonstrate using strings and string templates in Hyperscript. Examples include template variables (with $ syntax), string interpolation with backticks, and handling 'naked' strings (unquoted). Prerequisites: Hyperscript in HTML context. Key parameter is the dynamic variable or expression. Input is the event (click), output is the rendered, interpolated string.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click set world to 'hyperscript' put 'Hello $world' into my innerHTML\">\\n  Click Me\\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click fetch /example then put it into my innerHTML\">\\n    Fetch It!\\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click fetch /example then put `result: ${the result}` into my innerHTML\">\\n    Fetch It!\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Sending Events with the 'send/trigger' Command in Hyperscript\nDESCRIPTION: Shows how to send custom events to DOM elements using the 'send' or 'trigger' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_23\n\nLANGUAGE: hyperscript\nCODE:\n```\nsend customEvent to #a-div\n```\n\n----------------------------------------\n\nTITLE: Omitting `end` Before Next Feature in HTML/Hyperscript\nDESCRIPTION: This HTML example shows that the `end` keyword can be omitted if a block is immediately followed by the start of another feature. Neither the `if` block nor the `on click` feature requires an explicit `end` because the `on mouseenter` feature starts right after.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n  <button _=\"on click if true log 'Clicked!'\n             on mouseenter log 'Mouse entered!'\">\n  Click Me\n  </button>\n\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings with Hyperscript (HTML)\nDESCRIPTION: This code snippet utilizes JavaScript-style template strings within hyperscript to format the content of a button on an HTTP fetch. It effectively demonstrates dynamic string creation using template literals.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button\n    _=\"on click fetch /example as json\n                         put `Result: $it.result` into me\"\n  >\n    Click me...\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Logging Attribute Values with Possessive Chain - Hyperscript\nDESCRIPTION: These Hyperscript snippets show two methods for logging anchor elements' 'href' attributes: using the possessive chain ('the anchor's @href') and non-possessive form ('anchor@href'). They're designed to iterate over anchor elements and access their attributes. Dependencies: Hyperscript environment, accessible anchor elements. The input is each anchor element, output is console logs. Limitations: only works in a Hyperscript-enabled context.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_8\n\nLANGUAGE: hyperscript\nCODE:\n```\nfor anchor in <a/>\\n  log the anchor's @href\\nend\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nfor anchor in <a/>\\n  log anchor@href\\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variable Example - _hyperscript - hyperscript\nDESCRIPTION: Demonstrates how to explicitly set a global variable using the set command in _hyperscript. The global modifier ensures assignment to the global scope. The variable globalVar is set to the value 10. No dependencies are required, but the global keyword must be used unless the variable starts with $, and the context must be a runtime hyperscript environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/set.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n  set global globalVar to 10\n```\n\n----------------------------------------\n\nTITLE: Element Selection with the 'in' Expression\nDESCRIPTION: Shows how to utilize the `in` expression to select elements within another element in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-- add the class foo to all paragraphs in the current\n-- element\nadd .foo to <p/> in me\n```\n\n----------------------------------------\n\nTITLE: Using Comparison and Mathematical Operators - Text\nDESCRIPTION: This snippet demonstrates basic comparison and mathematical operators in Hyperscript, showing their use in logical and arithmetic expressions. No specific dependencies are required. Typical variable comparisons, null checks, and combined expressions with variables are illustrated. The expected inputs are variables, and the output is a boolean or calculated value. Operators shown include >, ==, <, and +. Limitations include reliance on Hyperscript's runtime context and variable existence.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  x > 10\\n  y == null\\n  lst.length < 5\\n  a + b < 42\n```\n\n----------------------------------------\n\nTITLE: Creating Instances and Elements with Hyperscript\nDESCRIPTION: This code snippet demonstrates how the 'make' command is used in Hyperscript to create instances like URLs and DOM elements. It covers the creation of a URL object, akin to JavaScript's `new URL`, and an HTML `<a>` element with a specific class. No external dependencies are noted beyond Hyperscript itself.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/make.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake a URL from \"/path/\", \"https://origin.example.com\"\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nmake an <a.navlink/>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Regex Matches using `pick matches` in _hyperscript\nDESCRIPTION: Demonstrates using `pick matches` in _hyperscript to find all non-overlapping occurrences of a regular expression pattern in a string. The command returns an iterable result (stored implicitly in the `result` variable when not assigned), which can be processed using constructs like `repeat for` loop. Each iteration provides a match object similar to `pick match`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pick.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nset str to \"The quick brown fox jumps over the lazy dog.\"\npick match of \"the (\\w+)\" | i from str\nrepeat for match in result index i\n  log `${i}:`\n  log it[0] -- \"The quick\"\n  log it[1] -- \"quick\"\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Handling Example in HTML with hyperscript\nDESCRIPTION: This HTML code integrates an 'if' directive in a hyperscript attribute to add a class on click events, dependent on a matching condition. It requires an understanding of HTML DOM events and match conditions using hyperscript, and it outputs modifications to the DOM based on the evaluation of the 'matched' class.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/if.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"on click if I do not match .disabled\n                   add .clicked\"\n>\n  Click Me!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Variables with the 'set' Command in Hyperscript\nDESCRIPTION: Demonstrates setting a variable or property to a given value using the 'set' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_24\n\nLANGUAGE: hyperscript\nCODE:\n```\nset x to 0\n```\n\n----------------------------------------\n\nTITLE: Possessive Expression in Hyperscript\nDESCRIPTION: Shows how to access properties using the possessive syntax in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_15\n\nLANGUAGE: hyperscript\nCODE:\n```\nthe window's location\n```\n\n----------------------------------------\n\nTITLE: Query Reference Syntax in Hyperscript\nDESCRIPTION: Demonstrates how to use query references to select elements in _hyperscript using CSS-like selectors.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_12\n\nLANGUAGE: hyperscript\nCODE:\n```\n<button/> <:focused/>\n```\n\n----------------------------------------\n\nTITLE: Taking Classes with the 'take' Command in Hyperscript\nDESCRIPTION: Shows how to remove a class from a set of elements and apply it to the current element using the 'take' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_27\n\nLANGUAGE: hyperscript\nCODE:\n```\ntake .active from .tabs\n```\n\n----------------------------------------\n\nTITLE: Possessive Expression Usage\nDESCRIPTION: Shows how to use the possessive expression in Hyperscript to set data members in a natural language style. It also demonstrates setting DOM attributes using the 'attribute' modifier.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nset the window's location to \"http://www.google.com\"\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset #anotherDiv's attribute data-foo to my attribute data-bar\n```\n\n----------------------------------------\n\nTITLE: Handling Events with Hyperscript - HTML\nDESCRIPTION: This snippet demonstrates how Hyperscript handles events differently in version 0.8. When an element adds an event listener to another element, the listener is removed when the first element is de-referenced. This example shows how a click event listener is automatically removed when the element is removed from the DOM.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<output _=\"\\n\\ton click from #inc\\n\\t\\tlog 'Increment'\\n\\t\\tincrement my textContent\\n    init\\n\\t  remove me\\n\">0</output>\\n\\n<!--After the <output/> is removed, clicking this will not log anything to\\n  the console-->\n```\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"inc\">Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Breaking Out of Loops in Hyperscript\nDESCRIPTION: Demonstrates using the 'break' command to exit early from a loop construction.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\nrepeat 3 times break end\n```\n\n----------------------------------------\n\nTITLE: Appending to a String in _hyperscript\nDESCRIPTION: Demonstrates how to use the 'append' command to add a string to the end of another string variable in _hyperscript. It uses the '+=' operator internally.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/append.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nset fullName to \"John\"\nappend \" Connor\" to fullName\n-- fullName == \"John Connnor\"\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript Functions from Hyperscript\nDESCRIPTION: Example of directly calling a JavaScript function (alert) from within hyperscript code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_80\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click call alert('Hello from JavaScript!')\">\n  Click me.\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining JS Functions Within a _hyperscript Worker Context - hyperscript\nDESCRIPTION: Illustrates defining a JavaScript function inside a hyperscript worker using the 'js...end' block, then bridging it to hyperscript with a 'def' statement. '_regexFind' is a JS function to extract regex matches, and 'regexFind' is a hyperscript-accessible function delegating to this JS implementation. No additional dependencies are needed; parameters are regex, group, and string, returning the match group. The scope of 'this' is the worker global scope.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/js.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nworker MyWorker\n    js\n        function _regexFind(re, group, str) {\n            return new RegExp(re).exec(str)[group];\n        }\n    end\n    def regexFind(re, group, str) return _regexFind(re, group, str) end\n```\n\n----------------------------------------\n\nTITLE: Namespaced Function Definition\nDESCRIPTION: Shows how to define and access a namespaced function in Hyperscript and JavaScript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def utils.increment(i)\n    return i + 1\n  end\n</script>\n<script>\n  console.log(utils.increment(41)); // access it from JavaScript\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with the 'transition' Command in Hyperscript\nDESCRIPTION: Shows how to animate CSS property changes on an element using the 'transition' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_31\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition opacity to 0\n```\n\n----------------------------------------\n\nTITLE: Class Reference Syntax in Hyperscript\nDESCRIPTION: Shows how to reference elements by CSS class in _hyperscript using the dot notation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_5\n\nLANGUAGE: hyperscript\nCODE:\n```\n.active\n```\n\n----------------------------------------\n\nTITLE: Using Event Symbols within hyperscript Handlers\nDESCRIPTION: This example illustrates how the `event` symbol can be accessed directly within a hyperscript `on` handler to retrieve event details. It's a more verbose way to accomplish what parameter destructuring can do.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on anEvent log event.detail.foo\">Log Foo</div>\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators with Natural Language Aliases - Text\nDESCRIPTION: This snippet provides examples of using natural language equivalents to standard comparison operators in Hyperscript, such as 'is', 'am', 'is not', 'am not', and 'no'. It also references property access using the 'I'/'me' alias. Inputs are values for comparison, outputs are booleans. No dependencies. Limitations are semantic only; proper context variables must exist.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n  I match <:hover/>\\n  it matches <:hover/>\\n  I do not match <:hover/>\\n  it does not match <:hover/>\n```\n\nLANGUAGE: text\nCODE:\n```\n  I contain <:focus/>\\n  it contains <:focus/>\\n  I do not contain <:focus/>\\n  it does not contain <:focus/>\n```\n\n----------------------------------------\n\nTITLE: Returning Values in Hyperscript\nDESCRIPTION: Demonstrates returning a value from a _hyperscript function or expression using the 'return' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_22\n\nLANGUAGE: hyperscript\nCODE:\n```\nreturn 42\n```\n\n----------------------------------------\n\nTITLE: Exception Event Handler\nDESCRIPTION: Shows how to handle uncaught exceptions using an exception event handler.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_46\n\nLANGUAGE: hyperscript\nCODE:\n```\non exception(error)\n     log \"An error occurred: \" + error\n```\n\n----------------------------------------\n\nTITLE: Styling the Toggled Class Example in CSS\nDESCRIPTION: This CSS rule defines the appearance of the `.red` class used in the hyperscript toggle example. It applies a semi-transparent red background color to any element having this class, making the toggle effect visible.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .red {\n    background: rgba(255,0,0,0.48) !important;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Measuring Element Properties on Click - HTML with _hyperscript\nDESCRIPTION: This snippet demonstrates using _hyperscript to measure the geometry and scroll properties of a specific HTML element when it is clicked. The first example measures all available properties on click and logs them, while the second measures only the top property and logs it. It requires the _hyperscript library and a DOM environment; key parameters include the event trigger (on click) and the target measurement (me or my top). Inputs are user clicks, and outputs are console logs of measurements. It illustrates concise, declarative event-handling patterns using hyperscript within HTML.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/measure.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click measure me then log it\">Click Me To Measure</div>\n\n<div _=\"on click measure my top then log top\">Click Me To Measure My Top</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Finally Block in Hyperscript\nDESCRIPTION: Shows how to define a function with a finally block in hyperscript. The function performs an action and then executes cleanup code regardless of the outcome.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-12-25-hyperscript-0.9.2-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef foo()\n  doSomething()\nfinally\n  cleanUp()\n```\n\n----------------------------------------\n\nTITLE: Defining the cookies Symbol Syntax in EBNF\nDESCRIPTION: Defines the syntax for the `cookies` symbol using Extended Backus-Naur Form (EBNF). It simply indicates that `cookies` is a reserved symbol.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  cookies\n```\n\n----------------------------------------\n\nTITLE: Block Literal Function Definition in Hyperscript\nDESCRIPTION: Demonstrates how to create anonymous functions with block literals in _hyperscript using the arrow syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\n\\ x -> x * x\n```\n\n----------------------------------------\n\nTITLE: Child Event Listening with the 'in' Modifier\nDESCRIPTION: Illustrates using the `in` modifier to listen for events in dynamically added child elements in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<body _=\"on click in <button.fetch/>\n                 with it fetch /value then put it into my.innerHTML\">\n```\n\n----------------------------------------\n\nTITLE: DOM Template Literals\nDESCRIPTION: Demonstrates using template literals for dynamic element selection.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_50\n\nLANGUAGE: hyperscript\nCODE:\n```\n-- adds the 'disabled' class to the element with the id 'myDiv'\nset idToDisable to 'myDiv'\nadd .disabled to #{idToDisable}\n\n-- adds the 'highlight' class to all elements with the 'tabs' class\nset classToHighlight to 'tabs'\nadd .highlight to .{classToHighlight}\n\n-- removes all divs w/ class .hidden on them from the DOM\nset elementType to 'div'\nremove <${elementType}.hidden/>\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping Examples in HyperScript\nDESCRIPTION: Demonstrates different variable scoping modifiers including global, element, and local scope declarations\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_21\n\nLANGUAGE: hyperscript\nCODE:\n```\nset global myGlobal to true\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset element myElementVar to true\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\nset local x to true\n```\n\n----------------------------------------\n\nTITLE: Style Measurement Literals in hyperscript\nDESCRIPTION: Shows how to use the new style measurement literals to access computed style values of an element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog my *opacity          -- logs the explicit opacity of the element\nlog my *computed-opacity -- logs the computed opacity of the element\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for the measure Command - EBNF\nDESCRIPTION: This snippet provides the formal grammar in EBNF notation for the measure command directive in _hyperscript, specifying the command structure including possible possessive targets and an optional list of measurement properties. It lays out how the measure instruction should be parsed or interpreted in hyperscript, serving as reference for both implementers and power users. No dependencies outside of EBNF notation are needed; this snippet is illustrative and not functional as code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/measure.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n measure <possessive> [measurement {, measurement}\n```\n\n----------------------------------------\n\nTITLE: EBNF Syntax Definition for beep! Statement in _hyperscript\nDESCRIPTION: The formal EBNF syntax definition for the beep! statement, showing that it can take one or more expressions separated by commas.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/beep.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  beep! <expression> {, <expression>}\n```\n\n----------------------------------------\n\nTITLE: Toggling Classes with Escaped Characters - Hyperscript in HTML\nDESCRIPTION: This snippet shows toggling a complex Tailwind CSS class (with escaped characters) using Hyperscript's class literal syntax. The class includes non-standard characters which are escaped with backslashes. The button's click event toggles the specific Tailwind class on the target element(s). Hyperscript must be loaded. Inputs are clicks, outputs are updated class lists.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click toggle .group-\\[:nth-of-type\\(3\\)_\\&\\]:block\">\\n   Toggle Tailwinds Class\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using the `script` Attribute for Hyperscript in HTML\nDESCRIPTION: This HTML example demonstrates an alternative syntax for embedding hyperscript. Instead of the underscore attribute (`_`), it uses the `script` attribute to achieve the same functionality: toggling the `.red` class on button click.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button script=\"on click toggle .red on me\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in Hyperscript\nDESCRIPTION: Demonstrates how to use expression references in strings with the `$` operator in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nset x to \"World\"\nput \"Hello $x\" into my.innerHTML\n```\n\n----------------------------------------\n\nTITLE: Defining the Increment Command in EBNF\nDESCRIPTION: Specifies the syntax for the increment command using extended Backus-Naur form (EBNF). This definition outlines how to write an increment command, which can target a variable to increase its value by a specified number or a default of 1.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/increment.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nincrement <target> [by <number>]\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Element in Hyperscript\nDESCRIPTION: Demonstrates how to use the 'closest' expression to find the nearest ancestor element matching a selector.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_6\n\nLANGUAGE: hyperscript\nCODE:\n```\nclosest <div/>\n```\n\n----------------------------------------\n\nTITLE: Using 'it' Reference in Hyperscript\nDESCRIPTION: Demonstrates how to use the 'it' magic value to reference the result of a previous command in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_18\n\nLANGUAGE: hyperscript\nCODE:\n```\nfetch /people as json then put it into people\n```\n\n----------------------------------------\n\nTITLE: Utilizing Exposed JS Function in _hyperscript HTML Event - html\nDESCRIPTION: Shows how an exposed JavaScript function ('regexFind') can be called from hyperscript inline event listeners within HTML elements. Specifically, on the 'input' event, the 'regexFind' function is invoked to extract a value from the input's value. Assumes the JS function was previously exposed in a _hyperscript 'js...end' block. Key parameters are the regex pattern, group index, and the value of the input field; the output is the matched regex group.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/js.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input\n  type=\"text\"\n  _=\"\n    on input call regexFind('(.*)\\+.*@.*', 1, my.value)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Halt Command Syntax in EBNF\nDESCRIPTION: EBNF syntax definition for the halt command, showing the various forms including event bubbling and default behavior control\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/halt.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nhalt [the event['s]] (bubbling|default)\nexit\n```\n\n----------------------------------------\n\nTITLE: Element Transition Specification - hyperscript\nDESCRIPTION: Demonstrates transitioning an element's property using the element keyword with a symbol to specify the target.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/transition.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition element foo's opacity to 0\n```\n\n----------------------------------------\n\nTITLE: Iterating DOM Elements and Logging Attribute Value - Hyperscript in HTML\nDESCRIPTION: This snippet shows a Hyperscript event handler for a div that logs the 'href' attribute of all anchor tags within the body when clicked, using possessive attribute chains. Hyperscript must run on the page, and anchor elements must be present. Input is a click event, output is a log for each anchor's href. Includes comment for event handling (halting default behavior).\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click from body in <a/>\\n          put its @href into me\\n          halt -- prevent the default\">\\n  Click on Links To See The URL\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Hyperscript in DOM Areas with User Content\nDESCRIPTION: A code example demonstrating how to prevent hyperscript from executing in areas of the DOM that contain user-generated content by using the data-disable-scripting attribute. This provides an additional security layer beyond HTML escaping to protect against XSS attacks.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_92\n\nLANGUAGE: html\nCODE:\n```\n  <div data-disable-scripting>\n    <%= user_content %>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Messages with hyperscript and 'alert'\nDESCRIPTION: The snippet uses hyperscript to trigger an alert showing a custom message stored in a data attribute of the HTML element. It requires defining a 'data-message' attribute on the span element, and the alert displays this message when the 'mouseover' event occurs.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/me.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span\\n    data-script=\\\"on mouseover alert my @data-message\\\"\\n    data-message=\\\"Keep Out!\\\">\\n    Hover Over Me...\\n</span>\n```\n\n----------------------------------------\n\nTITLE: Fail Case: Using Increment as a Pseudo-Command\nDESCRIPTION: An example where attempting to use the 'increment()' function as a pseudo-command fails due to it being recognized as the 'increment' command instead, showcasing a parse error.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pseudo-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment(:x, 2) then put it into the next <output/>\">\n  increment(:x, 2)\n</button>\n<output></output>\n```\n\n----------------------------------------\n\nTITLE: Unless Modifier - Hyperscript\nDESCRIPTION: Shows usage of unless modifier for conditional error logging.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click set error to functionCouldReturnError()\n                log error unless no error\">\n    Log Result\n</button>\n```\n\n----------------------------------------\n\nTITLE: Appending to an Array in _hyperscript\nDESCRIPTION: Shows how to use the 'append' command to add elements to an array in _hyperscript. It uses the Array.push() method internally to add items to the end of the array.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/append.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nset resultArray to []\nappend 1 to resultArray\nappend 2 to resultArray\nappend 3 to resultArray\n-- resultArray == [1,2,3]\n```\n\n----------------------------------------\n\nTITLE: Using Expression-Only Blocks (Arrow Function Syntax) - Hyperscript (Text)\nDESCRIPTION: This snippet demonstrates Hyperscript's block (arrow-function-like) syntax for expression-only handlers in operations like map. It shows declaring a block with argument and expression. Prerequisite is Hyperscript's support for blocks. Inputs are arrays/collections, outputs are transformed arrays. Limitations: blocks do not support multiline or statement bodies.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n    set strs to [\"a\", \"ab\", \"abc\"]\\n    set lens to strs.map( \\ s -> s.length )\n```\n\n----------------------------------------\n\nTITLE: Type Conversion in Hyperscript\nDESCRIPTION: Shows how to use the `as` expression for dynamic type conversion in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nset x to \"10\" as Int\n```\n\n----------------------------------------\n\nTITLE: Mutation Observer Implementation\nDESCRIPTION: Demonstrates how to use the mutation observer synthetic event to watch for DOM changes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<div _='on mutation of @foo put \"Mutated\" into me'></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Themed CSS Variables for :root - CSS\nDESCRIPTION: This snippet provides CSS variable definitions for dark and light themes using the ':root' selector and the '[data-theme]' attribute. It sets '--bg-color' and '--text-color' variables accordingly. No dependencies other than a supporting browser. Key parameters are CSS selector and property names. Outputs are CSS variables set. Limitations: theme switching depends on the presence of the attribute.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\\n  --bg-color: black;\\n  --text-color: white;\\n}\\n\\n:root[data-theme='light'] {\\n  --bg-color: white;\\n  --text-color: black;\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching, Type Conversion, and Calculation in _hyperscript (HTML)\nDESCRIPTION: Shows fetching data from `/number` via POST, explicitly converting the response to a `Number` using `as Number`, incrementing the result (`the result + 1`), and displaying the new value within the div's `innerHTML`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div _='on click fetch /number as Number with method:\"POST\"\n                 put \"${the result + 1}\" into my innerHTML'>\n  Increment!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Style Literals in hyperscript\nDESCRIPTION: Demonstrates the new style literals feature that makes it easier to refer to style properties using asterisk notation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nset my *opacity to 50%\n```\n\n----------------------------------------\n\nTITLE: ID Reference Syntax in Hyperscript\nDESCRIPTION: Demonstrates how to reference elements by ID in _hyperscript using the hash notation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_8\n\nLANGUAGE: hyperscript\nCODE:\n```\n#main-div\n```\n\n----------------------------------------\n\nTITLE: Show Command Syntax Definition in EBNF\nDESCRIPTION: Formal syntax definition for the show command showing supported parameters and structure.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/show.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nshow [target] [with <hide-show-strategy>[: <argument>]] [where <expr>]\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions in Hyperscript\nDESCRIPTION: Shows how to throw an exception with a message using the 'throw' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_29\n\nLANGUAGE: hyperscript\nCODE:\n```\nthrow \"Bad Value\"\n```\n\n----------------------------------------\n\nTITLE: Math Operation in Hyperscript\nDESCRIPTION: Shows an example of a mathematical operation in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_23\n\nLANGUAGE: hyperscript\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Dynamic Conversion in HTML - HTML, Hyperscript\nDESCRIPTION: Shows how to use a dynamic conversion (handled via a resolver) in hyperscript from HTML markup. The button's click event converts 'foo' using the named handler (MyConversion:Short) and sets the result to its innerHTML. Requires a dynamic resolver to be registered for 'MyConversion:Short'. The key parameter is the conversion name with its argument. The process transforms the value and updates the markup as feedback.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/as.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click put 'foo' as MyConversion:Short into my innerHTML\">\n  Call my conversion\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Currency Fetch and Conversion Functions in Hyperscript\nDESCRIPTION: Shows Hyperscript equivalents for async data fetching and conversion. `getExchangeRate` fetches JSON from an FX API and computes rates; `getCountries` fetches country data and extracts names; `convert` ties values together with string interpolation. Uses the `fetch` command with `as json`, variables and implicit 'result' values for linear control flow. Automatically handles async/sync logic. Expects valid HTTP endpoints, currency codes, and requires Hyperscript environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-04-06-async-transparency-in-practice.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef getExchangeRate(fromCurrency, toCurrency)\n    fetch http://data.fixer.io/api/latest?access_key=f68b13604ac8e570a00f7d8fe7f25e1b&format=1 as json\n    set rates to the rates of the result's data\n    set euro to 1 / rates[fromCurrency]\n    get euro * rates[toCurrency]\n    return it\n  catch error\n    throw `Unable to get currency ${fromCurrency} and  ${toCurrency}`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef getCountries(currencyCode)\n    fetch `https://restcountries.eu/rest/v2/currency/${currencyCode}` as json\n    get result.map(\\ country -> country.name)\n    return it\n  catch (error)\n    throw `Unable to get countries that use ${currencyCode}`\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef convert(fromCurrency, toCurrency, amount)\n    set rate to exchangeRate(fromCurrency, toCurrency)\n    set countries to countries(toCurrency)\n    get (amount * rate).toFixed(2)\n    return `${amount} ${fromCurrency} is worth ${result} ${toCurrency} in the following countries: ${countries}`\n```\n\n----------------------------------------\n\nTITLE: Defining `wait` Command Syntax in EBNF\nDESCRIPTION: Defines the syntax for the `_hyperscript` `wait` command using Extended Backus-Naur Form (EBNF). It shows two main forms: waiting for a time expression or waiting for one or more events (potentially from a specific source), optionally destructuring event properties.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/wait.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nwait (<time expression> | for (<event> [from <source>]) [or ...] )\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for Go Command in Hyperscript\nDESCRIPTION: This snippet provides the EBNF syntax for the 'go' command in Hyperscript. It outlines the structure for navigating to URLs, specific parts of the page, and using offsets or animation controls. Understanding the syntax is crucial for implementing navigation functionalities in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/go.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n go [to] url <stringLike> [in new window]\n go [to] [top|middle|bottom] [left|center|right] [of] <expression> [(+|-) <number> [px] ][smoothly|instantly]\n go back\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Global Function Calls in Hyperscript\nDESCRIPTION: Shows how to call global functions directly without using the 'call' statement, using the prompt() function as an example.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-11-19-hyperscript-0.9-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\ncall prompt('Enter  your name')\nput `Hello ${the result}` into #response\n-- becomes\nprompt('Enter  your name')\nput `Hello ${the result}` into #response\n```\n\n----------------------------------------\n\nTITLE: Throw Command Syntax in EBNF\nDESCRIPTION: Defines the formal syntax for the throw command in HyperScript using EBNF notation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/throw.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nthrow <expression>\n```\n\n----------------------------------------\n\nTITLE: Using Halt Command in HyperScript Event Handler\nDESCRIPTION: Example showing how to use the halt command within a mousedown event handler to prevent text selection while allowing other operations to continue\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/halt.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  on mousedown\n    halt the event -- prevent text selection...\n    -- do other stuff...\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding JavaScript in Hyperscript\nDESCRIPTION: Demonstrates embedding raw JavaScript code within a hyperscript block using the 'js' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_14\n\nLANGUAGE: hyperscript\nCODE:\n```\njs alert('this is javascript'); end\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Hyperscript using EBNF\nDESCRIPTION: The 'set' feature allows assigning a value to an element-scoped variable in _hyperscript using EBNF syntax. It is used at a top-level to modify variables confined to an element's scope. Detailed usage can be found at the 'set' command documentation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/set.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  set <expression> to <expression>\n\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Hyperscript Functions\nDESCRIPTION: Provides an example of using catch blocks to handle exceptions in function calls within Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndef example()\n  call throwsAnException()\ncatch e\n  log e\n  return \"bad stuff happened...\"\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events with VanillaJS\nDESCRIPTION: This snippet handles a click event to trigger a custom event named 'doIt', which subsequently removes a targeted element from the DOM using VanillaJS. This requires a web environment where HTML elements such as buttons and divs are present.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<button id=\"vanilla-trigger-btn\">\\n  Trigger Event\\n</button>\\n<div id=\"event-target-1\">Event Target</div>\\n<script>\\n  document.querySelector('#vanilla-trigger-btn')\\n    .addEventListener('click', e => {\\n      document.getElementById('event-target-1')\\n        // The event name makes up only ~12% of this line.\\n        // No wonder that custom events aren't used as often...\\n        .dispatchEvent(new Event('doIt'))\\n    })\\n  document.getElementById('event-target-1')\\n    .addEventListener(\"doIt\", () => {\\n      document.getElementById('event-target-1').remove()\\n    })\\n</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button id=\"vanilla-trigger-btn\">\\n  Trigger Event\\n</button>\\n<div id=\"event-target-1\">Event Target</div>\\n<script>\\n  document.querySelector('#vanilla-trigger-btn')\\n    .addEventListener('click', e => {\\n      document.getElementById('event-target-1')\\n        .dispatchEvent(new Event('doIt'))\\n    })\\n  document.getElementById('event-target-1')\\n    .addEventListener(\"doIt\", () => {\\n      document.getElementById('event-target-1').remove()\\n    })\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Inserting Data – jQuery – JavaScript/HTML\nDESCRIPTION: Binds a button click (via jQuery) to an AJAX GET request, placing the server's response into a target div. Requires jQuery; markup must contain the required IDs. Inputs: button click. Outputs: populates div with server content.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  $(\\\"#jquery-fetch-it\\\").click(function(){\\n    $.get('/clickedMessage/', function(data){\\n        $(\\\"#fetch-target-2\\\").html(data);\\n     })\\n  });\\n});\\n</script>\\n<button id=\\\"jquery-fetch-it\\\">\\n Fetch It\\n</button>\\n<div id=\\\"fetch-target-2\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Async Command Syntax Definition in EBNF\nDESCRIPTION: Defines the formal syntax for the async command in _hyperscript, showing both single command and block syntax options.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/async.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nasync <command>\n\nasync do\n {command}\nend\n```\n\n----------------------------------------\n\nTITLE: Using the 'with' Command\nDESCRIPTION: Provides examples of utilizing the `with` command in Hyperscript to modify the reference element within a block of code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n-- fade out and remove all paragraphs\nfor p in <p/>\n  with p\n    transition opacity to 0\n    remove\n  end\nend\n```\n\nLANGUAGE: text\nCODE:\n```\n-- fade out and remove all paragraphs\nwith <p/>\n  transition opacity to 0\n  remove\nend\n```\n\n----------------------------------------\n\nTITLE: Final Fixed DOM Selection Expression\nDESCRIPTION: The corrected version of the selection expression after debugging, targeting paragraphs within divs having the 'highlight' class. This demonstrates the debugging workflow's end result.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_89\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .highlighted to <p/> in <div.highlight/>\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for `it` Variable in EBNF\nDESCRIPTION: Defines the syntax for referencing the implicit `it` or `result` variable in hyperscript using Extended Backus-Naur Form (EBNF). This variable holds the result of the most recent command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/it.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nit\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Removable Behavior in Hyperscript\nDESCRIPTION: Simple behavior definition that adds a click handler to remove the element it's installed on.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_75\n\nLANGUAGE: hyperscript\nCODE:\n```\nbehavior Removable\n  on click\n    remove me\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables Using Hyperscript (HTML)\nDESCRIPTION: This example demonstrates initializing a variable using the 'init' block in hyperscript embedded in an HTML script tag. It sets a global JavaScript variable within the HTML document.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-16-hyperscript-0.0.6-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n    init\n       set window.foo to \"foo\"\n    end\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Percentage-Based Transitions in hyperscript\nDESCRIPTION: Shows how percentage-based transitions work in the new version without requiring quotes due to the new general measurement literals feature.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition my width to 100%   -- Works because `100%` is a valid, general expression now\n```\n\n----------------------------------------\n\nTITLE: Example Usage of beep! Statement in _hyperscript\nDESCRIPTION: Examples demonstrating how to use the beep! statement with one expression and with multiple expressions, including element queries.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/beep.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nbeep! <.foo/>\nbeep! <.foo/>, <.foo/> in <.bar/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Asynchronous Functions - Hyperscript in HTML/SCRIPT\nDESCRIPTION: This snippet defines an asynchronous Hyperscript function and demonstrates awaiting its result in an event handler using the Hyperscript scripting context. The function 'waitThenReturn10' returns a promise after a delay. When clicking the button, the expression is paused until the promise resolves. Requires Hyperscript to be included and running. Input is a click; output is the updated innerHTML after the promise resolves.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\\ndef waitThenReturn10()\\n    wait 10ms\\n    return 10\\nend\\n</script>\\n<button _=\"on click put 'The answer was $waitThenReturn10()' into my.innerHTML\">\\n  Click Me...\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Positional Expression in Hyperscript\nDESCRIPTION: Demonstrates how to use positional expressions to get elements from a collection in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_14\n\nLANGUAGE: hyperscript\nCODE:\n```\nfirst from <div/>\n```\n\n----------------------------------------\n\nTITLE: String Operations - Hyperscript\nDESCRIPTION: Demonstrates string creation and manipulation using different quote styles and template literals.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_30\n\nLANGUAGE: hyperscript\nCODE:\n```\nset hello to 'hello'\nset world to \"world\"\nset helloWorld to hello + \" \" + world\n```\n\n----------------------------------------\n\nTITLE: Declaring set Command Syntax - EBNF - ebnf\nDESCRIPTION: This snippet defines the grammar for the set command in EBNF notation. It describes both standard and object-literal forms, clarifying how set expressions can be constructed in _hyperscript source code. This is used by the parser to recognize valid set command usage.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/set.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  set <expression> to <expression>\\n  set <object literal> on <expression>\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with Unless Modifier\nDESCRIPTION: Shows how to use the 'unless' modifier across commands to conditionally execute based on the absence or presence of an error.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_5\n\nLANGUAGE: hyperscript\nCODE:\n```\nlog error unless no error\n```\n\n----------------------------------------\n\nTITLE: Measuring DOM Elements in Hyperscript\nDESCRIPTION: Shows how to get the measurements (dimensions and position) for a given element using the 'measure' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_17\n\nLANGUAGE: hyperscript\nCODE:\n```\nmeasure me then log it\n```\n\n----------------------------------------\n\nTITLE: Using Exists Operator in Hyperscript Conditional\nDESCRIPTION: Demonstrates the new 'exists' operator in hyperscript, which checks for the existence of a CSS class on an element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-12-25-hyperscript-0.9.2-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nif .someClass exists\n  ...\n```\n\n----------------------------------------\n\nTITLE: Proposed Runtime Type Checking for Functions in Hyperscript\nDESCRIPTION: Proposed syntax for implementing runtime type checking for function parameters and return values in hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/TODO.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndef(foo:String!) : String!\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Connection in Hyperscript\nDESCRIPTION: Establishes a WebSocket connection to a server endpoint and configures it to parse and log JSON messages. This demonstrates the basic socket declaration syntax in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_82\n\nLANGUAGE: hyperscript\nCODE:\n```\nsocket MySocket ws://myserver.com/example\n  on message as json\n    log message\nend\n```\n\n----------------------------------------\n\nTITLE: Throw Command Example in HyperScript\nDESCRIPTION: Demonstrates a practical example of using the throw command within a conditional statement in a HyperScript function definition.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/throw.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  def throwsIfTrue(value)\n    if value throw \"Yep!\"\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Decrement Command in _hyperscript\nDESCRIPTION: Examples of using the decrement command in _hyperscript. The first example decrements a counter variable by 2, and the second example demonstrates how decrement initializes an undefined variable to zero before decrementing it.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/decrement.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nset counter to 5\ndecrement counter by 2 -- counter is now 3\n\ndecrement newVariable -- newVariable is defaulted to zero, then decremented to -1\n```\n\n----------------------------------------\n\nTITLE: Installing a Hyperscript Behavior\nDESCRIPTION: This HTML snippet demonstrates how to install a pre-defined behavior onto an element using hyperscript. No parameters are passed in this installation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"install Removable\">Click to get rid of me</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for the `repeat` Command using EBNF\nDESCRIPTION: This EBNF snippet defines the grammatical structure for various forms of the `repeat` command in _hyperscript. It outlines syntax for loops like `for`, `in`, `while`, `until`, `until event`, `times`, and `forever`, including the optional `index` clause and the alternative `for` keyword syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/repeat.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nrepeat for <identifier> in <expression> [index <identifier>] { <command> } end\nrepeat in <expression> [index <identifier>] { <command> } end\nrepeat while <expression> [index <identifier>] { <command> } end\nrepeat until <expression> [index <identifier>] { <command> } end\nrepeat until event <expression> [from <expression>] [index <identifier>] { <command> } end\nrepeat <number> times [index <identifier>] { <command> } end\nrepeat forever <expression> [index <identifier>] { <command> } end\nfor <identifier> in <expression> [index <identifier>]\n```\n\n----------------------------------------\n\nTITLE: Selecting Items with the 'pick' Command in Hyperscript\nDESCRIPTION: Demonstrates selecting items from arrays, strings, and regex match results using the 'pick' command.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/commands_table.md#2025-04-22_snippet_18\n\nLANGUAGE: hyperscript\nCODE:\n```\npick match of \"(\\w+)\" from str\n```\n\n----------------------------------------\n\nTITLE: Continue Command Usage in _hyperscript Repeat Block\nDESCRIPTION: Example showing how the continue command skips remaining commands in a repeat block iteration. The first append command executes, but the second append command is skipped due to the continue statement.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/continue.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nrepeat 3 times\n    append \"works \" to #message -- this command will execute\n    continue\n    append \"skipped \" to #message -- this command will be skipped\n end\n```\n\n----------------------------------------\n\nTITLE: Using `start` and `end` Keywords with `pick items` in _hyperscript\nDESCRIPTION: Illustrates using the symbolic keywords `start` and `end` within the `pick items` command in _hyperscript. This allows defining array slices relative to the beginning or end of the array without needing to know the exact indices.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pick.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\npick items from start to 4 from arr\n--      it = [10, 11, 12, 13]\npick items from 2 to end from arr\n--      it = [12, 13, 14, 15]\npick items from start to end from arr\n--      it = [10, 11, 12, 13, 14, 15]\n```\n\n----------------------------------------\n\nTITLE: Using the 'no' Expression in an _hyperscript Event Handler (HTML)\nDESCRIPTION: This HTML snippet demonstrates using the `no` expression within an _hyperscript event handler assigned to the `_` attribute. When the `div` is clicked, it executes the _hyperscript code. The code checks if the result of the CSS selector `.tabs` is null or empty using `no .tabs`. If true (no elements with class 'tabs' are found), it logs 'No tabs found!' to the browser console. This requires the _hyperscript library to be active on the page.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/no.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  _=\"on click\n          if no .tabs log 'No tabs found!'\"\n>\n  Check for Tabs\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using 'me' Reference in Hyperscript\nDESCRIPTION: Shows how to use the 'me' magic value to reference the current element in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_19\n\nLANGUAGE: hyperscript\nCODE:\n```\nput 'clicked' into me\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Conversion in HTML - HTML, Hyperscript\nDESCRIPTION: Demonstrates using a custom conversion handler within real HTML markup by leveraging hyperscript's declarative attribute binding (_). Upon click, it applies the value 'foo' to the 'MyConversion' function and assigns the result to the button's innerHTML. Requires both an existing 'MyConversion' conversion (such as defined earlier) and hyperscript runtime on the page. Input is the string 'foo', output is an updated button label showing the conversion.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/as.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click put 'foo' as MyConversion into my innerHTML\">\n  Call my conversion\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for init Feature in Hyperscript using EBNF\nDESCRIPTION: This EBNF snippet outlines the grammatical structure for the `init` feature in hyperscript. It specifies that the `init` keyword can optionally be followed by the `immediately` modifier, must contain one or more commands, and is terminated by the `end` keyword.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/init.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ninit [immediately]\n  {<command>}\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Draggable Elements with _hyperscript\nDESCRIPTION: This snippet shows how to make buttons draggable by adding the 'draggable' attribute and using _hyperscript to set text data on dragstart.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook/70-drag-n-drop.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p _=\"on dragstart call event.dataTransfer.setData('text/plain',target.textContent)\">\n  <button class=\"btn primary\" draggable=true>DRAG ME</button>\n  <button class=\"btn primary\" draggable=true>OR ME</button>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Property Access with 'of' Expression in Hyperscript\nDESCRIPTION: Shows how to access properties using the 'of' expression syntax in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_11\n\nLANGUAGE: hyperscript\nCODE:\n```\nthe location of window\n```\n\n----------------------------------------\n\nTITLE: Listening for Attribute Mutations in hyperscript\nDESCRIPTION: This example demonstrates the use of hyperscript to listen for attribute mutations on a DOM element using the `on mutation` syntax. It utilizes the Mutation Observer API to react to changes in specified attributes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div _='on mutation of @foo put \"Mutated\" into me'></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Loops - Hyperscript\nDESCRIPTION: Demonstrates various looping patterns including for loops, while loops, until loops and times loops.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_28\n\nLANGUAGE: hyperscript\nCODE:\n```\n-- a basic for loop\nrepeat for x in [1, 2, 3]\n  log x\nend\n\n-- you may omit the 'repeat' keyword for a for loop\nfor x in [1, 2, 3]\n  log x\nend\n\n-- you may repeat without an explicit loop variable and use\n-- the implicit `it` symbol\nrepeat in [1, 2, 3]\n  log it\nend\n\n-- you may use a while clause to loop while a condition is true\nrepeat while x < 10\n  log x\nend\n\n-- you may use an until clause to loop until a condition is true\nrepeat until x is 10\n  log x\nend\n\n-- you may use the times clause to repeat a fixed number of times\nrepeat 3 times\n  log 'looping'\nend\n\n-- you may use the index clause on any of the above\n-- to bind the loop index to a given symbol\n-- an index clause is any of \"index\", or \"indexed by\"\n-- followed by a variable name\nfor x in [1, 2, 3] index i\n  log i, \"is\", x\nend\n\n-- you can loop forever if you like\nrepeat forever\n  if I match :focus\n    break\n  end\n  wait 2s\nend\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Hyperscript\nDESCRIPTION: Shows examples of logical operators in _hyperscript for combining boolean expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_9\n\nLANGUAGE: hyperscript\nCODE:\n```\nx and y\nz or false\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Hyperscript\nDESCRIPTION: Shows examples of comparison operators in _hyperscript, including equality and match operators.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_7\n\nLANGUAGE: hyperscript\nCODE:\n```\nx == \"foo\" I match <:active/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Syntax for the _hyperscript fetch Command (EBNF)\nDESCRIPTION: Specifies the Extended Backus-Naur Form (EBNF) syntax for the _hyperscript `fetch` command. It shows the required URL (`<stringLike>`), optional response type specifiers (`as json`, `as Object`, `as html`, `as response`), and optional request configuration using either an object literal or named arguments with the `with` keyword.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nfetch <stringLike> [ as [ a | an ]( json | Object | html | response ) ] [<object literal> | 'with' <naked named arguments>]\n```\n\n----------------------------------------\n\nTITLE: Using 'you' Reference in Hyperscript\nDESCRIPTION: Demonstrates how to use the 'you' magic value to reference a target element in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_20\n\nLANGUAGE: hyperscript\nCODE:\n```\ntell <p/> remove yourself\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations in Hyperscript\nDESCRIPTION: Examples of various comparison operations supported by Hyperscript, including `matches` and `contains`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nif elt matches <:focus/> log \"Focused!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Currency Converter Functions in JavaScript\nDESCRIPTION: Implements async functions for currency exchange: `getExchangeRate` fetches rates via axios, parses response JSON data, and calculates the exchange rate; `getCountries` fetches a list of countries for a currency code; `convert` ties it all together to provide a formatted message string. Functions use ES2017 async/await, rely on axios for HTTP requests, expect valid API endpoints, throw errors on failures, and output promises containing results or messages. Inputs are currency codes and amount; output is a formatted string or an error. Dependencies: axios, network access.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-04-06-async-transparency-in-practice.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getExchangeRate = async (fromCurrency, toCurrency) => {\n  try {\n    const response = await axios.get(\n      \"http://data.fixer.io/api/latest?access_key=f68b13604ac8e570a00f7d8fe7f25e1b&format=1\"\n    );\n    const rate = response.data.rates;\n    const euro = 1 / rate[fromCurrency];\n    return exchangeRate;\n  } catch (error) {\n    throw new Error(\n      `Unable to get currency ${fromCurrency} and  ${toCurrency}`\n    );\n  }\n};\n\nconst getCountries = async (currencyCode) => {\n  try {\n    const response = await axios.get(\n      `https://restcountries.eu/rest/v2/currency/${currencyCode}`\n    );\n    return response.data.map((country) => country.name);\n  } catch (error) {\n    throw new Error(`Unable to get countries that use ${currencyCode}`);\n  }\n};\n\nconst convert = async (fromCurrency, toCurrency, amount) => {\n  const exchangeRate = await getExchangeRate(fromCurrency, toCurrency);\n  const countries = await getCountries(toCurrency);\n  const convertedAmount = (amount * exchangeRate).toFixed(2);\n  return `${amount} ${fromCurrency} is worth ${convertedAmount} ${toCurrency}. You can spend these in the following countries: ${countries}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Of Expression Examples in Hyperscript\nDESCRIPTION: Shows two equivalent ways to write window.location.reload() in Hyperscript, demonstrating the natural English syntax using 'of' expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click call window.location.reload()\">\n    Reload the Location\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click reload() the location of the window\">\n    Reload the Location\n</button>\n```\n\n----------------------------------------\n\nTITLE: Terminating Feature Blocks with `end` in Hyperscript\nDESCRIPTION: This hyperscript snippet shows how features (like event handlers) are typically terminated with the `end` keyword, especially when defined over multiple lines within a `script` tag or attribute.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_14\n\nLANGUAGE: hyperscript\nCODE:\n```\n  on click\n    log \"Clicked!\"\n  end\n\n```\n\n----------------------------------------\n\nTITLE: Toggle Command with Style Properties in hyperscript\nDESCRIPTION: Demonstrates how the toggle command can now toggle visibility by passing style literals like opacity or display.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_6\n\nLANGUAGE: hyperscript\nCODE:\n```\non click toggle my *opacity\non click toggle my *display\n```\n\n----------------------------------------\n\nTITLE: Using Aliases and Comparison Operators\nDESCRIPTION: Demonstrates the use of `I` as an alias for `me` and alternative forms of comparison operators in Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nI match .foo\nI contain that\n```\n\n----------------------------------------\n\nTITLE: RPC Request Message Format - JSON\nDESCRIPTION: Provides the structure of a JSON message used by hyperscript to request RPC execution over a WebSocket. It includes a unique invocation id ('iid'), the function name to call ('function'), and an array of arguments ('args'). This structure is required for server-side consumption to map, execute, and respond to the requested operation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iid\": \"185795d2-84ca-11eb-8dcd-0242ac130003\",\n  \"function\": \"increment\",\n  \"args\": [41]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Hyperscript Files\nDESCRIPTION: Shows the correct order for loading remote Hyperscript files before the main Hyperscript library.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\" src=\"/functions._hs\"></script>\n<script src=\"https://unpkg.com/hyperscript.org\"></script>\n```\n\n----------------------------------------\n\nTITLE: Debugging in hyperscript\nDESCRIPTION: Highlights a basic debugging command using hyperscript. Users can insert breakpoints into their code to pause execution for inspection. Effective in environments where hyperscript debugging tools are supported.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/index.md#2025-04-22_snippet_7\n\nLANGUAGE: hyperscript\nCODE:\n```\non click breakpoint\n```\n\n----------------------------------------\n\nTITLE: Real-Time Record Update in HTML with Hyperscript\nDESCRIPTION: This HTML and Hyperscript example demonstrates a real-time record update interface. It connects to an SSE stream, handles incoming JSON messages, and dynamically updates HTML elements based on the received data. This method requires a server sending appropriately formatted JSON updates.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/event-source.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  eventsource recordUpdater from http://server-name/record-updater\n\n      on message as json\n          put it.name into #name\n          put it.username into #username\n          put it.email into #email\n          log me\n      end\n\n  end\n</script>\n\n<div>\n  <button script=\"on click call recordUpdater.open()\">Connect</button>\n  <button script=\"on click call recordUpdater.close()\">Disconnect</button>\n</div>\n\n<h3>Real-Time Record</h3>\n<div>Name: <span id=\"name\">...</span></div>\n<div>Username: <span id=\"username\">...</span></div>\n<div>Email: <span id=\"email\"></span></div>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Inserting Data – Vanilla JS – JavaScript/HTML\nDESCRIPTION: On click, fetches data from a server endpoint with fetch(), and inserts the response as HTML content. Requires browser with fetch support and a button/div structure; event listener attached to the button, uses async/await. Input: button click. Output: fetched data in target div.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\\\"vanilla-fetch-it\\\">\\n Fetch It\\n</button>\\n<div id=\\\"fetch-target-1\\\"></div>\\n<script>\\ndocument.querySelector('#vanilla-fetch-it')\\n  .addEventListener('click', async () => {\\n    document.getElementById('fetch-target-1')\\n      .innerHTML = await fetch('/clickedMessage/').then(r => r.text())\\n  })\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners on Element Removal\nDESCRIPTION: This example explains how hyperscript automatically removes event listeners when the associated DOM element is removed, preventing memory leaks and ensuring correct event handling if listeners were set on other elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/on.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nCount: <output _=\"\non click from #inc\n\tlog \\\"Increment\\\"\n\tincrement my textContent\ninit\n\tremove me\n\">0</output>\n\n<!--After the <output/> is removed, clicking this will not log anything to\n\tthe console-->\n<button id=\"inc\">Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Referencing HTML Elements in hyperscript EBNF\nDESCRIPTION: The 'me' reference in hyperscript EBNF is utilized to target the HTML element within which the script operates. This reference allows scripts to dynamically interact with the current element context by linking actions to HTML tags such as <div> or <button>.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/me.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nme\n```\n\n----------------------------------------\n\nTITLE: Selecting All Buttons with Query Reference in _hyperscript (HTML)\nDESCRIPTION: This HTML snippet shows how to use the _hyperscript `query reference` `<button/>` to select all button elements on the page. When the div is clicked, the `.clicked` class is added to every button. This demonstrates the basic usage of tag selectors within the query reference syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/query-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked to <button/>\">Add .clicked to all buttons</div>\n```\n\n----------------------------------------\n\nTITLE: Transition Command Enhancements\nDESCRIPTION: Highlights the enhancements made to the 'transition' command, allowing pseudo-possessive syntax and an 'over' syntax for specifying transition duration.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-21-hyperscript-0.0.8-is-released.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition my opacity to 0\ntransition the div's opacity to 0\n```\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition my opacity to 0 over 2s\n```\n\n----------------------------------------\n\nTITLE: Extending Hyperscript with a Custom Command\nDESCRIPTION: Demonstrates how to add a new 'foo' command to Hyperscript. This command logs a message when an expression evaluates to 'foo'. Shows the pluggable grammar system of Hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n// register for the command keyword \"foo\"\n_hyperscript.addCommand('foo', function(parser, runtime, tokens) {\n\n  // A foo command  must start with \"foo\".\n  if(!tokens.match('foo')) return\n\n  // Parse an expression.\n  const expr = parser.requireElement('expression', tokens);\n\n  return {\n    // All expressions needed by the command to execute.\n    // These will be evaluated and the result will be passed back to us.\n    args: [expr],\n\n    // Implement the logic of the command.\n    // Can be synchronous or asynchronous.\n    // @param {Context} context The runtime context, contains local variables.\n    // @param {*} value The result of evaluating expr.\n    async op(context, value) {\n      if (value == \"foo\") {\n        console.log(\"A Wild Foo Was Found!\")\n      }\n      // Return the next command to execute.\n      return runtime.findNext(this)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'an' in Comparisons in Hyperscript\nDESCRIPTION: This snippet demonstrates the new feature allowing the use of 'an' in addition to 'a' in comparisons.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2025-02-01-hyperscript-0.9.14-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nfoo is an Event\n```\n\n----------------------------------------\n\nTITLE: Utilizing 'indexed by' Syntax in Hyperscript Loops\nDESCRIPTION: This snippet shows the new 'indexed by' syntax for index variables in loops, enhancing loop functionality in hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2025-02-01-hyperscript-0.9.14-is-released.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nindexed by\n```\n\n----------------------------------------\n\nTITLE: Fading and Removing Element – jQuery – JavaScript/HTML\nDESCRIPTION: Uses jQuery to bind a click event handler that smoothly fades out an element via fadeOut(), then removes it from the DOM. Dependencies: jQuery (must be loaded). IDs in the markup must match. Input: click action. Output: fades out and removes the target element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  $(\\\"#jquery-remove-me\\\").click(function(){\\n    $(this).fadeOut(500, function(){\\n        $(this).remove();\\n    });\\n  });\\n});\\n</script>\\n<div id=\\\"jquery-remove-me\\\">\\n  Remove Me\\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  $(\\\"#divToRemove\\\").click(function(){\\n    $(this).fadeOut(500, function(){\\n        $(this).remove();\\n    });\\n  });\\n});\\n</script>\\n<div id=\\\"divToRemove\\\">\\n  Remove Me\\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Integration with Hyperscript\nDESCRIPTION: Example of calling a Hyperscript function from JavaScript using promises.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar str = waitAndReturn();\nstr.then(function(val){\n  console.log(\"String is: \" + val);\n})\n```\n\n----------------------------------------\n\nTITLE: Including _hyperscript Template Feature in HTML\nDESCRIPTION: This HTML snippet shows how to include the necessary `template.js` file via a `<script>` tag to enable the `render` command functionality in _hyperscript. This script should be included in addition to the main hyperscript library.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/render.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/hyperscript.org@0.9.14/dist/template.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Finding the First Regex Match using `pick match` in _hyperscript\nDESCRIPTION: Shows how to use the `pick match` command in _hyperscript to find the first occurrence of a regular expression pattern within a string. It demonstrates accessing the full match (at index 0) and captured groups (at subsequent indices) from the resulting match object. The example also shows using the `i` flag for case-insensitive matching.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pick.md#2025-04-22_snippet_2\n\nLANGUAGE: hyperscript\nCODE:\n```\nset str to \"The quick brown fox jumps over the lazy dog.\"\npick match of \"the (\\w+)\" from str\nlog it[0] -- \"the lazy\"\nlog it[1] -- \"lazy\"\npick match of \"the (\\w+)\" | i from str\nlog it[0] -- \"The quick\"\nlog it[1] -- \"quick\"\n```\n\n----------------------------------------\n\nTITLE: Workarounds for using 'end' keyword in JavaScript with _hyperscript\nDESCRIPTION: Examples showing incorrect usage of the 'end' keyword in JavaScript and recommended alternatives. Covers variable naming, method calling, template literals, and regular expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/_includes/js_end.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't:\nvar end = getTheEnd();\n// Do:\nvar theEnd = getTheEnd();\n\n// Don't:\ngetEndable().end();\n// Do:\ngetEndable()[\"end\"]();\n\n// Don't:\nvar template = `this can only end ${good ? \"well\" : \"badly\"}`;\n// Do:\nvar template = `this can only ${\"end\"} ${good ? \"well\" : \"badly\"}`;\n\n// Don't:\nvar regex = /end (.*)/;\n// Do:\nvar regex = new RegExp(\"end (.*)\");\n```\n\n----------------------------------------\n\nTITLE: RPC Response Message Format (Exception) - JSON\nDESCRIPTION: Shows the JSON format for signaling an exception in a WebSocket RPC call. The 'iid' is the invocation id, and 'throw' contains the error message. Hyperscript handles this as an exception on the client side. Proper server handling is required to send this format on errors.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iid\": \"185795d2-84ca-11eb-8dcd-0242ac130003\",\n  \"throw\": \"An error occurred when calculating the answer...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Array Expansion and Property Access - Hyperscript (Text)\nDESCRIPTION: This snippet shows how Hyperscript performs array property expansion using flatMap for property access, except for 'length'. It processes arrays and accesses properties or DOM relationships en masse. Inputs are arrays or node lists, outputs are collections of parents or children. Hyperscript runtime required.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n  set divs to </div>                      -- get all divs in the document\\n  set divParents to divs.parentElement    -- get all parents of those divs\\n  set divChildren to divs.children        -- get all children of those divs\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript in Workers\nDESCRIPTION: Example of using inline JavaScript within a hyperscript worker definition for performance optimization.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_79\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  worker CoinMiner\n    js\n      function mineNext() {\n        // a JavaScript implementation...\n      }\n    end\n    def nextCoin()\n      return mineNext()\n    end\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Debounced Input – jQuery – JavaScript/HTML\nDESCRIPTION: Uses jQuery to debounce the handling of input keyup events with a 300ms delay, updating a target div after the pause. Requires jQuery library and referenced elements to exist. Input: typing; Output: debounced update. IDs must match markup.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  var debounce = null;\\n  $(\\\"#debouncedInput\\\").keyup(function(){\\n     clearTimeout(debounce);\\n     var self = $(this);\\n     debounce = setTimeout(function(){\\n       $('#debounce-target-2').html(self.val());\\n     }, 300);\\n  });\\n});\\n</script>\\n<input placeholder=\\\"Enter Some Data...\\\"\\n       id=\\\"debouncedInput\\\"/>\\n<div id=\\\"debounce-target-2\\\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  var debounce = null;\\n  $(\\\"#jquery-debounce\\\").keyup(function(){\\n     clearTimeout(debounce);\\n     var self = $(this);\\n     debounce = setTimeout(function(){\\n       $('#debounce-target-2').html(self.val());\\n     }, 300);\\n  });\\n});\\n</script>\\n<input id=\\\"jquery-debounce\\\" placeholder=\\\"Enter Some Data...\\\"/>\\n<div id=\\\"debounce-target-2\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Example with Transition - HTML\nDESCRIPTION: HTML snippet demonstrating an embedded _hyperscript transition command triggered by a click event.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/transition.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click transition my opacity to 0 then remove me\">\n  Fade then remove me\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining the Syntax for the log Command in _hyperscript using EBNF\nDESCRIPTION: The EBNF syntax definition for the log command in _hyperscript, showing that it can accept one or more expressions separated by commas, with an optional 'with' clause that specifies the logging function.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/log.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n log <expression> {, <expression>} [with <expression>]\n```\n\n----------------------------------------\n\nTITLE: Expanded Pseudo Command Syntax in hyperscript\nDESCRIPTION: Demonstrates the expanded syntax for pseudo commands, showing how function calls can now be used as top-level commands.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_4\n\nLANGUAGE: hyperscript\nCODE:\n```\non click\n   alert(\"I was clicked\") -- a stand alone function call can now simply be a top level command\n```\n\n----------------------------------------\n\nTITLE: Declaring Comparison Operator Syntax - EBNF - ebnf\nDESCRIPTION: Defines all accepted hyperscript comparison operator expressions using EBNF notation. This encompasses both symbolic and English-like syntaxes for comparisons, type checks, existence, and collection queries. The list guides which expressions are parsed as valid comparison operators in hyperscript. No dependencies; output is EBNF grammar for use by parser implementations.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/comparison-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n<expr> < <expr>\\n<expr> is less than <expr>\\n<expr> <= <expr>\\n<expr> is less than or equal to <expr>\\n<expr> > <expr>\\n<expr> is greater than <expr>\\n<expr> >= <expr>\\n<expr> is greater than or equal to <expr>\\n<expr> == <expr>\\n<expr> === <expr>\\n<expr> is <expr>\\n<expr> is equal to <expr>\\n<expr> is really equal to <expr>\\n<expr> is not <expr>\\n<expr> is not equal to <expr>\\n<expr> is not really equal to <expr>\\n<expr> equals <expr>\\n<expr> really equals <expr>\\n<expr> is empty\\n<expr> is not empty\\nI match <expr>\\n<expr> matches <expr>\\nI do not match <expr>\\n<expr> does not match <expr>\\nI contain <expr>\\n<expr> contains <expr>\\n<expr> is in <expr>\\nI do not contain <expr>\\n<expr> does not contain <expr>\\n<expr> includes <expr>\\nI do not include <expr>\\n<expr> does not include <expr>\\n<expr> is empty\\n<expr> is not empty\\n<expr> is a <type name>\\n<expr> is not a <type name>\\n<expr> exists\\n<expr> does not exist\n```\n\n----------------------------------------\n\nTITLE: Positional Expression Example in Hyperscript\nDESCRIPTION: Shows how to use the first positional expression to select the first section element in the document.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click log the first <section/>\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: RPC Response Message Format (Success) - JSON\nDESCRIPTION: Defines the response structure for a successful RPC invocation over a WebSocket. The 'iid' matches the request id, and 'return' holds the computed value. The implementation expects the server to reply with this format for hyperscript to resolve the client-side promise.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/socket.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"iid\": \"185795d2-84ca-11eb-8dcd-0242ac130003\", \"return\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Debounced Input – Vanilla JS – JavaScript/HTML\nDESCRIPTION: Attaches a keyup event to an input, debouncing function execution by 300ms using a timer, then updates a target div. Pure JS implementation with adjustable debounce period. Input: user typing; Output: input value shown after a pause. Requires input and target element with matching IDs.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input id=\\\"vanilla-debounce\\\"/>\\n<div id=\\\"debounce-target-1\\\"></div>\\n<script>\\n  let debounceState\\n  const debounceDuration = 300\\n  document.querySelector('#vanilla-debounce')\\n    .addEventListener('keyup', e => {\\n      if (debounceState) clearTimeout(debounceState)\\n      debounceState = setTimeout(() => {\\n        // Here comes the actual logic...\\n        document.getElementById('debounce-target-1')\\n          .innerHTML = e.target.value\\n      }, debounceDuration)\\n    })\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Template for _hyperscript Rendering\nDESCRIPTION: This HTML snippet defines a template using the `<template>` tag with the ID `color-template`. It contains an unordered list (`<ul>`) where list items (`<li>`) are generated dynamically using _hyperscript directives (`@repeat`, `@set`) based on the `colors` data passed during rendering. It uses `${}` for HTML-escaped interpolation and `${unescaped ...}` for raw HTML insertion.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/render.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"color-template\">\n  <ul>\n    @repeat in colors\n      @set bg to it\n      @set fg to getContrastingColor(it)\n      <li style=\"background: ${bg}; color: ${unescaped fg}\">${bg}</li>\n    @end\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'no' Expression Syntax using EBNF\nDESCRIPTION: This snippet uses Extended Backus-Naur Form (EBNF) to define the grammatical structure for the `no` expression in _hyperscript. It specifies that the `no` keyword must be followed by a valid _hyperscript expression, represented here as `<expr>`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/no.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  no <expr>\n```\n\n----------------------------------------\n\nTITLE: No Operator in Hyperscript\nDESCRIPTION: Demonstrates the 'no' operator in _hyperscript which checks if something is empty, null, or undefined.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_10\n\nLANGUAGE: hyperscript\nCODE:\n```\nno element.children\n```\n\n----------------------------------------\n\nTITLE: Defining Transition Syntax - EBNF\nDESCRIPTION: Defines the syntax for a transition command in _hyperscript using EBNF: elements, properties, time, and expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/transition.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ntransition [[element] <transition target>]\n  {<property name> [from <string>} to <string>}\n[over <time expression> | using <expression>]\n```\n\n----------------------------------------\n\nTITLE: Event Queue Modifier in _hyperscript\nDESCRIPTION: Shows how to use the 'every' modifier to handle all events immediately without queuing.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on every click add .clicked\">\n  Add The \"clicked\" Class To Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Async Converter in JavaScript within HTML Event Handlers\nDESCRIPTION: Illustrates the invocation of the async `convert` JavaScript function from an HTML button click, leveraging the Promise API to insert the returned message into a DOM element. Incorporates both inline event handler and DOM manipulation within the handler function. Depends on browser environment and prior definition of `convert` and the presence of an 'output' element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-04-06-async-transparency-in-practice.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button\n  onclick=\"convert('USD', 'EUR', 10)\n                   .then((message) => {\n                     document.getElementById('output').innerText = message;\n                   })\"\n>\n  Convert $10 To Euros\n</button>\n<p id=\"output\"></p>\n```\n\n----------------------------------------\n\nTITLE: Fading and Removing Element – hyperscript – hyperscript/HTML\nDESCRIPTION: Achieves a fade out and removal of an element on click using an inline hyperscript attribute, eliminating the need for explicit JavaScript or CSS. Dependencies: hyperscript library. Input: click event; Output: removed element via opacity transition.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div _=\\\"on click transition opacity to 0 then remove me\\\">\\n  Remove Me\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Event Source in Hyperscript\nDESCRIPTION: This snippet demonstrates setting up an SSE connection in Hyperscript, handling events like `newMessage` and `updateMessage`, and logging the received messages. There are no specific dependencies apart from Hyperscript and server providing SSE data. It showcases basic logging of JSON-encoded events.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/event-source.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\neventsource ChatUpdates from http://myserver.com/chat-updates\n\n  on newMessage as json\n    log it\n  end\n\n  on updateMessage as json\n    log it\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Custom 'foo' Command in Hyperscript\nDESCRIPTION: Shows how to use a custom-defined command in Hyperscript code. This function sets a variable to 'foo' and then calls the custom 'foo' command with that variable.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_91\n\nLANGUAGE: hyperscript\nCODE:\n```\ndef testFoo()\n  set str to \"foo\"\n  foo str\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Conversion Handler - JavaScript\nDESCRIPTION: Shows how to register a new conversion function in hyperscript by assigning to the _hyperscript.config.conversions object. The function transforms a value and returns a custom string prefixed with 'I converted:'. This allows any value to be converted via a user-defined handler named 'MyConversion'. Requires hyperscript to be loaded and the _hyperscript global object to be available in the scope. The function expects one parameter (the value to convert) and outputs a string.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/as.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n_hyperscript.config.conversions[\"MyConversion\"] = function (val) {\n  return \"I converted: \" + val;\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Examples of call and get Commands\nDESCRIPTION: Practical examples showing how to use the call command to execute JavaScript functions and the get command to handle user input with prompt().\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/call.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click call myJavascriptFunction()\">Click Me!</div>\n\n<div\n  _=\"on click get prompt('Enter your age')\n                 put 'You entered: $it' into my.innerHTML\"\n>\n  Click Me!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Pseudo-Commands Syntax\nDESCRIPTION: The EBNF syntax for defining pseudo-commands in hyperscript. It demonstrates how a method can be used as a top-level command, specifying argument lists and expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pseudo-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  <method name>(<arg list>) [(to | on | with | into | from | at)] <expression>\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for Hyperscript `add` Command (EBNF)\nDESCRIPTION: Specifies the Extended Backus-Naur Form (EBNF) grammar for the Hyperscript `add` command. It outlines the required arguments (class reference, attribute reference, or object literal), an optional target element expression, and an optional conditional `where` clause.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/add.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nadd <class-ref+ or attribute-ref or object-literal> [to <target-expression>] [where <expr>]\n```\n\n----------------------------------------\n\nTITLE: String Literals in Hyperscript\nDESCRIPTION: Shows examples of string literals in _hyperscript using both single and double quotes.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_27\n\nLANGUAGE: hyperscript\nCODE:\n```\n\"a string\", 'another string'\n```\n\n----------------------------------------\n\nTITLE: Debounced Input – hyperscript – hyperscript/HTML\nDESCRIPTION: Accomplishes a trailing debounce on input keyup with inline hyperscript, directly updating a target div, without external libraries or JS code. Dependencies: hyperscript. Input: user typing; Output: delayed update.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<input _=\\\"on keyup debounced at 300ms\\n            put my.value into #debounce-target-3\\\"/>\\n<div id=\\\"debounce-target-3\\\"></div>\n```\n\n----------------------------------------\n\nTITLE: Nested If Statement Example in hyperscript\nDESCRIPTION: This hyperscript code demonstrates a nested if statement within an 'else' block, illustrating that a new 'if' on a different line does not bind to the 'else'. It evaluates conditions and logs 'foo' or 'bar' based on logical evaluations. There are no additional dependencies required, and expected output is based on the evaluation of conditions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/if.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscriptr\nCODE:\n```\n...\nelse\n  if false   -- does not bind to the else on the previous line as an \"else if\"\n    log 'foo'\n  end\n  log 'bar'\nend\n```\n\n----------------------------------------\n\nTITLE: Cookie Access in Hyperscript\nDESCRIPTION: Shows how to access browser cookies using the 'cookies' symbol in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_17\n\nLANGUAGE: hyperscript\nCODE:\n```\ncookies['My-Cookie']\n```\n\n----------------------------------------\n\nTITLE: Using the Increment Command in _hyperscript\nDESCRIPTION: Demonstrates how to use the increment command in _hyperscript to increase the value of variables. The examples show incrementing a counter variable by a specific value and initializing a new variable to zero before incrementing. Dependencies include the _hyperscript environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/increment.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\nset counter to 5\nincrement counter by 2 -- counter is now 7\n\nincrement newVariable -- newVariable is defaulted to zero, then incremented to 1\n```\n\n----------------------------------------\n\nTITLE: Measuring element position in _hyperscript\nDESCRIPTION: Measures the top position of the button and outputs the value. Shows how to capture positional data for elements.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_70\n\nLANGUAGE: hyperscript\nCODE:\n```\non click measure my top then\n                    put `My top is ${top}` into the next <output/>`\n```\n\n----------------------------------------\n\nTITLE: EBNF Syntax Definition for call Command\nDESCRIPTION: Formal syntax definition showing the structure of the call and get commands in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/call.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ncall <expression>\nget <expression>\n```\n\n----------------------------------------\n\nTITLE: Event Queue Management in Hyperscript\nDESCRIPTION: Explains the options for managing the event queue in Hyperscript, such as `queue all`, `queue first`, and `queue last`.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-03-06-hyperscript-0.0.5-is-released.md#2025-04-22_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Defining Syntax for 'hide' Command in _hyperscript\nDESCRIPTION: EBNF syntax definition for the 'hide' command in _hyperscript. It shows the command structure including optional target, hide-show strategy, and conditional expression.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/hide.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nhide [target] [with <hide-show-strategy>[: <argument>]] [when <expr>]\n```\n\n----------------------------------------\n\nTITLE: Triggering Events with jQuery\nDESCRIPTION: This code snippet demonstrates triggering a custom event 'doIt' using jQuery. When triggered, the event causes the removal of a specific element. It requires the jQuery library to be included in the environment.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\\n$(function(){\\n  $(\"#jquery-trigger-btn\").click(function(){\\n    $(\"#event-target-2\").trigger(\"doIt\");\\n  });\\n  $(\"#event-target-2\").on('doIt', function(){\\n    $(this).remove();\\n  });\\n});\\n</script>\\n<button id=\"jquery-trigger-btn\">\\n  Trigger Event\\n</button>\\n<div id=\"event-target-2\">\\n  Event Target\\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\\n$(function(){\\n  $(\"#triggerBtn\").click(function(){\\n    $(\"#event-target-2\").trigger(\"doIt\");\\n  });\\n  $(\"#event-target-2\").on('doIt', function(){\\n    $(this).remove();\\n  });\\n});\\n</script>\\n<button id=\"triggerBtn\">\\n  Trigger Event\\n</button>\\n\\n<div id=\"event-target-2\">\\n  Event Target\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Eleventy Server for _hyperscript Website\nDESCRIPTION: Commands to install dependencies and start the Eleventy development server. Requires Node.js version 15. The website will be accessible at localhost:8081 after successful startup.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpx eleventy --serve\n```\n\n----------------------------------------\n\nTITLE: Init Block Usage\nDESCRIPTION: Demonstrates how to use an init block to run initialization logic when an element loads.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"init transition my opacity to 100% over 3 seconds\">\n    Fade Me In\n</div>\n```\n\n----------------------------------------\n\nTITLE: Array Literal in Hyperscript\nDESCRIPTION: Shows how to define an array literal in _hyperscript using JavaScript-like syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_21\n\nLANGUAGE: hyperscript\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining an Increment Function\nDESCRIPTION: Definition of a custom 'increment()' function in hyperscript. This showcases how functions with the same name as a command cannot be used as pseudo-commands, causing parse errors.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pseudo-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: text/hyperscript\nCODE:\n```\ndef increment(i, j)\n  return (i as int) + (j as int)\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring ID Reference Expression Syntax in Hyperscript (EBNF)\nDESCRIPTION: This snippet defines the EBNF syntax for referencing a DOM element by its id property in Hyperscript expressions. It specifies the way to write an id reference (using # followed by the id value) to obtain an element node. This syntactic definition is essential for parsing and validating Hyperscript code that accesses elements in the DOM by id.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/id-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n#<id value>\n```\n\n----------------------------------------\n\nTITLE: Defining Tell Command Syntax in EBNF\nDESCRIPTION: Specifies the syntax for the 'tell' command using Extended Backus-Naur Form (EBNF). It shows that 'tell' is followed by an expression and a block of statements, ending with 'end'.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/tell.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ntell <expression>\n  <statements>\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Fetch Result with Hyperscript\nDESCRIPTION: This snippet shows the text that is displayed when a fetch operation is completed using Hyperscript. It demonstrates how Hyperscript can be used to update page content dynamically.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/clickedMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou clicked! (this message brought to you by `fetch`)\n```\n\n----------------------------------------\n\nTITLE: Default Parameter Initialization in Hyperscript\nDESCRIPTION: This code snippet shows how to set a default value for a parameter in a hyperscript behavior using an init block. This ensures that behavior can function even when parameters are not provided.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  behavior Removable(removeButton)\n    init\n      if no removeButton set the removeButton to me\n    end\n\n    on click from removeButton\n      remove me\n    end\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: Boolean Literals in Hyperscript\nDESCRIPTION: Demonstrates the use of boolean literals in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_22\n\nLANGUAGE: hyperscript\nCODE:\n```\ntrue false\n```\n\n----------------------------------------\n\nTITLE: Return Command Usage Example in _hyperscript\nDESCRIPTION: Example showing how to use the return command within a _hyperscript function definition to return a numeric value.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/return.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\">\n  -- return the answer\n  def theAnswer()\n    return 42\n  end\n</script>\n```\n\n----------------------------------------\n\nTITLE: String Event Name in Hyperscript On Command - Hyperscript\nDESCRIPTION: Illustrates the use of string literals as event names in the 'on' command, allowing for the inclusion of characters like dashes in event names.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_6\n\nLANGUAGE: hyperscript\nCODE:\n```\non \"somelibrary:before-init-something\"\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for 'append' Command in _hyperscript using EBNF\nDESCRIPTION: Specifies the Extended Backus-Naur Form (EBNF) syntax for the 'append' command in _hyperscript. It shows the command structure and possible target types.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/append.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nappend <string> [to <string> | <array> | <HTML Element>]\n```\n\n----------------------------------------\n\nTITLE: Toggling a Class on Element – jQuery – JavaScript/HTML\nDESCRIPTION: Binds a button click (via jQuery) to toggling a CSS class on another element, referencing elements by IDs. Needs external CSS and jQuery loaded. Input: button press. Output: toggles styling class on div.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  $(\\\"#toggleBtn\\\").click(function(){\\n    $(\\\"#toggle-target-2\\\").toggleClass(\\\"red-border\\\");\\n  });\\n});\\n</script>\\n<button id=\\\"toggleBtn\\\">\\n  Toggle Class\\n</button>\\n<div id=\\\"toggle-target-2\\\">\\n  Toggle Target\\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n$(function(){\\n  $(\\\"#toggleBtn\\\").click(function(){\\n    $(\\\"#toggle-target-2\\\").toggleClass(\\\"red-border\\\");\\n  });\\n});\\n</script>\\n\\n<button id=\\\"toggleBtn\\\">\\n  Toggle Class\\n</button>\\n\\n<div id=\\\"toggle-target-2\\\">\\n  Toggle Target\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Showing Elements with jQuery\nDESCRIPTION: This code uses jQuery's .show() method to make a hidden element visible when a button is clicked, demonstrating simple DOM manipulation with jQuery.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\\n$(function(){\\n  $(\"#showBtn\").click(function(){\\n    $(\"#show-target-2\").show();\\n  });\\n});\\n</script>\\n<button id=\"showBtn\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-2\">\\n  Hidden Element\\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\\n$(function(){\\n  $(\"#showBtn\").click(function(){\\n    $(\"#show-target-2\").show();\\n  });\\n});\\n</script>\\n<button id=\"showBtn\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-2\">\\n  Hidden Element\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating List of Announcements with Liquid in HTML\nDESCRIPTION: This code snippet uses Liquid templating to generate an unordered list of announcements. It iterates through a collection of posts, displaying the date and title of each post as a link.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/talk.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul role=\"list\" class=\"list-of-links\"> \n{%- for post in collections.post reversed -%}\n  <li><p><time>{{ post.date | date: \"%Y-%m-%d\"}}</time>&emsp;<a href=\"{{ post.url }}\">{{ post.data.title }} </a></li>\n{%- endfor -%}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Passing a Raw Promise with the 'async' Prefix - Hyperscript in HTML\nDESCRIPTION: This snippet demonstrates bypassing Hyperscript's default Promise resolution by using the 'async' prefix, allowing direct passing of a Promise to a handler. When the button is clicked, the promise from 'waitThenReturn10()' is passed directly to 'handleAPromise' without being awaited by Hyperscript. Requires Hyperscript environment, and that 'handleAPromise' is defined elsewhere. Input is a click event; output is determined by 'handleAPromise'.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click call handleAPromise(async waitThenReturn10())\">\\n  Click Me...\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Number Literals in Hyperscript\nDESCRIPTION: Shows examples of number literals in _hyperscript, including integers and decimals.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_25\n\nLANGUAGE: hyperscript\nCODE:\n```\n1  3.14\n```\n\n----------------------------------------\n\nTITLE: Toggle Command EBNF Syntax Definition\nDESCRIPTION: Formal EBNF syntax definition for the toggle command, showing the structure for toggling classes, attributes, and visibility properties with optional timing and targeting expressions.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ntoggle ({<class-ref>} | <attribute-ref> | between <class-ref> and <class-ref>)\n [on <expression>]\n  [(for <time expression>) |\n   (until <event name> [from <expression>]]`\n\ntoggle [the | my] ('*opacity' | '*visibility' | '*display')\n [of <expression>]\n  [(for <time expression>) |\n   (until <event name> [from <expression>]]`\n```\n\n----------------------------------------\n\nTITLE: Using Inline JavaScript in Hyperscript\nDESCRIPTION: Examples of using the js keyword to write inline JavaScript within hyperscript code, including parameter passing and return values.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_78\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"init js alert('Hello from JavaScript!') end\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click js return 'Success!' end then put it into my.innerHTML\">\n Click me.\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click set foo to 1 js(foo) alert('Adding 1 to foo: '+(foo+1)) end\">\n Click me.\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Possessive Expressions in EBNF\nDESCRIPTION: The snippet demonstrates the syntax for possessive expressions in _hyperscript using EBNF notation. These expressions are used to refer to properties or attributes of elements, providing an alternative to the dot operator.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/possessive.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n['my' | 'its' | <expressions>'s] <property>\n['my' | 'its' | <expressions>'s] attribute <stringLike>\n```\n\n----------------------------------------\n\nTITLE: Toggling a Class on Element – Vanilla JS – JavaScript/HTML/CSS\nDESCRIPTION: Demonstrates toggling a CSS class on a div using inline onclick attribute, directly calling DOM API. Requires pre-defined CSS class and unique IDs; implementation is not cleanly separated. Input: button click. Output: toggled border on target.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.red-border {\\n  border: 5px solid red;\\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- This imaginary person tried to get a _hyperscript-like\\n     experience, and relied on DOM clobbering. Shame on them... -->\\n<button onclick=\\\"toggleTarget1.classList.toggle('red-border')\\\">\\n  Toggle Class\\n</button>\\n<div id=\\\"toggleTarget1\\\">\\n  Toggle Target\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Negative Number Parsing in Hyperscript\nDESCRIPTION: This snippet shows the improved parsing of negative numbers in expressions, specifically for CSS-like values.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2025-02-01-hyperscript-0.9.14-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\n-10px\n```\n\n----------------------------------------\n\nTITLE: Example Output for `pick matches` Iteration in _hyperscript\nDESCRIPTION: Shows the expected console output generated by the preceding `pick matches` example. It illustrates how each match (indexed `0` and `1`) and its captured groups are logged during the loop iteration, reflecting the case-insensitive search.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pick.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n0:\nThe quick\nquick\n1:\nthe lazy\nlazy\n```\n\n----------------------------------------\n\nTITLE: Moving Beep Operator to Debug Element Selection\nDESCRIPTION: Shows how to move the beep! operator to debug a different part of the expression. This helps locate where an issue might be occurring in a complex expression.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_88\n\nLANGUAGE: hyperscript\nCODE:\n```\nadd .highlighted to beep! <p/> in <div.hilight/>\n```\n\n----------------------------------------\n\nTITLE: Defining the `beep!` Expression Syntax using EBNF\nDESCRIPTION: This EBNF snippet defines the grammatical structure of the `beep!` expression in _hyperscript. It specifies that the `beep!` keyword must be followed by a valid unary expression.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/beep.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n```ebnf\n  beep! <unary expression>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Time Expressions Syntax - EBNF - ebnf\nDESCRIPTION: This snippet presents the EBNF (Extended Backus-Naur Form) grammar syntax for specifying time values in _hyperscript expressions. It defines valid numeric literals and their possible suffixes, including milliseconds and seconds representations ('ms', 'milliseconds', 's', 'seconds'). No code dependencies are required, but interpretation is specific to _hyperscript's command parser. Input values can be any valid number followed by the listed units; the output is the parsed time in milliseconds, with 's' or 'seconds' values internally multiplied by 1000.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/time-expression.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  <number> ['ms', 'milliseconds', 's', 'seconds']\n```\n\n----------------------------------------\n\nTITLE: Showing Elements with VanillaJS\nDESCRIPTION: A simple demonstration of using VanillaJS to change the display style of an element to 'block' in order to make it visible upon a button click.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/comparison.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<button onclick=\"document.getElementById('show-target-1').style.display = 'block'\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-1\">\\n  Hidden Element\\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<button onclick=\"document.getElementById('show-target-1').style.display = 'block'\">\\n  Show Element\\n</button>\\n<div style=\"display: none\" id=\"show-target-1\">\\n  Hidden Element\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Header and Table of Contents Structure in HTML\nDESCRIPTION: This HTML snippet sets up the header section containing the table of contents (TOC) for the hyperscript documentation. It includes the main title with a subtitle, a 'Skip to content' link for accessibility, and a placeholder `[[toc]]` which is presumably replaced by the actual TOC navigation during page generation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header id=\"toc-wrapper\" aria-labelledby=\"contents-h\">\n<div id=toc>\n\n# _hyperscript <sub-title>documentation</sub-title> {.h2}\n\n[Skip to content](#docs-content){#skip-to-content}\n\n<nav aria-label=\"Table of contents\">\n\n[[toc]]\n\n</nav>\n</div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Loading Behaviors Remotely in Hyperscript\nDESCRIPTION: Provides an example of how to load behaviors from an external source, ensuring they are available before hyperscript is loaded, which is necessary for correct behavior installation.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\" src=\"/behaviors._hs\"></script>\n<script src=\"https://unpkg.com/hyperscript.org\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining an Increment Function Worker in _hyperscript (hyperscript)\nDESCRIPTION: This snippet demonstrates how to declare a worker named 'Incrementer' in _hyperscript. The worker exposes an 'increment' function, which internally utilizes a JavaScript function '_increment' to return the argument incremented by one. No external dependencies are required. The worker encapsulates logic within a 'js' block for JavaScript execution and a 'def' block for defining the exposed API. Input is a number; output is a promise resolving to the incremented value.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/worker.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\nworker Incrementer\n  js\n    function _increment(n) { return n + 1 }\n  end\n  def increment(n) return _increment(n) end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining closest Expression Syntax in EBNF\nDESCRIPTION: Defines the syntax for the closest expression in _hyperscript using EBNF notation. This code snippet documents that closest takes a CSS expression and optionally a to <expression> target for the search. Prerequisite knowledge includes understanding of EBNF grammar and _hyperscript syntax definitions. The expected input is a CSS selector and, optionally, a reference expression; the output is the formal grammar structure, with no runtime behavior.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/closest.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  closest <css expression> [to <expression>]\n```\n\n----------------------------------------\n\nTITLE: break Command Syntax in EBNF\nDESCRIPTION: The syntax definition for the break command in _hyperscript, which is simply the keyword 'break' with no additional parameters.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/break.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nbreak\n```\n\n----------------------------------------\n\nTITLE: Null Value in Hyperscript\nDESCRIPTION: Demonstrates the use of the null value in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_24\n\nLANGUAGE: hyperscript\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Increment Command and Function Usage in HTML\nDESCRIPTION: HTML snippets demonstrating various uses of the 'increment' command and the difference between using the 'increment()' command as a pseudo-command versus with specific syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/pseudo-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment :x then put it into the next <output/>\">\n  call increment :x\n</button>\n<output></output>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment(:x) then put it into the next <output/>\">\n  increment(:x)\n</button>\n<output></output>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment :x by 2 then put it into the next <output/>\">\n  increment :x by 2\n</button>\n<output></output>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click increment(:x) by 2 then put it into the next <output/>\">\n  increment(:x) by 2\n</button>\n<output></output>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click set :x to increment(:x, 2) then put :x into the next <output/>\">\n  set :x to increment(:x, 2)\n</button>\n<output></output>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click call(increment(:x, 2)) then put it into the next <output/>\">\n  call(increment(:x,2))\n</button>\n<output></output>\n```\n\n----------------------------------------\n\nTITLE: Say Hello button event handler in _hyperscript\nDESCRIPTION: Shows an alert with 'hello!' when the button is clicked. This is the target button that gets toggled in the previous example.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_62\n\nLANGUAGE: hyperscript\nCODE:\n```\non click alert('hello!')\n```\n\n----------------------------------------\n\nTITLE: Time Expression in Hyperscript\nDESCRIPTION: Demonstrates how to use time expressions in _hyperscript for specifying durations.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_16\n\nLANGUAGE: hyperscript\nCODE:\n```\n200ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for _hyperscript 'hide' Command\nDESCRIPTION: JavaScript configuration for Tailwind CSS to work with _hyperscript's 'hide' command. It demonstrates how to add necessary classes to the safelist in the Tailwind configuration file.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/hide.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  safelist: [\n    // Add needed classes here\n    'hidden',\n    'invisible',\n    'opactity-0',\n  ]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Documentation Content Area in HTML\nDESCRIPTION: This simple HTML snippet defines the main container `div` where the documentation content resides. It has the ID `docs-content`, making it the target for the 'Skip to content' link.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"docs-content\">\n\n\n## Introduction\n\nHyperscript is a scripting language for doing front end web development.  It is designed to make it very easy to\nrespond to events and do simple DOM manipulation in code that is directly embedded on elements on a web page.\n\nHere is a simple example of some hyperscript:\n\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for the `remove` Command in _hyperscript (EBNF)\nDESCRIPTION: Defines the EBNF (Extended Backus-Naur Form) syntax for the `_hyperscript` `remove` command. It shows that the command takes an expression representing what to remove (element, class, attribute) and optionally a 'from' clause specifying the target element.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/remove.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nremove <expression> [from <expression>]\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Blog Post\nDESCRIPTION: YAML configuration block defining the page layout, tags, title and publication date for a blog post about hyperscript 0.9.6 release.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-07-12-hyperscript-0.9.6-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: layout.njk\ntags: post\ntitle: hyperscript 0.9.6 has been released!\ndate: 2022-07-12\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Default Command Syntax in EBNF\nDESCRIPTION: Specifies the syntax for the 'default' command in Extended Backus-Naur Form (EBNF). The command allows setting a default value for a target variable or property.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/default.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ndefault <target> to <expr>\n```\n\n----------------------------------------\n\nTITLE: Adding Class to Closest Section with _hyperscript in HTML\nDESCRIPTION: Demonstrates attaching a click handler using _hyperscript that adds the .clicked class to the closest ancestor <section/> element. No external dependencies are required except the _hyperscript runtime. The div element listens for the click event and traverses up the DOM to find the nearest section, modifying its class list. Limitations include correct parent structure in the DOM for effective ancestor selection.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/closest.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click add .clicked to the closest <section/>\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Documentation Page Elements in CSS\nDESCRIPTION: This CSS code defines styles for the hyperscript documentation page. It sets a root variable for line length, styles the table of contents (`#toc`, `#toc-wrapper`), applies responsive design using a media query for wider screens (`@media (min-width: 120ch)`), styles the main content area (`#docs-content`), and hides the 'skip-to-content' link on wider screens. It also removes the outline when the content area is targeted.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n:root {\n  --line-length: 100ch;\n}\n#toc sub-title {\n  display: inline-block;\n}\n#toc li {\n  margin: calc(.5*var(--gap));\n}\n@media (min-width: 120ch) {\n  #toc-wrapper {\n    font-size: .9em;\n    float: left;\n    position: sticky;\n    top: 0;\n    border: none;\n    margin: 0;\n  }\n\n  #toc {\n    overflow: auto;\n    max-height: 100vh;\n    margin-inline-end: var(--gap);\n    margin-inline-start: calc(2*var(--gap) - var(--gutter-width));\n  }\n\n  #toc li {\n    margin: calc(.25*var(--gap));\n  }\n  #docs-content {\n    display: flow-root;\n    max-width: calc(100vw - 24ch - 3 * var(--gap));\n  }\n  #skip-to-content {\n    display: none;\n  }\n}\n\n#docs-content:target {\n  outline: none;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining _hyperscript Function Syntax (EBNF)\nDESCRIPTION: Provides the Extended Backus-Naur Form (EBNF) grammar for the `def` statement in _hyperscript. It outlines the structure, including the function name, parameter list, command body, and optional `catch` and `finally` blocks.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/def.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ndef <function name>(<parameter list>)\n  {<command>}\n[catch <identifier>\n  {<command>}]\n[finally\n  {<command>}]\nend\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Template Structure for hyperscript Cookbook\nDESCRIPTION: A Nunjucks template that renders a collection of hyperscript cookbook entries. It loops through items in 'collections.cookbook' and displays each entry's title and content, with automatically generated anchor links based on file slugs.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/cookbook.md#2025-04-22_snippet_0\n\nLANGUAGE: njk\nCODE:\n```\n{% for dish in collections.cookbook %}\n\n# {{ dish.data.title }} {\\#{{dish.fileSlug}}}\n\n{{ dish.templateContent | safe }}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Statements with hyperscript\nDESCRIPTION: This EBONF syntax specifies the structure of an 'if' command in hyperscript, involving conditional checks and command execution based on logical outcomes. Prerequisites include understanding of 'conditional' expressions and 'command-list' executions. The expression evaluates a conditional and selectively executes commands with optional 'else' blocks.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/if.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nif <conditional> [then] <command-list> [(else | otherwise) <command-list>] end`\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for the 'of' Expression in _hyperscript\nDESCRIPTION: Illustrates the formal syntax of the 'of' expression used to alter standard property access for clearer coding practices.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/of.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  <expression> of <expression>\n```\n\n----------------------------------------\n\nTITLE: Attribute Reference Syntax in Hyperscript\nDESCRIPTION: Shows how to use attribute references in _hyperscript to target elements with specific attribute values.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_3\n\nLANGUAGE: hyperscript\nCODE:\n```\n[selected=true]\n```\n\n----------------------------------------\n\nTITLE: Loading External Hyperscript Files - HTML\nDESCRIPTION: This snippet illustrates how to load external Hyperscript files using the 'src' attribute in a script tag with type 'text/hyperscript'.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2021-06-15-hyperscript-0.8-is-released.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/hyperscript\" src=\"draggable._hs\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Decrement Command Syntax in EBNF\nDESCRIPTION: The formal syntax definition of the decrement command in Extended Backus-Naur Form (EBNF). It shows that the command requires a target and has an optional 'by' modifier followed by a number.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/decrement.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ndecrement <target> [by <number>]\n```\n\n----------------------------------------\n\nTITLE: Return Command EBNF Syntax Definition\nDESCRIPTION: Formal EBNF syntax definition for the return command in _hyperscript, showing both the expression return and exit forms.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/return.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nreturn <expression>\\nexit\n```\n\n----------------------------------------\n\nTITLE: Defining the 'you' Reference Syntax in EBNF - EBNF\nDESCRIPTION: This EBNF code snippet defines the syntax for the 'you' reference within the _hyperscript language grammar. The 'you' keyword serves as a reference to the current node being acted on in tell commands. It must appear as a stand-alone token within valid _hyperscript code.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/you.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\n  you\n```\n\n----------------------------------------\n\nTITLE: Debugging _hyperscript Expressions with `beep!`\nDESCRIPTION: These examples demonstrate how to use the `beep!` expression within _hyperscript commands to log intermediate values to the console for debugging. The first example logs the result of the `<div.highlight/>` query, while the second logs the result of finding `<p/>` within `<div.highlight/>`. `beep!` acts as an identity function, returning the value it logs without affecting the command's outcome.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/beep.md#2025-04-22_snippet_1\n\nLANGUAGE: hyperscript\nCODE:\n```\n```hyperscript\nadd .highlighted to the <p/> in beep! <div.highlight/> -- logs the result of <div.highlight/>\nadd .highlighted to beep! the <p/> in <div.highlight/> -- logs the result of the <p/> in <div.highlight/>\n```\n```\n\n----------------------------------------\n\nTITLE: Closest Expression Examples in Hyperscript\nDESCRIPTION: Demonstrates various uses of the closest expression to find elements and attribute values in the DOM hierarchy.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click log the closest <section/>\">\n  ...\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<body data-example=\"An example attribute\">\n    <div _=\"on click log the closest @data-example\">\n      ...\n    </div>\n</body>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click log the closest parent <div/>\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Possessive Expressions and DOM Attribute Access - Hyperscript in HTML and Hyperscript\nDESCRIPTION: This snippet shows the use of possessive expressions ('the window's location', 'window.location') and DOM attribute access ('its @href') within both Hyperscript event handlers and logic blocks. It demonstrates property and attribute retrieval on DOM and global objects in response to click events. Requirements are a Hyperscript-enabled environment and the relevant DOM/context objects. Outputs are log messages or updated content. Limitations: property must exist on the object.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put the window's location into me\">\\n  Click Me\\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div _=\"on click put window.location into me\">\\n  Click Me\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Expressions - Hyperscript (Text)\nDESCRIPTION: This snippet demonstrates Hyperscript's use of the 'as' expression for explicit type conversion between string, integer, float, number, and date types. Inputs are literals or expressions, outputs are values in converted types. Hyperscript runtime is required. Limitations: only supported conversions are allowed.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n  10 as String\\n  \"10\" as Int\\n  \"10.3\" as Float\n```\n\n----------------------------------------\n\nTITLE: Object Literal in Hyperscript\nDESCRIPTION: Demonstrates how to define an object literal in _hyperscript using JavaScript-like syntax.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/reference.md#2025-04-22_snippet_26\n\nLANGUAGE: hyperscript\nCODE:\n```\n{foo:\"bar\", doh:42}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers using fetch:beforeRequest Event (JavaScript)\nDESCRIPTION: Shows the equivalent JavaScript implementation for handling the `fetch:beforeRequest` event. An event listener is added to the document body, which modifies the `event.detail.headers` object to set the `X-AuthToken` header before the fetch request is sent.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/fetch.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener('fetch:beforeRequest', (event) => {\n    event.detail.headers['X-AuthToken'] = getAuthToken();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Parameterized Behavior in HTML\nDESCRIPTION: Illustrates how to install a parameterized hyperscript behavior in an HTML element with a specific argument, enhancing the functionality based on the parameter.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/features/behavior.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"banner\" _=\"install Removable(removeButton: #close-banner)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Transition Command Syntax Change in hyperscript 0.9.4\nDESCRIPTION: Demonstrates the syntax change for the transition command where string values now need to be quoted. This is a breaking change in hyperscript 0.9.4.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/posts/2022-1-14-hyperscript-0.9.4-is-released.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\ntransition my color to red   -- Old syntax\ntransition my color to \"red\" -- New syntax\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Access in HTML with _hyperscript\nDESCRIPTION: Demonstrates the use of _hyperscript to handle button click events, using a standard method to invoke the reload function via window property.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/expressions/of.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button _=\"on click call window.location.reload()\">\n  Reload the Location\n</button>\n```\n\n----------------------------------------\n\nTITLE: Proposed Repeat Command Improvements in Hyperscript\nDESCRIPTION: Proposed syntax enhancement for the repeat command in hyperscript that automatically uses 'it' convention for the counter variable.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/TODO.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n// By default, counter uses \"it\" convention\nrepeat from 1 to 10\n    put it in myVar\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing 'go' Command with Offset in Hyperscript\nDESCRIPTION: Example of using the 'go' command with pixel offset in hyperscript. This allows navigation to a specific position with additional offset measurement.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/TODO.md#2025-04-22_snippet_0\n\nLANGUAGE: hyperscript\nCODE:\n```\ngo to the top of the window + 10px\n```\n\n----------------------------------------\n\nTITLE: Proposed Event Integration for Call-like Behavior in Hyperscript\nDESCRIPTION: Proposed syntax for implementing call-like behavior using events in hyperscript, allowing for sending events and capturing results.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/TODO.md#2025-04-22_snippet_1\n\nLANGUAGE: applescript\nCODE:\n```\nsend foo to #bar\nput the result into me\n```\n\n----------------------------------------\n\nTITLE: Continue Command Syntax in _hyperscript\nDESCRIPTION: The formal EBNF syntax definition for the continue command in _hyperscript.\nSOURCE: https://github.com/bigskysoftware/_hyperscript/blob/master/www/commands/continue.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ncontinue\n```"
  }
]