[
  {
    "owner": "liiight",
    "repo": "notifiers",
    "content": "TITLE: Sending a Notification with notify Method (Python)\nDESCRIPTION: Demonstrates how to send a notification using the notify method of a notifier object.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> pushover.notify(apikey='FOO', user='BAR', message='BAZ')\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via pip\nDESCRIPTION: Command to install the Notifiers package using pip package manager.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install notifiers\n```\n\n----------------------------------------\n\nTITLE: Complete REST API Notification Provider Implementation\nDESCRIPTION: Full working example of a custom provider that sends notifications via a REST API. Includes schema definition, error handling, and proper Response object creation.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom notifiers.core import Provider, Response\nfrom notifiers.utils.schema import one_of\nfrom notifiers.exceptions import NotifierException\n\nclass RestAPIProvider(Provider):\n    name = \"rest_api\"\n    site_url = \"https://api.example.com\"\n    \n    _required = {\"required\": [\"message\", \"api_key\", \"endpoint\"]}\n    _schema = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"message\": {\"type\": \"string\"},\n            \"api_key\": {\"type\": \"string\"},\n            \"endpoint\": {\"type\": \"string\"},\n            \"method\": one_of([\"GET\", \"POST\"], default=\"POST\"),\n            \"timeout\": {\"type\": \"integer\", \"minimum\": 1, \"default\": 10}\n        }\n    }\n    \n    def _notify(self, data: dict) -> Response:\n        try:\n            headers = {\n                \"Authorization\": f\"Bearer {data['api_key']}\",\n                \"Content-Type\": \"application/json\"\n            }\n            \n            payload = {\n                \"text\": data[\"message\"]\n            }\n            \n            response = requests.request(\n                method=data[\"method\"],\n                url=f\"{self.site_url}/{data['endpoint']}\",\n                headers=headers,\n                json=payload,\n                timeout=data.get(\"timeout\", 10)\n            )\n            \n            response.raise_for_status()\n            \n            return Response(\n                status=\"Success\",\n                provider=self.name,\n                data=response.json()\n            )\n            \n        except requests.exceptions.RequestException as e:\n            raise NotifierException(\n                provider=self.name,\n                message=f\"API request failed: {str(e)}\"\n            )\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with get_notifier in Python\nDESCRIPTION: Example of using the get_notifier function to create a Pushover notifier, check required parameters, and send a notification.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> p = get_notifier('pushover')\n>>> p.required\n{'required': ['user', 'message', 'token']}\n>>> p.notify(user='foo', token='bar', message='test')\n<NotificationResponse,provider=Pushover,status=Success>\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via pip\nDESCRIPTION: Command to install the Notifiers package using pip package manager\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install notifiers\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Errors (Python)\nDESCRIPTION: Demonstrates how errors are raised when required arguments are missing in a notification.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import notifiers\n>>> pushover = notifiers.get_notifier('pushover')\n>>> pushover.notify(message='FOO')\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\n  File \"/Users/liiight/PycharmProjects/notifiers/notifiers/core.py\", line 215, in notify\n    self._validate_data(kwargs, validator)\n  File \"/Users/liiight/PycharmProjects/notifiers/notifiers/core.py\", line 193, in _validate_data\n    raise BadArguments(validation_error=msg, provider=self.name, data=data)\nnotifiers.exceptions.BadArguments: <NotificationError: Error with sent data: 'user' is a required property>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notifier Provider (Python)\nDESCRIPTION: Demonstrates how to create a custom notification provider by inheriting from the Provider class and implementing required methods and schema.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom notifiers.core import Provider, Response\nfrom notifiers.utils.schema import one_of\n\nclass MyCustomProvider(Provider):\n    name = \"my_provider\"\n    site_url = \"https://my-provider.com\"\n    \n    # Define your provider's schema\n    _required = {\"required\": [\"message\", \"api_key\"]}\n    _schema = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"message\": {\"type\": \"string\"},\n            \"api_key\": {\"type\": \"string\"},\n            \"msgtype\": one_of([\"text\", \"html\"], default=\"text\")\n        },\n        \"additionalProperties\": False\n    }\n    \n    def _notify(self, data: dict) -> Response:\n        # Implement your notification logic here\n```\n\n----------------------------------------\n\nTITLE: Integrating Notifiers with Python Logging\nDESCRIPTION: Example showing how to use Notifiers as a logging handler with the standard Python logging library to send error notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> from notifiers.logging import NotificationHandler\n\n>>> log = logging.getLogger(__name__)\n\n>>> defaults = {\n        'token': 'foo',\n        'user': 'bar'\n    }\n>>> hdlr = NotificationHandler('pushover', defaults=defaults)\n>>> hdlr.setLevel(logging.ERROR)\n\n>>> log.addHandler(hdlr)\n>>> log.error('And just like that, you get notified about all your errors!')\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing a Notifier Directly (Python)\nDESCRIPTION: Shows how to import and initialize a specific notifier provider directly.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers.providers.pushover import Pushover\n>>> pushover = Pushover()\n```\n\n----------------------------------------\n\nTITLE: Sending a Notification with Global notify Function (Python)\nDESCRIPTION: Shows how to send a notification using the global notify function without initializing a provider object.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import notify\n>>> notify('pushover', apikey='FOO', user='BAR', message='BAZ')\n```\n\n----------------------------------------\n\nTITLE: Listing Available Notification Providers\nDESCRIPTION: Shows how to display all available notification providers in the Notifiers library using the 'providers' command. This returns a list of all supported notification services.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers providers\npushover, simplepush, slack, email, gmail, telegram, gitter, pushbullet, join, zulip, victorops\n```\n\n----------------------------------------\n\nTITLE: Basic Notifiers Usage in Python\nDESCRIPTION: Example showing how to initialize and use a Pushover notifier, including checking required parameters and sending a notification\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> pushover = get_notifier('pushover')\n>>> pushover.required\n{'required': ['user', 'message', 'token']}\n>>> pushover.notify(user='foo', token='bar', message='test')\n<NotificationResponse,provider=Pushover,status=Success>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Notifier with get_notifier (Python)\nDESCRIPTION: Demonstrates how to initialize a notifier using the get_notifier helper function.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import notifiers\n>>> pushover = notifiers.get_notifier('pushover')\n```\n\n----------------------------------------\n\nTITLE: Accessing Provider Resources in Notifiers\nDESCRIPTION: Example demonstrating how to access and use provider resources like the Telegram updates API. Shows resource schema validation and error handling.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> telegram.resources\n['updates']\n\n>>> telegram.updates\n<ProviderResource,provider=telegram,resource=updates>\n>>> telegram.updates.schema\n{'type': 'object', 'properties': {'token': {'type': 'string', 'title': 'Bot token'}}, 'additionalProperties': False, 'required': ['token']}\n\n>>> telegram.updates()\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 278, in __call__\n    data = self._process_data(**kwargs)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 204, in _process_data\n    self._validate_data(data, validator)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 175, in _validate_data\n    raise BadArguments(validation_error=msg, provider=self.name, data=data)\nnotifiers.exceptions.BadArguments: Error with sent data: 'token' is a required property\n\n>>> telegram.updates(token='foo')\n[{'update_id': REDACTED, 'message': {'message_id': REDACTED, 'from': {'id': REDACTED, 'is_bot': False, 'first_name': 'REDACTED', 'last_name': 'REDACTED', 'username': 'REDACTED', 'language_code': 'en-US'}, 'chat': {'id': REDACTED, 'first_name': 'REDACTED', 'last_name': 'REDACTED', 'username': 'REDACTED', 'type': 'private'}, 'date': 1516178366, 'text': 'Ccc'}}]\n```\n\n----------------------------------------\n\nTITLE: Integrating Notifiers with Python Logging\nDESCRIPTION: Example showing how to integrate Notifiers with Python's standard logging module as a notification handler\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> from notifiers.logging import NotificationHandler\n>>> log = logging.getLogger(__name__)\n>>> defaults = {\n...     'token': 'foo',\n...     'user': 'bar'\n... }\n>>> hdlr = NotificationHandler('pushover', defaults=defaults)\n>>> hdlr.setLevel(logging.ERROR)\n>>> log.addHandler(hdlr)\n>>> log.error('And just like that, you get notified about all your errors!')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Gmail Notifier in Python\nDESCRIPTION: This snippet demonstrates how to import the Gmail notifier from the notifiers library, view its default settings, and send a simple email. It uses the 'get_notifier' function to initialize the Gmail notifier and shows its default configuration before sending a notification.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/gmail.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> gmail = get_notifier('gmail')\n>>> gmail.defaults\n{'subject': \"New email from 'notifiers'!\", 'from': '<USERNAME@HOST>', 'host': 'smtp.gmail.com', 'port': 587, 'tls': True, 'ssl': False, 'html': False}\n\n>>> gmail.notify(to='email@addrees.foo', message='hi!')\n```\n\n----------------------------------------\n\nTITLE: Handling Reserved Words using Dictionary Unpacking in Python\nDESCRIPTION: Demonstrates how to handle Python reserved words (like 'from') in notification data by creating a dictionary and unpacking it into the notify method call.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/about.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...  'to': 'foo@bar.com',\n...  'from': 'bar@foo.com'\n... }\n>>> provider.notify(**data)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending Basic Slack Webhook Notification - Python\nDESCRIPTION: Demonstrates how to send a basic Slack webhook notification using the notifiers library. Shows the minimal required parameters of message and webhook_url.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/slack.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> slack = get_notifier('slack')\n>>> slack.notify(message='Hi!', webhook_url='https://url.to/webhook')\n```\n\n----------------------------------------\n\nTITLE: Using notify Function for Direct Notifications\nDESCRIPTION: Simplified example using the notify function to send a notification directly without creating a notifier instance first.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import notify\n>>> notify('pushover', user='foo', token='bar', message='test')\n<NotificationResponse,provider=Pushover,status=Success>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Notifier Provider in Python\nDESCRIPTION: Code example showing how to use a custom provider after installation. The example demonstrates how to retrieve the provider using get_notifier() and send a notification with required parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> notifier = get_notifier('my_provider')\n>>> notifier.notify(\n...     message='Hello from my custom provider!',\n...     api_key='your-api-key'\n... )\n```\n\n----------------------------------------\n\nTITLE: Checking Response Status and Errors Programmatically\nDESCRIPTION: Demonstrates how to check response status with the ok property and retrieve error messages when a notification fails.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> rsp = pushover.notify(message='FOO', token='BAD TOKEN', user='USER')\n>>> rsp.ok\nFalse\n>>> rsp.errors\n['application token is invalid']\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending Basic Pushover Notification in Python\nDESCRIPTION: Demonstrates how to create a Pushover notifier instance and send a basic notification with required parameters: message, user, and token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushover.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> pushover = get_notifier('pushover')\n>>> pushover.notify(message='Hi!', user='USER', token='TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Join Notification in Python\nDESCRIPTION: Demonstrates how to initialize the Join notifier and send a simple notification message. Requires a Join API key and a message to send.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/join.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> join = get_notifier('join')\n>>> join.notify(apikey='SECRET', message='Hi!')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Email Notifier in Python\nDESCRIPTION: Demonstrates how to initialize the email notifier, check required fields, and send a basic email message.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/email.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> email = get_notifier('email')\n>>> email.required\n{'required': ['message', 'to']}\n\n>>> email.notify(to='email@addrees.foo', message='hi!')\n```\n\n----------------------------------------\n\nTITLE: Using raise_on_errors Method to Handle Notification Errors\nDESCRIPTION: Demonstrates how to manually raise exceptions from notification responses using the raise_on_errors() method.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> rsp = pushover.notify(message='FOO', token='BAD TOKEN', user='USER')\n>>> rsp.raise_on_errors()\nTraceback (most recent call last):\n  File \"/Users/orcarmi/PycharmProjects/notifiers/poc.py\", line 49, in <module>\n    raise_on_errors=True)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 276, in notify\n    rsp.raise_on_errors()\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 48, in raise_on_errors\n    raise NotificationError(provider=self.provider, data=self.data, errors=self.errors, response=self.response)\nnotifiers.exceptions.NotificationError: Notification errors: application token is invalid\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Gitter Notifier in Python\nDESCRIPTION: This snippet shows how to initialize the Gitter notifier, check its required parameters, and send a notification. It requires the 'notifiers' library and a Gitter token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/gitter.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> gitter = get_notifier('gitter')\n>>> gitter.required\n{'required': ['message', 'token', 'room_id']}\n\n>>> gitter.notify(message='Hi!', token='SECRET_TOKEN', room_id=1234)\n```\n\n----------------------------------------\n\nTITLE: Sending VictorOps REST Notification in Python\nDESCRIPTION: A minimal example of how to send a VictorOps REST integration notification using the notifiers library. It demonstrates initializing the notifier and calling the notify method with required parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/victorops.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> victorops = get_notifier('victorops')\n>>> victorops.notify(rest_url='https://alert.victorops.com/integrations/generic/20104876/alert/f7dc2eeb-ms9k-43b8-kd89-0f00000f4ec2/$routing_key',\n...                  message_type='CRITICAL',\n...                  entity_id='foo testing',\n...                  entity_display_name=\"bla test title text\",\n...                  message=\"bla message description\")\n```\n\n----------------------------------------\n\nTITLE: Using Notifiers CLI\nDESCRIPTION: Example of sending a notification using the Notifiers command-line interface\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers pushover notify --user foo --token baz \"This is so easy!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Notify Notifier in Python\nDESCRIPTION: This snippet demonstrates how to import the Notify notifier, check its required parameters, and send notifications with various configurations. It shows basic usage with required parameters and an example with an optional token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/notify.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> notify = get_notifier('notify')\n>>> notify.required\n{'required': ['title', 'message', 'base_url']}\n\n>>> notify.notify(title='Hi!', message='my message', base_url='http://localhost:8787')\n# some instances may need a token\n>>> notify.notify(title='Hi!', message='my message', base_url='http://localhost:8787', token=\"send_key\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending Telegram Notification in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Telegram notifier and send a basic notification. It requires the notifiers library, a Telegram bot token, and a chat_id.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/telegram.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> telegram = get_notifier('telegram')\n>>> telegram.notify(message='Hi!', token='TOKEN', chat_id=1234)\n```\n\n----------------------------------------\n\nTITLE: Basic Twilio SMS Notification Example in Python\nDESCRIPTION: A simple example showing how to send an SMS message using the Twilio notifier. This demonstrates importing the notifier, initializing it, and sending a basic notification with required parameters including message content, recipient phone number, account SID, and authentication token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/twilio.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> twilio = get_notifier('twilio')\n>>> twilio.notify(message='Hi!', to='+12345678', account_sid=1234, auth_token='TOKEN')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using iCloud Notifier in Python\nDESCRIPTION: This snippet demonstrates how to initialize the iCloud notifier, view its default settings, and send an email notification. It requires the Notifiers library and valid iCloud credentials.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/icloud.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> icloud = get_notifier('icloud')\n>>> icloud.defaults\n{'subject': \"New email from 'notifiers'!\", 'from': '<USERNAME@HOST>', 'host': 'smtp.mail.me.com', 'port': 587, 'tls': True, 'ssl': False, 'html': True}\n\n>>> icloud.notify(to='email@addrees.foo', message='hi!', username='username@icloud.com', password='my-icloud-app-password', from_='username@icloud.com')\n```\n\n----------------------------------------\n\nTITLE: Sending Pagerduty Notifications with Python\nDESCRIPTION: Example demonstrating how to initialize the Pagerduty notifier and trigger an incident. Shows basic usage with required parameters including message, event action, source, and severity level.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pagerduty.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> pagerduty = get_notifier('pagerduty')\n>>> pagerduty.notify(\n...     message='Oh oh...',\n...     event_action='trigger',\n...     source='prod',\n...     severity='info'\n... )\n```\n\n----------------------------------------\n\nTITLE: Sending Pushbullet Notifications in Python\nDESCRIPTION: This example demonstrates how to initialize the Pushbullet notifier and send a notification with various parameters including message, token, title, type, URL, device identifiers, channel tag, email, and GUID.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushbullet.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> pushbullet = get_notifier('pushbullet')\n>>> pushbullet.notify(\n...     message='Hi!',\n...     token='SECRET',\n...     title='Message title',\n...     type_='note',\n...     url='https://url.in/message',\n...     source_device_iden='FOO',\n...     device_iden='bar',\n...     client_iden='baz',\n...     channel_tag='channel tag',\n...     email='foo@bar.com',\n...     guid='1234abcd',\n... )\n```\n\n----------------------------------------\n\nTITLE: Sending SimplePush Notification in Python\nDESCRIPTION: Demonstrates how to send a basic SimplePush notification using the notifiers library. Requires a SimplePush key and message content.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/simplepush.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> simplepush = get_notifier('simplepush')\n>>> simplepush.notify(message='Hi!', key='KEY')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sending a Basic Mailgun Notification in Python\nDESCRIPTION: Example showing how to import the Mailgun notifier from the notifiers package and send a basic notification email. The example demonstrates the minimum required parameters: recipient email, domain, API key, and message content.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/mailgun.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> mailgun = get_notifiers('mailgun')\n>>> mailgun.notify(to='foo@bar.baz', domain='mydomain', api_key='SECRET', message='Hi!')\n```\n\n----------------------------------------\n\nTITLE: Sending PopcornNotify Notification with Notifiers in Python\nDESCRIPTION: This snippet demonstrates how to use the Notifiers library to send a PopcornNotify notification. It shows the process of getting the PopcornNotify notifier and calling its notify method with the required parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/popcornnotify.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> popcornnotify = get_notifier('popcornnotify')\n>>> popcornnotify.notify(\n...     message='Hi!',\n...     api_key='SECRET',\n...     recipients=[\n...         'foo@bar.com',\n...     ],\n...     subject='Message subject!'\n... )\n```\n\n----------------------------------------\n\nTITLE: Sending Basic StatusPage Notifications in Python\nDESCRIPTION: Example showing how to initialize the StatusPage notifier and send a simple notification. Requires an API key and page ID to authenticate with the StatusPage service.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/statuspage.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> statuspage = get_notifier('statuspage')\n>>> statuspage.notify(message='Hi!', api_key='KEY', page_id='123ABC')\n```\n\n----------------------------------------\n\nTITLE: Sending DingTalk Notifications in Python\nDESCRIPTION: A minimal example showing how to instantiate a DingTalk notifier and send a basic notification message. This snippet demonstrates the core functionality of obtaining the DingTalk notifier and calling its notify method with the required parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/dingtalk.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> dingtalk = get_notifier('dingtalk')\n>>> dingtalk.notify(access_token='token', message='Hi there!')\n```\n\n----------------------------------------\n\nTITLE: Viewing Notifiers CLI Main Help\nDESCRIPTION: Shows the main help interface of the Notifiers CLI, displaying available options and commands. This is the entry point for using the Notifiers library from the command line.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers\nUsage: notifiers [OPTIONS] COMMAND [ARGS]...\n\n  Notifiers CLI operation\n\nOptions:\n --version          Show the version and exit.\n --env-prefix TEXT  Set a custom prefix for env vars usage\n --help             Show this message and exit.\n\n\nCommands:\n  email       Options for 'email'\n  gitter      Options for 'gitter'\n  gmail       Options for 'gmail'\n  join        Options for 'join'\n  providers   Shows all available providers\n  pushbullet  Options for 'pushbullet'\n  pushover    Options for 'pushover'\n  simplepush  Options for 'simplepush'\n  slack       Options for 'slack'\n  telegram    Options for 'telegram'\n  zulip       Options for 'zulip'\n  victorops       Options for 'victorops'\n  notify      Options for 'notify'\n```\n\n----------------------------------------\n\nTITLE: Sending Zulip Notification - Python Example\nDESCRIPTION: Basic example showing how to send a Zulip notification using the notifiers library. Demonstrates initialization of the Zulip notifier and sending a simple message with required parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/zulip.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from notifiers import get_notifier\n>>> zulip = get_notifier('zulip')\n>>> zulip.notify(message='Hi!', to='foo', email='foo@bar.com', api_key='KEY', domain='foobar')\n```\n\n----------------------------------------\n\nTITLE: Viewing Email Notification Options\nDESCRIPTION: Shows the available options for sending email notifications using the notify command. Displays all parameters that can be configured when sending an email notification, such as subject, recipient, SMTP settings, and authentication details.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers email notify --help\nUsage: notifiers email notify [OPTIONS] [MESSAGE]\n\n  Send emails via SMTP\n\nOptions:\n  --subject TEXT      The subject of the email message\n  --to TEXT           One or more email addresses to use. Multiple usages of\n                      this option are allowed\n  --from TEXT         The from address to use in the email\n  --host TEXT         The host of the smtp server\n  --port INTEGER      The port number to use\n  --username TEXT     Username if relevant\n  --password TEXT     Password if relevant\n  --tls / --no-tls    Should tls be used\n  --ssl / --no-ssl    Should ssl be used\n  --html / --no-html  Should the email be parse as an html file\n  --help              Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Using a Custom REST API Notifier in Python\nDESCRIPTION: Example showing how to use the custom REST API notifier implementation. Demonstrates passing the required parameters for sending a notification.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> notifier = get_notifier('rest_api')\n>>> notifier.notify(\n...     message=\"Hello API\",\n...     api_key=\"your-api-key\",\n...     endpoint=\"notifications/send\"\n... )\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider-Specific Help\nDESCRIPTION: Demonstrates how to access help information for a specific provider (in this case, email). Shows available commands for interacting with the provider, including viewing its schema, defaults, and sending notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers email --help\nUsage: notifiers email [OPTIONS] COMMAND [ARGS]...\n\n  Options for 'email'\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  defaults  'email' default values\n  metadata  'email' metadata\n  notify    Send emails via SMTP\n  required  'email' required schema\n  schema    'email' full schema\n```\n\n----------------------------------------\n\nTITLE: Initializing NotificationHandler with Pushover\nDESCRIPTION: Demonstrates how to set up a logging handler that sends notifications via Pushover service. Shows configuration of logger, setting notification defaults, and error level threshold.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/Logger.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> from notifiers.logging import NotificationHandler\n\n>>> log = logging.getLogger(__name__)\n>>> defaults = {\n...    'token': 'foo,\n...    'user': 'bar\n... }\n\n>>> hdlr = NotificationHandler('pushover', defaults=defaults)\n>>> hdlr.setLevel(logging.ERROR)\n\n>>> log.addHandler(hdlr)\n>>> log.error('And just like that, you get notified about all your errors!')\n```\n\n----------------------------------------\n\nTITLE: Using Notifiers from Command Line\nDESCRIPTION: Example of sending a Pushover notification using the Notifiers command line interface.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ notifiers pushover notify --user foo --token baz \"This is so easy!\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Telegram Updates in Python\nDESCRIPTION: This code shows how to access available updates for a Telegram bot using the updates resource. It requires a valid Telegram bot token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/telegram.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> telegram.updates(token=\"SECRET_TOKEN\")\n{'id': '...', 'name': 'Foo/bar', ... }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pushbullet Devices in Python\nDESCRIPTION: This snippet shows how to access the list of available Pushbullet devices using the devices resource, which requires an API token for authentication.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushbullet.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pushbullet.devices(token='SECRET')\n[{'active': True, 'iden': ... }]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Notification Handler\nDESCRIPTION: Shows how to set up a fallback notification service (email) that triggers when the primary notifier (Pushover) fails. Includes configuration of fallback service credentials and connection details.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/Logger.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> fallback_defaults = {\n...     'host': 'http://localhost,\n...     'port': 80,\n...     'username': 'foo',\n...     'password': 'bar\n... }\n\n>>> hdlr = NotificationHandler('pushover', fallback='email', fallback_defaults=fallback_defaults)\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Notifiers\nDESCRIPTION: Shows how to use environment variables to simplify notification commands. By setting provider credentials in environment variables, they don't need to be included in the command itself.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ export NOTIFIERS_PUSHOVER_TOKEN=FOO\n$ export NOTIFIERS_PUSHOVER_USER=BAR\n$ notifiers pushover notify \"wow, this is easy!\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Telegram Updates Resource Help\nDESCRIPTION: Shows the help information for the Telegram 'updates' resource, which helps retrieve chat IDs needed for notifications. Includes options specific to this resource.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers telegram updates --help\nUsage: notifiers telegram updates [OPTIONS]\n\n  Return Telegram bot updates, correlating to the `getUpdates` method.\n  Returns chat IDs needed to notifications\n\nOptions:\n  --token TEXT             Bot token\n  --pretty / --not-pretty  Output a pretty version of the JSON\n  --help                   Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Testing a Custom Notification Provider with Pytest\nDESCRIPTION: Test function example for a custom notification provider, demonstrating how to test successful notifications and validation errors using pytest. Includes test for required arguments.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom notifiers.core import Provider\nfrom notifiers.exceptions import BadArguments\n\ndef test_provider_arguments():\n    provider = MyCustomProvider()\n    data = {\n        \"message\": \"test message\",\n        \"api_key\": \"test_key\"\n    }\n    rsp = provider.notify(**data)\n    assert rsp.status == \"Success\"\n\n    # Test invalid arguments\n    with pytest.raises(BadArguments):\n        provider.notify(message=\"test\")  # Missing api_key\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Resources\nDESCRIPTION: Shows how to list available resource helper commands for a provider. Some providers offer additional resources beyond the standard notification capability.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers telegram resources\nupdates\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Validation for a Custom Notification Provider\nDESCRIPTION: Example showing how to implement schema validation in a custom provider. Includes required fields, dependencies between fields, property types, and descriptions for documentation.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomProvider(Provider):\n    _required = {\n        \"required\": [\"message\", \"api_key\"],\n        \"dependencies\": {\n            \"username\": [\"password\"]  # If username is provided, password is required\n        }\n    }\n    _schema = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"message\": {\n                \"type\": \"string\",\n                \"title\": \"Message\",\n                \"description\": \"The notification message\"\n            },\n            \"api_key\": {\n                \"type\": \"string\",\n                \"title\": \"API Key\",\n                \"description\": \"Your API authentication key\"\n            },\n            \"username\": {\n                \"type\": \"string\",\n                \"title\": \"Username\",\n            },\n            \"password\": {\n                \"type\": \"string\",\n                \"title\": \"Password\",\n            },\n            \"timeout\": {\n                \"type\": \"integer\",\n                \"minimum\": 1,\n                \"default\": 10,\n                \"title\": \"Timeout\",\n                \"description\": \"Request timeout in seconds\"\n            }\n        },\n        \"additionalProperties\": False\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py for Custom Provider Registration in Python\nDESCRIPTION: A setup.py configuration example that demonstrates how to register a custom notification provider as an entry point in the notifiers package. This allows the provider to be discovered and used like any built-in provider.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"myproject\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    install_requires=[\n        \"notifiers>=1.0.0\"\n    ],\n    # Register your provider as an entry point\n    entry_points={\n        \"notifiers\": [\n            \"my_provider = myproject.provider:MyCustomProvider\"\n        ]\n    },\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A custom notification provider for notifiers\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/myproject\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.6\",\n)\n```\n\n----------------------------------------\n\nTITLE: Piping Content into Notifiers Command\nDESCRIPTION: Demonstrates how to pipe content from a file into a notification command. This allows using the content of a file as the message body for the notification.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cat file.txt | notifiers email notify --to blah@foo.com\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Metadata\nDESCRIPTION: Shows how to retrieve metadata for a specific provider (email). The metadata includes information like the provider's name, base URL, and site URL.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers email metadata\n{\"base_url\": null, \"site_url\": \"https://en.wikipedia.org/wiki/Email\", \"provider_name\": \"email\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Gitter Rooms in Python\nDESCRIPTION: This snippet demonstrates how to use the 'rooms' resource to view available Gitter rooms accessible with the provided token. It returns room details including ID and name.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/gitter.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> gitter.rooms(token=\"SECRET_TOKEN\")\n{'id': '...', 'name': 'Foo/bar', ... }\n```\n\n----------------------------------------\n\nTITLE: Querying Available Pushover Notification Sounds\nDESCRIPTION: Shows how to retrieve the list of available notification sounds that can be used with Pushover notifications using the sounds resource.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushover.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pushover.sounds(token='SECRET')\n['pushover', 'bike', 'bugle', 'cashregister', 'classical', 'cosmic', 'falling', 'gamelan', 'incoming', 'intermission', 'magic', 'mechanical', 'pianobar', 'siren', 'spacealarm', 'tugboat', 'alien', 'climb', 'persistent', 'echo', 'updown', 'none']\n```\n\n----------------------------------------\n\nTITLE: Full Schema for Email Notifier Configuration in YAML\nDESCRIPTION: Provides a comprehensive YAML schema for configuring the email notifier, including all available options, dependencies, and property descriptions.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/email.rst#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\ndependencies:\n  password:\n  - username\n  ssl:\n  - tls\n  username:\n  - password\nproperties:\n  attachments:\n    oneOf:\n    - items:\n        format: valid_file\n        title: one or more attachments to use in the email\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: valid_file\n      title: one or more attachments to use in the email\n      type: string\n  from:\n    format: email\n    title: the FROM address to use in the email\n    type: string\n  from_:\n    duplicate: true\n    format: email\n    title: the FROM address to use in the email\n    type: string\n  host:\n    format: hostname\n    title: the host of the SMTP server\n    type: string\n  html:\n    title: should the email be parse as an HTML file\n    type: boolean\n  message:\n    title: the content of the email message\n    type: string\n  password:\n    title: password if relevant\n    type: string\n  port:\n    format: port\n    title: the port number to use\n    type: integer\n  ssl:\n    title: should SSL be used\n    type: boolean\n  subject:\n    title: the subject of the email message\n    type: string\n  tls:\n    title: should TLS be used\n    type: boolean\n  to:\n    oneOf:\n    - items:\n        format: email\n        title: one or more email addresses to use\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: email\n      title: one or more email addresses to use\n      type: string\n  cc:\n    oneOf:\n    - items:\n        format: email\n        title: one or more email addresses to use\n        type: string\n      minItems: 0\n      type: array\n      uniqueItems: true\n    - format: email\n      title: one or more email addresses to use\n      type: string\n  bcc:\n    oneOf:\n    - items:\n        format: email\n        title: one or more email addresses to use\n        type: string\n      minItems: 0\n      type: array\n      uniqueItems: true\n    - format: email\n      title: one or more email addresses to use\n      type: string\n  username:\n    title: username if relevant\n    type: string\n  login:\n    title: Trigger login to server\n    type: boolean\nrequired:\n- message\n- to\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Accessing StatusPage Components in Python\nDESCRIPTION: Demonstrates how to view the components available for notifications using the components resource. Requires the same authentication parameters as basic notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/statuspage.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> statuspage.components(api_key='KEY', page_id='123ABC')\n[{'id': '...', 'page_id': '...', ...]\n```\n\n----------------------------------------\n\nTITLE: Pushover Notification Schema Definition\nDESCRIPTION: Complete YAML schema definition for Pushover notifications, including all available properties, their types, constraints, and requirements.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushover.rst#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  attachment:\n    format: valid_file\n    title: an image attachment to send with the message\n    type: string\n  callback:\n    format: uri\n    title: a publicly-accessible URL that our servers will send a request to when\n      the user has acknowledged your notification. priority must be set to 2\n    type: string\n  device:\n    oneOf:\n    - items:\n        title: your user's device name to send the message directly to that device\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: your user's device name to send the message directly to that device\n      type: string\n  expire:\n    maximum: 86400\n    title: how many seconds your notification will continue to be retried for. priority\n      must be set to 2\n    type: integer\n  html:\n    title: enable HTML formatting\n    type: boolean\n  message:\n    title: your message\n    type: string\n  priority:\n    maximum: 2\n    minimum: -2\n    title: notification priority\n    type: integer\n  retry:\n    minimum: 30\n    title: how often (in seconds) the Pushover servers will send the same notification\n      to the user. priority must be set to 2\n    type: integer\n  sound:\n    title: the name of one of the sounds supported by device clients to override the\n      user's default sound choice. See `sounds` resource\n    type: string\n  timestamp:\n    format: timestamp\n    minimum: 0\n    title: a Unix timestamp of your message's date and time to display to the user,\n      rather than the time your message is received by our API\n    type:\n    - integer\n    - string\n  title:\n    title: your message's title, otherwise your app's name is used\n    type: string\n  token:\n    title: your application's API token\n    type: string\n  url:\n    format: uri\n    title: a supplementary URL to show with your message\n    type: string\n  url_title:\n    title: a title for your supplementary URL, otherwise just the URL is shown\n    type: string\n  user:\n    oneOf:\n    - items:\n        title: the user/group key (not e-mail address) of your user (or you)\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: the user/group key (not e-mail address) of your user (or you)\n      type: string\nrequired:\n- user\n- message\n- token\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Checking Pushover API Usage Limits\nDESCRIPTION: Demonstrates how to check the current API usage limits for a Pushover application token.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushover.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> pushover.limits(token='SECRET')\n{'limit': 7500, 'remaining': 6841, 'reset': 1535778000, 'status': 1, 'request': 'f0cb73b1-810d-4b9a-b275-394481bceb74'}\n```\n\n----------------------------------------\n\nTITLE: Slack Webhook Configuration Schema - YAML\nDESCRIPTION: Complete schema definition for Slack webhook notifications including all available properties, their types, requirements, and descriptions. Covers attachments, formatting options, and message customization parameters.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/slack.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  attachments:\n    items:\n      additionalProperties: false\n      properties:\n        author_icon:\n          title: A valid URL that displays a small 16x16px image to the left of the\n            author_name text. Will only work if author_name is present\n          type: string\n        author_link:\n          title: A valid URL that will hyperlink the author_name text mentioned above.\n            Will only work if author_name is present\n          type: string\n        author_name:\n          title: Small text used to display the author's name\n          type: string\n        color:\n          title: Can either be one of 'good', 'warning', 'danger', or any hex color\n            code\n          type: string\n        fallback:\n          title: A plain-text summary of the attachment. This text will be used in\n            clients that don't show formatted text (eg. IRC, mobile notifications)\n            and should not contain any markup.\n          type: string\n        fields:\n          items:\n            additionalProperties: false\n            properties:\n              short:\n                title: Optional flag indicating whether the `value` is short enough\n                  to be displayed side-by-side with other values\n                type: boolean\n              title:\n                title: Required Field Title\n                type: string\n              value:\n                title: Text value of the field. May contain standard message markup\n                  and must be escaped as normal. May be multi-line\n                type: string\n            required:\n            - title\n            type: object\n          minItems: 1\n          title: Fields are displayed in a table on the message\n          type: array\n        footer:\n          title: Footer text\n          type: string\n        footer_icon:\n          format: uri\n          title: Footer icon URL\n          type: string\n        image_url:\n          format: uri\n          title: Image URL\n          type: string\n        pretext:\n          title: Optional text that should appear above the formatted data\n          type: string\n        text:\n          title: Optional text that should appear within the attachment\n          type: string\n        thumb_url:\n          format: uri\n          title: Thumbnail URL\n          type: string\n        title:\n          title: Attachment title\n          type: string\n        title_link:\n          title: Attachment title URL\n          type: string\n        ts:\n          format: timestamp\n          title: Provided timestamp (epoch)\n          type:\n          - integer\n          - string\n      required:\n      - fallback\n      type: object\n    type: array\n  channel:\n    title: override default channel or private message\n    type: string\n  icon_emoji:\n    title: override bot icon with emoji name.\n    type: string\n  icon_url:\n    format: uri\n    title: override bot icon with image URL\n    type: string\n  message:\n    title: This is the text that will be posted to the channel\n    type: string\n  unfurl_links:\n    title: avoid automatic attachment creation from URLs\n    type: boolean\n  username:\n    title: override the displayed bot name\n    type: string\n  webhook_url:\n    format: uri\n    title: the webhook URL to use. Register one at https://my.slack.com/services/new/incoming-webhook/\n    type: string\nrequired:\n- webhook_url\n- message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Using raise_on_errors Parameter in Notification Call\nDESCRIPTION: Shows how to automatically raise exceptions for notification errors by setting raise_on_errors=True when calling notify().\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> pushover.notify(message='FOO', token='BAD TOKEN', user='USER', raise_on_errors=True)\nTraceback (most recent call last):\n  File \"/Users/orcarmi/PycharmProjects/notifiers/poc.py\", line 49, in <module>\n    raise_on_errors=True)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 276, in notify\n    rsp.raise_on_errors()\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 48, in raise_on_errors\n    raise NotificationError(provider=self.provider, data=self.data, errors=self.errors, response=self.response)\nnotifiers.exceptions.NotificationError: Notification errors: application token is invalid\n```\n\n----------------------------------------\n\nTITLE: Join Notifier Schema Definition in YAML\nDESCRIPTION: Complete schema specification for the Join notifier, detailing all available parameters, dependencies, constraints, and validation rules. Includes parameters for device targeting, notification content, device actions, and media handling.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/join.rst#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nanyOf:\n- dependencies:\n    smsnumber:\n    - smstext\n- dependencies:\n    smsnumber:\n    - mmsfile\ndependencies:\n  callnumber:\n  - smsnumber\n  smstext:\n  - smsnumber\nerror_anyOf: Must use either 'smstext' or 'mmsfile' with 'smsnumber'\nproperties:\n  alarmVolume:\n    title: set device alarm volume\n    type: string\n  apikey:\n    title: user API key\n    type: string\n  callnumber:\n    title: number to call to\n    type: string\n  clipboard:\n    title: \"some text you want to set on the receiving device\\u2019s clipboard\"\n    type: string\n  deviceId:\n    title: The device ID or group ID of the device you want to send the message to\n    type: string\n  deviceIds:\n    oneOf:\n    - items:\n        title: A comma separated list of device IDs you want to send the push to\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: A comma separated list of device IDs you want to send the push to\n      type: string\n  deviceNames:\n    oneOf:\n    - items:\n        title: A comma separated list of device names you want to send the push to\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: A comma separated list of device names you want to send the push to\n      type: string\n  file:\n    format: uri\n    title: a publicly accessible URL of a file\n    type: string\n  find:\n    title: set to true to make your device ring loudly\n    type: boolean\n  group:\n    title: allows you to join notifications in different groups\n    type: string\n  icon:\n    format: uri\n    title: notification's icon URL\n    type: string\n  image:\n    format: uri\n    title: Notification image URL\n    type: string\n  interruptionFilter:\n    maximum: 4\n    minimum: 1\n    title: set interruption filter mode\n    type: integer\n  mediaVolume:\n    title: set device media volume\n    type: integer\n  message:\n    title: usually used as a Tasker or EventGhost command. Can also be used with URLs\n      and Files to add a description for those elements\n    type: string\n  mmsfile:\n    format: uri\n    title: publicly accessible mms file url\n    type: string\n  priority:\n    maximum: 2\n    minimum: -2\n    title: control how your notification is displayed\n    type: integer\n  ringVolume:\n    title: set device ring volume\n    type: string\n  smallicon:\n    format: uri\n    title: Status Bar Icon URL\n    type: string\n  smsnumber:\n    title: phone number to send an SMS to\n    type: string\n  smstext:\n    title: some text to send in an SMS\n    type: string\n  title:\n    title: \"If used, will always create a notification on the receiving device with\\\n      \\ this as the title and text as the notification\\u2019s text\"\n    type: string\n  url:\n    format: uri\n    title: ' A URL you want to open on the device. If a notification is created with\n      this push, this will make clicking the notification open this URL'\n    type: string\n  wallpaper:\n    format: uri\n    title: a publicly accessible URL of an image file\n    type: string\nrequired:\n- apikey\n- message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Schema Validation Error with Missing Required Properties\nDESCRIPTION: Shows how BadArguments exception is raised when required properties are missing from the notification request.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> import notifiers\n>>> pushover = notifiers.get_notifier('pushover')\n>>> pushover.notify(message='FOO')\nTraceback (most recent call last):\n  File \"<input>\", line 1, in <module>\n  File \"/Users/liiight/PycharmProjects/notifiers/notifiers/core.py\", line 215, in notify\n    self._validate_data(kwargs, validator)\n  File \"/Users/liiight/PycharmProjects/notifiers/notifiers/core.py\", line 193, in _validate_data\n    raise BadArguments(validation_error=msg, provider=self.name, data=data)\nnotifiers.exceptions.BadArguments: <NotificationError: Error with sent data: 'user' is a required property>\n```\n\n----------------------------------------\n\nTITLE: PopcornNotify Integration Schema in YAML\nDESCRIPTION: This YAML schema defines the properties and requirements for the PopcornNotify integration. It specifies the structure of the notification payload, including required fields like api_key, message, and recipients, as well as optional fields like subject.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/popcornnotify.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  api_key:\n    title: The API key\n    type: string\n  message:\n    title: The message to send\n    type: string\n  recipients:\n    oneOf:\n    - items:\n        format: email\n        title: The recipient email address or phone number. Or an array of email addresses\n          and phone numbers\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: email\n      title: The recipient email address or phone number. Or an array of email addresses\n        and phone numbers\n      type: string\n  subject:\n    title: The subject of the email. It will not be included in text messages.\n    type: string\nrequired:\n- message\n- api_key\n- recipients\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Zulip Notification Schema Definition\nDESCRIPTION: Complete YAML schema definition for Zulip notifications, specifying required fields, property constraints, and allowed values. Includes validation rules for email format, URI format, and message types.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/zulip.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nallOf:\n- required:\n  - message\n  - email\n  - api_key\n  - to\n- error_oneOf: Only one of 'domain' or 'server' is allowed\n  oneOf:\n  - required:\n    - domain\n  - required:\n    - server\nproperties:\n  api_key:\n    title: User API Key\n    type: string\n  domain:\n    minLength: 1\n    title: Zulip cloud domain\n    type: string\n  email:\n    format: email\n    title: User email\n    type: string\n  message:\n    title: Message content\n    type: string\n  server:\n    format: uri\n    title: 'Zulip server URL. Example: https://myzulip.server.com'\n    type: string\n  subject:\n    title: Title of the stream message. Required when using stream.\n    type: string\n  to:\n    title: Target of the message\n    type: string\n  type:\n    enum:\n    - stream\n    - private\n    title: Type of message to send\n    type: string\n  type_:\n    enum:\n    - stream\n    - private\n    title: Type of message to send\n    type: string\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Schema Validation Error with Invalid File Path\nDESCRIPTION: Shows how BadArguments exception is raised when a file path provided doesn't point to a valid file.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/usage.rst#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> pushover.notify(message='FOO', token='TOKEN', user='USER', attachment='/foo')\nTraceback (most recent call last):\n  File \"/Users/orcarmi/PycharmProjects/notifiers/poc.py\", line 50, in <module>\n    raise_on_errors=True)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 273, in notify\n    data = self._process_data(**kwargs)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 203, in _process_data\n    self._validate_data(data)\n  File \"/Users/orcarmi/PycharmProjects/notifiers/notifiers/core.py\", line 176, in _validate_data\n    raise BadArguments(validation_error=msg, provider=self.name, data=data)\nnotifiers.exceptions.BadArguments: Error with sent data: 'foo' is not a 'valid_file'\n```\n\n----------------------------------------\n\nTITLE: Gitter Notifier Schema in YAML\nDESCRIPTION: This YAML schema defines the structure and requirements for the Gitter notifier. It specifies required fields (message, token, room_id) and their descriptions.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/gitter.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  message:\n    title: Body of the message\n    type: string\n  room_id:\n    title: ID of the room to send the notification to\n    type: string\n  token:\n    title: access token\n    type: string\nrequired:\n- message\n- token\n- room_id\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Keywords for Reserved Words in Python\nDESCRIPTION: Shows how to work around Python reserved words by using the convention of appending an underscore to the reserved word when passing parameters to the notify method.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/about.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> provider.notify(to='foo@bar.com', from_='bar@foo.com')\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for iCloud Notifier\nDESCRIPTION: This YAML snippet outlines the required fields for configuring the iCloud notifier. It specifies that username, password, from_, and to fields are mandatory, and the configuration should be of object type.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/icloud.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrequired:\n- username\n- password\n- from_\n- to\ntype: object\n```\n\n----------------------------------------\n\nTITLE: StatusPage Notification Schema Definition in YAML\nDESCRIPTION: Complete schema definition for StatusPage notifications, detailing all available properties, their types, requirements, and dependencies. This schema is used for validation when sending notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/statuspage.rst#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\ndependencies:\n  backfill_date:\n  - backfilled\n  backfilled:\n  - backfill_date\n  scheduled_auto_completed:\n  - scheduled_for\n  scheduled_auto_in_progress:\n  - scheduled_for\n  scheduled_for:\n  - scheduled_until\n  scheduled_remind_prior:\n  - scheduled_for\n  scheduled_until:\n  - scheduled_for\nproperties:\n  api_key:\n    title: OAuth2 token\n    type: string\n  backfill_date:\n    format: date\n    title: Date of incident in YYYY-MM-DD format\n    type: string\n  backfilled:\n    title: Create an historical incident\n    type: boolean\n  body:\n    title: The initial message, created as the first incident update\n    type: string\n  component_ids:\n    items:\n      type: string\n    title: List of components whose subscribers should be notified (only applicable\n      for pages with component subscriptions enabled)\n    type: array\n  deliver_notifications:\n    title: Control whether notifications should be delivered for the initial incident\n      update\n    type: boolean\n  impact_override:\n    enum:\n    - none\n    - minor\n    - major\n    - critical\n    title: Override calculated impact value\n    type: string\n  message:\n    title: The name of the incident\n    type: string\n  page_id:\n    title: Page ID\n    type: string\n  scheduled_auto_completed:\n    title: Automatically transition incident to 'Completed' at end\n    type: boolean\n  scheduled_auto_in_progress:\n    title: Automatically transition incident to 'In Progress' at start\n    type: boolean\n  scheduled_for:\n    format: iso8601\n    title: Time the scheduled maintenance should begin\n    type: string\n  scheduled_remind_prior:\n    title: Remind subscribers 60 minutes before scheduled start\n    type: boolean\n  scheduled_until:\n    format: iso8601\n    title: Time the scheduled maintenance should end\n    type: string\n  status:\n    enum:\n    - investigating\n    - identified\n    - monitoring\n    - resolved\n    - scheduled\n    - in_progress\n    - verifying\n    - completed\n    title: Status of the incident\n    type: string\n  wants_twitter_update:\n    title: Post the new incident to twitter\n    type: boolean\nrequired:\n- message\n- api_key\n- page_id\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Mailgun Notifier Full Schema Definition in YAML\nDESCRIPTION: Complete YAML schema definition for the Mailgun notifier, detailing all available parameters and their requirements. The schema defines required fields, field types, validation rules, and conditional requirements like needing either a 'message' or 'html' parameter.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/mailgun.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nallOf:\n- required:\n  - to\n  - domain\n  - api_key\n- anyOf:\n  - required:\n    - from\n  - required:\n    - from_\n- anyOf:\n  - required:\n    - message\n  - required:\n    - html\n  error_anyOf: Need either \"message\" or \"html\"\nproperties:\n  api_key:\n    title: User's API key\n    type: string\n  attachment:\n    oneOf:\n    - items:\n        format: valid_file\n        title: File attachment\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: valid_file\n      title: File attachment\n      type: string\n  bcc:\n    oneOf:\n    - items:\n        title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n      type: string\n  cc:\n    oneOf:\n    - items:\n        title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n      type: string\n  data:\n    additionalProperties:\n      type: object\n    title: attach a custom JSON data to the message\n    type: object\n  deliverytime:\n    format: rfc2822\n    title: 'Desired time of delivery. Note: Messages can be scheduled for a maximum of 3 days in the future.'\n    type: string\n  dkim:\n    title: Enables/disables DKIM signatures on per-message basis\n    type: boolean\n  domain:\n    title: MailGun's domain to use\n    type: string\n  from:\n    format: email\n    title: Email address for From header\n    type: string\n  from_:\n    duplicate: true\n    format: email\n    title: Email address for From header\n    type: string\n  headers:\n    additionalProperties:\n      type: string\n    title: Any other header to add\n    type: object\n  html:\n    title: Body of the message. (HTML version)\n    type: string\n  inline:\n    oneOf:\n    - items:\n        format: valid_file\n        title: Attachment with inline disposition. Can be used to send inline images\n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: valid_file\n      title: Attachment with inline disposition. Can be used to send inline images\n      type: string\n  message:\n    title: Body of the message. (text version)\n    type: string\n  require_tls:\n    title: If set to True this requires the message only be sent over a TLS connection. If a TLS connection can not be established, Mailgun will not deliver the message.If set to False, Mailgun will still try and upgrade the connection, but if Mailgun can not, the message will be delivered over a plaintext SMTP connection.\n    type: boolean\n  skip_verification:\n    title: If set to True, the certificate and hostname will not be verified when trying to establish a TLS connection and Mailgun will accept any certificate during delivery. If set to False, Mailgun will verify the certificate and hostname. If either one can not be verified, a TLS connection will not be established.\n    type: boolean\n  subject:\n    title: Message subject\n    type: string\n  tag:\n    oneOf:\n    - items:\n        format: ascii\n        maxLength: 128\n        title: Tag string\n        type: string\n      maxItems: 3\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - format: ascii\n      maxLength: 128\n      title: Tag string\n      type: string\n  testmode:\n    title: Enables sending in test mode.\n    type: boolean\n  to:\n    oneOf:\n    - items:\n        title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n        type: string\n      minItems: 1\n      type: array\n      uniqueItems: true\n    - title: 'Email address of the recipient(s). Example: \"Bob <bob@host.com>\".' \n      type: string\n  tracking:\n    title: Toggles tracking on a per-message basis\n    type: boolean\n  tracking_clicks:\n    enum:\n    - true\n    - false\n    - htmlonly\n    title: Toggles clicks tracking on a per-message basis. Has higher priority than domain-level setting. Pass yes, no or htmlonly.\n    type:\n    - string\n    - boolean\n  tracking_opens:\n    title: Toggles opens tracking on a per-message basis. Has higher priority than domain-level setting\n    type: boolean\ntype: object\n```\n\n----------------------------------------\n\nTITLE: VictorOps REST Integration Schema in YAML\nDESCRIPTION: Full schema definition for the VictorOps REST integration notifier. It outlines all available properties, their types, and descriptions. This schema includes required fields and additional optional properties for customizing notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/victorops.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  rest_url:\n      type: string\n      format: uri\n      title: the REST URL to use with routing_key, create one in victorops integrations tab.\n\n  message_type:\n      type: string\n      title: severity level can be:\n               - critical or warning: Triggers an incident\n               - acknowledgement: Acks an incident\n               - info: Creates a timeline event but doesn't trigger an incident\n               - recovery or ok: Resolves an incident\n\n  entity_id:\n      type: string\n      title: Unique id for the incident for aggregation acking or resolving.\n\n  entity_display_name:\n      type: string\n      title: Display Name in the UI and Notifications.\n\n  message:\n      type: string\n      title: This is the description that will be posted in the incident.\n\n  annotations:\n      type: object\n      format:\n          vo_annotate.s.{custom_name}: annotation\n          vo_annotate.u.{custom_name}: annotation\n          vo_annotate.i.{custom_name}: annotation\n      title: annotations can be of three types vo_annotate.u.{custom_name} vo_annotate.s.{custom_name} vo_annotate.i.{custom_name}.\n\n  additional_keys:\n      type: object\n      format:\n          key: value\n          key: value\n          key: value\n      title: any additional keys that ca be passed in the body\n\nrequired:\n  - rest_url\n  - message_type\n  - entity_id\n  - entity_display_name\n  - message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Twilio Notifier Full Schema Definition in YAML\nDESCRIPTION: Complete schema definition for the Twilio notifier showing all available parameters, their types, requirements, and constraints. This schema outlines required fields, field relationships, and validation rules for sending Twilio notifications.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/twilio.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallOf:\n- anyOf:\n  - anyOf:\n    - required:\n      - from\n    - required:\n      - from_\n  - required:\n    - messaging_service_id\n  error_anyOf: Either 'from' or 'messaging_service_id' are required\n- anyOf:\n  - required:\n    - message\n  - required:\n    - media_url\n  error_anyOf: Either 'message' or 'media_url' are required\n- required:\n  - to\n  - account_sid\n  - auth_token\nproperties:\n  account_sid:\n    title: The unique id of the Account that sent this message.\n    type: string\n  application_sid:\n    title: Twilio will POST MessageSid as well as MessageStatus=sent or MessageStatus=failed\n      to the URL in the MessageStatusCallback property of this Application\n    type: string\n  auth_token:\n    title: The user's auth token\n    type: string\n  from:\n    title: Twilio phone number or the alphanumeric sender ID used\n    type: string\n  from_:\n    duplicate: true\n    title: Twilio phone number or the alphanumeric sender ID used\n    type: string\n  max_price:\n    title: The total maximum price up to the fourth decimal (0.0001) in US dollars\n      acceptable for the message to be delivered\n    type: number\n  media_url:\n    format: uri\n    title: The URL of the media you wish to send out with the message\n    type: string\n  message:\n    maxLength: 1600\n    title: The text body of the message. Up to 1,600 characters long.\n    type: string\n  messaging_service_id:\n    title: The unique id of the Messaging Service used with the message\n    type: string\n  provide_feedback:\n    title: Set this value to true if you are sending messages that have a trackable\n      user action and you intend to confirm delivery of the message using the Message\n      Feedback API\n    type: boolean\n  status_callback:\n    format: uri\n    title: A URL where Twilio will POST each time your message status changes\n    type: string\n  to:\n    title: The recipient of the message, in E.164 format\n    format: e164\n    type: string\n  validity_period:\n    maximum: 14400\n    minimum: 1\n    title: The number of seconds that the message can remain in a Twilio queue\n    type: integer\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Formatting Provider Metadata Output\nDESCRIPTION: Demonstrates how to get pretty-printed JSON output of provider metadata using the --pretty flag. This makes the output more readable with proper indentation.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers email metadata --pretty\n{\n    \"base_url\": null,\n    \"site_url\": \"https://en.wikipedia.org/wiki/Email\",\n    \"provider_name\": \"email\"\n}\n```\n\n----------------------------------------\n\nTITLE: DingTalk Notifier Schema Definition\nDESCRIPTION: The complete schema for the DingTalk notifier showing all parameters, their types, and requirements. The schema specifies that access_token and message are required parameters and no additional properties are allowed.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/dingtalk.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  access_token:\n    title: your access token\n    type: string\n  message:\n    title: message content\n    type: string\nrequired:\n- access_token\n- message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Pagerduty Notification Schema Definition\nDESCRIPTION: Complete YAML schema definition for Pagerduty notifications, detailing all available properties, their types, requirements, and constraints. Includes fields for event details, custom attributes, deduplication, images, and links.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pagerduty.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  class:\n    title: The class/type of the event\n    type: string\n  component:\n    title: Component of the source machine that is responsible for the event\n    type: string\n  custom_details:\n    title: Additional details about the event and affected system\n    type: object\n  dedup_key:\n    maxLength: 255\n    title: Deduplication key for correlating triggers and resolves\n    type: string\n  event_action:\n    enum:\n    - trigger\n    - acknowledge\n    - resolve\n    title: The type of event\n    type: string\n  group:\n    title: Logical grouping of components of a service\n    type: string\n  images:\n    items:\n      additionalProperties: false\n      properties:\n        alt:\n          title: Optional alternative text for the image\n          type: string\n        href:\n          title: Optional URL; makes the image a clickable link\n          type: string\n        src:\n          title: The source of the image being attached to the incident. This image must be served via HTTPS.\n          type: string\n      required:\n      - src\n      type: object\n    type: array\n  links:\n    items:\n      additionalProperties: false\n      properties:\n        href:\n          title: URL of the link to be attached\n          type: string\n        text:\n          title: Plain text that describes the purpose of the link, and can be used as the link's text\n          type: string\n      required:\n      - href\n      - text\n      type: object\n    type: array\n  message:\n    title: A brief text summary of the event, used to generate the summaries/titles of any associated alerts\n    type: string\n  routing_key:\n    title: The GUID of one of your Events API V2 integrations. This is the \"Integration Key\" listed on the Events API V2 integration's detail page\n    type: string\n  severity:\n    enum:\n    - critical\n    - error\n    - warning\n    - info\n    title: The perceived severity of the status the event is describing with respect to the affected system\n    type: string\n  source:\n    title: The unique location of the affected system, preferably a hostname or FQDN\n    type: string\n  timestamp:\n    format: iso8601\n    title: The time at which the emitting tool detected or generated the event in ISO 8601\n    type: string\nrequired:\n- routing_key\n- event_action\n- source\n- severity\n- message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via pip\nDESCRIPTION: Command to install the Notifiers package from PyPI using pip. This is the recommended way to install the stable version of the package.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/installation.rst#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install notifiers\n```\n\n----------------------------------------\n\nTITLE: Pushbullet Configuration Schema in YAML\nDESCRIPTION: Complete YAML schema for Pushbullet notifications, defining all available properties, their types, descriptions, and constraints. The schema includes required fields (message and token) and various optional parameters for targeting specific devices or channels.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/pushbullet.rst#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  channel_tag:\n    title: Channel tag of the target channel, sends a push to all people who are subscribed\n      to this channel. The current user must own this channel.\n    type: string\n  client_iden:\n    title: Client iden of the target client, sends a push to all users who have granted\n      access to this client. The current user must own this client\n    type: string\n  device_iden:\n    title: Device iden of the target device, if sending to a single device\n    type: string\n  email:\n    format: email\n    title: Email address to send the push to. If there is a pushbullet user with this\n      address, they get a push, otherwise they get an email\n    type: string\n  guid:\n    title: Unique identifier set by the client, used to identify a push in case you\n      receive it from /v2/everything before the call to /v2/pushes has completed.\n      This should be a unique value. Pushes with guid set are mostly idempotent, meaning\n      that sending another push with the same guid is unlikely to create another push\n      (it will return the previously created push).\n    type: string\n  message:\n    title: Body of the push\n    type: string\n  source_device_iden:\n    title: Device iden of the sending device\n    type: string\n  title:\n    title: Title of the push\n    type: string\n  token:\n    title: API access token\n    type: string\n  type:\n    enum:\n    - note\n    - link\n    title: Type of the push, one of \"note\" or \"link\"\n    type: string\n  type_:\n    enum:\n    - note\n    - link\n    title: Type of the push, one of \"note\" or \"link\"\n    type: string\n  url:\n    title: URL field, used for type=\"link\" pushes\n    type: string\nrequired:\n- message\n- token\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Documenting Gmail Provider API in RST\nDESCRIPTION: Generates API documentation for the Gmail provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.gmail\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers from source\nDESCRIPTION: Command to install the Notifiers package directly from the GitHub repository master branch using pip. This method installs the latest stable version directly from source.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/installation.rst#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install https://github.com/notifiers/notifiers/master.zip\n```\n\n----------------------------------------\n\nTITLE: Notify Notifier Schema Definition in YAML\nDESCRIPTION: The complete schema for the Notify notifier configuration in YAML format. It defines all required and optional properties including title, message, base_url, tags, and token, along with their descriptions and data types.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/notify.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  title:\n    title: Title of the message\n    type: string\n  message:\n    title: Body of the message\n    type: string\n  base_url:\n    title: URL of the Notify instance\n    type: string\n    description: |\n      The URL of the Notify instance. For example, if you are using the the demo instance you would use ``https://notify-demo.deno.dev``.\n  tags:\n    title: Tags to send the notification to\n    type: array\n    items:\n      type: string\n  token:\n    title: access token\n    type: string\nrequired:\n- title\n- message\n- base_url\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via Docker\nDESCRIPTION: Command to pull the Notifiers Docker image from Dockerhub\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull liiight/notifiers\n```\n\n----------------------------------------\n\nTITLE: SimplePush Configuration Schema Definition\nDESCRIPTION: YAML schema defining the required and optional parameters for SimplePush notifications. Includes key, message, event, and title fields with their descriptions.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/simplepush.rst#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  event:\n    title: Event ID\n    type: string\n  key:\n    title: your user key\n    type: string\n  message:\n    title: your message\n    type: string\n  title:\n    title: message title\n    type: string\nrequired:\n- key\n- message\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Documenting Pushbullet Provider API in RST\nDESCRIPTION: Generates API documentation for the Pushbullet provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.pushbullet\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via homebrew\nDESCRIPTION: Command to install the Notifiers package using Homebrew package manager on macOS.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install notifiers\n```\n\n----------------------------------------\n\nTITLE: Telegram Notifier Full Schema in YAML\nDESCRIPTION: This YAML schema defines all available properties for configuring a Telegram notification. It includes required fields like message, chat_id, and token, as well as optional parameters for customizing the notification behavior.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/telegram.rst#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadditionalProperties: false\nproperties:\n  chat_id:\n    oneOf:\n    - type: string\n    - type: integer\n    title: Unique identifier for the target chat or username of the target channel\n      (in the format @channelusername)\n  disable_notification:\n    title: Sends the message silently. Users will receive a notification with no sound.\n    type: boolean\n  disable_web_page_preview:\n    title: Disables link previews for links in this message\n    type: boolean\n  message:\n    title: Text of the message to be sent\n    type: string\n  parse_mode:\n    enum:\n    - markdown\n    - html\n    title: Send Markdown or HTML, if you want Telegram apps to show bold, italic,\n      fixed-width text or inline URLs in your bot's message.\n    type: string\n  reply_to_message_id:\n    title: If the message is a reply, ID of the original message\n    type: integer\n  token:\n    title: Bot token\n    type: string\nrequired:\n- message\n- chat_id\n- token\ntype: object\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers development branch\nDESCRIPTION: Command to install the Notifiers package from the development branch on GitHub. This installs the cutting edge version which may contain experimental features (not recommended for production use).\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/installation.rst#2025-04-19_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pip install https://github.com/notifiers/notifiers/develop.zip\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via Docker\nDESCRIPTION: Command to pull the Notifiers Docker image from Docker Hub.\nSOURCE: https://github.com/liiight/notifiers/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull liiight/notifiers\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers development branch via Docker\nDESCRIPTION: Command to pull the development version of the Notifiers Docker image from DockerHub. This contains cutting edge features that may not be stable (not recommended for production use).\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/installation.rst#2025-04-19_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull liiight/notifiers:develop\n```\n\n----------------------------------------\n\nTITLE: Installing Notifiers via Docker\nDESCRIPTION: Command to pull the Notifiers Docker image from DockerHub. This provides the package in a containerized environment for easy deployment without local installation.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/installation.rst#2025-04-19_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull liiight/notifiers\n```\n\n----------------------------------------\n\nTITLE: Development Setup with Poetry\nDESCRIPTION: Commands for setting up the development environment using Poetry and running tests\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/index.rst#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install && poetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Customizing Environment Variable Prefix\nDESCRIPTION: Demonstrates how to change the default environment variable prefix from NOTIFIERS_ to a custom value using the --env-prefix option.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers --env-prefix FOO_ notify pushover \"Yep, easy stuff!\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Telegram Provider Help\nDESCRIPTION: Displays help information for the Telegram provider, including standard commands and additional resource commands specific to Telegram.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers telegram --help\nUsage: notifiers telegram [OPTIONS] COMMAND [ARGS]...\n\n  Options for 'telegram'\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  defaults   'telegram' default values\n  metadata   'telegram' metadata\n  notify     Send Telegram notifications\n  required   'telegram' required schema\n  resources  Show provider resources list\n  schema     'telegram' full schema\n  updates    Return Telegram bot updates, correlating to...\n```\n\n----------------------------------------\n\nTITLE: Checking Notifiers Version\nDESCRIPTION: Shows how to check the installed version of the Notifiers library using the --version flag. Returns the current version number of the installed package.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/CLI.rst#2025-04-19_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ notifiers --version\nnotifiers 0.6.3\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Notifiers Providers in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents using reStructuredText syntax. It lists various notification providers supported by the Notifiers project, creating a structured index for the documentation.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _providers:\n\nProviders\n=========\n\n.. toctree::\n   :maxdepth: 2\n\n   email\n   gitter\n   gmail\n   join\n   mailgun\n   pagerduty\n   popcornnotify\n   pushbullet\n   pushover\n   simplepush\n   slack\n   statuspage\n   telegram\n   twilio\n   zulip\n```\n\n----------------------------------------\n\nTITLE: Documenting Pushover Provider API in RST\nDESCRIPTION: Generates API documentation for the Pushover provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.pushover\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure\nDESCRIPTION: Sphinx documentation configuration using RST format to define the documentation tree structure with maxdepth of 2 levels, including core, providers, exceptions and utils sections.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   core\n   providers\n   exceptions\n   utils\n```\n\n----------------------------------------\n\nTITLE: Documenting Slack Provider API in RST\nDESCRIPTION: Generates API documentation for the Slack provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.slack\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Gitter Provider API in RST\nDESCRIPTION: Generates API documentation for the Gitter provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.gitter\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Join Provider API in RST\nDESCRIPTION: Generates API documentation for the Join provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.join\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Zulip Provider API in RST\nDESCRIPTION: Generates API documentation for the Zulip provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.zulip\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Email Provider API in RST\nDESCRIPTION: Generates API documentation for the email provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.email\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PagerDuty Provider API in RST\nDESCRIPTION: Generates API documentation for the PagerDuty provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.pagerduty\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting iCloud Provider API in RST\nDESCRIPTION: Generates API documentation for the iCloud provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.icloud\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Mailgun Provider API in RST\nDESCRIPTION: Generates API documentation for the Mailgun provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.mailgun\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Twilio Provider API in RST\nDESCRIPTION: Generates API documentation for the Twilio provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.twilio\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PopcornNotify Provider API in RST\nDESCRIPTION: Generates API documentation for the PopcornNotify provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.popcornnotify\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting StatusPage Provider API in RST\nDESCRIPTION: Generates API documentation for the StatusPage provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_15\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.statuspage\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting VictorOps Provider API in RST\nDESCRIPTION: Generates API documentation for the VictorOps provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_16\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.victorops\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Simplepush Provider API in RST\nDESCRIPTION: Generates API documentation for the Simplepush provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.simplepush\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Default Email Notifier Settings in Python\nDESCRIPTION: Shows how to view the default settings for the email notifier, including subject, from address, host, port, and security options.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/email.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> email.defaults\n{'subject': \"New email from 'notifiers'!\", 'from': '[USER@HOSTNAME]', 'host': 'localhost', 'port': 25, 'tls': False, 'ssl': False, 'html': False}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Join Devices List in Python\nDESCRIPTION: Shows how to use the devices resource to list all available Join devices. Requires a Join API key to authenticate and retrieve the device list.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/providers/join.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> join.devices(apikey='SECRET')\n>>> {'items': [{'id': 9, 'is_archived': False, ... }]\n```\n\n----------------------------------------\n\nTITLE: Documenting Telegram Provider API in RST\nDESCRIPTION: Generates API documentation for the Telegram provider module, including all members and undocumented members.\nSOURCE: https://github.com/liiight/notifiers/blob/main/source/api/providers.rst#2025-04-19_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: notifiers.providers.telegram\n   :members:\n   :undoc-members:\n```"
  }
]