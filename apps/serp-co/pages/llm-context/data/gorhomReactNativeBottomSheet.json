[
  {
    "owner": "gorhom",
    "repo": "react-native-bottom-sheet",
    "content": "TITLE: Implementing Bottom Sheet in React Native with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic React Native app with a Bottom Sheet component. It includes setting up the component, defining snap points, handling sheet changes, and styling the container and content.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChanges}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetVirtualizedList with React Native Bottom Sheet\nDESCRIPTION: A complete example showing how to implement the BottomSheetVirtualizedList component with BottomSheet. The example demonstrates creating a bottom sheet with virtualized list, handling snap points, and implementing sheet control buttons.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetvirtualizedlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetVirtualizedList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetVirtualizedList\n          data={data}\n          keyExtractor={(i) => i}\n          getItemCount={(data) => data.length}\n          getItem={(data, index) => data[index]}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetVirtualizedList with React Native Bottom Sheet\nDESCRIPTION: A complete example of implementing BottomSheetVirtualizedList within a React Native application. The code demonstrates how to create a bottom sheet with a virtualized list, including snap points, callbacks for sheet events, and styling. It also shows proper ref handling and data management for the virtualized list.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetvirtualizedlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport BottomSheet, { BottomSheetVirtualizedList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetVirtualizedList\n          data={data}\n          keyExtractor={(i) => i}\n          getItemCount={(data) => data.length}\n          getItem={(data, index) => data[index]}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Bottom Sheet in React Native\nDESCRIPTION: A complete example showing how to implement a non-scrollable bottom sheet in a React Native application. This code demonstrates the setup process including imports, component structure, refs, callbacks, and styling.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // callbacks\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        onChange={handleSheetChanges}\n      >\n        <BottomSheetView style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </BottomSheetView>\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    padding: 36,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bottom Sheet Modal in React Native with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a simple Bottom Sheet Modal in a React Native application using TypeScript. It includes setting up the modal, defining snap points, handling modal presentation, and managing state changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport {\n  BottomSheetModal,\n  BottomSheetModalProvider,\n} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handlePresentModalPress = useCallback(() => {\n    bottomSheetModalRef.current?.present();\n  }, []);\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <BottomSheetModalProvider>\n      <View style={styles.container}>\n        <Button\n          onPress={handlePresentModalPress}\n          title=\"Present Modal\"\n          color=\"black\"\n        />\n        <BottomSheetModal\n          ref={bottomSheetModalRef}\n          index={1}\n          snapPoints={snapPoints}\n          onChange={handleSheetChanges}\n        >\n          <View style={styles.contentContainer}>\n            <Text>Awesome ðŸŽ‰</Text>\n          </View>\n        </BottomSheetModal>\n      </View>\n    </BottomSheetModalProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetTextInput in React Native\nDESCRIPTION: This example demonstrates how to use the BottomSheetTextInput component within a BottomSheet in a React Native application. It includes setting up the BottomSheet with snap points, handling sheet changes, and styling the input and container.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheettextinput.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet, { BottomSheetTextInput } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        keyboardBehavior=\"fillParent\"\n        onChange={handleSheetChanges}\n      >\n        <BottomSheetTextInput style={styles.input} />\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  input: {\n    marginTop: 8,\n    marginBottom: 10,\n    borderRadius: 10,\n    fontSize: 16,\n    lineHeight: 20,\n    padding: 8,\n    backgroundColor: 'rgba(151, 151, 151, 0.25)',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Bottom Sheet Modal in React Native\nDESCRIPTION: A complete example of how to implement a non-scrollable Bottom Sheet Modal in a React Native application. The example includes setting up the required providers, creating a reference to the modal, handling modal presentation, and responding to sheet state changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  BottomSheetModal,\n  BottomSheetView,\n  BottomSheetModalProvider,\n} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n\n  // callbacks\n  const handlePresentModalPress = useCallback(() => {\n    bottomSheetModalRef.current?.present();\n  }, []);\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n      <GestureHandlerRootView style={styles.container}>\n        <BottomSheetModalProvider>\n          <Button\n            onPress={handlePresentModalPress}\n            title=\"Present Modal\"\n            color=\"black\"\n          />\n          <BottomSheetModal\n            ref={bottomSheetModalRef}\n            onChange={handleSheetChanges}\n          >\n            <BottomSheetView style={styles.contentContainer}>\n              <Text>Awesome ðŸŽ‰</Text>\n            </BottomSheetView>\n        </BottomSheetModal>\n        </BottomSheetModalProvider>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull To Refresh in React Native Bottom Sheet\nDESCRIPTION: This code demonstrates how to implement pull-to-refresh functionality in a React Native Bottom Sheet component. It uses BottomSheetFlatList to render a list of items within the bottom sheet, and includes the necessary props for enabling pull-to-refresh.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/pull-to-refresh.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo } from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\"], []);\n\n  // callbacks\n  const handleRefresh = useCallback(() => {\n    console.log(\"handleRefresh\");\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <BottomSheet snapPoints={snapPoints}>\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={(i) => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n          refreshing={false}\n          onRefresh={handleRefresh}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Bottom Sheet in React Native with TypeScript\nDESCRIPTION: Example implementation of a basic bottom sheet component with configurable snap points and change event handling. The component demonstrates usage of refs, memoized values, and callbacks to create an interactive bottom sheet that can snap to different height positions.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChanges}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet with Backdrop in React Native\nDESCRIPTION: Example implementation of a bottom sheet with backdrop in React Native using @gorhom/bottom-sheet. The code demonstrates setting up a bottom sheet with customizable snap points, backdrop configuration, and basic styling. It includes gesture handling and state management using React hooks.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetbackdrop.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetView, BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n\t// ref\n\tconst bottomSheetRef = useRef<BottomSheet>(null);\n\n\t// variables\n\tconst snapPoints = useMemo(() => [\"25%\", \"50%\", \"75%\"], []);\n\n\t// callbacks\n\tconst handleSheetChanges = useCallback((index: number) => {\n\t\tconsole.log(\"handleSheetChanges\", index);\n\t}, []);\n\n\t// renders\n\tconst renderBackdrop = useCallback(\n\t\t(props) => (\n\t\t\t<BottomSheetBackdrop\n\t\t\t\t{...props}\n\t\t\t\tdisappearsOnIndex={1}\n\t\t\t\tappearsOnIndex={2}\n\t\t\t/>\n\t\t),\n\t\t[]\n\t);\n\treturn (\n\t\t<GestureHandlerRootView style={styles.container}>\n\t\t\t<BottomSheet\n\t\t\t\tref={bottomSheetRef}\n\t\t\t\tindex={1}\n\t\t\t\tsnapPoints={snapPoints}\n\t\t\t\tbackdropComponent={renderBackdrop}\n        enableDynamicSizing={false}\n\t\t\t\tonChange={handleSheetChanges}\n\t\t\t>\n\t\t\t\t<BottomSheetView style={styles.contentContainer}>\n\t\t\t\t\t<Text>Awesome ðŸŽ‰</Text>\n\t\t\t\t</BottomSheetView>\n\t\t\t</BottomSheet>\n\t\t</GestureHandlerRootView>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 24,\n\t\tbackgroundColor: \"grey\",\n\t},\n\tcontentContainer: {\n\t\tflex: 1,\n\t\talignItems: \"center\",\n\t},\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Detached Modal with React Native Bottom Sheet\nDESCRIPTION: A complete example of creating a detached modal using the BottomSheet component. It demonstrates how to use the 'detached' prop, set bottom insets, configure snap points, and apply custom styling for horizontal margins.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/detach-modal.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo, useRef } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport BottomSheet from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => [\"25%\"], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        snapPoints={snapPoints}\n        // add bottom inset to elevate the sheet\n        bottomInset={46}\n        // set `detached` to true\n        detached={true}\n        style={styles.sheetContainer}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: \"grey\",\n  },\n  sheetContainer: {\n    // add horizontal space\n    marginHorizontal: 24,\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFlatList with React Native Bottom Sheet\nDESCRIPTION: A complete example showing how to implement a BottomSheetFlatList component with snap points, callbacks, and custom styling. The component demonstrates integration with BottomSheet including snap controls and item rendering.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetflatlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={(i) => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFlatList with React Native Bottom Sheet\nDESCRIPTION: A complete example showing how to implement a BottomSheetFlatList component with dynamic snap points, custom styling, and event handlers. The component demonstrates integration with BottomSheet gestures and includes button controls for sheet manipulation.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetflatlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={(i) => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFlashList in a React Native Application\nDESCRIPTION: A complete example showing how to implement the BottomSheetFlashList component within a React Native application. The example demonstrates setting up BottomSheet with FlashList, defining snap points, and handling user interactions like snapping to different heights and closing the sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetflashlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetFlashList } from \"@gorhom/bottom-sheet\";\n\n\nconst keyExtractor = (item) => item;\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\"], []);\n\n  // callbacks\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(({ item }) => {\n    return (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    );\n  }, []);\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n      >\n        <BottomSheetFlashList\n          data={data}\n          keyExtractor={keyExtractor}\n          renderItem={renderItem}\n          estimatedItemSize={43.3}\n        />\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetSectionList with React Native Bottom Sheet\nDESCRIPTION: A complete example showing how to implement a bottom sheet with sectioned list functionality using @gorhom/bottom-sheet. The component includes snap points, gesture handling, and custom section rendering with proper styling.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetsectionlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetSectionList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const sections = useMemo(\n    () =>\n      Array(10)\n        .fill(0)\n        .map((_, index) => ({\n          title: `Section ${index}`,\n          data: Array(10)\n            .fill(0)\n            .map((_, index) => `Item ${index}`),\n        })),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderSectionHeader = useCallback(\n    ({ section }) => (\n      <View style={styles.sectionHeaderContainer}>\n        <Text>{section.title}</Text>\n      </View>\n    ),\n    []\n  );\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetSectionList\n          sections={sections}\n          keyExtractor={(i) => i}\n          renderSectionHeader={renderSectionHeader}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  sectionHeaderContainer: {\n    backgroundColor: \"white\",\n    padding: 6,\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetSectionList in React Native\nDESCRIPTION: This example demonstrates how to use the BottomSheetSectionList component within a React Native application. It shows the setup of a BottomSheet with a SectionList, including custom rendering for section headers and items, and button controls for manipulating the BottomSheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetsectionlist.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport BottomSheet, { BottomSheetSectionList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const sections = useMemo(\n    () =>\n      Array(10)\n        .fill(0)\n        .map((_, index) => ({\n          title: `Section ${index}`,\n          data: Array(10)\n            .fill(0)\n            .map((_, index) => `Item ${index}`),\n        })),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderSectionHeader = useCallback(\n    ({ section }) => (\n      <View style={styles.sectionHeaderContainer}>\n        <Text>{section.title}</Text>\n      </View>\n    ),\n    []\n  );\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetSectionList\n          sections={sections}\n          keyExtractor={(i) => i}\n          renderSectionHeader={renderSectionHeader}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  sectionHeaderContainer: {\n    backgroundColor: \"white\",\n    padding: 6,\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Handling with BottomSheetTextInput in React Native\nDESCRIPTION: This example demonstrates how to implement keyboard handling in a bottom sheet using the pre-integrated BottomSheetTextInput component. It creates a simple bottom sheet with a text input that properly responds to keyboard events on both iOS and Android platforms.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/keyboard-handling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport BottomSheet, { BottomSheetTextInput } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // variables\n  const snapPoints = useMemo(() => [\"25%\"], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet snapPoints={snapPoints}>\n        <View style={styles.contentContainer}>\n          <BottomSheetTextInput value=\"Awesome ðŸŽ‰\" style={styles.textInput} />\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: \"grey\",\n  },\n  textInput: {\n    alignSelf: \"stretch\",\n    marginHorizontal: 12,\n    marginBottom: 12,\n    padding: 12,\n    borderRadius: 12,\n    backgroundColor: \"grey\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bottom Sheet with Custom Footer in React Native\nDESCRIPTION: Sample app implementation showing how to use the custom footer component with a BottomSheet. The app creates a basic layout with a bottom sheet that includes the custom footer.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-footer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\nimport CustomFooter from './CustomFooter';\n\nconst App = () => {\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        index={1}\n        snapPoints={snapPoints}\n        footerComponent={CustomFooter}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetTextInput in React Native\nDESCRIPTION: Example implementation of a bottom sheet with integrated text input handling. The component demonstrates keyboard-aware behavior and includes styling for the input field. It uses the BottomSheetTextInput component along with BottomSheet and BottomSheetView components.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheettextinput.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetView, BottomSheetTextInput } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        keyboardBehavior=\"fillParent\"\n        enableDynamicSizing={false}\n        onChange={handleSheetChanges}\n      >\n        <BottomSheetTextInput style={styles.input} />\n        <BottomSheetView style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </BottomSheetView>\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  input: {\n    marginTop: 8,\n    marginBottom: 10,\n    borderRadius: 10,\n    fontSize: 16,\n    lineHeight: 20,\n    padding: 8,\n    backgroundColor: 'rgba(151, 151, 151, 0.25)',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull To Refresh with React Native Bottom Sheet\nDESCRIPTION: A complete example demonstrating how to implement pull-to-refresh functionality with BottomSheet and BottomSheetFlatList components. It creates a bottom sheet with two snap points and a flat list that supports pull-to-refresh.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/pull-to-refresh.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo } from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\"], []);\n\n  // callbacks\n  const handleRefresh = useCallback(() => {\n    console.log(\"handleRefresh\");\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <BottomSheet snapPoints={snapPoints}>\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={(i) => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n          refreshing={false}\n          onRefresh={handleRefresh}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Handle Component for React Native Bottom Sheet\nDESCRIPTION: A comprehensive example of a custom handle component for React Native Bottom Sheet. It uses Reanimated for animations and includes interpolations for smooth transitions between sheet positions. The component receives animated props for index and position, allowing dynamic styling based on the sheet's state.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-handle.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { StyleProp, StyleSheet, ViewStyle } from \"react-native\";\nimport { BottomSheetHandleProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n  useDerivedValue,\n} from \"react-native-reanimated\";\nimport { toRad } from \"react-native-redash\";\n\n// @ts-ignore\nexport const transformOrigin = ({ x, y }, ...transformations) => {\n  \"worklet\";\n  return [\n    { translateX: x },\n    { translateY: y },\n    ...transformations,\n    { translateX: x * -1 },\n    { translateY: y * -1 },\n  ];\n};\n\ninterface HandleProps extends BottomSheetHandleProps {\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Handle: React.FC<HandleProps> = ({ style, animatedIndex }) => {\n  //#region animations\n  const indicatorTransformOriginY = useDerivedValue(() =>\n    interpolate(animatedIndex.value, [0, 1, 2], [-1, 0, 1], Extrapolate.CLAMP)\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(() => [styles.header, style], [style]);\n  const containerAnimatedStyle = useAnimatedStyle(() => {\n    const borderTopRadius = interpolate(\n      animatedIndex.value,\n      [1, 2],\n      [20, 0],\n      Extrapolate.CLAMP\n    );\n    return {\n      borderTopLeftRadius: borderTopRadius,\n      borderTopRightRadius: borderTopRadius,\n    };\n  });\n  const leftIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.leftIndicator,\n    }),\n    []\n  );\n  const leftIndicatorAnimatedStyle = useAnimatedStyle(() => {\n    const leftIndicatorRotate = interpolate(\n      animatedIndex.value,\n      [0, 1, 2],\n      [toRad(-30), 0, toRad(30)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY.value },\n        {\n          rotate: `${leftIndicatorRotate}rad`,\n        },\n        {\n          translateX: -5,\n        }\n      ),\n    };\n  });\n  const rightIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.rightIndicator,\n    }),\n    []\n  );\n  const rightIndicatorAnimatedStyle = useAnimatedStyle(() => {\n    const rightIndicatorRotate = interpolate(\n      animatedIndex.value,\n      [0, 1, 2],\n      [toRad(30), 0, toRad(-30)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY.value },\n        {\n          rotate: `${rightIndicatorRotate}rad`,\n        },\n        {\n          translateX: 5,\n        }\n      ),\n    };\n  });\n  //#endregion\n\n  // render\n  return (\n    <Animated.View\n      style={[containerStyle, containerAnimatedStyle]}\n      renderToHardwareTextureAndroid={true}\n    >\n      <Animated.View style={[leftIndicatorStyle, leftIndicatorAnimatedStyle]} />\n      <Animated.View\n        style={[rightIndicatorStyle, rightIndicatorAnimatedStyle]}\n      />\n    </Animated.View>\n  );\n};\n\nexport default Handle;\n\nconst styles = StyleSheet.create({\n  header: {\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"white\",\n    paddingVertical: 14,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#fff\",\n  },\n  indicator: {\n    position: \"absolute\",\n    width: 10,\n    height: 4,\n    backgroundColor: \"#999\",\n  },\n  leftIndicator: {\n    borderTopStartRadius: 2,\n    borderBottomStartRadius: 2,\n  },\n  rightIndicator: {\n    borderTopEndRadius: 2,\n    borderBottomEndRadius: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Bottom Sheet in React Native with TypeScript\nDESCRIPTION: This snippet shows a complete React Native component that implements a bottom sheet using @gorhom/react-native-bottom-sheet. It includes state management, callbacks for sheet interactions, and rendering of sheet content and control buttons.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/scrollables.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetView style={styles.contentContainer}>\n          {data.map(renderItem)}\n        </BottomSheetView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Backdrop Component in React Native\nDESCRIPTION: Custom backdrop component implementation that uses React Native Reanimated for animation handling. The component receives animated props for index and position, and implements opacity interpolation based on the sheet's position. It uses useAnimatedStyle for animation and useMemo for style optimization.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-backdrop.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { BottomSheetBackdropProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n} from \"react-native-reanimated\";\n\nconst CustomBackdrop = ({ animatedIndex, style }: BottomSheetBackdropProps) => {\n  // animated variables\n  const containerAnimatedStyle = useAnimatedStyle(() => ({\n    opacity: interpolate(\n      animatedIndex.value,\n      [0, 1],\n      [0, 1],\n      Extrapolate.CLAMP\n    ),\n  }));\n\n  // styles\n  const containerStyle = useMemo(\n    () => [\n      style,\n      {\n        backgroundColor: \"#a8b5eb\",\n      },\n      containerAnimatedStyle,\n    ],\n    [style, containerAnimatedStyle]\n  );\n\n  return <Animated.View style={containerStyle} />;\n};\n\nexport default CustomBackdrop;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetBackdrop with React Native Bottom Sheet\nDESCRIPTION: This example demonstrates how to implement the BottomSheetBackdrop component with a BottomSheet. The backdrop is configured to disappear on index 1 and appear on index 2, with the sheet initially set to index 1. The component includes proper styling and event handlers for sheet changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetbackdrop.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport BottomSheet, { BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n\t// ref\n\tconst bottomSheetRef = useRef<BottomSheet>(null);\n\n\t// variables\n\tconst snapPoints = useMemo(() => [\"25%\", \"50%\", \"75%\"], []);\n\n\t// callbacks\n\tconst handleSheetChanges = useCallback((index: number) => {\n\t\tconsole.log(\"handleSheetChanges\", index);\n\t}, []);\n\n\t// renders\n\tconst renderBackdrop = useCallback(\n\t\t(props) => (\n\t\t\t<BottomSheetBackdrop\n\t\t\t\t{...props}\n\t\t\t\tdisappearsOnIndex={1}\n\t\t\t\tappearsOnIndex={2}\n\t\t\t/>\n\t\t),\n\t\t[]\n\t);\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<BottomSheet\n\t\t\t\tref={bottomSheetRef}\n\t\t\t\tindex={1}\n\t\t\t\tsnapPoints={snapPoints}\n\t\t\t\tbackdropComponent={renderBackdrop}\n\t\t\t\tonChange={handleSheetChanges}\n\t\t\t>\n\t\t\t\t<View style={styles.contentContainer}>\n\t\t\t\t\t<Text>Awesome ðŸŽ‰</Text>\n\t\t\t\t</View>\n\t\t\t</BottomSheet>\n\t\t</View>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 24,\n\t\tbackgroundColor: \"grey\",\n\t},\n\tcontentContainer: {\n\t\tflex: 1,\n\t\talignItems: \"center\",\n\t},\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Footer Component for React Native Bottom Sheet\nDESCRIPTION: This code demonstrates how to create a custom footer component that integrates with the BottomSheetFooter. The component includes animations that react to the sheet's position and a button to expand or collapse the sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-footer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  BottomSheetFooter,\n  BottomSheetFooterProps,\n  useBottomSheet,\n} from '@gorhom/bottom-sheet';\nimport { RectButton } from 'react-native-gesture-handler';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport { toRad } from 'react-native-redash';\n\nconst AnimatedRectButton = Animated.createAnimatedComponent(RectButton);\n\n// inherent the `BottomSheetFooterProps` to be able receive\n// `animatedFooterPosition`.\ninterface CustomFooterProps extends BottomSheetFooterProps {}\n\nconst CustomFooter = ({ animatedFooterPosition }: CustomFooterProps) => {\n  //#region hooks\n  // we need the bottom safe insets to avoid bottom notches.\n  const { bottom: bottomSafeArea } = useSafeAreaInsets();\n  // extract animated index and other functionalities\n  const { expand, collapse, animatedIndex } = useBottomSheet();\n  //#endregion\n\n  //#region styles\n  // create the arrow animated style reacting to the\n  // sheet index.\n  const arrowAnimatedStyle = useAnimatedStyle(() => {\n    const arrowRotate = interpolate(\n      animatedIndex.value,\n      [0, 1],\n      [toRad(0), toRad(-180)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: [{ rotate: `${arrowRotate}rad` }],\n    };\n  }, []);\n  const arrowStyle = useMemo(\n    () => [arrowAnimatedStyle, styles.arrow],\n    [arrowAnimatedStyle]\n  );\n  // create the content animated style reacting to the\n  // sheet index.\n  const containerAnimatedStyle = useAnimatedStyle(\n    () => ({\n      opacity: interpolate(\n        animatedIndex.value,\n        [-0.85, 0],\n        [0, 1],\n        Extrapolate.CLAMP\n      ),\n    }),\n    [animatedIndex]\n  );\n  const containerStyle = useMemo(\n    () => [containerAnimatedStyle, styles.container],\n    [containerAnimatedStyle]\n  );\n  //#endregion\n\n  //#region callbacks\n  const handleArrowPress = useCallback(() => {\n    // if sheet is collapsed, then we extend it,\n    // or the opposite.\n    if (animatedIndex.value === 0) {\n      expand();\n    } else {\n      collapse();\n    }\n  }, [expand, collapse, animatedIndex]);\n  //#endregion\n\n  return (\n    <BottomSheetFooter\n      // we pass the bottom safe inset\n      bottomInset={bottomSafeArea}\n      // we pass the provided `animatedFooterPosition`\n      animatedFooterPosition={animatedFooterPosition}\n    >\n      <AnimatedRectButton style={containerStyle} onPress={handleArrowPress}>\n        <Animated.Text style={arrowStyle}>âŒƒ</Animated.Text>\n      </AnimatedRectButton>\n    </BottomSheetFooter>\n  );\n};\n\n// footer style\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginHorizontal: 24,\n    marginBottom: 12,\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#80f',\n    shadowOffset: {\n      width: 0,\n      height: 12,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 8.0,\n\n    elevation: 8,\n  },\n  arrow: {\n    fontSize: 20,\n    height: 20,\n    textAlignVertical: 'center',\n    fontWeight: '900',\n    color: '#fff',\n  },\n});\n\nexport default CustomFooter;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetScrollView with BottomSheet in React Native\nDESCRIPTION: A comprehensive example showing how to implement BottomSheetScrollView within a BottomSheet component. The example demonstrates initialization, snap points configuration, handling sheet changes, and rendering scrollable content with appropriate styling.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetscrollview.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetScrollView } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    (item) => (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetScrollView contentContainerStyle={styles.contentContainer}>\n          {data.map(renderItem)}\n        </BottomSheetScrollView>\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetView in a React Native App\nDESCRIPTION: This example demonstrates how to use the BottomSheetView component within a React Native application. It shows the setup of a BottomSheet with multiple snap points, button controls for snapping to different positions, and the inclusion of the BottomSheetView inside the BottomSheet component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetview.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport BottomSheet, { BottomSheetView } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetView>\n          <Text>Awesome ðŸ”¥</Text>\n        </BottomSheetView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Footer Component for React Native Bottom Sheet\nDESCRIPTION: Implementation of a custom footer component that inherits BottomSheetFooterProps to receive animatedFooterPosition. The component includes animated styles that respond to the sheet's position and handles footer interactions.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-footer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  BottomSheetFooter,\n  BottomSheetFooterProps,\n  useBottomSheet,\n} from '@gorhom/bottom-sheet';\nimport { RectButton } from 'react-native-gesture-handler';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\nimport { toRad } from 'react-native-redash';\n\nconst AnimatedRectButton = Animated.createAnimatedComponent(RectButton);\n\n// inherent the `BottomSheetFooterProps` to be able receive\n// `animatedFooterPosition`.\ninterface CustomFooterProps extends BottomSheetFooterProps {}\n\nconst CustomFooter = ({ animatedFooterPosition }: CustomFooterProps) => {\n  //#region hooks\n  // we need the bottom safe insets to avoid bottom notches.\n  const { bottom: bottomSafeArea } = useSafeAreaInsets();\n  // extract animated index and other functionalities\n  const { expand, collapse, animatedIndex } = useBottomSheet();\n  //#endregion\n\n  //#region styles\n  // create the arrow animated style reacting to the\n  // sheet index.\n  const arrowAnimatedStyle = useAnimatedStyle(() => {\n    const arrowRotate = interpolate(\n      animatedIndex.value,\n      [0, 1],\n      [toRad(0), toRad(-180)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: [{ rotate: `${arrowRotate}rad` }],\n    };\n  }, []);\n  const arrowStyle = useMemo(\n    () => [arrowAnimatedStyle, styles.arrow],\n    [arrowAnimatedStyle]\n  );\n  // create the content animated style reacting to the\n  // sheet index.\n  const containerAnimatedStyle = useAnimatedStyle(\n    () => ({\n      opacity: interpolate(\n        animatedIndex.value,\n        [-0.85, 0],\n        [0, 1],\n        Extrapolate.CLAMP\n      ),\n    }),\n    [animatedIndex]\n  );\n  const containerStyle = useMemo(\n    () => [containerAnimatedStyle, styles.container],\n    [containerAnimatedStyle]\n  );\n  //#endregion\n\n  //#region callbacks\n  const handleArrowPress = useCallback(() => {\n    // if sheet is collapsed, then we extend it,\n    // or the opposite.\n    if (animatedIndex.value === 0) {\n      expand();\n    } else {\n      collapse();\n    }\n  }, [expand, collapse, animatedIndex]);\n  //#endregion\n\n  return (\n    <BottomSheetFooter\n      // we pass the bottom safe inset\n      bottomInset={bottomSafeArea}\n      // we pass the provided `animatedFooterPosition`\n      animatedFooterPosition={animatedFooterPosition}\n    >\n      <AnimatedRectButton style={containerStyle} onPress={handleArrowPress}>\n        <Animated.Text style={arrowStyle}>âŒƒ</Animated.Text>\n      </AnimatedRectButton>\n    </BottomSheetFooter>\n  );\n};\n\n// footer style\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginHorizontal: 24,\n    marginBottom: 12,\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#80f',\n    shadowOffset: {\n      width: 0,\n      height: 12,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 8.0,\n\n    elevation: 8,\n  },\n  arrow: {\n    fontSize: 20,\n    height: 20,\n    textAlignVertical: 'center',\n    fontWeight: '900',\n    color: '#fff',\n  },\n});\n\nexport default CustomFooter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Handling with BottomSheetTextInput in React Native\nDESCRIPTION: A simple example demonstrating keyboard handling in a BottomSheet component using the pre-integrated BottomSheetTextInput. The example shows how to create a basic layout with a text input that properly responds to keyboard events within the bottom sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/keyboard-handling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport BottomSheet, { BottomSheetTextInput } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // variables\n  const snapPoints = useMemo(() => [\"25%\"], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet snapPoints={snapPoints}>\n        <View style={styles.contentContainer}>\n          <BottomSheetTextInput value=\"Awesome ðŸŽ‰\" style={styles.textInput} />\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: \"grey\",\n  },\n  textInput: {\n    alignSelf: \"stretch\",\n    marginHorizontal: 12,\n    marginBottom: 12,\n    padding: 12,\n    borderRadius: 12,\n    backgroundColor: \"grey\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetScrollView in React Native\nDESCRIPTION: This example demonstrates how to use the BottomSheetScrollView component within a React Native application. It shows the setup of a BottomSheet with multiple snap points and a scrollable content area.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetscrollview.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport BottomSheet, { BottomSheetScrollView } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    (item) => (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetScrollView contentContainerStyle={styles.contentContainer}>\n          {data.map(renderItem)}\n        </BottomSheetScrollView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: \"white\",\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: \"#eee\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFooter in a React Native Application\nDESCRIPTION: This example demonstrates how to use the BottomSheetFooter component with a BottomSheet. It creates a customized footer that sticks to the bottom of the sheet with proper styling and positioning.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetfooter.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetFooter } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // renders\n  const renderFooter = useCallback(\n    props => (\n      <BottomSheetFooter {...props} bottomInset={24}>\n        <View style={styles.footerContainer}>\n          <Text style={styles.footerText}>Footer</Text>\n        </View>\n      </BottomSheetFooter>\n    ),\n    []\n  );\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        footerComponent={renderFooter}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  footerContainer: {\n    padding: 12,\n    margin: 12,\n    borderRadius: 12,\n    backgroundColor: '#80f',\n  },\n  footerText: {\n    textAlign: 'center',\n    color: 'white',\n    fontWeight: '800',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Detached Modal with React Native Bottom Sheet\nDESCRIPTION: This snippet demonstrates how to create a detached modal using the BottomSheet component from @gorhom/bottom-sheet. It sets up a basic React Native app with a detached bottom sheet, including styling and configuration options.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/detach-modal.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo, useRef } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport BottomSheet from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => [\"25%\"], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        snapPoints={snapPoints}\n        // add bottom inset to elevate the sheet\n        bottomInset={46}\n        // set `detached` to true\n        detached={true}\n        style={styles.sheetContainer}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: \"grey\",\n  },\n  sheetContainer: {\n    // add horizontal space\n    marginHorizontal: 24,\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using useBottomSheet Hook in React Native\nDESCRIPTION: Demonstrates how to use the useBottomSheet hook to access bottom sheet methods within sheet content components. This hook provides access to sheet controls like expand and animated values.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheet } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { expand } = useBottomSheet();\n\n  return (\n    <View>\n      <Button onPress={expand}>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet with BottomSheetView in React Native\nDESCRIPTION: Example implementation of a bottom sheet component using BottomSheetView. Shows how to create a bottom sheet with multiple snap points, handle state changes, and implement snap-to-position controls. Uses TypeScript with React Native and includes gesture handling.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/components/bottomsheetview.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from \"react\";\nimport { StyleSheet, View, Text, Button } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport BottomSheet, { BottomSheetView } from \"@gorhom/bottom-sheet\";\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []);\n\n  // callbacks\n  const handleSheetChange = useCallback((index) => {\n    console.log(\"handleSheetChange\", index);\n  }, []);\n  const handleSnapPress = useCallback((index) => {\n    sheetRef.current?.snapToIndex(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        enableDynamicSizing={false}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetView style={styles.contentContainer}>\n          <Text>Awesome ðŸ”¥</Text>\n        </BottomSheetView>\n      </BottomSheet>\n    </GestureHandlerRootView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    flex: 1,\n    padding: 36,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet with Custom Footer in React Native App\nDESCRIPTION: This code shows how to use the previously created CustomFooter component within a React Native application. It demonstrates initializing a BottomSheet component with the custom footer and configuring snap points.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-footer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\nimport CustomFooter from './CustomFooter';\n\nconst App = () => {\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // renders\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        index={1}\n        snapPoints={snapPoints}\n        footerComponent={CustomFooter}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Background Component with Color Interpolation in React Native Bottom Sheet\nDESCRIPTION: This snippet demonstrates how to create a custom background component for React Native Bottom Sheet that changes color based on the sheet position. It uses Reanimated's interpolateColor to transition from white to blue as the sheet rises, and properly implements the BottomSheetBackgroundProps interface.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-background.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { BottomSheetBackgroundProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  useAnimatedStyle,\n  interpolateColor,\n} from \"react-native-reanimated\";\n\nconst CustomBackground: React.FC<BottomSheetBackgroundProps> = ({\n  style,\n  animatedIndex,\n}) => {\n  //#region styles\n  const containerAnimatedStyle = useAnimatedStyle(() => ({\n    // @ts-ignore\n    backgroundColor: interpolateColor(\n      animatedIndex.value,\n      [0, 1],\n      [\"#ffffff\", \"#a8b5eb\"]\n    ),\n  }));\n  const containerStyle = useMemo(\n    () => [style, containerAnimatedStyle],\n    [style, containerAnimatedStyle]\n  );\n  //#endregion\n\n  // render\n  return <Animated.View pointerEvents=\"none\" style={containerStyle} />;\n};\n\nexport default CustomBackground;\n```\n\n----------------------------------------\n\nTITLE: Accessing Bottom Sheet Methods in React Native\nDESCRIPTION: Example showing how to create a reference to a BottomSheet component and use its methods. This snippet demonstrates creating a ref, implementing a close button, and rendering the bottom sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { Button } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  const handleClosePress = () => bottomSheetRef.current.close()\n\n  return (\n    <>\n      <Button title=\"Close Sheet\" onPress={handleClosePress} />\n      <BottomSheet ref={bottomSheetRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Snap Points in Bottom Sheet\nDESCRIPTION: Shows how to use useBottomSheetDynamicSnapPoints hook to handle dynamic content sizing. The hook manages animated snap points, handle height, and content height measurements.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport BottomSheet, {\n  useBottomSheetDynamicSnapPoints,\n} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const initialSnapPoints = useMemo(() => ['25%', 'CONTENT_HEIGHT'], []);\n\n  const {\n    animatedHandleHeight,\n    animatedSnapPoints,\n    animatedContentHeight,\n    handleContentLayout,\n  } = useBottomSheetDynamicSnapPoints(initialSnapPoints);\n\n  return (\n    //... other views\n    <BottomSheet\n      ref={bottomSheetRef}\n      snapPoints={animatedSnapPoints}\n      handleHeight={animatedHandleHeight}\n      contentHeight={animatedContentHeight}\n    >\n      <BottomSheetView\n        style={contentContainerStyle}\n        onLayout={handleContentLayout}\n      >\n        //... views to be measured\n      </BottomSheetView>\n    </BottomSheet>\n    //... other views\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Bottom Sheet in React Native\nDESCRIPTION: This snippet demonstrates how to initialize a Bottom Sheet component and use its methods in a React Native application. It shows the usage of useRef to create a reference to the BottomSheet and how to call the close method.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { Button } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  const handleClosePress = () => bottomSheetRef.current.close()\n\n  return (\n    <>\n      <Button title=\"Close Sheet\" onPress={handleClosePress} />\n      <BottomSheet ref={bottomSheetRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bottom Sheet Modal in React Native with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a basic React Native app with a Bottom Sheet Modal. It includes setting up the modal, defining snap points, handling modal presentation, and responding to sheet changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport {\n  BottomSheetModal,\n  BottomSheetModalProvider,\n} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // callbacks\n  const handlePresentModalPress = useCallback(() => {\n    bottomSheetModalRef.current?.present();\n  }, []);\n  const handleSheetChanges = useCallback((index: number) => {\n    console.log('handleSheetChanges', index);\n  }, []);\n\n  // renders\n  return (\n    <BottomSheetModalProvider>\n      <View style={styles.container}>\n        <Button\n          onPress={handlePresentModalPress}\n          title=\"Present Modal\"\n          color=\"black\"\n        />\n        <BottomSheetModal\n          ref={bottomSheetModalRef}\n          index={1}\n          snapPoints={snapPoints}\n          onChange={handleSheetChanges}\n        >\n          <View style={styles.contentContainer}>\n            <Text>Awesome ðŸŽ‰</Text>\n          </View>\n        </BottomSheetModal>\n      </View>\n    </BottomSheetModalProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Bottom Sheet Modal in React Native\nDESCRIPTION: Example showing how to create and present a Bottom Sheet Modal using useRef hook. Demonstrates basic setup and presenting the modal through a button press.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport {BottomSheetModal} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n  const handlePresentPress = () => bottomSheetModalRef.current.present()\n  return (\n    <>\n      <Button title=\"Present Sheet\" onPress={handlePresentPress} />\n      <BottomSheetModal ref={bottomSheetModalRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBottomSheet Hook in React Native\nDESCRIPTION: Demonstrates how to use the useBottomSheet hook to access bottom sheet methods like expand within sheet content or handle components.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheet } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { expand } = useBottomSheet();\n\n  return (\n    <View>\n      <Button onPress={expand}>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bottom Sheet Modal Hook in React Native\nDESCRIPTION: Example of implementing the useBottomSheetModal hook in a React Native component with dismiss functionality. The hook must be used within a BottomSheetModalProvider component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheetModal } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { dismiss, dismissAll } = useBottomSheetModal();\n\n  return (\n    <View>\n      <Button onPress={dismiss}>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Backdrop Component for React Native Bottom Sheet\nDESCRIPTION: This code demonstrates how to create a custom backdrop component for the React Native Bottom Sheet library. It uses Reanimated's interpolate function to animate the backdrop opacity based on the sheet's current position. The component receives animatedIndex and style props from the parent BottomSheet component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/guides/custom-backdrop.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { BottomSheetBackdropProps } from '@gorhom/bottom-sheet';\nimport Animated, { Extrapolate, interpolate } from 'react-native-reanimated';\n\nconst CustomBackdrop = ({ animatedIndex, style }: BottomSheetBackdropProps) => {\n  // animated variables\n  const animatedOpacity = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex]\n  );\n\n  // styles\n  const containerStyle = useMemo(\n    () => [\n      style,\n      {\n        backgroundColor: '#a8b5eb',\n        opacity: animatedOpacity,\n      },\n    ],\n    [style, animatedOpacity]\n  );\n\n  return <Animated.View style={containerStyle} />;\n};\n\nexport default CustomBackdrop;\n```\n\n----------------------------------------\n\nTITLE: Using useBottomSheet Hook in React Native Bottom Sheet\nDESCRIPTION: Demonstrates how to use the useBottomSheet hook to access bottom sheet methods like expand from within a sheet component. The hook can be used in any component nested inside the BottomSheet component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheet } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { expand } = useBottomSheet();\n\n  return (\n    <View>\n      <Button onPress={expand>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Navigation in Bottom Sheet - TypeScript\nDESCRIPTION: Demonstrates how to override safeAreaInsets when integrating React Navigation with Bottom Sheet. Sets insets to 0 to prevent double padding since the navigator won't cover full screen.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/react-navigation.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Set safeAreaInsets to 0 for React Navigation\nsafeAreaInsets: {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Background Component with Reanimated for React Native Bottom Sheet\nDESCRIPTION: This code snippet demonstrates how to create a custom background component for React Native Bottom Sheet that changes color based on the sheet's position. It uses react-native-reanimated to interpolate colors between white and light purple as the sheet moves, showcasing how to utilize the animatedIndex prop provided by the BottomSheetBackgroundProps interface.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/guides/custom-background.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { BottomSheetBackgroundProps } from '@gorhom/bottom-sheet';\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  interpolateColors,\n} from 'react-native-reanimated';\n\nconst CustomBackground = ({\n  animatedIndex,\n  style,\n}: BottomSheetBackgroundProps) => {\n  // animated variables\n  const animatedBackground = useMemo(\n    () =>\n      interpolateColors(animatedIndex, {\n        inputRange: [0, 1],\n        outputColorRange: ['#fff', '#a8b5eb'],\n      }),\n    [animatedIndex]\n  );\n\n  // styles\n  const containerStyle = useMemo(\n    () => [\n      style,\n      {\n        backgroundColor: animatedBackground,\n      },\n    ],\n    [style, animatedBackground]\n  );\n\n  return <Animated.View style={containerStyle} />;\n};\n\nexport default CustomBackground;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Background Component for React Native Bottom Sheet\nDESCRIPTION: This code snippet demonstrates how to create a custom background component for the React Native Bottom Sheet. It uses Reanimated to interpolate colors based on the sheet's animated index, creating a smooth transition effect.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-background.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { BottomSheetBackgroundProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  useAnimatedStyle,\n  interpolateColor,\n} from \"react-native-reanimated\";\n\nconst CustomBackground: React.FC<BottomSheetBackgroundProps> = ({\n  style,\n  animatedIndex,\n}) => {\n  //#region styles\n  const containerAnimatedStyle = useAnimatedStyle(() => ({\n    // @ts-ignore\n    backgroundColor: interpolateColor(\n      animatedIndex.value,\n      [0, 1],\n      [\"#ffffff\", \"#a8b5eb\"]\n    ),\n  }));\n  const containerStyle = useMemo(\n    () => [style, containerAnimatedStyle],\n    [style, containerAnimatedStyle]\n  );\n  //#endregion\n\n  // render\n  return <Animated.View pointerEvents=\"none\" style={containerStyle} />;\n};\n\nexport default CustomBackground;\n```\n\n----------------------------------------\n\nTITLE: Using Bottom Sheet Reference in React Native\nDESCRIPTION: Example of how to create and use a reference to a Bottom Sheet component. It demonstrates creating a ref, implementing a close handler function, and attaching the ref to a Bottom Sheet component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { Button } from 'react-native';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  const handleClosePress = () => bottomSheetRef.current.close()\n\n  return (\n    <>\n      <Button title=\"Close Sheet\" onPress={handleClosePress} />\n      <BottomSheet ref={bottomSheetRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBottomSheetModal Hook in React Native\nDESCRIPTION: Demonstrates how to use the useBottomSheetModal hook to access modal functionalities like dismiss and dismissAll within a component. This hook works in any component wrapped by BottomSheetModalProvider.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheetModal } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { dismiss, dismissAll } = useBottomSheetModal();\n\n  return (\n    <View>\n      <Button onPress={dismiss}>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFooter in React Native\nDESCRIPTION: This example demonstrates how to use the BottomSheetFooter component within a React Native application. It shows the setup of a BottomSheet with a custom footer, including styling and props configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/components/bottomsheetfooter.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport BottomSheet, { BottomSheetFooter } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // ref\n  const bottomSheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const snapPoints = useMemo(() => ['25%', '50%'], []);\n\n  // renders\n  const renderFooter = useCallback(\n    props => (\n      <BottomSheetFooter {...props} bottomInset={24}>\n        <View style={styles.footerContainer}>\n          <Text style={styles.footerText}>Footer</Text>\n        </View>\n      </BottomSheetFooter>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <BottomSheet\n        ref={bottomSheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        footerComponent={renderFooter}\n      >\n        <View style={styles.contentContainer}>\n          <Text>Awesome ðŸŽ‰</Text>\n        </View>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: 'grey',\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  footerContainer: {\n    padding: 12,\n    margin: 12,\n    borderRadius: 12,\n    backgroundColor: '#80f',\n  },\n  footerText: {\n    textAlign: 'center',\n    color: 'white',\n    fontWeight: '800',\n  },\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Snapping to Position in Bottom Sheet\nDESCRIPTION: The snapToPosition method allows snapping to a position out of provided snapPoints. It takes a position (in pixel or percentage) and optional animation configs as parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype snapToPosition = (\n  // position in pixel or percentage.\n  position: number,\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: snapToPosition Method for React Native Bottom Sheet\nDESCRIPTION: Method to snap the bottom sheet to a specific position that might be outside the provided snapPoints. It accepts a position parameter (in pixels or percentage) and optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype snapToPosition = (\n  // position in pixel or percentage.\n  position: number,\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bottom Sheet Modal with React Hooks\nDESCRIPTION: Demonstrates how to implement a Bottom Sheet Modal using useRef hook and accessing its methods. Shows basic setup with a present button and modal reference.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport {BottomSheetModal} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n\n  const handlePresentPress = () => bottomSheetModalRef.current.present()\n\n  return (\n    <>\n      <Button title=\"Present Sheet\" onPress={handlePresentPress} />\n      <BottomSheetModal ref={bottomSheetModalRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bottom Sheet Modal with React Hooks\nDESCRIPTION: Example showing how to initialize and use a Bottom Sheet Modal component with useRef hook. Demonstrates basic setup and presenting the modal.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/methods.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport {BottomSheetModal} from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  const bottomSheetModalRef = useRef<BottomSheetModal>(null);\n  const handlePresentPress = () => bottomSheetModalRef.current.present()\n  return (\n    <>\n      <Button title=\"Present Sheet\" onPress={handlePresentPress} />\n      <BottomSheetModal ref={bottomSheetModalRef}>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting snapPoints in React Native Bottom Sheet\nDESCRIPTION: Example of defining snapPoints for the Bottom Sheet component. Shows different ways to set snap points using numbers, percentages, or a mix of both.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsnapPoints={[200, 500]}\nsnapPoints={[200, '50%']}\nsnapPoints={['100%']}\n```\n\n----------------------------------------\n\nTITLE: snapToIndex Method for React Native Bottom Sheet\nDESCRIPTION: Method to snap the bottom sheet to one of the provided points from snapPoints. It accepts an index parameter and optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype snapToIndex = (\n  // snap point index.\n  index: number,\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow Styling to React Native Bottom Sheet\nDESCRIPTION: To add shadow to the bottom sheet, pass a 'style' prop with shadow styling configuration. The example uses inline JSX to demonstrate how to apply the style prop to a BottomSheet component.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/adding-shadow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet\n  style={{\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  }}\n  // ... other props\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing useBottomSheetModal Hook in React Native\nDESCRIPTION: Demonstrates how to use the useBottomSheetModal hook to access modal functionality within components wrapped in BottomSheetModalProvider. Shows basic implementation with dismiss functionality.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport { useBottomSheetModal } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n  const { dismiss, dismissAll } = useBottomSheetModal();\n\n  return (\n    <View>\n      <Button onPress={dismiss}>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animations with useBottomSheetSpringConfigs\nDESCRIPTION: Demonstrates using useBottomSheetSpringConfigs hook to generate spring animation configurations with customizable parameters like damping and stiffness.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport BottomSheet, { useBottomSheetSpringConfigs } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n\n  const animationConfigs = useBottomSheetSpringConfigs({\n    damping: 80,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.1,\n    restSpeedThreshold: 0.1,\n    stiffness: 500,\n  });\n\n  return (\n    <BottomSheet\n      // ... other props\n      animationConfigs={animationConfigs}\n    >\n      {CONTENT HERE}\n    </BottomSheet>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: expand Method for React Native Bottom Sheet\nDESCRIPTION: Method to expand the bottom sheet to the maximum provided point from snapPoints. It accepts optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype expand = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring snapPoints in React Native Bottom Sheet\nDESCRIPTION: Examples of different ways to set snapPoints prop which defines the positions where the bottom sheet can snap to. Values can be fixed numbers (in points) or percentages of container height.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsnapPoints={[200, 500]}\nsnapPoints={[200, '50%']}\nsnapPoints={[-1, '100%']}\n```\n\n----------------------------------------\n\nTITLE: collapse Method for React Native Bottom Sheet\nDESCRIPTION: Method to collapse the bottom sheet to the minimum provided point from snapPoints. It accepts optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype collapse = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bottom Sheet Handle with Animated Indicators\nDESCRIPTION: Complete implementation of a custom handle component for React Native Bottom Sheet. The component includes animated indicators that transform based on the bottom sheet position, using Reanimated 2 for smooth animations and interpolations.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-handle.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { StyleProp, StyleSheet, ViewStyle } from \"react-native\";\nimport { BottomSheetHandleProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n  useDerivedValue,\n} from \"react-native-reanimated\";\nimport { toRad } from \"react-native-redash\";\n\n// @ts-ignore\nexport const transformOrigin = ({ x, y }, ...transformations) => {\n  \"worklet\";\n  return [\n    { translateX: x },\n    { translateY: y },\n    ...transformations,\n    { translateX: x * -1 },\n    { translateY: y * -1 },\n  ];\n};\n\ninterface HandleProps extends BottomSheetHandleProps {\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Handle: React.FC<HandleProps> = ({ style, animatedIndex }) => {\n  //#region animations\n  const indicatorTransformOriginY = useDerivedValue(() =>\n    interpolate(animatedIndex.value, [0, 1, 2], [-1, 0, 1], Extrapolate.CLAMP)\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(() => [styles.header, style], [style]);\n  const containerAnimatedStyle = useAnimatedStyle(() => {\n    const borderTopRadius = interpolate(\n      animatedIndex.value,\n      [1, 2],\n      [20, 0],\n      Extrapolate.CLAMP\n    );\n    return {\n      borderTopLeftRadius: borderTopRadius,\n      borderTopRightRadius: borderTopRadius,\n    };\n  });\n  const leftIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.leftIndicator,\n    }),\n    []\n  );\n  const leftIndicatorAnimatedStyle = useAnimatedStyle(() => {\n    const leftIndicatorRotate = interpolate(\n      animatedIndex.value,\n      [0, 1, 2],\n      [toRad(-30), 0, toRad(30)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY.value },\n        {\n          rotate: `${leftIndicatorRotate}rad`,\n        },\n        {\n          translateX: -5,\n        }\n      ),\n    };\n  });\n  const rightIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.rightIndicator,\n    }),\n    []\n  );\n  const rightIndicatorAnimatedStyle = useAnimatedStyle(() => {\n    const rightIndicatorRotate = interpolate(\n      animatedIndex.value,\n      [0, 1, 2],\n      [toRad(30), 0, toRad(-30)],\n      Extrapolate.CLAMP\n    );\n    return {\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY.value },\n        {\n          rotate: `${rightIndicatorRotate}rad`,\n        },\n        {\n          translateX: 5,\n        }\n      ),\n    };\n  });\n  //#endregion\n\n  // render\n  return (\n    <Animated.View\n      style={[containerStyle, containerAnimatedStyle]}\n      renderToHardwareTextureAndroid={true}\n    >\n      <Animated.View style={[leftIndicatorStyle, leftIndicatorAnimatedStyle]} />\n      <Animated.View\n        style={[rightIndicatorStyle, rightIndicatorAnimatedStyle]}\n      />\n    </Animated.View>\n  );\n};\n\nexport default Handle;\n\nconst styles = StyleSheet.create({\n  header: {\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"white\",\n    paddingVertical: 14,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#fff\",\n  },\n  indicator: {\n    position: \"absolute\",\n    width: 10,\n    height: 4,\n    backgroundColor: \"#999\",\n  },\n  leftIndicator: {\n    borderTopStartRadius: 2,\n    borderBottomStartRadius: 2,\n  },\n  rightIndicator: {\n    borderTopEndRadius: 2,\n    borderBottomEndRadius: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animations with useBottomSheetSpringConfigs\nDESCRIPTION: Shows how to generate spring animation configurations using useBottomSheetSpringConfigs hook with customizable parameters like damping and stiffness.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport BottomSheet, { useBottomSheetSpringConfigs } from '@gorhom/bottom-sheet';\n\nconst SheetContent = () => {\n\n  const animationConfigs = useBottomSheetSpringConfigs({\n    damping: 80,\n    overshootClamping: true,\n    restDisplacementThreshold: 0.1,\n    restSpeedThreshold: 0.1,\n    stiffness: 500,\n  });\n\n  return (\n    <BottomSheet\n      // ... other props\n      animationConfigs={animationConfigs}\n    >\n      {CONTENT HERE}\n    </BottomSheet>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: close Method for React Native Bottom Sheet\nDESCRIPTION: Method to close the bottom sheet. It accepts optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype close = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetFlatList in React Native\nDESCRIPTION: Example implementation of BottomSheetFlatList component with snap points and item rendering. Shows integration with bottom sheet controls and basic list rendering functionality.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/scrollables.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetFlatList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={i => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dismiss Method Type Definition\nDESCRIPTION: Type definition for the dismiss method which closes and unmounts the bottom sheet modal. Accepts optional animation configuration parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype dismiss = (\n  // AnimationConfigs snap animation configs.\n  animationConfigs?: WithSpringConfig | WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Collapsing Bottom Sheet\nDESCRIPTION: The collapse method snaps to the minimum provided point from snapPoints. It takes optional animation configs as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype collapse = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Dismiss Method Type Definition\nDESCRIPTION: Type definition for the dismiss method that closes and unmounts the bottom sheet modal. Accepts optional animation configuration parameters for customizing the closing animation.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype dismiss = (\n  // AnimationConfigs snap animation configs.\n  animationConfigs?: WithSpringConfig | WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetScrollView in React Native\nDESCRIPTION: Example implementation of BottomSheetScrollView component for simple scrollable content. Shows basic scroll view integration with bottom sheet functionality.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/scrollables.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetScrollView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetScrollView\n          contentContainerStyle={styles.contentContainer}\n        >\n          {data.map(renderItem)}\n        </BottomSheetScrollView>\n      </BottomSheet>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Closing Bottom Sheet\nDESCRIPTION: The close method closes the bottom sheet. It takes optional animation configs as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype close = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Timing Animations with useBottomSheetTimingConfigs\nDESCRIPTION: Demonstrates how to generate timing animation configurations using useBottomSheetTimingConfigs hook with customizable duration and easing function.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport BottomSheet, { useBottomSheetTimingConfigs } from '@gorhom/bottom-sheet';\nimport { Easing } from 'react-native-reanimated';\n\nconst SheetContent = () => {\n\n  const animationConfigs = useBottomSheetTimingConfigs({\n    duration: 250,\n    easing: Easing.exp,\n  });\n\n  return (\n    <BottomSheet\n      // ... other props\n      animationConfigs={animationConfigs}\n    >\n      {CONTENT HERE}\n    </BottomSheet>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Present Method Type Definition\nDESCRIPTION: Type definition for the present method which mounts and presents the modal.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype present = () => void;\n```\n\n----------------------------------------\n\nTITLE: snapTo Method Type Definition\nDESCRIPTION: Type definition for the snapTo method, which animates the bottom sheet to a specific snap point index.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype snapTo = (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Resolving Gesture Conflicts with NativeViewGestureHandler\nDESCRIPTION: Shows how to wrap components with NativeViewGestureHandler to prevent gesture interaction conflicts between the Bottom Sheet and its content.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/troubleshooting.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\n\n<NativeViewGestureHandler disallowInterruption={true}>\n   <AwesomeComponent />\n</NativeViewGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: expand Method Type Definition\nDESCRIPTION: Type definition for the expand method, which animates the bottom sheet to the highest provided snap point.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype expand = () => void;\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollView and FlatList for React Native Bottom Sheet\nDESCRIPTION: To fix issues with horizontal FlatList or ScrollView on Android, use the components from react-native-gesture-handler instead of react-native.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/troubleshooting.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ScrollView,\n  FlatList\n} from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Importing Touchable Components for React Native Bottom Sheet\nDESCRIPTION: To resolve issues with pressables and touchables not working on Android, use the touchable components provided by the Bottom Sheet library instead of React Native's built-in components.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/troubleshooting.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n} from '@gorhom/bottom-sheet';\n```\n\n----------------------------------------\n\nTITLE: Importing Touchable Components for React Native Bottom Sheet\nDESCRIPTION: To resolve issues with Pressables and Touchables not working on Android, import and use the touchable components provided by the Bottom Sheet library instead of React Native's built-in components.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/troubleshooting.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n} from '@gorhom/bottom-sheet';\n```\n\n----------------------------------------\n\nTITLE: Using Gesture Handler Scroll Components for Android\nDESCRIPTION: Demonstrates the proper import of ScrollView and FlatList components from react-native-gesture-handler to ensure proper functionality on Android devices.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/troubleshooting.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ScrollView,\n  FlatList\n} from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Defining onAnimate Callback Type in TypeScript\nDESCRIPTION: Type definition for the onAnimate callback function that is triggered before the bottom sheet animates to a new position. Takes two number parameters representing the starting and ending indices.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/props.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype onAnimate = (fromIndex: number, toIndex: number) => void;\n```\n\n----------------------------------------\n\nTITLE: collapse Method Type Definition\nDESCRIPTION: Type definition for the collapse method, which animates the bottom sheet to the lowest provided snap point.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/methods.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype collapse = () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onChange callback for React Native Bottom Sheet\nDESCRIPTION: Type definition for the onChange callback function which is triggered when the sheet position changes. It receives the current index as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/props.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype onChange = (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: close Method Type Definition\nDESCRIPTION: Type definition for the close method, which closes the bottom sheet completely.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/methods.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype close = () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onChange Callback Type in TypeScript\nDESCRIPTION: Type definition for the onChange callback function that is triggered when the bottom sheet position changes. Takes a number parameter representing the new index.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/props.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype onChange = (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Dismiss Method Type Definition\nDESCRIPTION: Type definition for the dismiss method which closes and unmounts the modal.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/methods.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype dismiss = () => void;\n```\n\n----------------------------------------\n\nTITLE: Snapping to Index in Bottom Sheet\nDESCRIPTION: The snapToIndex method allows snapping to one of the provided points from snapPoints. It takes an index and optional animation configs as parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype snapToIndex = (\n  // snap point index.\n  index: number,\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: DismissAll Function Type Definition\nDESCRIPTION: Type definition for the dismissAll function that closes all currently mounted or presented modals.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype dismissAll = () => void;\n```\n\n----------------------------------------\n\nTITLE: Expanding Bottom Sheet\nDESCRIPTION: The expand method snaps to the maximum provided point from snapPoints. It takes optional animation configs as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype expand = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onDismiss Callback Type in TypeScript\nDESCRIPTION: Specifies the type definition for the onDismiss callback function. This function is called when the modal is dismissed (unmounted) and takes no parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype onDismiss = () => void;\n```\n\n----------------------------------------\n\nTITLE: DismissAll Function Type Definition\nDESCRIPTION: TypeScript type definition for the dismissAll function that closes all currently mounted or presented modals.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype dismissAll = () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onDismiss Callback Type in TypeScript\nDESCRIPTION: Type definition for the onDismiss callback function that gets called when the modal is dismissed (unmounted). The callback takes no parameters and returns void.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype onDismiss = () => void;\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Bottom Sheet Package\nDESCRIPTION: Command to install the React Native Bottom Sheet package using yarn. The instruction specifies version 4 or higher.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gorhom/bottom-sheet@^4\n```\n\n----------------------------------------\n\nTITLE: Force Closing Bottom Sheet\nDESCRIPTION: The forceClose method force closes the bottom sheet, preventing any interruptions until the sheet is closed. It takes optional animation configs as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/methods.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype forceClose = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: forceClose Method for React Native Bottom Sheet\nDESCRIPTION: Method to force close the bottom sheet, preventing any interruptions until the sheet is fully closed. It accepts optional animation configuration.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/methods.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype forceClose = (\n  // snap animation configs\n  animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Dismiss Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the dismiss function provided by useBottomSheetModal. It allows dismissing a modal by its name/key or the last presented modal if no key is provided.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype dismiss = (key?: string) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap Points in React Native Bottom Sheet\nDESCRIPTION: Examples of different ways to configure snap points for the bottom sheet. Snap points can be specified using numbers for exact heights, percentages as strings, or a combination of both.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsnapPoints={[200, 500]}\nsnapPoints={[200, '50%']}\nsnapPoints={['100%']}\n```\n\n----------------------------------------\n\nTITLE: Dismiss Function Type Definition\nDESCRIPTION: Type definition for the dismiss function that allows closing a specific modal by its key identifier.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype dismiss = (key: string) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Timing Animations with useBottomSheetTimingConfigs\nDESCRIPTION: Shows how to use useBottomSheetTimingConfigs hook to create timing-based animation configurations with custom duration and easing functions.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/hooks.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport BottomSheet, { useBottomSheetTimingConfigs } from '@gorhom/bottom-sheet';\nimport { Easing } from 'react-native-reanimated';\n\nconst SheetContent = () => {\n\n  const animationConfigs = useBottomSheetTimingConfigs({\n    duration: 250,\n    easing: Easing.exp,\n  });\n\n  return (\n    <BottomSheet\n      // ... other props\n      animationConfigs={animationConfigs}\n    >\n      {CONTENT HERE}\n    </BottomSheet>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BottomSheetFlashList Component in React Native\nDESCRIPTION: Example of importing the pre-integrated BottomSheetFlashList component which provides FlashList integration for React Native Bottom Sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/blog/2024-10-05-bottom-sheet-v5.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BottomSheetFlashList } from '@gorhom/bottom-sheet'\n```\n\n----------------------------------------\n\nTITLE: OnChange Callback Type Definition\nDESCRIPTION: Type definition for the onChange callback function that receives the current index as a parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/props.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype onChange = (index: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onAnimate callback for React Native Bottom Sheet\nDESCRIPTION: Type definition for the onAnimate callback function which is triggered when the sheet is about to animate to a new position. It receives both the source and destination indices as parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/props.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype onAnimate = (fromIndex: number, toIndex: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onAnimate Callback Function in TypeScript for React Native Bottom Sheet\nDESCRIPTION: This snippet defines the type for the onAnimate callback function. It is called when the sheet is about to animate to a new position, taking the from and to indices as parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/props.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype onAnimate = (fromIndex: number, toIndex: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Animation Configuration Type Definition\nDESCRIPTION: Type definition for animation configuration function that takes a point number, velocity number, and callback function as parameters.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/props.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype animationConfigs = (\n\tpoint: number,\n\tvelocity: number,\n\tcallback: () => void\n) => number;\n```\n\n----------------------------------------\n\nTITLE: Present Method Type Definition\nDESCRIPTION: Type definition for the present method which mounts and presents the bottom sheet modal to the initial snap point. Accepts optional data parameter.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype present = (\n  // Data to be passed to the modal.\n  data?: any\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Present Method Type Definition\nDESCRIPTION: Type definition for the present method that mounts and presents the bottom sheet modal to the initial snap point. Takes optional data parameter that can be passed to the modal.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/methods.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype present = (\n  // Data to be passed to the modal.\n  data?: any\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining onDismiss Callback Type in TypeScript for React Native Bottom Sheet Modal\nDESCRIPTION: This snippet defines the type for the onDismiss callback function used in the Bottom Sheet Modal component. The function takes no parameters and returns void.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/props.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype onDismiss = () => void;\n```\n\n----------------------------------------\n\nTITLE: DismissAll Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the dismissAll function provided by useBottomSheetModal. It dismisses all mounted/presented modals.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype dismissAll = () => void;\n```\n\n----------------------------------------\n\nTITLE: Styling React Native Bottom Sheet with Shadow\nDESCRIPTION: Implement shadow styling by passing a style prop with shadow configuration to the Bottom Sheet component. For optimal shadow generation, use React Native Shadow Generator tool by ethercreative. Note that shadow rendering differs between iOS and Android platforms.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/adding-shadow.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nstyle={{\n  shadowColor: \"#000\",\n  shadowOffset: {\n    width: 0,\n    height: -4,\n  },\n  shadowOpacity: 0.25,\n  shadowRadius: 4,\n  elevation: 5,\n}}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for React Native Bottom Sheet\nDESCRIPTION: Command to install the required dependencies for React Native Bottom Sheet: react-native-reanimated and react-native-gesture-handler using yarn.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-reanimated react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Bottom Sheet Package\nDESCRIPTION: Command to install the main bottom sheet package using yarn package manager. Specifies version 5 or higher.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gorhom/bottom-sheet@^5\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install the required dependencies (react-native-reanimated and react-native-gesture-handler) using yarn package manager.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-reanimated react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Bottom Sheet Package\nDESCRIPTION: Command to install the bottom sheet package using yarn. This installs version 2 of the library which is compatible with both Reanimated v1 and v2.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @gorhom/bottom-sheet@^2\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install the required dependencies (react-native-reanimated and react-native-gesture-handler) needed for the bottom sheet component to function properly.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/index.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-reanimated@^1 react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Expo for React Native Bottom Sheet\nDESCRIPTION: Command to install the required dependencies for React Native Bottom Sheet using Expo CLI, which ensures compatibility with the Expo ecosystem.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-reanimated react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Installing Redash Dependency for React Native\nDESCRIPTION: Command to install the Redash library, which is required for the custom handle component. Redash provides utilities for React Native Reanimated and Gesture Handler.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-handle.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-redash\n```\n\n----------------------------------------\n\nTITLE: Adding Web Support without Babel/SWC in React Native\nDESCRIPTION: Implements support for web platforms without requiring Babel or SWC, expanding the library's compatibility with different build setups.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nadded support for web without Babel/SWC\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the React Native Bottom Sheet Project\nDESCRIPTION: Installs the required dependencies for each package in the project. This is the first step to set up the development environment.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Updating Reanimated Extrapolate Usage in React Native\nDESCRIPTION: Replaces the deprecated Reanimated Extrapolate with Extrapolation to maintain compatibility with newer versions of the library.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreplaced deprecated reanimated Extrapolate with Extrapolation\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with NativeViewGestureHandler\nDESCRIPTION: To avoid gesture interaction conflicts between the Bottom Sheet and its content, wrap your component with NativeViewGestureHandler from react-native-gesture-handler. This ensures proper gesture handling and prevents unwanted interruptions.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/troubleshooting.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\n\n<NativeViewGestureHandler disallowInterruption={true}>\n   <AwesomeComponent />\n</NativeViewGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Handle Component for React Native Bottom Sheet\nDESCRIPTION: A React functional component that creates a custom handle for the Bottom Sheet. It uses Reanimated for animations and Redash for transformation utilities. The handle's appearance changes based on the sheet's position.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/guides/custom-handle.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport { BottomSheetHandleProps } from '@gorhom/bottom-sheet';\nimport Animated, { interpolate, Extrapolate } from 'react-native-reanimated';\nimport { transformOrigin, toRad } from 'react-native-redash';\n\ninterface HandleProps extends BottomSheetHandleProps {}\n\nconst Handle: React.FC<HandleProps> = ({ animatedIndex }) => {\n  //#region animations\n  const borderTopRadius = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [1, 2],\n        outputRange: [20, 0],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex]\n  );\n  const indicatorTransformOriginY = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [0, 1, 2],\n        outputRange: [-1, 0, 1],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex]\n  );\n  const leftIndicatorRotate = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [0, 1, 2],\n        outputRange: [toRad(-30), 0, toRad(30)],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex]\n  );\n  const rightIndicatorRotate = interpolate(animatedIndex, {\n    inputRange: [0, 1, 2],\n    outputRange: [toRad(30), 0, toRad(-30)],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => [\n      styles.header,\n      {\n        borderTopLeftRadius: borderTopRadius,\n        borderTopRightRadius: borderTopRadius,\n      },\n    ],\n    [borderTopRadius]\n  );\n  const leftIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.leftIndicator,\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY },\n        {\n          rotate: leftIndicatorRotate,\n          translateX: -5,\n        }\n      ),\n    }),\n    [indicatorTransformOriginY, leftIndicatorRotate]\n  );\n  const rightIndicatorStyle = useMemo(\n    () => ({\n      ...styles.indicator,\n      ...styles.rightIndicator,\n      transform: transformOrigin(\n        { x: 0, y: indicatorTransformOriginY },\n        {\n          rotate: rightIndicatorRotate,\n          translateX: 5,\n        }\n      ),\n    }),\n    [indicatorTransformOriginY, rightIndicatorRotate]\n  );\n  //#endregion\n\n  // render\n  return (\n    <Animated.View style={containerStyle}>\n      <Animated.View style={leftIndicatorStyle} />\n      <Animated.View style={rightIndicatorStyle} />\n    </Animated.View>\n  );\n};\n\nexport default Handle;\n\nconst styles = StyleSheet.create({\n  header: {\n    alignContent: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    paddingVertical: 14,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: -20,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 10,\n    elevation: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#fff',\n  },\n  indicator: {\n    position: 'absolute',\n    width: 10,\n    height: 4,\n    backgroundColor: '#999',\n  },\n  leftIndicator: {\n    borderTopStartRadius: 2,\n    borderBottomStartRadius: 2,\n  },\n  rightIndicator: {\n    borderTopEndRadius: 2,\n    borderBottomEndRadius: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the Video component from the theme to display a preview of the Bottom Sheet Modal. It uses the useBaseUrl hook to generate the correct URL for the video file.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/modal/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport Video from '@theme/Video';\n\n<Video\n  title=\"React Native Bottom Sheet Modal\"\n  url={useBaseUrl('video/bottom-sheet-modal-preview.mp4')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing getRefNativeTag with findNodeHandle in React Native\nDESCRIPTION: Updates the method used to get native component references, replacing the deprecated getRefNativeTag with findNodeHandle for better compatibility.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nreplace getRefNativeTag with findNodeHandle\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Component in React Native\nDESCRIPTION: Demonstrates how to render a video component using the Video theme component with a dynamic URL from useBaseUrl hook.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/dynamic-sizing.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  title=\"React Native Bottom Sheet Dynamic Sizing\"\n  url={useBaseUrl(\"video/bottom-sheet-dynamic-sizing-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with NativeViewGestureHandler\nDESCRIPTION: To avoid gesture interaction conflicts between the Bottom Sheet and its content, wrap your component with NativeViewGestureHandler from react-native-gesture-handler.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/troubleshooting.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\n\n<NativeViewGestureHandler disallowInterruption={true}>\n   <AwesomeComponent />\n</NativeViewGestureHandler>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetSectionList in React Native\nDESCRIPTION: Example implementation of BottomSheetSectionList component with section headers and nested data structure. Demonstrates section rendering and item organization within sections.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/scrollables.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetSectionList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const sections = useMemo(\n    () =>\n      Array(10)\n        .fill(0)\n        .map((_, index) => ({\n          title: `Section ${index}`,\n          data: Array(10)\n            .fill(0)\n            .map((_, index) => `Item ${index}`),\n        })),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderSectionHeader = useCallback(\n    ({ section }) => (\n      <View style={styles.sectionHeaderContainer}>\n        <Text>{section.title}</Text>\n      </View>\n    ),\n    []\n  );\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetSectionList\n          sections={sections}\n          keyExtractor={i => i}\n          renderSectionHeader={renderSectionHeader}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component with useBaseUrl in React\nDESCRIPTION: Code snippet demonstrating how to import and use the Video component with useBaseUrl hook to display a bottom sheet modal preview video in the documentation.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/modal/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport Video from '@theme/Video';\n\n<Video\n  title=\"React Native Bottom Sheet Modal\"\n  url={useBaseUrl('video/bottom-sheet-modal-preview.mp4')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollView and FlatList for React Native Bottom Sheet\nDESCRIPTION: To fix issues with horizontal FlatList or ScrollView not working properly on Android, use the ScrollView and FlatList components from react-native-gesture-handler instead of react-native.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/troubleshooting.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ScrollView,\n  FlatList\n} from 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component for Detach Modal\nDESCRIPTION: This code snippet demonstrates the usage of the Video component to showcase the detach modal feature of the React Native Bottom Sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/blog/2021-08-30-bottom-sheet-v4.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  title=\"React Native Bottom Sheet Detach Modal\"\n  url={useBaseUrl(\"video/bottom-sheet-detach-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Mocking BottomSheetTextInput for Testing in React Native\nDESCRIPTION: Adds BottomSheetTextInput to the mock file to improve testing capabilities for components using this custom input.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nadded BottomSheetTextInput to the mock file\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Touchable Components for Android Compatibility\nDESCRIPTION: Shows how to import and use custom touchable components from @gorhom/bottom-sheet to resolve gesture handling issues on Android platforms.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/troubleshooting.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TouchableOpacity,\n  TouchableHighlight,\n  TouchableWithoutFeedback,\n} from '@gorhom/bottom-sheet';\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component with Base URL in JSX\nDESCRIPTION: Example showing how to import and use the Video component with a base URL to display the bottom sheet modal preview video.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport Video from '@theme/Video';\n\n<Video\n  title=\"React Native Bottom Sheet Modal\"\n  url={useBaseUrl('video/bottom-sheet-modal-preview.mp4')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component for React Native Bottom Sheet Web Demo\nDESCRIPTION: This snippet demonstrates how to import and use the Video component to display a demo of React Native Bottom Sheet's web support functionality. It leverages Docusaurus's useBaseUrl for path handling.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/web-support.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport Video from \"@theme/Video\";\n\n<Video\n  title=\"React Native Bottom Sheet Web Support\"\n  url={useBaseUrl(\"video/bottom-sheet-web-support-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Scrollable Mocks in React Native\nDESCRIPTION: Updates scrollable mocks to match the equivalent React Native list components, improving the accuracy of tests involving scrollable content.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdated scrollables mocks with ReactNative list equivalent\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Expo\nDESCRIPTION: Command to install required dependencies using Expo CLI, which ensures compatibility with Expo managed workflows.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-reanimated react-native-gesture-handler\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component for Custom Footer\nDESCRIPTION: This code snippet shows how to use the Video component to display a preview of the custom footer feature in a React Native Bottom Sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/blog/2021-08-30-bottom-sheet-v4.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  title=\"React Native Bottom Sheet Custom Footer\"\n  url={useBaseUrl(\"video/bottom-sheet-footer-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Redash Dependency for React Native\nDESCRIPTION: Command to install the Redash library, which provides utilities for React Native Reanimated and Gesture Handler.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-2/guides/custom-handle.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-redash\n```\n\n----------------------------------------\n\nTITLE: Installing Redash Dependency for React Native Bottom Sheet\nDESCRIPTION: Command to install the Redash library which provides utility functions for React Native Reanimated and Gesture Handler.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/guides/custom-handle.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-redash\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component for Pull to Refresh\nDESCRIPTION: This code snippet shows how to use the Video component to display a preview of the pull-to-refresh feature in a React Native Bottom Sheet.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/blog/2021-08-30-bottom-sheet-v4.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  title=\"React Native Bottom Sheet Pull to Refresh\"\n  url={useBaseUrl(\"video/bottom-sheet-pull-to-refresh-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Component in React\nDESCRIPTION: This code snippet demonstrates how to import and use a custom Video component in a React application. It includes props for the video title and URL.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/blog/2021-08-30-bottom-sheet-v4.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  title=\"React Native Bottom Sheet Keyboard Handling\"\n  url={useBaseUrl(\"video/bottom-sheet-keyboard-handling-preview.mp4\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Backdrop Component in React Native\nDESCRIPTION: Implementation of a custom backdrop component that uses Reanimated for animations. The component receives animated props (animatedIndex and animatedPosition) and interpolates opacity based on the sheet's position. It applies a custom background color and animated styles to create a fade effect.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/versioned_docs/version-4/guides/custom-backdrop.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useMemo } from \"react\";\nimport { BottomSheetBackdropProps } from \"@gorhom/bottom-sheet\";\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n} from \"react-native-reanimated\";\n\nconst CustomBackdrop = ({ animatedIndex, style }: BottomSheetBackdropProps) => {\n  // animated variables\n  const containerAnimatedStyle = useAnimatedStyle(() => ({\n    opacity: interpolate(\n      animatedIndex.value,\n      [0, 1],\n      [0, 1],\n      Extrapolate.CLAMP\n    ),\n  }));\n\n  // styles\n  const containerStyle = useMemo(\n    () => [\n      style,\n      {\n        backgroundColor: \"#a8b5eb\",\n      },\n      containerAnimatedStyle,\n    ],\n    [style, containerAnimatedStyle]\n  );\n\n  return <Animated.View style={containerStyle} />;\n};\n\nexport default CustomBackdrop;\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on Android\nDESCRIPTION: Launches the example application on an Android emulator or connected device to test implementation changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Starting the Example App Packager\nDESCRIPTION: Starts the Metro bundler for the example application to test changes during development.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Executes the test suite to verify code functionality and prevent regressions.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Formatting with ESLint\nDESCRIPTION: Automatically fixes formatting errors detected by ESLint throughout the codebase.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on iOS\nDESCRIPTION: Launches the example application on an iOS simulator or connected device to test implementation changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Verifying TypeScript Code\nDESCRIPTION: Runs TypeScript type checking to ensure type safety in the codebase.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn typescript\n```\n\n----------------------------------------\n\nTITLE: Building Static Website for Production\nDESCRIPTION: Command to generate static content from the Docusaurus website into the build directory. The resulting files can be deployed to any static content hosting service.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Quality\nDESCRIPTION: Executes ESLint to enforce code quality standards and identify potential issues.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Deploying Website using SSH\nDESCRIPTION: Command to deploy the React Native Bottom Sheet documentation website using SSH authentication. This builds the website and pushes it to the deployment target.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: Command to deploy the React Native Bottom Sheet documentation website without SSH, using GitHub username for authentication. This builds the website and pushes to the gh-pages branch.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Bottom Sheet Website\nDESCRIPTION: Command to install all required dependencies for the React Native Bottom Sheet documentation website using Yarn package manager.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus Website\nDESCRIPTION: Command to start a local development server for the React Native Bottom Sheet documentation website. This launches a browser window and enables live reloading for most changes.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Dismiss Function Type Definition\nDESCRIPTION: TypeScript type definition for the dismiss function that closes a specific modal by key or the most recently presented modal if no key is provided.\nSOURCE: https://github.com/gorhom/react-native-bottom-sheet/blob/master/website/docs/modal/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype dismiss = (key?: string) => void;\n```"
  }
]