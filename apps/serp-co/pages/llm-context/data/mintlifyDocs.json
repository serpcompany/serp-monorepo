[
  {
    "owner": "mintlify",
    "repo": "docs",
    "content": "TITLE: Complete Mintlify Documentation Configuration Example\nDESCRIPTION: A comprehensive example of a complete mint.json configuration file including branding, navigation, colors, integrations, and other settings for a Mintlify documentation site.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Mintlify\",\n  \"logo\": {\n    \"light\": \"/logo/light.svg\",\n    \"dark\": \"/logo/dark.svg\"\n  },\n  \"favicon\": \"/favicon.svg\",\n  \"colors\": {\n    \"primary\": \"#16A34A\",\n    \"light\": \"#4ADE80\",\n    \"dark\": \"#166534\"\n  },\n  \"topbarLinks\": [\n    {\n      \"name\": \"Contact Us\",\n      \"url\": \"mailto:support@mintlify.com\"\n    }\n  ],\n  \"topbarCtaButton\": {\n    \"name\": \"Get Started\",\n    \"url\": \"https://mintlify.com/start\"\n  },\n  \"anchors\": [\n    {\n      \"name\": \"API Components\",\n      \"icon\": \"rectangle-terminal\",\n      \"color\": \"#f59f0b\",\n      \"url\": \"api-components\"\n    },\n    {\n      \"name\": \"Community\",\n      \"icon\": \"comments\",\n      \"color\": \"#2564eb\",\n      \"url\": \"https://mintlify.com/community\"\n    }\n  ],\n  \"navigation\": [\n    {\n      \"group\": \"Getting Started\",\n      \"pages\": [\"introduction\", \"quickstart\"]\n    },\n    {\n      \"group\": \"API Components\",\n      \"pages\": [\"api-playground/overview\", \"api-playground/configuration\"]\n    },\n    {\n      \"group\": \"Settings\",\n      \"pages\": [\"settings/global\", \"settings/page\"]\n    },\n    {\n      \"group\": \"Analytics\",\n      \"pages\": [\"analytics/posthog\"]\n    }\n  ],\n  \"footerSocials\": {\n    \"github\": \"https://github.com/mintlify\",\n    \"slack\": \"https://mintlify.com/community\",\n    \"x\": \"https://x.com/mintlify\"\n  },\n  \"integrations\": {\n    \"intercom\": \"APP_ID\",\n    \"frontchat\": \"CHAT_ID\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Reference in Mintlify\nDESCRIPTION: This snippet shows the structure for configuring API reference settings in Mintlify, including OpenAPI and AsyncAPI specifications, playground settings, and example configurations.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"api\": {\n  \"openapi\": \"string or array or object\",\n  \"asyncapi\": \"string or array or object\",\n  \"playground\": {\n    \"display\": \"\\\"interactive\\\" | \\\"simple\\\" | \\\"none\\\"\",\n    \"proxy\": \"boolean\"\n  },\n  \"examples\": {\n    \"languages\": \"array of string\",\n    \"defaults\": \"\\\"required\\\" | \\\"all\\\"\"\n  },\n  \"mdx\": {\n    \"auth\": {\n      \"method\": \"\\\"bearer\\\" | \\\"basic\\\" | \\\"key\\\" | \\\"cobo\\\"\",\n      \"name\": \"string\"\n    },\n    \"server\": \"string or array\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Integrations in Mintlify\nDESCRIPTION: This snippet shows the structure for configuring various third-party integrations in Mintlify, including analytics tools, chat widgets, and other services.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n  \"amplitude\": { \"apiKey\": \"string\" },\n  \"clearbit\": { \"publicApiKey\": \"string\" },\n  \"fathom\": { \"siteId\": \"string\" },\n  \"frontchat\": { \"snippetId\": \"string\" },\n  \"ga4\": { \"measurementId\": \"string matching ^G\" },\n  \"gtm\": { \"tagId\": \"string matching ^G\" },\n  \"heap\": { \"appId\": \"string\" },\n  \"hotjar\": { \"hjid\": \"string\", \"hjsv\": \"string\" },\n  \"intercom\": { \"appId\": \"string\" },\n  \"koala\": { \"publicApiKey\": \"string\" },\n  \"logrocket\": { \"appId\": \"string\" },\n  \"mixpanel\": { \"projectToken\": \"string\" },\n  \"osano\": { \"scriptSource\": \"string\" },\n  \"pirsch\": { \"id\": \"string\" },\n  \"posthog\": { \"apiKey\": \"string matching ^phc_\", \"apiHost\": \"string (uri)\" },\n  \"plausible\": { \"domain\": \"string\", \"server\": \"string\" },\n  \"segment\": { \"key\": \"string\" },\n  \"telemetry\": { \"enabled\": \"boolean\" },\n  \"cookies\": { \"key\": \"string\", \"value\": \"string\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Brand Settings in docs.json for Mintlify\nDESCRIPTION: This JSON snippet shows how to configure basic brand settings in the docs.json file for Mintlify. It includes setting the company name, logo paths, favicon, and primary color scheme.\nSOURCE: https://github.com/mintlify/docs/blob/main/quickstart.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"Your Company\"\n\"logo\": {\n  \"light\": \"/logo/light.svg\",\n  \"dark\": \"/logo/dark.svg\",\n  \"href\": \"https://yourcompany.com\"\n},\n\"favicon\": \"/favicon.svg\",\n\"colors\": {\n  \"primary\": \"#2AB673\",\n  \"light\": \"#55D799\",\n  \"dark\": \"#117866\",\n}\n```\n\n----------------------------------------\n\nTITLE: API Playground Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for setting up an API playground page, including title, description, OpenAPI endpoint specification, and display options.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Playground'\ndescription: 'Enable users to interact with your API'\nopenapi: 'POST /project/update/{projectId}'\nhideApiMarker: true\nicon: 'play'\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Blocks in Markdown\nDESCRIPTION: Illustrates how to create a fenced code block in Markdown, including specifying the programming language and an optional file name for syntax highlighting.\nSOURCE: https://github.com/mintlify/docs/blob/main/code.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing CodeGroup Component with Multiple Language Examples\nDESCRIPTION: This snippet demonstrates how to use the CodeGroup component to display code blocks in different programming languages with tabbed navigation. It includes examples in JavaScript, Python, and Java, each with a 'Hello World' program.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code-groups.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeGroup>\n\n```javascript helloWorld.js\nconsole.log(\"Hello World\");\n```\n\n```python hello_world.py\nprint('Hello World!')\n```\n\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n</CodeGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pages Navigation in JSON\nDESCRIPTION: Sets up a simple navigation structure by defining pages without hierarchy. Each entry must be a path to an existing file in the repository without the .mdx extension.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"pages\": [\n      \"overview\",\n      \"quickstart\",\n      \"advanced/components\",\n      \"advanced/integrations\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint Metadata in MDX\nDESCRIPTION: MDX frontmatter example for defining an API endpoint with HTTP method and URL. This metadata is used to generate the API documentation page with appropriate request and response examples.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/configuration.mdx#2025-04-20_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: 'Create new user'\napi: 'POST https://api.mintlify.com/user'\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication\nDESCRIPTION: Demonstrates setting up basic authentication in both docs.json configuration and page-specific metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/authentication.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"api\": {\n    \"mdx\": {\n      \"auth\": {\n        \"method\": \"basic\"\n      }\n    }\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Your page title\"\nauthMethod: \"basic\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Navigation Structure in JSON\nDESCRIPTION: Creates hierarchical navigation using groups that can contain pages or nested groups. This allows for organizing content into logical sections with custom group names and icons.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"groups\": [\n      {\n        \"group\": \"Getting Started\",\n        \"pages\": [\n          \"quickstart\",\n          {\n            \"group\": \"Editing\",\n            \"icon\": \"pen-paintbrush\",\n            \"pages\": [\"development\", \"web-editor\"]\n          }\n        ]\n      },\n      {\n        \"group\": \"Writing Content\",\n        \"pages\": [\"writing-content/page\", \"writing-content/text\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Top-Level Navigation Versioning in docs.json\nDESCRIPTION: This snippet demonstrates how to set up versioned navigation in docs.json by creating multiple version objects, each with its own groups and pages. This allows for maintaining documentation for different software versions.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/versions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"versions\": [\n      {\n        \"version\": \"1.0.0\",\n        \"groups\": [\n          {\n            \"group\": \"Getting Started\",\n            \"pages\": [\"v1/overview\", \"v1/quickstart\", \"v1/development\"]\n          }\n        ]\n      },\n      {\n        \"version\": \"2.0.0\",\n        \"groups\": [\n          {\n            \"group\": \"Getting Started\",\n            \"pages\": [\"v2/overview\", \"v2/quickstart\", \"v2/development\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown\nDESCRIPTION: Shows how to create links in markdown, including external links and internal links to other pages in the documentation. Root-relative links are recommended for internal linking.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[link to google](https://google.com)\n[link to text](/content/text)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Security Scheme Configuration\nDESCRIPTION: Shows how to configure authentication methods using OpenAPI securitySchemes and security fields. This setup defines how API endpoints are secured and what authentication credentials are required.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/writing-openapi.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\nsecurity:\n  - bearerAuth: []\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MDX Page Template for Mintlify\nDESCRIPTION: This Markdown snippet demonstrates the basic structure for creating a new page in Mintlify using MDX. It includes frontmatter for title, sidebar title, and description.\nSOURCE: https://github.com/mintlify/docs/blob/main/quickstart.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Page Title\"\nsidebarTitle: \"Sidebar title (optional - if different from page title)\"\ndescription: \"Subtitle (optional)\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Colors in docs.json\nDESCRIPTION: Example of how to configure the primary color in the docs.json file. The colors object is required and must at minimum define the primary color using a hexadecimal color code.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colors\": {\n    \"primary\": \"#ff0000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subtitles in Markdown\nDESCRIPTION: Shows how to create subsection headers using markdown syntax. Subtitles are best used for subsection headers and also create anchors for the table of contents.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Subtitles\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI with groups in navigation\nDESCRIPTION: JSON configuration showing how to structure OpenAPI documentation within groups in the navigation. This allows for more organization with a specified source file and output directory.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/setup.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"API Reference\",\n      \"groups\": [\n        {\n          \"group\": \"Endpoints\",\n          \"openapi\": {\n            \"source\": \"/path/to/openapi-1.json\",\n            \"directory\": \"api-reference\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI URL in docs.json for Mintlify\nDESCRIPTION: This JSON snippet shows how to specify the URL of an OpenAPI document in the docs.json file for Mintlify, enabling automatic API reference generation.\nSOURCE: https://github.com/mintlify/docs/blob/main/quickstart.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"link-to-your-openapi-file\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in Mintlify Documentation\nDESCRIPTION: Example configuration for setting up path redirects in mint.json, allowing redirection from source paths to destination paths.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"redirects\": [\n  {\n    \"source\": \"/source/path\",\n    \"destination\": \"/destination/path\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Table Structure\nDESCRIPTION: Demonstrates the syntax for creating a basic markdown table with three columns showing user properties. Uses hyphens to create headers and pipes to separate columns.\nSOURCE: https://github.com/mintlify/docs/blob/main/table.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description                           |\n| -------- | ------------------------------------- |\n| Name     | Full name of user                     |\n| Age      | Reported age                          |\n| Joined   | Whether the user joined the community |\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI in navigation tabs\nDESCRIPTION: JSON configuration example showing how to add an OpenAPI specification to a tab in docs.json. This setup will automatically generate API reference pages from the specified OpenAPI document.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/setup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"tabs\": [\n    {\n        \"tab\": \"API Reference\",\n        \"openapi\": \"https://petstore3.swagger.io/api/v3/openapi.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tabbed Navigation in JSON\nDESCRIPTION: Configures tabs to distinguish between different sections of documentation. Each tab can contain pages or link to external resources with the href property.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"API References\",\n      \"pages\": [\n        \"api-reference/get\",\n        \"api-reference/post\",\n        \"api-reference/delete\"\n      ]\n    },\n    {\n      \"tab\": \"SDKs\",\n      \"pages\": [\n        \"sdk/fetch\",\n        \"sdk/create\",\n        \"sdk/delete\",\n      ]\n    },\n    {\n      \"tab\": \"Blog\",\n      \"href\": \"https://external-link.com/blog\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wildcard Path Redirects in Mintlify\nDESCRIPTION: JSON configuration showing how to use wildcards (*) in redirect paths to match and redirect multiple URLs following a pattern.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/broken-links.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"redirects\": [\n  {\n    \"source\": \"/beta/:slug*\",\n    \"destination\": \"/v2/:slug*\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring API Base URL and Authentication in docs.json\nDESCRIPTION: Configuration for setting up the API server URL and authentication method in the docs.json file. This enables the API playground functionality with proper authentication.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/configuration.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n \"api\": {\n  \"mdx\": {\n    \"server\": \"https://mintlify.com/api\", // string array for multiple base URLs\n    \"auth\": {\n      \"method\": \"key\",\n      \"name\": \"x-api-key\" // options: bearer, basic, key.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAPI schema reference pages\nDESCRIPTION: Examples of how to create MDX files that reference specific OpenAPI schemas defined in the components.schemas section of an OpenAPI document.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/setup.mdx#2025-04-20_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n---\nopenapi-schema: OrderItem\n---\n```\n\nLANGUAGE: md\nCODE:\n```\n---\nopenapi-schema: \"schema-key\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Tabs in JSON\nDESCRIPTION: Configuration example for implementing navigation tabs with page links and external URLs. Demonstrates how to organize content under different tabs including API References, SDKs, and external blog links.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"API References\",\n      \"pages\": [\n        \"api-reference/get\",\n        \"api-reference/post\",\n        \"api-reference/delete\"\n      ]\n    },\n    {\n      \"tab\": \"SDKs\",\n      \"pages\": [\n        \"sdk/fetch\",\n        \"sdk/create\",\n        \"sdk/delete\",\n      ]\n    },\n    {\n      \"tab\": \"Blog\",\n      \"href\": \"https://external-link.com/blog\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic URL Redirects in Mintlify\nDESCRIPTION: JSON configuration for setting up 301 redirects in docs.json to redirect from a source path to a destination path.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/broken-links.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"redirects\": [\n  {\n    \"source\": \"/source/path\",\n    \"destination\": \"/destination/path\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO and Search in Mintlify\nDESCRIPTION: This snippet demonstrates the configuration options for SEO and search functionality in Mintlify, including meta tags, indexing settings, and search prompt customization.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"seo\": {\n  \"metatags\": \"object\",\n  \"indexing\": \"\\\"navigable\\\" | \\\"all\\\"\"\n},\n\"search\": {\n  \"prompt\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using oneOf for Multiple Schema Options in OpenAPI\nDESCRIPTION: Shows how to define multiple delivery address options using oneOf keyword with titled schemas for street addresses and PO boxes.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/advanced-features.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndelivery_address:\n  oneOf:\n    - title: StreetAddress\n      type: object\n      properties:\n        address_line_1:\n          type: string\n          description: The street address of the recipient\n        ...\n    - title: POBox\n      type: object\n      properties:\n        box_number:\n          type: string\n          description: The number of the PO Box\n        ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Analytics Integration Card Components in React\nDESCRIPTION: React JSX code for rendering Card components that display analytics integration options. Each Card includes an SVG icon, title, and link to the integration documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Card\n  title=\"Fathom\"\n  href=\"/integrations/analytics/fathom\"\n  horizontal\n  icon={/* SVG icon */}\n/>\n\n<Card\n  title=\"Clearbit\"\n  href=\"/integrations/analytics/clearbit\"\n  horizontal\n  icon={/* SVG icon */}\n/>\n\n<Card\n  title=\"Heap\"\n  href=\"/integrations/analytics/heap\"\n  horizontal\n  icon={/* SVG icon */}\n/>\n\n<Card\n  title=\"Segment\"\n  href=\"/integrations/analytics/segment\"\n  horizontal\n  icon={/* SVG icon */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI references in MDX files\nDESCRIPTION: Examples of how to manually create MDX files that reference OpenAPI operations, including the correct format for the page metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/setup.mdx#2025-04-20_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Get users\"\nopenapi: \"/path/to/openapi-1.json GET /users\"\n---\n```\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"title of the page\"\nopenapi: openapi-file-path method path\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing MDX Content with User Information in JSX\nDESCRIPTION: Demonstrates how to use the 'user' variable to personalize content based on user information. It includes a simple greeting and a more complex example that provides different instructions based on the user's plan.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/personalization.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nHello, {user.name ?? 'reader'}!\n```\n\nLANGUAGE: jsx\nCODE:\n```\nPersonalization is an enterprise feature. {\n  user.org === undefined\n    ? <>To access this feature, first create an account at the <a href=\"https://dashboard.mintlify.com/login\">Mintlify dashboard</a>.</>\n    : user.org.plan !== 'enterprise'\n      ? <>You are currently on the ${user.org.plan ?? 'free'} plan. To speak to our team about upgrading, <a href=\"mailto:sales@mintlify.com\">contact our sales team</a>.</>\n      : <>To request this feature for your enterprise org, <a href=\"mailto:sales@mintlify.com\">contact our team</a>.</>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Endpoint Files from OpenAPI in Mintlify\nDESCRIPTION: This Bash command uses the Mintlify scraper to automatically generate API endpoint files from an OpenAPI specification, simplifying the process of creating API documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/quickstart.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest openapi-file <path-or-url-to-openapi-file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grouped Navigation Structure in Mintlify JSON\nDESCRIPTION: This example illustrates how to create a hierarchical navigation structure using groups. It shows nested groups, custom icons, and references to specific pages within groups.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/pages.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"groups\": [\n      {\n        \"group\": \"Getting Started\",\n        \"pages\": [\n          \"quickstart\",\n          {\n            \"group\": \"Editing\",\n            \"icon\": \"pen-paintbrush\",\n            \"pages\": [\"development\", \"web-editor\"]\n          }\n        ]\n      },\n      {\n        \"group\": \"Writing Content\",\n        \"pages\": [\"writing-content/page\", \"writing-content/text\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Schemas with allOf in OpenAPI\nDESCRIPTION: Demonstrates how to combine object schemas using allOf keyword in OpenAPI, showing the combination of an Org schema with additional user properties.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/advanced-features.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\norg_with_users:\n  allOf:\n    - $ref: '#/components/schemas/Org'\n    - type: object\n      properties:\n        users:\n          type: array\n          description: An array containing all users in the organization\n...\ncomponents:\n  schemas:\n    Org:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the organization\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OpenAPI Endpoints in JSON\nDESCRIPTION: Example configuration for specifying multiple OpenAPI specification files using an array of URLs and paths in mint.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Handshake in TypeScript\nDESCRIPTION: This TypeScript code handles JWT creation and redirection for Mintlify authentication. It creates a JWT with user data, signs it using the EdDSA algorithm with a private key, and redirects the user to the docs callback URL.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/authentication-setup/jwt.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as jose from 'jose';\nimport { Request, Response } from 'express';\n\nconst TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;\n\nconst signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'EdDSA');\n\nexport async function handleRequest(req: Request, res: Response) {\n  const user = {\n    expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000), // 2 week session expiration\n    groups: res.locals.user.groups,\n    content: {\n      firstName: res.locals.user.firstName,\n      lastName: res.locals.user.lastName,\n    },\n  };\n\n  const jwt = await new jose.SignJWT(user)\n    .setProtectedHeader({ alg: 'EdDSA' })\n    .setExpirationTime('10 s') // 10 second JWT expiration\n    .sign(signingKey);\n\n  return res.redirect(`https://docs.foo.com/login/jwt-callback#${jwt}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ParamField for Query Parameters in JSX\nDESCRIPTION: Example of defining a query parameter using the ParamField component. This specifies a required string parameter with a default value of 'none' that is used for filtering users.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/params.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField query=\"filter\" type=\"string\" default=\"none\" required>\n  The filtering command used to sort through the users\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Creating Image Card in JSX\nDESCRIPTION: Demonstrates how to implement a card component with an image. The card displays an image at the top with a title and description below.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/cards.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card title=\"Image Card\" img=\"/images/card-with-image.png\">\n  Here is an example of a card with an image\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Settings for Mintlify Authentication\nDESCRIPTION: Example configuration for OAuth settings in Mintlify dashboard, including authorization URL, client ID, scopes, token URL, and optional Info API URL.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/authentication-setup/oauth.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Authorization URL\": \"https://auth.foo.com/authorization\",\n  \"Client ID\": \"ydybo4SD8PR73vzWWd6S0ObH\",\n  \"Scopes\": [\"docs-user-info\"],\n  \"Token URL\": \"https://auth.foo.com/exchange\",\n  \"Info API URL\": \"https://api.foo.com/docs/user-info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication\nDESCRIPTION: Shows how to set up bearer token authentication both globally in docs.json and per-page in MDX metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/authentication.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"api\": {\n    \"mdx\": {\n      \"auth\": {\n        \"method\": \"bearer\"\n      }\n    }\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Your page title\"\nauthMethod: \"bearer\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers for Info API in JavaScript\nDESCRIPTION: Example of setting CORS headers for the Info API endpoint to allow cross-origin requests from the docs domain. This configuration is crucial for enabling the Shared Session Handshake when the API and docs domains differ.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/personalization-setup/shared-session.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.use('/api/docs/user-info', (req, res) => {\n  res.header('Access-Control-Allow-Origin', 'https://docs.example.com');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  // ... rest of the endpoint logic\n});\n```\n\n----------------------------------------\n\nTITLE: Using ParamField for Body Parameters in JSX\nDESCRIPTION: Example of defining a body parameter using the ParamField component. This specifies a required integer parameter representing user age with a default value of 0.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/params.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"user_age\" type=\"integer\" default=\"0\" required>\n  The age of the user. Cannot be less than 0\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Card with Link in JSX\nDESCRIPTION: Example of creating a basic card component with a title, icon, and link functionality. The card includes a clickable area that navigates to a specified route.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/cards.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card title=\"Click on me\" icon=\"link\" href=\"/content/components/card-group\">\n  This is how you use a card with an icon and a link. Clicking on this card\n  brings you to the Card Group page.\n</Card>\n```\n\n----------------------------------------\n\nTITLE: OAuth Configuration Example JSON\nDESCRIPTION: Example configuration values for setting up OAuth 2.0 PKCE flow with Mintlify, including authorization URL, client ID, scopes, token URL, and info API URL.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/personalization-setup/oauth.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authorization_url\": \"https://auth.foo.com/authorization\",\n  \"client_id\": \"ydybo4SD8PR73vzWWd6S0ObH\",\n  \"scopes\": [\"docs-user-info\"],\n  \"token_url\": \"https://auth.foo.com/exchange\",\n  \"info_api_url\": \"https://api.foo.com/docs/user-info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Structure in TypeScript\nDESCRIPTION: This TypeScript code defines the shape of the User object, which includes properties for expiration time, user groups, custom content, and API playground inputs. This structure is used to personalize documentation based on user-specific data.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/sending-data.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype User = {\n  expiresAt?: number;\n  groups?: string[];\n  content?: Record<string, any>;\n  apiPlaygroundInputs?: {\n    header?: Record<string, any>;\n    query?: Record<string, any>;\n    cookie?: Record<string, any>;\n    server?: Record<string, string>;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Worker Script for Documentation Proxy\nDESCRIPTION: JavaScript code for a Cloudflare Worker that proxies documentation requests to Mintlify. The script handles requests to the /docs path and forwards them to a Mintlify subdomain while maintaining proper headers and request structure.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/subpath/cloudflare.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\nasync function handleRequest(request) {\n  try {\n    const urlObject = new URL(request.url);\n    // If the request is to the docs subdirectory\n    if (/^\\/docs/.test(urlObject.pathname)) {\n      // Then Proxy to Mintlify\n      const DOCS_URL = \"[SUBDOMAIN].mintlify.dev\";\n      const CUSTOM_URL = \"[YOUR_DOMAIN]\";\n\n      let url = new URL(request.url);\n      url.hostname = DOCS_URL;\n\n      let proxyRequest = new Request(url, request);\n\n      proxyRequest.headers.set(\"Host\", DOCS_URL);\n      proxyRequest.headers.set(\"X-Forwarded-Host\", CUSTOM_URL);\n      proxyRequest.headers.set(\"X-Forwarded-Proto\", \"https\");\n\n      return await fetch(proxyRequest);\n    }\n  } catch (error) {\n    // if no action found, play the regular request\n    return await fetch(request);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Tabs in Nested Hierarchy\nDESCRIPTION: Creates a complex navigation structure with top-level tabs containing groups of pages. Similar to anchors but with a different visual presentation for section division.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"tabs\": [\n      {\n        \"tab\": \"Tab 1\",\n        \"groups\": [\n          {\n            \"group\": \"Group 1\",\n            \"pages\": [\n              \"some-folder/file-1\",\n              \"another-folder/file-2\"\n              \"just-a-file\"\n            ]\n          }\n        ]\n      }\n      {\n        \"tab\": \"Tab 2\",\n        \"groups\": [\n          {\n            \"group\": \"Group 2\",\n            \"pages\": [\n              \"some-other-folder/file-1\",\n              \"various-different-folders/file-2\",\n              \"another-file\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout with CardGroup Component in JSX\nDESCRIPTION: This example demonstrates how to use the CardGroup component to create a 2-column grid containing four Card components. Each card has a title, icon, and content text.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/card-groups.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"First Card\" icon=\"square-1\">\n    Neque porro quisquam est qui dolorem ipsum quia dolor sit amet\n  </Card>\n  <Card title=\"Second Card\" icon=\"square-2\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  </Card>\n  <Card title=\"Third Card\" icon=\"square-3\">\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco\n  </Card>\n  <Card title=\"Fourth Card\" icon=\"square-4\">\n    Excepteur sint occaecat cupidatat non proident\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fathom Analytics Integration in docs.json\nDESCRIPTION: This snippet shows how to add Fathom analytics integration to a Mintlify documentation site by configuring the integrations section in docs.json. The siteId parameter is required and can be found in your Fathom script settings.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/fathom.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"fathom\": {\n        \"siteId\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Anchors in Nested Hierarchy\nDESCRIPTION: Creates a complex navigation structure with top-level anchors containing groups of pages. This allows for organizing content in a multi-level hierarchy for better content organization.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"anchors\": [\n      {\n        \"anchor\": \"Anchor 1\",\n        \"groups\": [\n          {\n            \"group\": \"Group 1\",\n            \"pages\": [\n              \"some-folder/file-1\",\n              \"another-folder/file-2\"\n              \"just-a-file\"\n            ]\n          }\n        ]\n      }\n      {\n        \"anchor\": \"Anchor 2\",\n        \"groups\": [\n          {\n            \"group\": \"Group 2\",\n            \"pages\": [\n              \"some-other-folder/file-1\",\n              \"various-different-folders/file-2\",\n              \"another-file\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudfront Distribution Paths\nDESCRIPTION: Configuration patterns for Cloudfront behaviors to route traffic between documentation and main site. Three paths are defined: /docs/*, /docs, and default (*) to handle different URL patterns.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/subpath/route53-cloudfront.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/docs/* -> [SUBDOMAIN].mintlify.dev\n/docs -> [SUBDOMAIN].mintlify.dev\nDefault (*) -> [staging-url]\n```\n\n----------------------------------------\n\nTITLE: Configuring Versions in Mintlify Documentation\nDESCRIPTION: This snippet shows how to configure versions in Mintlify documentation. It demonstrates both a default setup with version numbers and a localization setup with language options.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"versions\": [\"v1.0\", \"v1.1\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"versions\": [\n  {\n    \"name\": \"English\",\n    \"locale\": \"en\",\n  },\n  {\n    \"name\": \"Español\",\n    \"locale\": \"es\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Code Block in Markdown\nDESCRIPTION: Demonstrates how to create a basic code block by enclosing code in three backticks without specifying a language for syntax highlighting.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhelloWorld();\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```\nhelloWorld();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Handshake in Python\nDESCRIPTION: This Python code creates a FastAPI endpoint for JWT-based authentication with Mintlify. It generates a JWT containing user information, signs it with an EdDSA private key, and redirects the user to the documentation callback URL.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/authentication-setup/jwt.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport jwt # pyjwt\nimport os\n\nfrom datetime import datetime, timedelta\nfrom fastapi.responses import RedirectResponse\n\nprivate_key = os.getenv(MINTLIFY_JWT_PEM_SECRET_NAME, '')\n\n@router.get('/auth')\nasync def return_mintlify_auth_status(current_user):\n  jwt_token = jwt.encode(\n    payload={\n      'exp': int((datetime.now() + timedelta(seconds=10)).timestamp()),    # 10 second JWT expiration\n      'expiresAt': int((datetime.now() + timedelta(weeks=2)).timestamp()), # 1 week session expiration\n      'groups': ['admin'] if current_user.is_admin else [],\n      'content': {\n        'firstName': current_user.first_name,\n        'lastName': current_user.last_name,\n      },\n    },\n    key=private_key,\n    algorithm='EdDSA'\n  )\n\n  return RedirectResponse(url=f'https://docs.foo.com/login/jwt-callback#{jwt_token}', status_code=302)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Button in Navbar\nDESCRIPTION: Sets up a GitHub repository link as the primary button in the navigation bar. Uses the github type with custom label and href to the repository.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"navbar\": {\n  \"primary\": {\n    \"type\": \"github\",\n    \"label\": \"GitHub\",\n    \"href\": \"https://github.com/mintlify/docs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub Actions Workflow for SDK Generation in YAML\nDESCRIPTION: This GitHub Actions workflow configuration automates the SDK generation process. It defines triggers, permissions, and uses the Speakeasy SDK generation action.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/speakeasy.mdx#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Generate\npermissions:\n  checks: write\n  contents: write\n  pull-requests: write\n  statuses: write\n\"on\":\n  workflow_dispatch:\n    inputs:\n      force:\n        description: Force generation of SDKs\n        type: boolean\n        default: false\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  generate:\n    uses: speakeasy-api/sdk-generation-action/.github/workflows/workflow-executor.yaml@v15\n    with:\n      force: ${{ github.event.inputs.force }}\n      mode: pr\n      speakeasy_version: latest\n    secrets:\n      github_access_token: ${{ secrets.GITHUB_TOKEN }}\n      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable React Component in TypeScript\nDESCRIPTION: Demonstrates how to create a reusable React component as a snippet using an arrow function that takes props. This component can be imported and used in other MDX files.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/reusable-components.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyComponent = ({ title }) => (\n  <div>\n    <h1>{title}</h1>\n    <p>... snippet content ...</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Line Highlighting Example\nDESCRIPTION: Shows how to highlight specific lines in a code block by adding line numbers in curly braces after the language identifier. This example highlights lines 1, 3, 4, and 5.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code.mdx#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = \"Hello, World!\";\nfunction sayHello() {\n  console.log(greeting);\n}\nsayHello();\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript Line Highlighting Example {1,3-5}\nconst greeting = \"Hello, World!\";\nfunction sayHello() {\n  console.log(greeting);\n}\nsayHello();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Tag Manager Integration in docs.json\nDESCRIPTION: This JSON snippet shows the structure for adding Google Tag Manager integration to the docs.json file. It requires specifying the 'tagId' within the 'gtm' object under 'integrations'.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/google-tag-manager.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"gtm\": {\n        \"tagId\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Meta Tags in docs.json\nDESCRIPTION: This snippet shows how to set default meta tags in the docs.json file using the 'seo' field. It demonstrates setting a default og:image meta tag.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/seo.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"seo\": {\n    \"metatags\": {\n        \"og:image\": \"link to your default meta tag image\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeCard Component in React\nDESCRIPTION: A React functional component that renders a theme card with title, description, image and link. It's designed with a responsive two-column layout and includes hover effects for the image and link elements.\nSOURCE: https://github.com/mintlify/docs/blob/main/snippets/theme-card.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ThemeCard = ({ title, description, image, href }) => {\n  return (\n    <div className=\"flex mt-4 gap-12 group\">\n      <div className=\"flex-1\">\n        <h4 className=\"mt-0\">{title}</h4>\n        <div class=\"prose-sm prose-gray mb-4\">{description}</div>\n        <a href={href} className=\"not-prose text-sm font-medium text-gray-500 hover:text-gray-700 dark:hover:text-gray-300\">\n          See preview\n        </a>\n      </div>\n      <div className=\"flex-1\">\n        <a href={href}>\n          <img className=\"mt-0 rounded-xl hover:scale-105 transition-all\" src={image} alt={title} />\n        </a>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Component in TypeScript\nDESCRIPTION: Illustrates how to create a client-side component that checks for the availability of the 'document' object before rendering. This approach ensures compatibility with server-side rendering while allowing client-side content loading.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/reusable-components.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{/* `setTimeout` simulates a React.useEffect, which is called after the component is mounted. */}\nexport const ClientComponent = () => {\n  if (typeof document === \"undefined\") {\n    return null;\n  } else {\n    setTimeout(() => {\n      const clientComponent = document.getElementById(\"client-component\");\n      if (clientComponent) {\n        clientComponent.innerHTML = \"Hello, client-side component!\";\n      }\n    }, 1);\n\n    return <div id=\"client-component\"></div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResponseField Component in JSX\nDESCRIPTION: Example of how to implement the ResponseField component to document a response value. This component is used to define the return values of an API or to list types in documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/responses.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponseField name=\"response\" type=\"string\" required>\n  A response field example\n</ResponseField>\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Indexing in docs.json\nDESCRIPTION: This JSON snippet shows how to configure SEO indexing in the docs.json file to include hidden links in the sitemap.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/seo.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"seo\": {\n    \"indexing\": all\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom Component in MDX\nDESCRIPTION: Shows how to import a custom component snippet into a destination MDX file and use it by passing props. This example demonstrates the integration of custom components in Mintlify documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/reusable-components.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { MyComponent } from '/snippets/custom-component.mdx';\n\nLorem ipsum dolor sit amet.\n\n<MyComponent title={'Custom title'} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Privacy Platform Integration in docs.json\nDESCRIPTION: This snippet shows how to enable data privacy platform integration by adding the 'integrations' field to your docs.json file. The example demonstrates how to integrate Osano by specifying its source.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"integrations\": {\n    \"osano\": \"SOURCE\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Navbar Primary Button in JSON\nDESCRIPTION: Configures the main call-to-action button in the top navigation bar. Supports type, label, and href fields for full customization.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"navbar\": {\n  \"primary\": {\n    \"type\": \"button\",\n    \"label\": \"Get Started\",\n    \"href\": \"https://mintlify.com/get-started\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flowchart with Subgraphs in Mermaid\nDESCRIPTION: Demonstrates how to create a flowchart with multiple subgraphs showing different directional flows. The example illustrates the difference between linking to a subgraph directly versus linking to elements within a subgraph.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/mermaid-diagrams.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph subgraph1\n        direction TB\n        top1[top] --> bottom1[bottom]\n    end\n    subgraph subgraph2\n        direction TB\n        top2[top] --> bottom2[bottom]\n    end\n    %% ^ These subgraphs are identical, except for the links to them:\n\n    %% Link *to* subgraph1: subgraph1 direction is maintained\n    outside --> subgraph1\n    %% Link *within* subgraph2:\n    %% subgraph2 inherits the direction of the top-level graph (LR)\n    outside ---> top2\n```\n\n----------------------------------------\n\nTITLE: Configuring Plausible Analytics Options in docs.json\nDESCRIPTION: This snippet shows the structure for configuring Plausible Analytics in the docs.json file. It includes the required 'domain' field and an optional 'server' field.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/plausible.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"plausible\": {\n        \"domain\": \"required\",\n        \"server\": \"optional\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics Options in docs.json\nDESCRIPTION: Configuration schema for integrating various analytics platforms in Mintlify docs. Shows the required and optional fields for each supported analytics service including Amplitude, Clearbit, GA4, Hotjar, LogRocket, and others.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"amplitude\": {\n        \"apiKey\": \"required\"\n    },\n    \"clearbit\": {\n        \"publicApiKey\": \"required\"\n    },\n    \"cookies\": {\n      \"key\": \"required\",\n      \"value\": \"required\"\n    },\n    \"fathom\": {\n        \"siteId\": \"required\"\n    },\n    \"ga4\": {\n        \"measurementId\": \"required\"\n    },\n    \"gtm\": {\n        \"tagId\": \"required\"\n    },\n    \"hotjar\": {\n        \"hjid\": \"required\",\n        \"hjsv\": \"required\"\n    },\n    \"koala\": {\n        \"publicApiKey\": \"required\"\n    },\n    \"logrocket\": {\n        \"appId\": \"required\"\n    },\n    \"mixpanel\": {\n        \"projectToken\": \"required\"\n    },\n    \"pirsch\": {\n        \"id\": \"required\"\n    },\n    \"plausible\": {\n        \"domain\": \"required\"\n    },\n    \"posthog\": {\n        \"apiKey\": \"required\",\n        \"apiHost\": \"optional\"\n    },\n    \"segment\": {\n      \"key\": \"required\"\n    },\n    \"telemetry\": {\n      \"enabled\": \"boolean\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixpanel Integration in docs.json\nDESCRIPTION: JSON configuration block that enables Mixpanel analytics by specifying the required project token in the docs.json file. The projectToken field is mandatory for the integration to work.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/mixpanel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"mixpanel\": {\n        \"projectToken\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Endpoints with Absolute URLs in JSON\nDESCRIPTION: Example configuration for specifying an absolute URL to an OpenAPI specification file in mint.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"https://example.com/openapi.json\"\n```\n\n----------------------------------------\n\nTITLE: API Page Configuration\nDESCRIPTION: Examples of configuring API and OpenAPI endpoints in page metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\napi: \"GET /users\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Heap Analytics Integration in docs.json\nDESCRIPTION: Configuration structure for adding Heap analytics to a project. Requires setting up the integrations object with heap configuration and providing a valid appId.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/heap.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"heap\": {\n        \"appId\": \"required\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"heap\": {\n        \"appId\": \"1234567890\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing x-codeSamples in OpenAPI Paths\nDESCRIPTION: Illustrates how to add multiple code samples for different programming languages and use cases using the x-codeSamples extension in OpenAPI path definitions.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/advanced-features.mdx#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /plants:\n    get:\n      ...\n      x-codeSamples:\n        - lang: bash\n          label: List all unwatered plants\n          source: |\n            planter list -u\n        - lang: javascript\n          label: List all unwatered plants\n          source: |\n            const planter = require('planter');\n            planter.list({ unwatered: true });\n        - lang: bash\n          label: List all potted plants\n          source: |\n            planter list -p\n        - lang: javascript\n          label: List all potted plants\n          source: |\n            const planter = require('planter');\n            planter.list({ potted: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring GA4 Integration in Mintlify docs.json\nDESCRIPTION: This JSON snippet shows how to add the Google Analytics 4 Measurement ID to the docs.json configuration file. The Measurement ID (G-XXXXXXX) should be replaced with your actual GA4 ID obtained from your Google Analytics web stream.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/google-analytics.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"ga4\": {\n        \"measurementId\": \"G-XXXXXXX\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Server URL Configuration\nDESCRIPTION: Demonstrates how to specify base URLs for API endpoints using the OpenAPI servers field. This configuration is necessary for features like API Playground and determines where requests will be sent.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/writing-openapi.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://api.example.com/v1\n    description: Production server\n  - url: https://staging-api.example.com/v1\n    description: Staging server\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Anchors in JSON\nDESCRIPTION: Configuration for navigation anchors with icons and page links. Shows how to set up anchors for documentation sections, API references, and external links using Font Awesome or Lucide icons.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"anchors\": [\n    {\n      \"anchor\": \"Documentation\",\n      \"icon\": \"book-open\",\n      \"pages\": [\n        \"quickstart\",\n        \"development\",\n        \"navigation\"\n      ]\n    }\n    {\n      \"anchor\": \"API References\",\n      \"icon\": \"sqaure-terminal\",\n      \"pages\": [\n        \"api-reference/get\",\n        \"api-reference/post\",\n        \"api-reference/delete\"\n      ]\n    }\n    {\n      \"anchor\": \"Blog\",\n      \"href\": \"https://external-link.com/blog\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Segment Analytics in docs.json\nDESCRIPTION: This snippet shows the structure for adding Segment analytics configuration to the docs.json file. It requires a write key to be specified in the 'segment' object within the 'integrations' section.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/segment.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"segment\": {\n        \"key\": \"required\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pirsch Analytics in docs.json for Mintlify\nDESCRIPTION: This snippet shows the structure for adding Pirsch analytics configuration to the docs.json file. The 'id' field is required and should be obtained from the Pirsch dashboard under Settings > Developer > Identification Code.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/pirsch.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"pirsch\": {\n        \"id\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in JSX\nDESCRIPTION: Example showing how to structure a Tabs component with multiple Tab children, including embedded content and code examples.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/tabs.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs>\n  <Tab title=\"First Tab\">\n    ☝️ Welcome to the content that you can only see inside the first Tab.\n    ```java HelloWorld.java\n      class HelloWorld {\n          public static void main(String[] args) {\n              System.out.println(\"Hello, World!\");\n          }\n      }\n    ```\n  </Tab>\n  <Tab title=\"Second Tab\">\n    ✌️ Here's content that's only inside the second Tab.\n  </Tab>\n  <Tab title=\"Third Tab\">\n    💪 Here's content that's only inside the third Tab.\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Amplitude Analytics in docs.json\nDESCRIPTION: Configuration settings for adding Amplitude analytics integration to Mintlify documentation. Requires setting up the apiKey parameter in the integrations object of docs.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/amplitude.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"amplitude\": {\n        \"apiKey\": \"required\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"amplitude\": {\n        \"apiKey\": \"76bb138bf3fbf58186XXX00000\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Chat Topic Endpoint Definition\nDESCRIPTION: OpenAPI specification for the POST /chat/topic endpoint path. Defines the API route using YAML format.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/rest-api/chat/create-topic.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: POST /chat/topic\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Language Navigation in docs.json\nDESCRIPTION: This snippet demonstrates how to structure the docs.json file to support multiple languages in the documentation navigation. It shows separate navigation groups for English and Spanish versions of the same content.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/localization.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"languages\": [\n      {\n        \"language\": \"en\",\n        \"groups\": [\n          {\n            \"group\": \"Getting Started\",\n            \"pages\": [\"en/overview\", \"en/quickstart\", \"en/development\"]\n          }\n        ]\n      },\n      {\n        \"language\": \"es\",\n        \"groups\": [\n          {\n            \"group\": \"Getting Started\",\n            \"pages\": [\"es/overview\", \"es/quickstart\", \"es/development\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Pirsch Analytics Configuration in docs.json\nDESCRIPTION: This example demonstrates a complete Pirsch analytics configuration in the docs.json file, including a sample site ID. Replace the ID value with your actual Pirsch site ID.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/pirsch.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"pirsch\": {\n        \"id\": \"8Kw7OKxBfswOjnKGZa7P9Day8JmVYwTp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expandable Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Expandable component to create a toggleable section for displaying nested properties of a User Object. It shows the structure and usage of ResponseField and Expandable components.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/expandables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponseField name=\"user\" type=\"User Object\">\n  <Expandable title=\"properties\">\n    <ResponseField name=\"full_name\" type=\"string\">\n      The full name of the user\n    </ResponseField>\n\n    <ResponseField name=\"is_over_21\" type=\"boolean\">\n      Whether the user is over 21 years old\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHog Analytics in Mintlify docs.json\nDESCRIPTION: JSON configuration for adding PostHog analytics to a Mintlify documentation site. The integration requires an API key and optionally an API host if self-hosting PostHog.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/posthog.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"posthog\": {\n        \"apiKey\": \"YOUR_POSTHOG_PROJECT_API_KEY\",\n        \"apiHost\": \"optional\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Dropdowns in JSON\nDESCRIPTION: Configuration for dropdown navigation menus with icons. Demonstrates setting up consolidated dropdown menus for documentation, API references, and external links.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"dropdowns\": [\n    {\n      \"dropdown\": \"Documentation\",\n      \"icon\": \"book-open\",\n      \"pages\": [\n        \"quickstart\",\n        \"development\",\n        \"navigation\"\n      ]\n    }\n    {\n      \"dropdown\": \"API References\",\n      \"icon\": \"sqaure-terminal\",\n      \"pages\": [\n        \"api-reference/get\",\n        \"api-reference/post\",\n        \"api-reference/delete\"\n      ]\n    }\n    {\n      \"dropdown\": \"Blog\",\n      \"href\": \"https://external-link.com/blog\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Versioning with Tabs in docs.json\nDESCRIPTION: This snippet shows how to add versioning to a specific section of documentation by nesting a version within a tab structure. It creates a tabbed interface where only certain tabs contain versioned content.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/versions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tabs\": [\n    {\n      \"tab\": \"Guides\",\n      \"pages\": [\"overview\", \"quickstart\"]\n    },\n    {\n      \"tab\": \"SDKs\",\n      \"versions\": [\n        {\n          \"version\": \"latest\",\n          \"anchors\": [\n            {\n              \"anchor\": \"Javascript\",\n              \"pages\": [\"sdk/js/create\", \"sdk/js/edit\", \"sdk/js/delete\"]\n            },\n            {\n              \"anchor\": \"Python\",\n              \"pages\": [\"sdk/py/create\", \"sdk/py/edit\", \"sdk/py/delete\"]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Analytics Integration Cards with SVG Icons in HTML\nDESCRIPTION: This code snippet demonstrates how to create card components for various analytics integrations using HTML and inline SVG icons. Each card includes the integration name, a link to its documentation, and a custom SVG icon.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"Amplitude\"\n    href=\"/integrations/analytics/amplitude\"\n    horizontal\n    icon={<svg className=\"h-6 w-6\" width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M15.5988 8.04494C15.4989 7.91714 15.3924 7.84668 15.2646 7.84668C15.1728 7.85323 15.0876 7.88273 15.009 7.93188C14.0635 8.67087 12.7773 11.8055 11.7188 15.9412L12.6576 15.9477C14.5059 15.969 16.4165 15.9903 18.3008 16.0182C17.8027 14.1273 17.3341 12.5068 16.9015 11.1926C16.2674 9.28205 15.8414 8.42181 15.5988 8.04494Z\" fill=\"#1E61F0\"/>\n  <path d=\"M17.6964 0.078125C7.92405 0.078125 0 8.00217 0 17.7745C0 27.5468 7.92405 35.4709 17.6964 35.4709C27.4687 35.4709 35.3928 27.5468 35.3928 17.7745C35.3928 8.00217 27.4687 0.078125 17.6964 0.078125ZM30.7589 17.5615C30.7098 17.7598 30.5885 17.9531 30.4181 18.094C30.3968 18.1088 30.3755 18.1219 30.3542 18.1366L30.3329 18.1514L30.2903 18.1792L30.2543 18.2005C30.1199 18.271 29.9692 18.307 29.8135 18.307H21.4274C21.4913 18.584 21.5699 18.9035 21.6469 19.2459C22.109 21.2286 23.3248 26.5014 24.6242 26.5014H24.652H24.6668H24.6946C25.704 26.5014 26.2234 25.0382 27.3606 21.8316L27.3753 21.7955C27.5605 21.2843 27.7669 20.701 27.9865 20.0832L28.0439 19.9276C28.1291 19.7211 28.3634 19.6146 28.5698 19.6998C28.7189 19.7572 28.8254 19.9063 28.8254 20.0701C28.8254 20.1127 28.8189 20.1488 28.8107 20.1832L28.7615 20.3388C28.6403 20.7223 28.5207 21.2417 28.3699 21.8463C27.6948 24.6466 26.6707 28.8757 24.0556 28.8757H24.0343C22.3433 28.861 21.334 26.1606 20.8998 25.0022C20.0903 22.8409 19.4791 20.5453 18.8893 18.3152H11.1864L9.58718 23.439L9.56588 23.4177C9.32501 23.7946 8.82034 23.9076 8.44347 23.6668C8.20916 23.5176 8.0666 23.262 8.0666 22.9851V22.9573L8.16655 22.3739C8.38612 21.0598 8.65648 19.6867 8.9547 18.3087H5.68578L5.67104 18.2939C5.00251 18.194 4.54043 17.5697 4.64039 16.9012C4.71904 16.3817 5.1172 15.9705 5.62843 15.8771C5.75624 15.8623 5.88405 15.8558 6.01186 15.8623H6.16752C7.19817 15.8771 8.29272 15.8984 9.50034 15.9115C11.1995 9.00333 13.1674 5.49191 15.3565 5.48535C17.7013 5.48535 19.4431 10.8221 20.8359 16.0458L20.8424 16.0671C23.7 16.1245 26.756 16.2097 29.7185 16.4227L29.8463 16.4374C29.8954 16.4374 29.938 16.444 29.9888 16.4522H30.0036L30.0183 16.4588H30.0249C30.5312 16.5587 30.8654 17.0568 30.7589 17.5615Z\" fill=\"#1E61F0\"/>\n</svg>}\n  />\n\n<Card\n  title=\"Mixpanel\"\n  href=\"/integrations/analytics/mixpanel\"\n  horizontal\n  icon={\n    <svg\n      className=\"h-6 w-6\"\n      style={{ fill: \"#7856ff\" }}\n      viewBox=\"0 0 98 98\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M24.2391 58.7912C29.877 58.7912 34.4475 54.2207 34.4475 48.5828C34.4475 42.9449 29.877 38.3745 24.2391 38.3745C18.6012 38.3745 14.0308 42.9449 14.0308 48.5828C14.0308 54.2207 18.6012 58.7912 24.2391 58.7912Z\"></path>\n      <path d=\"M54.7787 55.7046C58.7675 55.7046 62.0011 52.4716 62.0011 48.4834C62.0011 44.4952 58.7675 41.2622 54.7787 41.2622C50.7899 41.2622 47.5563 44.4952 47.5563 48.4834C47.5563 52.4716 50.7899 55.7046 54.7787 55.7046Z\"></path>\n      <path d=\"M78.6018 52.0652C80.547 52.0652 82.1239 50.4883 82.1239 48.5431C82.1239 46.5979 80.547 45.021 78.6018 45.021C76.6566 45.021 75.0798 46.5979 75.0798 48.5431C75.0798 50.4883 76.6566 52.0652 78.6018 52.0652Z\"></path>\n    </svg>\n  }\n/>\n\n<!-- Additional card components for other integrations -->\n\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRocket Analytics Integration in docs.json\nDESCRIPTION: This JSON configuration snippet shows how to add LogRocket analytics to your Mintlify documentation. The configuration requires specifying an API key in the integrations section of your docs.json file.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/logrocket.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"logrocket\": {\n        \"apiKey\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ParamField for Path Parameters in JSX\nDESCRIPTION: Example of defining a path parameter using the ParamField component. This specifies a string parameter that is included in the URL path.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/params.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField path=\"param\" type=\"string\">\n  An example of a parameter field\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Example Plausible Analytics Configuration in docs.json\nDESCRIPTION: This example demonstrates how to configure Plausible Analytics for a specific domain in the docs.json file. It shows the minimal required configuration with just the domain specified.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/plausible.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"plausible\": {\n        \"domain\": \"docs.domain.com\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Navigation with Top-Level Anchors\nDESCRIPTION: Example of nested navigation hierarchy using anchors as top-level elements with grouped pages underneath.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"anchors\": [\n      {\n        \"anchor\": \"Anchor 1\",\n        \"groups\": [\n          {\n            \"group\": \"Group 1\",\n            \"pages\": [\n              \"some-folder/file-1\",\n              \"another-folder/file-2\"\n              \"just-a-file\"\n            ]\n          }\n        ]\n      }\n      {\n        \"anchor\": \"Anchor 2\",\n        \"groups\": [\n          {\n            \"group\": \"Group 2\",\n            \"pages\": [\n              \"some-other-folder/file-1\",\n              \"various-different-folders/file-2\",\n              \"another-file\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs in Mintlify Documentation\nDESCRIPTION: This snippet demonstrates how to configure navigational tabs in Mintlify documentation. It shows an example with two tabs: 'Writing Content' and 'API References'.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"tabs\": [\n  {\n    \"name\": \"Writing Content\",\n    \"url\": \"content\"\n  },\n  {\n    \"name\": \"API References\",\n    \"url\": \"api-playground\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Google Tag Manager Configuration in docs.json\nDESCRIPTION: This JSON example demonstrates a concrete implementation of Google Tag Manager integration in the docs.json file, using a sample tag ID 'GTM-MGBL4PW'.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/google-tag-manager.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"gtm\": {\n        \"tagId\": \"GTM-MGBL4PW\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Snippet with Variables in MDX\nDESCRIPTION: Demonstrates how to create a snippet with variables that can be filled in when imported. The variable 'word' is used as a placeholder to be filled with specific content.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMy keyword of the day is {word}.\n```\n\n----------------------------------------\n\nTITLE: Configuring HotJar Analytics Integration in docs.json\nDESCRIPTION: This JSON snippet shows how to add HotJar analytics configuration to the docs.json file. It requires specifying the HotJar ID (hjid) and HotJar snippet version (hjsv) in the integrations object.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/hotjar.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"hotjar\": {\n        \"hjid\": \"required\",\n        \"hjsv\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Navigation with Tabs and External Anchors\nDESCRIPTION: Advanced example showing tabs with external anchor links and grouped pages, demonstrating complex navigation hierarchy.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"tabs\": [\n      {\n        \"tab\": \"Tab 1\",\n        \"global\": {\n          \"anchors\": [\n            {\n              \"anchor\": \"Anchor 1\",\n              \"href\": \"https://mintlify.com/docs\"\n            }\n          ]\n        },\n        \"groups\": [\n          {\n            \"group\": \"Group 1\",\n            \"pages\": [\n              \"some-folder/file-1\",\n              \"another-folder/file-2\"\n              \"just-a-file\"\n            ]\n          }\n        ]\n      }\n      {\n        \"tab\": \"Tab 2\",\n        \"groups\": [\n          {\n            \"group\": \"Group 2\",\n            \"pages\": [\n              \"some-other-folder/file-1\",\n              \"various-different-folders/file-2\",\n              \"another-file\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fathom Analytics Integration in docs.json\nDESCRIPTION: A concrete example of configuring Fathom analytics integration in a Mintlify docs.json file with a sample site ID. This shows how to format the integration with an actual siteId value.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/fathom.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"fathom\": {\n        \"siteId\": \"YSVMSDAY\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Koala Analytics Integration with API Key\nDESCRIPTION: A practical example showing how to integrate Koala analytics using an actual public API key value in the docs.json configuration.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/koala.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"koala\": {\n        \"publicApiKey\": \"pk_1a1882\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Update Component in Markdown\nDESCRIPTION: Example showing how to implement multiple Update components to create changelogs with labels, descriptions, and tags. Each component creates an entry that will appear in the documentation with the specified metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/update.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Update label=\"2024-10-12\" description=\"v0.1.1\" tags={[\"Filter 1\"]}>\n  This is how you use a changelog with a label \n  and a description.\n</Update>\n<Update label=\"2024-10-11\" description=\"v0.1.0\" tags={[\"Filter 2\"]}>\n  This is how you use a changelog with a label \n  and a description.\n</Update>\n```\n\n----------------------------------------\n\nTITLE: Configuring Koala Analytics Integration in docs.json\nDESCRIPTION: This code shows how to configure the Koala analytics integration in the docs.json file. The integration requires a public API key specified in the configuration object.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/koala.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"koala\": {\n        \"publicApiKey\": \"required\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Links with Anchors\nDESCRIPTION: Configures global navigation anchors for external links. This is used when tabs or anchors are solely for listing external resources with custom icons.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"global\": {\n    \"anchors\": [\n      {\n        \"anchor\": \"Slack\",\n        \"icon\": \"slack\",\n        \"href\": \"https://slack.com\n      },\n      {\n        \"anchor\": \"API Reference\",\n        \"icon\": \"code\",\n        \"href\": \"https://api-reference.com\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Consent for GDPR Compliance\nDESCRIPTION: This snippet demonstrates how to specify local storage key and value for cookie consent tracking to meet GDPR requirements. When these values are set, telemetry will be disabled for users who haven't provided consent.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/overview.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"integrations\": {\n    \"cookies\": {\n      \"key\": \"LOCAL STORAGE KEY\",\n      \"value\": \"LOCAL STORAGE VALUE\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Example PostHog Integration Configuration\nDESCRIPTION: Example JSON configuration showing a PostHog integration with an actual API key. This example uses the default PostHog cloud instance (app.posthog.com) without specifying a custom API host.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/posthog.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"posthog\": {\n        \"apiKey\": \"phc_TXdpocbYTeZVm5VJmMzHTMrCofBQu3e0kN7HGMNGTVW\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Component in JSX\nDESCRIPTION: Example showing how to implement the Steps component with three sequential steps. Each step includes a title and content specific to that step.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/steps.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n  <Step title=\"First Step\">\n    These are instructions or content that only pertain to the first step.\n  </Step>\n  <Step title=\"Second Step\">\n    These are instructions or content that only pertain to the second step.\n  </Step>\n  <Step title=\"Third Step\">\n    These are instructions or content that only pertain to the third step.\n  </Step>\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Configuring Clearbit Analytics in docs.json\nDESCRIPTION: Shows how to add Clearbit analytics integration to your Mintlify documentation by configuring the integrations object in docs.json. Requires specifying a public API key for Clearbit.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/clearbit.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"clearbit\": {\n        \"publicApiKey\": \"required\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"clearbit\": {\n        \"publicApiKey\": \"pk_1a1882\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Group with Multiple Accordions in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the AccordionGroup component to wrap multiple Accordion components. It shows examples of accordions with and without icons, and includes various content types within the accordions.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/accordion-groups.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AccordionGroup>\n  <Accordion title=\"FAQ without Icon\">\n    You can put other components inside Accordions.\n\n    ```java HelloWorld.java\n    class HelloWorld {\n        public static void main(String[] args) {\n            System.out.println(\"Hello, World!\");\n        }\n    }\n    ```\n\n    Check out the [Accordion](/content/components/accordions) docs for all the supported props.\n  </Accordion>\n\n  <Accordion title=\"FAQ with Icon\" icon=\"alien-8bit\">\n    Check out the [Accordion](/content/components/accordions) docs for all the supported props.\n  </Accordion>\n\n  <Accordion title=\"FAQ without Icon\">\n    Check out the [Accordion](/content/components/accordions) docs for all the supported props.\n  </Accordion>\n</AccordionGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Osano Integration Configuration in docs.json\nDESCRIPTION: This snippet shows the structure for adding Osano cookie consent manager integration to the docs.json configuration file. The integration requires specifying the Osano source URL in the osano field.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/osano.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"osano\": \"SOURCE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading from mint.json to docs.json\nDESCRIPTION: Command to run the upgrade process that generates a docs.json file based on your existing mint.json configuration.\nSOURCE: https://github.com/mintlify/docs/blob/main/snippets/config-upgrade.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmintlify upgrade\n```\n\n----------------------------------------\n\nTITLE: Python Expandable Code Block Example\nDESCRIPTION: Demonstrates an expandable code block for larger code examples by adding [expandable] after the title. This example shows a complete Python library implementation with classes and methods.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass Book:\n    title: str\n    author: str\n    isbn: str\n    checked_out: bool = False\n    due_date: Optional[datetime] = None\n\nclass Library:\n    def __init__(self):\n        self.books: Dict[str, Book] = {}\n        self.checkouts: Dict[str, List[str]] = {}  # patron -> list of ISBNs\n\n    def add_book(self, book: Book) -> None:\n        if book.isbn in self.books:\n            raise ValueError(f\"Book with ISBN {book.isbn} already exists\")\n        self.books[book.isbn] = book\n\n    def checkout_book(self, isbn: str, patron: str, days: int = 14) -> None:\n        if patron not in self.checkouts:\n            self.checkouts[patron] = []\n\n        book = self.books.get(isbn)\n        if not book:\n            raise ValueError(\"Book not found\")\n\n        if book.checked_out:\n            raise ValueError(\"Book is already checked out\")\n\n        if len(self.checkouts[patron]) >= 3:\n            raise ValueError(\"Patron has reached checkout limit\")\n\n        book.checked_out = True\n        book.due_date = datetime.now() + timedelta(days=days)\n        self.checkouts[patron].append(isbn)\n\n    def return_book(self, isbn: str) -> float:\n        book = self.books.get(isbn)\n        if not book or not book.checked_out:\n            raise ValueError(\"Book not found or not checked out\")\n\n        late_fee = 0.0\n        if datetime.now() > book.due_date:\n            days_late = (datetime.now() - book.due_date).days\n            late_fee = days_late * 0.50\n\n        book.checked_out = False\n        book.due_date = None\n\n        # Remove from patron's checkouts\n        for patron, books in self.checkouts.items():\n            if isbn in books:\n                books.remove(isbn)\n                break\n\n        return late_fee\n\n    def search(self, query: str) -> List[Book]:\n        query = query.lower()\n        return [\n            book for book in self.books.values()\n            if query in book.title.lower() or query in book.author.lower()\n        ]\n\ndef main():\n    library = Library()\n\n    # Add some books\n    books = [\n        Book(\"The Hobbit\", \"J.R.R. Tolkien\", \"978-0-261-10295-4\"),\n        Book(\"1984\", \"George Orwell\", \"978-0-452-28423-4\"),\n    ]\n\n    for book in books:\n        library.add_book(book)\n\n    # Checkout and return example\n    library.checkout_book(\"978-0-261-10295-4\", \"patron123\")\n    late_fee = library.return_book(\"978-0-261-10295-4\")\n    print(f\"Late fee: ${late_fee:.2f}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript Expandable Example [expandable]\nconst greeting = \"Hello, World!\";\nfunction sayHello() {\n  console.log(greeting);\n}\nsayHello();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Chat Integration in docs.json\nDESCRIPTION: Shows how to add Front Chat widget integration to a Mintlify documentation site by adding the frontchat property with a CHAT_ID value to the integrations object in the docs.json configuration file.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/support/front.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"frontchat\": \"CHAT_ID\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"frontchat\": \"1365d046d7c023e9b030ce90d02d093a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Card with Custom CTA in JSX\nDESCRIPTION: Shows how to create a card with custom call-to-action text and arrow indicator. This example includes additional properties for controlling the link behavior and appearance.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/cards.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n  title=\"Link card\"\n  icon=\"link\"\n  href=\"/content/components/card-groups\"\n  arrow=\"true\"\n  cta=\"Click here\"\n>\n  This is how you use a card with an icon and a link. Clicking on this card\n  brings you to the Card Group page.\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Widget Integrations in docs.json\nDESCRIPTION: This JSON snippet shows how to enable support integrations by adding an 'integrations' field to the docs.json configuration file. It demonstrates adding app IDs for Intercom and Front chat widgets.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/support/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"integrations\": {\n    \"intercom\": \"APP_ID\",\n    \"frontchat\": \"CHAT_ID\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Styling Navbar and Footer with CSS in Mintlify\nDESCRIPTION: This CSS snippet demonstrates how to customize the navbar background color and padding along with adding margin to the footer in Mintlify documentation. These styles can be added to a style.css file in your repository.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/custom-scripts.mdx#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#navbar {\n  background: \"#fffff2\";\n  padding: 1rem;\n}\n\nfooter {\n  margin-top: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication\nDESCRIPTION: Shows how to configure API key authentication with a custom header name in docs.json and page metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/authentication.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"api\": {\n    \"mdx\": {\n      \"auth\": {\n        \"method\": \"key\",\n        \"name\": \"x-api-key\"\n      }\n    }\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Your page title\"\nauthMethod: \"key\"\n---\n```\n\n----------------------------------------\n\nTITLE: Example Banner Configuration in JSON\nDESCRIPTION: JSON configuration example for creating a banner with markdown support, allowing for links and formatting within the banner content.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"🚀 Banner is live! [Learn more](mintlify.com)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltip Component in React JSX\nDESCRIPTION: Demonstrates how to add a basic tooltip that appears on hover. The component takes a 'tip' prop for the tooltip content and wraps the text that triggers the tooltip.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/tooltips.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip tip=\"This is a tooltip!\">Hover over me</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stainless OpenAPI Code Samples\nDESCRIPTION: Basic configuration for enabling Mintlify code samples in Stainless OpenAPI setup.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/stainless.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi:\n  code_samples: mintlify\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI using package managers\nDESCRIPTION: Commands to install Mintlify CLI globally using npm, yarn, or pnpm. Requires Node.js version 19 or higher as a prerequisite.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Page Title and Description Metadata\nDESCRIPTION: Demonstrates how to set both title and description metadata for a page.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Page Titles and Metadata\"\ndescription: \"Setting the title and metadata for navigation and SEO\"\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Note Callouts in JSX\nDESCRIPTION: This snippet demonstrates how to add a Note callout to content using the Note component. Note callouts are typically used to provide additional context or information that supplements the main content.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/callouts.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Note>This adds a note in the content</Note>\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Mode Only in Mintlify Documentation\nDESCRIPTION: Configuration example to force a Mintlify documentation site to use only light mode by hiding the mode toggle and setting the default to light.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"modeToggle\": {\n  \"default\": \"light\",\n  \"isHidden\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Frame Component Usage in JSX\nDESCRIPTION: This snippet provides a basic example of using the Frame component to wrap an image. It demonstrates the component's structure without additional props.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/frames.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img src=\"/path/image.jpg\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Configuring Speakeasy Workflow for Code Sample Generation in YAML\nDESCRIPTION: This snippet shows how to add a target in the Speakeasy workflow configuration to generate code samples alongside SDK generation. It specifies the output file for code samples as 'codeSamples.yaml'.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/speakeasy.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  my-target:\n    target: typescript\n    source: my-source\n    codeSamples:\n      output: codeSamples.yaml\n```\n\n----------------------------------------\n\nTITLE: Description Metadata Example\nDESCRIPTION: Shows how to add a description that appears under the page title.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ndescription: \"Your description goes here.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Callouts in JSX\nDESCRIPTION: This snippet shows how to add a Warning callout using the Warning component. Warning callouts are used to highlight potential issues or cautions that users should be aware of.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/callouts.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Warning>This raises a warning to watch out for</Warning>\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Mintlify\nDESCRIPTION: This snippet shows the configuration option for handling 404 errors in Mintlify, specifically whether to redirect to the home page when a page is not found.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"errors\": {\n  \"404\": {\n    \"redirect\": \"boolean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blockquotes in Markdown\nDESCRIPTION: Demonstrates how to create single-line and multi-line blockquotes in markdown using the '>' symbol.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n```\n\n----------------------------------------\n\nTITLE: Configuring Speakeasy Workflow for Mintlify Docs in YAML\nDESCRIPTION: This YAML configuration defines the workflow for combining the API spec with Speakeasy code samples. It specifies input sources, overlays from SDK repositories, and the output file.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/speakeasy.mdx#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflowVersion: 1.0.0\nsources:\n  docs-source:\n    inputs:\n      - location: {{your_api_spec}} # local or remote references supported\n    overlays:\n      - location: https://raw.githubusercontent.com/{{your_sdk_repo_1}}/codeSamples.yaml\n      - location: https://raw.githubusercontent.com/{{your_sdk_repo_2}}/codeSamples.yaml\n      - location: https://raw.githubusercontent.com/{{your_sdk_repo_3}}/codeSamples.yaml\n    output: openapi.yaml\ntargets: {}\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Schema in Markdown\nDESCRIPTION: Shows the basic required metadata structure for a Mintlify page with title.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"title of the page\"\n---\n```\n\n----------------------------------------\n\nTITLE: SEO Metadata Configuration\nDESCRIPTION: Example of setting meta tags for social media sharing.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\"twitter:image\": \"/images/your-photo.jpg\"\n---\n```\n\n----------------------------------------\n\nTITLE: Frame Component with Caption in JSX\nDESCRIPTION: This example shows how to use the Frame component with a caption prop. It demonstrates adding descriptive text below the wrapped content.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/frames.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame caption=\"Caption Text\">\n  <img src=\"/path/image.jpg\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchored Navigation in JSON\nDESCRIPTION: Configures anchor-based navigation similar to tabs but with a different visual presentation. Anchors can contain pages or link to external resources.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": {\n  \"anchors\": [\n    {\n      \"anchor\": \"API References\",\n      \"pages\": [\n        \"api-reference/get\",\n        \"api-reference/post\",\n        \"api-reference/delete\"\n      ]\n    },\n    {\n      \"anchor\": \"SDKs\",\n      \"pages\": [\n        \"sdk/fetch\",\n        \"sdk/create\",\n        \"sdk/delete\",\n      ]\n    },\n    {\n      \"anchor\": \"Blog\",\n      \"href\": \"https://external-link.com/blog\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Superscript and Subscript in HTML\nDESCRIPTION: Demonstrates how to create superscript and subscript text using HTML tags within markdown documents.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<sup>superscript</sup>\n<sub>subscript</sub>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Project Update Endpoint\nDESCRIPTION: This OpenAPI specification describes the POST endpoint for updating a project using its project ID. The endpoint follows the pattern POST /project/update/{projectId}.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/rest-api/update/trigger.mdx#2025-04-20_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: \"POST /project/update/{projectId}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Reusable Variables from MDX\nDESCRIPTION: Demonstrates how to export variables and objects from a snippet file that can be imported and used in other documentation files.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myName = 'my name';\n\nexport const myObject = { fruit: 'strawberries' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Navbar Links in JSON\nDESCRIPTION: Adds links to the top navigation bar. Each link requires a label and href field to specify the text and destination.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/navigation.mdx#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"navbar\": {\n  \"links\": [\n    {\n      \"label\": \"Community\",\n      \"href\": \"https://mintlify.com/community\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar Icon Configuration\nDESCRIPTION: Shows how to add icons from Font Awesome or Lucide to sidebar items with optional icon type.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Code Block\"\nicon: \"rectangle-code\"\niconType: \"solid\"\n---\n```\n\n----------------------------------------\n\nTITLE: Including LaTeX Equations in Markdown\nDESCRIPTION: Shows how to include inline and block LaTeX equations in markdown documents using single and double dollar signs.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n$(a^2 + b^2 = c^2)$\n\n$$\\exists \\, x \\notin [0,1]$$\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Rewrites for Documentation Subpath\nDESCRIPTION: Configuration setup in vercel.json to enable hosting documentation at a /docs subpath. The rewrites direct both the base /docs path and any nested paths to the corresponding Mintlify documentation subdomain.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/subpath/vercel.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/docs\",\n      \"destination\": \"https://[subdomain].mintlify.dev/docs\"\n    },\n    {\n      \"source\": \"/docs/:match*\",\n      \"destination\": \"https://[subdomain].mintlify.dev/docs/:match*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Titles in Markdown\nDESCRIPTION: Demonstrates how to create section headers using markdown syntax. Titles are best used for section headers and create anchors for the table of contents.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Titles\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in JSX for Mintlify Documentation\nDESCRIPTION: Demonstrates how to render a basic check icon with a specified size of 32 pixels using the Icon component.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/icons.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon icon=\"check\" size={32} />\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify Scraping Package\nDESCRIPTION: Command to install the Mintlify scraping package using npm. This is required before using the scraping tools.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @mintlify/scraping\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inline Code in Markdown\nDESCRIPTION: Shows how to denote words or phrases as code using backticks in Markdown.\nSOURCE: https://github.com/mintlify/docs/blob/main/code.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n```\n\n----------------------------------------\n\nTITLE: Installing MCP CLI Package\nDESCRIPTION: Command to install the @mintlify/mcp CLI package via npm, which is required to set up an MCP Server for documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/generate.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @mintlify/mcp\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Markdown\nDESCRIPTION: Illustrates various text formatting options in markdown, including bold, italic, and strikethrough. These can be combined for more complex formatting.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**bold**\n_italic_\n~strikethrough~\n**_bold and italic_**\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Page Navigation in Mintlify JSON Configuration\nDESCRIPTION: This snippet shows how to configure a flat navigation structure using the 'pages' array in the navigation object. It demonstrates referencing individual MDX files without file extensions.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/pages.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"pages\": [\n      \"overview\",\n      \"quickstart\",\n      \"advanced/components\",\n      \"advanced/integrations\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Mintlify CLI\nDESCRIPTION: Command to install the latest version of the Mintlify CLI globally using npm, which is required for the upgrade process.\nSOURCE: https://github.com/mintlify/docs/blob/main/snippets/config-upgrade.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Images Using Markdown Syntax\nDESCRIPTION: Basic Markdown syntax for adding images to Mintlify documentation. The path should start with a forward slash to ensure images display correctly in production.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![title](/path/image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify MCP Server via NPM\nDESCRIPTION: Command to install the Mintlify MCP server through the command line interface using npx.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/quickstart.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/mcp@latest add mintlify\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme in docs.json\nDESCRIPTION: This snippet shows how to configure a theme in the docs.json file using the 'theme' property. The example demonstrates setting the theme to 'maple'.\nSOURCE: https://github.com/mintlify/docs/blob/main/themes.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": \"maple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Footer in Mintlify Documentation\nDESCRIPTION: This snippet shows how to configure the footer in Mintlify documentation. It includes social media links and two columns of custom links.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"footer\": {\n  \"socials\": { \"x\": \"https://x.com/mintlify\", \"website\": \"https://mintlify.com\" },\n  \"links\": [\n    {\n      \"title\": \"Column 1\",\n      \"links\": [\n        { \"label\": \"Column 1 Link 1\", \"url\": \"https://mintlify.com\" },\n        { \"label\": \"Column 1 Link 2\", \"url\": \"https://mintlify.com\" }\n      ]\n    },\n    {\n      \"title\": \"Column 2\",\n      \"links\": [\n        { \"label\": \"Column 2 Link 1\", \"url\": \"https://mintlify.com\" },\n        { \"label\": \"Column 2 Link 2\", \"url\": \"https://mintlify.com\" }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Broken Links with Mintlify CLI\nDESCRIPTION: Command to run the Mintlify CLI tool for identifying broken relative links in documentation.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/broken-links.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmintlify broken-links\n```\n\n----------------------------------------\n\nTITLE: Setting Page-Specific Meta Tags in Markdown\nDESCRIPTION: This snippet demonstrates how to set page-specific meta tags in the frontmatter of a Markdown file. It shows setting a custom og:image tag for a single page.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/seo.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Your Example Page Title'\n'og:image': 'link to your meta tag image'\n---\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing JWT for Mintlify Authentication in TypeScript\nDESCRIPTION: This code snippet demonstrates how to handle user authentication by generating a signed JWT with user data and redirecting to the documentation site. It uses the jose library to create and sign JWTs with the ES256 algorithm using a private key stored in environment variables.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/personalization-setup/jwt.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as jose from 'jose';\nimport { Request, Response } from 'express';\n\nconst TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;\n\nconst signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'ES256');\n\nexport async function handleRequest(req: Request, res: Response) {\n  const user = {\n    expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000),\n    groups: res.locals.user.groups,\n    content: {\n      firstName: res.locals.user.firstName,\n      lastName: res.locals.user.lastName,\n    },\n  };\n\n  const jwt = await new jose.SignJWT(user)\n    .setProtectedHeader({ alg: 'ES256' })\n    .setExpirationTime('10 s')\n    .sign(signingKey);\n\n  return res.redirect(`https://docs.foo.com#${jwt}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ordered Lists in Markdown\nDESCRIPTION: Demonstrates how to create an ordered list using numbers followed by periods. The list items are automatically numbered in sequential order.\nSOURCE: https://github.com/mintlify/docs/blob/main/list-table.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item\n2. Second item\n3. Third item\n4. Fourth item\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts in Mintlify Documentation\nDESCRIPTION: Example of how to configure different custom fonts for headings and body text in a Mintlify documentation site.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"font\": {\n  \"headings\": {\n    \"family\": \"Roboto\"\n  },\n  \"body\": {\n    \"family\": \"Oswald\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Speakeasy CLI Commands for Interactive Setup in Bash\nDESCRIPTION: These commands use the Speakeasy CLI to interactively set up the workflow configuration and GitHub Actions workflow for SDK generation.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/speakeasy.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspeakeasy configure sources\nspeakeasy configure github\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Visibility with Groups in Markdown\nDESCRIPTION: Shows how to use the 'groups' field in page metadata to restrict page visibility to specific user groups. This example limits the page to users in the 'admin' group.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/personalization.mdx#2025-04-20_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Managing Your Users\"\ndescription: \"Adding and removing users from your organization\"\ngroups: [\"admin\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Marking Pages as Public in MDX Frontmatter\nDESCRIPTION: This snippet demonstrates how to mark a page as publicly accessible by adding the 'public: true' property to the page's frontmatter in MDX files. By default, all pages are protected in partial authentication mode.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/authentication-personalization/partial-authentication.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"My Page\"\npublic: true\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Indexing Globally in docs.json\nDESCRIPTION: This JSON snippet shows how to disable indexing for all pages by setting the 'robots' meta tag to 'noindex' in the docs.json file.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/seo.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"seo\": {\n    \"metatags\": {\n      \"robots\": \"noindex\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Dark Mode-Specific Images with Tailwind CSS\nDESCRIPTION: HTML and Tailwind CSS solution for displaying different images in light and dark modes by conditionally showing/hiding elements based on the theme.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img className=\"block h-32 dark:hidden\" src=\"/path/image-light.jpg\" />\n<img className=\"hidden h-32 dark:block\" src=\"/path/image-dark.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Lists in Markdown\nDESCRIPTION: Demonstrates how to create nested lists by adding indentation to list items. This allows for creating hierarchical list structures with parent and child items.\nSOURCE: https://github.com/mintlify/docs/blob/main/list-table.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- First item\n- Second item\n  - Additional item\n  - Additional item\n- Third item\n```\n\n----------------------------------------\n\nTITLE: Versioned API Documentation Reference in Markdown\nDESCRIPTION: Example showing how to reference a specific version of an OpenAPI document in a Markdown file, useful when maintaining multiple API versions.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/troubleshooting.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nopenapi: \"v1 GET /users/{id}\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Only in Mintlify Documentation\nDESCRIPTION: Configuration example to force a Mintlify documentation site to use only dark mode by hiding the mode toggle and setting the default to dark.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"modeToggle\": {\n  \"default\": \"dark\",\n  \"isHidden\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding API Playground Display Mode in MDX\nDESCRIPTION: MDX frontmatter example showing how to override the global API playground display settings for a specific endpoint page. This provides flexibility in how different endpoints are presented.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/configuration.mdx#2025-04-20_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: 'Create new user'\napi: 'POST https://api.mintlify.com/user'\nplayground: 'none'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Mintlify Documentation\nDESCRIPTION: HTML iframe syntax specifically for embedding YouTube videos with standard parameters for player configuration and permissions.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Example Footer Socials Configuration in JSON\nDESCRIPTION: Example JSON configuration for setting up social media links in the documentation footer. The configuration uses an object where each key is a social media platform name and the value is the URL to the profile.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x\": \"https://x.com/mintlify\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Implementation Example\nDESCRIPTION: Example showing how to implement an Accordion component with nested content including code blocks.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/accordions.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion title=\"I am an Accordion.\">\n  You can put any content in here, including other components, like code:\n\n   ```java HelloWorld.java\n    class HelloWorld {\n        public static void main(String[] args) {\n            System.out.println(\"Hello, World!\");\n        }\n    }\n  ```\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Example Segment Analytics Configuration in docs.json\nDESCRIPTION: This example demonstrates how to add a specific Segment write key to the docs.json file. The key is placed in the 'segment' object within the 'integrations' section.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/segment.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"segment\": {\n        \"key\": \"nqJxiRG15Y6M594P8Sb8ESEciU3VC2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication\nDESCRIPTION: Shows how to disable authentication for specific pages using the 'none' method in page metadata.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/authentication.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Your page title\"\nauthMethod: \"none\"\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Indexing in Markdown Frontmatter\nDESCRIPTION: This Markdown snippet demonstrates how to disable indexing for a specific page by setting the 'noindex' property in the frontmatter.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/seo.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nnoindex: true\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Standard Video Files with Controls\nDESCRIPTION: HTML video tag with controls for embedding standard video files in Mintlify documentation, using responsive width settings.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<video\n  controls\n  className=\"w-full aspect-video\"\n  src=\"link-to-your-video.com\"\n></video>\n```\n\n----------------------------------------\n\nTITLE: Autogenerating OpenAPI documentation with scraper\nDESCRIPTION: Bash commands for using the Mintlify scraper to automatically generate MDX files for OpenAPI endpoints from a specification file.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/openapi/setup.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest openapi-file <path-to-openapi-file>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest openapi-file <path-to-openapi-file> -o api-reference\n```\n\n----------------------------------------\n\nTITLE: Creating Check Callouts in JSX\nDESCRIPTION: This snippet demonstrates how to add a Check callout using the Check component. Check callouts are used to indicate a confirmed status or a completed action.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/callouts.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Check>This brings us a checked status</Check>\n```\n\n----------------------------------------\n\nTITLE: Configuring Intercom Integration in docs.json\nDESCRIPTION: Shows the JSON configuration structure needed to integrate an Intercom widget into Mintlify documentation. Requires setting the Intercom app ID in the integrations object.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/support/intercom.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n      \"intercom\": {\n            \"appId\": \"APP_ID\"\n      }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n      \"intercom\": {\n            \"appId\": \"APP_ID\"\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Reusable Snippet in MDX\nDESCRIPTION: A simple example of a reusable snippet file that contains content to be used across multiple documentation pages.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nHello world! This is my content I want to reuse across pages. \n```\n\n----------------------------------------\n\nTITLE: Embedding Autoplay Videos in Mintlify\nDESCRIPTION: HTML video tag configuration for autoplaying videos with necessary attributes (muted, loop, playsInline) for compatibility across browsers and platforms.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<video\n  autoPlay\n  muted\n  loop\n  playsInline\n  className=\"w-full aspect-video\"\n  src=\"link-to-your-video.com\"\n></video>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Frame Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Frame component to wrap an image. It's useful for centering images within a container.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/frames.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img src=\"https://mintlify-assets.b-cdn.net/yellowstone.jpeg\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Creating Info Callouts in JSX\nDESCRIPTION: This snippet demonstrates how to add an Info callout using the Info component. Info callouts are used to highlight important information that users should know.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/callouts.mdx#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Info>This draws attention to important information</Info>\n```\n\n----------------------------------------\n\nTITLE: Example Osano Integration in docs.json\nDESCRIPTION: A complete example of how to configure the Osano cookie consent manager in the docs.json file. The example shows the actual URL format pointing to the Osano JavaScript file.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/osano.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"integrations\": {\n    \"osano\": \"https://cmp.osano.com/2sUB2dqwqdkks/8dqwd-dwd86£-4a9b/osano.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Snippet with Variables in MDX\nDESCRIPTION: Shows how to import a snippet that contains variables and pass values to those variables through props when using the snippet component.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport MySnippet from '/snippets/path/to/my-snippet.mdx';\n\n## Header\n\nLorem impsum dolor sit amet.\n\n<MySnippet word=\"bananas\" />\n\n```\n\n----------------------------------------\n\nTITLE: Basic iFrame Embedding in Mintlify\nDESCRIPTION: Simple HTML iframe syntax for loading external HTML pages within the documentation, demonstrated with a YouTube video embed example.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify without global installation\nDESCRIPTION: Commands to run Mintlify development server without global installation using npx, yarn dlx, or pnpm dlx.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx mintlify dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx mintlify dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx mintlify dev\n```\n\n----------------------------------------\n\nTITLE: Creating Tip Callouts in JSX\nDESCRIPTION: This snippet shows how to add a Tip callout using the Tip component. Tip callouts are used to provide helpful suggestions or best practices to improve user experience.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/callouts.mdx#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tip>This suggests a helpful tip</Tip>\n```\n\n----------------------------------------\n\nTITLE: Original Osano Script Tag Example\nDESCRIPTION: An example of the original script tag generated by Osano from which the source URL can be extracted. The src attribute contains the URL needed for the integration configuration.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/osano.mdx#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cmp.osano.com/placeholder/placeholder/osano.js\"/>\n```\n\n----------------------------------------\n\nTITLE: Inline Icon Example in Markdown for Mintlify Documentation\nDESCRIPTION: Shows how to integrate an icon inline within a text paragraph using the solid icon type. The icon will appear inline with the text rather than as a block element.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/icons.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Icon icon=\"check\" iconType=\"solid\" /> The documentation you want, effortlessly\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Page Metadata in Markdown\nDESCRIPTION: Example showing how to specify an OpenAPI endpoint in frontmatter metadata, highlighting a common issue with path mismatches due to trailing slashes.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/troubleshooting.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nopenapi: \"GET /users/{id}/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello World' in JavaScript\nDESCRIPTION: A simple JavaScript code snippet that prints 'Hello World' to the console. This is part of the CodeGroup example to demonstrate different language implementations.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code-groups.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics with Custom JavaScript in Mintlify\nDESCRIPTION: This JavaScript snippet shows how to implement Google Analytics tracking across your entire Mintlify documentation. It initializes the dataLayer and configures the Google Analytics tracking code that would be placed in a ga.js file.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/custom-scripts.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n  dataLayer.push(arguments);\n}\ngtag('js', new Date());\n\ngtag('config', 'TAG_ID');\n```\n\n----------------------------------------\n\nTITLE: Linking Images in Mintlify Documentation\nDESCRIPTION: HTML syntax for making images clickable by wrapping them in anchor tags. The noZoom property prevents zoom behavior and images in anchor tags automatically have a pointer cursor.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://mintlify.com\" target=\"_blank\">\n  <img height=\"200\" noZoom src=\"/path/image.jpg\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Block with Title\nDESCRIPTION: Demonstrates how to add a title to a code block by placing text after the language identifier. The title 'Code Block Example' helps identify the purpose of the code snippet.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code.mdx#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hello = \"world\";\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript Code Block Example\nconst hello = \"world\";\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry for All Users\nDESCRIPTION: This code example shows how to completely disable telemetry for all users by setting the 'enabled' property to false in the telemetry configuration within docs.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/privacy/overview.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"integrations\": {\n    \"telemetry\": {\n      \"enabled\": false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello World' in Python\nDESCRIPTION: A simple Python code snippet that prints 'Hello World' to the console. This is part of the CodeGroup example to demonstrate different language implementations.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code-groups.mdx#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Configuring Vale for MDX Files\nDESCRIPTION: Configuration settings for .vale.ini to properly handle MDX files. These settings define format associations, comment delimiters, and patterns to ignore when linting MDX content.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/ci.mdx#2025-04-20_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[formats]\nmdx = md\n\n[*.mdx]\nCommentDelimiters = {/*, */}\n\nTokenIgnores = (?sm)((?:import|export) .+?$), \\\n(?<!`)(<\\w+ ?.+ ?\\/>)(?!`), \\\n(<[A-Z]\\w+>.+?<\\/[A-Z]\\w+>)\n\nBlockIgnores = (?sm)^(<\\w+\\n .*\\s\\/>)$, \\\n(?sm)^({.+.*})\n```\n\n----------------------------------------\n\nTITLE: Disabling Image Zoom in Mintlify\nDESCRIPTION: HTML syntax for embedding images with the noZoom property that disables the default zoom-on-click functionality.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img height=\"200\" noZoom src=\"/path/image.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Java Syntax Highlighting Example\nDESCRIPTION: Shows how to add syntax highlighting to a code block by specifying the programming language (Java) after the opening backticks. Uses Prism for syntax highlighting.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code.mdx#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Global Usage of Mintlify Scraping Commands\nDESCRIPTION: Commands for using Mintlify scraping tools after global installation. Includes options for scraping a section or a single page.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmintlify-scrape section [url]\n```\n\nLANGUAGE: bash\nCODE:\n```\nmintlify-scrape page [url]\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Hello World Program\nDESCRIPTION: Demonstrates a basic Java program that prints 'Hello, World!' to the console. This snippet also shows how to format a code block with syntax highlighting in Markdown.\nSOURCE: https://github.com/mintlify/docs/blob/main/code.mdx#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Path Parameters in API URLs\nDESCRIPTION: Example of how to define path parameters in API URLs by wrapping parameter names with curly braces. This allows for dynamic path segments in the documented endpoint.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/configuration.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.example.com/v1/endpoint/{userId}\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered Lists in Markdown\nDESCRIPTION: Shows how to create an unordered list using dashes, asterisks, or plus signs. This example uses dashes to create a bullet point list.\nSOURCE: https://github.com/mintlify/docs/blob/main/list-table.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- First item\n- Second item\n- Third item\n- Fourth item\n```\n\n----------------------------------------\n\nTITLE: Basic Java HelloWorld Example in Accordion\nDESCRIPTION: A simple Java Hello World program demonstrating content that can be placed inside an Accordion component.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/accordions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Captions to Frame Component in JSX\nDESCRIPTION: This example shows how to use the Frame component with a caption. The caption prop adds context to the wrapped image.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/frames.mdx#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame caption=\"Yosemite National Park is visited by over 3.5 million people every year\">\n  <img src=\"https://mintlify-assets.b-cdn.net/yosemite.jpg\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Structuring Product Update in Markdown\nDESCRIPTION: This snippet demonstrates how to structure a product update using Markdown and custom components. It includes a title, description, and mode setting, followed by an Update component with a label and content.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Product Updates\"\ndescription: \"New updates and improvements\"\nmode: \"center\"\n---\n\n<Update label=\"April 2025\">\n\n## AI Translations in beta\n  <Frame>\n    ![AI Translations graphic](/images/changelog/translations.png)\n  </Frame>\nTranslate all of your documentation with AI. [Learn more.](/navigation/localization)\n\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition in YAML\nDESCRIPTION: Example of an OpenAPI path definition in YAML format, showing how paths are properly structured without trailing slashes.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/troubleshooting.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  \"/users/{id}\":\n    get: ...\n```\n\n----------------------------------------\n\nTITLE: Search Keywords Configuration\nDESCRIPTION: Shows how to add keywords to enhance internal search functionality.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n---\nkeywords: ['search', 'indexing']\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Accordion Group with Limitations in Markdown\nDESCRIPTION: This code snippet demonstrates how to create an accordion group in Markdown to display current limitations of the Mintlify editor. It uses custom components like AccordionGroup and Accordion to structure the content.\nSOURCE: https://github.com/mintlify/docs/blob/main/web-editor.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<AccordionGroup>\n  <Accordion title=\"WYSIWYG navigation tree\">\n    You currently cannot live-update your navigation based on added/edited files. You\n    still have to manually edit renamed, added, and deleted files in your `docs.json`\n  </Accordion>\n\n  <Accordion title=\"Snippet previews\">\n    We currently don't show any previews for custom snippets. This is on our roadmap to support\n    as fully editable components.\n  </Accordion>\n\n  <Accordion title=\"OpenAPI previews\">\n    We currently don't show any previews for OpenAPI specs. This is on our roadmap to support\n    as a read-only preview.\n  </Accordion>\n</AccordionGroup>\n```\n\n----------------------------------------\n\nTITLE: Validating documentation links using Mintlify CLI\nDESCRIPTION: Command to identify broken links in the documentation using Mintlify CLI.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmintlify broken-links\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icons for Analytics Integration Cards\nDESCRIPTION: SVG code defining icons for various analytics integration options including Fathom, Clearbit, Heap, and Segment. These SVGs are used as icons in the Card components.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<svg\n  className=\"h-6 w-6\"\n  width=\"256\"\n  height=\"256\"\n  viewBox=\"0 0 256 256\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <path\n    d=\"M50.4139 36.0859H40.3871C31.7927 36.105 22.7513 37.7857 15.3869 42.8984C11.5551 45.5505 8.45289 49.125 6.36656 53.292C4.0486 58.1293 2.89794 63.4429 3.0071 68.8058V212.667C3.0071 213.984 3.53027 215.247 4.46151 216.178C5.39275 217.109 6.65579 217.632 7.97276 217.632H27.5661C28.8831 217.632 30.1461 217.109 31.0774 216.178C32.0086 215.247 32.5318 213.984 32.5318 212.667V111.31H50.4063C51.0584 111.31 51.7041 111.182 52.3065 110.932C52.909 110.682 53.4564 110.317 53.9175 109.856C54.3786 109.394 54.7444 108.847 54.9939 108.245C55.2435 107.642 55.3719 106.996 55.3719 106.344V89.5566C55.3719 88.2396 54.8488 86.9766 53.9175 86.0453C52.9863 85.1141 51.7232 84.5909 50.4063 84.5909H32.5394V71.8349C32.4457 69.708 32.7382 67.5817 33.4027 65.5591C33.6012 64.974 33.9349 64.444 34.3767 64.0121C35.0566 63.4655 35.8835 63.1331 36.7526 63.0571C38.4628 62.845 40.1867 62.7639 41.9092 62.8146H50.4196C51.7366 62.8146 52.9996 62.2914 53.9309 61.3602C54.8621 60.4289 55.3853 59.1659 55.3853 57.8489V41.0592C55.3853 39.7423 54.8621 38.4792 53.9309 37.548C52.9996 36.6167 51.7366 36.0936 50.4196 36.0936\"\n    fill=\"#1F2026\"\n  />\n  <!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Lines in JavaScript Example\nDESCRIPTION: Example showing how to highlight specific lines of code (lines 1, 3-5) in a JavaScript code block using the line highlighting syntax with curly braces.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = \"Hello, World!\";\nfunction sayHello() {\n  console.log(greeting);\n}\nsayHello();\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify development server\nDESCRIPTION: Command to start the Mintlify development server in the docs directory where the docs.json file is located.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Center Mode Configuration\nDESCRIPTION: Example of using center mode to remove sidebars and center content.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmode: \"center\"\n---\n```\n\n----------------------------------------\n\nTITLE: One-time Usage of Mintlify Scraping Commands\nDESCRIPTION: Commands for one-time use of Mintlify scraping tools without global installation. Includes options for scraping a section or a single page.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest section [url]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/scraping@latest page [url]\n```\n\n----------------------------------------\n\nTITLE: Mermaid Code Block Syntax\nDESCRIPTION: Shows the basic markdown syntax for creating a Mermaid diagram code block. This structure is used to embed Mermaid diagrams in markdown documents.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/mermaid-diagrams.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\n// Your mermaid code block here\n```\n```\n\n----------------------------------------\n\nTITLE: Importing a Reusable Snippet in MDX\nDESCRIPTION: Shows how to import a snippet from the snippets directory into a destination file and use it as a component within the content.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport MySnippet from '/snippets/path/to/my-snippet.mdx';\n\n## Header\n\nLorem impsum dolor sit amet.\n\n<MySnippet/>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Mintlify development server port\nDESCRIPTION: Command to run Mintlify development server on a custom port (e.g., 3333) using the --port flag.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev --port 3333\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Mode for Code Blocks in JSON\nDESCRIPTION: JSON configuration snippet for enabling auto mode for code blocks in the mint.json file, which provides light mode variants for code blocks.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"codeBlock\": {\n  \"mode\": \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Java Hello World Example Inside Tab\nDESCRIPTION: Simple Java program demonstrating code display within a tab component.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/tabs.mdx#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Exported Variables in MDX\nDESCRIPTION: Shows how to import specific variables from a snippet file and use them directly within the content of another documentation file.\nSOURCE: https://github.com/mintlify/docs/blob/main/reusable-snippets.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { myName, myObject } from '/snippets/path/to/custom-variables.mdx';\n\nHello, my name is {myName} and I like {myObject.fruit}.\n```\n\n----------------------------------------\n\nTITLE: Updating Mintlify CLI to latest version\nDESCRIPTION: Commands to update Mintlify CLI to the latest version using npm, yarn, or pnpm.\nSOURCE: https://github.com/mintlify/docs/blob/main/development.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global upgrade mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm up --global mintlify\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Mintlify CLI\nDESCRIPTION: Command to install the latest version of the Mintlify CLI globally using npm, which is needed for upgrading from mint.json to docs.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mintlify@latest -g\n```\n\n----------------------------------------\n\nTITLE: GitLab Webhook Endpoint Configuration\nDESCRIPTION: URL endpoint for configuring GitLab webhook integration with Mintlify\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/gitlab.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://leaves.mintlify.com/gitlab-webhook\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Settings in Mintlify Documentation\nDESCRIPTION: Example configuration for Search Engine Optimization settings in mint.json, including options to index hidden pages.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"seo\": {\n  \"indexHiddenPages\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown\nDESCRIPTION: Shows how to create tables using pipe symbols and hyphens. The first row defines the header, hyphens create the separator row, and subsequent rows contain the data.\nSOURCE: https://github.com/mintlify/docs/blob/main/list-table.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Description                           |\n| -------- | ------------------------------------- |\n| Name     | Full name of user                     |\n| Age      | Reported age                          |\n| Joined   | Whether the user joined the community |\n```\n\n----------------------------------------\n\nTITLE: Running the Mintlify Upgrade Command\nDESCRIPTION: CLI command to upgrade from mint.json to the new docs.json configuration schema in your documentation repository.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmintlify upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Highlighting in Markdown\nDESCRIPTION: Demonstration of how to format a markdown code block to enable line highlighting by adding line numbers in curly braces after the language identifier.\nSOURCE: https://github.com/mintlify/docs/blob/main/changelog/overview.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript Line Highlighting Example {1,3-5}\nconst greeting = \"Hello, World!\";\nfunction sayHello() {\n  console.log(greeting);\n}\nsayHello();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Endpoints with Relative Paths in JSON\nDESCRIPTION: Example configuration for specifying a relative path to an OpenAPI specification file in mint.json.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"/openapi.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Line Breaks in HTML and Markdown\nDESCRIPTION: Demonstrates two methods for creating line breaks: using HTML tags and using markdown's double enter syntax.\nSOURCE: https://github.com/mintlify/docs/blob/main/text.mdx#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<br />\n```\n\nLANGUAGE: markdown\nCODE:\n```\nParagraph 1\n\nParagraph 2\n```\n\n----------------------------------------\n\nTITLE: Starting the Mintlify MCP Server Locally\nDESCRIPTION: Command to start the installed MCP server from its local installation directory in your home folder.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/quickstart.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm --prefix ~/.mcp/mintlify start\n```\n\n----------------------------------------\n\nTITLE: Global Installation of Mintlify Scraping Package\nDESCRIPTION: Command to globally install the Mintlify scraping package, allowing for easier repeated use of the scraping tools.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mintlify/scraping@latest -g\n```\n\n----------------------------------------\n\nTITLE: Implementing LogRocket SVG Icon in JSX\nDESCRIPTION: SVG icon for LogRocket analytics integration that displays a purple logo. The SVG is embedded within a Card component and includes detailed path data for rendering the LogRocket logo.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<svg\n  className=\"h-7 w-5\"\n  width=\"102\"\n  height=\"159\"\n  viewBox=\"0 0 102 159\"\n  fill=\"none\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <path\n    d=\"M33.7001 18.4998C38.1001 11.4998 44.0001 5.3998 50.9001 0.799805C57.7001 5.2998 63.5001 11.2998 67.9001 18.1998C79.4001 34.1998 85.2001 53.4998 84.4001 73.1998C88.0001 76.0998 91.7001 78.8998 95.2001 81.7998C100.2 86.2998 102.6 93.0998 101.4 99.6998C99.7001 107.9 98.1001 116.1 96.3001 124.3C95.1001 127.9 91.2001 129.8 87.7001 128.6C87.1001 128.4 86.5001 128.1 86.0001 127.7C80.2001 123.1 74.6001 118.3 68.8001 113.6C58.9001 123 43.5001 123.1 33.5001 113.8C29.4001 116.8 25.5001 120.5 21.5001 123.8C19.7001 125.5 17.8001 127.1 15.6001 128.3C12.1001 129.7 8.10011 127.9 6.80011 124.4C6.70011 124.2 6.7001 124 6.6001 123.9C4.8001 115.9 2.8001 107.9 1.0001 99.8998C-0.399898 92.8998 2.1001 85.7998 7.5001 81.1998C10.6001 78.6998 13.8001 76.1998 17.0001 73.6998C17.9001 73.1998 17.4001 72.1998 17.5001 71.4998C17.1001 52.5998 22.8001 33.9998 33.7001 18.4998ZM39.4001 43.2998C35.2001 48.6998 35.7001 56.3998 40.6001 61.1998C46.2001 66.5998 55.1001 66.7998 60.9001 61.5998C65.0001 57.8998 66.4001 51.9998 64.5001 46.7998C62.5001 41.7998 57.9001 38.2998 52.5001 37.8998C47.4001 37.2998 42.5001 39.3998 39.4001 43.2998Z\"\n    fill=\"#764ABC\"\n  />\n  <path\n    d=\"M31.7002 130.6C31.8002 128.7 33.5002 127.3 35.3002 127.5C35.8002 127.5 36.3002 127.7 36.7002 127.9C45.6002 132.2 56.0002 132.2 65.0002 127.9C66.7002 127 68.7002 127.7 69.6002 129.3C69.8002 129.6 69.9002 130 70.0002 130.4C70.0002 135.4 70.0002 140.4 70.0002 145.4C69.8002 147.2 68.1002 148.6 66.3002 148.4C65.7002 148.3 65.2002 148.1 64.7002 147.8C63.2002 146.5 61.9002 145.1 60.4002 143.8C58.1002 148.1 56.0002 152.4 53.7002 156.7C52.7002 158.3 50.6002 158.7 49.0002 157.7C48.6002 157.5 48.3002 157.1 48.1002 156.8C45.8002 152.5 43.7002 148.2 41.3002 143.9C39.9002 145.3 38.5002 146.7 37.0002 147.9C35.5002 149 33.3002 148.6 32.3002 147C32.0002 146.5 31.8002 146 31.7002 145.4C31.7002 140.5 31.7002 135.5 31.7002 130.6Z\"\n    fill=\"#764ABC\"\n  />\n  <path\n    d=\"M50.7998 58.5005C54.5998 58.6005 57.6998 55.6005 57.7998 51.8005C57.6998 48.0005 54.5998 45.0005 50.7998 45.0005C46.9998 44.9005 43.8998 47.9005 43.7998 51.7005C43.7998 55.5005 46.9998 58.6005 50.7998 58.5005Z\"\n    fill=\"#764ABC\"\n  />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Nested Navigation with Top-Level Tabs\nDESCRIPTION: Example of nested navigation hierarchy using tabs as top-level elements with grouped pages underneath.\nSOURCE: https://github.com/mintlify/docs/blob/main/navigation/divisions.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"navigation\": {\n    \"tabs\": [\n      {\n        \"tab\": \"Tab 1\",\n        \"groups\": [\n          {\n            \"group\": \"Group 1\",\n            \"pages\": [\n              \"some-folder/file-1\",\n              \"another-folder/file-2\"\n              \"just-a-file\"\n            ]\n          }\n        ]\n      }\n      {\n        \"tab\": \"Tab 2\",\n        \"groups\": [\n          {\n            \"group\": \"Group 2\",\n            \"pages\": [\n              \"some-other-folder/file-1\",\n              \"various-different-folders/file-2\",\n              \"another-file\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Entry for Custom Domain\nDESCRIPTION: This snippet shows the DNS entry that needs to be created on the domain provider's website to set up a custom domain for Mintlify documentation. It specifies the type, name, and value for the CNAME record.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/custom-domain.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCNAME | docs | cname.vercel-dns.com.\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for MCP Integration\nDESCRIPTION: JSON configuration to add to the Claude Desktop App's config file to enable the Mintlify MCP server integration. This tells Claude how to start and connect to your MCP server.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/quickstart.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"mcpServers\": {\n     \"mintlify\": {\n         \"command\": \"npm\",\n         \"args\": [\n             \"--prefix\",\n             \"~/.mcp/mintlify\",\n             \"start\"\n         ]\n     }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing OpenAPI Files with Mintlify Scraping\nDESCRIPTION: Command for using Mintlify scraping to process OpenAPI files and generate frontmatter files for each endpoint. Includes options for writing files and specifying output directory.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmintlify-scrape openapi-file [openApiFilename]\n\n-w, --writeFiles  Whether or not to write the frontmatter files [boolean] [default: true]\n-o, --outDir      The folder in which to write any created frontmatter files [string]\n```\n\n----------------------------------------\n\nTITLE: Adding Images Using HTML Embeds\nDESCRIPTION: HTML syntax for embedding images with additional customization options like height specification.\nSOURCE: https://github.com/mintlify/docs/blob/main/image-embeds.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img height=\"200\" src=\"/path/image.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello World' in Java\nDESCRIPTION: A simple Java code snippet that prints 'Hello World' to the console. This is part of the CodeGroup example to demonstrate different language implementations.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/code-groups.mdx#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab Project Settings Path\nDESCRIPTION: Path reference for accessing GitLab project settings\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/gitlab.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSettings > General\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /chat/message Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST request to the /chat/message endpoint. It includes the HTTP method and the endpoint path.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/rest-api/chat/generate-message.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: POST /chat/message\n```\n\n----------------------------------------\n\nTITLE: Validating docs.json with JSON Schema Reference in Mintlify\nDESCRIPTION: Shows how to include a JSON schema reference in your docs.json file to ensure proper validation of the configuration.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/global.mdx#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://mintlify.com/docs.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello, World!' in Java\nDESCRIPTION: A simple Java program that prints 'Hello, World!' to the console. This snippet is used as an example of content that can be placed inside an Accordion component.\nSOURCE: https://github.com/mintlify/docs/blob/main/content/components/accordion-groups.mdx#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Editor Gate Warning Image in Markdown\nDESCRIPTION: This snippet uses Markdown to embed an image showing the editor gate warning that appears when an unauthorized editor attempts to update the docs on the free plan.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/dashboard/permissions.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Frame>\n  <img className=\"rounded-md\" src=\"/images/editor-gate.png\" />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Sidebar Title Configuration\nDESCRIPTION: Example of using sidebarTitle to show a shorter title in navigation while maintaining a longer page title.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Your very long page title you want to shorten\"\nsidebarTitle: \"Short title\"\n---\n```\n\n----------------------------------------\n\nTITLE: Adding MCP Server for a Subdomain\nDESCRIPTION: Command to add an MCP server for a specific subdomain using the npx @mintlify/mcp CLI tool. Replace [your subdomain] with your actual subdomain.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/generate.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mintlify/mcp add [your subdomain]\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP Server\nDESCRIPTION: Command to start the MCP server from the installed location. This runs the server for the specified subdomain after installation is complete.\nSOURCE: https://github.com/mintlify/docs/blob/main/advanced/mcp/generate.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm --prefix ~/.mcp/[your subdomain] start\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for Syncing OpenAPI Specs\nDESCRIPTION: GitHub Actions workflow that uploads OpenAPI spec to Stainless and synchronizes the enhanced spec with Mintlify docs repository. Includes steps for checking out code, pushing specs to Stainless, and copying files between repositories.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/sdks/stainless.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Upload OpenAPI spec to Stainless and (Mintlify) docs repo\n\non:\n  push:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  stainless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Push spec and config to Stainless and outputs documented spec\n        uses: stainless-api/upload-openapi-spec-action@main\n        with:\n          input_path: 'path/to/my-company-openapi.json'\n          config_path: 'path/to/my-company.stainless.yaml'\n          output_path: 'path/to/my-company-openapi.documented.json'\n          project_name: 'my-stainless-project'\n      - name: Push documented spec to docs repo\n        uses: dmnemec/copy_file_to_another_repo_action@main\n        env:\n          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}\n        with:\n          source_file: 'config/my-company-openapi.documented.json'\n          destination_repo: '{DOCS_REPO_NAME}'\n          destination_folder: 'openapi-specs'\n          user_email: '{EMAIL}'\n          user_name: '{USERNAME}'\n          commit_message: 'Auto-updates from Stainless'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 OAuth URLs\nDESCRIPTION: Example URL patterns for Auth0 OAuth configuration including authorization and token endpoints. These URLs need to be configured in the Mintlify dashboard settings.\nSOURCE: https://github.com/mintlify/docs/blob/main/guides/auth0.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://YOUR_AUTH0_DOMAIN/authorize\nhttps://YOUR_AUTH0_DOMAIN/oauth/token\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Info Component Usage\nDESCRIPTION: An Info component implementation in MDX that provides information about Preview Deployments availability and contact information.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/preview-deployments.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Info>\n  Preview Deployments are available on the [Growth and Enterprise plans](https://mintlify.com/pricing?ref=preview-deployments). Please{\" \"}\n  <a href=\"mailto:sales@mintlify.com\">contact sales</a> for more information.\n</Info>\n```\n\n----------------------------------------\n\nTITLE: Hiding API Playground in docs.json\nDESCRIPTION: Configuration to disable the display of the API playground in the documentation. This is useful when you want to document endpoints without providing an interactive testing interface.\nSOURCE: https://github.com/mintlify/docs/blob/main/api-playground/mdx/configuration.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"api\": {\n  \"playground\": {\n    \"display\": \"none\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: External Link Configuration\nDESCRIPTION: Shows how to configure a sidebar item to link to an external URL.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Page that goes to external link\"\nurl: \"https://www.npmjs.com/package/mintlify\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Pirsch SVG Icon with Dark Mode Support in JSX\nDESCRIPTION: SVG icon for Pirsch analytics that includes separate light and dark mode versions. The icon uses clipPath and multiple paths to create the Pirsch logo with conditional display based on the theme.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <svg\n    className=\"h-6 w-6 dark:hidden\"\n    width=\"1\"\n    height=\"1\"\n    viewBox=\"0 0 1 1\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clipPath=\"url(#clip0_2199_68)\">\n      <path\n        d=\"M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z\"\n        fill=\"black\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2199_68\">\n        <rect width=\"1\" height=\"1\" fill=\"black\" />\n      </clipPath>\n    </defs>\n  </svg>\n  <svg\n    className=\"hidden h-6 w-6 dark:block\"\n    width=\"1\"\n    height=\"1\"\n    viewBox=\"0 0 1 1\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clipPath=\"url(#clip0_2199_68)\">\n      <path\n        d=\"M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z\"\n        fill=\"white\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_2199_68\">\n        <rect width=\"1\" height=\"1\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Vale Comments to Disable Linting in MDX\nDESCRIPTION: Example of using MDX-style comments to control Vale linting behavior by turning it off for specific sections of content.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/ci.mdx#2025-04-20_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n{/* vale off */}\n\nThis text will be ignored by Vale\n\n{/* vale on */}\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Vale Comment Format in MDX\nDESCRIPTION: Example of using HTML-style Vale comments wrapped in MDX comments when not using the CommentDelimiters configuration setting.\nSOURCE: https://github.com/mintlify/docs/blob/main/settings/ci.mdx#2025-04-20_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{/* <!-- vale off --> */}\n\nThis text will be ignored by Vale\n\n{/* <!-- vale on --> */}\n```\n\n----------------------------------------\n\nTITLE: Wide Mode Configuration\nDESCRIPTION: Example of setting wide mode to hide the table of contents.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Page with no ToC\"\nmode: \"wide\"\n---\n```\n\n----------------------------------------\n\nTITLE: Custom Mode Configuration\nDESCRIPTION: Shows how to set custom mode for a minimalist layout.\nSOURCE: https://github.com/mintlify/docs/blob/main/page.mdx#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmode: \"custom\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Plausible SVG Icon with Gradient Effects in JSX\nDESCRIPTION: SVG icon for Plausible analytics that uses radial gradients for a sophisticated visual effect. The SVG includes defs for gradient definitions, complex path data, and SVG transformations to create the Plausible logo.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"1000px\"\n  height=\"1000px\"\n  className=\"h-6 w-6\"\n  viewBox=\"0 0 1000 1000\"\n>\n  <defs>\n    <radialGradient\n      cx=\"79.1305263%\"\n      cy=\"87.6448158%\"\n      fx=\"79.1305263%\"\n      fy=\"87.6448158%\"\n      r=\"96.9897763%\"\n      id=\"radialGradient-1\"\n    >\n      <stop stopColor=\"#2440E6\" offset=\"0%\" />\n      <stop stopColor=\"#5661B3\" offset=\"100%\" />\n    </radialGradient>\n    <radialGradient\n      cx=\"0%\"\n      cy=\"30.2198829%\"\n      fx=\"0%\"\n      fy=\"30.2198829%\"\n      r=\"62.2688936%\"\n      gradientTransform=\"translate(0.000000,0.302199),scale(1.000000,0.722519),rotate(61.734530),translate(-0.000000,-0.302199)\"\n      id=\"radialGradient-2\"\n    >\n      <stop stopColor=\"#6574CD\" stopOpacity=\"0.5\" offset=\"0%\" />\n      <stop stopColor=\"#6574CD\" offset=\"100%\" />\n    </radialGradient>\n  </defs>\n  <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n    <g transform=\"translate(19.000000, 0.000000)\">\n      <g transform=\"translate(-19.000000, 0.000000)\">\n        <rect x=\"0\" y=\"0\" width=\"1000\" height=\"1000\" />\n        <g transform=\"translate(124.069479, 0.000000)\">\n          <g transform=\"translate(376.923077, 500.000000) scale(-1, 1) rotate(-180.000000) translate(-376.923077, -500.000000) translate(2.233251, -0.000000)\">\n            <circle\n              fill=\"url(#radialGradient-1)\"\n              cx=\"373.69727\"\n              cy=\"624.069479\"\n              r=\"373.449132\"\n            />\n            <path\n              d=\"M309.677419,993.322174 C232.506203,979.92267 167.493797,947.168328 113.647643,894.562869 C58.3126551,840.468576 24.0694789,777.44128 7.44416873,698.781231 L1.7369727,671.982223 L0.992555831,336.498352 L0.248138958,0.76634245 L7.19602978,0.76634245 C11.1662531,0.76634245 23.82134,2.00703724 35.235732,3.24773203 C132.754342,15.158402 215.632754,74.215474 260.794045,163.793638 C272.208437,186.622422 280.397022,212.925151 286.104218,245.679494 C290.818859,273.471057 291.066998,282.652199 290.322581,427.56535 L289.578164,580.170809 L295.533499,595.059146 C303.722084,615.406541 326.30273,637.987186 346.650124,646.175772 L361.538462,652.131107 L500.496278,652.379246 C576.923077,652.379246 643.920596,653.371802 649.131514,654.364357 C673.449132,659.078998 699.503722,679.426392 709.925558,702.007037 C712.903226,708.210511 716.873449,720.36932 718.610422,728.557906 C721.33995,742.205548 721.091811,745.927633 717.121588,761.312248 C704.71464,806.969816 661.042184,870.245251 616.377171,907.217955 C565.756824,949.153439 509.925558,977.193141 449.627792,991.337062 C417.866005,998.533092 345.905707,999.773787 309.677419,993.322174 Z\"\n              id=\"Path\"\n              fill=\"url(#radialGradient-2)\"\n              fillRule=\"nonzero\"\n            />\n          </g>\n        </g>\n      </g>\n    </g>\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Implementation of Docusaurus Logo in Card Component\nDESCRIPTION: SVG code representing the Docusaurus logo used within a Card component in the migration documentation. The SVG contains various paths and polygons that form the colorful Docusaurus mascot.\nSOURCE: https://github.com/mintlify/docs/blob/main/migration.mdx#2025-04-20_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<svg className=\"h-6 w-6\" width=\"36\" height=\"36\" viewBox=\"0 -19 256 256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\">\n  \t<g>\n  \t\t\t<rect fill=\"#FFFFFF\" x=\"126.030769\" y=\"45.9487179\" width=\"110.276923\" height=\"44.6358974\">\n\n</rect>\n  \t\t\t<path d=\"M26.2564103,191.671795 C16.5441641,191.671795 8.0830359,186.385067 3.54067692,178.54359 C1.30231795,182.408533 0,186.883938 0,191.671795 C0,206.17321 11.7549949,217.928205 26.2564103,217.928205 L52.5128205,217.928205 L52.5128205,191.671795 L26.2564103,191.671795 Z\" fill=\"#3ECC5F\">\n\n</path>\n  \t\t\t<path d=\"M144.384656,53.006441 L236.308349,47.2615385 L236.308349,34.1333333 C236.308349,19.6319179 224.552041,7.87692308 210.051938,7.87692308 L91.8980923,7.87692308 L88.616041,2.19241026 C87.1561846,-0.334769231 83.5104821,-0.334769231 82.0519385,2.19241026 L78.7698872,7.87692308 L75.4878359,2.19241026 C74.0279795,-0.334769231 70.3822769,-0.334769231 68.9237333,2.19241026 L65.6416821,7.87692308 L62.3596308,2.19241026 C60.8997744,-0.334769231 57.2540718,-0.334769231 55.7955282,2.19241026 L52.5134769,7.87692308 C52.4845949,7.87692308 52.4570256,7.88086154 52.4281436,7.88086154 L46.990441,2.44447179 C44.928,0.382030769 41.4070154,1.3246359 40.6508308,4.14326154 L38.8548923,10.8438974 L32.0374154,9.01645128 C29.2187897,8.26157949 26.6404103,10.839959 27.3965949,13.6585846 L29.2227282,20.4760615 L22.5234051,22.2706872 C19.7047795,23.0268718 18.7608615,26.5491692 20.8233026,28.6116103 L26.2596923,34.0493128 C26.2596923,34.0768821 26.2570667,34.1044513 26.2570667,34.1333333 L20.571241,37.4153846 C18.0453744,38.8739282 18.0453744,42.5209436 20.571241,43.9794872 L26.2570667,47.2615385 L20.571241,50.5435897 C18.0453744,52.0021333 18.0453744,55.6491487 20.571241,57.1076923 L26.2570667,60.3897436 L20.571241,63.6717949 C18.0453744,65.1303385 18.0453744,68.7773538 20.571241,70.2358974 L26.2570667,73.5179487 L20.571241,76.8 C18.0453744,78.2585436 18.0453744,81.905559 20.571241,83.3641026 L26.2570667,86.6461538 L20.571241,89.9282051 C18.0453744,91.3867487 18.0453744,95.0337641 20.571241,96.4923077 L26.2570667,99.774359 L20.571241,103.05641 C18.0453744,104.514954 18.0453744,108.161969 20.571241,109.620513 L26.2570667,112.902564 L20.571241,116.184615 C18.0453744,117.643159 18.0453744,121.290174 20.571241,122.748718 L26.2570667,126.030769 L20.571241,129.312821 C18.0453744,130.771364 18.0453744,134.418379 20.571241,135.876923 L26.2570667,139.158974 L20.571241,142.441026 C18.0453744,143.899569 18.0453744,147.546585 20.571241,149.005128 L26.2570667,152.287179 L20.571241,155.569231 C18.0453744,157.027774 18.0453744,160.67479 20.571241,162.133333 L26.2570667,165.415385 L20.571241,168.697436 C18.0453744,170.155979 18.0453744,173.802995 20.571241,175.261538 L26.2570667,178.54359 L20.571241,181.825641 C18.0453744,183.284185 18.0453744,186.9312 20.571241,188.389744 L26.2570667,191.671795 C26.2570667,206.17321 38.0120615,217.928205 52.5134769,217.928205 L210.051938,217.928205 C224.552041,217.928205 236.308349,206.17321 236.308349,191.671795 L236.308349,86.6461538 L144.384656,80.9012513 C137.019733,80.4404513 131.282708,74.3332103 131.282708,66.9538462 C131.282708,59.5744821 137.019733,53.467241 144.384656,53.006441\" fill=\"#3ECC5F\">\n\n</path>\n  \t\t\t<polygon fill=\"#3ECC5F\" points=\"183.794872 217.928205 223.179487 217.928205 223.179487 165.415385 183.794872 165.415385\">\n\n</polygon>\n  \t\t\t<path d=\"M249.435897,185.107692 C249.14839,185.107692 248.87401,185.156267 248.597005,185.191713 C248.547118,184.99479 248.499856,184.796554 248.444718,184.599631 C250.815672,183.609764 252.481641,181.272944 252.481641,178.54359 C252.481641,174.917579 249.543549,171.979487 245.917538,171.979487 C244.423549,171.979487 243.062154,172.499364 241.958072,173.339569 C241.812349,173.191221 241.666626,173.044185 241.518277,172.898462 C242.341415,171.800944 242.845538,170.45399 242.845538,168.977067 C242.845538,165.351056 239.907446,162.412964 236.281436,162.412964 C233.570462,162.412964 231.244144,164.057928 230.243774,166.405251 C230.049477,166.350113 229.853867,166.304164 229.659569,166.254277 C229.695015,165.977272 229.74359,165.702892 229.74359,165.415385 C229.74359,161.789374 226.805497,158.851282 223.179487,158.851282 C219.553477,158.851282 216.615385,161.789374 216.615385,165.415385 C216.615385,165.702892 216.663959,165.977272 216.699405,166.254277 C216.505108,166.304164 216.309497,166.350113 216.1152,166.405251 C215.114831,164.057928 212.788513,162.412964 210.077538,162.412964 C206.451528,162.412964 203.513436,165.351056 203.513436,168.977067 C203.513436,170.45399 204.017559,171.800944 204.840697,172.898462 C199.960944,177.666626 196.923077,184.31081 196.923077,191.671795 C196.923077,206.17321 208.678072,217.928205 223.179487,217.928205 C235.439918,217.928205 245.707487,209.513026 248.597005,198.151877 C248.87401,198.187323 249.14839,198.235897 249.435897,198.235897 C253.061908,198.235897 256,195.297805 256,191.671795 C256,188.045785 253.061908,185.107692 249.435897,185.107692\" fill=\"#44D860\">\n\n</path>\n  \t\t\t<polygon fill=\"#3ECC5F\" points=\"196.923077 139.158974 236.307692 139.158974 236.307692 112.902564 196.923077 112.902564\">\n\n</polygon>\n  \t\t\t<path d=\"M249.435897,129.312821 C251.248903,129.312821 252.717949,127.843774 252.717949,126.030769 C252.717949,124.217764 251.248903,122.748718 249.435897,122.748718 C249.2928,122.748718 249.154954,122.773662 249.017108,122.790728 C248.990851,122.692267 248.968533,122.593805 248.940964,122.495344 C250.125128,122.00041 250.958769,120.830687 250.958769,119.466667 C250.958769,117.653662 249.489723,116.184615 247.676718,116.184615 C246.929723,116.184615 246.248369,116.443241 245.696985,116.864656 C245.624779,116.789826 245.551262,116.716308 245.476431,116.644103 C245.888656,116.096656 246.140718,115.421867 246.140718,114.682749 C246.140718,112.871056 244.671672,111.400697 242.858667,111.400697 C241.502523,111.400697 240.339364,112.223836 239.839179,113.397497 C238.714092,113.083733 237.533867,112.902564 236.307692,112.902564 C229.058297,112.902564 223.179487,118.781374 223.179487,126.030769 C223.179487,133.280164 229.058297,139.158974 236.307692,139.158974 C237.533867,139.158974 238.714092,138.977805 239.839179,138.664041 C240.339364,139.837703 241.502523,140.660841 242.858667,140.660841 C244.671672,140.660841 246.140718,139.190482 246.140718,137.37879 C246.140718,136.639672 245.888656,135.964882 245.476431,135.417436 C245.551262,135.345231 245.624779,135.271713 245.696985,135.196882 C246.248369,135.618297 246.929723,135.876923 247.676718,135.876923 C249.489723,135.876923 250.958769,134.407877 250.958769,132.594872 C250.958769,131.230851 250.125128,130.061128 248.940964,129.566195 C248.968533,129.469046 248.990851,129.369272 249.017108,129.27081 C249.154954,129.287877 249.2928,129.312821 249.435897,129.312821\" fill=\"#44D860\">\n\n</path>\n  \t\t\t<path d=\"M78.7692308,50.5435897 C76.9562256,50.5435897 75.4871795,49.0745436 75.4871795,47.2615385 C75.4871795,41.8317128 71.0708513,37.4153846 65.6410256,37.4153846 C60.2112,37.4153846 55.7948718,41.8317128 55.7948718,47.2615385 C55.7948718,49.0745436 54.3258256,50.5435897 52.5128205,50.5435897 C50.6998154,50.5435897 49.2307692,49.0745436 49.2307692,47.2615385 C49.2307692,38.2122667 56.5917538,30.8512821 65.6410256,30.8512821 C74.6902974,30.8512821 82.0512821,38.2122667 82.0512821,47.2615385 C82.0512821,49.0745436 80.5822359,50.5435897 78.7692308,50.5435897\" fill=\"#000000\">\n\n</path>\n  \t\t\t<path d=\"M131.282051,217.928205 L210.051282,217.928205 C224.552697,217.928205 236.307692,206.17321 236.307692,191.671795 L236.307692,99.774359 L157.538462,99.774359 C143.037046,99.774359 131.282051,111.529354 131.282051,126.030769 L131.282051,217.928205 Z\" fill=\"#FFFF50\">\n\n</path>\n  \t\t\t<path d=\"M216.640985,140.471795 L150.948759,140.471795 C150.222769,140.471795 149.635938,139.884964 149.635938,139.158974 C149.635938,138.432985 150.222769,137.846154 150.948759,137.846154 L216.640985,137.846154 C217.366974,137.846154 217.953805,138.432985 217.953805,139.158974 C217.953805,139.884964 217.366974,140.471795 216.640985,140.471795\" fill=\"#000000\">\n\n</path>\n  \t\t\t<path d=\"M216.640985,166.728205 L150.948759,166.728205 C150.222769,166.728205 149.635938,166.141374 149.635938,165.415385 C149.635938,164.689395 150.222769,164.102564 150.948759,164.102564 L216.640985,164.102564 C217.366974,164.102564 217.953805,164.689395 217.953805,165.415385 C217.953805,166.141374 217.366974,166.728205 216.640985,166.728205\" fill=\"#000000\">\n\n</path>\n  \t\t\t<path d=\"M216.640985,192.984615 L150.948759,192.984615 C150.222769,192.984615 149.635938,192.397785 149.635938,191.671795 C149.635938,190.945805 150.222769,190.358974 150.948759,190.358974 L216.640985,190.358974 C217.366974,190.358974 217.953805,190.945805 217.953805,191.671795 C217.953805,192.397785 217.366974,192.984615 216.640985,192.984615\" fill=\"#000000\">\n\n</path>\n  \t\t\t<path d=\"M216.640985,127.587118 L150.948759,127.587118 C150.222769,127.587118 149.635938,126.998974 149.635938,126.274297 C149.635938,125.548308 150.222769,124.961477 150.948759,124.961477 L216.640985,124.961477 C217.366974,124.961477 217.953805,125.548308 217.953805,126.274297 C217.953805,126.998974 217.366974,127.587118 216.640985,127.587118\" fill=\"#000000\">\n\n</path>\n  \t\t\t<path d=\"M216.640985,153.6 L150.948759,153.6 C150.222769,153.6 149.635938,153.013169 149.635938,152.287179 C149.635938,151.56119 150.222769,150.974359 150.948759,150.974359 L216.640985,150.974359 C217.366974,150.974359 217.953805,151.56119 217.953805,152.287179 C217.953805,153.013169 217.366974,153.6 216.640985,153.6\" fill=\"#000000\">\n\n</path>\n```\n\n----------------------------------------\n\nTITLE: Decorative SVG Path Definitions\nDESCRIPTION: SVG path definitions defining graphical elements with specific fill colors and rules. Contains multiple paths using fill colors #43AF79 and #93C8A2.\nSOURCE: https://github.com/mintlify/docs/blob/main/integrations/analytics/overview.mdx#2025-04-20_snippet_7\n\nLANGUAGE: svg\nCODE:\n```\n<path\n    fill=\"#43AF79\"\n    fill-rule=\"evenodd\"\n    d=\"M1.923 10.396A1.184 1.184 0 0 1 .75 9.209c0-.12.03-.238.059-.356C2.275 4.015 6.646.75 11.66.75c1.144 0 2.288.178 3.374.505.615.207.968.86.762 1.484-.205.623-.85.979-1.466.771a8.962 8.962 0 0 0-2.67-.415c-3.989 0-7.45 2.582-8.594 6.44-.176.505-.616.86-1.144.86Z\"\n    clip-rule=\"evenodd\"\n  />\n```"
  }
]