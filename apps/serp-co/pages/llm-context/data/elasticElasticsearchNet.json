[
  {
    "owner": "elastic",
    "repo": "elasticsearch-net",
    "content": "TITLE: Client Instance Management in Elasticsearch .NET\nDESCRIPTION: Guidance on the proper usage of ElasticsearchClient instance, emphasizing the importance of reusing a single instance throughout the application lifecycle. The client is thread-safe and can be implemented as a singleton or registered with dependency injection containers for optimal resource utilization.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/recommendations.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nElasticsearchClient\n```\n\n----------------------------------------\n\nTITLE: Connecting to Elasticsearch Cloud Deployment using .NET Client\nDESCRIPTION: Creates an ElasticsearchClient instance that connects to an Elastic Cloud deployment using Cloud ID and API key authentication. This is the recommended approach for cloud deployments as it automatically configures HTTPS and HTTP compression.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/connecting.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Transport;\n\nvar client = new ElasticsearchClient(\"<CLOUD_ID>\", new ApiKey(\"<API_KEY>\"));\n```\n\n----------------------------------------\n\nTITLE: Constructing Bool Query with Multiple Terms in Elasticsearch\nDESCRIPTION: Demonstrates a bool query that must match three terms for 'name' field with values x, y, and z, while excluding documents where name equals 'a'. Uses the term query for exact matches and combines them using bool query's must and must_not clauses.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryMixAndMatch_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: z\n            }\n          }\n        }\n      ],\n      must_not: {\n        term: {\n          name: {\n            value: a\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Documents in Elasticsearch\nDESCRIPTION: Executes a term query search with pagination, demonstrating how to search for documents by specific field values.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.SearchAsync<MyDoc>(s => s\n    .Index(\"my_index\")\n    .From(0)\n    .Size(10)\n    .Query(q => q\n        .Term(t => t.User, \"flobernd\")\n    )\n);\n\nif (response.IsValidResponse)\n{\n    var doc = response.Documents.FirstOrDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ES|QL Results to Domain Objects in C#\nDESCRIPTION: This example shows how to use the high-level object mapping helper to execute an ES|QL query and automatically map the results to strongly-typed Person objects, simplifying result consumption.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/esql.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// ObjectAPI example\nvar response = await client.Esql.QueryAsObjectsAsync<Person>(x => x.Query(\"FROM index\"));\nforeach (var person in response)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Elasticsearch Search Response in .NET\nDESCRIPTION: Demonstrates how to process and iterate through the documents returned from an Elasticsearch search query. This example accesses the Documents collection from the response and prints each person's first name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/query.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var person in response.Documents)\n{\n\tConsole.WriteLine(person.FirstName);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Elasticsearch Client in C#\nDESCRIPTION: Creates an instance of ElasticsearchClient with default settings, assuming an unsecured Elasticsearch server running on localhost:9200.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.QueryDsl;\nvar client = new ElasticsearchClient();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Methods Usage in Elasticsearch .NET\nDESCRIPTION: Recommendation to use asynchronous methods (with Async suffix) over synchronous ones when working with ElasticsearchClient. This approach prevents thread blocking during HTTP requests and improves application performance, especially in high-load scenarios.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/recommendations.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nElasticsearchClient\n```\n\n----------------------------------------\n\nTITLE: Consuming Sub-Aggregation Response in C#\nDESCRIPTION: This snippet shows how to consume the response from a sub-aggregation. It iterates through the buckets of the 'firstnames' terms aggregation, retrieves the average age for each bucket, and prints the results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar firstnames = response.Aggregations!.GetStringTerms(\"firstnames\")!;\nforeach (var bucket in firstnames.Buckets)\n{\n\tvar avg = bucket.Aggregations.GetAverage(\"avg_age\")!;\n\tConsole.WriteLine($\"The average age for persons named '{bucket.Key}' is {avg}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Elasticsearch Cloud\nDESCRIPTION: Creates an Elasticsearch client instance using Cloud ID and API key authentication.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new ElasticsearchClient(\"<CLOUD_ID>\", new ApiKey(\"<API_KEY>\"));\n```\n\n----------------------------------------\n\nTITLE: Indexing a Document in Elasticsearch using C#\nDESCRIPTION: Creates a Tweet instance and indexes it into Elasticsearch. The example demonstrates how to check for a successful response and access the indexed document's ID.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar tweet = new Tweet\n{\n    Id = 1,\n    User = \"stevejgordon\",\n    PostDate = new DateTime(2009, 11, 15),\n    Message = \"Trying out the client, so far so good?\"\n};\n\nvar response = await client.IndexAsync(tweet, \"my-tweet-index\");\n\nif (response.IsValidResponse)\n{\n    Console.WriteLine($\"Index document with ID {response.Id} succeeded.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Documents in Elasticsearch using C# (Fluent Interface)\nDESCRIPTION: Uses the fluent interface to perform a search query in Elasticsearch. The example demonstrates term query usage and accessing search results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.SearchAsync<Tweet>(s => s\n    .Index(\"my-tweet-index\")\n    .From(0)\n    .Size(10)\n    .Query(q => q\n        .Term(t => t.User, \"stevejgordon\")\n    )\n);\n\nif (response.IsValidResponse)\n{\n    var tweet = response.Documents.FirstOrDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch .NET Client Package\nDESCRIPTION: Command to install the latest version of the Elasticsearch client for .NET SDK style projects using the dotnet CLI.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Elastic.Clients.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Indexing Document in Elasticsearch\nDESCRIPTION: Demonstrates how to index a document with custom properties into a specified index.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar doc = new MyDoc\n{\n    Id = 1,\n    User = \"flobernd\",\n    Message = \"Trying out the client, so far so good?\"\n};\n\nvar response = await client.IndexAsync(doc, \"my_index\");\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Index\nDESCRIPTION: Creates a new index named 'my_index' using the async API.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.Indices.CreateAsync(\"my_index\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document by ID from Elasticsearch in C#\nDESCRIPTION: Demonstrates how to retrieve a document by its ID from Elasticsearch using the GetAsync method. The response includes the deserialized Tweet object.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.GetAsync<Tweet>(1, idx => idx.Index(\"my-tweet-index\"));\n\nif (response.IsValidResponse)\n{\n    var tweet = response.Source;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mappings During Index Creation in Elasticsearch with C#\nDESCRIPTION: This snippet demonstrates how to create an index with custom mappings using the Elasticsearch .NET client. It sets up mappings for a 'Person' type, defining 'Age' as an integer and 'FirstName' as a non-indexed keyword field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/mappings.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.Indices.CreateAsync<Person>(index => index\n\t.Index(\"index\")\n\t.Mappings(mappings => mappings\n\t\t.Properties(properties => properties\n\t\t\t.IntegerNumber(x => x.Age!)\n\t\t\t.Keyword(x => x.FirstName!, keyword => keyword.Index(false))\n\t\t)\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Complex Logging with OnRequestCompleted in C#\nDESCRIPTION: This snippet demonstrates a more complex logging scenario using OnRequestCompleted. It captures request and response details, including body content, by disabling direct streaming.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/logging-with-onrequestcompleted.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar list = new List<string>();\nvar connectionPool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(connectionPool, new InMemoryConnection())\n    .DefaultIndex(\"default-index\")\n    .DisableDirectStreaming()\n    .OnRequestCompleted(apiCallDetails =>\n    {\n        if (apiCallDetails.RequestBodyInBytes != null)\n        {\n            list.Add(\n                $\"{apiCallDetails.HttpMethod} {apiCallDetails.Uri} \" +\n                $\"{Encoding.UTF8.GetString(apiCallDetails.RequestBodyInBytes)}\");\n        }\n        else\n        {\n            list.Add($\"{apiCallDetails.HttpMethod} {apiCallDetails.Uri}\");\n        }\n\n        if (apiCallDetails.ResponseBodyInBytes != null)\n        {\n            list.Add($\"Status: {apiCallDetails.HttpStatusCode}\" +\n                     $\"{Encoding.UTF8.GetString(apiCallDetails.ResponseBodyInBytes)}\");\n        }\n        else\n        {\n            list.Add($\"Status: {apiCallDetails.HttpStatusCode}\");\n        }\n    });\n\nvar client = new ElasticClient(settings);\n\nvar syncResponse = client.Search<object>(s => s\n    .AllIndices()\n    .Scroll(\"2m\")\n    .Sort(ss => ss\n        .Ascending(SortSpecialField.DocumentIndexOrder)\n    )\n);\n\nlist.Count.Should().Be(2);\n\nvar asyncResponse = await client.SearchAsync<object>(s => s\n    .AllIndices()\n    .Scroll(\"10m\")\n    .Sort(ss => ss\n        .Ascending(SortSpecialField.DocumentIndexOrder)\n    )\n);\n\nlist.Count.Should().Be(4);\nlist.Should().BeEquivalentTo(new[]\n{\n    @\"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=2m {\\\"sort\\\":[{\\\"_doc\\\":{\\\"order\\\":\\\"asc\\\"}}]}\",\n    @\"Status: 200\",\n    @\"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=10m {\\\"sort\\\":[{\\\"_doc\\\":{\\\"order\\\":\\\"asc\\\"}}]}\",\n    @\"Status: 200\"\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing a Boolean Query in Elasticsearch\nDESCRIPTION: This snippet shows how to create a complex boolean query in Elasticsearch. It uses 'must' clauses to specify required conditions and a 'must_not' clause to exclude certain results. The query searches for documents where the 'name' field matches two specific values while excluding a third value.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithMustAndMustNot_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        }\n      ],\n      must_not: {\n        term: {\n          name: {\n            value: z\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Document in Elasticsearch\nDESCRIPTION: Updates an existing document by modifying its fields and using the update API.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ndoc.Message = \"This is a new message\";\n\nvar response = await client.UpdateAsync<MyDoc, MyDoc>(\"my_index\", 1, u => u\n    .Doc(doc));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document from Elasticsearch\nDESCRIPTION: Shows how to retrieve a document by ID from a specific index with response validation.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.GetAsync<MyDoc>(id, idx => idx.Index(\"my_index\"));\n\nif (response.IsValidResponse)\n{\n    var doc = response.Source;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Documents in Elasticsearch using C# (Object Initializer)\nDESCRIPTION: Demonstrates an alternative approach to searching using object initializer syntax. This method may be preferred by developers who don't favor lambda expressions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new SearchRequest(\"my-tweet-index\")\n{\n    From = 0,\n    Size = 10,\n    Query = new TermQuery(\"user\") { Value = \"stevejgordon\" }\n};\n\nvar response = await client.SearchAsync<Tweet>(request);\n\nif (response.IsValidResponse)\n{\n    var tweet = response.Documents.FirstOrDefault();\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Single Elasticsearch Node with Certificate Validation\nDESCRIPTION: Creates an ElasticsearchClient instance that connects to a single Elasticsearch node with HTTPS and certificate fingerprint validation. This example uses basic authentication with username and password credentials.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/connecting.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Transport;\n\nvar settings = new ElasticsearchClientSettings(new Uri(\"https://localhost:9200\"))\n    .CertificateFingerprint(\"<FINGERPRINT>\")\n    .Authentication(new BasicAuthentication(\"<USERNAME>\", \"<PASSWORD>\"));\n\nvar client = new ElasticsearchClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Elasticsearch Nodes with StaticNodePool\nDESCRIPTION: Creates an ElasticsearchClient that connects to multiple Elasticsearch nodes using a StaticNodePool for resiliency. This configuration cycles through nodes in round-robin fashion and avoids unhealthy nodes, using API key authentication.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/connecting.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Transport;\n\nvar nodes = new Uri[]\n{\n\tnew Uri(\"https://myserver1:9200\"),\n\tnew Uri(\"https://myserver2:9200\"),\n\tnew Uri(\"https://myserver3:9200\")\n};\n\nvar pool = new StaticNodePool(nodes);\n\nvar settings = new ElasticsearchClientSettings(pool)\n    .CertificateFingerprint(\"<FINGERPRINT>\")\n    .Authentication(new ApiKey(\"<API_KEY>\"));\n\nvar client = new ElasticsearchClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Updating a Document in Elasticsearch using C#\nDESCRIPTION: Shows how to update an existing document in Elasticsearch by providing a modified version of the document. The example updates the Message property of a Tweet.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ntweet.Message = \"This is a new message\";\n\nvar response = await client.UpdateAsync<Tweet, Tweet>(\"my-tweet-index\", 1, u => u\n    .Doc(tweet));\n\nif (response.IsValidResponse)\n{\n    Console.WriteLine(\"Update document succeeded.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Document from Elasticsearch\nDESCRIPTION: Removes a specific document from an index by its ID.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.DeleteAsync(\"my_index\", 1);\n```\n\n----------------------------------------\n\nTITLE: Executing Top-Level Aggregation using Object Initializer API in C#\nDESCRIPTION: This snippet shows how to perform a top-level aggregation using the Object Initializer API. It creates a SearchRequest for the 'persons' index with a match all query and a max aggregation on the 'Age' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.SearchAsync<Person>(new SearchRequest(\"persons\")\n{\n\tQuery = Query.MatchAll(new MatchAllQuery()),\n\tAggregations = new Dictionary<string, Aggregation>\n\t{\n\t\t{ \"agg_name\", Aggregation.Max(new MaxAggregation\n\t\t{\n\t\t\tField = Infer.Field<Person>(x => x.Age)\n\t\t})}\n\t},\n\tSize = 10\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Information in NEST Responses\nDESCRIPTION: Demonstrates how to access the DebugInformation property on a response from the NEST client. This property provides human-readable information about what happened during both successful and failed requests.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = client.Search<Project>(s => s\n    .Query(q => q\n        .MatchAll()\n    )\n);\n\nresponse.DebugInformation.Should().Contain(\"Valid NEST response\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Score Query with Multiple Scoring Functions in Elasticsearch\nDESCRIPTION: A comprehensive function score query that combines field value factor, random scoring, and script-based scoring functions. The query includes boost factors, filtering, and various scoring modifiers to calculate custom relevance scores.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FunctionScoreQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"function_score\": {\n      \"boost\": 1.1,\n      \"boost_mode\": \"multiply\",\n      \"functions\": [\n        {\n          \"field_value_factor\": {\n            \"factor\": 1.1,\n            \"field\": \"numberOfCommits\",\n            \"missing\": 0.1,\n            \"modifier\": \"square\"\n          },\n          \"filter\": {\n            \"term\": {\n              \"branches\": {\n                \"value\": \"dev\"\n              }\n            }\n          },\n          \"weight\": 3\n        },\n        {\n          \"random_score\": {\n            \"field\": \"_seq_no\",\n            \"seed\": 1337\n          }\n        },\n        {\n          \"random_score\": {\n            \"field\": \"_seq_no\",\n            \"seed\": \"random_string\"\n          }\n        },\n        {\n          \"script_score\": {\n            \"script\": {\n              \"source\": \"Math.log(2 + doc['numberOfCommits'].value)\"\n            }\n          },\n          \"weight\": 1\n        },\n        {\n          \"weight\": 5\n        }\n      ],\n      \"max_boost\": 20,\n      \"min_score\": 1,\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"score_mode\": \"sum\",\n      \"_name\": \"named_query\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Top-Level Aggregation using Fluent API in C#\nDESCRIPTION: This snippet demonstrates how to perform a top-level aggregation using the Fluent API. It searches the 'persons' index, applies a match all query, and adds a max aggregation on the 'Age' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client\n\t.SearchAsync<Person>(search => search\n\t\t.Index(\"persons\")\n\t\t.Query(query => query\n\t\t\t.MatchAll(_ => {})\n\t\t)\n\t\t.Aggregations(aggregations => aggregations\n\t\t\t.Add(\"agg_name\", aggregation => aggregation\n\t\t\t\t.Max(max => max\n\t\t\t\t\t.Field(x => x.Age)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\t.Size(10)\n\t);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document from Elasticsearch using C#\nDESCRIPTION: Demonstrates how to delete a document from Elasticsearch by providing the index name and document ID. The example checks for a successful response.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.DeleteAsync(\"my-tweet-index\", 1);\n\nif (response.IsValidResponse)\n{\n    Console.WriteLine(\"Delete document succeeded.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing a Document with Elasticsearch .NET Client\nDESCRIPTION: Shows how to index an instance of a POCO document into Elasticsearch using the .NET client. This example uses the default serialization behavior.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Threading.Tasks;\nusing Elastic.Clients.Elasticsearch;\n\nvar document = new MyDocument\n{\n    StringProperty = \"value\"\n};\n\nvar indexResponse = await Client\n    .IndexAsync(document, \"my-index-name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticsearchClientSettings with ElasticsearchClient\nDESCRIPTION: Demonstrates how to set various configuration options on ElasticsearchClientSettings and initialize an ElasticsearchClient. It sets default mapping for a Project type, enables debug mode, pretty JSON output, and a custom request timeout.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/_options_on_elasticsearchclientsettings.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings= new ElasticsearchClientSettings()\n    .DefaultMappingFor<Project>(i => i\n        .IndexName(\"my-projects\")\n        .IdProperty(p => p.Name)\n    )\n    .EnableDebugMode()\n    .PrettyJson()\n    .RequestTimeout(TimeSpan.FromMinutes(2));\n\nvar client = new ElasticsearchClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Score Query in Elasticsearch\nDESCRIPTION: Demonstrates a function score query with multiple scoring functions including field value boosting, random scoring, and custom script scoring. The query combines multiple scoring methods with filters, weights, and boost parameters to calculate final document scores.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FunctionScoreQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"function_score\": {\n      \"boost\": 1.1,\n      \"boost_mode\": \"multiply\",\n      \"functions\": [\n        {\n          \"field_value_factor\": {\n            \"factor\": 1.1,\n            \"field\": \"numberOfCommits\",\n            \"missing\": 0.1,\n            \"modifier\": \"square\"\n          },\n          \"filter\": {\n            \"term\": {\n              \"branches\": {\n                \"value\": \"dev\"\n              }\n            }\n          },\n          \"weight\": 3\n        },\n        {\n          \"random_score\": {\n            \"field\": \"_seq_no\",\n            \"seed\": 1337\n          }\n        },\n        {\n          \"random_score\": {\n            \"field\": \"_seq_no\",\n            \"seed\": \"random_string\"\n          }\n        },\n        {\n          \"script_score\": {\n            \"script\": {\n              \"source\": \"Math.log(2 + doc['numberOfCommits'].value)\"\n            }\n          },\n          \"weight\": 1\n        },\n        {\n          \"weight\": 5\n        }\n      ],\n      \"max_boost\": 20,\n      \"min_score\": 1,\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"score_mode\": \"sum\",\n      \"_name\": \"named_query\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter with OnRequestCompleted in C#\nDESCRIPTION: This snippet demonstrates how to use OnRequestCompleted to increment a counter for each request made by the Elasticsearch client. It shows both synchronous and asynchronous calls.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/logging-with-onrequestcompleted.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar counter = 0;\nvar client = new ElasticClient(new AlwaysInMemoryConnectionSettings().OnRequestCompleted(r => counter++));\n\nclient.RootNodeInfo();\ncounter.Should().Be(1);\n\nawait client.RootNodeInfoAsync();\ncounter.Should().Be(2);\n```\n\n----------------------------------------\n\nTITLE: Querying and Aggregating Project Data with Elasticsearch\nDESCRIPTION: This Elasticsearch query retrieves project data, aggregates it by month, calculates commit counts, and applies bucket sorting. It uses a date histogram aggregation with a monthly interval and limits the results to the top 3 months by commit count.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BucketSortAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects_started_per_month\": {\n      \"aggregations\": {\n        \"commits\": {\n          \"sum\": {\n            \"field\": \"numberOfCommits\"\n          }\n        },\n        \"commits_bucket_sort\": {\n          \"bucket_sort\": {\n            \"from\": 0,\n            \"gap_policy\": \"insert_zeros\",\n            \"size\": 3,\n            \"sort\": {\n              \"commits\": {\n                \"order\": \"desc\"\n              }\n            }\n          }\n        }\n      },\n      \"date_histogram\": {\n        \"calendar_interval\": \"month\",\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Sub-Aggregation using Fluent API in C#\nDESCRIPTION: This snippet shows how to perform a sub-aggregation using the Fluent API. It searches the 'persons' index, applies a match all query, and adds a terms aggregation on 'FirstName' with a nested max aggregation on 'Age'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client\n\t.SearchAsync<Person>(search => search\n\t\t.Index(\"persons\")\n\t\t.Query(query => query\n\t\t\t.MatchAll(_ => {})\n\t\t)\n\t\t.Aggregations(aggregations => aggregations\n\t\t\t.Add(\"firstnames\", aggregation => aggregation\n\t\t\t\t.Terms(terms => terms\n\t\t\t\t\t.Field(x => x.FirstName)\n\t\t\t\t)\n\t\t\t\t.Aggregations(aggregations => aggregations\n\t\t\t\t\t.Add(\"avg_age\", aggregation => aggregation\n\t\t\t\t\t\t.Max(avg => avg\n\t\t\t\t\t\t\t.Field(x => x.Age)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\t.Size(10)\n\t);\n```\n\n----------------------------------------\n\nTITLE: Performing Search Queries with Elasticsearch .NET Fluent API\nDESCRIPTION: Demonstrates how to use the Fluent API to search for persons with the first name 'Florian'. The query specifies a term query on the firstName field, limiting results to 10 documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/query.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client\n\t.SearchAsync<Person>(search => search\n\t\t.Index(\"persons\")\n\t\t.Query(query => query\n\t\t\t.Term(term => term\n\t\t\t\t.Field(x => x.FirstName)\n\t\t\t\t.Value(\"Florian\")\n\t\t\t)\n\t\t)\n\t\t.Size(10)\n\t);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Requests with the Low-Level Elastic.Transport Client\nDESCRIPTION: Demonstrates how to create custom requests using the low-level Elastic.Transport client as a workaround for missing features in the v8 Elasticsearch .NET Client. This example shows creating a custom API key request with request parameters, path construction, and response handling.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/migration-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequestParameters : RequestParameters\n{\n    public bool Pretty\n    {\n        get => Q<bool>(\"pretty\");\n        init => Q(\"pretty\", value);\n    }\n}\n\n// ...\n\nvar body = \"\"\"\n           {\n             \"name\": \"my-api-key\",\n             \"expiration\": \"1d\",\n             \"...\": \"...\"\n           }\n           \"\"\";\n\nMyRequestParameters requestParameters = new()\n{\n    Pretty = true\n};\n\nvar pathAndQuery = requestParameters.CreatePathWithQueryStrings(\"/_security/api_key\",\n    client.ElasticsearchClientSettings);\nvar endpointPath = new EndpointPath(Elastic.Transport.HttpMethod.POST, pathAndQuery);\n\n// Or, if the path does not contain query parameters:\n// new EndpointPath(Elastic.Transport.HttpMethod.POST, \"my_path\")\n\nvar response = await client.Transport\n    .RequestAsync<StringResponse>(\n        endpointPath,\n        PostData.String(body),\n        null,\n        null,\n        cancellationToken: default)\n    .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Query with Aggregations, Filtering, and Pagination\nDESCRIPTION: This JSON structure defines an Elasticsearch query that combines multiple query components. It includes a terms aggregation on the 'startedOn' field, pagination using 'from' and 'size', a post-filter for the 'state' field, and a match_all query to retrieve all documents. This query is designed to retrieve and analyze data from an Elasticsearch index with specific filtering and aggregation requirements.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"startDates\": {\n      \"terms\": {\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"from\": 10,\n  \"post_filter\": {\n    \"term\": {\n      \"state\": {\n        \"value\": \"Stable\"\n      }\n    }\n  },\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"size\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Direct Streaming Globally in ConnectionSettings\nDESCRIPTION: Shows how to disable direct streaming globally by configuring ConnectionSettings. This enables access to request and response bytes in debug information, though it comes with performance and memory allocation costs.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionPool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(connectionPool)\n    .DisableDirectStreaming(); <1>\n\nvar client = new ElasticClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo Distance Rings Aggregation in Elasticsearch\nDESCRIPTION: Defines a geo distance aggregation query that creates circular distance bands around Amsterdam's coordinates (52.376, 4.894). The query includes three range bands: 0-100 units, 100-300 units, and 300+ units, combined with a term filter for projects. The size parameter is set to 0 to return only aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoDistanceAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"rings_around_amsterdam\": {\n      \"geo_distance\": {\n        \"field\": \"locationPoint\",\n        \"origin\": 52.376, 4.894,\n        \"ranges\": [\n          {\n            \"to\": 100\n          },\n          {\n            \"from\": 100,\n            \"to\": 300\n          },\n          {\n            \"from\": 300\n          }\n        ]\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Sub-Aggregation using Object Initializer API in C#\nDESCRIPTION: This snippet demonstrates how to perform a sub-aggregation using the Object Initializer API. It creates a SearchRequest for the 'persons' index with a match all query, a terms aggregation on 'FirstName', and a nested max aggregation on 'Age'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar topLevelAggregation = Aggregation.Terms(new TermsAggregation\n{\n\tField = Infer.Field<Person>(x => x.FirstName)\n});\n\ntopLevelAggregation.Aggregations = new Dictionary<string, Aggregation>\n{\n\t{ \"avg_age\", new MaxAggregation\n\t{\n\t\tField = Infer.Field<Person>(x => x.Age)\n\t}}\n};\n\nvar response = await client.SearchAsync<Person>(new SearchRequest(\"persons\")\n{\n\tQuery = Query.MatchAll(new MatchAllQuery()),\n\tAggregations = new Dictionary<string, Aggregation>\n\t{\n\t\t{ \"firstnames\", topLevelAggregation}\n\t},\n\tSize = 10\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Search Queries with Elasticsearch .NET Object Initializer API\nDESCRIPTION: Shows how to use the Object initializer API to perform the same search operation. This approach constructs a SearchRequest object with a term query to find persons with first name 'Florian', limiting results to 10.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/query.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client\n\t.SearchAsync<Person>(new SearchRequest<Person>(\"persons\")\n\t{\n\t\tQuery = Query.Term(new TermQuery(Infer.Field<Person>(x => x.FirstName))\n\t\t{\n\t\t\tValue = \"Florian\"\n\t\t}),\n\t\tSize = 10\n\t});\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Bulk Index Operations with Various Configuration Options\nDESCRIPTION: Demonstrates multiple Elasticsearch bulk index operations with different configuration parameters including document IDs, routing values, pipelines, and version control. The examples show both simple index operations and more complex ones with overridden indices and configuration settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{\"_id\":\"TestName\",\"routing\":\"TestName\"}}\n{\"name\":\"TestName\"}\n{\"index\":{\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"},\"_id\":\"OverriddenId\",\"_index\":\"overridden-index\",\"require_alias\":false,\"routing\":\"OverriddenRoute\",\"version\":1,\"version_type\":\"external\"}}\n{\"name\":\"TestName\"}\n{\"index\":{}}\n{\"forename\":\"Steve\"}\n{\"index\":{\"_index\":\"configured-index\"}}\n{\"forename\":\"Steve\"}\n{\"index\":{\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"},\"_id\":\"ConfiguredId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"configured-index\",\"require_alias\":false,\"routing\":\"ConfiguredRoute\"}}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer for Elasticsearch in C#\nDESCRIPTION: Shows how to create a custom Serializer implementation for use with alternative JSON libraries in Elasticsearch .NET client.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\n\npublic class VanillaSerializer : Serializer\n{\n    public override object Deserialize(Type type, Stream stream) =>\n        throw new NotImplementedException();\n\n    public override T Deserialize<T>(Stream stream) =>\n        throw new NotImplementedException();\n\n    public override ValueTask<object> DeserializeAsync(Type type, Stream stream, CancellationToken cancellationToken = default) =>\n        throw new NotImplementedException();\n\n    public override ValueTask<T> DeserializeAsync<T>(Stream stream, CancellationToken cancellationToken = default) =>\n        throw new NotImplementedException();\n\n    public override void Serialize<T>(T data, Stream stream, SerializationFormatting formatting = SerializationFormatting.None) =>\n        throw new NotImplementedException();\n\n    public override Task SerializeAsync<T>(T data, Stream stream,\n        SerializationFormatting formatting = SerializationFormatting.None, CancellationToken cancellationToken = default) =>\n            throw new NotImplementedException();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Elasticsearch Analyzers and Filters\nDESCRIPTION: JSON configuration for setting up custom text analysis in Elasticsearch. Defines multiple analyzers including a custom analyzer with stop and synonym filters, a pattern analyzer, and a stop analyzer. Also configures a synonym filter with external synonyms file.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CreateIndexSerializationTests.CreateIndexWithAnalysisSettings_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my-custom-analyzer\": {\n          \"filter\": [\n            \"stop\",\n            \"synonym\"\n          ],\n          \"tokenizer\": \"standard\",\n          \"type\": \"custom\"\n        },\n        \"pattern-name\": {\n          \"type\": \"pattern\",\n          \"version\": \"version\"\n        },\n        \"stop-name\": {\n          \"stopwords_path\": \"path.txt\",\n          \"type\": \"stop\"\n        }\n      },\n      \"filter\": {\n        \"synonym\": {\n          \"synonyms_path\": \"analysis/synonym.txt\",\n          \"type\": \"synonym\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Elasticsearch .NET Client\nDESCRIPTION: Sets up basic authentication for Elasticsearch requests using the BasicAuthentication option.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/_options_on_elasticsearchclientsettings.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nBasicAuthentication\n```\n\n----------------------------------------\n\nTITLE: Customizing POCO Serialization with System.Text.Json Attributes\nDESCRIPTION: Demonstrates how to use System.Text.Json attributes to customize the serialization of POCO properties, including renaming and ignoring properties.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\n\npublic class Person\n{\n    [JsonPropertyName(\"forename\")]\n    public string FirstName { get; set; }\n\n    [JsonIgnore]\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mappings After Index Creation in Elasticsearch with C#\nDESCRIPTION: This snippet shows how to update mappings for an existing index using the Elasticsearch .NET client. It adds or modifies mappings for a 'Person' type, setting 'Age' as an integer and 'FirstName' as a non-indexed keyword field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/mappings.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.Indices.PutMappingAsync<Person>(mappings => mappings\n\t.Indices(\"index\")\n\t.Properties(properties => properties\n\t\t.IntegerNumber(x => x.Age!)\n\t\t.Keyword(x => x.FirstName!, keyword => keyword.Index(false))\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Indexing Document with Custom Serialization in Elasticsearch using C#\nDESCRIPTION: Demonstrates how to index a customer document into Elasticsearch using the custom serializer, which applies the custom enum conversion.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\nvar customer = new Customer\n{\n    CustomerName = \"Customer Ltd\",\n    CustomerType = CustomerType.Enhanced\n};\n\nvar indexResponse = await client.IndexAsync(customer, \"my-index-name\");\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Query with Significant Terms and Mutual Information Aggregation\nDESCRIPTION: A complete Elasticsearch query that filters documents where type equals 'project' and performs a significant terms aggregation on the 'name' field using mutual information scoring. The aggregation is configured to require at least 10 document matches and includes settings for background superset and negative correlations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SignificantTermsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    significant_names: {\n      significant_terms: {\n        field: name,\n        min_doc_count: 10,\n        mutual_information: {\n          background_is_superset: true,\n          include_negatives: true\n        }\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Elasticsearch Index\nDESCRIPTION: Removes an entire index and all its documents from Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/getting-started.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.Indices.DeleteAsync(\"my_index\");\n```\n\n----------------------------------------\n\nTITLE: Querying ES|QL API with CSV Format in C#\nDESCRIPTION: This snippet demonstrates how to execute an ES|QL query using the raw API, specifying CSV as the output format, and then converting the binary response data to a string.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/esql.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.Esql.QueryAsync(r => r\n\t.Query(\"FROM index\")\n\t.Format(\"csv\")\n);\nvar csvContents = Encoding.UTF8.GetString(response.Data);\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in Elasticsearch.NET Client\nDESCRIPTION: This snippet demonstrates how to enable debug mode when initializing an ElasticClient. It shows setting up a connection pool, enabling debug mode, and accessing debug information from a search response.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIConnectionPool pool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(pool)\n    .EnableDebugMode(); <1>\n\nvar client = new ElasticClient(settings);\n\nvar response = client.Search<Project>(s => s\n    .Query(q => q\n        .MatchAll()\n    )\n);\n\nvar debugInformation = response.DebugInformation; <2>\n```\n\n----------------------------------------\n\nTITLE: Update Document with Inline Script and Upsert in Elasticsearch\nDESCRIPTION: A bulk update operation with an inline 'painless' script to increment a counter field, including an upsert document with a 'name' field to be used if the document doesn't exist.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithUpdateOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"update\":{\"_id\":\"123\"}}\n{\"script\":{\"lang\":\"painless\",\"options\":{\"option1\":\"optionvalue1\"},\"source\":\"ctx._source.counter \\u002B= params.param1\",\"params\":{\"param1\":1}},\"upsert\":{\"name\":\"TestName\"}}\n```\n\n----------------------------------------\n\nTITLE: Indexing a Customer Document with Custom Converter in Elasticsearch.NET\nDESCRIPTION: This snippet demonstrates how to use the custom JsonConverter when indexing a Customer document into Elasticsearch using the Elasticsearch.NET client. It showcases the creation of a Customer instance and its indexing.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\nvar customer = new Customer\n{\n    CustomerName = \"Customer Ltd\",\n    CustomerType = CustomerType.Enhanced\n};\nvar indexResponse = await Client.IndexAsync(customer, \"my-index-name\");\n```\n\n----------------------------------------\n\nTITLE: Enabling ThreadPool Statistics Collection Globally\nDESCRIPTION: Shows how to enable ThreadPool statistics collection for all requests by configuring ConnectionSettings. This collects information about worker threads and asynchronous I/O threads.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionPool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(connectionPool)\n     .EnableThreadPoolStats(); <1>\n\nvar client = new ElasticClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic POCO Document Class in C#\nDESCRIPTION: Demonstrates how to create a simple POCO class to represent a document for Elasticsearch indexing. The default serialization behavior converts property names to camelCase in JSON.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDocument\n{\n    public string StringProperty { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serializer with Elasticsearch Client in C#\nDESCRIPTION: Demonstrates how to register a custom Serializer with the Elasticsearch client using ConnectionSettings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\nvar nodePool = new SingleNodePool(new Uri(\"http://localhost:9200\"));\nvar settings = new ElasticsearchClientSettings(\n    nodePool,\n    sourceSerializer: (defaultSerializer, settings) =>\n        new VanillaSerializer());\nvar client = new ElasticsearchClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom JsonConverter for Customer Class in C#\nDESCRIPTION: This code demonstrates the implementation of a custom JsonConverter for the Customer class. It handles custom serialization and deserialization, converting between CustomerType enum and a boolean 'isStandard' property.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\npublic class CustomerConverter : JsonConverter<Customer>\n{\n    public override Customer Read(ref Utf8JsonReader reader,\n        Type typeToConvert, JsonSerializerOptions options)\n    {\n        var customer = new Customer();\n\n        while (reader.Read() && reader.TokenType != JsonTokenType.EndObject)\n        {\n            if (reader.TokenType == JsonTokenType.PropertyName)\n            {\n                if (reader.ValueTextEquals(\"customerName\"))\n                {\n                    reader.Read();\n                    customer.CustomerName = reader.GetString();\n                    continue;\n                }\n\n                if (reader.ValueTextEquals(\"isStandard\"))\n                {\n                    reader.Read();\n                    var isStandard = reader.GetBoolean();\n\n                    if (isStandard)\n                    {\n                        customer.CustomerType = CustomerType.Standard;\n                    }\n                    else\n                    {\n                        customer.CustomerType = CustomerType.Enhanced;\n                    }\n\n                    continue;\n                }\n            }\n        }\n\n        return customer;\n    }\n\n    public override void Write(Utf8JsonWriter writer,\n        Customer value, JsonSerializerOptions options)\n    {\n        if (value is null)\n        {\n            writer.WriteNullValue();\n            return;\n        }\n\n        writer.WriteStartObject();\n\n        if (!string.IsNullOrEmpty(value.CustomerName))\n        {\n            writer.WritePropertyName(\"customerName\");\n            writer.WriteStringValue(value.CustomerName);\n        }\n\n        writer.WritePropertyName(\"isStandard\");\n\n        if (value.CustomerType == CustomerType.Standard)\n        {\n            writer.WriteBooleanValue(true);\n        }\n        else\n        {\n            writer.WriteBooleanValue(false);\n        }\n\n        writer.WriteEndObject();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Boolean Query in Elasticsearch\nDESCRIPTION: This snippet shows how to create a boolean query in Elasticsearch. It uses a must clause with match_all to ensure all documents are considered, and then adds should clauses to boost documents where the 'name' field matches either 'Steve' or 'David'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BoolQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: {\n        match_all: {}\n      },\n      should: [\n        {\n          term: {\n            name: {\n              value: Steve\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: David\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP Statistics Collection for a Single Request\nDESCRIPTION: Demonstrates how to enable TCP statistics collection for a specific request using RequestConfiguration. The statistics are then included in the response debug information.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = client.Search<Project>(s => s\n    .RequestConfiguration(r => r\n        .EnableTcpStats() <1>\n    )\n    .Query(q => q\n        .MatchAll()\n    )\n);\n\nvar debugInformation = response.DebugInformation;\n```\n\n----------------------------------------\n\nTITLE: Constructing Geo Distance Query in Elasticsearch JSON\nDESCRIPTION: This snippet defines an Elasticsearch query using the geo_distance filter. It specifies a location point, distance, boost factor, distance type, and other parameters for geographical querying.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoDistanceQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    geo_distance: {\n      boost: 1.1,\n      distance: 200m,\n      distance_type: arc,\n      locationPoint: {\n        lat: 34,\n        lon: 34\n      },\n      validation_method: ignore_malformed,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elasticsearch .NET Client Package Reference Manually\nDESCRIPTION: This XML snippet shows how to manually add a package reference for the Elasticsearch .NET client in the project file. The version number should be replaced with the latest published version from NuGet.org.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<PackageReference Include=\"Elastic.Clients.Elasticsearch\" Version=\"{latest-version}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Term Suggesters in Elasticsearch JSON\nDESCRIPTION: This JSON snippet configures two term suggesters for Elasticsearch, each targeting a different field. It also includes a text field for the suggestion query. The first suggester targets the 'description' field, while the second targets the 'leadDeveloper' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SuggesterSerializationTests.Suggester_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-suggester-1\": {\n    \"term\": {\n      \"field\": \"description\"\n    }\n  },\n  \"my-suggester-2\": {\n    \"term\": {\n      \"field\": \"leadDeveloper\"\n    }\n  },\n  \"text\": \"Trying out Elasticsearch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SystemTextJsonSerializer for Elasticsearch in C#\nDESCRIPTION: Implements a custom SystemTextJsonSerializer to control the order of JsonConverter registration, ensuring custom converters take precedence over default ones.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\npublic class MyCustomSerializer : SystemTextJsonSerializer\n{\n    private readonly JsonSerializerOptions _options;\n\n    public MyCustomSerializer(IElasticsearchClientSettings settings) : base(settings)\n    {\n        var options = DefaultSourceSerializer.CreateDefaultJsonSerializerOptions(false);\n\n        options.Converters.Add(new CustomerTypeConverter());\n\n        _options = DefaultSourceSerializer.AddDefaultConverters(options);\n    }\n\n    protected override JsonSerializerOptions CreateJsonSerializerOptions() => _options;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions with OnRequestCompleted in C#\nDESCRIPTION: This example shows how OnRequestCompleted is called even when exceptions are thrown. It uses a client configured to always return a 500 error and throw exceptions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/logging-with-onrequestcompleted.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar counter = 0;\nvar client = FixedResponseClient.Create(\n    new { },\n    500,\n    connectionSettings => connectionSettings\n        .ThrowExceptions()\n        .OnRequestCompleted(r => counter++)\n);\n\nAssert.Throws<TransportException>(() => client.RootNodeInfo());\ncounter.Should().Be(1);\n\nawait Assert.ThrowsAsync<TransportException>(async () => await client.RootNodeInfoAsync());\ncounter.Should().Be(2);\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Average Aggregation with Custom Script\nDESCRIPTION: Creates an Elasticsearch query with an aggregation named 'test_average' that calculates an average value using a custom script. The script takes the document's 'grade' field, multiplies it by 1.2, caps the result at 100 using Math.min(), and then emits this value for aggregation.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/AverageAggregationSerializationTests.CanSerialize_AvgAggregation_Descriptor.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    test_average: {\n      avg: {\n        script: {\n          source: emit(Math.min(100, doc['grade'].value * 1.2))\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base64 API Key Authentication in Elasticsearch .NET Client\nDESCRIPTION: Sets up Base64 encoded API key authentication for Elasticsearch Cloud using the Base64ApiKey option.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/_options_on_elasticsearchclientsettings.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nBase64ApiKey\n```\n\n----------------------------------------\n\nTITLE: Constructing Geo Distance Query in Elasticsearch JSON\nDESCRIPTION: This snippet shows how to create a geo_distance query in Elasticsearch. It specifies a distance of 200 meters from a given location point, using arc distance type and ignoring malformed inputs. The query is also given a boost and a name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoDistanceQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    geo_distance: {\n      boost: 1.1,\n      distance: 200m,\n      distance_type: arc,\n      locationPoint: {\n        lat: 34,\n        lon: 34\n      },\n      validation_method: ignore_malformed,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Sort Order in Elasticsearch .NET Client 9.0\nDESCRIPTION: Illustrates the more convenient way of applying sort order to a search request using the fluent API in version 9.0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar search = new SearchRequestDescriptor<Person>()\n    .Sort(\n        x => x.Score(),\n        x => x.Score(x => x.Order(SortOrder.Desc)),\n        x => x.Field(x => x.FirstName),\n        x => x.Field(x => x.Age, x => x.Order(SortOrder.Desc)),\n        x => x.Field(x => x.Age, SortOrder.Desc)\n        // 7.x syntax\n        x => x.Field(x => x.Field(x => x.FirstName).Order(SortOrder.Desc))\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JsonSerializerOptions for Source Serialization\nDESCRIPTION: Demonstrates how to configure custom JsonSerializerOptions to override default serialization behavior, such as using PascalCase for property names.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\nstatic void ConfigureOptions(JsonSerializerOptions o) =>\n    o.PropertyNamingPolicy = null;\n\nvar nodePool = new SingleNodePool(new Uri(\"http://localhost:9200\"));\nvar settings = new ElasticsearchClientSettings(\n    nodePool,\n    sourceSerializer: (defaultSerializer, settings) =>\n        new DefaultSourceSerializer(settings, ConfigureOptions));\nvar client = new ElasticsearchClient(settings);\n\nvar person = new Person { FirstName = \"Steve\" };\nvar indexResponse = await client.IndexAsync(person, \"my-index-name\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elasticsearch HTTP CA Fingerprint using OpenSSL\nDESCRIPTION: Command to extract the SHA-256 fingerprint from the HTTP CA certificate using OpenSSL. This fingerprint is required when configuring the .NET client to trust the Elasticsearch server's certificate.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/connecting.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nopenssl x509 -fingerprint -sha256 -in config/certs/http_ca.crt\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Parameters and Sending Low-Level Transport Request in C#\nDESCRIPTION: This snippet demonstrates how to create custom request parameters, construct a request path with query strings, and send a low-level transport request to Elasticsearch. It includes creating a MyRequestParameters class, setting up the request body, and using the Transport.RequestAsync method to send the request.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/transport.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyRequestParameters : RequestParameters\n{\n    public bool Pretty\n    {\n        get => Q<bool>(\"pretty\");\n        init => Q(\"pretty\", value);\n    }\n}\n\n// ...\n\nvar body = \"\"\"\n           {\n             \"name\": \"my-api-key\",\n             \"expiration\": \"1d\",\n             \"...\": \"...\"\n           }\n           \"\"\";\n\nMyRequestParameters requestParameters = new()\n{\n    Pretty = true\n};\n\nvar pathAndQuery = requestParameters.CreatePathWithQueryStrings(\"/_security/api_key\",\n    client.ElasticsearchClientSettings);\nvar endpointPath = new EndpointPath(Elastic.Transport.HttpMethod.POST, pathAndQuery);\n\n// Or, if the path does not contain query parameters:\n// new EndpointPath(Elastic.Transport.HttpMethod.POST, \"my_path\")\n\nvar response = await client.Transport\n    .RequestAsync<StringResponse>(\n        endpointPath,\n        PostData.String(body),\n        null,\n        null,\n        cancellationToken: default)\n    .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Constructing a Complete Elasticsearch Query with Aggregations, Filtering and Pagination\nDESCRIPTION: A comprehensive Elasticsearch query that retrieves documents with pagination (from position 10, with 20 results), filters for documents with state 'Stable', and performs term aggregation on the 'startedOn' field. It retrieves only specific stored fields and uses a match_all query to get all documents that satisfy the filters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiStoredFieldsTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    startDates: {\n      terms: {\n        field: startedOn\n      }\n    }\n  },\n  from: 10,\n  post_filter: {\n    term: {\n      state: {\n        value: Stable\n      }\n    }\n  },\n  query: {\n    match_all: {}\n  },\n  size: 20,\n  stored_fields: [\n    name,\n    numberOfCommits\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Geotile Grid Aggregation and Term Filter\nDESCRIPTION: This query performs a geotile grid aggregation on the 'locationPoint' field while filtering results to only include documents where the 'type' field is 'project'. The aggregation uses a precision of 3 and limits results to 1000 buckets. The query returns no documents, only aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeotileGridAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"my_geotile\": {\n      \"geotile_grid\": {\n        \"field\": \"locationPoint\",\n        \"precision\": 3,\n        \"shard_size\": 100,\n        \"size\": 1000\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch .NET Client for Local Fiddler Debugging\nDESCRIPTION: Demonstrates how to configure the Elasticsearch .NET client to route traffic through Fiddler when connecting to a local cluster. Uses 'ipv4.fiddler' instead of 'localhost' to bypass .NET Framework proxy restrictions and enables pretty JSON formatting for better request/response readability.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/logging-with-fiddler.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar isFiddlerRunning = Process.GetProcessesByName(\"fiddler\").Any();\nvar host = isFiddlerRunning ? \"ipv4.fiddler\" : \"localhost\";\n\nvar connectionSettings = new ConnectionSettings(new Uri($\"http://{host}:9200\"))\n    .PrettyJson();\n\nvar client = new ElasticClient(connectionSettings);\n```\n\n----------------------------------------\n\nTITLE: Defining a Customer Class with Custom JsonConverter in C#\nDESCRIPTION: This snippet shows how to define a Customer class with a custom JsonConverter attribute. The converter is used to customize the serialization of the CustomerType enum.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\n\n[JsonConverter(typeof(CustomerConverter))]\npublic class Customer\n{\n    public string CustomerName { get; set; }\n    public CustomerType CustomerType { get; set; }\n}\n\npublic enum CustomerType\n{\n    Standard,\n    Enhanced\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Information\nDESCRIPTION: Retrieves debug information from the response object containing the audit trail.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/audit-trail.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar debug = response.DebugInformation;\n```\n\n----------------------------------------\n\nTITLE: Per-Request DisableDirectStreaming with OnRequestCompleted in C#\nDESCRIPTION: This example shows how to use DisableDirectStreaming on a per-request basis with OnRequestCompleted. It demonstrates logging request and response details selectively.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/logging-with-onrequestcompleted.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar list = new List<string>();\nvar connectionPool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(connectionPool, new InMemoryConnection())\n    .DefaultIndex(\"default-index\")\n    .OnRequestCompleted(apiCallDetails =>\n    {\n        if (apiCallDetails.RequestBodyInBytes != null)\n        {\n            list.Add(\n                $\"{apiCallDetails.HttpMethod} {apiCallDetails.Uri} \" +\n                $\"{Encoding.UTF8.GetString(apiCallDetails.RequestBodyInBytes)}\");\n        }\n        else\n        {\n            list.Add($\"{apiCallDetails.HttpMethod} {apiCallDetails.Uri}\");\n        }\n\n        if (apiCallDetails.ResponseBodyInBytes != null)\n        {\n            list.Add($\"Status: {apiCallDetails.HttpStatusCode}\" +\n                     $\"{Encoding.UTF8.GetString(apiCallDetails.ResponseBodyInBytes)}\");\n        }\n        else\n        {\n            list.Add($\"Status: {apiCallDetails.HttpStatusCode}\");\n        }\n    });\n\nvar client = new ElasticClient(settings);\n\nvar syncResponse = client.Search<object>(s => s\n    .AllIndices()\n    .Scroll(\"2m\")\n    .Sort(ss => ss\n        .Ascending(SortSpecialField.DocumentIndexOrder)\n    )\n);\n\nlist.Count.Should().Be(2);\n\nvar asyncResponse = await client.SearchAsync<object>(s => s\n    .RequestConfiguration(r => r\n        .DisableDirectStreaming()\n    )\n    .AllIndices()\n    .Scroll(\"10m\")\n    .Sort(ss => ss\n        .Ascending(SortSpecialField.DocumentIndexOrder)\n    )\n);\n\nlist.Count.Should().Be(4);\nlist.Should().BeEquivalentTo(new[]\n{\n    @\"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=2m\",\n    @\"Status: 200\",\n    @\"POST http://localhost:9200/_all/_search?typed_keys=true&scroll=10m {\\\"sort\\\":[{\\\"_doc\\\":{\\\"order\\\":\\\"asc\\\"}}]}\",\n    @\"Status: 200\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Query and Aggregations for Project Analysis\nDESCRIPTION: This JSON structure defines an Elasticsearch query and aggregation pipeline. It filters for documents of type 'project', creates a date histogram of projects started per month, and calculates the sum and cumulative sum of commits for each bucket.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CumulativeSumAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects_started_per_month\": {\n      \"aggregations\": {\n        \"commits\": {\n          \"sum\": {\n            \"field\": \"numberOfCommits\"\n          }\n        },\n        \"cumulative_commits\": {\n          \"cumulative_sum\": {\n            \"buckets_path\": \"commits\"\n          }\n        }\n      },\n      \"date_histogram\": {\n        \"calendar_interval\": \"month\",\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ThreadPool Statistics Collection for a Single Request\nDESCRIPTION: Demonstrates how to enable ThreadPool statistics collection for a specific request using RequestConfiguration. The statistics are then included in the response debug information.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = client.Search<Project>(s => s\n     .RequestConfiguration(r => r\n             .EnableThreadPoolStats() <1>\n     )\n     .Query(q => q\n         .MatchAll()\n     )\n );\n\nvar debugInformation = response.DebugInformation; <2>\n```\n\n----------------------------------------\n\nTITLE: Executing Search Request\nDESCRIPTION: Performs a simple match_all search query against the Elasticsearch cluster for Project documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/audit-trail.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = client.Search<Project>(s => s\n    .MatchAll()\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming Top-Level Aggregation Response in C#\nDESCRIPTION: This snippet demonstrates how to consume the response from a top-level aggregation. It retrieves the max value from the 'agg_name' aggregation and prints it to the console.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/aggregations.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar max = response.Aggregations!.GetMax(\"agg_name\")!;\nConsole.WriteLine(max.Value);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JsonConverter for Enum in C#\nDESCRIPTION: Creates a custom JsonConverter for the CustomerType enum to control its string representation during serialization and deserialization.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\n\npublic class CustomerTypeConverter : JsonConverter<CustomerType>\n{\n    public override CustomerType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        return reader.GetString() switch\n        {\n            \"basic\" => CustomerType.Standard,\n            \"premium\" => CustomerType.Enhanced,\n            _ => throw new JsonException(\n                $\"Unknown value read when deserializing {nameof(CustomerType)}.\"),\n        };\n    }\n\n    public override void Write(Utf8JsonWriter writer, CustomerType value, JsonSerializerOptions options)\n    {\n        switch (value)\n        {\n            case CustomerType.Standard:\n                writer.WriteStringValue(\"basic\");\n                return;\n            case CustomerType.Enhanced:\n                writer.WriteStringValue(\"premium\");\n                return;\n        }\n\n        writer.WriteNullValue();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Basic and Advanced Delete Operations in Elasticsearch Bulk API\nDESCRIPTION: This code snippet shows multiple delete operations in Elasticsearch's bulk API format. It includes simple deletions with just an ID, as well as more complex deletions with additional parameters like primary term, sequence number, index, routing, and versioning.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithDeleteOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"delete\":{\"_id\":\"123\"}}\n{\"delete\":{\"_id\":\"ConfiguredId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"configured-index\",\"routing\":\"ConfiguredRoute\",\"require_alias\":false,\"version\":1,\"version_type\":\"external\"}}\n{\"delete\":{\"_id\":\"TestName\"}}\n{\"delete\":{\"_id\":\"OverriddenId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"overridden-index\",\"routing\":\"OverriddenRoute\",\"require_alias\":false,\"version\":1,\"version_type\":\"external\"}}\n```\n\n----------------------------------------\n\nTITLE: Indexing a Customized POCO Document\nDESCRIPTION: Shows how to index a POCO document with customized serialization attributes into Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Elastic.Transport;\nusing Elastic.Clients.Elasticsearch;\nusing Elastic.Clients.Elasticsearch.Serialization;\n\nvar person = new Person { FirstName = \"Steve\", Age = 35 };\nvar indexResponse = await Client.IndexAsync(person, \"my-index-name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-criteria Sorting in Elasticsearch JSON Query\nDESCRIPTION: Defines a complex sort configuration for Elasticsearch with three criteria: a timestamp field 'startedOn' in ascending order, a text field 'name' in descending order, and a geo-distance sort that calculates distance from multiple points with custom settings like distance_type, mode, and unit.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SortUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  sort: [\n    {\n      startedOn: {\n        order: asc\n      }\n    },\n    {\n      name: {\n        order: desc\n      }\n    },\n    {\n      _geo_distance: {\n        distance_type: arc,\n        locationPoint: [\n          {\n            lat: 70,\n            lon: -70\n          },\n          {\n            lat: -12,\n            lon: 12\n          }\n        ],\n        mode: min,\n        order: asc,\n        unit: cm\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terms Aggregation with Term Query in Elasticsearch\nDESCRIPTION: A complete Elasticsearch query that combines a term query filter with a terms aggregation. The aggregation includes metadata, execution hints, field selection, minimum document count, missing value handling, custom ordering, script transformation, and size limits for both shard and final results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    states: {\n      meta: {\n        foo: bar\n      },\n      terms: {\n        execution_hint: map,\n        field: state,\n        min_doc_count: 2,\n        missing: n/a,\n        order: [\n          {\n            _key: asc\n          },\n          {\n            _count: desc\n          }\n        ],\n        script: {\n          source: 'State of Being: '+_value\n        },\n        shard_size: 100,\n        size: 5\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intervals Query in Elasticsearch\nDESCRIPTION: Defines an intervals query that searches for 'Steve' in the 'name' field with zero gaps allowed between terms and ordered matching. The query has a boost value of 2 and is named 'testing-intervals'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IntervalsQuerySerializationTests.IntervalsQueryDescriptor_CanSerialize_WithObjectVariant.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    intervals: {\n      name: {\n        boost: 2,\n        match: {\n          max_gaps: 0,\n          ordered: true,\n          query: Steve\n        },\n        _name: testing-intervals\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining POCO and Enum for Custom Serialization in C#\nDESCRIPTION: Defines a Customer class with a CustomerType enum property, which will be used to demonstrate custom enum serialization.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\n\npublic class Customer\n{\n    public string CustomerName { get; set; }\n    public CustomerType CustomerType { get; set; }\n}\n\npublic enum CustomerType\n{\n    Standard,\n    Enhanced\n}\n```\n\n----------------------------------------\n\nTITLE: Default JSON Serialization Output\nDESCRIPTION: Illustrates the default JSON output when serializing a POCO document. Property names are converted to camelCase.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"stringProperty\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch WKT BBOX Query Definition\nDESCRIPTION: Defines a geographic bounding box using WKT (Well-Known Text) format. The coordinates specify a rectangular area with longitude bounds of -74.1 to -71.12 and latitude bounds of 40.73 to 40.01.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsSerializationTests.RoundTripSerialize_GeoBounds_WithWktGeoBounds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  wkt: BBOX (-74.1, -71.12, 40.73, 40.01)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Polygon Query in Elasticsearch\nDESCRIPTION: Creates a geo_polygon query that searches within a polygon defined by three geographic coordinates. Includes boost factor of 1.1, strict validation, ignore_unmapped option, and a named query parameter.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoPolygonQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    geo_polygon: {\n      boost: 1.1,\n      ignore_unmapped: true,\n      locationPoint: {\n        points: [\n          {\n            lat: 45,\n            lon: -45\n          },\n          {\n            lat: -34,\n            lon: -34\n          },\n          {\n            lat: 70,\n            lon: -70\n          }\n        ]\n      },\n      validation_method: strict,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-criteria Sorting with Geo-distance in Elasticsearch\nDESCRIPTION: This JSON configuration defines a sort order for Elasticsearch results using multiple criteria. It first sorts by 'startedOn' field in ascending order, then by 'name' in descending order, and finally by geographical distance from two reference points using the arc distance type with centimeter precision.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SortUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  sort: [\n    {\n      startedOn: {\n        order: asc\n      }\n    },\n    {\n      name: {\n        order: desc\n      }\n    },\n    {\n      _geo_distance: {\n        distance_type: arc,\n        locationPoint: [\n          {\n            lat: 70,\n            lon: -70\n          },\n          {\n            lat: -12,\n            lon: 12\n          }\n        ],\n        mode: min,\n        order: asc,\n        unit: cm\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Significant Terms Aggregation and Mutual Information\nDESCRIPTION: This query performs a term filter on 'type: project' and applies a significant terms aggregation on the 'name' field. It uses mutual information for term significance calculation, including negative correlations and treating the background as a superset. The minimum document count for terms is set to 10.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SignificantTermsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"significant_names\": {\n      \"significant_terms\": {\n        \"field\": \"name\",\n        \"min_doc_count\": 10,\n        \"mutual_information\": {\n          \"background_is_superset\": true,\n          \"include_negatives\": true\n        }\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch .NET Client via Package Manager Console\nDESCRIPTION: This command installs the Elasticsearch .NET client using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Elastic.Clients.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Initializing Aggregation in Elasticsearch .NET Client 9.0\nDESCRIPTION: Shows the new way of initializing aggregations in version 9.0, allowing for direct property assignment and nested aggregations in a single object initializer.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// 9.0\nvar agg = new Aggregation\n{\n    Max = new MaxAggregation { Field = \"my_field\" },\n    Aggregations = new Dictionary<string, Aggregation>\n    {\n        { \"my_sub_agg\", new Aggregation{ Terms = new TermsAggregation() } }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing a Match Query in Elasticsearch Query DSL\nDESCRIPTION: This snippet demonstrates how to create a match query in Elasticsearch's Query DSL. It searches for documents where the 'name' field matches the term 'NEST'. This type of query is commonly used for full-text search operations in Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApiTests_NonGenericDescriptor.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo-Line Aggregation Query in Elasticsearch\nDESCRIPTION: Defines an Elasticsearch query structure that uses geo_line aggregation to process geographic data points with sorting and filtering. The query includes point field mapping, size limits, and filtering by project type. The aggregation is configured to include sort information and limits results to 25 entries.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoLineAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"line\": {\n      \"geo_line\": {\n        \"include_sort\": true,\n        \"point\": {\n          \"field\": \"locationPoint\"\n        },\n        \"size\": 25,\n        \"sort\": {\n          \"field\": \"startedOn\"\n        }\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Match Query in Elasticsearch\nDESCRIPTION: This snippet shows how to construct a simple match query in Elasticsearch using the Query DSL. It searches for documents where the 'name' field matches the term 'NEST'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApiTests_NonGenericDescriptor.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Project Commits with Date Histogram in Elasticsearch\nDESCRIPTION: Query demonstrating nested aggregations with date histogram bucketing, sum aggregation for commit counts, and cumulative sum calculations. The query filters for documents of type 'project' and uses monthly intervals.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CumulativeSumAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects_started_per_month\": {\n      \"aggregations\": {\n        \"commits\": {\n          \"sum\": {\n            \"field\": \"numberOfCommits\"\n          }\n        },\n        \"cumulative_commits\": {\n          \"cumulative_sum\": {\n            \"buckets_path\": \"commits\"\n          }\n        }\n      },\n      \"date_histogram\": {\n        \"calendar_interval\": \"month\",\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP Statistics Collection Globally\nDESCRIPTION: Shows how to enable TCP statistics collection for all requests by configuring ConnectionSettings. This collects information about active TCP connections just before making a request.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionPool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\n\nvar settings = new ConnectionSettings(connectionPool)\n    .EnableTcpStats(); <1>\n\nvar client = new ElasticClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Defining Tweet Model Class in C#\nDESCRIPTION: Defines a C# class representing a Tweet document to be stored in Elasticsearch. The Id property is used by default for document identification.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/examples.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tweet\n{\n    public int Id { get; set; }\n    public string User { get; set; }\n    public DateTime PostDate { get; set; }\n    public string Message { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Geo-Distance Aggregations in Elasticsearch\nDESCRIPTION: Defines a complex Elasticsearch query that performs geo-distance aggregation around Amsterdam (52.376°N, 4.894°E) with three distance ranges: 0-100, 100-300, and 300+ units. Includes a term filter for 'project' type and sets size to 0 to return only aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoDistanceAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"rings_around_amsterdam\": {\n      \"geo_distance\": {\n        \"field\": \"locationPoint\",\n        \"origin\": {\n          \"lat\": 52.376,\n          \"lon\": 4.894\n        },\n        \"ranges\": [\n          {\n            \"to\": 100\n          },\n          {\n            \"from\": 100,\n            \"to\": 300\n          },\n          {\n            \"from\": 300\n          }\n        ]\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Elasticsearch Aliases with Filters\nDESCRIPTION: Defines two aliases (alias_1 and alias_2) for an Elasticsearch index. The second alias includes a term filter for username 'stevegordon' and specific shard routing to 'shard-1'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CreateIndexSerializationTests.CreateIndexWithAliases_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aliases: {\n    alias_1: {},\n    alias_2: {\n      filter: {\n        term: {\n          username: {\n            value: stevegordon\n          }\n        }\n      },\n      routing: shard-1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Query and Aggregation in JSON\nDESCRIPTION: This JSON structure defines an Elasticsearch query with a terms aggregation on the 'state' field. It includes various aggregation parameters such as execution hint, min_doc_count, order, and a custom script. The query filters documents where the 'type' field is 'project'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"states\": {\n      \"meta\": {\n        \"foo\": \"bar\"\n      },\n      \"terms\": {\n        \"execution_hint\": \"map\",\n        \"field\": \"state\",\n        \"min_doc_count\": 2,\n        \"missing\": \"n/a\",\n        \"order\": [\n          {\n            \"_key\": \"asc\"\n          },\n          {\n            \"_count\": \"desc\"\n          }\n        ],\n        \"script\": {\n          \"source\": \"'State of Being: '+_value\"\n        },\n        \"shard_size\": 100,\n        \"size\": 5\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Direct Streaming for a Single Request\nDESCRIPTION: Demonstrates how to disable direct streaming for a specific request using RequestConfiguration. This setting takes precedence over any global configuration.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = client.Search<Project>(s => s\n    .RequestConfiguration(r => r\n        .DisableDirectStreaming() <1>\n    )\n    .Query(q => q\n        .MatchAll()\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Container Types in C#\nDESCRIPTION: Shows the new recommended way of inspecting container types using pattern matching in version 9.0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/breaking-changes.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = new Query();\n\nif (query.Nested is { } nested)\n{\n    // We have a nested query.\n}\n```\n\n----------------------------------------\n\nTITLE: Update Document with Inline Painless Script in Elasticsearch\nDESCRIPTION: A bulk update operation using an inline 'painless' script to increment a counter field by the parameter value. The script includes custom options and targets document with ID '123'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithUpdateOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"update\":{\"_id\":\"123\"}}\n{\"script\":{\"lang\":\"painless\",\"options\":{\"option1\":\"optionvalue1\"},\"source\":\"ctx._source.counter \\u002B= params.param1\",\"params\":{\"param1\":1}}}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Geo-Centroid Aggregation\nDESCRIPTION: Query structure that calculates the geographic center point of locations while filtering by project type. The query returns no documents (size: 0) and only aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoCentroidAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    centroid: {\n      geo_centroid: {\n        field: locationPoint\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents by Date Range in Elasticsearch\nDESCRIPTION: This query uses a bool filter with a range clause to select documents where the 'lastActivity' field falls within the last 24 hours. It demonstrates how to use date math expressions in Elasticsearch queries.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultipleSearchFiltersTests.CanSerialize_DateRangeFilter.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      filter: [\n        {\n          range: {\n            lastActivity: {\n              gte: now-1d/d,\n              lt: now/d\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Query with IP Prefix Aggregation in JSON\nDESCRIPTION: This JSON structure defines an Elasticsearch query that combines an IP prefix aggregation with a term query. The aggregation groups IP addresses by their /24 subnet, while the query filters for documents where the 'type' field is 'project'. The size is set to 0 to return only aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IpPrefixAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"ipv4-subnets\": {\n      \"ip_prefix\": {\n        \"field\": \"leadDeveloper.ipAddress\",\n        \"prefix_length\": 24\n      },\n      \"meta\": {\n        \"foo\": \"bar\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'name' Field Mapping in Elasticsearch\nDESCRIPTION: This JSON snippet defines the mapping configuration for a 'name' field in Elasticsearch. It sets the boost value to 1.2 and specifies the field type as 'text'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/PropertiesSerializationTests.CanSerialize_Properties_WithPropertyNameExpression.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name: {\n    boost: 1.2,\n    type: text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Elasticsearch Client with Sniffing Connection Pool\nDESCRIPTION: Sets up an Elasticsearch client with a SniffingConnectionPool configuration and default mapping for Project type to a specific index.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/audit-trail.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar pool = new SniffingConnectionPool(new []{ TestConnectionSettings.CreateUri() });\nvar connectionSettings = new ConnectionSettings(pool)\n    .DefaultMappingFor<Project>(i => i\n        .IndexName(\"project\")\n    );\n\nvar client = new ElasticClient(connectionSettings);\n```\n\n----------------------------------------\n\nTITLE: Update Document with Referenced Script in Elasticsearch\nDESCRIPTION: A bulk update operation that uses a referenced script identified by 'my-script-id' to update a document with ID '123' in 'test-index'. The script is passed a parameter 'param1' with value 'paramvalue1'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithUpdateOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"update\":{\"_id\":\"123\",\"_index\":\"test-index\"}}\n{\"script\":{\"id\":\"my-script-id\",\"params\":{\"param1\":\"paramvalue1\"}}}\n```\n\n----------------------------------------\n\nTITLE: GeoHash Grid Aggregation Query in Elasticsearch\nDESCRIPTION: Elasticsearch query that performs geohash grid aggregation on a locationPoint field with precision 3, while filtering for documents of type 'project'. The query uses shard_size of 100 and returns up to 1000 grid cells, with no actual documents returned (size: 0).\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeohashGridAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"my_geohash_grid\": {\n      \"geohash_grid\": {\n        \"field\": \"locationPoint\",\n        \"precision\": 3,\n        \"shard_size\": 100,\n        \"size\": 1000\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Whitespace Lowercase Analyzer in Elasticsearch\nDESCRIPTION: Defines a custom Elasticsearch analyzer that splits text on whitespace and converts tokens to lowercase. This configuration can be used in index settings or mapping definitions to control how text fields are processed during indexing and search.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndexSettingsSerializationTests.CanSerialize_IndexSettingsWithCustomAnalyzer.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"analysis\": {\n    \"analyzer\": {\n      \"whitespace_lowercase\": {\n        \"filter\": [\n          \"lowercase\"\n        ],\n        \"tokenizer\": \"whitespace\",\n        \"type\": \"custom\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Elasticsearch Query with Aggregations and Filtering\nDESCRIPTION: This JSON structure defines an Elasticsearch query that includes term aggregations, pagination, post-filtering, and a match_all query. It aggregates startDates, sets pagination parameters, applies a post-filter for the 'Stable' state, and uses a match_all query to retrieve all documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"startDates\": {\n      \"terms\": {\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"from\": 10,\n  \"post_filter\": {\n    \"term\": {\n      \"state\": {\n        \"value\": \"Stable\"\n      }\n    }\n  },\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"size\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing HTTP CA Certificate Fingerprint from Elasticsearch Security Output\nDESCRIPTION: Sample output showing the security configuration information displayed when starting Elasticsearch for the first time, including the elastic user password and HTTP CA certificate fingerprint needed for secure connections.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/connecting.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n----------------------------------------------------------------\n-> Elasticsearch security features have been automatically configured!\n-> Authentication is enabled and cluster connections are encrypted.\n\n->  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):\n  lhQpLELkjkrawaBoaz0Q\n\n->  HTTP CA certificate SHA-256 fingerprint:\n  a52dd93511e8c6045e21f16654b77c9ee0f34aea26d9f40320b531c474676228\n...\n----------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining Project Document Structure in JSON for Elasticsearch\nDESCRIPTION: JSON structure that defines a project document for Elasticsearch with various fields including join type, project metadata, developer information, state, and visibility. The document includes nested objects and represents a project in a specific state with leadership information.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_SerialisationTest_4.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Geo Bounds Aggregation\nDESCRIPTION: Query that aggregates location points to calculate viewport bounds while filtering for documents of type 'project'. Uses geo_bounds aggregation with wrap_longitude enabled and returns no documents (size: 0) since only aggregation results are needed.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    viewport: {\n      geo_bounds: {\n        field: locationPoint,\n        wrap_longitude: true\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Container Types Query Usage Changes in C#\nDESCRIPTION: Demonstrates the change in container types from static factory methods to regular properties. Shows the difference between 8.x and 9.0 syntax for creating search requests with queries.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/breaking-changes.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// 8.x\nnew SearchRequest\n{\n    Query = Query.MatchAll(\n        new MatchAllQuery\n        {\n        }\n    )\n};\n\n// 9.0\nnew SearchRequest\n{\n    Query = new Query\n    {\n        MatchAll = new MatchAllQuery\n        {\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing Geo Bounding Box Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to create a geo_bounding_box query in Elasticsearch. It defines a rectangular area using latitude and longitude coordinates for the top-left and bottom-right corners. The query includes additional parameters like boost, ignore_unmapped, validation_method, and a custom name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundingBoxQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    geo_bounding_box: {\n      boost: 1.1,\n      ignore_unmapped: true,\n      locationPoint: {\n        bottom_right: {\n          lat: -34,\n          lon: 34\n        },\n        top_left: {\n          lat: 34,\n          lon: -34\n        }\n      },\n      validation_method: strict,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Arguments for Request/Response in Elasticsearch .NET\nDESCRIPTION: Demonstrates how to specify separate type arguments for requests and responses when executing search requests. Shows usage of generic type parameters for Person and JsonObject types.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.SearchAsync<Person, JsonObject>(x => x\n    .Query(x => x.Term(x => x.Field(x => x.FirstName).Value(\"Florian\")))\n);\n\nvar documents = response.Documents;\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Bulk Index Operation with Custom Index\nDESCRIPTION: This snippet demonstrates an Elasticsearch bulk index operation with a custom index specified. It indexes a document with a 'forename' field into the 'configured-index'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{\"_index\":\"configured-index\"}}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Project Document Structure - JSON\nDESCRIPTION: JSON document structure defining a project entity with nested developer information, project status fields, and metadata. The schema includes fields for join relationships, timestamps, project visibility and contributor tracking.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_SerialisationTest_2.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Bool Query with Multiple Term Filters in Elasticsearch\nDESCRIPTION: This snippet shows how to structure a bool query in Elasticsearch with multiple must clauses. Each clause is a term filter on the 'name' field, allowing for exact matching of multiple values.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.MultipleSearchQueriesCombinedWithAndOperator_SerializeAsManyMustClauses.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: z\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Match Query for Elasticsearch\nDESCRIPTION: A JSON representation of an Elasticsearch match query that searches for the term 'NEST' in the 'name' field. Match queries are commonly used for full-text search in Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/Query_WithFieldNameQuery_SerializationTests.CanSerialize_QueryDescriptor_WithSimpleMatchQuery.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  match: {\n    name: {\n      query: NEST\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Geo Polygon Query\nDESCRIPTION: Defines a geo_polygon query that searches for documents where a location field falls within a polygon defined by three geographical coordinates. Includes boost factor of 1.1, strict validation, and handling of unmapped fields.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoPolygonQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    geo_polygon: {\n      boost: 1.1,\n      ignore_unmapped: true,\n      locationPoint: {\n        points: [\n          {\n            lat: 45,\n            lon: -45\n          },\n          {\n            lat: -34,\n            lon: -34\n          },\n          {\n            lat: 70,\n            lon: -70\n          }\n        ]\n      },\n      validation_method: strict,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary API Usage in Search Aggregations\nDESCRIPTION: Demonstrates dictionary type support in aggregations using both scalar and fluent syntax patterns for adding and managing dictionary entries.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnew SearchRequestDescriptor<Person>()\n    .Aggregations(new Dictionary<string, Aggregation>()) // Scalar.\n    .Aggregations(aggs => aggs                           // Fluent: Nested.\n        .Add(\"key\", new MaxAggregation())                // Scalar: Key + Value.\n        .Add(\"key\", x => x.Max())                        // Fluent: Key + Value.\n    )\n    .AddAggregation(\"key\", new MaxAggregation())         // Scalar.\n    .AddAggregation(\"key\", x => x.Max());\n```\n\n----------------------------------------\n\nTITLE: Project Document Schema in Elasticsearch\nDESCRIPTION: Defines the structure of a project document in Elasticsearch with fields for project metadata, lead developer information, and status details. The schema includes fields for join relationships, activity tracking, contributor counts, and project visibility settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_DescriptorSerialisationTest_4.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Bool Query in Elasticsearch DSL\nDESCRIPTION: This snippet demonstrates how to construct a bool query in Elasticsearch DSL. It includes filter, must, and must_not clauses to define specific search criteria on the 'name' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithMustAndMustNotAndFilter_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"term\": {\n          \"name\": {\n            \"value\": \"a\"\n          }\n        }\n      },\n      \"must\": [\n        {\n          \"term\": {\n            \"name\": {\n              \"value\": \"x\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"name\": {\n              \"value\": \"y\"\n            }\n          }\n        }\n      ],\n      \"must_not\": {\n        \"term\": {\n          \"name\": {\n            \"value\": \"z\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Shape Query with Indexed Shape Reference\nDESCRIPTION: JSON configuration for an Elasticsearch shape query that references a pre-indexed shape. The query boosts relevance by 1.2, retrieves a shape with ID 'deu' from the 'shapes' index using the 'location' path, and checks if documents are 'within' this shape.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchSerializationTests.Search_WithShapeQuery_Serializes_ForObjectInitializer.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  shape: {\n    boost: 1.2,\n    description: {\n      indexed_shape: {\n        id: deu,\n        index: shapes,\n        path: location\n      },\n      relation: within\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Pinned Query with Organic Results in Elasticsearch\nDESCRIPTION: This query uses the 'pinned' query type to boost specific document IDs while also including organic results. It sets a boost value, specifies pinned document IDs, and includes a match_all query for organic results. Both the pinned and organic parts of the query are named for easier debugging and result analysis.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/PinnedQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    pinned: {\n      boost: 1.1,\n      ids: [\n        1,\n        11,\n        22\n      ],\n      organic: {\n        match_all: {\n          _name: organic_query\n        }\n      },\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terms Aggregation in Elasticsearch Query\nDESCRIPTION: This code snippet shows how to define a terms aggregation in an Elasticsearch query. It creates an aggregation named 'my-terms-agg' that groups results based on the 'name' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchSerializationTests.CanSerialize_SearchRequest_WithAggregations.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"my-terms-agg\": {\n      \"terms\": {\n        \"field\": \"name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Dictionary Context Management\nDESCRIPTION: Demonstrates handling of dictionary values that are collections, showing both object initialization and fluent syntax patterns.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnew CompletionSuggesterDescriptor<Person>()\n    .AddContext(\"key\", \n        new CompletionContext{ Context = new Context(\"first\") },\n        new CompletionContext{ Context = new Context(\"second\") }\n    )\n    .AddContext(\"key\",\n        x => x.Context(x => x.Category(\"first\")),\n        x => x.Context(x => x.Category(\"second\"))\n    );\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Geo Bounds Aggregation in JSON\nDESCRIPTION: This JSON object defines an Elasticsearch query that filters for documents of type 'project' and calculates the bounding box of locationPoint fields. It uses a term query for filtering and a geo_bounds aggregation for spatial analysis.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"viewport\": {\n      \"geo_bounds\": {\n        \"field\": \"locationPoint\",\n        \"wrap_longitude\": true\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Project Document Structure in JSON\nDESCRIPTION: This code snippet outlines the structure of a project document for Elasticsearch. It includes fields for project details, lead developer information, and project status. The structure uses nested objects and various data types to represent different aspects of a project.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_DescriptorSerialisationTest_2.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Documents with Bool Query in Elasticsearch\nDESCRIPTION: A bool query that filters documents based on exact matches for age and name fields. Uses term-level queries within a bool filter context to find documents where age is 37 and name is Steve.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultipleSearchFiltersTests.CanSerialize_MultipleFilters.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      filter: [\n        {\n          term: {\n            age: {\n              value: 37\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: Steve\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Boolean Query with Multiple Term Clauses in Elasticsearch\nDESCRIPTION: This snippet shows how to create a boolean query in Elasticsearch that must match two specific term queries. It searches for documents where the 'name' field matches both values 'x' and 'y'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueriesCombinedWithAndOperator_SerializeAsMustClauses.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Boolean Query with Must and Should Clauses in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to construct a boolean query in Elasticsearch using the Query DSL. It combines a 'must' clause that matches all documents with 'should' clauses that perform term matching on the 'name' field for 'Steve' and 'David'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BoolQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: {\n        match_all: {}\n      },\n      should: [\n        {\n          term: {\n            name: {\n              value: Steve\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: David\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Descriptor Wrapping and Unwrapping\nDESCRIPTION: Shows how to wrap existing objects with descriptors and unwrap them using implicit conversion.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new SearchRequest();\n\n// Wrap.\nvar descriptor = new SearchRequestDescriptor(request);\n\n// Unwrap.\nSearchRequest request = descriptor;\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Delete Operation with Sequence Numbers\nDESCRIPTION: JSON payload for conditional deletion using primary term and sequence numbers, along with custom routing and index parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithDeleteOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"delete\":{\"_id\":\"OverriddenId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"overridden-index\",\"require_alias\":false,\"routing\":\"OverriddenRoute\"}}\n```\n\n----------------------------------------\n\nTITLE: Update Document with Script and Upsert in Specific Index\nDESCRIPTION: A bulk update operation targeting a specific 'configured-index' with an inline 'painless' script to increment a counter field and an upsert document with a 'name' field for document creation if it doesn't exist.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithUpdateOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"update\":{\"_id\":\"123\",\"_index\":\"configured-index\"}}\n{\"script\":{\"lang\":\"painless\",\"options\":{\"option1\":\"optionvalue1\"},\"source\":\"ctx._source.counter \\u002B= params.param1\",\"params\":{\"param1\":1}},\"upsert\":{\"name\":\"TestName\"}}\n```\n\n----------------------------------------\n\nTITLE: Constructing Bool Query with Multiple Should Clauses in Elasticsearch\nDESCRIPTION: This query uses a bool query with two should clauses, each containing a term query. It searches for documents where the 'name' field matches either 'x' or 'y'. This type of query is useful for scenarios where you want to match documents that satisfy any of the given conditions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueriesCombinedWithOrOperator_SerializeAsShouldClauses.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      should: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Boolean Query with Term Filter in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to construct a boolean query in Elasticsearch using the Query DSL. It applies a term filter to match documents where the 'name' field exactly equals a specified value 'x'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithUnaryAddOperator_SerializeAsFilterClause.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  query: {\n    bool: {\n      filter: {\n        term: {\n          name: {\n            value: x\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Sort Order for Aggregations in Elasticsearch .NET Client 9.0\nDESCRIPTION: Shows the improved syntax for specifying sort order in aggregations, demonstrating both 8.x and 9.0 approaches.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nnew SearchRequestDescriptor<Person>()\n    .Aggregations(aggs => aggs\n        .Add(\"my_terms\", agg => agg\n            .Terms(terms => terms\n                // 8.x syntax.\n                .Order(new List<KeyValuePair<Field, SortOrder>>\n                {\n                    new KeyValuePair<Field, SortOrder>(\"_key\", SortOrder.Desc)\n                })\n                // 9.0 fluent syntax.\n                .Order(x => x\n                    .Add(x => x.Age, SortOrder.Asc)\n                    .Add(\"_key\", SortOrder.Desc)\n                )\n                // 9.0 fluent add syntax (valid for all dictionary-like values).\n                .AddOrder(\"_key\", SortOrder.Desc)\n            )\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Constructing Pinned Query with Organic Results in Elasticsearch\nDESCRIPTION: This query uses the 'pinned' query type to boost specific document IDs while also including an organic query for additional results. It demonstrates how to combine fixed positioning of certain documents with regular search functionality.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/PinnedQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    pinned: {\n      boost: 1.1,\n      ids: [\n        1,\n        11,\n        22\n      ],\n      organic: {\n        match_all: {\n          _name: organic_query\n        }\n      },\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Elasticsearch Bulk Index Operation\nDESCRIPTION: This snippet showcases a comprehensive Elasticsearch bulk index operation with various parameters including custom ID, index, routing, sequence numbers, primary terms, pipeline, and dynamic templates.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{\"_id\":\"ConfiguredId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"configured-index\",\"routing\":\"ConfiguredRoute\",\"require_alias\":false,\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"}}}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Documents with Bulk API\nDESCRIPTION: This snippet shows multiple create operations using the Elasticsearch bulk API. It includes examples of creating documents with different IDs, routing, index overrides, and additional parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithCreateOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"create\": {\n    \"_id\": \"TestName\",\n    \"routing\": \"TestName\"\n  }\n}\n{\"name\":\"TestName\"}\n{\n  \"create\": {\n    \"_id\": \"OverriddenId\",\n    \"_index\": \"overridden-index\",\n    \"routing\": \"OverriddenRoute\",\n    \"require_alias\": false,\n    \"version\": 1,\n    \"version_type\": \"external\",\n    \"pipeline\": \"my-pipeline\",\n    \"dynamic_templates\": {\n      \"t1\": \"v1\"\n    }\n  }\n}\n{\"name\":\"TestName\"}\n{\"create\":{}}\n{\"forename\":\"Steve\"}\n{\n  \"create\": {\n    \"_index\": \"configured-index\"\n  }\n}\n{\"forename\":\"Steve\"}\n{\n  \"create\": {\n    \"_id\": \"ConfiguredId\",\n    \"if_primary_term\": 100,\n    \"if_seq_no\": 10,\n    \"_index\": \"configured-index\",\n    \"routing\": \"ConfiguredRoute\",\n    \"require_alias\": false,\n    \"pipeline\": \"my-pipeline\",\n    \"dynamic_templates\": {\n      \"t1\": \"v1\"\n    }\n  }\n}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rare Terms Aggregation with Term Query in Elasticsearch\nDESCRIPTION: A JSON query for Elasticsearch that specifies a rare terms aggregation on the 'name' field with a maximum document count of 5, while filtering documents by the 'type' field with value 'project'. The query returns no hits (size: 0) as it's only interested in aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RareTermsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    names: {\n      meta: {\n        foo: bar\n      },\n      rare_terms: {\n        field: name,\n        max_doc_count: 5,\n        missing: n/a,\n        precision: 0.001\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex Bool Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates a complex bool query in Elasticsearch using the Query DSL. It includes multiple should clauses, nested bool queries, and term queries to define specific search criteria.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryMixAndMatchMinimumShouldMatch_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      should: [\n        {\n          bool: {\n            minimum_should_match: 2,\n            should: [\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              },\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              },\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              },\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          bool: {\n            must_not: {\n              term: {\n                name: {\n                  value: x\n                }\n              }\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Query with Date Histogram and Bucket Sort\nDESCRIPTION: Complex Elasticsearch query that aggregates project data by month, calculates commit sums, and applies bucket sorting. The query filters by project type, uses date histogram with monthly intervals, and limits results to top 3 buckets sorted by commit count in descending order.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BucketSortAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects_started_per_month\": {\n      \"aggregations\": {\n        \"commits\": {\n          \"sum\": {\n            \"field\": \"numberOfCommits\"\n          }\n        },\n        \"commits_bucket_sort\": {\n          \"bucket_sort\": {\n            \"from\": 0,\n            \"gap_policy\": \"insert_zeros\",\n            \"size\": 3,\n            \"sort\": {\n              \"commits\": {\n                \"order\": \"desc\"\n              }\n            }\n          }\n        }\n      },\n      \"date_histogram\": {\n        \"calendar_interval\": \"month\",\n        \"field\": \"startedOn\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Version Compatibility Table\nDESCRIPTION: Markdown table showing compatibility between Elasticsearch versions and Elasticsearch-NET client branches, including support status.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Elasticsearch Version | Elasticsearch-NET Branch  | Supported |\n| --------------------- | ------------------------- | --------- |\n| main                  | main                      |           |\n| 8.x                   | 8.x                       | 8.x       |\n| 7.x                   | 7.x                       | 7.17      |\n```\n\n----------------------------------------\n\nTITLE: Complex Elasticsearch Bulk Index Operation with Multiple Parameters\nDESCRIPTION: This snippet demonstrates a more complex Elasticsearch bulk index operation with various parameters including custom index, routing, versioning, pipeline, and dynamic templates.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{\"_id\":\"OverriddenId\",\"_index\":\"overridden-index\",\"routing\":\"OverriddenRoute\",\"require_alias\":false,\"version\":1,\"version_type\":\"external\",\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"}}}\n{\"name\":\"TestName\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Aggregation in Elasticsearch .NET Client 8.x\nDESCRIPTION: Demonstrates how to initialize an aggregation using static factory methods in version 8.x of the Elasticsearch .NET client. This approach required assigning to a temporary variable for additional property settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// 8.x\nvar agg = Aggregation.Max(new MaxAggregation { Field = \"my_field\" });\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// 8.x\nvar agg = Aggregation.Max(new MaxAggregation { Field = \"my_field\" });\nagg.Aggregations ??= new Dictionary<string, Aggregation>();\nagg.Aggregations.Add(\"my_sub_agg\", Aggregation.Terms(new TermsAggregation()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Query with Multi-Terms Aggregation\nDESCRIPTION: This JSON snippet defines an Elasticsearch query with a multi-terms aggregation. It filters for documents of type 'project' and aggregates results based on 'name' and 'numberOfCommits' fields. The aggregation is configured with specific collection and ordering parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiTermsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"states\": {\n      \"meta\": {\n        \"foo\": \"bar\"\n      },\n      \"multi_terms\": {\n        \"collect_mode\": \"breadth_first\",\n        \"min_doc_count\": 1,\n        \"order\": [\n          {\n            \"_key\": \"asc\"\n          },\n          {\n            \"_count\": \"desc\"\n          }\n        ],\n        \"shard_min_doc_count\": 1,\n        \"shard_size\": 100,\n        \"show_term_doc_count_error\": true,\n        \"size\": 5,\n        \"terms\": [\n          {\n            \"field\": \"name\"\n          },\n          {\n            \"field\": \"numberOfCommits\",\n            \"missing\": 0\n          }\n        ]\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Nested Boolean Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to construct a complex boolean query using Elasticsearch's Query DSL. It combines 'must' and 'should' clauses to create a specific search criteria.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryJoinsWithShouldClauses_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          bool: {\n            should: [\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              },\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              },\n              {\n                term: {\n                  name: {\n                    value: x\n                  }\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Projects Index with Match All\nDESCRIPTION: This snippet shows a basic Elasticsearch query structure for searching the 'projects' index. It uses a match_all query to return all documents, starting from the first result (from: 0).\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MSearchSerialization.SerializesRequest.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"index\": \"projects\"\n}\n{\n  \"from\": 0,\n  \"query\": {\n    \"match_all\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rare Terms Aggregation with Term Query in Elasticsearch\nDESCRIPTION: A JSON query structure for Elasticsearch that defines a rare_terms aggregation on the 'name' field with custom parameters like max_doc_count and precision. The query also includes a term filter on the 'type' field and limits results to 0 documents (aggregation only).\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RareTermsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    names: {\n      meta: {\n        foo: bar\n      },\n      rare_terms: {\n        field: name,\n        max_doc_count: 5,\n        missing: n/a,\n        precision: 0.001\n      }\n    }\n  },\n  query: {\n    term: {\n      type: {\n        value: project\n      }\n    }\n  },\n  size: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing an Elasticsearch Query with Aggregations, Filtering and Pagination\nDESCRIPTION: This JSON structure defines a complete Elasticsearch query that retrieves documents with pagination (from/size), filters results post-query, specifies which fields to return, and includes term aggregation on the 'startedOn' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiStoredFieldsTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  aggregations: {\n    startDates: {\n      terms: {\n        field: startedOn\n      }\n    }\n  },\n  from: 10,\n  post_filter: {\n    term: {\n      state: {\n        value: Stable\n      }\n    }\n  },\n  query: {\n    match_all: {}\n  },\n  size: 20,\n  stored_fields: [\n    name,\n    numberOfCommits\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch .NET Client via .NET CLI\nDESCRIPTION: This command adds a package reference to the project file for the latest stable version of the Elasticsearch .NET client using the .NET CLI.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Elastic.Clients.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Collection API Usage in Search Requests\nDESCRIPTION: Shows different ways to use ICollection<E> in bool queries, including scalar and fluent syntax patterns for single and multiple elements.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnew SearchRequestDescriptor<Person>()\n    .Query(q => q\n        .Bool(b => b\n            .Must(new Query())                           // Scalar: Single element.\n            .Must(new Query(), new Query())              // Scalar: Multiple elements (params).\n            .Must(m => m.MatchAll())                     // Fluent: Single element.\n            .Must(m => m.MatchAll(), m => m.MatchNone()) // Fluent: Multiple elements (params).\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Children Aggregation with Nested Metrics in Elasticsearch\nDESCRIPTION: A JSON definition for an Elasticsearch query that performs a children aggregation with multiple nested metric aggregations. It targets child documents of type 'commits' and calculates average, maximum, and minimum values of the 'confidenceFactor' field for each child document.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/WritingAggregationsTests.CanSerializeAggregationsWrittenInVariousWays_WhichIncludeMultipleSubAggregations.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name_of_child_agg: {\n    aggregations: {\n      average_per_child: {\n        avg: {\n          field: confidenceFactor\n        }\n      },\n      max_per_child: {\n        max: {\n          field: confidenceFactor\n        }\n      },\n      min_per_child: {\n        min: {\n          field: confidenceFactor\n        }\n      }\n    },\n    children: {\n      type: commits\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Filtered Bool Query in Elasticsearch\nDESCRIPTION: This code snippet shows how to create a bool query with multiple term filters in Elasticsearch. It filters documents based on two specific values of the 'name' field, combining them using the bool query's filter context.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithUnaryAddOperator_CombinedWithAnd_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      filter: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Intervals Query with Ordered Matching\nDESCRIPTION: Demonstrates an Elasticsearch intervals query configuration that searches for 'Steve' in the 'name' field with specific matching rules. The query uses ordered matching with no gaps allowed and includes a boost factor of 2. The query is also named for debugging purposes.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IntervalsQuerySerializationTests.IntervalsQueryDescriptor_CanSerialize.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    intervals: {\n      name: {\n        boost: 2,\n        match: {\n          max_gaps: 0,\n          ordered: true,\n          query: Steve\n        },\n        _name: testing-intervals\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Intervals Query in JSON\nDESCRIPTION: This snippet shows how to construct an Elasticsearch query using the intervals feature. It targets the 'name' field, sets a boost value, and specifies match parameters including max_gaps and ordered flags. The query is designed to match the term 'Steve' with precise control over word order and proximity.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IntervalsQuerySerializationTests.IntervalsQuery_CanSerialize.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    intervals: {\n      name: {\n        boost: 2,\n        match: {\n          max_gaps: 0,\n          ordered: true,\n          query: Steve\n        },\n        _name: testing-intervals\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication in Elasticsearch .NET Client\nDESCRIPTION: Sets up API key authentication for Elasticsearch requests using the ApiKey option.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/_options_on_elasticsearchclientsettings.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nApiKey\n```\n\n----------------------------------------\n\nTITLE: Union Types in Term Queries\nDESCRIPTION: Demonstrates the use of union types in term queries, showing both value collection and lookup approaches.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnew TermsQueryDescriptor()\n    .Terms(x => x.Value(\"a\", \"b\", \"c\"))                    \n    .Terms(x => x.Lookup(x => x.Index(\"index\").Id(\"id\")));\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Range Query in JSON\nDESCRIPTION: This snippet illustrates how to create a range query in Elasticsearch using JSON format. It defines a range for 'my-field' with a boost value, lower and upper bounds, and assigns a name to the query.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.Fluent_NumberRangeQuery_QueryContainer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  range: {\n    my-field: {\n      boost: 1.1,\n      gte: 100,\n      lt: 1000,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Field Query Parameters in JSON\nDESCRIPTION: A JSON configuration for an Elasticsearch field query that specifies various parameters including boost factor, date format, date range conditions, and a named query identifier. The query uses date range filters with relative date expressions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.DateRangeQuery_WithFormat_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  my-field: {\n    boost: 1.1,\n    format: dd/MM/yyyy||yyyy,\n    gte: now-1y/M,\n    lt: now,\n    _name: named_query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with Geo-Centroid Aggregation in JSON\nDESCRIPTION: This query performs a term filter on the 'type' field and calculates the geo-centroid of the 'locationPoint' field. It sets the size to 0 to return only aggregation results without individual documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoCentroidAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"centroid\": {\n      \"geo_centroid\": {\n        \"field\": \"locationPoint\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: GeoTile Grid Aggregation Query with Term Filter\nDESCRIPTION: Elasticsearch query that performs a geotile_grid aggregation on the locationPoint field with precision 3, while filtering documents by type='project'. The query returns no documents (size: 0) but includes aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeotileGridAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"my_geotile\": {\n      \"geotile_grid\": {\n        \"field\": \"locationPoint\",\n        \"precision\": 3,\n        \"shard_size\": 100,\n        \"size\": 1000\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Debug Mode Output in Elasticsearch.NET Client\nDESCRIPTION: This snippet shows how to customize the debug mode output by providing a custom delegate to handle the debug information. It demonstrates setting up a connection pool and configuring the client with a custom action for processing debug information.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-mode.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar pool = new SingleNodeConnectionPool(new Uri(\"http://localhost:9200\"));\nvar client = new ElasticClient(new ConnectionSettings(pool)\n    .EnableDebugMode(apiCallDetails =>\n    {\n        // do something with the call details e.g. send with logging framework\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Matching Field Value in Elasticsearch Query\nDESCRIPTION: This snippet shows a basic Elasticsearch query to match a specific value in the 'name' field. It uses the 'match' query type within the query context.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApi_FluentMatch_ApiTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Range Query in Elasticsearch JSON DSL\nDESCRIPTION: This snippet demonstrates a range query in Elasticsearch's JSON DSL. It filters documents where 'my-field' has values greater than or equal to 100 and less than 1000. The query includes a boost value of 1.1 to increase its relevance score and is named 'named_query' for identification in responses.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.NumberRangeQuery_QueryContainer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  range: {\n    my-field: {\n      boost: 1.1,\n      gte: 100,\n      lt: 1000,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Range Query with Date Math in Elasticsearch\nDESCRIPTION: This JSON snippet defines a range query on 'my-field' with date math expressions. It includes a boost value of 1.1, searches for values greater than or equal to one year ago (rounded to month), less than the current time, and assigns a name 'named_query' to the query for identification.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.DateRangeQuery_QueryContainer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  range: {\n    my-field: {\n      boost: 1.1,\n      gte: now-1y/M,\n      lt: now,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Query with Terms and Geo-Centroid Aggregations\nDESCRIPTION: Elasticsearch query that filters by project type and aggregates results by project name, calculating the geographic centroid for each project group. The query uses size:0 to return only aggregation results without documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/NestedGeoCentroidAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects\": {\n      \"aggregations\": {\n        \"centroid\": {\n          \"geo_centroid\": {\n            \"field\": \"locationPoint\"\n          }\n        }\n      },\n      \"terms\": {\n        \"field\": \"name\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Geo Line Aggregation Query in Elasticsearch\nDESCRIPTION: Elasticsearch query that performs a geo_line aggregation on location points, sorted by a timestamp field 'startedOn'. The query filters documents by type='project' and limits results with size=25 for the aggregation and size=0 for hits.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoLineAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"line\": {\n      \"geo_line\": {\n        \"include_sort\": true,\n        \"point\": {\n          \"field\": \"locationPoint\"\n        },\n        \"size\": 25,\n        \"sort\": {\n          \"field\": \"startedOn\"\n        }\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using TcpStats Class for Detailed TCP Connection Information\nDESCRIPTION: Shows how to use the TcpStats utility class to retrieve detailed information about active TCP connections, including IPv4 and IPv6 statistics, independently of making requests.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/debug-information.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar tcpStatistics = TcpStats.GetActiveTcpConnections(); <1>\nvar ipv4Stats = TcpStats.GetTcpStatistics(NetworkInterfaceComponent.IPv4); <2>\nvar ipv6Stats = TcpStats.GetTcpStatistics(NetworkInterfaceComponent.IPv6); <3>\n\nvar response = client.Search<Project>(s => s\n    .Query(q => q\n        .MatchAll()\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Matching Documents by Name Field in Elasticsearch\nDESCRIPTION: A JSON query that searches for documents where the 'name' field matches the term 'Elasticsearch'. Uses the match query type which is the standard query for full-text search.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountRequestDescriptor.SerializesCountRequest.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"query\":{\"match\":{\"name\":{\"query\":\"Elasticsearch\"}}}}\n```\n\n----------------------------------------\n\nTITLE: Constructing Nested Bool Query with Term Filters in Elasticsearch\nDESCRIPTION: A complex boolean query that uses multiple should clauses to match documents based on term filters. The query includes a direct term match and a nested bool query with its own should clause, identified by the _name parameter.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.DoNotCombineLeftLockedBool.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      should: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          bool: {\n            should: {\n              term: {\n                name: {\n                  value: x\n                }\n              }\n            },\n            _name: leftBool\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Query with Boost and Name in Elasticsearch\nDESCRIPTION: This JSON snippet defines an Elasticsearch query structure for a field with range constraints (gte and lt), a boost value, and a named query. It specifies that the field value should be greater than or equal to 100 and less than 1000, with a relevance boost of 1.1.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.NumberRangeQuery_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  my-field: {\n    boost: 1.1,\n    gte: 100,\n    lt: 1000,\n    _name: named_query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query String Search Template\nDESCRIPTION: JSON payload for a search template definition using query_string parameter with pagination support through 'from' parameter.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MSearchTemplateSerialization.SerializesMultiSearchTemplateRequest.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"index\":\"projects\"\n}\n{\"id\":\"my-search-template\",\"params\":{\"query_string\":\"hello world\",\"from\":0}}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Query with Terms Aggregation and Geo-Centroid\nDESCRIPTION: A JSON query that performs a term filter on 'type:project' and aggregates results by project names while calculating geographical centroids for each group using the locationPoint field. The query returns no documents (size:0) and focuses only on aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/NestedGeoCentroidAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"projects\": {\n      \"aggregations\": {\n        \"centroid\": {\n          \"geo_centroid\": {\n            \"field\": \"locationPoint\"\n          }\n        }\n      },\n      \"terms\": {\n        \"field\": \"name\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Prefix Aggregation with Term Query in Elasticsearch\nDESCRIPTION: Elasticsearch query that performs IP prefix aggregation on the leadDeveloper.ipAddress field with a /24 subnet mask, includes metadata, and filters results by document type. The query is set to return no documents (size: 0) since it focuses on aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IpPrefixAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"ipv4-subnets\": {\n      \"ip_prefix\": {\n        \"field\": \"leadDeveloper.ipAddress\",\n        \"prefix_length\": 24\n      },\n      \"meta\": {\n        \"foo\": \"bar\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Audit Trail Timestamps\nDESCRIPTION: Verifies that all audit trail entries have valid timestamp durations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/audit-trail.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nresponse.ApiCall.AuditTrail\n    .Should().OnlyContain(a => a.Ended - a.Started >= TimeSpan.Zero);\n```\n\n----------------------------------------\n\nTITLE: Matching Documents with Elasticsearch Query DSL in JSON\nDESCRIPTION: This snippet demonstrates a basic match query in Elasticsearch. It searches for documents where the 'description' field matches the term 'testing'. This query is part of Elasticsearch's Query DSL and is typically used in search requests.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchSerializationTests.Search_WithMatchQuery_SerializesInferredField_ForObjectInitializer.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  match: {\n    description: {\n      query: testing\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Delete Operation with Index and Versioning\nDESCRIPTION: JSON payload for deleting a document with ID '123' that specifies index, routing, version, and other parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithDeleteOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"delete\":{\"_id\":\"123\",\"_index\":\"configured-index\",\"require_alias\":false,\"routing\":\"ConfiguredRoute\",\"version\":1,\"version_type\":\"external\"}}\n```\n\n----------------------------------------\n\nTITLE: Constructing Terms Query in Elasticsearch Query DSL\nDESCRIPTION: This snippet demonstrates how to construct a 'terms' query in Elasticsearch's Query DSL. It includes a boost factor of 1.2 and specifies multiple terms for the description field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchSerializationTests.Search_WithTermsQuery_Serializes_ForObjectInitializer.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  terms: {\n    boost: 1.2,\n    description: [\n      term1,\n      term2\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Elasticsearch Range Query with Additional Parameters in JSON\nDESCRIPTION: This JSON snippet defines a range query in Elasticsearch with multiple parameters. It specifies a date range using relative dates (from one year ago to now), applies a custom boost value of 1.1, and assigns a name to the query for easier identification in search responses.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.DateRangeQuery_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  my-field: {\n    boost: 1.1,\n    gte: now-1y/M,\n    lt: now,\n    _name: named_query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Elasticsearch Query with Geohash Grid Aggregation in JSON\nDESCRIPTION: This JSON structure defines an Elasticsearch query that includes a geohash grid aggregation and a term query. The aggregation is performed on the 'locationPoint' field with specific precision and size parameters. The query filters documents where the 'type' field equals 'project'. The result size is set to 0, indicating only aggregation results are requested.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeohashGridAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"my_geohash_grid\": {\n      \"geohash_grid\": {\n        \"field\": \"locationPoint\",\n        \"precision\": 3,\n        \"shard_size\": 100,\n        \"size\": 1000\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Audit Trail Events\nDESCRIPTION: Validates the audit trail entries and their event types using assertions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/troubleshoot/audit-trail.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nresponse.ApiCall.AuditTrail.Count.Should().Be(4, \"{0}\", debug);\nresponse.ApiCall.AuditTrail[0].Event.Should().Be(SniffOnStartup, \"{0}\", debug);\nresponse.ApiCall.AuditTrail[1].Event.Should().Be(SniffSuccess, \"{0}\", debug);\nresponse.ApiCall.AuditTrail[2].Event.Should().Be(PingSuccess, \"{0}\", debug);\nresponse.ApiCall.AuditTrail[3].Event.Should().Be(HealthyResponse, \"{0}\", debug);\n```\n\n----------------------------------------\n\nTITLE: Parsing Elasticsearch Aggregation Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of an Elasticsearch aggregation response as represented in the .NET client. It shows an aggregation named 'my-agg-name' with a numeric value result of 75.0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/AvgAggregateDeserializationTests.CanDeserialize_AvgAggregate.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Aggregations: {\n    my-agg-name: {\n      Value: 75.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Types in Elasticsearch .NET Client 9.0\nDESCRIPTION: Demonstrates the new recommended way of inspecting container types using pattern matching in version 9.0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = new Query();\n\nif (query.Nested is { } nested)\n{\n    // We have a nested query.\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Term Query in Elasticsearch JSON\nDESCRIPTION: A simple Elasticsearch term query structure that matches documents containing an exact value in the specified field. Term queries are used for precise matching where the value must exactly match the indexed term.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RawJsonQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    term: {\n      fieldname: value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Range Query with Date Range and Boost\nDESCRIPTION: This snippet shows how to create a range query filter in Elasticsearch. It specifies a date range using relative dates, applies a boost, and assigns a name to the query.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RangeQuerySerializationTests.Fluent_DateRangeQuery_QueryContainer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  range: {\n    my-field: {\n      boost: 1.1,\n      gte: now-1y/M,\n      lt: now,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Geo Bounding Box Query in Elasticsearch\nDESCRIPTION: This snippet shows how to create a geo_bounding_box query in Elasticsearch. It defines a geographical bounding box using top-left and bottom-right coordinates, and includes additional parameters for query behavior and identification.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundingBoxQueryUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  query: {\n    geo_bounding_box: {\n      boost: 1.1,\n      ignore_unmapped: true,\n      locationPoint: {\n        bottom_right: {\n          lat: -34,\n          lon: 34\n        },\n        top_left: {\n          lat: 34,\n          lon: -34\n        }\n      },\n      validation_method: strict,\n      _name: named_query\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization in Elasticsearch .NET Client 9.0\nDESCRIPTION: Demonstrates the new serialization capabilities in version 9.0, including round-trip serialization for all JSON serializable types.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new SearchRequest{ /* ... */ };\n\nvar json = client.ElasticsearchClientSettings.RequestResponseSerializer.SerializeToString(\n    request, \n    SerializationFormatting.Indented\n);\n\nvar searchRequestBody = client.ElasticsearchClientSettings.RequestResponseSerializer.Deserialize<SearchRequest>(json)!;\n```\n\n----------------------------------------\n\nTITLE: Constructing Named Boolean Query with Multiple Should Clauses\nDESCRIPTION: A boolean query that combines two named sub-queries using should clauses. Each sub-query contains a term query searching for a value 'x' in the name field. The sub-queries are named 'leftBool' and 'rightBool' for identification.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.DoNotCombineLockedBools.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      should: [\n        {\n          bool: {\n            should: {\n              term: {\n                name: {\n                  value: x\n                }\n              }\n            },\n            _name: leftBool\n          }\n        },\n        {\n          bool: {\n            should: {\n              term: {\n                name: {\n                  value: x\n                }\n              }\n            },\n            _name: rightBool\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Documents with a Wildcard Pattern in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to create an exclusion pattern in Elasticsearch using the 'exclude' property with a wildcard pattern. The pattern 'water_.*' will exclude any field or document that starts with 'water_' followed by any characters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsExcludeSerializationTests.RoundTripSerialize_TermsExcludeWithRegexPattern.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exclude: water_.*\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic NEST Query Object with Field Specification in C#\nDESCRIPTION: This code snippet demonstrates the creation of a basic NEST query object for Elasticsearch. It specifies a query with a field targeting the 'name' field, using NEST's object initialization syntax.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/Query_WithFieldNameQuery_SerializationTests.CanDeserialize_Query_WithSimpleMatchQuery.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Query: NEST,\n  Field: {\n    Name: name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Documents with Sequence Numbers in Elasticsearch\nDESCRIPTION: This query uses the match_all operation to retrieve all documents in an Elasticsearch index. It sets seq_no_primary_term to true, which causes Elasticsearch to include sequence numbers and primary terms in the response for optimistic concurrency control.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiSequenceNumberPrimaryTermTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match_all: {}\n  },\n  seq_no_primary_term: true\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Geo-Centroid Query with Term Filter\nDESCRIPTION: Defines an Elasticsearch query that calculates the geographic centroid of locationPoint field for documents where name matches 'noresult'. The size parameter is set to 0 to return only aggregation results without any documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoCentroidNoResultsAggregationUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"centroid\": {\n      \"geo_centroid\": {\n        \"field\": \"locationPoint\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"name\": {\n        \"value\": \"noresult\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: KeyValuePair Collection Management\nDESCRIPTION: Shows handling of ICollection<KeyValuePair<K, V>> types using fluent API patterns similar to dictionary operations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnew PutMappingRequestDescriptor<Person>(\"index\")\n    .DynamicTemplates(new List<KeyValuePair<string, DynamicTemplate>>()) // Scalar.\n    .DynamicTemplates(x => x                                             // Fluent: Nested.\n        .Add(\"key\", new DynamicTemplate())                               // Scalar: Key + Value.\n        .Add(\"key\", x => x.Mapping(new TextProperty()))                  // Fluent: Key + Value.\n    )\n    .AddDynamicTemplate(\"key\", new DynamicTemplate())                    // Scalar: Key + Value.\n    .AddDynamicTemplate(\"key\", x => x.Runtime(x => x.Format(\"123\")));\n```\n\n----------------------------------------\n\nTITLE: Defining POCO with Elasticsearch Query Type in C#\nDESCRIPTION: Illustrates a POCO class that includes an Elasticsearch Query type, demonstrating the need for handling built-in Elasticsearch types in custom serializers.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Elastic.Clients.Elasticsearch.QueryDsl;\n\npublic class MyPercolationDocument\n{\n    public Query Query { get; set; }\n    public string Category { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Term Exclusion in Elasticsearch\nDESCRIPTION: A JSON configuration block that specifies terms to exclude from Elasticsearch query results. The configuration uses an 'exclude' property that contains an array of terms (term_a and term_b) that should be filtered out from the results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsExcludeSerializationTests.RoundTripSerialize_TermsExcludeWithValues.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exclude: [\n    term_a,\n    term_b\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elasticsearch Documents with Bulk API\nDESCRIPTION: This snippet shows multiple create operations using the Elasticsearch bulk API. It demonstrates various configurations including custom routing, pipeline processing, dynamic templates, and overriding default index settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithCreateOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"create\":{\"_id\":\"TestName\",\"routing\":\"TestName\"}}\n{\"name\":\"TestName\"}\n{\"create\":{\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"},\"_id\":\"OverriddenId\",\"_index\":\"overridden-index\",\"require_alias\":false,\"routing\":\"OverriddenRoute\",\"version\":1,\"version_type\":\"external\"}}\n{\"name\":\"TestName\"}\n{\"create\":{}}\n{\"forename\":\"Steve\"}\n{\"create\":{\"_index\":\"configured-index\"}}\n{\"forename\":\"Steve\"}\n{\"create\":{\"pipeline\":\"my-pipeline\",\"dynamic_templates\":{\"t1\":\"v1\"},\"_id\":\"ConfiguredId\",\"if_primary_term\":100,\"if_seq_no\":10,\"_index\":\"configured-index\",\"require_alias\":false,\"routing\":\"ConfiguredRoute\"}}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with match_all and size 10\nDESCRIPTION: This JSON structure represents an Elasticsearch query that matches all documents and returns 10 results. It uses the match_all query type and specifies pagination parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiSearchApiTests.VerifyDescriptorNdJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"from\":0,\"query\":{\"match_all\":{}},\"size\":10}\n```\n\n----------------------------------------\n\nTITLE: Constructing Match Query in Elasticsearch JSON DSL\nDESCRIPTION: Shows the JSON structure for a match query that searches for documents where the 'name' field matches the term 'NEST'. This is the raw query DSL format that would be sent to Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApiTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in Elasticsearch with Script ID and Parameters\nDESCRIPTION: This JSON snippet demonstrates how to update a document in Elasticsearch using a script reference. The update operation targets a specific document by ID and executes a named script with custom parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkUpdateOperationSerializationTests.Serializes_With_StoredScriptId.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"update\":{\"_id\":\"doc-id\"}}\n{\"script\":{\"id\":\"script-id\",\"params\":{\"param1\":\"value1\",\"param2\":\"value2\"}}}\n```\n\n----------------------------------------\n\nTITLE: Simplified Dictionary Entry Creation\nDESCRIPTION: Shows simplified syntax for adding dictionary entries when value types don't require initialization, using both single and multiple key parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/release-notes/index.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnew CreateIndexRequestDescriptor(\"index\")\n    .Aliases(aliases => aliases // Fluent: Nested.\n        .Add(\"key\")             // Key only.\n    )\n    .Aliases(\"key\")             // Key only: Single element.\n    .Aliases(\"first\", \"second\") // Key only: Multiple elements (params).\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Output with PascalCase\nDESCRIPTION: Illustrates the JSON output when using custom JsonSerializerOptions to maintain PascalCase property names.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"FirstName\": \"Steve\"\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Routing Missing Exception Error Response\nDESCRIPTION: Demonstrates the structure of an error response from Elasticsearch when a required routing parameter is missing for document operations. The error occurs when trying to access document 1001 in the 'devs' index without providing necessary routing information.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.DeserializesError.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Metadata: {\n    index: devs,\n    index_uuid: _na_\n  },\n  Reason: routing is required for [devs]/[1001],\n  RootCause: [\n    {\n      Metadata: {\n        index: devs,\n        index_uuid: _na_\n      },\n      Reason: routing is required for [devs]/[1001],\n      Type: routing_missing_exception\n    }\n  ],\n  Type: routing_missing_exception\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Elasticsearch Bulk Index Operation with Routing\nDESCRIPTION: This snippet shows a basic Elasticsearch bulk index operation with a custom ID and routing. It indexes a document with a 'name' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{\"_id\":\"TestName\",\"routing\":\"TestName\"}}\n{\"name\":\"TestName\"}\n```\n\n----------------------------------------\n\nTITLE: Executing Elasticsearch Query with Geo Centroid Aggregation in JSON\nDESCRIPTION: This query searches for documents where the 'name' field matches 'noresult'. It also calculates the geographic centroid of the matching documents using the 'locationPoint' field. The query is set to return no documents (size: 0), focusing only on the aggregation result.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoCentroidNoResultsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"aggregations\": {\n    \"centroid\": {\n      \"geo_centroid\": {\n        \"field\": \"locationPoint\"\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"name\": {\n        \"value\": \"noresult\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Term Suggesters in Elasticsearch JSON\nDESCRIPTION: This snippet defines a JSON configuration for Elasticsearch suggesters. It specifies two term suggesters ('my-suggester-1' and 'my-suggester-2') that operate on different fields ('description' and 'leadDeveloper'), along with the input text 'Trying out Elasticsearch' for which suggestions will be generated.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SuggesterSerializationTests.Suggester_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  my-suggester-1: {\n    term: {\n      field: description\n    }\n  },\n  my-suggester-2: {\n    term: {\n      field: leadDeveloper\n    }\n  },\n  text: Trying out Elasticsearch\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Match Query JSON\nDESCRIPTION: A basic Elasticsearch query that performs a match operation on the 'name' field searching for the term 'NEST'. Match queries are used for full-text search on specific fields.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApiTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customized JSON Serialization Output\nDESCRIPTION: Shows the resulting JSON output when using custom serialization attributes on a POCO document.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docs/reference/source-serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"forename\": \"Steve\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Query Structure in JSON\nDESCRIPTION: This snippet illustrates the structure of an Elasticsearch query using JSON-like syntax. It defines a field with nested properties for age and name, which could be used in various Elasticsearch operations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/KvpSerializationTests.SerializesKvpWithFieldKey.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  field-name: {\n    age: 30,\n    name: Steve\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Delete Operation with Routing\nDESCRIPTION: JSON payload for deleting a document with ID 'TestName' from 'test-index' with routing parameter.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithDeleteOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"delete\":{\"_id\":\"TestName\",\"_index\":\"test-index\",\"routing\":\"TestName\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Bool Query with Must Not Term Condition in Elasticsearch\nDESCRIPTION: This query structure creates a boolean query that excludes documents where the 'name' field exactly matches the value 'x'. The must_not clause is used to negate the term query condition, effectively filtering out matching documents from the result set.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithUnaryNegationOperator_SerializeAsMustNotClause.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must_not: {\n        term: {\n          name: {\n            value: x\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Match Query for Elasticsearch in JSON\nDESCRIPTION: This code snippet defines an Elasticsearch query using the Query DSL. It creates a match query to search for the term 'NEST' in the 'name' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CountApi_FluentMatch_ApiTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match: {\n      name: {\n        query: NEST\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Bulk Index Operation in JSON\nDESCRIPTION: This JSON structure defines a bulk index operation for Elasticsearch. It specifies that a document should be indexed into the 'project' index. This is the first line of a bulk operation that needs to be followed by the actual document data on the next line.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_SerialisationTest_1.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Document Structure in JSON for Elasticsearch\nDESCRIPTION: This JSON structure represents a project document for Elasticsearch with fields for tracking project metadata, state, and developer information. It includes join relationships, timestamps, contributor counts, and visibility settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_IndexMany_DescriptorSerialisationTest_4.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Structure for Elasticsearch .NET Client\nDESCRIPTION: This snippet defines a key-value structure likely used for document indexing or querying in Elasticsearch. The key specifies a field name, while the value contains personal information fields.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/KvpSerializationTests.DeserializesKvpWithFieldKey.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Key: {\n    Name: field-name\n  },\n  Value: {\n    Name: Steve,\n    Age: 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Template Mapping in Elasticsearch\nDESCRIPTION: Defines a dynamic template mapping configuration for Elasticsearch that specifies a keyword type mapping for fields matching a specific path pattern. Uses path_match to determine which fields the template applies to.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CreateIndexSerializationTests.CreateIndexWithDynamicTemplates_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  mappings: {\n    dynamic_templates: [\n      {\n        testTemplateName: {\n          mapping: {\n            type: keyword\n          },\n          path_match: testPathMatch\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Bool Query with Must Not Term Filters in JSON\nDESCRIPTION: This JSON structure defines an Elasticsearch query that uses a bool query with must_not clauses to exclude documents where the 'name' field matches either 'x' or 'y'. The query effectively filters out documents with these specific name values from the search results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.SearchQueryWithUnaryNegationOperator_CombinedWithAnd_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      must_not: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          term: {\n            name: {\n              value: y\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Query and Multi-Terms Aggregation in JSON\nDESCRIPTION: This JSON snippet defines an Elasticsearch query with a term filter and a complex multi-terms aggregation. It specifies various aggregation parameters such as collection mode, ordering, shard settings, and multiple terms fields. The query filters for documents of type 'project' and sets the result size to 0, focusing on aggregation results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiTermsAggregationUsageTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregations\": {\n    \"states\": {\n      \"meta\": {\n        \"foo\": \"bar\"\n      },\n      \"multi_terms\": {\n        \"collect_mode\": \"breadth_first\",\n        \"min_doc_count\": 1,\n        \"order\": [\n          {\n            \"_key\": \"asc\"\n          },\n          {\n            \"_count\": \"desc\"\n          }\n        ],\n        \"shard_min_doc_count\": 1,\n        \"shard_size\": 100,\n        \"show_term_doc_count_error\": true,\n        \"size\": 5,\n        \"terms\": [\n          {\n            \"field\": \"name\"\n          },\n          {\n            \"field\": \"numberOfCommits\",\n            \"missing\": 0\n          }\n        ]\n      }\n    }\n  },\n  \"query\": {\n    \"term\": {\n      \"type\": {\n        \"value\": \"project\"\n      }\n    }\n  },\n  \"size\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Document Indexing Operation\nDESCRIPTION: This JSON snippet defines the configuration for an Elasticsearch indexing operation. It specifies that documents should be indexed into an index named 'project'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_IndexMany_DescriptorSerialisationTest_3.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Elasticsearch Bulk Index Operation\nDESCRIPTION: This snippet shows a minimal Elasticsearch bulk index operation without any custom parameters. It indexes a document with a 'forename' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithIndexOperations_Descriptor_SerializesCorrectly.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"index\":{}}\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Array for Elasticsearch Query in JSON\nDESCRIPTION: This JSON object defines an array of numeric IDs, likely for use in an Elasticsearch query to retrieve multiple documents by their IDs. The array contains 10 sequential IDs from 1001 to 1010.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiGetViaIdsSimplifiedApiTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ids: [\n    1001,\n    1002,\n    1003,\n    1004,\n    1005,\n    1006,\n    1007,\n    1008,\n    1009,\n    1010\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Elasticsearch Documents in JSON\nDESCRIPTION: This JSON structure defines an array of Elasticsearch documents. Each document has an '_id' field for unique identification and an '_index' field specifying the index name. This format is commonly used when bulk indexing or querying multiple documents in Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesRequestWithMultipleDocs.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  docs: [\n    {\n      _id: value-a,\n      _index: test-index\n    },\n    {\n      _id: value-b,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Match All Search Template\nDESCRIPTION: JSON payload for a search template definition using match_all query type parameter.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MSearchTemplateSerialization.SerializesMultiSearchTemplateRequest.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"index\":\"projects\"\n}\n{\"id\":\"my-search-template\",\"params\":{\"query_type\":\"match_all\"}}\n```\n\n----------------------------------------\n\nTITLE: Match All Query with Size 10\nDESCRIPTION: Basic Elasticsearch query that matches all documents in an index, returning up to 10 results starting from offset 0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiSearchApiTests.VerifyInitializerNdJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"from\":0,\"query\":{\"match_all\":{}},\"size\":10}\n```\n\n----------------------------------------\n\nTITLE: Querying All Documents with Sequential Number and Primary Term in Elasticsearch\nDESCRIPTION: This JSON query requests all documents from an Elasticsearch index using match_all, while also requesting sequential number and primary term metadata by setting seq_no_primary_term to true. This is useful for implementing optimistic concurrency control in subsequent update operations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchApiSequenceNumberPrimaryTermTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    match_all: {}\n  },\n  seq_no_primary_term: true\n}\n```\n\n----------------------------------------\n\nTITLE: Project Document Schema in Elasticsearch\nDESCRIPTION: JSON schema defining the structure of a project document including join type, activity timestamps, developer details, contributor count, project status and visibility settings.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_IndexMany_DescriptorSerialisationTest_2.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  join: project,\n  lastActivity: Date_MinValue,\n  leadDeveloper: {\n    firstName: Steve,\n    gender: Male,\n    id: 0,\n    lastName: Gordon\n  },\n  numberOfContributors: 0,\n  startedOn: Date_MinValue,\n  state: BellyUp,\n  type: project,\n  visibility: Public\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Document Structure in JSON\nDESCRIPTION: This JSON structure represents an array of Elasticsearch documents. Each document contains an '_id' field for the document identifier and an '_index' field specifying the index name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithSingleDocsAsDescriptor.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: single-value,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Array Query Structure in JSON\nDESCRIPTION: Defines a JSON structure with an 'ids' array containing multiple values. This format is typically used in Elasticsearch for querying multiple documents by their IDs.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesRequestWithMultipleIds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ids: [\n    value-1,\n    value-2\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Document Array Structure in JSON\nDESCRIPTION: JSON structure containing an array of document objects under a 'docs' property. Each document has a unique '_id' field with sequential values from 1001 to 1010.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiGetSimplifiedApiTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: 1001\n    },\n    {\n      _id: 1002\n    },\n    {\n      _id: 1003\n    },\n    {\n      _id: 1004\n    },\n    {\n      _id: 1005\n    },\n    {\n      _id: 1006\n    },\n    {\n      _id: 1007\n    },\n    {\n      _id: 1008\n    },\n    {\n      _id: 1009\n    },\n    {\n      _id: 1010\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Match All Query with Size 1\nDESCRIPTION: Basic Elasticsearch query that matches all documents in an index, returning only a single result starting from offset 0.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiSearchApiTests.VerifyInitializerNdJson.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"from\":0,\"query\":{\"match_all\":{}},\"size\":1}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Complex Boolean Query in Elasticsearch\nDESCRIPTION: This snippet shows how to create a boolean query with multiple should clauses, including nested bool queries. It uses term queries to match exact values for the 'name' field and demonstrates the use of the '_name' parameter for query identification.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/QueryOperatorSerializationTests.DoNotCombineRightLockedBool.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    bool: {\n      should: [\n        {\n          term: {\n            name: {\n              value: x\n            }\n          }\n        },\n        {\n          bool: {\n            should: {\n              term: {\n                name: {\n                  value: x\n                }\n              }\n            },\n            _name: rightBool\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Index Operation in JSON\nDESCRIPTION: This JSON snippet defines the configuration for an Elasticsearch index operation. It specifies the target index for the operation using the '_index' field within the 'index' object.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_IndexMany_DescriptorSerialisationTest_1.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Bounding Box in JSON for Elasticsearch\nDESCRIPTION: Defines a geographic bounding box using two coordinate pairs - bottom_left and top_right. Each coordinate pair contains latitude (lat) and longitude (lon) values to specify the boundaries of the box on a map.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsSerializationTests.RoundTripSerialize_GeoBounds_WithTrbl.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  bottom_left: {\n    lat: 30,\n    lon: 40\n  },\n  top_right: {\n    lat: 10,\n    lon: 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing IDs Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to structure an 'ids' query in Elasticsearch. The query is used to retrieve documents based on their IDs. In this example, a single ID value is specified.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesRequestWithSingleIds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ids: [\n    single-value\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Child Document in Elasticsearch JSON\nDESCRIPTION: This JSON object represents a child document in Elasticsearch. It includes an ID and a join field that specifies its relationship to the parent document.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DefaultSourceSerializerTests.SourceSerialization_WithBuiltInDefaultSourceSerializer_CorrectlySerializes_TypesUsingAJoinField.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":2,\"myJoinField\":{\"name\":\"mychild\",\"parent\":\"1\"}}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch with match_all and size 1\nDESCRIPTION: This JSON structure represents an Elasticsearch query that matches all documents but returns only 1 result. It uses the match_all query type and specifies pagination parameters with a smaller size.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiSearchApiTests.VerifyDescriptorNdJson.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"from\":0,\"query\":{\"match_all\":{}},\"size\":1}\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation Coordinates in JSON for Elasticsearch\nDESCRIPTION: This JSON snippet defines a geolocation point with latitude and longitude coordinates. It's structured for use in Elasticsearch, allowing for efficient geospatial queries and operations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoLocationSerializationTests.RoundTripSerialize_GeoLocation_WithLatLonGeoLocation.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  lat: 55.5,\n  lon: -77.7\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Elasticsearch Delete Operation\nDESCRIPTION: Minimal JSON payload for deleting a document with ID '123' using the Elasticsearch bulk API.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkRequestOperationsSerializationTests.BulkRequestWithDeleteOperations_ObjectInitializer_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"delete\":{\"_id\":\"123\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Bounding Box in JSON\nDESCRIPTION: JSON object representing a geographic bounding box with coordinates specified in decimal degrees. Contains bottom, left, right, and top boundaries to define a rectangular area on a map.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsSerializationTests.RoundTripSerialize_GeoBounds_WithCoordsGeoBounds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  bottom: 40.01,\n  left: -74.1,\n  right: -71.12,\n  top: 40.73\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Index Alias Configuration\nDESCRIPTION: JSON configuration object that specifies an index alias name. This format is commonly used in Elasticsearch client configurations to reference indices through aliases.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndexAliasSerializationTests.SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  indexAlias: an-index-alias\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Inclusion Pattern with Wildcard in Elasticsearch\nDESCRIPTION: This JSON snippet defines an inclusion pattern using the 'include' property with a wildcard pattern. It specifies to include all items that match the pattern 'water_.*', which would match any string starting with 'water_' followed by any characters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsIncludeSerializationTests.RoundTripSerialize_TermsIncludeWithRegexPattern.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  include: water_.*\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Term Query in JSON Format\nDESCRIPTION: A simple Elasticsearch term query that searches for an exact match of a value in a specified field. Term queries are used for precise matching of field values without analysis.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/RawJsonQueryUsageTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  query: {\n    term: {\n      fieldname: value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geohash in Elasticsearch JSON Query\nDESCRIPTION: This snippet shows how to specify a geohash in an Elasticsearch query or document. The geohash 'dr5r9ydj2y73' represents a specific geographical area with high precision.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoLocationSerializationTests.RoundTripSerialize_GeoLocation_WithGeoHashLocation.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  geohash: dr5r9ydj2y73\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Query Parameters in JSON\nDESCRIPTION: This snippet defines a query structure for Elasticsearch. It includes a 'params' object with a nested 'person' object, and a separate 'source' field. The 'person' object contains a 'forename' field with a value of 'has_null_surname'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/ScriptParamsSerializationTests.SerializesParamsUsingRequestResponseSerializer_WhenUseSourceSerializerForScriptParameters_IsFalse.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  params: {\n    person: {\n      forename: has_null_surname\n    }\n  },\n  source: source\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geo Bounding Box in JSON\nDESCRIPTION: Defines a geographical bounding box using two coordinate pairs: top_left and bottom_right. Each pair contains latitude and longitude values to create a rectangular search area.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsSerializationTests.RoundTripSerialize_GeoBounds_WithTlbr.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  bottom_right: {\n    lat: 30,\n    lon: 40\n  },\n  top_left: {\n    lat: 10,\n    lon: 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Index Alias in C#\nDESCRIPTION: This code snippet demonstrates how to configure an index alias for Elasticsearch using C# object initializer syntax. It sets the 'Alias' property of an 'IndexAlias' object to specify the desired alias name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndexAliasSerializationTests.DeserializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  IndexAlias: {\n    Alias: an-index-alias\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Request Parameters with Source Reference\nDESCRIPTION: This snippet creates a JSON object that configures an Elasticsearch request. It sets a parameter 'fromSourceSerializer' to true and attaches a source object reference, which would contain the actual query data to be sent to Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/ScriptParamsSerializationTests.SerializesParamsUsingRequestResponseSerializer_WhenUseSourceSerializerForScriptParameters_IsTrue.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  params: {\n    fromSourceSerializer: true\n  },\n  source: source\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Pair for Elasticsearch .NET Client\nDESCRIPTION: This snippet demonstrates the structure of a key-value pair, where the key is 'field-name' and the value is 100. This format is commonly used in Elasticsearch .NET client for various operations such as defining field mappings or specifying query parameters.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/KvpSerializationTests.DeserializesKvp.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Key: field-name,\n  Value: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Elasticsearch Aliases with Bulk Actions\nDESCRIPTION: This JSON structure defines a set of bulk operations for Elasticsearch aliases. It adds an alias 'test-alias' to 'index-02' while simultaneously removing the same alias from 'index-01'. This is commonly used in index rotation strategies or when migrating data.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/UpdateAliasesRequestSerializationTests.UpdateAliasesRequest_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  actions: [\n    {\n      add: {\n        alias: test-alias,\n        index: index-02\n      }\n    },\n    {\n      remove: {\n        alias: test-alias,\n        index: index-01\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Multi-Get IDs Array\nDESCRIPTION: JSON structure containing an array of document IDs that can be used in an Elasticsearch multi-get or terms query. The array contains 10 sequential numeric IDs from 1001 to 1010.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiGetViaIdsSimplifiedApiTests.VerifyDescriptorJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ids: [\n    1001,\n    1002,\n    1003,\n    1004,\n    1005,\n    1006,\n    1007,\n    1008,\n    1009,\n    1010\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Data JSON Structure\nDESCRIPTION: JSON object representing customer data with name and type properties. The structure defines a premium customer with their company name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CustomSerializationTestsEnumAttribute.DerivingFromSystemTextJsonSerializer_ToRegisterACustomEnumConverter_BeforeBuiltInConverters.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"customerName\":\"Customer Ltd\",\"customerType\":\"premium\"}\n```\n\n----------------------------------------\n\nTITLE: Sorting Elasticsearch Query Results in Ascending Order\nDESCRIPTION: A JSON configuration that defines a sort order for Elasticsearch query results. This example sorts by the 'name' field in ascending order, which will return results alphabetically by name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SortCombinationsSerializationTests.SerializesFieldSort_WithInferredField.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name: {\n    order: asc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Query Parameters and Source\nDESCRIPTION: This JSON snippet defines the structure for an Elasticsearch query. It includes a 'params' object with a nested 'person' object containing a 'forename' field set to 'raw_json'. The configuration also includes a 'source' field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/ScriptParamsSerializationTests.SerializesRawJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  params: {\n    person: {\n      forename: raw_json\n    }\n  },\n  source: source\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Indices in Elasticsearch\nDESCRIPTION: This JSON snippet defines a query that targets all indices in an Elasticsearch cluster. The '_all' keyword is used to specify that the operation should be performed on all available indices.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndicesSerializationTests.Serializes_All_Correctly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  indices: _all\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Index Mapping in JSON\nDESCRIPTION: A JSON configuration that defines an index mapping for Elasticsearch. The configuration specifies the index name using the _index field to target a specific 'project' index.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_DescriptorSerialisationTest_3.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Document Collection Structure\nDESCRIPTION: JSON structure representing a collection of Elasticsearch documents. Each document has a unique _id field with sequential numbering from 1001 to 1010. The structure uses the docs array to contain multiple document objects.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MultiGetSimplifiedApiTests.VerifyInitializerJson.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: 1001\n    },\n    {\n      _id: 1002\n    },\n    {\n      _id: 1003\n    },\n    {\n      _id: 1004\n    },\n    {\n      _id: 1005\n    },\n    {\n      _id: 1006\n    },\n    {\n      _id: 1007\n    },\n    {\n      _id: 1008\n    },\n    {\n      _id: 1009\n    },\n    {\n      _id: 1010\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Person Object\nDESCRIPTION: A JSON object containing a person's forename. Demonstrates basic key-value pair structure in JSON format.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CustomSerializationTests_WithAttributes.UsingSystemTextJsonAttributes.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"forename\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Sorting Elasticsearch Results by Document Count in Ascending Order\nDESCRIPTION: This JSON snippet defines a sort clause for an Elasticsearch query. It instructs Elasticsearch to sort the results based on the '_count' field in ascending order.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/AggregateOrderSerializationTests.SerializesWithSingleItem.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  _count: asc\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Multiple Documents for Elasticsearch Bulk Operation\nDESCRIPTION: Shows the JSON structure for multiple documents in an Elasticsearch bulk operation. Each document contains an ID and index name, formatted in a nested array structure.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithMultipleDocsAsValue.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: value-a,\n      _index: test-index\n    },\n    {\n      _id: value-b,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Value in Elasticsearch Query JSON\nDESCRIPTION: This snippet shows how to define a field value in an Elasticsearch query using JSON format. It sets a numeric value for a field, which could be used in various Elasticsearch operations like filtering or aggregations.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FieldValueTests.CanSerialize_DoubleFieldValueKind.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  fieldValue: 1.1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Operation in Elasticsearch\nDESCRIPTION: A JSON configuration object that specifies the destination index for a document in an Elasticsearch index operation. The '_index' field defines the target index named 'project' where the document should be stored.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_DescriptorSerialisationTest_1.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Document IDs in Elasticsearch Query DSL\nDESCRIPTION: This snippet shows how to use the 'ids' filter in Elasticsearch Query DSL to query for documents with specific IDs. In this example, a single ID value is provided.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithSingleIds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ids: [\n    single-value\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Windows build command for quick compiling and running integration tests against a specific Elasticsearch version.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat integrate [Elasticsearch Version Number e.g. 8.3.2]\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Aggregation in Elasticsearch Query\nDESCRIPTION: A basic example of an Elasticsearch query that defines an aggregation with a custom name. The aggregation is empty, indicating it would need to be populated with specific aggregation parameters depending on the use case.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/AvgAggregateDeserializationTests.CanDeserialize_AvgAggregate_WithNullValue.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Aggregations: {\n    my-agg-name: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Documents in JSON\nDESCRIPTION: This JSON structure defines an array of Elasticsearch documents. Each document contains an '_id' field for unique identification and an '_index' field specifying the index where the document is stored. This format is commonly used when interacting with Elasticsearch's bulk API or when representing multiple documents in a single JSON object.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithMultipleDocsAsDescriptorActions.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  docs: [\n    {\n      _id: value-a,\n      _index: test-index\n    },\n    {\n      _id: value-b,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field Value Structure\nDESCRIPTION: Demonstrates a basic JSON object structure with a numeric field value assignment. This format is commonly used in Elasticsearch queries or document definitions.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FieldValueTests.CanSerialize_LongFieldValueKind.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  fieldValue: 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Terms Query with Boost Factor\nDESCRIPTION: A JSON-like structure that defines a terms query in Elasticsearch. The query specifies multiple terms under 'description' field and applies a boost factor of 1.2 to influence the relevance scoring.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchSerializationTests.Search_WithTermsQuery_Serializes_ForDescriptor.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  terms: {\n    boost: 1.2,\n    description: [\n      term1,\n      term2\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Index Operation in JSON\nDESCRIPTION: This JSON object specifies an index operation for Elasticsearch. It defines the target index named 'project' where the document should be indexed.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/BulkSerialisationTests.BulkRequest_SerialisationTest_3.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  index: {\n    _index: project\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running OSX/Linux Build Script\nDESCRIPTION: Command to execute the OSX/Linux build script that pulls dependencies and runs the default build target.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Match All Query with Boost in Elasticsearch\nDESCRIPTION: This JSON snippet defines an Elasticsearch query using the match_all query type. It includes a custom boost value of 2.0999999 to increase the relevance score of matching documents.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DefaultSourceSerializerTests.SourceSerialization_WithBuiltInDefaultSourceSerializer_CorrectlySerializes_TypesUsingQuery.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"query\":{\"match_all\":{\"boost\":2.0999999}}}\n```\n\n----------------------------------------\n\nTITLE: Structuring Elasticsearch Response in JSON\nDESCRIPTION: This snippet illustrates the JSON structure of an Elasticsearch response containing a single document. It includes the 'docs' array with one document, specifying its '_id' and '_index' fields.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithSingleDocsAsDescriptorAction.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: single-value,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Customer Data Structure\nDESCRIPTION: JSON object defining a customer entity with name and standard status properties. The structure includes a string customer name and boolean flag indicating if the customer is standard.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CustomSerializationTests_WithAttributes.UsingSystemTextJsonConverterAttributes.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"customerName\":\"Customer Ltd\",\"isStandard\":false}\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Field Value Assignment\nDESCRIPTION: Basic JSON document structure showing a field-value pair that could be used in Elasticsearch operations. The document assigns a string value 'test-value' to a field named 'fieldValue'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FieldValueTests.CanSerialize_StringFieldValueKind.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  fieldValue: test-value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Field Mappings in JSON\nDESCRIPTION: This JSON snippet defines field mappings for an Elasticsearch index. It specifies two fields: 'description' with a boost of 1.4 and 'name' with a boost of 1.2, both of type 'text'. These mappings help optimize search relevance and performance in Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/PropertiesSerializationTests.CanSerialize_MultipleProperties_WithPropertyNameExpression.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": {\n    \"boost\": 1.4,\n    \"type\": \"text\"\n  },\n  \"name\": {\n    \"boost\": 1.2,\n    \"type\": \"text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Document Structure in JSON\nDESCRIPTION: This JSON snippet outlines the structure of an Elasticsearch document. It includes an array of documents under the 'docs' key, with each document having '_id' and '_index' fields. The '_id' is set to 'single-value' and the '_index' is set to 'test-index'.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesRequestWithSingleDocs.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: single-value,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Query Parameter in JSON\nDESCRIPTION: This snippet shows a JSON object that defines a simple field-value pair. It sets a boolean field to true, which could be used as part of an Elasticsearch query or document.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FieldValueTests.CanSerialize_BoolFieldValueKind.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  fieldValue: true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Document in Elasticsearch JSON\nDESCRIPTION: This JSON object represents a parent document in Elasticsearch. It includes a custom parent property, an ID, and a join field for establishing relationships.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DefaultSourceSerializerTests.SourceSerialization_WithBuiltInDefaultSourceSerializer_CorrectlySerializes_TypesUsingAJoinField.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"parentProperty\":\"A parent property\",\"id\":1,\"myJoinField\":\"my_parent\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Stream Name in Elasticsearch .NET Client (JSON)\nDESCRIPTION: This JSON snippet defines a configuration object for an Elasticsearch data stream. It sets the name of the data stream to 'test-datastream'. This configuration is likely used when interacting with Elasticsearch's data streams feature through the .NET client.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DataStreamNameSerializationTests.DeserializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DataStreamName: {\n    Name: test-datastream\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ascending Sort on String Field in Elasticsearch\nDESCRIPTION: JSON configuration that defines a sort order for a field named 'string-field' in ascending order. This is commonly used in Elasticsearch queries to control the order of returned results.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SortCombinationsSerializationTests.SerializesFieldSort_WithStringField.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  string-field: {\n    order: asc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Document Structure in JSON\nDESCRIPTION: Defines a JSON structure for an Elasticsearch document array containing a single document entry with _id and _index metadata fields. The document has a single-value ID and references a test-index index.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/MGetSerialization.SerializesDescriptorWithSingleDocsAsValue.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  docs: [\n    {\n      _id: single-value,\n      _index: test-index\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Null Field Value in Elasticsearch .NET Query\nDESCRIPTION: This JSON object sets a field value to null, which can be used in Elasticsearch queries to match documents where the specified field is null or does not exist. This is a common pattern when working with the Elasticsearch .NET client to filter or query data based on null or missing fields.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/FieldValueTests.CanSerialize_NullFieldValueKind.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  fieldValue: null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Elasticsearch Data Streams in JSON\nDESCRIPTION: This JSON snippet defines a configuration for multiple Elasticsearch data streams. It uses an array of objects under the 'DataStreamName' key, where each object specifies the 'Name' of a data stream.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DataStreamNamesSerializationTests.DeserializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  DataStreamName: [\n    {\n      Name: test-datastream-1\n    },\n    {\n      Name: test-datastream-2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataStream Name in Elasticsearch\nDESCRIPTION: Defines a basic JSON configuration object that specifies a datastream name as 'test-datastream'. Used for configuring data streams in Elasticsearch.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DataStreamNameSerializationTests.SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  dataStreamName: test-datastream\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Query to Exclude _source Field\nDESCRIPTION: This JSON snippet configures an Elasticsearch query to exclude the _source field from the search results. By setting _source to false, the query will return only metadata and not the original document content.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/SearchRequestSerialization.SearchRequestWithSourceProperty_SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_source\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent-Child Document Structure in Elasticsearch JSON\nDESCRIPTION: Two JSON documents demonstrating parent-child relationship in Elasticsearch. The first document defines a parent with ID 1, while the second document defines a child document with ID 2 that references parent ID 1 using the myJoinField join field.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DefaultSourceSerializerTests.SourceSerialization_WithCustomSerializer_CorrectlySerializes_TypesUsingQuery.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"parentProperty\":\"A parent property\",\"id\":1,\"myJoinField\":\"my_parent\"}\n{\"id\":2,\"myJoinField\":{\"name\":\"mychild\",\"parent\":\"1\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Stream Names in JSON for Elasticsearch\nDESCRIPTION: This JSON snippet defines an array of data stream names under the 'dataStreamName' key. It specifies two test data streams that can be used in an Elasticsearch configuration.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/DataStreamNamesSerializationTests.SerializesCorrectly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  dataStreamName: [\n    test-datastream-1,\n    test-datastream-2\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Bounding Box in JSON\nDESCRIPTION: JSON structure that defines a geographic bounding box using coordinate pairs. Contains bottom, left, right, and top coordinates to form a rectangular boundary area on a map. The coordinates use decimal degrees format for latitude and longitude values.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoBoundsSerializationTests.Serialize_GeoBounds_WithCoordsGeoBounds.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  bottom: 40.01,\n  left: -74.1,\n  right: -71.12,\n  top: 40.73\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Elasticsearch Indices in JSON\nDESCRIPTION: This JSON snippet defines an object with an 'indices' property that specifies multiple Elasticsearch indices. The indices are listed as a comma-separated string, allowing operations to be performed on multiple indices simultaneously.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndicesSerializationTests.Serializes_Correctly.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  indices: index-a,index-b\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Include Terms in Elasticsearch JSON\nDESCRIPTION: This JSON snippet demonstrates how to define an 'include' directive with an array of terms in Elasticsearch. This pattern is commonly used in field mappings, reindex operations, or term-level queries to specify which terms should be included in the operation.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsIncludeSerializationTests.RoundTripSerialize_TermsIncludeWithValues.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  include: [\n    term_a,\n    term_b\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Include Settings with Partitioning\nDESCRIPTION: This JSON snippet defines include settings for Elasticsearch, specifying the number of partitions and a specific partition. It's typically used in Elasticsearch configuration to control data partitioning.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/TermsIncludeSerializationTests.RoundTripSerialize_TermsIncludeWithPartition.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  include: {\n    num_partitions: 100,\n    partition: 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Pair in JSON\nDESCRIPTION: This snippet defines a coordinate pair as a JSON array. The first value (-74.1) likely represents longitude, and the second value (40.73) likely represents latitude.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/GeoLocationSerializationTests.RoundTripSerialize_GeoLocation_WithCoordinates.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  -74.1,\n  40.73\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Sort Fields in Elasticsearch Query\nDESCRIPTION: JSON array containing sort definitions for multiple fields in an Elasticsearch query. Specifies ascending sort for field-1 and descending sort for field-2.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/AggregateOrderSerializationTests.SerializesWithMultipleItems.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    field-1: asc\n  },\n  {\n    field-2: desc\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Index Creation Date in JSON\nDESCRIPTION: This JSON snippet specifies the creation date for an Elasticsearch index using a Unix timestamp in milliseconds. The 'creation_date' field is set to a specific point in time, likely used for index management or tracking purposes.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndexSettingsSerializationTests.CanSerialize_CreationDate.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  creation_date: 1655895084631\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elasticsearch Query Parameter in JSON\nDESCRIPTION: This snippet illustrates a basic key-value structure commonly used in Elasticsearch queries. The 'key' represents a field name, and the 'value' is set to a numeric value of 100.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/KvpSerializationTests.SerializesKvp.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  key: field-name,\n  value: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic JSON Object Structure\nDESCRIPTION: Demonstrates a simple JSON object containing a single property 'stringProperty' with a string value. Shows basic JSON key-value pair formatting with proper string enclosure.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/ModellingDocumentsWithTypesTests.IndexMyDocument.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"stringProperty\":\"value\"}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object for First Name\nDESCRIPTION: This snippet defines a JSON object with a single key 'FirstName' and value 'Steve'. It represents a basic data structure for storing a person's first name.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/CustomSerializationTests.CustomizingJsonSerializerOptions.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"FirstName\":\"Steve\"}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests Build Command\nDESCRIPTION: Windows build command that compiles the solution while skipping test execution.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat skiptests\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter in Markdown for Landing Page\nDESCRIPTION: YAML front matter that specifies the page should use the 'landing' layout template. This controls how the page is rendered in a static site generator.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/docfx/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_layout: landing\n```\n\n----------------------------------------\n\nTITLE: Running Windows Build Script\nDESCRIPTION: Command to execute the Windows build script that pulls dependencies and runs the default build target.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.bat\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object\nDESCRIPTION: An empty JSON object with no properties or values defined.\nSOURCE: https://github.com/elastic/elasticsearch-net/blob/main/tests/Tests/_VerifySnapshots/IndexSettingsSerializationTests.CanSerialize_NullCreationDate.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```"
  }
]