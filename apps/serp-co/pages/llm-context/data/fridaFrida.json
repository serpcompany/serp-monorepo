[
  {
    "owner": "frida",
    "repo": "frida",
    "content": "TITLE: Installing Frida Using Package Managers\nDESCRIPTION: Commands to install Frida tools and bindings using pip for Python and npm for Node.js\nSOURCE: https://github.com/frida/frida/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install frida-tools # CLI tools\npip install frida       # Python bindings\nnpm install frida       # Node.js bindings\n```\n\n----------------------------------------\n\nTITLE: Building Frida from Source\nDESCRIPTION: Basic command to build Frida from source code\nSOURCE: https://github.com/frida/frida/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Vala\nDESCRIPTION: Example of proper error handling and service initialization in Vala with appropriate error messages.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: vala\nCODE:\n```\nprivate async LLDB.Client start_lldb_service (Fruity.LockdownClient lockdown, Cancellable? cancellable)\n\t\tthrows Error, LLDB.Error, IOError {\n\ttry {\n\t\tvar lldb_stream = yield lockdown.start_service (DEBUGSERVER_SERVICE_NAME + \"?tls=handshake-only\", cancellable);\n\t\treturn yield LLDB.Client.open (lldb_stream, cancellable);\n\t} catch (Fruity.LockdownError e) {\n\t\tif (e is Fruity.LockdownError.INVALID_SERVICE) {\n\t\t\tthrow new Error.NOT_SUPPORTED (\"This feature requires an iOS Developer Disk Image to be mounted; \" +\n\t\t\t\t\"run Xcode briefly or use ideviceimagemounter to mount one manually\");\n\t\t}\n\t\tthrow new Error.NOT_SUPPORTED (\"%s\", e.message);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frida CLI Dependencies\nDESCRIPTION: Command to install required Python packages for Frida CLI tools including colorama, prompt-toolkit, and pygments\nSOURCE: https://github.com/frida/frida/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install colorama prompt-toolkit pygments\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Example in C\nDESCRIPTION: Demonstrates proper variable naming conventions by using meaningful variable names instead of single-letter variables for better code readability.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ndyld_start = (instance->cpu_type == GUM_CPU_ARM64) ? __darwin_arm_thread_state64_get_pc (state.ts_64) : state.ts_32.__pc;\ndyld_header = 0;\ndyld_granularity = 4096;\n\nfor (dyld_chunk = (dyld_start & (dyld_granularity - 1)) == 0 ? (dyld_start - dyld_granularity) : (dyld_start & ~(dyld_granularity - 1));\n    dyld_header == 0;\n    dyld_chunk -= dyld_granularity)\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Platform Certificates\nDESCRIPTION: Commands to set up code-signing certificates for various Apple platforms and build Frida\nSOURCE: https://github.com/frida/frida/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MACOS_CERTID=frida-cert\nexport IOS_CERTID=frida-cert\nexport WATCHOS_CERTID=frida-cert\nexport TVOS_CERTID=frida-cert\nmake\n```\n\n----------------------------------------\n\nTITLE: Using interface instead of type in TypeScript\nDESCRIPTION: Shows the preferred way to define object types in TypeScript using interfaces rather than type aliases. This applies to dictionary-like structures with string indices.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StringDict = {\n    [name: string]: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StringDict {\n    [name: string]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Organization in JavaScript\nDESCRIPTION: Shows proper function ordering with higher-level functions placed before lower-level functions, organized chronologically.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getInfo() {\n    return {\n        infoAboutA: getInfoAboutA(),\n        infoAboutB: getInfoAboutB()\n    };\n}\n\nfunction getInfoAboutA() {\n    /* complex code */\n    return allInfoAboutA;\n}\n\nfunction getInfoAboutB() {\n    /* more complex code */\n    return allInfoAboutB;\n}\n```\n\n----------------------------------------\n\nTITLE: Privileged Function Ordering in JavaScript\nDESCRIPTION: Demonstrates proper ordering of public functions, with unrestricted functions placed before restricted ones.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getHarmlessInfo() {\n    return harmlessInfo;\n}\n\nfunction getPrivilegedInfo() {\n    if (!amIRoot()) {\n        throw new Error(\"You must be root\");\n    }\n    ...\n    return privilegedInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: C Function Declaration Pattern\nDESCRIPTION: Demonstrates proper function declaration with arguments in C. Shows the correct way to declare functions that take parameters.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nfrida_find_libsystem (const GumModuleDetails * details, gpointer user_data)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: C Function Declaration Without Arguments\nDESCRIPTION: Shows correct and incorrect ways to declare functions that take no arguments in C. Proper declaration uses (void) syntax.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean \nfunction_without_args ()\n{\n  ...\n}\n```\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean \nfunction_without_args (void)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Function argument formatting in frida-gum C code\nDESCRIPTION: Shows the correct way to format function implementations in frida-gum C code. Each argument must be on its own line and vertically aligned for better readability.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngum_exec_block_write_block_event_code (GumExecBlock * block, GumGeneratorContext * gc,\n                                       GumCodeContext cc)\n{\n  ...\n}\n```\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ngum_exec_block_write_block_event_code (GumExecBlock * block,\n                                       GumGeneratorContext * gc,\n                                       GumCodeContext cc)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Namespacing function names in frida-core C code\nDESCRIPTION: Demonstrates the correct way to prefix function names in frida-core C code. All functions should have a 'frida_' prefix, even if they are static.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nfind_libsystem (const GumModuleDetails * details, gpointer user_data)\n{\n  ...\n}\n```\n\nLANGUAGE: c\nCODE:\n```\nstatic gboolean\nfrida_find_libsystem (const GumModuleDetails * details, gpointer user_data)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum Declaration Pattern\nDESCRIPTION: Shows proper enum value naming in TypeScript using pascal case.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum PlistType {\n    NONE,\n    BINARY,\n    XML\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum PlistType {\n    None,\n    Binary,\n    Xml\n}\n```\n\n----------------------------------------\n\nTITLE: Using proper string quotes in Python\nDESCRIPTION: Demonstrates the correct usage of string quotes in Python code: double quotes for regular strings and single quotes for enum-like values.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif os.environ.get(\"TERM\", '') == \"dumb\":\n```\n\nLANGUAGE: python\nCODE:\n```\nif os.environ.get(\"TERM\", \"\") == 'dumb':\n```\n\n----------------------------------------\n\nTITLE: C Local Variable Declaration Pattern\nDESCRIPTION: Shows proper local variable declaration patterns in C, with variables declared at start of block.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n  if (is_uninitialized_clone)\n  {\n    mach_port_mod_refs (self_task, task, MACH_PORT_RIGHT_SEND, 1);\n    instance->task = task;\n\n    mach_vm_address_t data_address = instance->remote_agent_context;\n    ...\n  }\n```\n\nLANGUAGE: c\nCODE:\n```\n  if (is_uninitialized_clone)\n  {\n    mach_vm_address_t data_address;\n\n    mach_port_mod_refs (self_task, task, MACH_PORT_RIGHT_SEND, 1);\n    instance->task = task;\n\n    data_address = instance->remote_agent_context;\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Constants Pattern\nDESCRIPTION: Shows proper string constant declaration in JavaScript using single quotes instead of double quotes.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error(\"Invalid argument\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Invalid argument');\n```\n\n----------------------------------------\n\nTITLE: Using var for variable declarations in Vala\nDESCRIPTION: Shows how to use the 'var' keyword for variable declarations in Vala, which is preferred especially when the type is obvious from the initialization.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: vala\nCODE:\n```\nJson.Node parameters = new Json.Node (Json.NodeType.OBJECT);\n```\n\nLANGUAGE: vala\nCODE:\n```\nvar parameters = new Json.Node (Json.NodeType.OBJECT);\n```\n\n----------------------------------------\n\nTITLE: Proper curly brace placement in Vala\nDESCRIPTION: Demonstrates the correct curly brace placement for control structures in Vala code. Braces should be on the same line as the statement, not on a new line.\nSOURCE: https://github.com/frida/frida/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: vala\nCODE:\n```\nif (condition)\n{\n  ...\n}\nelse\n{\n  ...\n}\n```\n\nLANGUAGE: vala\nCODE:\n```\nif (condition) {\n  ...\n} else {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting macOS Certificate Daemon\nDESCRIPTION: Command to restart the taskgated daemon to accept the newly created certificate on macOS\nSOURCE: https://github.com/frida/frida/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo killall taskgated\n```"
  }
]