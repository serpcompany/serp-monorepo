[
  {
    "owner": "zuplo",
    "repo": "docs",
    "content": "TITLE: Converting URL Parameters to OpenAPI Format in JavaScript\nDESCRIPTION: Script that reads OpenAPI specification files, converts URL parameters to the proper OpenAPI format, and updates the files in place. It handles parameter case formatting, path conversion, and maintains OpenAPI structure while processing multiple files.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/convert-urls-to-openapi.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from \"fs/promises\";\nimport kabab from \"kebab-case\";\nimport path from \"path\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport prettier from \"prettier\";\n\nconst files = await fs.readdir(path.join(process.cwd(), \"config\"));\nawait Promise.all(\n  files.map(async (file) => {\n    if (file.endsWith(\".oas.json\")) {\n      const specPath = path.join(process.cwd(), \"config\", file);\n      const content = await fs.readFile(specPath, \"utf-8\").then(JSON.parse);\n      const newPaths = {};\n      Object.entries(content.paths).forEach(([path, entry]) => {\n        delete entry[\"x-zuplo-path\"];\n        const keys = [];\n        pathToRegexp(path, keys);\n        let newPath = path;\n        keys.forEach((key) => {\n          newPath = newPath.replace(`:${key.name}`, `{${kababCase(key.name)}}`);\n        });\n        Object.entries(entry).forEach(([method, methodEntry]) => {\n          if (entry[method].parameters) {\n            entry[method].parameters.forEach((param) => {\n              if (param.in === \"path\") {\n                param.name = kababCase(param.name);\n              }\n            });\n          }\n        });\n        newPaths[newPath] = entry;\n      });\n\n      content.paths = newPaths;\n\n      const json = JSON.stringify(content, null, 2);\n      const output = prettier.format(json, { parser: \"json\" });\n\n      await fs.writeFile(specPath, output, \"utf-8\");\n    }\n  }),\n);\n\nfunction kababCase(str) {\n  return kabab(str).replaceAll(\"-u-r-l\", \"-url\").replaceAll(\"-a-p-i\", \"-api\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Load Configuration with MemoryZoneReadthroughCache in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use MemoryZoneReadthroughCache to efficiently load and store configuration data in Zuplo. It includes a function to load config data from an external API, caching it for future use, and a request handler that utilizes the loaded configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/lazy-load-configuration-into-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ZuploContext,\n  ZuploRequest,\n  MemoryZoneReadThroughCache,\n  environment,\n} from \"@zuplo/runtime\";\n\ninterface MyConfig {\n  data: Record<string, string>[];\n}\n\nconst cacheName = \"CACHE_NAME\";\nconst configKey = \"CONFIG_KEY\";\nconst cacheTtlSeconds = 3600;\n\nasync function loadConfig(context: ZuploContext) {\n  // We will type the cache to work with MyConfig type, but\n  // you can use `any` if there. Use the same cache name\n  // when trying to use the same cache store from different modules.\n  const cache = new MemoryZoneReadThroughCache<MyConfig>(cacheName, context);\n  let config = await cache.get(configKey);\n\n  if (!config) {\n    // This is where you load the configuration for your own backend API\n    const response = await fetch(`https://your-backend-config-api.com`, {\n      headers: {\n        authorization: `Bearer ${environment.CONFIG_API_KEY}`,\n      },\n    });\n\n    if (response.status !== 200) {\n      throw new Error(\n        `Error reading config ${response.status}: '${await response.text()}'`,\n      );\n    }\n\n    config = await response.json();\n    cache.put(configKey, config, cacheTtlSeconds);\n  }\n  return config;\n}\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const config = await loadConfig(context);\n  context.log.info(config);\n  // use the config in your pipeline or request handler etc\n  // ...\n  // ...\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Settings with x-zuplo-route Extension\nDESCRIPTION: This snippet shows how to use the x-zuplo-route extension to configure route settings in an OpenAPI document. It includes settings for CORS policy, handlers, and inbound policies within a GET operation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/open-api.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"get\": {\n    \"summary\": \"New Route\",\n    \"description\": \"Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do `eiusmod tempor` incididunt ut labore et dolore magna aliqua.\",\n    \"x-zuplo-route\": {\n        \"corsPolicy\": \"none\",\n        \"handler\": {\n            \"export\": \"urlForwardHandler\",\n            \"module\": \"$import(@zuplo/runtime)\",\n            \"options\": {\n                \"baseUrl\": \"https://echo.zuplo.io\"\n            }\n        },\n        \"policies\": {\n            \"inbound\": []\n        }\n    },\n    \"operationId\": \"e73d0713-b894-494d-8796-2c50b8634d47\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkOS Audit Logging with Zuplo Custom Policy\nDESCRIPTION: This TypeScript function creates a custom audit logging policy that integrates with WorkOS. It uses response hooks to capture request and response data, then sends the formatted audit event to WorkOS API. The implementation demonstrates how to extract user information, request metadata, and request body content for comprehensive audit logging.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-audit-log-policy.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, environment } from \"@zuplo/runtime\";\n\nexport async function auditLogPlugin(\n  request: ZuploRequest,\n  context: ZuploContext,\n  policyName: string,\n) {\n  // Clone the request so the body can be read in the hook\n  // note: remove this is you don't need content from the body\n  const cloned = request.clone();\n  context.addResponseSendingFinalHook(async (response) => {\n    const incomingBody = await cloned.json();\n    // This is an example event. Extract any additional data needed from the\n    // request.\n    const body = {\n      organization_id: \"org_01EHWNCE74X7JSDV0X3SZ3KJNY\",\n      event: {\n        action: \"user.signed_in\",\n        occurred_at: \"2022-09-02T16:35:39.317Z\",\n        version: 1,\n        actor: {\n          type: \"user\",\n          // Add the use the user sub for authenticated users\n          id: request.user.sub,\n          metadata: {\n            role: \"user\",\n          },\n        },\n        targets: [\n          {\n            type: \"user\",\n            id: \"user_98432YHF\",\n            name: \"Jon Smith\",\n          },\n          {\n            type: \"team\",\n            id: \"team_J8YASKA2\",\n            metadata: {\n              owner: \"user_01GBTCQ2\",\n            },\n          },\n        ],\n        context: {\n          location: request.headers.get(\"True-Client-IP\"),\n          user_agent: request.headers.get(\"User-Agent\"),\n        },\n        metadata: {\n          extra: incomingBody.extra,\n        },\n      },\n    };\n    await fetch(\"https://api.workos.com/audit_logs/events\", {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: {\n        Authorization: `Bearer ${environment.WORKOS_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n        // Optional idempotency key.\n        // See: https://workos.com/docs/reference/idempotency\n        // \"Idempotency-Key\": \"YOUR_KEY_HERE\"\n      },\n    });\n  });\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Consumer in JSON\nDESCRIPTION: This JSON snippet shows how to configure an API Key consumer with a name and metadata including company ID and plan type.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-consumer\",\n  \"metadata\": {\n    \"companyId\": 12345,\n    \"plan\": \"gold\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rate Limiting with Database and ZoneCache in TypeScript\nDESCRIPTION: This function implements dynamic rate limiting by retrieving customer usage limits from Supabase and caching them in ZoneCache for better performance. It extracts the customer ID from user data, checks the cache first, falls back to database lookup if needed, and returns rate limit details.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/per-user-rate-limits-using-db.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CustomRateLimitDetails,\n  ZoneCache,\n  ZuploContext,\n  ZuploRequest,\n  environment,\n} from \"@zuplo/runtime\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst CACHE_NAME = \"rate-limit-requests-allowed-cache\";\nconst SB_URL = \"https://YOUR_SUPABASE_URL.supabase.co\";\nconst SB_SERVICE_ROLE_KEY = environment.SB_SERVICE_ROLE_KEY;\nconst FALLBACK_REQUESTS_ALLOWED = 100;\n\nexport async function rateLimitKey(\n  request: ZuploRequest,\n  context: ZuploContext,\n  policyName: string,\n): Promise<CustomRateLimitDetails> {\n  // We'll get the customer ID from the user data.\n  // This might be from a JWT or API Key metadata\n  const customerId = request.user.data.customerId;\n\n  // We don't want to hit the database on every request\n  // So we'll use the fast zone cache to cache this data\n  const cache = new ZoneCache(CACHE_NAME, context);\n  let requestsAllowed = await cache.get(customerId);\n\n  // If we didn't get a value, we'll need to go to the database\n  // In this example we're using supabase, but you could use your\n  // own API, Xata, etc.\n  if (requestsAllowed === undefined) {\n    // create the supabase client and read the customer's\n    const supabase = createClient(SB_URL, SB_SERVICE_ROLE_KEY);\n    let { data, error } = await supabase\n      .from(\"customer_rate_limits\")\n      .select(\"requestsAllowed\")\n      .eq(\"customerId\", customerId);\n\n    // If something goes wrong, we probably want to log an\n    // error and assume a default, vs go down\n    if (error) {\n      context.log.error(error);\n      requestsAllowed = FALLBACK_REQUESTS_ALLOWED;\n    } else {\n      context.log.info(data);\n      requestsAllowed = data[0].requestsAllowed;\n    }\n    // store the read value in the ZoneCache\n    // do this asynchronously to improve performance\n    cache\n      .put(customerId, requestsAllowed, 60)\n      .catch((err) => context.log.error(err));\n  }\n\n  return {\n    key: customerId,\n    requestsAllowed: requestsAllowed,\n    timeWindowMinutes: 1,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Body Archiving to Azure Blob Storage in TypeScript\nDESCRIPTION: This code snippet shows how to create a custom handler that archives the response body to Azure Blob Storage. It uses the @azure/storage-blob package to interact with Azure Blob Storage and implements error handling for the archiving process.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/archive-response-azure-storage-outbound/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, environment } from \"@zuplo/runtime\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const response = await context.invokeNextHandler();\n\n  try {\n    const blobServiceClient = BlobServiceClient.fromConnectionString(\n      environment.AZURE_STORAGE_CONNECTION_STRING\n    );\n    const containerClient = blobServiceClient.getContainerClient(\"responses\");\n    const blobClient = containerClient.getBlockBlobClient(\n      `${Date.now()}-${request.method}-${request.url.pathname}`\n    );\n\n    const responseBody = await response.text();\n    await blobClient.upload(responseBody, responseBody.length);\n\n    console.log(`Response archived to blob: ${blobClient.name}`);\n  } catch (error) {\n    console.error(\"Error archiving response:\", error);\n  }\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging Policy in TypeScript for Zuplo\nDESCRIPTION: A complete TypeScript implementation of a custom logging policy that captures detailed request and response information and posts it to an external endpoint. The policy clones requests/responses to safely read bodies, serializes headers, and uses event listeners to capture the final response.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-logging-example.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, ResponseSentEvent } from \"@zuplo/runtime\";\n\ntype CustomLoggingOptions = {\n  endpoint: string;\n};\n\nconst serializableHeaders = (headers: Headers) => {\n  const output = {};\n  headers.forEach((value, key) => {\n    output[key] = value;\n  });\n  return output;\n};\n\nconst serializableRequest = async (request: ZuploRequest) => {\n  // if we're going to read the body, we need to clone\n  // the request first - otherwise the response pipeline will\n  // encounter a drained stream\n  const clone = request.clone();\n  const body = await clone.text(); // read as text\n  const data = {\n    method: request.method,\n    url: request.url,\n    headers: serializableHeaders(request.headers),\n    body,\n  };\n\n  return data;\n};\n\nconst serializableResponse = async (response: Response) => {\n  // if we're going to read the body, we need to clone\n  // the response first - otherwise the response pipeline will\n  // encounter a drained stream\n  const clone = response.clone();\n  const body = await clone.text(); // read as text\n\n  const data = {\n    status: response.status,\n    headers: serializableHeaders(response.headers),\n    body,\n  };\n\n  return data;\n};\n\nconst logReqRes = async (\n  endpoint: string,\n  req: any,\n  response: Response,\n  context: ZuploContext,\n  start: number,\n) => {\n  // we don't want any errors thrown that might impact\n  // our consumers experience so catch everything and\n  // use context.log\n  try {\n    const data = {\n      req,\n      res: await serializableResponse(response),\n      timeMs: Date.now() - start,\n    };\n\n    return fetch(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    });\n  } catch (err) {\n    context.log.error(err, \"error in custom-logging policy\");\n  }\n};\n\nexport default async function (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: CustomLoggingOptions,\n  policyName: string,\n) {\n  // We need to read the body of the request before it's used by the handler\n  // so let's serialize the request now\n  const req = await serializableRequest(request);\n  const start = Date.now();\n\n  // The 'responseSent' event will fire at the very last stage in the response\n  // pipeline, when no more mutations can be made - so you can be confident\n  // this was the response sent by Zuplo\n  context.addEventListener(\"responseSent\", async (event: ResponseSentEvent) => {\n    const promise = logReqRes(\n      options.endpoint,\n      req,\n      event.response,\n      context,\n      start,\n    );\n\n    // We need to ask the runtime now to shut down until this is complete,\n    // as this will run asynchronously to our response\n    context.waitUntil(promise);\n  });\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Consumer Metadata in JSON\nDESCRIPTION: This snippet demonstrates how to structure metadata for an API key consumer. The metadata includes information about the company ID and subscription plan, which is made available to the runtime when a user accesses the API using that key.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-management.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"companyId\": 123,\n  \"plan\": \"gold\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Transformation Policy in TypeScript\nDESCRIPTION: A custom outbound policy that demonstrates how to modify API responses between versions. This example shows removing a property (userId) from todo items when serving the v2 API, enabling backward compatibility while introducing breaking changes.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/versioning-on-zuplo.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function policy(\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: never,\n  policyName: string,\n) {\n  if (response.status === 200) {\n    const json = await response.json();\n    json.forEach((item) => {\n      delete item.userId;\n    });\n\n    return new Response(JSON.stringify(json), response);\n  }\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Zuplo Identity Tokens Using jose in TypeScript\nDESCRIPTION: This code snippet shows how to verify a Zuplo Identity Token on your backend service using the jose JavaScript library. It creates a remote JWK set, verifies the token's signature and claims, and checks if the token comes from the expected account and project.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-id-token.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport jose from \"jose\";\n\n// Create the Remote JWK set\nconst JWKS = jose.createRemoteJWKSet(\n  new URL(\n    \"https://dev.zuplo.com/v1/client-auth/auth_o8PUdhKxSTOiB794GWPwLQCD/.well-known/jwks.json\",\n  ),\n);\n\n// Verify the token\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, JWKS, {\n  issuer: \"https://dev.zuplo.com/v1/client-auth/auth_o8PUdhKxSTOiB794GWPwLQCD\",\n  audience: \"https://my-api.example.com\",\n});\n\n// Verify the token is from your account/project/etc.\nif (\n  payload[\"account\"] !== \"my-account\" ||\n  payload[\"project\"] !== \"my-project\"\n) {\n  throw new Error(\"Not my account or project\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tracing in Zuplo Policy\nDESCRIPTION: Example of how to implement custom tracing in a Zuplo policy using OpenTelemetry API. Shows how to create a tracer, start a span, set attributes, and handle multiple fetch requests with proper span management.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/opentelemetry.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\nimport { trace } from \"@opentelemetry/api\";\n\nexport default async function policy(\n  request: ZuploRequest,\n  context: ZuploContext,\n) {\n  const tracer = trace.getTracer(\"my-tracer\");\n  return tracer.startActiveSpan(\"my-span\", async (span) => {\n    span.setAttribute(\"key\", \"value\");\n\n    try {\n      const results = await Promise.all([\n        fetch(\"https://api.example.com/hello\"),\n        fetch(\"https://api.example.com/world\"),\n      ]);\n      // ...\n\n      return request;\n    } finally {\n      span.end();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters in TypeScript Request Handler\nDESCRIPTION: Demonstrates how to access path parameters in a Zuplo request handler using TypeScript. It extracts the userId from the request params and uses it to fetch user data.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/routing.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\nimport { getUserById } from \"./userService\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const userId = request.params.userId;\n  const user = await getUserById(userId);\n  return context.json(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracing with OnResponseSending Hook in TypeScript\nDESCRIPTION: This code demonstrates how to create a tracing policy that adds a trace header to the request and ensures the same header is returned with the response using the OnResponseSending hook. The function generates a unique trace ID if one isn't present in the request headers.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/hooks.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport async function tracingPlugin(\n  request: ZuploRequest,\n  context: ZuploContext,\n  policyName: string,\n) {\n  // Get the trace header\n  let traceparent = request.headers.get(\"traceparent\");\n\n  // If not set, add the header to the request\n  if (!traceparent) {\n    traceparent = crypto.randomUUID();\n    const headers = new Headers(request.headers);\n    headers.set(\"traceparent\", traceparent);\n    return new ZuploRequest(request, { headers });\n  }\n\n  context.addResponseSendingHook((response, latestRequest, context) => {\n    // If the response doesn't have the trace header that matches, set it\n    if (response.headers.get(\"traceparent\") !== traceparent) {\n      const headers = new Headers(response.headers);\n      headers.set(\"traceparent\", traceparent);\n      return new Response(response.body, {\n        headers,\n      });\n    }\n    return response;\n  });\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring static meters in Zuplo Monetization Policy\nDESCRIPTION: This snippet demonstrates how to configure a Monetization Inbound Policy with static meter values, where each request consumes 1 'requests' meter and 5 'computeUnits' meters. The policy is configured to only meter on successful responses (status codes 200-399) and only allow requests from subscriptions with 'active' or 'incomplete' status.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-programmatic-quotas.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"MonetizationInboundPolicy\",\n  \"module\": \"$import(@zuplo/runtime)\",\n  \"options\": {\n    \"allowRequestsOverQuota\": false,\n    \"allowedSubscriptionStatuses\": [\"active\", \"incomplete\"],\n    \"meterOnStatusCodes\": \"200-399\",\n    \"meters\": {\n      \"requests\": 1,\n      \"computeUnits\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Supabase Auth SignUp to Include Redirect URL\nDESCRIPTION: This code updates the supabase.auth.signUp call to include a custom redirect URL that points to the callback endpoint. It also preserves the session-create-url parameter by adding it to the callback URL's query parameters.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst sessionCreateUrl = requestUrl.searchParams.get(\"session-create-url\");\nconst redirectUrl = new URL(`${requestUrl.origin}/auth/callback`);\nif (sessionCreateUrl) {\n  // This will send the session-create-url as a query parameter to your\n  // /auth/callback endpoint. We will use this in the next step\n  redirectUrl.searchParams.set(\"session-create-url\", sessionCreateUrl);\n}\nconst { error } = await supabase.auth.signUp({\n  email,\n  password,\n  options: {\n    // The email confirmation link sent to the user will now redirect to\n    // your /auth/callback endpoint\n    emailRedirectTo: redirectUrl.toString(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RequestHandler Type in TypeScript\nDESCRIPTION: The TypeScript type definition for a Zuplo request handler, which takes a ZuploRequest and ZuploContext as parameters and returns a Promise.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/custom-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RequestHandler = (\n  request: ZuploRequest,\n  context: ZuploContext,\n) => Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Fetch API in TypeScript\nDESCRIPTION: Example demonstrating how to make an HTTP request using the Fetch API to retrieve and parse JSON data from an endpoint.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/web-standard-apis.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://echo.zuplo.io\");\nconst body = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern Path Mode in OpenAPI with Zuplo\nDESCRIPTION: This snippet demonstrates how to use the x-zuplo-path extension in an OpenAPI document to specify the path matching mode. Setting pathMode to 'url-pattern' enables more powerful path matching with support for regular expressions.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/open-api.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n    \"/path-0\": {\n        \"x-zuplo-path\": {\n            \"pathMode\": \"url-pattern\"\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Requests to Customer-Specific Services in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to use the customerId from request.user.data to route requests to dedicated customer services.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function (request: ZuploRequest, context: ZuploContext) {\n  const { customerId } = request.user.data;\n  return fetch(`https://${customerId}.customers.example.com/`\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET Request with Fetch to Zuplo API\nDESCRIPTION: Shows how to make a GET request to the Zuplo Developer API using the Fetch API with API key authentication and handle the JSON response.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/developer-api.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://dev.zuplo.com/v1/who-am-i\", {\n  method: \"GET\",\n  headers: { Authorization: \"Bearer YOUR_KEY_HERE\" },\n});\n\nconst result = await response.json();\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Implementing BackgroundDispatcher in TypeScript\nDESCRIPTION: Complete example showing how to initialize and use the BackgroundDispatcher class for batching outbound transmissions. Demonstrates setting up the dispatcher, defining entry types, implementing a dispatch function, and using it within a request handler.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/background-dispatcher.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, BackgroundDispatcher, environment } from \"@zuplo/runtime\";\n\n// The type that identifies the entries\n// to be batched\ninterface ExampleEntry {\n  message: string;\n}\n\n\n// The dispatch function that will be invoked by the\n// BatchDispatcher at most every 'n' milliseconds\nconst dispatchFunction<TestEntry> = async (entries) => {\n\n    // consider implementing a retry or backup call\n    // if the data being transmitted is important\n    await fetch(`https://example-logging-service.com/`,\n    {\n        method: \"POST\",\n        headers: {\n            \"api-key\": environment.MY_LOGGING_API_KEY\n        }\n        body: JSON.stringify(entries)\n    })\n};\n\n// The dispatcher is typically initiated at the module level\n// so it can be shared by requests. Note that the msDelay is set\n// to 100ms.\nconst backgroundDispatcher = new BackgroundDispatcher<TestEntry>(\n  dispatchFunction,\n  { msDelay: 100 }\n);\n\n\n// This is an example Request Handler that used the component, a simple\n// \"Hello World\" handler.\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  backgroundDispatcher.enqueue(\n    {\n        message: `new request on '${request.url}' with id ${context.requestId}`\n    },\n    context);\n\n  return \"Hello World!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Zuplo\nDESCRIPTION: Azure Pipelines configuration for deploying and testing Zuplo APIs. Includes steps for Node.js setup, deployment, testing, and environment cleanup.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: NodeTool@0\n    inputs:\n      versionSpec: \"20.x\"\n    displayName: \"Install Node.js\"\n\n  - script: |\n      npm install\n    displayName: \"npm install\"\n\n  - script: |\n      set -o pipefail \n      FORCE_COLOR=0 npx zuplo deploy --api-key $(ZUPLO_API_KEY) 2>&1 | tee ./DEPLOYMENT_STDOUT\n    displayName: \"Zuplo Deploy\"\n\n  - script: |\n      npx zuplo test --endpoint $(cat ./DEPLOYMENT_STDOUT |  sed -n -E 's/.*Deployed to (https:\\/\\/[^ ]+).*/\\1/p')\n    displayName: \"Zuplo Test\"\n\n  - script: |\n      npx zuplo delete --url $(cat ./DEPLOYMENT_STDOUT |  sed -n -E 's/.*Deployed to (https:\\/\\/[^ ]+).*/\\1/p') --api-key $(ZUPLO_API_KEY) --wait\n    displayName: \"Zuplo Delete\"\n    condition: eq(variables['Build.Reason'], 'PullRequest')\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests with Proper Function Design\nDESCRIPTION: Examples of good and bad approaches to writing testable functions in Zuplo. Demonstrates how to design functions to be independent of the Zuplo runtime for better testability and maintenance.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { environment } from \"@zuplo/runtime\";\n\nexport function myFunction() {\n  const myVar = environment.MY_ENV_VAR;\n  return `Hello ${myVar}`;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function myFunction(myVar: string) {\n  return `Hello ${myVar}`;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { myFunction } from \"./myFunction\";\n\ndescribe(\"myFunction\", () => {\n  it(\"should return Hello World\", () => {\n    expect(myFunction(\"World\")).to.equal(\"Hello World\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Data with ContextData Static Method\nDESCRIPTION: Example of using ContextData.get() static method to retrieve request-specific data\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = ContextData.get(context, \"my-data\");\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Pipelines for Zuplo\nDESCRIPTION: GitLab CI/CD pipeline configuration for deploying and testing Zuplo APIs. Includes stages for installation, deployment, and testing.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:latest\nworkflow:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"push\"\n      when: always\n\nnpm_install:\n  stage: build\n  script:\n    - npm install\n\nzup_deploy:\n  stage: deploy\n  script:\n    - npx zuplo deploy --apiKey \"$ZUPLO_API_KEY\" | tee ./DEPLOYMENT_STDOUT\n  artifacts:\n    expire_in: 30 minutes\n    paths:\n      - \"./DEPLOYMENT_STDOUT\"\n\nzup_test:\n  stage: deploy\n  needs: [zup_deploy]\n  script:\n    - npx zuplo test --endpoint $(cat ./DEPLOYMENT_STDOUT |  sed -E 's/Deployed to (.*)/\\1/')\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key Bucket with cURL\nDESCRIPTION: This bash script demonstrates how to create a new API key bucket using Zuplo's API Key management API. It sends a POST request with a name and description for the new bucket, requiring your account name and Zuplo API key for authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-buckets.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://dev.zuplo.com/v1/accounts/YOUR_ACCOUNT_NAME/key-buckets \\\n  --header 'Authorization: Bearer YOUR_ZAPI_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"name\":\"contoso-qa-bucket\",\"description\":\"API Key bucket for QA Environment\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Logging Plugin in Zuplo Runtime\nDESCRIPTION: This code snippet demonstrates how to add the DataDog logging plugin to a Zuplo project. It includes setting up the plugin with a custom URL, API key, source, tags, and fields. The configuration is added to the zuplo.runtime.ts file.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-datadog.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  DataDogLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new DataDogLoggingPlugin({\n      url: \"https://http-intake.logs.datadoghq.com/api/v2/logs\",\n      apiKey: environment.DATADOG_API_KEY,\n      source: \"MyAPI\", // Optional, defaults to \"Zuplo\"\n      tags: {\n        tag: \"hello\",\n      },\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Error Handling Examples\nDESCRIPTION: Examples of consistent error handling for query parameter validation with different error cases.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nHttpProblems.badRequest(request, context, {\n  title: \"Invalid value for query parameter 'take'\",\n  detail: \"The take parameter must be less than 100. The provided value was 1000.\",\n});\n\nHttpProblems.badRequest(request, context, {\n  title: \"Invalid value for query parameter 'take'\",\n  detail: \"The take parameter must a number less than 100. The provided value was 'hello'\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Splunk Logging Plugin in Zuplo Runtime\nDESCRIPTION: Implementation of Splunk logging plugin configuration in zuplo.runtime.ts file. Shows how to initialize the plugin with necessary parameters like URL, token, channel ID, and optional fields including index, sourcetype, host, and custom fields.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-splunk.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  SplunkLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new SplunkLoggingPlugin({\n      // For Splunk Cloud\n      url: \"https://<your-instance>.splunkcloud.com:8088/services/collector\",\n      token: environment.SPLUNK_TOKEN,\n      // Channel ID for Splunk HEC with indexer acknowledgment\n      channel: \"FE0ECFAD-13D5-401B-847D-77833BD77131\",\n      // Optional parameters with defaults\n      index: \"main\",\n      sourcetype: \"json\",\n      host: \"zuplo-api\",\n      fields: {\n        environment: \"production\",\n        application: \"my-api\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning User Object in Custom Handler Function\nDESCRIPTION: This TypeScript function shows how to return the request.user object as a JSON response in a simple function handler after successful API Key authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function (request: ZuploRequest, context: ZuploContext) {\n  // auto-serialize the user object and return it as JSON\n  return request.user;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Zuplo API\nDESCRIPTION: Sets up required environment variables for authentication and configuration when using the Zuplo Developer API\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Your Zuplo Account Name\nexport ACCOUNT_NAME=my-account\n# Your bucket API URL (Found in Settings > Project Information)\nexport BUCKET_NAME=my-bucket\n# Your Zuplo API Key (Found in Settings > Zuplo API Keys)\nexport ZAPI_KEY=zpka_YOUR_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing SumoLogic Logging Plugin in Zuplo Runtime (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add the SumoLogic logging plugin to a Zuplo project's runtime. It sets up the plugin with a custom URL and optional fields to be included in every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-sumo.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  SumoLogicLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new SumoLogicLoggingPlugin({\n      url: \"https://endpoint4.collection.sumologic.com/receiver/v1/http/XXXXXX\",\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Examples with ZuploContext\nDESCRIPTION: Demonstrates various logging levels available through the context.log property including debug, info, warn, and error levels.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-context.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.log.debug({ some: \"debug-info\" });\ncontext.log.info('info level stuff');\ncontext.log.warn(['a', 'warning']);\ncontext.log.error({ \"Oh\" : \"my!\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Logging Plugin in Zuplo Runtime\nDESCRIPTION: This snippet demonstrates how to add and configure the Loki Logging Plugin in the Zuplo runtime. It includes options for setting the Loki server URL, authentication credentials, job name, version, and custom fields.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-loki.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  LokiLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new LokiLoggingPlugin({\n      url: \"https://logs-prod-us-central1.grafana.net/loki/api/v1/push\",\n      username: \"my-username\",\n      job: \"my-api\",\n      password: environment.LOKI_PASSWORD,\n      version: 2,\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Tunnels in TypeScript\nDESCRIPTION: A handler function that demonstrates how to use environment variables to dynamically select service endpoints based on the current environment (production, staging, etc.). This pattern allows for environment-specific routing without code changes.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-setup.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, environment } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const response = await fetch(`${environment.BASE_SERVICE_URL}/hello-world`);\n  if (response.status > 399) {\n    return \"It didn't work. :(\";\n  } else {\n    return response;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing multipart/form-data with JSON in Zuplo\nDESCRIPTION: This function processes a multipart/form-data request containing a JSON file, reads the content into memory, modifies the JSON object, and forwards it to a backend server. It includes a helper function to handle both File and string data types that may be returned from FormData.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/handling-form-data.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\n// FormData can return different types in different circumstances\n// use this function to convert both to strings\nasync function readFileOrStringContent(data: unknown) {\n  if (data.constructor.name === \"File\") {\n    return await (data as File).text();\n  }\n  return data as string;\n}\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const formData = await request.formData();\n\n  // read the form-data entry as a 'Blob' type\n  const blob = formData.get(\"foo\");\n\n  // stream the body into memory\n  const json = await readFileOrStringContent(blob);\n\n  // parse the JSON document\n  const object = JSON.parse(json);\n\n  // Modify the document somehow before forwarding on to the backend\n  object.newKey = \"newValue\";\n\n  // Make a standard POST to a backend with a JSON body\n  const response = fetch(\"https://backend-origin.com/example\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify(object, null, 2),\n  });\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Structure for API Key Leak Notification in JSON\nDESCRIPTION: This JSON structure represents the payload sent by Zuplo's webhook notification system when an API key leak is detected. It includes details about the account, project, consumer, and the leaked API key.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-leak-detection.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account\": \"nate-totten\",\n  \"project\": \"peach-constrictor\",\n  \"bucket\": \"my-bucket\",\n  \"consumer\": \"my-consumer\",\n  \"reportedBy\": \"Github\",\n  \"foundAt\": \"https://github.com/ntotten/yellow-boar/blob/28597f1720fb8f5eafd7e5e68aceab2f3754e970/README.md\",\n  \"apiKey\": {\n    \"value\": \"zpka***************************0537e219\",\n    \"hash\": \"f159159a7c4335e39f314c42e902bbefeba12b181ef3f013724fd61177616a08\",\n    \"createdOn\": \"2023-07-14T17:51:29.999Z\",\n    \"expiresOn\": \"no expiration\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ResponseSendingFinal Hook in TypeScript\nDESCRIPTION: Implementation of a final response sending hook that runs before response is sent but cannot modify it.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addResponseSendingFinalHook((response, request, context) => {\n    // Code here\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Caching and Retrieving Data with Fallback in TypeScript\nDESCRIPTION: This example demonstrates how to use a cached response and populate the cache if no response is already cached, using TypeScript and the Cache API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = new Request(`https://echo.zuplo.io`);\nconst cache = await caches.open(\"MY_CACHE\");\nlet response = await cache.match(request);\nif (!response) {\n  response = await fetch(request);\n  await cache.put(request, response);\n}\n\nconst data = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Setting New Relic Context in Request Handler\nDESCRIPTION: Example of setting custom context for New Relic metrics within a request handler function. Demonstrates how to add custom attributes for specific requests.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ZuploContext,\n  ZuploRequest,\n  NewRelicMetricsPlugin,\n} from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const someValue = \"hello\";\n  NewRelicMetricsPlugin.setContext(context, {\n    attributes: { \"my-custom-attribute\": someValue },\n  });\n\n  return \"What zup?\";\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User Data in Zuplo\nDESCRIPTION: This snippet demonstrates how to access the authenticated user's information, including the subject (sub) and custom claims, from the request object in a Zuplo function. It also shows how to log user authentication and check custom claims.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/oauth-authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function (request: ZuploRequest, context: ZuploContext) {\n  // Log the user's sub\n  context.log.debug(`User ${request.user.sub} is authenticated`)\n\n  // Check a custom claim\n  if (request.user.data[\"orgId\"] === \"1234\") {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Manager React Component\nDESCRIPTION: TypeScript code snippet demonstrating how to import and use the API Key Manager component in a React project. It shows the creation of a default provider and rendering of the component.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-react-component.md#2025-04-08_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  ApiKeyManager,\n  DefaultApiKeyManagerProvider,\n} from \"@zuplo/react-api-key-manager\";\n\nconst MyComponent = () => {\n  const defaultProvider = new DefaultApiKeyManagerProvider(\n    \"<BASE_URL>\",\n    \"<ACCESS_TOKEN>\"\n  );\n\n  return <ApiKeyManager provider={provider} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Cache and CacheQueryOptions Interfaces in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interfaces for Cache and CacheQueryOptions, detailing the available methods and options for cache operations.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Cache {\n  put(request: RequestInfo, response: Response): Promise<void>;\n  match(\n    request: RequestInfo,\n    options?: CacheQueryOptions,\n  ): Promise<Response | undefined>;\n  delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>;\n}\n\ninterface CacheQueryOptions {\n  /**\n   * Not supported in development environments\n   */\n  ignoreMethod: boolean;\n  /**\n   * Always ignored\n   */\n  ignoreSearch: boolean;\n  /**\n   * Always ignored\n   */\n  ignoreVary: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Non-Standard Port in TypeScript\nDESCRIPTION: This snippet demonstrates how to make a request to a non-standard port using the fetch API in Zuplo. It requires a compatibility date of 2024-09-02 or later.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/non-standard-ports.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"http://example.com:8080\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hydrolix Logger Configuration in Zuplo\nDESCRIPTION: Advanced setup for the Hydrolix Request Logger Plugin with custom log entry format. This example defines a custom interface for log entries and implements a custom function to generate those entries with specific fields like timestamp, URL, method, and user information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/plugin-hydrolix-traffic-peak.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The interface that describes the rows\n// in the output\ninterface LogEntry {\n  timestamp: string;\n  method: string;\n  url: string;\n  status: number;\n  statusText: string;\n  sub: string | null;\n  contentLength: string | null;\n}\n\nruntime.addPlugin(\n  new HydrolixRequestLoggerPlugin<LogEntry>({\n    hostname: \"your-hydrolix-hostname.com\",\n    username: \"your-hydrolix-username\",\n    password: environment.HYDROLIX_PASSWORD,\n    token: environment.HYDROLIX_TOKEN,\n    table: \"your-table.name\",\n    transform: \"your-transform-name\",\n    batchPeriodSeconds: 0.1,\n    generateLogEntry: (response: Response, request: ZuploRequest) => ({\n      // You can customize the log entry here by adding new fields\n      timestamp: new Date().toISOString(),\n      url: request.url,\n      method: request.method,\n      status: response.status,\n      statusText: response.statusText,\n      sub: request.user?.sub ?? null,\n      contentLength: request.headers.get(\"content-length\"),\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting DataDog Context in Request Handler\nDESCRIPTION: Example of setting custom context for DataDog metrics within a request handler function. Demonstrates how to add custom tags for specific requests.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ZuploContext,\n  ZuploRequest,\n  DataDogMetricsPlugin,\n} from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const someValue = \"hello\";\n  DataDogMetricsPlugin.setContext(context, {\n    tags: [`my-custom-tag:${someValue}`],\n  });\n\n  return \"What zup?\";\n}\n```\n\n----------------------------------------\n\nTITLE: Environment-Based Backend URL Configuration\nDESCRIPTION: Example showing how to use environment variables to specify different backend URLs for different environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-rewrite.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n${env.BASE_PATH}${pathname}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Disable Introspection in Zuplo\nDESCRIPTION: Configuration for the GraphQL Disable Introspection policy. This security policy prevents clients from using introspection to discover the GraphQL schema, which helps hide schema details from potential attackers in production environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/graphql-security.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\n    {\n      \"name\": \"graphql-disable-introspection-policy\",\n      \"policyType\": \"graphql-disable-introspection-inbound\",\n      \"handler\": {\n        \"export\": \"GraphQLDisableIntrospectionInboundPolicy\",\n        \"module\": \"$import(@zuplo/graphql)\",\n        \"options\": {}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Post-Login Handler for API Consumer Creation\nDESCRIPTION: TypeScript implementation of an Auth0 post-login action that creates an API Key Consumer for new users. The code checks if a consumer already exists, creates a new one if needed, and stores the consumer ID in the user's metadata. It requires the undici package for HTTP requests and uses the Zuplo Developer API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-create-consumer-on-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fetch } = require(\"undici\");\nconst { randomUUID } = require(\"crypto\");\n\nconst ZUPLO_ACCOUNT = \"my-zuplo-account\";\nconst API_KEY_BUCKET = \"my-bucket\";\n\n/**\n * Handler that will be called during the execution of a PostLogin flow.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.user.app_metadata.api_consumer) {\n    console.log(\n      `Skipping creating of API consumer. Already exists: ${event.user.app_metadata.api_consumer}`,\n    );\n    return;\n  }\n\n  const body = {\n    description: `Consumer for ${event.user.name}`,\n    managers: [event.user.email],\n    metadata: {\n      // Any metadata here\n      user_id: event.user.user_id,\n    },\n    name: `c-${randomUUID()}`,\n  };\n\n  try {\n    // Create the consumer\n    const response = await fetch(\n      `https://dev.zuplo.com/v1/accounts/${ZUPLO_ACCOUNT}/key-buckets/${API_KEY_BUCKET}/consumers?with-api-key=true`,\n      {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n          Authorization: `Bearer ${event.secrets.API_KEY}`,\n          \"content-type\": \"application/json\",\n        },\n      },\n    );\n    const result = await response.json();\n    if (response.status !== 200) {\n      console.error(result);\n      throw new Error(\"Error creating API consumer\");\n    }\n    // Set the consumer in the user's metadata\n    api.user.setAppMetadata(\"api_consumer\", result.id);\n  } catch (err) {\n    // Catching error to not block the user's login to the portal\n    console.error(err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Testing GKE Endpoint with curl\nDESCRIPTION: A simple curl command to test the GKE endpoint which returns a hello world message with version and hostname information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/gke-with-upstream-auth-policy.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://34.111.91.10/\nHello, world!\nVersion: 1.0.0\nHostname: web-58756b54cc-7hdcw\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header Verification for Cloudfront\nDESCRIPTION: Policy configuration to validate custom headers from Cloudfront requests using the Header Restriction policy. Requires requests to include a specific header with a secret value stored in environment variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-aws-waf-shield.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"allow-cloudfront-custom-header\",\n  \"policyType\": \"require-header-inbound\",\n  \"handler\": {\n    \"export\": \"RequireHeaderInboundPolicyOptions\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"headerName\": \"secure-header\",\n      \"allowedValues\": [\"$env(MY_SECRET_HEADER_VALUE)\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HMAC Signatures in TypeScript with Web Crypto\nDESCRIPTION: This function creates an HMAC signature for a string value using a secret key. It imports the key material, signs the data with HMAC-SHA-256, and returns a base64-encoded signature with URL-safe character replacements.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/web-crypto-apis.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Creates a signature for a value and a given secret\n * @param value - The value to check\n * @param secret - the secret\n * @returns The base64 encoded signature\n **/\nasync function sign(value: string, secret: string) {\n  // You will need some super-secret data to use as a symmetric key.\n  const encoder = new TextEncoder();\n  const secretKeyData = encoder.encode(secret);\n  const key = await crypto.subtle.importKey(\n    \"raw\",\n    secretKeyData,\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"sign\"],\n  );\n\n  const mac = await crypto.subtle.sign(\"HMAC\", key, encoder.encode(value));\n\n  // `mac` is an ArrayBuffer, so you need to make a few changes to get\n  // it into a ByteString, and then a Base64-encoded string.\n  let base64Mac = btoa(String.fromCharCode(...new Uint8Array(mac)));\n\n  // must convert \"+\" to \"-\" as urls encode \"+\" as \" \"\n  base64Mac = base64Mac.replaceAll(\"+\", \"-\");\n\n  return base64Mac;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling zp-body-removed Header in Zuplo Custom Policy\nDESCRIPTION: This TypeScript code snippet demonstrates a custom policy for Zuplo that checks for the zp-body-removed header and returns a bad request response if a body was removed from a GET or HEAD request. It uses Zuplo's runtime library and the HttpProblems utility for generating the response.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zp-body-removed.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpProblems, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const bodyRemoved = request.headers.get(\"zp-body-removed\");\n\n  if (bodyRemoved) {\n    return HttpProblems.badRequest(request, context, {\n      detail: `GET or HEAD requests can't have a body.`,\n    });\n  }\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from User Object\nDESCRIPTION: This JSON snippet illustrates the structure of the response when returning the request.user object, including the consumer name and metadata.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"my-consumer\",\n  \"data\": {\n    \"companyId\": 12345,\n    \"plan\": \"gold\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastly Auth Inbound Policy in Zuplo\nDESCRIPTION: This JSON configuration sets up a custom code inbound policy in Zuplo to verify the signed header from Fastly. It specifies the policy type, handler, and options including the secret and header name.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"fastly-auth-inbound\",\n  \"policyType\": \"custom-code-inbound\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/fastly-auth-inbound)\",\n    \"options\": {\n      \"secret\": \"$env(FASTLY_SECRET)\",\n      \"headerName\": \"x-signature\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Validation Policy in Zuplo\nDESCRIPTION: This custom policy enforces authentication by checking if the request has been authenticated by previous policies. It verifies the 'sub' property exists in the user object and returns a 401 Unauthorized response if not authenticated.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/multiple-auth-policies.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  if (!request.user.sub) {\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typescript for Zuplo Projects (JSON)\nDESCRIPTION: This snippet shows the recommended tsconfig.json configuration for Zuplo projects. It specifies compiler options, included and excluded files, and sets up the environment for Typescript compilation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tsconfig.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"modules/**/*\", \".zuplo/**/*\", \"tests/**/*\"],\n  \"exclude\": [\"./node_modules\", \"./dist\"],\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ESNext\", \"WebWorker\", \"Webworker.Iterable\"],\n    \"preserveConstEnums\": true,\n    \"moduleResolution\": \"Bundler\",\n    \"useUnknownInCatchVariables\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"importHelpers\": true,\n    \"removeComments\": true,\n    \"esModuleInterop\": true,\n    \"noEmit\": true,\n    \"strictNullChecks\": true,\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL POST Endpoint in Zuplo Routes\nDESCRIPTION: Configuration for setting up a POST endpoint in Zuplo's routes.oas.json file to handle GraphQL queries. The configuration includes a URL rewrite handler to forward requests to a GraphQL API and applies two security policies: complexity limit and disable introspection.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/graphql-security.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"summary\": \"GraphQL Query\",\n    \"description\": \"The endpoint for GraphQL queries.\",\n    \"x-zuplo-route\": {\n      \"corsPolicy\": \"none\",\n      \"handler\": {\n        \"export\": \"urlRewriteHandler\",\n        \"module\": \"$import(@zuplo/runtime)\",\n        \"options\": {\n          \"rewritePattern\": \"https://api.example.com/graphql\"\n        }\n      },\n      \"policies\": {\n        \"inbound\": [\n          \"graphql-complexity-limit-policy\",\n          \"graphql-disable-introspection-policy\"\n        ]\n      }\n    },\n    \"operationId\": \"52bdf225-eaa7-441c-afb9-b7df046a142e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CORS Policies in policies.json\nDESCRIPTION: This snippet shows the structure of the policies.json file where custom CORS policies are defined. It includes an example of a custom CORS policy with various settings such as allowed origins, headers, methods, and other CORS-related configurations.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-cors-policy.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [], //...\n  \"corsPolicies\": [\n    {\n      \"name\": \"custom-cors\",\n      \"allowedOrigins\": \"https://domain1.com, https://domain2.com\",\n      \"allowedHeaders\": \"origin, my-special-incoming-header\",\n      \"allowedMethods\": [\"GET\", \"POST\"],\n      \"exposeHeaders\": \"my-special-response-header\",\n      \"maxAge\": 600,\n      \"allowCredentials\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing dynamic meters with an outbound policy in TypeScript\nDESCRIPTION: This TypeScript function shows how to implement a custom outbound policy that reads the 'compute-units' header from the response and dynamically sets the 'computeUnits' meter value using MonetizationInboundPolicy.setMeters(). The function throws an error if the header is missing or invalid.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-programmatic-quotas.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MonetizationInboundPolicy,\n  ZuploRequest,\n  ZuploContext,\n} from \"@zuplo/runtime\";\n\nexport default async function (\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: any,\n  policyName: string,\n) {\n  const headerValue = response.headers.get(\"compute-units\");\n  let computeUnitsValue;\n  if (headerValue && typeof headerValue === \"string\") {\n    computeUnitsValue = parseInt(headerValue);\n  }\n\n  // Throw an error if the server doesn't send compute units\n  // Alternatively, you could have a default value\n  if (!computeUnitsValue) {\n    throw new Error(\"Invalid response, no compute units sent.\");\n  }\n\n  // Set the compute units for the request\n  MonetizationInboundPolicy.setMeters(context, {\n    computeUnits: computeUnitsValue,\n  });\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CORS Policy to a Route\nDESCRIPTION: This snippet demonstrates how to reference a custom CORS policy in a route configuration. It shows the JSON structure for specifying the CORS policy name on a specific route.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-cors-policy.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/redirect-test\": {\n    \"get\": {\n      \"x-zuplo-route\": {\n        \"corsPolicy\": \"custom-cors\",\n        \"handler\": {\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"export\": \"redirectHandler\",\n          \"options\": {\n            \"location\": \"/docs\"\n          }\n        }\n      },\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Depth Limit in Zuplo\nDESCRIPTION: Configuration for the GraphQL Complexity Limit policy that focuses on limiting query depth. This policy prevents deeply nested queries that could potentially cause denial of service by setting a maximum depth limit of 20.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/graphql-security.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\n    {\n      \"name\": \"graphql-complexity-limit-policy\",\n      \"policyType\": \"graphql-complexity-limit-inbound\",\n      \"handler\": {\n        \"export\": \"GraphQLComplexityLimitInboundPolicy\",\n        \"module\": \"$import(@zuplo/graphql)\",\n        \"options\": {\n          \"useDepthLimit\": {\n            \"depthLimit\": 20\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in CORS Policy Configuration\nDESCRIPTION: This snippet shows how to use environment variables in the CORS policy configuration. It demonstrates replacing static values with environment variable references for flexible configuration across different environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-cors-policy.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  //... rest of policies.json file\n  \"corsPolicies\": [\n    {\n      \"name\": \"custom-cors\",\n      \"allowedOrigins\": \"$env(ALLOWED_ORIGINS)\", // \"https://domain1.com, https://domain2.com\",\n      \"allowedHeaders\": \"$env(ALLOWED_HEADERS)\", // \"origin, my-special-incoming-header\",\n      \"allowedMethods\": [\"GET\", \"POST\"],\n      \"exposeHeaders\": \"my-special-response-header\",\n      \"maxAge\": 600,\n      \"allowCredentials\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Not Found Handler in Zuplo with TypeScript\nDESCRIPTION: This code demonstrates how to create a custom 404 handler that returns a 405 Method Not Allowed response when a path is found but the HTTP method is incorrect. It extracts the allowed methods from matching routes and includes them in the response header as required by the HTTP specification.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/not-found-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  //add a custom not found handler\n  runtime.notFoundHandler = async (request, context, notFoundOptions) => {\n    if (notFoundOptions.routesMatchedByPathOnly.length > 0) {\n      // It's required to have an 'Allow' header with a 405 response\n      // Generate a string of allowed methods\n      const allowedMethods = notFoundOptions.routesMatchedByPathOnly\n        .map((route) => route.methods)\n        .reduce((acc, val) => acc.concat(val), [])\n        .join(\", \");\n\n      return HttpProblems.methodNotAllowed(\n        request,\n        context,\n        {},\n        { allow: allowedMethods },\n      );\n    }\n\n    return HttpProblems.notFound(request, context);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles for API Key Manager\nDESCRIPTION: CSS import statement to include Tailwind CSS styles for the API Key Manager component in a global CSS file.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-react-component.md#2025-04-08_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@import \"@zuplo/react-api-key-manager/tailwind.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Policy for Bypassing Monetization in Zuplo\nDESCRIPTION: This JSON snippet defines a custom policy named 'monetization-with-bypass-inbound' in the policies.json file. It uses a custom code inbound policy type and specifies the handler module and options.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/bypass-policy-for-testing.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"policies\": [{\n    {\n      \"name\": \"monetization-with-bypass-inbound\",\n      \"policyType\": \"custom-code-inbound\",\n      \"handler\": {\n        \"export\": \"default\",\n        \"module\": \"$import(./modules/monetization-with-bypass)\",\n        \"options\": {\n          \"config1\": \"YOUR_VALUE\",\n          \"config2\": true\n        }\n      },\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Authentication Enforcement in Zuplo\nDESCRIPTION: This TypeScript function enforces authentication based on an environment variable flag. If authentication is not disabled, it checks for a user object on the request and returns an unauthorized response if not present.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing-api-key-authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ZuploContext,\n  ZuploRequest,\n  environment,\n  HttpProblems,\n} from \"@zuplo/runtime\";\n\nexport default async function enforceAuth(\n  request: ZuploRequest,\n  context: ZuploContext,\n) {\n  if (environment.DISABLE_AUTH === \"AUTH_DISABLED\") {\n    return request;\n  }\n\n  if (!request.user) {\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Policy with Custom Function in JSON\nDESCRIPTION: This JSON configuration applies the custom rate limiting function to a Zuplo rate limiter policy. It specifies that rate limiting should be handled by the custom function, sets default values, and imports the module containing the rate limiting implementation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/per-user-rate-limits-using-db.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"RateLimitInboundPolicy\",\n  \"module\": \"$import(@zuplo/runtime)\",\n  \"options\": {\n    \"rateLimitBy\": \"function\",\n    \"requestsAllowed\": 2,\n    \"timeWindowMinutes\": 1,\n    \"identifier\": {\n      \"export\": \"rateLimitKey\",\n      \"module\": \"$import(./modules/per-user-rate-limiting)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebCrypto Polyfill for Node.js Testing\nDESCRIPTION: Example of how to polyfill the WebCrypto API in Node.js 20+ for testing Zuplo code. This polyfill must be registered before any Zuplo code runs to ensure proper functionality.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webcrypto } from \"node:crypto\";\nif (typeof crypto === \"undefined\") {\n  globalThis.crypto = webcrypto;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Runtime Extensions in TypeScript\nDESCRIPTION: Basic setup for runtime extensions in Zuplo gateway. Creates the foundation for adding global behaviors and modifications.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  // Extensions go here\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Document Shorthand Configuration\nDESCRIPTION: Example showing the shorthand notation for configuring document items in sidebar.json\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docs\": [\"index\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing API Key Manager React Component\nDESCRIPTION: Command to install the Zuplo API Key Manager React Component using npm.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-react-component.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zuplo/react-api-key-manager\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Document Configuration\nDESCRIPTION: Example showing how to configure a document item in sidebar.json\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"doc\",\n  \"id\": \"index\",\n  \"label\": \"Index Page\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponseSending Hook in TypeScript\nDESCRIPTION: Example of adding a response sending hook that can modify the response before it's sent.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addResponseSendingHook((response, request, context) => {\n    // Code here\n    return response;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Category Configuration\nDESCRIPTION: Interface definition for configuring category items in the sidebar, including properties for grouping multiple documents.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CategoryConfig {\n  type: \"category\";\n  label: string;\n  versions?: string[];\n  link?: DocLink | string;\n  /**\n   * @minItems 1\n   */\n  items: (DocConfig | string)[];\n}\n\ninterface DocLink {\n  type: \"doc\";\n  /**\n   * ID Must be unique across within the docs array\n   */\n  id: string;\n  // label and versions are omitted as they are already included on the CategoryConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Auth Policy with User Property Assignment\nDESCRIPTION: Extends the API key authentication policy to set the user property on the request based on the API key mapping, making user identity available to downstream handlers.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\n\nexport default async function (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: any,\n  policyName: string,\n) {\n  const apiKeyHeader = request.headers.get(\"api-key\");\n  if (!apiKeyHeader) {\n    return new Response(`No api-key header`, { status: 401 });\n  }\n\n  const matchedKey = options[apiKeyHeader];\n\n  if (matchedKey === undefined) {\n    return new Response(`Incorrect API Key`, { status: 401 });\n  }\n\n  request.user = { sub: matchedKey };\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Address from Request Headers in TypeScript\nDESCRIPTION: This code snippet shows how to access the true IP address of the client making a request through the Zuplo gateway. It retrieves the 'true-client-ip' header from the request object, which contains the actual IP address of the client.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/check-ip-address.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ip = request.headers.get(\"true-client-ip\");\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI Spec Association for Custom Pages in JSON\nDESCRIPTION: This JSON snippet shows how to configure a custom page to be associated with specific OpenAPI specifications using the 'specs' property. Pages can be configured to display only for certain API specs.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-adding-pages.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"doc\",\n  \"id\": \"index\",\n  \"label\": \"Index\",\n  \"specs\": [\"billing-api\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Hubs Request Logger Plugin in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the Azure Event Hubs Request Logger Plugin in the Zuplo runtime. It includes defining a custom LogEntry interface, adding the plugin to the runtime, and configuring connection settings and log entry generation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/plugin-azure-event-hubs.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// The interface that describes the rows\n// in the output\ninterface LogEntry {\n  timestamp: string;\n  method: string;\n  url: string;\n  status: number;\n  statusText: string;\n  sub: string | null;\n  contentLength: string | null;\n}\n\n// Add the plugin\nruntime.addPlugin(\n  new AzureEventHubsRequestLoggerPlugin<LogEntry>({\n    connectionString: environment.AZURE_EVENT_HUBS_CONNECTION_STRING,\n    // e.g. \"Endpoint=sb://your-namespace.servicebus.windows.net/;SharedAccessKeyName=key-name;SharedAccessKey=YOUR_SHARED_ACCESS_KEY\"\n    batchPeriodSeconds: 1,\n    entityPath: \"your-event-hub-name\",\n    generateLogEntry: (response: Response, request: ZuploRequest) => ({\n      // You can customize the log entry here by adding new fields\n      timestamp: new Date().toISOString(),\n      url: request.url,\n      method: request.method,\n      status: response.status,\n      statusText: response.statusText,\n      sub: request.user?.sub ?? null,\n      contentLength: request.headers.get(\"content-length\"),\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CNAME Record for Custom Domain\nDESCRIPTION: Example CNAME record configuration for setting up a custom domain with Zuplo. Shows the format for pointing a subdomain to Zuplo's CNAME endpoint.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-domains.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nCNAME   api.example.com                       cname.zuplo.app\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Writing to ZoneCache with Error Handling in TypeScript\nDESCRIPTION: Demonstrates an asynchronous write operation to the ZoneCache without awaiting the result, but with error handling. This approach can be used when immediate completion of the write operation is not required.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zone-cache.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncache.put(\"key\", data, 60).catch((err) => context.log.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Akamai API Security Plugin in Zuplo Runtime\nDESCRIPTION: Demonstrates how to initialize and configure the Akamai API Security plugin in the Zuplo runtime environment. The configuration includes setting up the hostname, index, security key, protection features, and optional request filtering.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/plugin-akamai-api-security.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { environment, AkamaiApiSecurityPlugin } from \"@zuplo/runtime\";\n\nruntime.addPlugin(\n  new AkamaiApiSecurityPlugin({\n    hostname: \"your-akamai-api-security-hostname.com\",\n    // index, provided by Akamai API Security\n    index: 1,\n    // Key provided by Akamai API Security\n    key: environment.AKAMAI_API_SECURITY_KEY,\n    // Enable the active prevention/protection feature\n    enableProtection: true,\n    // optional filter function to exclude requests\n    shouldLog: async (request: ZuploRequest, context: ZuploContext) => {\n      if (request.headers.get(\"content-type\") !== \"application/json\") {\n        return false;\n      }\n\n      return true;\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: CAA Records for Domain Validation\nDESCRIPTION: Required CAA record configuration for resolving domain validation errors with Google Trust Services.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-domains.md#2025-04-08_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n0 issue \"pki.goog; cansignhttpexchanges=yes\"\n0 issuewild \"pki.goog; cansignhttpexchanges=yes\"\n```\n\n----------------------------------------\n\nTITLE: Referencing External JSON Schemas in OpenAPI\nDESCRIPTION: Example of how to reference an external JSON schema file stored in the schemas folder to define a 400 error response for schema validation errors.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"400\": {\n   \"description\": \"Schema validation error\",\n      \"content\": {\n         \"application/json\": {\n            \"schema\": {\n            \"$ref\": \"../schemas/schema-validation-error.json\"\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataDog Metrics Plugin in Zuplo\nDESCRIPTION: Implementation of DataDog metrics plugin in Zuplo runtime configuration. Allows setting API key, custom tags, metric types, and inclusion parameters for monitoring API performance.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  DataDogMetricsPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new DataDogMetricsPlugin({\n      apiKey: environment.DATADOG_API_KEY,\n      // You can add what tags you want.\n      // See https://docs.datadoghq.com/tagging/#defining-tags for more information\n      tags: [\n        \"app:my-service-name\",\n        `environment:${environment.ENVIRONMENT ?? \"DEVELOPMENT\"}`,\n      ],\n      metrics: {\n        latency: true,\n        requestContentLength: true,\n        responseContentLength: true,\n      },\n      // You can also choose to add additional tags to include in the metrics.\n      // Be mindful of what other information you wish to include since it will incur costs on your cardinality\n      include: {\n        country: false,\n        httpMethod: false,\n        statusCode: false,\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Form Action to Pass Session Creation URL\nDESCRIPTION: This code updates the form action to forward the session-create-url parameter to the sign-in route handler. It conditionally appends the parameter only if it exists in the searchParams object.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<form\n  className=\"flex-1 flex flex-col w-full justify-center gap-2 text-foreground\"\n  action={`/auth/sign-in${\n    typeof searchParams?.[\"session-create-url\"] === \"string\"\n      ? `?session-create-url=${encodeURIComponent(\n          searchParams[\"session-create-url\"]\n        )}`\n      : \"\"\n  }`}\n  method=\"post\"\n>\n```\n\n----------------------------------------\n\nTITLE: Writing Basic API Tests with Zuplo CLI\nDESCRIPTION: Example of a simple test using the Zuplo test framework with chai assertions. This test makes a request to an API endpoint and validates the response body, showing the basic pattern for creating API tests with the Zuplo CLI.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, it, TestHelper } from \"@zuplo/test\";\nimport { expect } from \"chai\";\n\ndescribe(\"API\", () => {\n  it(\"should have a body\", async () => {\n    const response = await fetch(TestHelper.TEST_URL);\n    const result = await response.text();\n    expect(result).to.equal(JSON.stringify(\"What zup?\"));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Handler for API Gateway Compatibility\nDESCRIPTION: Configuration for AWS Lambda handler that enables API Gateway compatibility. This setup uses Lambda proxy integration with payload format version 2.0 and converts resource paths to AWS style for better compatibility with existing Lambda functions.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/aws-lambda.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"handler\": {\n    \"export\": \"awsLambdaHandler\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"accessKeyId\": \"$env(AWS_ACCESS_KEY_ID)\",\n      \"functionName\": \"demo-post-1\",\n      \"region\": \"us-east-2\",\n      \"secretAccessKey\": \"$env(AWS_SECURE_ACCESS_KEY)\",\n      \"useLambdaProxyIntegration\": true,\n      \"payloadFormatVersion\": \"2.0\",\n      \"useAwsResourcePathStyle\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sign Up Button to Forward Session Creation URL\nDESCRIPTION: This code modifies the sign-up button to forward the session-create-url parameter to the sign-up endpoint. It uses URL encoding to ensure the parameter is properly formatted when passed in the query string.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<button\n  formAction={`/auth/sign-up${\n    typeof searchParams?.[\"session-create-url\"] === \"string\"\n      ? `?session-create-url=${encodeURIComponent(\n          searchParams[\"session-create-url\"],\n        )}`\n      : \"\"\n  }`}\n  className=\"border border-gray-700 rounded px-4 py-2 text-black dark:text-white mb-2\"\n>\n  Sign Up\n</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing New Relic Logging Plugin in Zuplo Runtime\nDESCRIPTION: Implementation of New Relic logging plugin in a Zuplo project's runtime configuration. The code demonstrates how to initialize the plugin with custom URL, API key, service name, and additional custom fields.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-new-relic.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  NewRelicLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new NewRelicLoggingPlugin({\n      // Optional, defaults to \"https://log-api.newrelic.com/log/v1\"\n      url: \"https://log-api.newrelic.com/log/v1\",\n      apiKey: environment.NEW_RELIC_API_KEY,\n      service: \"MyAPI\", // Optional, defaults to \"Zuplo\"\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme-Specific CSS Variables\nDESCRIPTION: Example of setting different background colors for dark and light themes using CSS variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-theme.md#2025-04-08_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dark {\n  --background-primary: black;\n}\n\n.light {\n  --background-primary: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Request User Object in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to log the request.user object, which contains the consumer name and metadata after successful API Key authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.log.debug(request.user);\n// Outputs:\n// {\n//   sub: \"my-consumer\",\n//   data: {\n//     companyId: 12345,\n//     plan: \"gold\"\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple API Key Authentication Policy in TypeScript\nDESCRIPTION: Creates a basic authentication policy that validates requests by checking for the presence and value of an 'api-key' header. It returns a 401 response for invalid requests or passes the request through if authentication succeeds.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// my-first-policy.ts\nimport { ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function(\n\trequest: ZuploRequest,\n\tcontext: ZuploContext\n\toptions: any,\n\tpolicyName: string) {\n  \tconst apiKeyHeader = request.headers.get(\"api-key\");\n\tif (!apiKeyHeader) {\n\t\treturn new Response(`No api-key header`, { status: 401});\n\t}\n\tif (apiKeyHeader !== `magic-password`) {\n\t\treturn new Response(`Incorrect API Key`, { status: 401});\n\t}\n\t// TODO - lets set the user property on the request for\n\t// downstream consumption\n\treturn request;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Class in HTML Body\nDESCRIPTION: Example showing how to set the theme class on the body element to control light/dark mode.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-theme.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"light\">\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing Module with Relative Path (Typescript)\nDESCRIPTION: This snippet demonstrates how to import a module using a relative path in Typescript. It shows the correct syntax for importing a function from a module located in the project's directory structure.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tsconfig.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { myFunction } from \"./modules/my-module\";\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File for Zuplo Local Development\nDESCRIPTION: This snippet demonstrates the format for creating a .env file to store environment variables for local Zuplo API Gateway development. Each line contains a key-value pair separated by an equals sign.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-env-variables.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nKEY1=VALUE1\nKEY2=VALUE2\n```\n\n----------------------------------------\n\nTITLE: Request Handler Using User Context from Policy\nDESCRIPTION: Demonstrates how a request handler can access the user information set by an authentication policy, showing the end-to-end flow of user authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest) {\n  // let's return the user sub to the client as proof it's working\n  return `User sub ${request.user.sub}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in URL Handlers\nDESCRIPTION: Shows the syntax for using environment variables in URL Rewrite and URL Forward handlers using JavaScript string interpolation. This allows dynamic URL construction based on environment-specific configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/environment-variables.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://${env.API_URL}/path/to/call\n```\n\n----------------------------------------\n\nTITLE: Deleting from ZoneCache in TypeScript\nDESCRIPTION: Illustrates how to delete data from the ZoneCache using a specific key. This operation removes the data associated with the given key from the cache.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zone-cache.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait cache.delete(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Handling API Requests through Tunnels in TypeScript\nDESCRIPTION: A handler function that demonstrates how to make requests to internal services through a secure tunnel using the service:// protocol. The function fetches data from an internal service and handles the response appropriately.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-setup.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const response = await fetch(\"service://my-awesome-service/hello-world\");\n  if (response.status > 399) {\n    return \"It didn't work. :(\";\n  } else {\n    return response;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Production\nDESCRIPTION: Configuration text showing how to set the BASE_SERVICE_URL environment variable for a production environment to point to the production service tunnel.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-setup.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBASE_SERVICE_URL=service://my-awesome-service-prod\n```\n\n----------------------------------------\n\nTITLE: Efficient Header Addition in Outbound Policy\nDESCRIPTION: This TypeScript snippet shows an efficient way to add headers to the response without reading the body stream, which is useful when only header modification is needed.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: any,\n  policyName: string,\n) {\n  // create a new response\n  const newResponse = new Response(response.body, {\n    status: response.status,\n    headers: response.headers,\n  });\n\n  // let's add an additional header as an example, for good measure\n  newResponse.headers.set(\"color\", \"yellow\");\n\n  return newResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port Numbers for Zuplo Server and Route Designer\nDESCRIPTION: Command to change the default port numbers for the Zuplo local server (default 9000) and route designer (default 9100) when running in development mode.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-troubleshooting.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx zuplo dev --port <port number> --editor-port <editor port number>\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Plugin in TypeScript\nDESCRIPTION: Demonstrates how to configure the Azure Blob Plugin in the runtime extensions file. Shows interface definition for log entries and plugin setup with SAS URL authentication. Includes custom field mapping from request/response data.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/plugin-azure-blob.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// The interface that describes the rows\n// in the output\ninterface AzureBlobLogEntry {\n  timestamp: string;\n  method: string;\n  url: string;\n  status: number;\n  statusText: string;\n  sub: string | null;\n  contentLength: string | null;\n}\n\n// Add the plugin - use a SAS URL\nruntime.addPlugin(\n  new AzureBlobPlugin<AzureBlobLogEntry>({\n    sasUrl:\n      \"https://YOUR_ACCOUNT.blob.core.windows.net/YOUR_CONTAINER?sv=2022-11-02&ss=b&srt=co&sp=wactfx&se=2045-11-17T13:50:53Z&st=2024-11-17T05:50:53Z&spr=https&sig=YOUR_SIG\",\n    batchPeriodSeconds: 1,\n    generateLogEntry: (\n      response: Response,\n      request: ZuploRequest,\n      context: ZuploContext,\n    ) => ({\n      // You can customize the log entry here by adding new fields\n      timestamp: new Date().toISOString(),\n      url: request.url,\n      method: request.method,\n      status: response.status,\n      statusText: response.statusText,\n      sub: request.user?.sub ?? null,\n      contentLength: request.headers.get(\"content-length\"),\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing HMAC signature generation in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HMAC signature using the Web Crypto API. The code includes a sign function that takes a key and value, creates an HMAC using SHA-256, and returns the signature as a hexadecimal string. It's designed for use with Zuplo policies requiring HMAC authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/hmac-auth-inbound/doc.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await sign(\"my data\", environment.MY_SECRET);\n\nasync function sign(\n  key: string | ArrayBuffer,\n  val: string,\n): Promise<ArrayBuffer> {\n  const encoder = new TextEncoder();\n  const cryptoKey = await crypto.subtle.importKey(\n    \"raw\",\n    typeof key === \"string\" ? encoder.encode(key) : key,\n    { name: \"HMAC\", hash: { name: \"SHA-256\" } },\n    false,\n    [\"sign\"],\n  );\n  const token = await crypto.subtle.sign(\n    \"HMAC\",\n    cryptoKey,\n    encoder.encode(val),\n  );\n  return Array.prototype.map\n    .call(new Uint8Array(token), function (x) {\n      return (\"0\" + x.toString(16)).slice(-2);\n    })\n    .join(\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Log Context Configuration\nDESCRIPTION: Deprecated method of setting tags and fields for DataDog logging using context.custom properties that should be migrated to the plugin system.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/compatibility-dates.md#2025-04-08_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ncontext.custom[\"__ddtags\"]; // Sets tags\ncontext.custom[\"__ddattr\"]; // Sets fields\n```\n\n----------------------------------------\n\nTITLE: Creating a Zuplo API Project using NPX\nDESCRIPTION: This command initializes a new Zuplo API project locally. It prompts the user to enter a project name and options for the project.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/source-control.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zuplo-api@latest\n```\n\n----------------------------------------\n\nTITLE: Parsing Parameters in Dynamic Paths with JSON (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure of the 'params' object on the 'request' when using dynamic path matching. It shows how path segments are mapped to parameter names.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/advanced-path-matching.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productId\": \"pizza\",\n  \"size\": \"small\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastly Auth Inbound Policy in Zuplo\nDESCRIPTION: This TypeScript code implements the custom inbound policy for verifying Fastly's signed headers in Zuplo. It checks the timestamp, verifies the HMAC signature, and authorizes or rejects the request accordingly.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpProblems, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\ninterface PolicyOptions {\n  secret: string;\n  headerName: string;\n  requestOffset?: number;\n}\n\nexport default async function (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: PolicyOptions,\n  policyName: string,\n) {\n  // Validate the policy options\n  if (typeof options.secret !== \"string\") {\n    throw new Error(\n      `The option 'secret' on policy '${policyName}' must be a string. Received ${typeof options.secret}.`,\n    );\n  }\n  if (typeof options.headerName !== \"string\") {\n    throw new Error(\n      `The option 'headerName' on policy '${policyName}' must be a string. Received ${typeof options.headerName}.`,\n    );\n  }\n\n  // Get the authorization header\n  const headerValue = request.headers.get(options.headerName);\n\n  // No auth header, unauthorized\n  if (!headerValue) {\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  const encoder = new TextEncoder();\n\n  // Split the header into the parts\n  const [timestamp, datacenter, hash] = headerValue.split(\",\");\n\n  context.log.info({ timestamp, datacenter, hash });\n\n  // Convert the timestamp to milliseconds\n  const timestampInMilliseconds = parseInt(timestamp) * 1000;\n  const currentTimeInMilliseconds = new Date().getTime();\n  const differenceInSeconds =\n    Math.abs(currentTimeInMilliseconds - timestampInMilliseconds) / 1000;\n  const offset = options.requestOffset ?? 30;\n  if (differenceInSeconds > offset) {\n    context.log.error(\"The request is old than 30 seconds.\");\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  // Convert the hex HMAC to an ArrayBuffer\n  const signature = new Uint8Array(\n    hash\n      .slice(2)\n      .match(/.{1,2}/g)\n      .map((byte) => parseInt(byte, 16)),\n  );\n\n  // Get the hash value and encode it\n  const hashValue = `${timestamp},${datacenter}`;\n  const hashData = encoder.encode(hashValue);\n\n  // Create the secret from the policy options\n  const encodedSecret = encoder.encode(options.secret);\n  const key = await crypto.subtle.importKey(\n    \"raw\",\n    encodedSecret,\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"verify\"],\n  );\n\n  // Verify that the data\n  const verified = await crypto.subtle.verify(\"HMAC\", key, signature, hashData);\n\n  // Check if the data is verified, if not return unauthorized\n  if (!verified) {\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  // Request is authorized, continue\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard Route with URL Pattern\nDESCRIPTION: Demonstrates how to create a wildcard route using URL Pattern mode with a RegEx pattern. This JSON snippet shows a catch-all route for any path starting with '/users/'.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/routing.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/users/(.*)\": {\n      \"get\": {\n        \"operationId\": \"get-user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consumer Creation Response Example\nDESCRIPTION: Example JSON response showing the created consumer object with its associated API key\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"csmr_sikZcE754kJu17X8yahPFO8J\",\n  \"name\": \"my-consumer\",\n  \"description\": \"My Consumer\",\n  \"createdOn\": \"2023-02-03T21:33:17.067Z\",\n  \"updatedOn\": \"2023-02-03T21:33:17.067Z\",\n  \"tags\": {\n    \"externalId\": \"acct_12345\"\n  },\n  \"metadata\": {\n    \"orgId\": 1234,\n    \"plan\": \"gold\"\n  },\n  \"apiKeys\": [\n    {\n      \"id\": \"key_AM7eAiR0BiaXTam951XmC9kK\",\n      \"createdOn\": \"2023-06-19T17:32:17.737Z\",\n      \"updatedOn\": \"2023-06-19T17:32:17.737Z\",\n      \"expiresOn\": null,\n      \"key\": \"zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Zuplo project from routes.json to OpenAPI using CLI\nDESCRIPTION: This command uses npx to run the Zuplo conversion tool, which generates new routes.oas.json and policies.json files based on the existing routes.json file. It should be executed in the root Zuplo folder.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/routes-json-deprecation-for-openapi.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zuplo@latest convert\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Query String Values with URL SearchParams\nDESCRIPTION: Demonstrates how to handle query strings with multiple values for the same key (e.g., '?foo=bar&foo=wibble') using URL and searchParams instead of the request.query helper property.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-request.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = new URL(request.url);\nconst foo = url.searchParams.get(\"foo\");\n// foo will be an array here\n```\n\n----------------------------------------\n\nTITLE: Implementing Plan-based Authorization in TypeScript\nDESCRIPTION: This TypeScript function checks the user's plan from the request.user.data object and returns an appropriate response based on whether they have the 'gold' plan.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function (request: ZuploRequest, context: ZuploContext) {\n  if (request.user?.data.plan !== \"gold\") {\n    return new Response(\"You need to upgrade your plan\", {\n      status: 403\n    });\n  }\n  return new Response(\"you have the gold plan!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Response Type Handling\nDESCRIPTION: Demonstrates how to properly handle different response types when using invokeInboundPolicy, including Response and Request objects.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-context.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await context.invokeInboundPolicy(\"my-policy\", request);\n\nif (result instanceof Response) {\n  // if you want to do something special if type is Response, maybe log for example\n  context.log.warn(\n    `My policy wanted to short circuit with a status code of '${result.status}'`,\n  );\n}\n\n// You almost certainly want to return the result - whether a Response or Request to ensure\n// Returning something else is an advanced use case and care needs to be taken not to break\n// downstream processing.\nreturn result;\n```\n\n----------------------------------------\n\nTITLE: Creating New Zuplo Project using NPM\nDESCRIPTION: Command to create a new Zuplo API project using NPM create command. This initializes a new project with the latest Zuplo API template.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development.mdx#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create zuplo-api@latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Details with MonetizationInboundPolicy in TypeScript\nDESCRIPTION: This policy function accesses a user's subscription details via the MonetizationInboundPolicy.getSubscription method. It logs the subscription information and returns the original request. This functionality is only available after the MonetizationInboundPolicy has executed in the pipeline.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-subscription.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MonetizationInboundPolicy,\n  ZuploContext,\n  ZuploRequest,\n} from \"@zuplo/runtime\";\n\nexport default async function policy(\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: never,\n  policyName: string,\n) {\n  const subscription = MonetizationInboundPolicy.getSubscription(context);\n  context.log.info(subscription);\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Sharing Example\nDESCRIPTION: Example demonstrating incorrect way to share data using global variables\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet currentRequestId: string | undefined;\n\nexport function myFirstPolicy(request: ZuploRequest, context: ZuploContext) {\n  currentRequestId = context.requestId;\n  context.log.info(`The current requestId is: ${currentRequestId}`);\n}\n\nexport function mySecondPolicy(request: ZuploRequest, context: ZuploContext) {\n  currentRequestId = context.requestId;\n  context.log.info(`The current requestId is: ${currentRequestId}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Request Hook in TypeScript\nDESCRIPTION: Implementation of a request hook that runs before plugins or handlers process the request.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addRequestHook((request, context) => {\n    // Code here\n\n    // Can return a request or a response. If a response is returned the\n    // pipeline stops and the response is returned.\n    return request;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Correct ContextData Usage Example\nDESCRIPTION: Example showing correct way to share data using ContextData static methods\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextData, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport function myFirstPolicy(request: ZuploRequest, context: ZuploContext) {\n  ContextData.set(context, \"currentRequestId\", context.requestId);\n\n  const currentRequestId = ContextData.get(context, \"currentRequestId\");\n  context.log.info(`The current requestId is: ${currentRequestId}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Common HttpProblems Usage Examples\nDESCRIPTION: Examples of various HTTP status code responses supported by the HttpProblems helper.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// General errors\nHttpProblems.badRequest(request, context);\nHttpProblems.internalServerError(request, context);\n\n// Authorization errors\nHttpProblems.unauthorized(request, context);\nHttpProblems.forbidden(request, context);\n\n// Success codes\nHttpProblems.ok(request, context);\nHttpProblems.created(request, context);\n```\n\n----------------------------------------\n\nTITLE: Setting Data with ContextData Static Method\nDESCRIPTION: Example of using ContextData.set() static method to store request-specific data\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nContextData.set(context, \"my-data\", { prop1: \"hello world\" });\n```\n\n----------------------------------------\n\nTITLE: Rolling Consumer API Keys\nDESCRIPTION: Updates expiration dates for existing keys and creates a new API key for a consumer\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport ORG_ID=1234\nexport CONSUMER_NAME=my-consumer\ncurl \\\n  https://dev.zuplo.com/v1/accounts/$ACCOUNT_NAME/key-buckets/$BUCKET_NAME/consumers/$CONSUMER_NAME/roll-key?tag.orgId=$ORG_ID \\\n  --request POST \\\n  --header \"Authorization: Bearer $API_KEY\"\n  --data '{\"expiresOn\":\"2023-04-18\"}'\n```\n\n----------------------------------------\n\nTITLE: Host Header Replacement Pattern\nDESCRIPTION: Replacement pattern for the host header in Akamai CDN configuration. Combines captured subdomain with the Zuplo account domain.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/akamai/cdn.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$1.your-account.zuplo.work\n```\n\n----------------------------------------\n\nTITLE: Creating a Utility Module in TypeScript\nDESCRIPTION: This snippet shows how to create a simple utility module with an exported function that increments a number by 1.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/reusing-code.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//util.ts\nexport function increment(n: number) {\n  return n + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Problem Response Values\nDESCRIPTION: Shows how to customize the error response by overriding default values like detail message.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nHttpProblems.badRequest(request, context, {\n  detail: \"Something was invalid about the request\",\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing BackgroundDispatcher Instance\nDESCRIPTION: Example showing how to construct a BackgroundDispatcher instance with required options. The msDelay parameter must be a non-zero number and affects batch processing frequency.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/background-dispatcher.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst backgroundDispatcher = new BackgroundDispatcher<TestEntry>(\n  dispatchFunction,\n  { msDelay: 100 },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Metrics Plugin in Zuplo\nDESCRIPTION: Implementation of New Relic metrics plugin in Zuplo runtime configuration. Sets up API key, attributes, and metric types for monitoring API performance.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  NewRelicMetricsPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new NewRelicMetricsPlugin({\n      apiKey: environment.NEW_RELIC_API_KEY,\n      attributes: {\n        service: \"my-service-name\",\n        environment: environment.ENVIRONMENT ?? \"DEVELOPMENT\",\n      },\n      metrics: {\n        latency: true,\n        requestContentLength: true,\n        responseContentLength: true,\n      },\n      include: {\n        country: false,\n        httpMethod: false,\n        statusCode: false,\n        path: false,\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a Simple Cached Response with Cache-Control in TypeScript\nDESCRIPTION: This example shows how to store a simple cached response with a Cache-Control header using TypeScript and the Cache API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = new Request(`https://echo.zuplo.io`);\nconst cache = await caches.open(\"MY_CACHE\");\nconst response = await fetch(request);\n\n// Create a new response and set new headers\nconst cachedResponse = new Response(response, {\n  headers: {\n    \"Cache-Control\": \"max-age=604800\",\n  },\n});\n\n// Add the response to the cache\nawait cache.put(request, cachedResponse);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Request Handler in Zuplo\nDESCRIPTION: A simple implementation of a request handler that returns a string response. This example shows the default template when adding a new module in Zuplo.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/custom-handler.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  return \"What zup?\";\n}\n```\n\n----------------------------------------\n\nTITLE: Linking API to Components in Systems Structure in YAML\nDESCRIPTION: YAML configuration that defines a system structure and links a component to a previously defined Zuplo API. This establishes the relationship between systems, components, and APIs in Backstage.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: System\nmetadata:\n  name: examples\nspec:\n  owner: guests\n---\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: example-website\nspec:\n  type: website\n  lifecycle: experimental\n  owner: guests\n  system: examples\n  providesApis: [<YOUR_API_NAME>] # This must match the metadata.name from step 1\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Response with Headers in Zuplo\nDESCRIPTION: Example of creating a custom Response object to have more control over the response, including setting status codes and custom headers like content-type.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/custom-handler.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const response = new Response(`<html><body>What zup?</body></html>`, {\n    status: 200,\n    headers: {\n      \"content-type\": \"text/html\",\n    },\n  });\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Performance Logging with OnResponseSendingFinal Hook in TypeScript\nDESCRIPTION: This example demonstrates a simple plugin that logs the time taken for a request to complete using the OnResponseSendingFinal hook. It records the start time when the policy begins and calculates the elapsed time just before the response is sent.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/hooks.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport async function pluginWithHook(\n  request: ZuploRequest,\n  context: ZuploContext,\n  policyName: string,\n) {\n  const start = Date.now();\n  async (response, latestRequest, context) => {\n    const end = Date.now();\n    const delta = end - start;\n    context.log.debug(`request took ${delta}ms`);\n  });\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: URL Forward Handler Route Configuration\nDESCRIPTION: JSON configuration example for setting up URL Forward handler in routes.oas.json file. Shows the complete route structure with handler configuration and options.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-forward.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/forward-test\": {\n    \"x-zuplo-path\": {\n      \"pathMode\": \"open-api\"\n    },\n    \"get\": {\n      \"summary\": \"Testing forward handler\",\n      \"x-zuplo-route\": {\n        \"corsPolicy\": \"none\",\n        \"handler\": {\n          \"export\": \"urlForwardHandler\",\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"options\": {\n            \"baseUrl\": \"${env.BASE_URL}\"\n          }\n        },\n        \"policies\": {\n          \"inbound\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing JSON Log Format for Zuplo API Logs\nDESCRIPTION: This snippet shows the format of exported log files from Zuplo. Each line contains a JSON object representing a single log entry with information like client IP, request host, request method, and other API request details. The logs are compressed as gzip files before being exported to the selected storage service.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-export.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n{\"ClientIP\":\"2a16:95c0:3300::103\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"PO...}\n{\"ClientIP\":\"35.243.129.13\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Cl...}\n{\"ClientIP\":\"11.156.176.11\",\"ClientRequestHost\":\"api.example.com,\"ClientRequestMethod\":\"GET\",\"Cli...}\n{\"ClientIP\":\"35.159.80.14\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Cli...}\n{\"ClientIP\":\"2a06:18c0:3200::103\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"PO...}\n{\"ClientIP\":\"171.105.191.118\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",...}\n{\"ClientIP\":\"171.105.191.118\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",...}\n{\"ClientIP\":\"104.187.31.241\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"C...}\n{\"ClientIP\":\"2a06:92c0:3300::103\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"PO...}\n{\"ClientIP\":\"35.192.218.61\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Cl...}\n{\"ClientIP\":\"2a01:98c0:3300::103\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"PO...}\n{\"ClientIP\":\"35.228.4.7\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Clien...}\n{\"ClientIP\":\"185.135.171.21\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"C...}\n{\"ClientIP\":\"35.221.12.249\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Cl...}\n{\"ClientIP\":\"35.199.23.186\",\"ClientRequestHost\":\"api.example.com\",\"ClientRequestMethod\":\"GET\",\"Cl...}\n```\n\n----------------------------------------\n\nTITLE: Rewritten URL Example in Zuplo URL Rewrite Handler\nDESCRIPTION: This snippet shows the resulting URL after a rewrite that combines a BASE_PATH environment variable (https://example.com) with a request path (/foo/bar).\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/environments.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nhttps://example.com/foo/bar\n```\n\n----------------------------------------\n\nTITLE: Basic URL Rewrite Pattern Example\nDESCRIPTION: Example showing how to use string interpolation in URL rewrite patterns to include method and parameter values.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-rewrite.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhttps://echo.zuplo.io/${method}/${params.productId}\n```\n\n----------------------------------------\n\nTITLE: Using Shared ContextData Instance\nDESCRIPTION: Example showing how to use a shared ContextData instance in another module\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { myData } from \"./my-module\";\nconst data = myData.get(context);\nmyData.set(context, data);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Handler in routes.oas.json\nDESCRIPTION: This JSON snippet demonstrates how to configure a Redirect Handler directly in the routes.oas.json file. The example shows a route that redirects requests from '/redirect-test' to '/docs' using Zuplo's redirectHandler module.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/redirect.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/redirect-test\": {\n    \"x-zuplo-path\": {\n      \"pathMode\": \"open-api\"\n    },\n    \"get\": {\n      \"summary\": \"Testing rewrite handler\",\n      \"x-zuplo-route\": {\n        \"corsPolicy\": \"none\",\n        \"handler\": {\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"export\": \"redirectHandler\",\n          \"options\": {\n            \"location\": \"/docs\"\n          }\n        }\n      },\n      \"policies\": {\n        \"inbound\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer Portal Authentication Settings in JSON\nDESCRIPTION: This JSON snippet shows the structure for configuring authentication settings in the dev-portal.json file. It includes settings for enabling authentication, specifying the provider as Auth0, and setting the issuer, client ID, and audience.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-auth0-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableAuthentication\": true,\n  \"provider\": \"auth0\",\n  \"issuer\": \"https://my-company.us.auth0.com/\",\n  \"clientId\": \"your-client-id\",\n  \"audience\": \"https://api.my-domain.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Shared Secret on a Node.js Backend\nDESCRIPTION: Express.js middleware example that validates incoming requests by checking if the 'backend-secret' header matches the expected environment variable value. Returns a 401 Unauthorized response if the secret is invalid.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/securing-backend-shared-secret.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\n\napp.use((req, res, next) => {\n  if (req.headers[\"backend-secret\"] !== process.env.BACKEND_SECRET) {\n    return res.status(401).send(\"Unauthorized\");\n  }\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Handler in routes.oas.json\nDESCRIPTION: JSON configuration example for setting up a WebSocket handler in Zuplo. It shows how to define a route with the WebSocket handler, including the path, handler export, and rewrite pattern pointing to the backend WebSocket endpoint.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/websocket-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"/my-websocket\": {\n  \"x-zuplo-path\": {\n  \"pathMode\": \"open-api\"\n  },\n  \"get\": {\n  \"summary\": \"Zuplo websocket route to internal API\",\n  \"description\": \"Zuplo websocket route to internal API\",\n  \"x-zuplo-route\": {\n    \"corsPolicy\": \"none\",\n    \"handler\": {\n      \"export\": \"webSocketHandler\",\n      \"module\": \"$import(@zuplo/runtime)\",\n      \"options\": {\n        \"rewritePattern\": \"https://myservice.com/websocket\",\n      }\n    },\n    \"policies\": {\n      \"inbound\": []\n    }\n  },\n  \"operationId\": \"8115f88e-b561-4248-b317-0e256e9d6b6a\"\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: CAA Record Configuration for SSL Certificates\nDESCRIPTION: DNS CAA record configurations for authorizing certificate authorities. Shows options for both Google Trust Services and Let's Encrypt.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-domains.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nCAA 0 issue \"pki.goog\"\nCAA 0 issue \"letsencrypt.org\"\n```\n\n----------------------------------------\n\nTITLE: Format for AWS Lambda Response with Compressed Body Content\nDESCRIPTION: Example of an AWS Lambda response event that includes gzip compressed body content. The bodyEncoding property instructs Zuplo to decompress the base64 encoded body using the specified compression algorithm.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/aws-lambda.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"isBase64Encoded\": true,\n  \"bodyEncoding\": \"gzip\",\n  \"body\": \"COMPRESSSED AND BASE64 ENCODED BODY\",\n  \"...\": \"other properties...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logging Policy in Zuplo with JSON\nDESCRIPTION: JSON configuration for the custom logging policy that specifies how to reference the custom code module and provides the endpoint option for the external logging service. This configuration connects the TypeScript implementation to the Zuplo policy system.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-logging-example.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"custom-logging-policy\",\n  \"policyType\": \"custom-code-inbound\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/custom-logging)\",\n    \"options\": {\n      \"endpoint\": \"https://YOUR_MOCKIN_URL_HERE\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Problem Response with Additional Properties\nDESCRIPTION: Demonstrates how to include custom properties in the error response for providing extra context.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nHttpProblems.badRequest(request, context, {\n  title: \"Failed to create widget. Over quota.\",\n  detail: \"The account is over its quota for creating widgets. See the 'quota' field for details\",\n  quota: {\n    currentlyUsed: 200,\n    maxAllowed: 200,\n    remaining: 0,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: DNS CNAME Record for Domain Validation\nDESCRIPTION: Example CNAME record format used for domain validation and resolution in Zuplo.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-domains.md#2025-04-08_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nCNAME   api.example.com     cname.zuplo.app\n```\n\n----------------------------------------\n\nTITLE: Example Loki Log Format in JSON\nDESCRIPTION: This snippet illustrates the structure of logs sent from Zuplo to Loki. It includes stream information, log levels, environment details, and individual log entries with timestamps and tracing information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-loki.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"streams\": [\n    {\n      \"stream\": {\n        \"job\": \"zuplo\",\n        \"level\": \"debug\",\n        \"environmentType\": \"local\",\n        \"environmentStage\": \"local\"\n      },\n      \"values\": [\n        [\n          \"1712254635666000000\",\n          \"Request received '/hello-world'\",\n          {\n            \"requestId\": \"9b9cd3fd-b0fa-455f-b894-4a5c2c9d131b\",\n            \"rayId\": \"1235567\",\n            \"atomicCounter\": 123435346\n          }\n        ],\n        [\n          \"1712254635666000000\",\n          \"{\\\"method\\\":\\\"GET\\\",\\\"url\\\":\\\"/hello-world\\\",\\\"hostname\\\":\\\"localhost\\\",\\\"route\\\":\\\"/hello-world\\\"}\",\n          {\n            \"requestId\": \"9b9cd3fd-b0fa-455f-b894-4a5c2c9d131b\",\n            \"rayId\": \"1235567\",\n            \"atomicCounter\": 123435347\n          }\n        ]\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Error Response Format\nDESCRIPTION: Example of the JSON response format returned by HttpProblems helper, including trace information for debugging.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"https://httpproblems.com/http-status/401\",\n  \"title\": \"Unauthorized\",\n  \"status\": 401,\n  \"instance\": \"/test\",\n  \"trace\": {\n    \"timestamp\": \"2023-07-16T17:13:31.352Z\",\n    \"requestId\": \"28f2d802-8e27-49c8-970d-39d90ef0ac61\",\n    \"buildId\": \"eb9ef87d-b55d-446e-9fdd-13c209c01b95\",\n    \"rayId\": \"7e7be05256e53b60-IAD\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Module in a Zuplo Request Handler\nDESCRIPTION: This example demonstrates how to import a function from a utility module and use it within a Zuplo request handler. The handler imports the increment function and uses it to process the request.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/reusing-code.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\nimport { increment } from \"./util\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  return increment(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Error Handling with HttpProblems\nDESCRIPTION: Demonstrates how to use HttpProblems helper to return a standardized unauthorized error response in a custom authentication policy.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest, HttpProblems } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const isAuthorized = checkAuthorization(request);\n\n  // Handle Error state\n  if (!isAuthorized) {\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynatrace Metrics Plugin in Zuplo\nDESCRIPTION: Implementation of Dynatrace metrics plugin in Zuplo runtime configuration. Configures URL, API token, dimensions, and metric types for monitoring API performance.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  DynatraceMetricsPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new DynatraceMetricsPlugin({\n      url: \"https://demo.live.dynatrace.com/api/v2/metrics/ingest\",\n      apiToken: environment.DYNATRACE_API_TOKEN,\n      dimensions: [\n        'app=\"my-service-name\"',\n        `environment=\"${environment.ENVIRONMENT ?? \"DEVELOPMENT\"}\"`,\n      ],\n      metrics: {\n        latency: true,\n        requestContentLength: true,\n        responseContentLength: true,\n      },\n      include: {\n        country: false,\n        method: false,\n        statusCode: false,\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUID with Web Crypto in TypeScript\nDESCRIPTION: This snippet shows how to generate a cryptographically secure v4 UUID using the randomUUID method from the Web Crypto API. This provides a simple way to create unique identifiers.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/web-crypto-apis.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst uuid = crypto.randomUUID();\n```\n\n----------------------------------------\n\nTITLE: Custom Headers in Problem Responses\nDESCRIPTION: Shows how to add custom headers to error responses with and without overriding default values.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/http-problems.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nHttpProblems.badRequest(\n  request,\n  context,\n  {\n    detail: \"Something was invalid about the request\",\n  },\n  {\n    \"my-error-code\": \"230\",\n  },\n);\n\nHttpProblems.badRequest(request, context, undefined, {\n  \"my-error-code\": \"230\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing AWS Lambda Handler Event in TypeScript\nDESCRIPTION: Example of extending AWS Lambda handler to customize the event path using route's custom property.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AwsLambdaHandlerExtensions,\n  RuntimeExtensions,\n  ContextData,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  AwsLambdaHandlerExtensions.addSendingAwsLambdaEventHook(\n    async (request, context, event: AwsLambdaEventV1) => {\n      const lambdaPath = ContextData.get(context, \"lambdaPath\");\n      event.path = lambdaPath ?? event.path;\n      return event;\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Response JSON in Zuplo API Key Authentication\nDESCRIPTION: This JSON snippet shows the standard 401 Unauthorized response returned when API Key authentication fails in a Zuplo route.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/step-3-add-api-key-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 401,\n  \"title\": \"Unauthorized\",\n  \"type\": \"https://httpproblems.com/http-status/401\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Callback Handler with Session Creation\nDESCRIPTION: This code handles the callback from Supabase Auth, exchanging the auth code for a session and creating a session on the Developer Portal. It processes the verification link from email confirmation and redirects the user accordingly.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { createRouteHandlerClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\n\nexport const dynamic = \"force-dynamic\";\n\nexport async function GET(request: Request) {\n  // The `/auth/callback` route is required for the server-side auth flow implemented\n  // by the Auth Helpers package. It exchanges an auth code for the user's session.\n  // https://supabase.com/docs/guides/auth/auth-helpers/nextjs#managing-sign-in-with-code-exchange\n  const requestUrl = new URL(request.url);\n  const code = requestUrl.searchParams.get(\"code\");\n  const sessionCreateUrl = requestUrl.searchParams.get(\"session-create-url\");\n\n  if (code) {\n    const supabase = createRouteHandlerClient({ cookies });\n    const sessionData = await supabase.auth.exchangeCodeForSession(code);\n    // Read the user data from the code exchange response\n    const { user } = sessionData?.data;\n    if (!user) {\n      return NextResponse.redirect(\n        `${requestUrl.origin}/login?error=Could not authenticate user`,\n        {\n          status: 301,\n        },\n      );\n    }\n\n    // Call the sessionCreateUrl to create an auth session on the Dev Portal\n    if (sessionCreateUrl) {\n      // The sessionCreateUrl will already point to the correct environment\n      // (ex. working copy, prod, staging), so no additional configuration\n      // is needed.\n      const ssoResponse = await fetch(sessionCreateUrl, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          authorization: `Bearer ${process.env.ZUPLO_API_KEY}`,\n        },\n        body: JSON.stringify({\n          email: user.email,\n          name: user.user_metadata?.full_name,\n          email_verified: user.confirmed_at != null,\n          sub: user.id,\n          picture: user.user_metadata?.avatar_url,\n        }),\n      });\n\n      if (!ssoResponse.ok) {\n        return NextResponse.redirect(\n          `${requestUrl.origin}/login?error=Could not authenticate user`,\n          {\n            status: 301,\n          },\n        );\n      }\n\n      // The session creation response will contain a redirectURI that your user\n      // must be redirected to in order to start their session\n      const { redirectUri } = await ssoResponse.json();\n      return NextResponse.redirect(redirectUri, {\n        status: 301,\n      });\n    }\n  }\n\n  // If the sign up doesn't originate from the Dev Portal, redirect back to the\n  // homepage\n  return NextResponse.redirect(requestUrl.origin);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Problem Response Format in JSON\nDESCRIPTION: Default error response format following the Problem Details for HTTP APIs standard.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"https://httpproblems.com/http-status/404\",\n  \"title\": \"Not Found\",\n  \"status\": 404,\n  \"detail\": \"Not Found\",\n  \"instance\": \"/not-a-path\",\n  \"trace\": {\n    \"timestamp\": \"2023-03-14T15:49:38.581Z\",\n    \"requestId\": \"05968b6d-6f82-4ae3-8e13-f92e0d0499c5\",\n    \"buildId\": \"a9b200a3-734c-413a-a1ae-ce171d53e5a7\",\n    \"rayId\": \"7a7daaf3bac2f325\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DynaTrace Logging Plugin in Zuplo Runtime\nDESCRIPTION: Code for setting up the DynaTrace logging plugin in a Zuplo project's runtime configuration. This requires setting the DynaTrace host URL, an API token with the 'events.ingest' scope, and allows adding custom fields to every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-dynatrace.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  DynaTraceLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new DynaTraceLoggingPlugin({\n      url: \"https://xxxxxxx.live.dynatrace.com/api/v2/logs/ingest\",\n      apiToken: environment.DYNATRACE_API_TOKEN,\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Zudoku Package in Bash\nDESCRIPTION: Command to update the Dev Portal's core dependencies by installing the latest version of the zudoku package in your project's /docs directory.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/updating.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zudoku@latest\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zuplo Tunnel in Bash\nDESCRIPTION: This snippet shows how to delete a specific tunnel using the 'zuplo tunnel delete' command with the tunnel ID. It assumes that the ZUPLO_API_KEY environment variable is set.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For brevity, the commands assume that you have exported your API key as an environment variable,\n# export ZUPLO_API_KEY=zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\n\nzuplo tunnel delete --tunnel-id tnl_xxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out Route Handler with Supabase in Next.js\nDESCRIPTION: This code implements a Next.js route handler for user sign-out functionality. It uses Supabase authentication to sign out the current user and redirects them to either a specified redirect_uri or the login page. The handler extracts the redirect URI from the query parameters and uses the Supabase client to manage the authentication state.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url);\n  // The Developer Portal will send a `redirect_uri` query parameter to this\n  // route. This is the URL that the user should be redirected to after signing\n  // out.\n  const redirectUri = requestUrl.searchParams.get(\"redirect_uri\");\n  const supabase = createRouteHandlerClient({ cookies });\n\n  await supabase.auth.signOut();\n\n  return NextResponse.redirect(redirectUri ?? `${requestUrl.origin}/login`, {\n    status: 301,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Zuplo Tunnels in Bash\nDESCRIPTION: This snippet demonstrates how to create a new tunnel using the 'zuplo tunnel create' command and then list all tunnels using the 'zuplo tunnel list' command. It assumes that the ZUPLO_API_KEY environment variable is set.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For brevity, the commands assume that you have exported your API key as an environment variable,\n# export ZUPLO_API_KEY=zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\n\nzuplo tunnel create --tunnel-name my-tunnel\nzuplo tunnel list\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Cloudwatch Logging Plugin in Zuplo Runtime\nDESCRIPTION: Code snippet for adding the AWS Cloudwatch logging plugin to a Zuplo project through the runtime initialization. It demonstrates how to configure AWS credentials, log group/stream names, and custom fields to be included in every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-aws-cloudwatch.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  AWSLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new AWSLoggingPlugin({\n      region: environment.AWS_REGION,\n      accessKeyId: environment.AWS_ACCESS_KEY_ID,\n      secretAccessKey: environment.AWS_SECRET_ACCESS_KEY,\n      logGroupName: \"zuplo\",\n      logStreamName: \"my-stream\",\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub OAuth Login Component in React\nDESCRIPTION: This React client component implements GitHub OAuth authentication using Supabase. It creates a button that triggers the GitHub sign-in flow when clicked, handling the redirection and session management. The component accepts a sessionCreateUrl parameter to redirect users back to the developer portal after successful authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\n\nconst GithubLogin = ({\n  sessionCreateUrl,\n}: {\n  sessionCreateUrl: string | string[] | undefined;\n}) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={async () => {\n        const supabase = createClientComponentClient();\n        await supabase.auth.signInWithOAuth({\n          provider: \"github\",\n          options: {\n            redirectTo:\n              typeof sessionCreateUrl === \"string\"\n                ? `${\n                    window.location.origin\n                  }/auth/callback?session-create-url=${encodeURIComponent(\n                    sessionCreateUrl\n                  )}`\n                : undefined,\n            queryParams:\n              // This will allow your /auth/callback route to receive the\n              // session-create-url query param and redirect the user to the\n              // dev portal after signing in.\n              typeof sessionCreateUrl === \"string\"\n                ? {\n                    sessionCreateUrl: encodeURIComponent(sessionCreateUrl),\n                  }\n                : undefined,\n          },\n        });\n      }}\n      className=\"border border-purple-700 rounded px-4 py-2 text-black dark:text-white mb-2\"\n    >\n      Github\n    </button>\n  );\n};\n\nexport default GithubLogin;\n```\n\n----------------------------------------\n\nTITLE: Displaying Zuplo Tunnel Command Help in Bash\nDESCRIPTION: This snippet shows the available Zuplo tunnel commands and their descriptions. It includes commands for creating, deleting, describing, listing, rotating tokens, and managing services for tunnels.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo tunnel --help\nzuplo tunnel\n\nTunnel commands\n\nCommands:\n  zuplo tunnel create        Creates a new tunnel in your account\n  zuplo tunnel delete        Deletes a tunnel in your account\n  zuplo tunnel describe      Describes a tunnel in your account\n  zuplo tunnel list          Lists the tunnels in your account\n  zuplo tunnel rotate-token  Rotates the token for a tunnel in your account\n  zuplo tunnel services      Tunnel services commands\n```\n\n----------------------------------------\n\nTITLE: Setting Data with ContextData Instance Method\nDESCRIPTION: Example of using instance-based set() method to store request-specific data\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myData = new ContextData(\"my-data\");\nmyData.set(context, { prop1: \"hello world\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Zuplo Tunnel Services in JSON\nDESCRIPTION: This JSON snippet provides a sample configuration file for Zuplo tunnel services. It defines multiple services with their names, endpoints, and access configurations for different projects and environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"services\": [\n    {\n      \"name\": \"my-awesome-service-prod\",\n      \"endpoint\": \"http://localhost:8000\",\n      \"configurations\": [\n        {\n          \"project\": \"my-project\",\n          \"accessibleBy\": [\"production\"]\n        },\n        {\n          \"project\": \"my-other-project\",\n          \"accessibleBy\": [\"production\"]\n        }\n      ]\n    },\n    {\n      \"name\": \"my-awesome-service-staging\",\n      \"endpoint\": \"http://localhost:9000\",\n      \"configurations\": [\n        {\n          \"project\": \"my-project\",\n          \"accessibleBy\": [\"preview\", \"working-copy\"]\n        },\n        {\n          \"project\": \"my-other-project\",\n          \"accessibleBy\": [\"preview\", \"working-copy\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Login Button to Login Page\nDESCRIPTION: This JSX snippet demonstrates how to integrate the GitHub login button component into a login page. It passes the session-create-url search parameter to the GithubLogin component, enabling the authentication flow to redirect users back to the developer portal after successful authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<GithubLogin sessionCreateUrl={searchParams?.[\"session-create-url\"]} />\n```\n\n----------------------------------------\n\nTITLE: Deploying Zuplo Gateway Using Git Branch as Environment Name\nDESCRIPTION: Example of deploying a Zuplo gateway using the current Git branch name as the environment name. This command should be run from the root of a Zuplo project with Git configured.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/deployments.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# The following will use the current Git branch as the name of the environment\n\ngit checkout -b my-new-branch\nzuplo deploy --project my-project\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Logging Plugin in Zuplo Runtime\nDESCRIPTION: This code demonstrates how to add the Google Cloud Logging Plugin to a Zuplo API runtime. It configures the plugin with a project-specific log name, service account credentials stored as an environment variable, and custom fields that will be included in every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-gcp.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  GoogleCloudLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new GoogleCloudLoggingPlugin({\n      logName: \"projects/my-project/logs/my-api\",\n      serviceAccountJson: environment.GCP_SERVICE_ACCOUNT,\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access in Rewrite Pattern\nDESCRIPTION: A simple JavaScript example showing how to access environment variables within the rewrite pattern string interpolation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/websocket-handler.md#2025-04-08_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n${env.BASE_PATH}\n```\n\n----------------------------------------\n\nTITLE: Deploying Zuplo Gateway with Custom Environment Name\nDESCRIPTION: Example of deploying a Zuplo gateway with a custom environment name instead of using the Git branch name. The --environment parameter allows specifying a custom environment name.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/deployments.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If you don't wish to use the current Git branch as the name of the\n# environment, you can specify one using --environment\n\nzuplo deploy --project my-project --environment my-env-name\n```\n\n----------------------------------------\n\nTITLE: Setting up dynamic meters in Zuplo Monetization Policy\nDESCRIPTION: This configuration shows how to prepare for dynamic metering by setting the 'computeUnits' meter to 0 initially, while keeping the 'requests' meter at 1. This allows the computeUnits value to be set programmatically later in the request lifecycle.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-programmatic-quotas.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"MonetizationInboundPolicy\",\n  \"module\": \"$import(@zuplo/runtime)\",\n  \"options\": {\n    \"allowRequestsOverQuota\": false,\n    \"allowedSubscriptionStatuses\": [\"active\", \"incomplete\"],\n    \"meterOnStatusCodes\": \"200-399\",\n    \"meters\": {\n      \"requests\": 1,\n      \"computeUnits\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zuplo CLI Command Overview\nDESCRIPTION: Overview of available Zuplo CLI commands including delete, deploy, list, and test. These commands help manage deployed Zuplo environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/deployments.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo --help\nzuplo <command>\n\nCommands:\n  zuplo delete    Deletes the environment at the URL\n  zuplo deploy    Deploys current Git branch of the current directory\n  zuplo list      Lists all deployed environments\n  zuplo test      Runs the tests under /tests against an endpoint\n```\n\n----------------------------------------\n\nTITLE: Using x-internal Extension to Hide Routes in Developer Portal\nDESCRIPTION: This snippet demonstrates how to use the x-internal extension to hide a route from the Developer Portal. When set to true, the route will also be excluded from OpenAPI files generated by the OpenAPI Spec Handler.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/open-api.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"get\": {\n    \"summary\": \"Internal Route\",\n    \"x-internal\": true,\n    \"x-zuplo-route\": {\n        ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynatrace Context in Request Handler\nDESCRIPTION: Example of setting custom context for Dynatrace metrics within a request handler function. Shows how to add custom dimensions for specific requests.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/metrics-plugins.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ZuploContext,\n  ZuploRequest,\n  DynatraceMetricsPlugin,\n} from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const someValue = \"hello\";\n  DynatraceMetricsPlugin.setContext(context, {\n    dimentions: [`my-custom-dimension=\"${someValue}\"`],\n  });\n\n  return \"What zup?\";\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Zuplo Variable Commands Help\nDESCRIPTION: These commands show the help information for Zuplo variable management and list available subcommands for creating and updating variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/variables.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo variable --help\nzuplo variable\n\nVariable commands\n\nCommands:\n  zuplo variable create  Creates a new variable for a branch\n  zuplo variable update  Updates an existing variable for a branch\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Handler in routes.oas.json\nDESCRIPTION: Basic configuration for the AWS Lambda handler in the routes.oas.json file. This snippet shows how to set up the handler with required AWS credentials and function details using environment variables for sensitive information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/aws-lambda.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"handler\": {\n    \"export\": \"awsLambdaHandler\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"accessKeyId\": \"$env(AWS_ACCESS_KEY_ID)\",\n      \"functionName\": \"demo-post-1\",\n      \"region\": \"us-east-2\",\n      \"secretAccessKey\": \"$env(AWS_SECURE_ACCESS_KEY)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Zuplo API Gateways with API Key in Bash\nDESCRIPTION: This command demonstrates how to use the Zuplo CLI to list available API Gateways by providing an API Key as an argument.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo list --api-key zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\n```\n\n----------------------------------------\n\nTITLE: Route Configuration for URL Rewrite Handler\nDESCRIPTION: JSON configuration showing how to set up URL rewrite handler in routes.oas.json file, including path setup and handler configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-rewrite.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/rewrite-test\": {\n    \"summary\": \"Proxy Welcome API\",\n    \"description\": \"This Route will proxy the welcome.zuplo.io api\",\n    \"x-zuplo-path\": {\n      \"pathMode\": \"open-api\"\n    },\n    \"get\": {\n      \"summary\": \"Testing rewrite handler\",\n      \"x-zuplo-route\": {\n        \"corsPolicy\": \"none\",\n        \"handler\": {\n          \"export\": \"urlRewriteHandler\",\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"options\": {\n            \"rewritePattern\": \"https://welcome.zuplo.io\"\n          }\n        },\n        \"policies\": {\n          \"inbound\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Zuplo API Key as Environment Variable in Bash\nDESCRIPTION: These commands show how to set the Zuplo API Key as an environment variable and then use the CLI without specifying the API Key in each command.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/authentication.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ZUPLO_API_KEY=zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\nzuplo list --api-key\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Staging\nDESCRIPTION: Configuration text showing how to set the BASE_SERVICE_URL environment variable for a staging environment to point to the staging service tunnel.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-setup.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nBASE_SERVICE_URL=service://my-awesome-service-staging\n```\n\n----------------------------------------\n\nTITLE: Defining InboundPolicyHandler Type in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for inbound policy handlers, which must return either a ZuploRequest to continue the pipeline or a Response to short-circuit the request.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InboundPolicyHandler<TOptions = any> = (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: TOptions,\n  policyName: string,\n) => Promise<ZuploRequest | Response>;\n```\n\n----------------------------------------\n\nTITLE: Using Zuplo Test Command CLI Options\nDESCRIPTION: Shows the available options for the Zuplo test command including endpoint specification and test filtering capabilities.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo test --help\nzuplo test\n\nRuns the tests under /tests against an endpoint\n\nOptions:\n  --version   Show version number                                      [boolean]\n  --help      Show help                                                [boolean]\n  --endpoint  The URL of the environment to test against                        [string]\n  --filter    A filter to run a subset of tests (e.g., --filter 'test name' or\n              --filter '/test-name-regex/')                             [string]\n```\n\n----------------------------------------\n\nTITLE: URL String Interpolation Example\nDESCRIPTION: Example showing URL string interpolation syntax for the Forward Handler with environment and parameter variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-forward.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhttps://${env.BASE_HOST_NAME}/${method}/${params.productId}\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-Host Header Value\nDESCRIPTION: Akamai built-in variable used for the X-Forwarded-Host header in the Developer Portal CDN configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/akamai/cdn.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{builtin.AK_HOST}}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Verification Policy in Zuplo\nDESCRIPTION: This JSON configuration sets up a JWT verification policy in Zuplo to validate JWTs from Fastly. It specifies the policy type, handler, and options including the issuer, audience, and secret for verification.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"verify-fastly-jwt\",\n  \"policyType\": \"open-id-jwt-auth-inbound\",\n  \"handler\": {\n    \"export\": \"OpenIdJwtInboundPolicy\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"authHeader\": \"x-jwt\",\n      \"issuer\": \"Fastly\",\n      \"audience\": \"my-api.example.com\",\n      \"secret\": \"$env(FASTLY_SECRET)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable URL Path Configuration\nDESCRIPTION: JavaScript example showing how to use environment variables for specifying different backend paths per environment.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/url-forward.md#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n${env.BASE_PATH}\n```\n\n----------------------------------------\n\nTITLE: Docs Directory TypeScript Configuration\nDESCRIPTION: TypeScript configuration file needed in the docs directory for building documentation\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\", \"WebWorker\"],\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"useDefineForClassFields\": true,\n    \"skipLibCheck\": true,\n    \"skipDefaultLibCheck\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"useUnknownInCatchVariables\": false,\n    \"types\": [\"zudoku/client\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sign In Button to Login Form\nDESCRIPTION: This code adds a sign-in button to the login form. The button has a green background and white text, providing users with a clear call to action for logging into the application.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<button className=\"bg-green-700 rounded px-4 py-2 text-white mb-2\">\n  Sign In\n</button>\n```\n\n----------------------------------------\n\nTITLE: Docs Directory Package Configuration\nDESCRIPTION: Package.json configuration required for the docs directory with necessary dependencies\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"docs\",\n  \"version\": \"0.1.0\",\n  \"type\": \"module\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"zudoku dev\",\n    \"build\": \"zudoku build\"\n  },\n  \"dependencies\": {\n    \"react\": \">19.0.0\",\n    \"react-dom\": \">19.0.0\",\n    \"zudoku\": \"^0.39\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5\",\n    \"@types/node\": \"^22\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Different Backends\nDESCRIPTION: Example of using environment variables to specify different backend origins for production, staging, and preview environments. Shows how to combine BASE_PATH with additional path components.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/websocket-handler.md#2025-04-08_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nhttps://${env.BASE_PATH}/foo/bar\n\n// Runtime value is\nhttps://example.com/foo/bar\n```\n\n----------------------------------------\n\nTITLE: Legacy Dev Portal Configuration\nDESCRIPTION: Example of the old dev-portal.json configuration format that needs to be migrated\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pageTitle\": \"My API\",\n  \"faviconUrl\": \"https://www.example.org/favicon.ico\",\n  \"enableAuthentication\": true,\n  \"authentication\": {\n    \"provider\": \"auth0\",\n    \"authority\": \"$env(ZUPLO_PUBLIC_AUTH0_AUTHORITY_URL)\",\n    \"jwksUrl\": \"$env(ZUPLO_PUBLIC_AUTH0_AUTHORITY_URL).well-known/jwks.json\",\n    \"devPortalClient\": {\n      \"clientId\": \"$env(ZUPLO_PUBLIC_AUTH0_CLIENT_ID)\",\n      \"audience\": \"$env(ZUPLO_PUBLIC_AUTH0_AUDIENCE_URL)\"\n    }\n  },\n  \"generateExamples\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StripeMonetizationPlugin in Zuplo Runtime\nDESCRIPTION: Configuration code for setting up the StripeMonetizationPlugin to handle Stripe webhook subscription events in a Zuplo API. The plugin requires STRIPE_WEBHOOK_SIGNING_SECRET and STRIPE_SECRET_KEY environment variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-webhook-setup.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  StripeMonetizationPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  // Create the Stripe Plugin\n  const stripe = new StripeMonetizationPlugin({\n    webhooks: {\n      signingSecret: environment.STRIPE_WEBHOOK_SIGNING_SECRET,\n    },\n    stripeSecretKey: environment.STRIPE_SECRET_KEY,\n  });\n  // Register the plugin\n  runtime.addPlugin(stripe);\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Policy Options with TypeScript\nDESCRIPTION: Shows how to create a TypeScript type for policy options to ensure type safety when accessing configuration values within the policy handler.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyPolicyOptionsType = {\n  you: string;\n  specify: string;\n  here: number;\n};\nexport default async function (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: MyPolicyOptionsType,\n  policyName: string,\n) {\n  // your policy code goes here, and can use the options to perform any\n  // configuration\n  context.log.info(options.you);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Peer Dependencies in Bash\nDESCRIPTION: Command to update React peer dependencies when required. This should be run if npm indicates that peer dependencies need to be updated after installing the latest zudoku package.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/updating.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Media Types in AWS Lambda Handler\nDESCRIPTION: This configuration specifies content types to be converted to base64 encoded strings when sent as the body to AWS Lambda functions. The binaryMediaTypes option ensures proper handling of binary data like images and PDFs.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/aws-lambda.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"handler\": {\n    \"export\": \"awsLambdaHandler\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"accessKeyId\": \"$env(AWS_ACCESS_KEY_ID)\",\n      \"functionName\": \"demo-post-1\",\n      \"region\": \"us-east-2\",\n      \"secretAccessKey\": \"$env(AWS_SECURE_ACCESS_KEY)\",\n      \"binaryMediaTypes\": [\"image/png\", \"application/pdf\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Old settings.json Structure for Zuplo Dev Portal Configuration\nDESCRIPTION: This snippet shows the deprecated structure of the settings.json file used for configuring the Zuplo developer portal. It includes settings for the portal appearance and authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors/settings-to-dev-portal-migration.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"developerPortal\": {\n    \"faviconUrl\": \"https://example.com/myicon.png\",\n    \"pageTitle\": \"My Title\"\n  },\n  \"authentication\": {\n    \"authority\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX\",\n    \"jwksUrl\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX/v1/keys\",\n    \"provider\": \"okta\",\n    \"devPortalClient\": {\n      \"clientId\": \"XXXXXXXXXXXX\",\n      \"audience\": \"api://my-api\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Route Data in TypeScript Code\nDESCRIPTION: This snippet shows how to access the custom data defined in an OpenAPI route using the context.route.raw() function. It demonstrates type-casting the result to access the x-custom property and logs the hello value from the custom data.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/route-raw.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport async function echo(request: ZuploRequest, context: ZuploContext) {\n  const data = context.route.raw<{ \"x-custom\": { hello: string } }>();\n  context.log.info(`My custom data: ${data[\"x-custom\"].hello}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling X-Amzn-Trace-Id Header in AWS Lambda Handler\nDESCRIPTION: Configuration to enable the return of X-Amzn-Trace-Id header in the response from AWS Lambda. This helps in troubleshooting by correlating AWS Lambda events or errors with Zuplo requests and responses.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/aws-lambda.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"handler\": {\n    \"export\": \"awsLambdaHandler\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"accessKeyId\": \"$env(AWS_ACCESS_KEY_ID)\",\n      \"functionName\": \"demo-post-1\",\n      \"region\": \"us-east-2\",\n      \"secretAccessKey\": \"$env(AWS_SECURE_ACCESS_KEY)\",\n      \"returnAmazonTraceIdHeader\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Portal Authentication Settings in JSON\nDESCRIPTION: Example configuration for setting up authentication in dev-portal.json file using Okta as the provider. Demonstrates proper structure for authority, jwksUrl, and devPortalClient settings including clientId and audience values.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors/invalid-settings-dev-portal-auth-audience.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableAuthentication\": true,\n  \"authentication\": {\n    \"authority\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX\",\n    \"jwksUrl\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX/v1/keys\",\n    \"provider\": \"Okta\",\n    \"devPortalClient\": {\n      \"clientId\": \"XXXXXXXXXXXX\",\n      \"audience\": \"api://my-api\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to ZoneCache in TypeScript\nDESCRIPTION: Shows how to write data to the ZoneCache with a specific key and expiration time. In this example, the data is stored for 60 seconds. The data is JSON serialized before storage.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zone-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// write to the cache - and keep for 60 seconds\nawait cache.put(\"key\", data, 60);\n```\n\n----------------------------------------\n\nTITLE: Importing Zuplo Error Definitions in TypeScript\nDESCRIPTION: Imports error definitions from a generated errors file to be used in the documentation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors.mdx#2025-04-08_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { errors } from \"../generated/errors.ts\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Zuplo Handler\nDESCRIPTION: Example showing how to access route parameters defined in the path format '/foos/:foo/bars/:bar'. Parameters are available via the request.params object.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/custom-handler.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// GET root/foos/123/bars/car\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  return request.params.foo + request.params.bar;\n}\n\n// returns 123car\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Echo API\nDESCRIPTION: Example of making a POST request to the Echo API with JSON content, demonstrating the request format and headers.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/sample-apis.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nPOST https://echo.zuplo.io/my/path\ncontent-type: application/json\n\n{\n  \"hello\": \"world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ignore and Only Features in Zuplo Tests\nDESCRIPTION: Example showing how to use the .ignore and .only features in Zuplo tests. These options allow you to selectively run or exclude specific tests during development and debugging.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, it } from \"@zuplo/test\";\nimport { expect } from \"chai\";\n\n/**\n * This example how to use ignore and only.\n */\ndescribe(\"Ignore and only test example\", () => {\n  it.ignore(\"This is a failing test but it's been ignored\", () => {\n    expect(1 + 4).to.equals(6);\n  });\n\n  //   it.only(\"This is the only test that would run if it were not commented out\", () => {\n  //     expect(1 + 4).to.equals(5);\n  //   });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Problem Response Format in TypeScript\nDESCRIPTION: Implementation of custom error response formatting by configuring the problemResponseFormat function.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.problemResponseFormat = (\n    { problem, statusText, additionalHeaders },\n    request,\n    context,\n  ) => {\n    // Build the response body\n    const body = JSON.stringify(problem, null, 2);\n\n    // Send the response with headers and status\n    return new Response(body, {\n      status: problem.status,\n      statusText,\n      headers: {\n        ...additionalHeaders,\n        \"content-type\": \"application/problem+json\",\n      },\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating catalog-info.yaml for Zuplo Repository in YAML\nDESCRIPTION: YAML configuration for a catalog-info.yaml file to be added to a Zuplo repository. This allows the API to be registered in Backstage directly from the source repository.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: API\nmetadata:\n  name: backstage-sample-api # Your API name\n  annotations:\n    # Your github project slug Ex. org/repo-name\n    github.com/project-slug: zuplo-samples/backstage-sample-api\nspec:\n  type: openapi\n  lifecycle: experimental # Change to match your backstage project\n  owner: guests # Change to match your backstage project\n  system: examples # Change to match your backstage project\n  definition:\n    # Change to match your Zuplo API\n    $text: https://backstage-sample-api-main-821019a.zuplo.app/openapi\n```\n\n----------------------------------------\n\nTITLE: Defining URL Pattern Route with Path Parameter\nDESCRIPTION: Illustrates how to define a route using URL Pattern mode with a simple path and userId parameter. This JSON snippet is part of an OpenAPI specification document.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/routing.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/users/:userId\": {\n      \"get\": {\n        \"operationId\": \"get-user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Logging in VMWare Log Insight Format\nDESCRIPTION: This example shows how objects logged in Zuplo are converted to a key-value string format in VMWare Log Insight logs. The object properties are serialized into the text field as key=value pairs.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-vmware-log-insight.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1696603735057,\n  \"text\": \"hello=\\\"hello world\\\" foo=1 baz=true\",\n  \"fields\": [\n    { \"name\": \"severity\", \"content\": \"INFO\" },\n    {\n      \"name\": \"request_id\",\n      \"content\": \"709d2491-0703-4ea9-86ea-d2af548cd4d9\"\n    },\n    { \"name\": \"environment_type\", \"content\": \"working-copy\" },\n    { \"name\": \"log_source\", \"content\": \"request\" },\n    { \"name\": \"atomic_counter\", \"content\": 1 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface for API Key Authentication in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the User object set by the API Key Authentication policy. It includes the consumer name and metadata.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The User object set by the API Key Authentication policy\n */\ninterface User {\n  /**\n   * The name of the API Key consumer\n   */\n  sub: string;\n  /**\n   * The metadata attached to the API Key consumer\n   */\n  data: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Route Configuration in routes.oas.json\nDESCRIPTION: Configuration file showing the structure for adding API Key Authentication and Monetization policies to a route.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-policy-setup.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nroutes.oas.json\n```\n\n----------------------------------------\n\nTITLE: Basic VMWare Log Insight Log Format Example\nDESCRIPTION: This JSON example shows the standard format of logs sent from Zuplo to VMWare Log Insight. It includes a timestamp, text message, and various metadata fields that provide context about the log event.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-vmware-log-insight.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1696596905883,\n  \"text\": \"hello world\",\n  \"fields\": [\n    { \"name\": \"severity\", \"content\": \"INFO\" },\n    {\n      \"name\": \"request_id\",\n      \"content\": \"709d2491-0703-4ea9-86ea-d2af548cd4d9\"\n    },\n    { \"name\": \"environment_type\", \"content\": \"working-copy\" },\n    { \"name\": \"log_source\", \"content\": \"request\" },\n    { \"name\": \"atomic_counter\", \"content\": 1 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Logging with OnResponseSendingFinal and waitUntil in TypeScript\nDESCRIPTION: This code shows how to implement asynchronous operations without blocking the response using the OnResponseSendingFinal hook and the waitUntil method. It clones the request and response to read their bodies and sends them to an external logging service without delaying the response to the client.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/hooks.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport async function pluginWithHook(\n  request: ZuploRequest,\n  context: ZuploContext,\n  policyName: string,\n) {\n\n  // Note we must clone the request here, before it's used by the handler\n  const requestClone = request.clone();\n\n  context.addResponseSendingFinalHook(\n    async (response, latestRequest, context) => {\n\n      // Note, we must clone the response to read the body\n      // as the original will be used the by response pipeline\n      // itself\n      const responseClone = response.clone();\n\n      const asyncInnerFunction = async () => {\n        // Note - we must clone the response\n        const requestBody = await requestClone.text();\n        const responseBody = await responseClone.text();\n        await fetch(\"https://example.com\", {\n          method: \"GET\",\n          body: JSON.stringify({ requestBody, responseBody });\n        });\n      }\n\n      const promise = asyncInnerFunction();\n\n      // Don't block the response while waiting for the fetch\n      context.waitUntil(promise);\n    });\n\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Logging in VMWare Log Insight Format\nDESCRIPTION: This example demonstrates how errors are logged in the VMWare Log Insight format. Error details are included as additional fields in the log entry, containing the error name, message, and stack trace information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-vmware-log-insight.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1696603735055,\n  \"text\": \"Something bad happened\",\n  \"fields\": [\n    { \"name\": \"severity\", \"content\": \"INFO\" },\n    {\n      \"name\": \"request_id\",\n      \"content\": \"709d2491-0703-4ea9-86ea-d2af548cd4d9\"\n    },\n    { \"name\": \"environment_type\", \"content\": \"working-copy\" },\n    { \"name\": \"log_source\", \"content\": \"request\" },\n    { \"name\": \"atomic_counter\", \"content\": 1 },\n    { \"name\": \"error_name\", \"content\": \"Error\" },\n    { \"name\": \"error_message\", \"content\": \"This is an error\" },\n    {\n      \"name\": \"error_stack\",\n      \"content\": \"Error: This is an error\\n    at exampleFunction (module/foo.ts:32:21)\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in dev-portal.json\nDESCRIPTION: Example configuration for setting up custom authentication in the Zuplo Developer Portal. This snippet shows how to enable authentication with Okta as the provider, along with required OAuth settings.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-json.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableAuthentication\": true,\n  \"requireAuthentication\": false,\n  \"generateExamples\": true,\n  \"authentication\": {\n    \"issuer\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX\",\n    \"provider\": \"okta\",\n    \"clientId\": \"XXXXXXXXXXXX\",\n    \"audience\": \"api://my-api\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Outbound Policy Handler Type in TypeScript\nDESCRIPTION: This snippet defines the type for an outbound policy handler function in Zuplo. It specifies the parameters the handler receives and the expected return type.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OutboundPolicyHandler<TOptions = any> = (\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: TOptions,\n  policyName: string,\n) => Promise<ZuploRequest | Response>;\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in JSON Configuration Files\nDESCRIPTION: Demonstrates how to reference environment variables within Zuplo configuration files using the $env() syntax. This example shows setting a policy option with a value from an environment variable.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/environment-variables.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-custom-code-inbound-policy\",\n  \"policyType\": \"custom-code-inbound\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/YOUR_MODULE)\",\n    \"options\": {\n      \"config1\": \"$env(MY_CONFIG_VAR)\",\n      \"config2\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zuplo Documentation Dependencies\nDESCRIPTION: Installs all required npm dependencies for the Zuplo documentation project.\nSOURCE: https://github.com/zuplo/docs/blob/main/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Outbound Policy in TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of a custom outbound policy that modifies the response by removing the 'userId' property and adding a new header.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: any,\n  policyName: string,\n) {\n  if (response.status !== 200) {\n    // if we get an unexpected response code, something went wrong, just let the response flow\n    return response;\n  }\n\n  const data = (await response.json()) as any[]; // we know this is JSON and an array\n  data.forEach((item) => {\n    delete item.userId;\n  });\n\n  // create a new response\n  const newResponse = new Response(JSON.stringify(data), {\n    status: response.status,\n    headers: response.headers,\n  });\n\n  // let's add an additional header as an example, for good measure\n  newResponse.headers.set(\"color\", \"yellow\");\n\n  return newResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in dev-portal.json\nDESCRIPTION: Example showing how to substitute sensitive or environment-specific values with environment variables in the dev-portal.json file. Values must be formatted as $env(ZUPLO_PUBLIC_VARIABLE_NAME) and variable names must start with ZUPLO_PUBLIC.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-json.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableAuthentication\": true,\n  \"authentication\": {\n    \"issuer\": \"$env(ZUPLO_PUBLIC_OKTA_ISSUER)\",\n    \"provider\": \"okta\",\n    \"clientId\": \"$env(ZUPLO_PUBLIC_OKTA_CLIENT_ID)\",\n    \"audience\": \"api://my-api\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Policy Options in Zuplo JSON\nDESCRIPTION: This JSON snippet shows how to specify custom options for a policy in the Zuplo policy configuration file.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-first-policy\",\n  \"policyType\": \"custom-code-outbound\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/my-first-policy)\",\n    \"options\": {\n      \"you\": \"can\",\n      \"specify\": \"anything\",\n      \"here\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Restriction Policy for Fastly in Zuplo\nDESCRIPTION: This JSON snippet demonstrates how to set up an IP address restriction policy in Zuplo to allow only Fastly IP addresses. It uses a built-in list of Fastly IP addresses.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"allow-fastly-only\",\n  \"policyType\": \"ip-address-restriction-inbound\",\n  \"handler\": {\n    \"export\": \"IPAddressRestrictionInbound\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"allowedIpAddresses\": [\"list:fastly\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing JSON Schemas in OpenAPI Components\nDESCRIPTION: Example of how to reference a JSON schema from the components section of an OpenAPI document to define a 200 response containing a list of todos.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"responses\": {\n   \"200\": {\n      \"description\": \"A list of todos\",\n         \"content\": {\n            \"application/json\": {\n               \"schema\": {\n               \"$ref\": \"#/components/schemas/TodoListObject\"\n            }\n         }\n      }\n   }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key to User Mapping in Policy Options\nDESCRIPTION: Shows how to configure a mapping between API keys and user identifiers in the policy configuration, allowing for dynamic user authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"policies\": [\n    {\n      \"name\": \"my-first-policy\",\n      \"policyType\": \"custom-code-inbound\",\n      \"handler\": {\n        \"export\": \"default\",\n        \"module\": \"$import(./modules/my-first-policy)\",\n\t\t\t\t// some options that will be passed to our Policy\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"123\" : \"sub-1\",\n\t\t\t\t\t\"abc\" : \"sub-2\"\n\t\t\t\t}\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Importing and Renaming OpenAPI Files in Zuplo\nDESCRIPTION: Illustrates how to import a remote OpenAPI file and rename it during the import process using the --destination option.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/project.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzuplo project import-openapi --source https://example.com/path/to/openapi.json --destination new-name\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying JSON Request Bodies in Zuplo Policies\nDESCRIPTION: This code snippet demonstrates how to use request.json() to read the incoming request as a JSON object, modify it, and create a new Request with the modified body. It's useful for transforming or enriching request data in Zuplo policies.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/transform-body-inbound/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (request: Request, context: ZuploContext) {\n  // Read the request body as JSON\n  const body = await request.json();\n\n  // Modify the body object as needed\n  body.newProperty = \"some value\";\n\n  // Create a new request with the modified body\n  const newRequest = new Request(request, {\n    body: JSON.stringify(body)\n  });\n\n  return newRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for API Reference Configuration\nDESCRIPTION: Interface definition for configuring API Reference documentation in the sidebar, including type, label and defaultSpec properties.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface APIDocConfig {\n  type: \"api-ref\";\n  label: string;\n  /**\n   * defaultSpec allows you to specify the ID of the spec navigated to upon loading the developer portal. The spec's ID is the filename without the extension (ex. For routes.oas.json, use \"routes\")\n   */\n  defaultSpec: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response JSON in Zuplo Policy\nDESCRIPTION: Example showing how to read a response as JSON, modify it, and return a new Response object. The response body can be accessed using response.json() for JSON content, or response.text()/response.blob() for other content types.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/transform-body-outbound/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.json()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.text()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.blob()\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Route with Path Parameter\nDESCRIPTION: Shows how to define a route in OpenAPI mode with a simple path and userId parameter. This JSON snippet is part of an OpenAPI specification document.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/routing.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/users/{userId}\": {\n      \"get\": {\n        \"operationId\": \"get-user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Request and Response Bodies in Zuplo TypeScript Handlers\nDESCRIPTION: This code demonstrates how to properly clone both request and response objects in a Zuplo request handler to log their bodies while still being able to use the original objects. It shows the pattern of cloning, reading the body content for logging, and then using the original objects for their intended purpose.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/safely-clone-a-request-or-response.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async async function(req: ZuploRequest, ctx: ZuploContext) {\n\t// pretend we want to log the request and response body\n\tconst reqClone = req.clone();\n  const reqBody = await reqClone.text();\n\tctx.log.debug(reqBody);\n\n\t// we can now safely re-use this body to call the downstream\n\t// service\n\tconst response = await fetch('https://downwind-url.com/foo/bar', {\n\t\tmethod: req.method,\n\t\tbody: req.body;\n\t});\n\n\tconst resClone = response.clone();\n\tconst resBody = await resClone.text();\n\treq.logger.debug(resBody);\n\n\t// we can now safely use the original response\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example of API Reference Configuration\nDESCRIPTION: Basic example showing how to configure an API Reference item in sidebar.json\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api-ref\",\n  \"label\": \"API Reference\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundLoaderOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the BackgroundLoaderOptions interface used for configuring the BackgroundLoader. It specifies two properties: ttlSeconds (required) for setting the cache entry's time to live, and loaderTimeoutSeconds (optional) for setting a timeout on the loader function to prevent hanging background requests.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/background-loader.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BackgroundLoaderOptions {\n  // (Required) The time to live for the cache entry in seconds\n  ttlSeconds: number;\n  // (Optional) The timeout for the loader -- error out if the load takes longer than this. Useful to prevent hanging background requests.\n  loaderTimeoutSeconds?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Document Configuration\nDESCRIPTION: Interface definition for configuring individual document pages in the sidebar, including properties for ID, label, specs, and defaultPage settings.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DocConfig {\n  type: \"doc\";\n  /**\n   * ID Must be unique across all pages and map to a markdown filename in /docs (excluding the extension)\n   */\n  id: string;\n  /**\n   * Label Must be unique across doc and category items within this array only\n   */\n  label: string;\n  /**\n   * The OpenAPI Spec IDs (filename without the .oas.json extension) you wish to limit this doc to. If set, this page will only be surfaced in the sidebar of listed specs.\n   */\n  specs?: string[];\n  /**\n   * When set to true, this page will be navigated to upon loading the developer\n   * portal\n   */\n  defaultPage?: boolean;\n} | string // shorthand\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Archive Policy in TypeScript\nDESCRIPTION: A TypeScript policy that archives request bodies to Azure Blob Storage. It clones the request, generates a unique blob name using timestamp and requestId, and uploads the content using Azure Blob Storage REST API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/archiving-requests-to-storage.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploRequest, ZuploContext } from \"@zuplo/runtime\";\n\nexport type RequestArchivePolicyOptions = {\n  blobContainerPath: string;\n  blobCreateSas: string;\n};\n\nexport default async function (\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: RequestArchivePolicyOptions,\n) {\n  // because we will read the body, we need to\n  // create a clone of this request first, otherwise\n  // there may be two attempts to read the body\n  // causing a runtime error\n  const clone = request.clone();\n  const body = await clone.text();\n\n  // let's generate a unique blob name based on the date and requestId\n  const blobName = `${Date.now()}-${request.requestId}.req.txt`;\n\n  const url = `${options.blobContainerPath}/${blobName}?${options.blobCreateSas}`;\n\n  const result = await fetch(url, {\n    method: \"PUT\",\n    body: body,\n    headers: {\n      \"x-ms-blob-type\": \"BlockBlob\",\n    },\n  });\n\n  if (result.status > 201) {\n    const err = {\n      message: `Error archiving file`,\n      status: result.status,\n      body: await result.text(),\n    };\n    request.logger.error(err);\n  }\n\n  // continue\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Category Configuration\nDESCRIPTION: Complex example showing how to configure a category with nested items and specifications in sidebar.json\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-configuring-sidebar.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docs\": [\n    {\n      \"type\": \"category\",\n      \"label\": \"Dog Breeds\",\n      \"specs\": [\"routes-v1\", \"routes-v2\"],\n      \"link\": {\n        \"type\": \"doc\",\n        \"id\": \"dog-breeds\"\n      },\n      \"items\": [\n        \"french-bulldog\",\n        {\n          \"type\": \"doc\",\n          \"label\": \"Poodle\",\n          \"id\": \"poodle\",\n          \"specs\": [\"routes-v2\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Monetization Plugin Options\nDESCRIPTION: This code snippet shows the configuration options for the Stripe Monetization Plugin. It includes required settings for webhook signing secret and Stripe secret key, as well as an optional primary data region setting.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/stripe-monetization-plugin.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Stripe Webhook settings\n   */\n  webhooks: {\n    signingSecret: string;\n  };\n\n  /**\n   * The primary region where data is stored. Among other things, the choice of * location impacts latency. Defaults to `us-central1`\n   */\n  primaryDataRegion?: string;\n\n  /**\n   * The Stripe account's secret key\n   */\n  stripeSecretKey: string;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Environment Variables for Log Initialization\nDESCRIPTION: Deprecated environment variables that were previously used for log initialization before the plugin system. These should be migrated to the documented plugin system.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/compatibility-dates.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nGCP_USER_LOG_NAME\nGCP_USER_LOG_SVC_ACCT_JSON\nZUPLO_USER_LOGGER_DATA_DOG_URL\n```\n\n----------------------------------------\n\nTITLE: Event Listener Implementation\nDESCRIPTION: Example of implementing an event listener for the 'identify' event in the developer portal, which logs user identification data.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-inject-html.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.zuploEvents.on(\"identify\", (e) => {\n    console.log(\"user identified\", e);\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Generics with ContextData\nDESCRIPTION: Example showing how to use TypeScript generics with ContextData for type safety\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myData = new ContextData<{ key: string }>(\"my-data\");\nContextData.get<{ key: string }>(context, \"my-data\");\nContextData.set<{ key: string }>(context, \"my-data\", { key: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication in Zuplo Developer Portal JSON\nDESCRIPTION: This JSON snippet shows the configuration settings for enabling OpenID Connect authentication in the Zuplo developer portal. It includes setting the provider to 'OpenID Connect', specifying the authority (issuer URL), and setting the client ID.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-keycloak-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Authentication\": {\n    \"Provider\": \"OpenID Connect\",\n    \"Authority\": \"https://your-keycloak-issuer-url\",\n    \"ClientId\": \"zuplo-dev-portal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in TypeScript Code\nDESCRIPTION: Shows how to import and use environment variables in TypeScript code using the @zuplo/runtime package. This pattern allows developers to access any defined environment variable in their Zuplo project.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/environment-variables.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { environment } from \"@zuplo/runtime\";\n\nconst myVar = environment.MY_VAR;\n```\n\n----------------------------------------\n\nTITLE: Configuring Monetization Settings in Zuplo Developer Portal\nDESCRIPTION: This JSON configuration enables monetization in the Zuplo Developer Portal. It includes settings for the Stripe Pricing Table ID, Publishable Key, and Secret Key.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-dev-portal-setup.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"monetizationSettings\": {\n    \"enableMonetization\": true,\n    \"pricingTableId\": \"prctbl_1234567890abcdefghijklmnop\",\n    \"publishableKey\": \"pk_test_1234567890abcdefghijklmnop\",\n    \"secretKey\": \"$env(STRIPE_SECRET_KEY)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation Entries in JSON for Zuplo Developer Portal\nDESCRIPTION: This JSON snippet demonstrates the structure for configuring sidebar navigation entries in the sidebar.json file. It shows the required properties including type, id, and label for displaying custom documentation pages.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-adding-pages.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Type of documentation. Simply use 'doc' for now to add a page\",\n  \"id\": \"Name of the file you wish to display, not including the extension\",\n  \"label\": \"Label for the page in the sidebar navigation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in a Policy\nDESCRIPTION: Shows how to create a new request object to modify headers since the original request's headers are immutable. This example copies URL parameters to request headers.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (request: ZuploRequest) {\n  // create a new request based on the old one,\n  // this is required because the original request's\n  // headers are immutable\n  const newRequest = new ZuploRequest(request);\n  // enumerate over the params object and copy to the new\n  // request\n  Object.keys(request.params).forEach((param) => {\n    newRequest.headers.set(param, request.params[param]);\n  });\n\n  return newRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: New Zudoku Configuration\nDESCRIPTION: Example of the new zudoku.config.ts configuration format using TypeScript\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ZudokuConfig } from \"zudoku\";\nimport withZuplo from \"zudoku/with-zuplo\";\n\nconst config: ZudokuConfig = {\n  topNavigation: [\n    { id: \"documentation\", label: \"Documentation\" },\n    { id: \"api\", label: \"API Reference\" },\n  ],\n  sidebar: {\n    documentation: [\n      {\n        type: \"category\",\n        label: \"Overview\",\n        items: [\"introduction\", \"other-example\"],\n      },\n    ],\n  },\n  redirects: [{ from: \"/\", to: \"/introduction\" }],\n  apis: {\n    type: \"file\",\n    input: \"../config/routes.oas.json\",\n    navigationId: \"api\",\n  },\n  docs: {\n    files: \"/pages/**/*.{md,mdx}\",\n  },\n  authentication: {\n    type: \"auth0\",\n    domain: process.env.ZUPLO_PUBLIC_AUTH0_DOMAIN,\n    clientId: process.env.ZUPLO_PUBLIC_AUTH0_CLIENT_ID,\n  },\n};\n\nexport default withZuplo(config);\n```\n\n----------------------------------------\n\nTITLE: Using Cache Put Method in TypeScript\nDESCRIPTION: This example shows how to use the put method of the Cache interface to add a key/value pair to the cache.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait cache.put(request, response);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bucket in API Key Policy with JSON\nDESCRIPTION: This snippet demonstrates how to specify a custom bucket name in the API Key Inbound Policy options. It shows setting the 'bucketName' property to override the default bucket behavior and configure a policy to use a specific bucket for API keys.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-buckets.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"ApiKeyInboundPolicy\",\n  \"module\": \"$import(@zuplo/runtime)\",\n  \"options\": {\n    \"bucketName\": \"contoso-qa-env\",\n    \"allowUnauthenticatedRequests\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Host Header Regex Format\nDESCRIPTION: Regular expression pattern used in Akamai CDN configuration to forward proper host headers to Zuplo Origin. The pattern captures the subdomain and applies it to the Zuplo work domain.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/akamai/cdn.md#2025-04-08_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^([^.]+)\\..*$\n```\n\n----------------------------------------\n\nTITLE: Specifying Consumer Tags\nDESCRIPTION: This example shows how to define tags for a consumer. Tags are key-value pairs used for management purposes, such as querying consumers through the Zuplo API. In this case, a customer ID is associated with the consumer.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-management.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncustomer=1234\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Header in Fastly VCL Snippet\nDESCRIPTION: This VCL snippet for Fastly generates a JWT header for outgoing requests. It creates a JWT with a specified audience, expiration time, and signs it using a shared secret from an Edge Dictionary.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\ndeclare local var.jwt_secret STRING;\ndeclare local var.jwt_audience STRING;\ndeclare local var.jwt_issued STRING;\ndeclare local var.jwt_expires STRING;\ndeclare local var.jwt_header STRING;\ndeclare local var.jwt_payload STRING;\ndeclare local var.jwt_signature STRING;\n\n\nset var.jwt_secret = table.lookup(Zuplo, \"shared_secret\");\nset var.jwt_audience = \"my-api.example.com\";\nset var.jwt_issued = now.sec;\nset var.jwt_expires = strftime({\"%s\"}, time.add(now, 60s));\n\nset var.jwt_header = digest.base64url_nopad({\"{\"alg\":\"HS256\",\"typ\":\"JWT\"}\"}{\"}\"});\nset var.jwt_payload = digest.base64url_nopad({\"{\"audience\":\"\"} var.jwt_audience {\"\",\"exp\":\"} var.jwt_expires {\",\"iat\":\"} var.jwt_issued {\",\"iss\":\"Fastly\"}\"}{\"}\"});\nset var.jwt_signature = digest.base64url_nopad(digest.hmac_sha256(var.jwt_secret, var.jwt_header \".\" var.jwt_payload));\n\nset bereq.http.X-JWT = var.jwt_header \".\" var.jwt_payload \".\" var.jwt_signature;\n```\n\n----------------------------------------\n\nTITLE: Converting Zuplo Routes to OpenAPI Format using CLI\nDESCRIPTION: This command converts the old routes.json file to the new routes.oas.json format based on OpenAPI 3.x. It should be run from the root of the Zuplo project directory. The command searches for config/routes.json and generates config/routes.oas.json.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/convert.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo convert --help\nzuplo convert\n\nConverts routes.json to routes.oas.json\n```\n\n----------------------------------------\n\nTITLE: Creating Consumer with API Key via cURL\nDESCRIPTION: Creates a new consumer with associated API key including metadata and tags for organization tracking\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  https://dev.zuplo.com/v1/accounts/$ACCOUNT_NAME/key-buckets/$BUCKET_NAME/consumers?with-api-key=true \\\n  --request POST \\\n  --header \"Content-type: application/json\" \\\n  --header \"Authorization: Bearer $API_KEY\" \\\n  --data @- << EOF\n{\n  \"name\": \"my-consumer\",\n  \"description\": \"My Consumer\",\n  \"metadata\": {\n    \"orgId\": 1234,\n    \"plan\": \"gold\"\n  },\n  \"tags\": {\n    \"externalId\": \"acct_12345\"\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters in Zuplo\nDESCRIPTION: Demonstrates how to access query string parameters from the request. The request.query property provides a dictionary of all query parameters for easy access.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-request.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = request.query.foo;\n```\n\n----------------------------------------\n\nTITLE: Consumer Query Response Example\nDESCRIPTION: Example JSON response showing the retrieved consumers with their associated API keys\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"csmr_sikZcE754kJu17X8yahPFO8J\",\n      \"name\": \"my-consumer\",\n      \"description\": \"My Consumer\",\n      \"createdOn\": \"2023-02-03T21:33:17.067Z\",\n      \"updatedOn\": \"2023-02-03T21:33:17.067Z\",\n      \"tags\": {\n        \"externalId\": \"acct_12345\"\n      },\n      \"metadata\": {\n        \"orgId\": 1234,\n        \"plan\": \"gold\"\n      },\n      \"apiKeys\": [\n        {\n          \"id\": \"key_AM7eAiR0BiaXTam951XmC9kK\",\n          \"createdOn\": \"2023-06-19T17:32:17.737Z\",\n          \"updatedOn\": \"2023-06-19T17:32:17.737Z\",\n          \"expiresOn\": null,\n          \"key\": \"zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\"\n        }\n      ]\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Log Plugin with DataStax Provider in Zuplo\nDESCRIPTION: This code snippet demonstrates how to set up the Audit Log feature in Zuplo using the AuditLogPlugin with a DataStax Astra DB provider. It shows how to configure the plugin in the runtimeInit function, including specifying the DataStax collection URL and API key, and customizing logging options.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/audit-log.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuditLogDataStaxProvider,\n  AuditLogPlugin,\n  RuntimeExtensions,\n  ZuploRequest,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n\n  runtime.addPlugin(\n    new AuditLogPlugin(\n      new AuditLogDataStaxProvider({\n        url: \"THE_FULL_URL_TO_YOUR_COLLECTION_HERE\",\n        xCassandraToken: \"YOUR_API_KEY_HERE\"\n      }),\n      {\n\tinclude: {\n\t  request: {\n\t    body: false\n\t  },\n\t  response: {\n\t    headers: false\n\t  }\n\t}\n      }\n    )\n  );\n\n```\n\n----------------------------------------\n\nTITLE: Importing Default CSS Styles for API Key Manager\nDESCRIPTION: JSX import statement to include default CSS styles for the API Key Manager component in a root component file.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-react-component.md#2025-04-08_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./styles/globals.css\";\nimport \"@zuplo/react-api-key-manager/index.css\";\n```\n\n----------------------------------------\n\nTITLE: Shared ContextData Variable Declaration\nDESCRIPTION: Example of declaring a shared ContextData instance with type information\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myData = new ContextData<{ prop1: string }>(\"my-data\");\n```\n\n----------------------------------------\n\nTITLE: New dev-portal.json Structure for Zuplo Dev Portal Configuration\nDESCRIPTION: This snippet demonstrates the new structure of the dev-portal.json file, which replaces the old settings.json. It shows how to reorganize the configuration, moving developerPortal items to the top level and adding the enableAuthentication flag.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors/settings-to-dev-portal-migration.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"faviconUrl\": \"https://example.com/myicon.png\",\n  \"pageTitle\": \"My Title\",\n  \"enableAuthentication\": true,\n  \"authentication\": {\n    \"authority\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX\",\n    \"jwksUrl\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX/v1/keys\",\n    \"provider\": \"okta\",\n    \"devPortalClient\": {\n      \"clientId\": \"XXXXXXXXXXXX\",\n      \"audience\": \"api://my-api\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling API Key using Zuplo API with cURL in Bash\nDESCRIPTION: This bash script demonstrates how to use the Zuplo API to roll (replace) an API key for a consumer. It sets environment variables for account, bucket, consumer names, and the Zuplo API key, then sends a POST request to create a new key and revoke the old one.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-leak-detection.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ACCOUNT_NAME=\"your-account-name\"\nexport BUCKET_NAME=\"your-bucket-name\"\nexport CONSUMER_NAME=\"your-consumer-name\"\nexport ZUPLO_API_KEY=\"your-zuplo-api-key\"\n\ncurl --request POST \\\n  --url https://dev.zuplo.com/v1/accounts/$ACCOUNT_NAME/key-buckets/$BUCKET_NAME/consumers/$CONSUMER_NAME/roll-key \\\n  --header 'Authorization: Bearer $ZUPLO_API_KEY' \\\n  --header 'Content-Type: application/json' \\\n  --data '\n{\n  \"expiresOn\": \"2024-01-01T00:00:00.000Z\"\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Configuring Set Headers Inbound Policy in Zuplo\nDESCRIPTION: JSON configuration for the 'Add or Set Request Headers' policy that adds the backend secret as a header to outbound requests. It uses the environment variable accessed through the $env selector.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/securing-backend-shared-secret.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"set-backend-secret\",\n  \"policyType\": \"set-headers-inbound\",\n  \"handler\": {\n    \"export\": \"SetHeadersInboundPolicy\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"headers\": [\n        {\n          \"name\": \"backend-secret\",\n          \"value\": \"$env(BACKEND_SECRET)\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Portal Authentication Settings in JSON\nDESCRIPTION: Example configuration showing the correct structure for dev portal authentication settings. Demonstrates proper setup of the devPortalClient with required audience property, along with other authentication parameters like authority, jwksUrl, and provider settings.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors/invalid-settings-dev-portal-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableAuthentication\": true,\n  \"authentication\": {\n    \"authority\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX\",\n    \"jwksUrl\": \"https://dev-123566.okta.com/oauth2/ausXXXXXXXXXXXX/v1/keys\",\n    \"provider\": \"Okta\",\n    \"devPortalClient\": {\n      \"clientId\": \"XXXXXXXXXXXX\",\n      \"audience\": \"api://my-api\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Zuplo Identity Token in TypeScript\nDESCRIPTION: This code demonstrates how to generate a Zuplo Identity Token from within a policy, handler, or module in a Zuplo API. It uses the ZuploServices.getIDToken method, with an optional audience parameter to identify the target service.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-id-token.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploServices, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function handler(\n  request: ZuploRequeset,\n  context: ZuploContext,\n) {\n  const idToken = await ZuploServices.getIDToken(context, {\n    audience: \"https://my-api.example.com\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data Properties to OpenAPI Route Configuration in JSON\nDESCRIPTION: This snippet demonstrates how to add custom data to an OpenAPI route definition using the x-custom property. The example shows a GET route with a custom property containing a hello:world key-value pair.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/route-raw.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/my-route\": {\n    \"get\": {\n      // highlight-start\n      \"x-custom\": {\n        \"hello\": \"world\"\n      },\n      // highlight-end\n      \"operationId\": \"c18da63b-bd4d-433f-a634-1da9913958c0\",\n      \"x-zuplo-route\": {\n        \"handler\": {\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"export\": \"urlForwardHandler\",\n          \"options\": {\n            \"baseUrl\": \"https://echo.zuplo.io\",\n            \"forwardSearch\": true\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching with Custom Headers and Removing Existing Cache Headers in TypeScript\nDESCRIPTION: This example demonstrates how to cache a response with custom headers while removing existing cache-related headers, using TypeScript and the Cache API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = new Request(`https://echo.zuplo.io`);\nconst cache = await caches.open(\"MY_CACHE\");\nconst response = await fetch(request);\n\n// Create a new Headers object and add existing response headers\nconst headers = new Headers(response.headers);\n\n// Set the cache max age\nheaders.set(\"Cache-Control\", \"max-age=604800\");\n\n// Just in case the original response included other cache\n// headers, remove them\nheaders.delete(\"Expires\");\nheaders.delete(\"ETag\");\nheaders.delete(\"Last-Modified\");\n\n// Create a new request with the cache headers\nconst cachedResponse = new Response(response, {\n  headers,\n});\n\n// Add the response to the cache\nawait cache.put(request, cachedResponse);\n```\n\n----------------------------------------\n\nTITLE: Async Operation Management with waitUntil\nDESCRIPTION: Shows how to use context.waitUntil to manage asynchronous operations that need to complete before the runtime shuts down.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-context.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst asyncWork = async () => {\n  await fetch(\"https://supa-logger.io/my-logging-url\", {\n    method: \"POST\",\n    body: \"some-logging-info\",\n  });\n};\n\n// start the call and tell the runtime to stay alive until it's done\ncontext.waitUntil(asyncWork());\n\nreturn response;\n```\n\n----------------------------------------\n\nTITLE: DataDog Logging Plugin Configuration\nDESCRIPTION: Modern way to configure the DataDog logging plugin using the plugin system, which replaces the legacy context.custom approach for setting tags and fields.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/compatibility-dates.md#2025-04-08_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new DataDogLoggingPlugin({\n      url: \"https://http-intake.logs.datadoghq.com/api/v2/logs\",\n      apiKey: environment.DATADOG_API_KEY,\n      source: \"MyAPI\", // Optional, defaults to \"Zuplo\"\n      tags: {\n        tag: \"hello\",\n      },\n      fields: {\n        field1: \"value1\",\n        field2: \"value2\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Hydrolix Logger Configuration in Zuplo\nDESCRIPTION: Basic setup for the Hydrolix Request Logger Plugin using the default log entry format. This configuration uses predefined fields like deploymentName, timestamp, requestId, and various geographic data points from the request.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/plugin-hydrolix-traffic-peak.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  environment,\n  HydrolixRequestLoggerPlugin,\n  HydrolixDefaultEntry,\n  defaultGenerateHydrolixEntry,\n} from \"@zuplo/runtime\";\n\nruntime.addPlugin(\n  new HydrolixRequestLoggerPlugin<HydrolixDefaultEntry>({\n    hostname: \"your-hydrolix-hostname.com\",\n    username: \"your-hydrolix-username\",\n    password: environment.HYDROLIX_PASSWORD,\n    token: environment.HYDROLIX_TOKEN,\n    table: \"your-table.name\",\n    transform: \"your-transform-name\",\n    generateLogEntry: defaultGenerateHydrolixEntry,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Resolution Paths (JSON)\nDESCRIPTION: This snippet shows how to configure the tsconfig.json file to resolve module paths without using relative path indicators. It adds the 'paths' setting to the compiler options to map module imports to specific directories.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tsconfig.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"modules/*\": [\"./modules/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Restriction for AWS Cloudfront\nDESCRIPTION: Policy configuration to restrict access to Zuplo API Gateway to only AWS Cloudfront IP addresses using the IP Address Restriction policy. Uses a built-in list of Cloudfront IP addresses.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-aws-waf-shield.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"allow-cloudfront-only\",\n  \"policyType\": \"ip-address-restriction-inbound\",\n  \"handler\": {\n    \"export\": \"IPAddressRestrictionInbound\",\n    \"module\": \"$import(@zuplo/runtime)\",\n    \"options\": {\n      \"allowedIpAddresses\": [\"list:aws-cloudfront\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Data Structure in JSON\nDESCRIPTION: This JSON structure shows the complete subscription details returned by the getSubscription method, including plan IDs, subscription status, billing information, customer details, and meter consumption data. If no subscription exists, getSubscription will return undefined.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/monetization-subscription.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"sbsc_n8y6RkUYmAthRGt4tUM8EePt\",\n  \"planIds\": [\"plan_1GkE37DZRQs29J2PpXC0sTjB\"],\n  \"planExternalIds\": [\"prod_PbcDg7ohd8QzCj\"],\n  \"createdOn\": \"2024-02-23T21:16:59Z\",\n  \"updatedOn\": \"2024-02-23T21:16:59Z\",\n  \"quotaResetAnchor\": \"2024-02-23T21:16:59Z\",\n  \"status\": \"active\",\n  \"type\": \"periodic\",\n  \"renewalStrategy\": \"monthly\",\n  \"region\": \"us-central1\",\n  \"customerKey\": \"0bcdec7c-ee20-439f-914a-a38f5d8256b3\",\n  \"subscriptionExternalId\": \"sub_1On673I1Q9RiM35BdA28auPZ\",\n  \"customerExternalId\": \"cus_PcKmSeuE3fiVAY\",\n  \"metadata\": {\n    \"subscriber\": {\n      \"email\": \"example@example.com\",\n      \"sub\": \"auth0|65d9dab23c1p7e25f84b8b09\"\n    }\n  },\n  \"nextBillingCycle\": \"2024-03-23T00:00:00Z\",\n  \"meters\": {\n    \"requests\": {\n      \"max\": 10,\n      \"available\": 10\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Consumers by Tags\nDESCRIPTION: Retrieves consumers with their API keys filtered by organization ID tag\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/api-key-api.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport ORG_ID=1234\ncurl \\\n  https://dev.zuplo.com/v1/accounts/$ACCOUNT_NAME/key-buckets/$BUCKET_NAME/consumers/?include-api-keys=true&key-format=visible&tag.orgId=$ORG_ID \\\n  --header \"Authorization: Bearer $API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Importing Local OpenAPI Files in Zuplo\nDESCRIPTION: Demonstrates how to import local OpenAPI files (JSON or YAML) into a Zuplo project. The file format is inferred from the file extension.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/project.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzuplo project import-openapi --source /path/to/openapi.json\nzuplo project import-openapi --source /path/to/openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Making GET Request with cURL to Zuplo API\nDESCRIPTION: Demonstrates how to make a basic GET request to the Zuplo Developer API's who-am-i endpoint using cURL with API key authentication.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/developer-api.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://dev.zuplo.com/v1/who-am-i \\\n  --header 'Authorization: Bearer YOUR_KEY_HERE'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Authentication for Backstage in YAML\nDESCRIPTION: YAML configuration for setting up GitHub authentication in Backstage's app-config.yaml. This enables Backstage to access private GitHub repositories when fetching API definitions.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  allowGuestAccess: true\n  environment: development\n  providers:\n    github:\n      development:\n        clientId: ${GITHUB_CLIENT_ID}\n        clientSecret: ${GITHUB_CLIENT_SECRET}\n        signIn:\n          resolvers:\n            - resolver: emailMatchingUserEntityProfileEmail\n            - resolver: usernameMatchingUserEntityName\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Shows the format for setting environment variables in a .env file.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMY_VAR=example\n```\n\n----------------------------------------\n\nTITLE: Describing a Zuplo Tunnel in Bash\nDESCRIPTION: This snippet demonstrates how to get detailed information about a specific tunnel using the 'zuplo tunnel describe' command with the tunnel ID. It assumes that the ZUPLO_API_KEY environment variable is set.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For brevity, the commands assume that you have exported your API key as an environment variable,\n# export ZUPLO_API_KEY=zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\n\nzuplo tunnel describe --tunnel-id tnl_xxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Conditional Policy Execution\nDESCRIPTION: Example of using invokeInboundPolicy to conditionally execute policies based on request parameters.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-context.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  if (request.query.foo === \"bar\") {\n    // \"my-policy\" is the name given to your policy in policies.json\n    return context.invokeInboundPolicy(\"my-policy\", request);\n  }\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Query Strings in Zuplo Handler\nDESCRIPTION: Example demonstrating how to access query string parameters from a URL. Query parameters are accessible through the request.query object.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/custom-handler.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// GET /foos?productId=xkcd&carId=1234\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  return request.query.productId + request.query.carId;\n}\n\n// returns xkcd1234\n```\n\n----------------------------------------\n\nTITLE: Updating Zuplo Tunnel Services Configuration in Bash\nDESCRIPTION: This snippet shows how to update the services configuration for a Zuplo tunnel using the 'zuplo tunnel services update' command. It requires specifying the path to the configuration file and the tunnel ID.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/tunnels.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzuplo tunnel services update \\\n--configuration-file <path-to-your-configuration-file> \\\n--tunnel-id <your-tunnel-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAPI Extensions in Routes Definition\nDESCRIPTION: Example of adding custom extension data (x-my-custom-config) to an OpenAPI route configuration. Shows how to structure the routes.oas.json file with custom extensions and Zuplo-specific configurations.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/use-openapi-extension-data.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"/hello\": {\n      \"x-zuplo-path\": {\n        \"pathMode\": \"open-api\"\n      },\n\n      \"get\": {\n        \"summary\": \"Hello World\",\n        \"x-my-custom-config\": 10,\n        \"x-zuplo-route\": {\n          \"corsPolicy\": \"none\",\n          \"handler\": {\n            \"export\": \"default\",\n            \"module\": \"$import(./modules/route-data)\",\n            \"options\": {}\n          },\n          \"policies\": {\n            \"inbound\": []\n          }\n        },\n        \"operationId\": \"8914135b-d7b5-49fc-9e41-a8256a0dcf93\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Endpoint\nDESCRIPTION: Shows how to execute tests against a specific endpoint using the Zuplo test command.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzuplo test --endpoint https://your-zup.example.com\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name or Regex in Zuplo CLI\nDESCRIPTION: Example showing how to use labels and filters to selectively run tests with the Zuplo CLI. This approach helps organize tests into categories that can be run individually during development.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, it } from \"@zuplo/test\";\nimport { expect } from \"chai\";\n\n/**\n * This example shows how to filter the test by the name in the describe() function.\n * You can run `zuplo test --filter '#labelA'`\n * If you want to use regex, you can do `zuplo test --filter '/#label[Aa]/'`\n */\ndescribe(\"[#labelA #labelB] Addition\", () => {\n  it(\"should add positive numbers\", () => {\n    expect(1 + 4).to.equals(5);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Inline\nDESCRIPTION: Demonstrates how to set environment variables when running tests from the command line.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMY_VAR=example zuplo test --endpoint https:/your-zup.example.com\n```\n\n----------------------------------------\n\nTITLE: Using Cache Delete Method in TypeScript\nDESCRIPTION: This example shows how to use the delete method of the Cache interface to remove a cached entry for a given request.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait cache.delete(request);\n```\n\n----------------------------------------\n\nTITLE: Constructing ZoneCache in TypeScript\nDESCRIPTION: Creates a new ZoneCache instance by specifying a name and passing the current ZuploContext. This is used to initialize the shared cache for storing data.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zone-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// create a new cache by specifying a name and\n// passing current ZuploContext\nconst cache = new ZoneCache(\"name-of-your-cache\", context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Zuplo Deployment Polling Timeout\nDESCRIPTION: Example of configuring environment variables to adjust the polling timeout for Zuplo deployments. This is useful for large projects that may require more time to complete deployment.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/deployments.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOLL_INTERVAL=5000 MAX_POLL_RETRIES=300 zuplo deploy\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenAPI Extension Data in TypeScript Handler\nDESCRIPTION: TypeScript module demonstrating how to access custom OpenAPI extension data through the ZuploContext object using the route.raw() method. Shows logging of custom configuration values.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/use-openapi-extension-data.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  const routeData = context.route.raw();\n  const myCustomConfig = routeData[\"x-my-custom-config\"];\n\n  // Logs \"Customer config, 10\"\n  context.log.debug(\"Custom config\", myCustomConfig);\n\n  return \"Hello\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zuplo CLI globally with npm in Bash\nDESCRIPTION: Command to install the Zuplo CLI tool globally using npm package manager. This makes the 'zuplo' command available system-wide for interacting with Zuplo services.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/installation.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g zuplo\n```\n\n----------------------------------------\n\nTITLE: Creating a New ZuploRequest Object\nDESCRIPTION: Shows how to create a fresh ZuploRequest object, which can be useful inside policies to forward to the next policy or handler in the chain. The example demonstrates setting the URL, method, headers, and body.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-request.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst newRequest = new ZuploRequest(\"http://new-host.com/\", {\n  method: \"POST\",\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n  body: \"test\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Zuplo Testing\nDESCRIPTION: GitHub Actions workflow configuration that runs tests after a successful Zuplo deployment. This workflow uses the deployment_status event to trigger testing and passes the environment URL to the test commands for validating the deployed API.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/testing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Main\non: [deployment_status]\n\njobs:\n  test:\n    name: Test API Gateway\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: \".nvmrc\"\n\n      - name: Run Tests\n        # Useful properties 'environment', 'state', and 'environment_url'\n        run:\n          API_URL=${{ toJson(github.event.deployment_status.environment_url) }}\n          npx zuplo test --endpoint $API_URL\n```\n\n----------------------------------------\n\nTITLE: Span Structure Visualization\nDESCRIPTION: Text representation of the resulting span structure showing the hierarchy of spans created by the custom tracing implementation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/opentelemetry.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n|--- my-policy\n|    |\n|    |--- my-span\n|    |    |\n|    |    |--- GET https://api.example.com/hello\n|    |    |\n|    |    |--- GET https://api.example.com/world\n```\n\n----------------------------------------\n\nTITLE: Defining CacheStorage Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for CacheStorage, which provides the open method to access or create named Cache instances.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CacheStorage {\n  open(cacheName: string): Promise<Cache>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch Settings for Zuplo Gateway Debugging\nDESCRIPTION: This JSON configuration sets up VS Code to attach to a Node.js process for debugging the Zuplo Gateway. It specifies the debugger type, request method, and port to connect to.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-debugging.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"name\": \"Zuplo Gateway\",\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"restart\": true,\n      \"port\": 9229\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Basic Proxied API Endpoint\nDESCRIPTION: The response text received when successfully proxying the API endpoint at /path-0. It reveals that there's a secret endpoint available at /policies-test/secret.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/step-1-setup-basic-gateway.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"Congratulations - You've successfully proxied my API endpoint. Want to know a secret? Try changing your Route's path to /policies-test/secret and test your route again after saving. The secret will be in the response.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Contents of .env.zuplo File for Zuplo Local Development\nDESCRIPTION: This code snippet shows the structure and content of the .env.zuplo file generated when linking a local Zuplo gateway to a remote project. It contains essential information such as the account name, project name, and environment type, which are used to configure the local development environment.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-services.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This file is auto-generated from zuplo link. Please don't edit it manually.\n# It will be auto-generated afresh the next time you run zuplo link.\n# If you wish to add your own environment variables, create a separate .env file.\n\nZUPLO_ACCOUNT_NAME=your-account-name\nZUPLO_PROJECT_NAME=your-project-name\nZUPLO_ENVIRONMENT_TYPE=your-environment\n```\n\n----------------------------------------\n\nTITLE: Starting Zuplo Gateway in Debug Mode\nDESCRIPTION: This bash command starts the Zuplo gateway in debug mode, specifying the debug port that matches the one in the VS Code launch configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-debugging.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zuplo dev --debug-port 9229\n```\n\n----------------------------------------\n\nTITLE: Updating the Zuplo CLI to the Latest Version\nDESCRIPTION: Command to update the Zuplo CLI to the latest version using npm. The @latest tag is required to ensure getting the most recent version rather than using a cached older version.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-troubleshooting.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zuplo@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI URL Format Example with Special Characters\nDESCRIPTION: Example of URLs with special characters in the OpenAPI format that are now properly escaped with the 2025-02-06 compatibility date.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/compatibility-dates.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n/accounts/open({id})\n/accounts/:action\n```\n\n----------------------------------------\n\nTITLE: Injecting Basic HTML Script\nDESCRIPTION: Example of injecting a simple JavaScript console log into the developer portal through _inject.html file which is added at the end of the body tag.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-inject-html.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  console.log(\"Hello from Zuplo!\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Expected Output After Project Creation\nDESCRIPTION: Commands that will be displayed after successful project creation, showing how to navigate to project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development.mdx#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <your-new-project-directory>\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Default zuplo.jsonc Configuration in JSONC\nDESCRIPTION: This snippet shows the default configuration for the zuplo.jsonc file. It includes the version number and a compatibility date, which are used to control the runtime environment behavior for the project.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zuplo-json.md#2025-04-08_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"version\": 1,\n  \"compatibilityDate\": \"2025-02-06\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Zuplo API Project with NPX\nDESCRIPTION: Command to initialize a new Zuplo API project using NPX. This will prompt for project name and configuration options to set up a local development environment.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/getting-started.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zuplo-api@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In Route Handler with Developer Portal Session Creation\nDESCRIPTION: This code implements the sign-in route handler that authenticates the user with Supabase and creates a session on the Developer Portal. It handles form submission, authenticates the user, and redirects them based on the authentication result.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createRouteHandlerClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\n\nexport const dynamic = \"force-dynamic\";\n\nexport async function POST(request: Request) {\n  const requestUrl = new URL(request.url);\n  const formData = await request.formData();\n  const email = String(formData.get(\"email\"));\n  const password = String(formData.get(\"password\"));\n  const supabase = createRouteHandlerClient({ cookies });\n\n  // Read the user data from the sign-in response\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  if (error) {\n    return NextResponse.redirect(\n      `${requestUrl.origin}/login?error=Could not authenticate user`,\n      {\n        // a 301 status is required to redirect from a POST to a GET route\n        status: 301,\n      },\n    );\n  }\n\n  // Call the sessionCreateUrl to create an auth session on the Dev Portal\n  const sessionCreateUrl = requestUrl.searchParams.get(\"session-create-url\");\n  if (sessionCreateUrl) {\n    const user = data.user;\n    // The sessionCreateUrl will already point to the correct environment\n    // (ex. working copy, prod, staging), so no additional configuration\n    // is needed.\n    const ssoResponse = await fetch(sessionCreateUrl, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `Bearer ${process.env.ZUPLO_API_KEY}`,\n      },\n      body: JSON.stringify({\n        email: user.email,\n        name: user.user_metadata?.full_name,\n        email_verified: user.confirmed_at != null,\n        sub: user.id,\n        picture: user.user_metadata?.avatar_url,\n      }),\n    });\n\n    if (!ssoResponse.ok) {\n      return NextResponse.redirect(\n        `${requestUrl.origin}/login?error=Could not authenticate user`,\n        {\n          status: 301,\n        },\n      );\n    }\n\n    // The session creation response will contain a redirectURI that your user\n    // must be redirected to in order to start their session\n    const { redirectUri } = await ssoResponse.json();\n    return NextResponse.redirect(redirectUri, {\n      status: 301,\n    });\n  }\n\n  // If the login doesn't originate from the Dev Portal, redirect back to the\n  // homepage\n  return NextResponse.redirect(requestUrl.origin, {\n    status: 301,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Zuplo Project to a Dedicated Managed Instance\nDESCRIPTION: Command to deploy a Zuplo project to a Dedicated Managed instance using the Zuplo CLI. Requires an API key and specifies the project name and target environment.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/getting-started.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zuplo deploy --api-key $ZUPLO_API_KEY --project your-project-name --environment my-env\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Archive Policy in JSON\nDESCRIPTION: JSON configuration for the request archive policy that specifies the policy type, handler module, and environment variable options for Azure Blob Storage credentials.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/archiving-requests-to-storage.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"request-archive-policy\",\n  \"policyType\": \"code-policy\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/archive-request-policy)\",\n    \"options\": {\n      \"blobCreateSas\": \"$env(BLOB_CREATE_SAS)\",\n      \"blobContainerPath\": \"$env(BLOB_CONTAINER_PATH)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Rewrites with Environment Variables in Zuplo\nDESCRIPTION: This snippet demonstrates how to use environment variables to specify backend origins for different environments. It combines the BASE_PATH environment variable with the request pathname to generate a complete URL for rewrites.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/environments.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n${env.BASE_PATH}${pathname}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Zuplo Project\nDESCRIPTION: These commands add a remote repository to the local Zuplo project, commit the initial changes, and push them to the remote repository.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/source-control.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/my-org/my-repo\ngit commit -m \"Initial commit\"\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Monetization Plugin in Zuplo Runtime\nDESCRIPTION: This code snippet demonstrates how to create and register the Stripe Monetization Plugin in the Zuplo runtime. It requires setting the webhook signing secret and Stripe secret key from environment variables.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/stripe-monetization-plugin.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  StripeMonetizationPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  // Create the Stripe Plugin\n  const stripe = new StripeMonetizationPlugin({\n    webhooks: {\n      signingSecret: environment.STRIPE_WEBHOOK_SIGNING_SECRET,\n    },\n    stripeSecretKey: environment.STRIPE_SECRET_KEY,\n  });\n  // Register the plugin\n  runtime.addPlugin(stripe);\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Workflow for Updating Zuplo API from OpenAPI\nDESCRIPTION: This YAML configuration defines a GitHub Action workflow that updates a Zuplo API when changes are pushed to the main branch. It generates an OpenAPI file, updates the Zuplo API repository, and creates a pull request with the changes.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/update-zup-in-github-action.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Update Zuplo API\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Update Zuplo from OpenAPI\n    runs-on: ubuntu-latest\n\n    env:\n      REPO_OWNER: my-org\n      # the repository with your Zuplo API\n      REPO_NAME: my-zuplo-api\n      # the branch you want to update\n      REPO_BRANCH: main\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          # Override the default token because the built\n          # in token can't trigger other workflows\n          # https://github.community/t/github-actions-workflow-not-triggering-with-tag-push/17053/2\n          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}\n\n      - uses: actions/checkout@v4\n        with:\n          repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}\n          path: temp\n          ref: ${{ env.REPO_BRANCH }}\n          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}\n\n      - name: Use Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20.x\n          cache: \"npm\"\n\n      # Run your build/generate scripts here to generate the OpenAPI file\n      - run: GENERATE OPEN API FILE HERE\n\n      # Run your script to update the Zuplo API from the OpenAPI file\n      # NOTE: This script is something you write based on your requirements\n      - name: Update the OpenAPI File\n        run: node ./scripts/update-zup-from-openapi.mjs\n\n      - run: git config --global user.email \"bot@example.com\"\n      - run: git config --global user.name \"Updater Bot\"\n\n      - name: Commit Changes\n        run: |\n          git checkout -b \"zup_${{ github.action_ref}}\"\n          git add -A\n          git commit -m \"Update OpenAPI File From ${{ github.repository }}\"\n          git push origin head\n\n      - name: Open a Pull Request\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}\n          script: |\n            const result = await github.rest.pulls.create({\n              title: \"Update OpenAPI File From ${{ github.repository }}\",\n              owner: \"${{ env.REPO_OWNER }}\",\n              repo: \"${{ env.REPO_NAME }}\",\n              head: \"zup_${{ github.action_ref}}\",\n              base: \"${{ env.REPO_BRANCH }}\",\n              body: [\n                'This PR is auto-generated by a GitHub Action.',\n                'Add more information here.'\n              ].join('\\n')\n            });\n\n            // Update the Summary\n            // You can do a lot more with this, see the core toolkit documentation\n            // SEE: https://github.com/actions/toolkit/tree/main/packages/core#populating-job-summary\n            await core.summary.addRaw(`Github Pull Request Opened. [Pull Request](${result.html_url}), true)\n```\n\n----------------------------------------\n\nTITLE: Testing Zuplo Gateway with curl\nDESCRIPTION: A curl command to test the Zuplo gateway endpoint after setting up the GCP Service Auth Policy, showing that the gateway can now successfully proxy requests to the secured backend.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/gke-with-upstream-auth-policy.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://zuplo-gateway.example.com\nHello, world!\nVersion: 1.0.0\nHostname: web-58756b54cc-7hdcw\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Project Structure for Multiple Zuplo Projects\nDESCRIPTION: This code snippet shows the directory structure for two nested Zuplo projects within a single repository. Each project contains its own configuration files, modules, and Zuplo configuration (zuplo.jsonc).\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnested-projects\n├── zup-cli-nested-project1\n│   ├── README.md\n│   ├── config\n│   ├── docs\n│   ├── local-config\n│   ├── modules\n│   ├── package.json\n│   ├── schemas\n│   ├── tests\n│   ├── tsconfig.json\n│   └── zuplo.jsonc\n└── zup-cli-nested-project2\n    ├── README.md\n    ├── config\n    ├── docs\n    ├── local-config\n    ├── modules\n    ├── package.json\n    ├── schemas\n    ├── tests\n    ├── tsconfig.json\n    └── zuplo.jsonc\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Pipeline for Zuplo\nDESCRIPTION: GitHub Actions workflow configuration for deploying and testing Zuplo APIs. Includes steps for installation, deployment, testing, and cleanup of environments.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Zuplo CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  run-zup-test:\n    runs-on: ubuntu-latest\n    env:\n      ZUPLO_API_KEY: ${{ secrets.ZUPLO_API_KEY }}\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - run: npm install\n\n      - name: Zuplo Deploy\n        shell: bash\n        run: |\n          npx zuplo deploy --apiKey \"$ZUPLO_API_KEY\" 2>&1 | tee ./DEPLOYMENT_STDOUT\n\n      - name: Zuplo Test\n        shell: bash\n        run: |\n          npx zuplo test --endpoint $(cat ./DEPLOYMENT_STDOUT | grep \"Deployed to\" | sed -n -E 's/.*Deployed to (https:\\/\\/[^ ]+).*/\\1/p')\n\n      - name: Zuplo Delete\n        if: ${{ github.event_name == 'pull_request' }}\n        shell: bash\n        run: |\n          npx zuplo delete --url $(cat ./DEPLOYMENT_STDOUT |  sed -E 's/Deployed to (.*)/\\1/') --apiKey \"$ZUPLO_API_KEY\" --wait\n\n      - name: Zuplo List\n        shell: bash\n        run: |\n          npx zuplo list --apiKey \"$ZUPLO_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Complexity Limit in Zuplo\nDESCRIPTION: Extended configuration for the GraphQL Complexity Limit policy that includes both depth limiting and complexity limiting. This policy prevents both deeply nested queries and overly complex queries by setting limits on depth (20) and overall complexity (50).\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/graphql-security.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\n    {\n      \"name\": \"graphql-complexity-limit-policy\",\n      \"policyType\": \"graphql-complexity-limit-inbound\",\n      \"handler\": {\n        \"export\": \"GraphQLComplexityLimitInboundPolicy\",\n        \"module\": \"$import(@zuplo/graphql)\",\n        \"options\": {\n          \"useDepthLimit\": {\n            \"depthLimit\": 20\n          },\n          \"useComplexityLimit\": {\n            \"complexityLimit\": 50,\n            \"endpointUrl\": \"https://api.example.com/graphql\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Zuplo Project Directory Structure\nDESCRIPTION: Shows the directory structure of a Zuplo project, highlighting the key folders and files used for the developer portal. This includes the config directory, modules directory, and the docs directory with its associated files.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-setup.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmy-project/\n├── config/\n│   ├── dev-portal.json\n│   └── routes.oas.json\n├── modules/\n└── docs/\n    ├── index.md\n    ├── sidebar.json\n    └── theme.css\n```\n\n----------------------------------------\n\nTITLE: Building Zuplo Documentation Static Files\nDESCRIPTION: Generates static HTML content in the build directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/zuplo/docs/blob/main/README.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Linking Zuplo API to a Component in Backstage YAML\nDESCRIPTION: YAML configuration that links a previously defined Zuplo API to an existing component in Backstage. This establishes the relationship between the API and the component that provides it.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: example-website\nspec:\n  type: website\n  lifecycle: experimental\n  owner: guests\n  system: examples\n  providesApis: [backstage-sample-api] # This must match the metadata.name of the entity\n---\n```\n\n----------------------------------------\n\nTITLE: Running Zuplo Docs Development Server\nDESCRIPTION: Starts a local development server with hot-reload capabilities for real-time preview of documentation changes.\nSOURCE: https://github.com/zuplo/docs/blob/main/README.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Authentication Provider to Backstage in TypeScript\nDESCRIPTION: TypeScript code to add GitHub authentication provider to Backstage backend. This needs to be added to the index.ts file before starting the backend.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbackend.add(import(\"@backstage/plugin-auth-backend-module-github-provider\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Policy for Bypassing Monetization in TypeScript\nDESCRIPTION: This TypeScript code implements the custom policy logic. It checks for a 'testApiKey' flag in the user's data. If present, it bypasses the monetization policy; otherwise, it invokes the original policy.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/bypass-policy-for-testing.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\nexport default async function policy(\n  request: ZuploRequest,\n  context: ZuploContext,\n) {\n  if (request.user.data.testApiKey === true) {\n    context.log.info(\"Bypassing monetization-inbound policy for testing.\");\n    return request;\n  }\n\n  return context.invokeInboundPolicy(\"monetization-inbound\", request);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding searchParams to Login Component in Next.js\nDESCRIPTION: This code adds the searchParams prop to the Login component to read the session-create-url parameter from the URL. This allows the component to access query parameters passed to the login page.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Login({\n  searchParams,\n}: {\n  searchParams?: { [key: string]: string | string[] | undefined };\n});\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Structure\nDESCRIPTION: This JSON snippet shows the structure of a sample response from the /todos API, which will be modified by the outbound policy.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  },\n  {\n    \"userId\": 1,\n    \"id\": 2,\n    \"title\": \"quis ut nam facilis et officia qui\",\n    \"completed\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Data with ContextData Instance Method\nDESCRIPTION: Example of using instance-based get() method to retrieve request-specific data\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/context-data.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myData = new ContextData(\"my-data\");\nconst data = myData.get(context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Policy in Zuplo JSON\nDESCRIPTION: This JSON snippet shows how to configure a custom outbound policy in the Zuplo policies configuration file.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\n    {\n      \"name\": \"my-first-policy\",\n      \"policyType\": \"custom-code-outbound\",\n      \"handler\": {\n        \"export\": \"default\",\n        \"module\": \"$import(./modules/my-first-policy)\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Cache Instance in TypeScript\nDESCRIPTION: This example demonstrates how to open a named cache using the CacheStorage interface in TypeScript.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = await caches.open(\"MY_CACHE\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Custom Policy in Zuplo JSON\nDESCRIPTION: This JSON snippet demonstrates how to wire up a custom outbound policy to a specific route in the Zuplo route configuration file.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"paths\": {\n  \"x-zuplo-path\": {\n    \"pathMode\": \"open-api\"\n  },\n  \"get\": {\n    \"summary\": \"New Route\",\n    \"description\": \"\",\n    \"x-zuplo-route\": {\n      \"corsPolicy\": \"none\",\n      \"handler\": {\n        \"export\": \"urlForwardHandler\",\n        \"module\": \"$import(@zuplo/runtime)\",\n        \"options\": {\n          \"baseUrl\": \"https://getting-started.zuplo.io\"\n        }\n      },\n      \"policies\": {\n        \"inbound\": [],\n        \"outbound\": [\n          \"my-first-policy\",\n        ]\n      }\n    },\n}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete CAA Records Configuration\nDESCRIPTION: Comprehensive CAA record configuration showing both Let's Encrypt and Google Trust Services entries with wildcard support.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-domains.md#2025-04-08_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n# CAA records added by Let's Encrypt\n0 issue \"letsencrypt.org\"\n0 issuewild \"letsencrypt.org\"\n\n# CAA records added by Google Trust Services\n0 issue \"pki.goog; cansignhttpexchanges=yes\"\n0 issuewild \"pki.goog; cansignhttpexchanges=yes\"\n```\n\n----------------------------------------\n\nTITLE: Portal Event Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of the user identification event data that includes user details like sub, name, email, and verification status.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-inject-html.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdentifyEvent {\n  sub: string;\n  name?: string;\n  email: string;\n  email_verified: boolean;\n  picture?: string;\n  id_token?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream GCP Service Auth Policy for Google Cloud Storage in JSON\nDESCRIPTION: This JSON configuration sets up the Upstream GCP Service Auth Policy for authorizing Zuplo API to upload to a GCP bucket. It specifies the required scope for read and write access to Google Cloud Storage.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/archive-request-gcp-storage-inbound/doc.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"UpstreamGcpServiceAuthInboundPolicy\",\n  \"module\": \"$import(@zuplo/runtime)\",\n  \"options\": {\n    \"expirationOffsetSeconds\": 300,\n    \"scopes\": [\"https://www.googleapis.com/auth/devstorage.read_write\"],\n    \"serviceAccountJson\": \"$env(SERVICE_ACCOUNT_JSON)\",\n    \"tokenRetries\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Named Groups in Dynamic Paths with JSON (JavaScript)\nDESCRIPTION: This example illustrates how named groups in a path pattern are parsed into the 'params' object. It shows the result of matching a path with both a named parameter and a named regex group.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/advanced-path-matching.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productId\": \"pizza\",\n  \"imageIndex\": \"2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Error List with React JSX\nDESCRIPTION: Creates an unordered list of error links using React JSX syntax. Maps through the errors array to generate links to individual error pages using the error ID and title.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/errors.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ul>\n  {errors.map(({ title, id }) => (\n    <li key={id}>\n      <a href={`./errors/${id}`}>{title}</a>\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Starting Zuplo Gateway Locally\nDESCRIPTION: Command to start the Zuplo Gateway in local development mode after project setup is complete.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development.mdx#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Zuplo\nDESCRIPTION: Bitbucket Pipelines configuration for deploying and testing Zuplo APIs. Includes steps for installation, deployment, testing, and environment cleanup.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:18\n\npipelines:\n  branches:\n    main:\n      - step:\n          name: NPM Install\n          script:\n            - npm install\n      - step:\n          name: Zuplo Deploy\n          script:\n            - set -o pipefail\n            - npx zuplo deploy --apiKey \"$ZUPLO_API_KEY\" 2>&1 | tee ./DEPLOYMENT_STDOUT\n          artifacts:\n            - DEPLOYMENT_STDOUT\n      - step:\n          name: Zuplo Test\n          script:\n            - npx zuplo test --endpoint $(cat ./DEPLOYMENT_STDOUT |  sed -n -E 's/.*Deployed to (https:\\/\\/[^ ]+).*/\\1/p')\n      - step:\n          name: Zuplo Delete (if necessary)\n          script:\n            - echo $BITBUCKET_PR_ID\n            - if [[ -n \"$BITBUCKET_PR_ID\" ]]; then npx zuplo delete --url $(cat ./DEPLOYMENT_STDOUT |  sed -n -E 's/.*Deployed to (https:\\/\\/[^ ]+).*/\\1/p') --apiKey \"$ZUPLO_API_KEY\" --wait; exit; fi\n```\n\n----------------------------------------\n\nTITLE: Using Custom Policy Options in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use custom policy options in the policy handler function, including type definition for the options.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-outbound/doc.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyPolicyOptionsType = {\n  you: string;\n  specify: string;\n  here: number;\n};\nexport default async function (\n  response: Response,\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: MyPolicyOptionsType,\n  policyName: string,\n) {\n  // your policy code goes here, and can use the options to perform any\n  // configuration\n  context.log.info(options.you);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zuplo Developer Portal for Clerk OIDC Authentication\nDESCRIPTION: JSON configuration for the dev-portal.json file that enables authentication through Clerk. The configuration uses environment variables for the Clerk issuer and client ID, enabling OpenID Connect (OIDC) authentication while keeping credentials secure.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-clerk-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://cdn.zuplo.com/schemas/dev-portal.json\",\n  \"enabled\": true,\n  \"enableAuthentication\": true,\n  \"requireAuthentication\": false,\n  \"authentication\": {\n    \"provider\": \"oidc\",\n    \"issuer\": \"$env(ZUPLO_PUBLIC_CLERK_ISSUER)\",\n    \"clientId\": \"$env(ZUPLO_PUBLIC_CLERK_CLIENT_ID)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated API Test Example\nDESCRIPTION: Shows how to write a test that includes authentication using environment variables and the TestHelper utility.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, it, TestHelper } from \"@zuplo/test\";\nimport { expect } from \"chai\";\n\ndescribe(\"API\", () => {\n  it(\"should make authorized request\", async () => {\n    const response = await fetch(TestHelper.TEST_URL, {\n      headers: {\n        Authorization: `Bearer ${TestHelper.environment.TEST_TOKEN}`,\n      },\n    });\n    expect(response.status).to.equal(200);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cache Match Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the match method of the Cache interface to retrieve a cached response for a given request.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/cache.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await cache.match(request);\n```\n\n----------------------------------------\n\nTITLE: Adding Signed Headers in Fastly VCL Snippet\nDESCRIPTION: This VCL snippet for Fastly adds a signed header to outgoing requests. It uses a shared secret stored in an Edge Dictionary to create a signature based on timestamp and datacenter information.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/waf-ddos-fastly.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\ndeclare local var.zuplo_auth_secret STRING;\nset var.zuplo_auth_secret = table.lookup(Zuplo, \"shared_secret\");\ndeclare local var.data STRING;\nset var.data = strftime({\"%s\"}, now) + \",\" + server.datacenter;\nset bereq.http.X-Signature = var.data + \",\" + digest.hmac_sha256(var.zuplo_auth_secret, var.data);\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Zuplo Projects Using CLI Commands\nDESCRIPTION: This code snippet demonstrates how to deploy two separate Zuplo projects using the Zuplo CLI. It includes changing directories, using specific API keys for each project, and using the --no-verify-remote flag to bypass repository verification.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/custom-ci-cd.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Let's deploy the first project\ncd zup-cli-nested-project1\nnpx zuplo deploy --api-key $YOUR_API_KEY_FOR_THE_ACCOUNT_THAT_CONTAINS_PROJECT1 --no-verify-remote\n\n\n# Let's deploy the second project\ncd ..\ncd zup-cli-nested-project2\nnpx zuplo deploy --api-key $YOUR_API_KEY_FOR_THE_ACCOUNT_THAT_CONTAINS_PROJECT2 --no-verify-remote\n```\n\n----------------------------------------\n\nTITLE: Deploying Zuplo API using CLI in Custom CI/CD Pipeline\nDESCRIPTION: This command uses the Zuplo CLI to deploy the API Gateway. It requires an API key, project name, and environment name as parameters.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dedicated/source-control.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zuplo deploy --api-key $ZUPLO_API_KEY --project your-project-name --environment my-env\n```\n\n----------------------------------------\n\nTITLE: Starting Zuplo Routes Designer Local Development Server\nDESCRIPTION: Command to start the local development environment which includes the Routes Designer on port 9100 and the Zuplo Gateway on port 9000.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development-routes-designer.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run dev\n\nStarted local development setup\nCtrl+C to exit\n\n🚀 Zuplo Gateway: http://localhost:9000\n📘 Route Designer: http://localhost:9100 # <-- Your local route designer\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Existing Project\nDESCRIPTION: Command to install necessary dependencies after cloning an existing Zuplo project from a Git repository.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/local-development.mdx#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level for Zuplo Tunnel\nDESCRIPTION: Environment variable configuration to set the log level for a Zuplo tunnel to debug mode. This enables verbose logging for troubleshooting network or IAM issues that might be blocking connections.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-troubleshooting.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nTUNNEL_LOGLEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA-256 Digest with Web Crypto API in JavaScript\nDESCRIPTION: This snippet demonstrates how to calculate a SHA-256 hash (digest) of text data using the Web Crypto API. It encodes the input text as an ArrayBuffer and processes it through the crypto.subtle.digest method.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/web-crypto-apis.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myText = new TextEncoder().encode(\"Hello world!\");\n\nconst myDigest = await crypto.subtle.digest(\n  {\n    name: \"SHA-256\",\n  },\n  myText, // The data you want to hash as an ArrayBuffer\n);\n\nconsole.log(new Uint8Array(myDigest));\n```\n\n----------------------------------------\n\nTITLE: Running Zuplo CLI Commands for Local Development\nDESCRIPTION: This code snippet showcases the main Zuplo CLI commands used for local development. It includes commands for running the API locally, starting a local Open API Designer, and linking account information to the local machine.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/local-development.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo --help\nzuplo <command>\n\nCommands:\n  zuplo dev       Runs the API locally\n  zuplo editor    Starts a local Open API Designer\n  zuplo link      Links information from your Zuplo account to your local machine\n```\n\n----------------------------------------\n\nTITLE: Implementing BackgroundLoader in TypeScript for Zuplo Gateway\nDESCRIPTION: This snippet demonstrates how to create and use a BackgroundLoader instance in a Zuplo gateway. It includes the loader function definition, BackgroundLoader instantiation with options, and usage in a request handler. The loader function fetches data from an external service, and the BackgroundLoader is configured with a 60-second TTL and 10-second loader timeout.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/background-loader.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\nimport { BackgroundLoader } from \"@zuplo/runtime\";\n\nconst loaderFunction = async (key: string) => {\n  // TODO - consider stronger error handling and checking here\n  const result = await fetch(`https://example-config-service.com/${key}`);\n  const data = await result.json();\n  return data;\n};\n\n// Create an instance of the component at the module level\n// Here with a cache expiry of 60s\n//\nconst bg = new BackgroundLoader(loaderFunction, {\n  ttlSeconds: 60,\n  loaderTimeoutSeconds: 10,\n});\n\nexport default async function (request: ZuploRequest, context: ZuploContext) {\n  // once an entry is cached this will return immediately. It will only block\n  // if the cache is empty or has expired.\n  const data = await backgroundLoader.get(request.params.loaderId);\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Spec Handler in routes.oas.json\nDESCRIPTION: Example route configuration that shows how to manually add the OpenAPI Spec handler to the routes.oas.json file. This creates a GET endpoint at /open-api-spec that serves the OpenAPI specification file with Zuplo-specific extensions removed and enriched with additional data based on gateway implementation.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/openapi.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"/open-api-spec\": {\n    \"get\": {\n      \"summary\": \"New Route\",\n      \"x-zuplo-route\": {\n        \"corsPolicy\": \"none\",\n        \"handler\": {\n          \"export\": \"openApiSpecHandler\",\n          \"module\": \"$import(@zuplo/runtime)\",\n          \"options\": {\n            \"openApiFilePath\": \"./config/routes.oas.json\"\n          }\n        },\n        \"policies\": {\n          \"inbound\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Zuplo API to Backstage Catalog in YAML\nDESCRIPTION: YAML configuration for defining a Zuplo API in Backstage's entities.yaml file. This registers the API in Backstage's catalog and specifies its OpenAPI definition source.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: API\nmetadata:\n  name: backstage-sample-api # Your API name\n  annotations:\n    # Your github project slug Ex. org/repo-name\n    github.com/project-slug: zuplo-samples/backstage-sample-api\nspec:\n  type: openapi\n  lifecycle: experimental # Change to match your backstage project\n  owner: guests # Change to match your backstage project\n  system: examples # Change to match your backstage project\n  definition:\n    # Change to match your Zuplo API\n    $text: https://backstage-sample-api-main-821019a.zuplo.app/openapi\n```\n\n----------------------------------------\n\nTITLE: Implementing PreRouting Hook in TypeScript\nDESCRIPTION: Example of adding a pre-routing hook that converts URLs to lowercase before route matching.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/runtime-extensions.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeExtensions } from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPreRoutingHook(async (request) => {\n    const nr = new Request(request.url.toLowerCase(), request);\n    return nr;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Integration Test Example\nDESCRIPTION: Demonstrates how to write a basic API test using fetch and chai assertions in TypeScript. The test validates the response body from an API endpoint.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/test.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, it, TestHelper } from \"@zuplo/test\";\nimport { expect } from \"chai\";\n\ndescribe(\"API\", () => {\n  it(\"should have a body\", async () => {\n    const response = await fetch(TestHelper.TEST_URL);\n    const result = await response.text();\n    expect(result).to.equal(JSON.stringify(\"What zup?\"));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying HMAC Signatures in TypeScript with Web Crypto\nDESCRIPTION: This function verifies an HMAC signature against a value and secret. It imports the key material, transforms the base64-encoded signature back to binary, and uses crypto.subtle.verify to perform a timing-attack-resistant verification.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/web-crypto-apis.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Verifies a value against a signature and secret\n * @param signature - The base64 encoded signature\n * @param value - The value to check\n * @param secret - the secret\n * @returns true if the signature is value against the given value and secret\n **/\nasync function verify(signature: string, value: string, secret: string) {\n  // You will need some super-secret data to use as a symmetric key.\n  const encoder = new TextEncoder();\n  const secretKeyData = encoder.encode(secret);\n\n  // Convert a ByteString (a string whose code units are all in the range\n  // [0, 255]), to a Uint8Array. If you pass in a string with code units larger\n  // than 255, their values will overflow.\n  function byteStringToUint8Array(byteString) {\n    const ui = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; ++i) {\n      ui[i] = byteString.charCodeAt(i);\n    }\n    return ui;\n  }\n\n  const key = await crypto.subtle.importKey(\n    \"raw\",\n    secretKeyData,\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"verify\"],\n  );\n\n  // The received MAC is Base64-encoded, so you have to go to some trouble to\n  // get it into a buffer type that crypto.subtle.verify() can read.\n  const receivedMac = byteStringToUint8Array(atob(signature));\n\n  // Use crypto.subtle.verify() to guard against timing attacks. Since HMACs use\n  // symmetric keys, you could implement this by calling crypto.subtle.sign() and\n  // then doing a string comparison -- this is insecure, as string comparisons\n  // bail out on the first mismatch, which leaks information to potential\n  // attackers.\n  const verified = await crypto.subtle.verify(\n    \"HMAC\",\n    key,\n    receivedMac,\n    encoder.encode(value),\n  );\n\n  return verified;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: General Platform Limits\nDESCRIPTION: A markdown table defining general platform limits including environment variables, request duration, memory allocation, and logging constraints across different subscription plans.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/limits.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                   | Description                                            | Limit                                                                                                                                                                |\n| ------------------------- | ------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Environment Variables     | The number of environment variables you can create     | Free/Builder Plans: 50 variables per environment, Other Plans: 100 per environment                                                                                   |\n| Environment Variable size | The size of an environment variable                    | ~5kb per variable                                                                                                                                                    |\n| Request Duration          | The maximum time a request can take to complete        | Free/Builder Plans: 30 seconds, Other Plans: No Limit                                                                                                                |\n| Memory                    | The maximum memory available when processing a request | Free/Builder Plans: 128mb, Enterprise Plans: Custom                                                                                                                  |\n| Requests per second       | The maximum number of requests per second              | No Limit outside of plan monthly limit                                                                                                                               |\n| Log Size                  | The size of a log entry                                | Zuplo Portal live logs are limited to ~10kB. Excess will be truncated. For third-party logging providers, the value depends on the provider. Zuplo imposes no limit. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage to Allow Zuplo Domains in YAML\nDESCRIPTION: YAML configuration for Backstage's app-config.yaml to allow reading from Zuplo domains. This enables Backstage to fetch OpenAPI specifications from Zuplo-hosted APIs.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/add-api-to-backstage.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  reading:\n    allow:\n      - host: \"*.zuplo.dev\"\n      - host: \"*.zuplo.app\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VMWare Log Insight Plugin in Zuplo Runtime\nDESCRIPTION: This code demonstrates how to add the VMWare Log Insight logging plugin to a Zuplo runtime. It initializes the plugin with a URL endpoint and additional custom fields that will be included with every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-vmware-log-insight.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  VMWareLogInsightLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new VMWareLogInsightLoggingPlugin({\n      url: \"https://loginsight.example.com\",\n      fields: {\n        appname: \"zuplo\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VMWare Log Insight Plugin in Zuplo Runtime\nDESCRIPTION: This code demonstrates how to add the VMWare Log Insight logging plugin to a Zuplo runtime. It initializes the plugin with a URL endpoint and additional custom fields that will be included with every log entry.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/log-plugin-vmware-log-insight.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RuntimeExtensions,\n  VMWareLogInsightLoggingPlugin,\n  environment,\n} from \"@zuplo/runtime\";\n\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new VMWareLogInsightLoggingPlugin({\n      url: \"https://loginsight.example.com\",\n      fields: {\n        appname: \"zuplo\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: URL Rewrite Pattern with String Interpolation\nDESCRIPTION: Example of a rewrite pattern URL using JavaScript string interpolation syntax. It demonstrates how to dynamically shape the URL using environment variables and request properties.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/handlers/websocket-handler.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nhttps://${env.BASE_HOST_NAME}/${method}/${params.productId}\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Options in Zuplo Configuration\nDESCRIPTION: Demonstrates how to pass configuration options to a policy through the policy definition. These options will be available to the policy handler at runtime.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-first-policy\",\n  \"policyType\": \"custom-code-inbound\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/my-first-policy)\",\n    \"options\": {\n      \"you\": \"can\",\n      \"specify\": \"anything\",\n      \"here\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Zuplo Project Command Help\nDESCRIPTION: Shows how to display help information for Zuplo project commands. This includes the main project command and its subcommands for updating project structure and importing OpenAPI files.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/project.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzuplo project --help\nzuplo project\n\nProject commands\n\nCommands:\n  zuplo project update          Updates your project structure to the latest conventions\n  zuplo project import-openapi  Imports an OpenAPI file into your Zuplo Project\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Policy in Zuplo Configuration\nDESCRIPTION: Defines a policy in the Zuplo configuration file by specifying its name, type, and handler details. This registration makes the policy available for use on routes.\nSOURCE: https://github.com/zuplo/docs/blob/main/policies/custom-code-inbound/doc.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// /config/policies.json\n{\n  \"policies\": [\n    {\n      \"name\": \"my-first-policy\",\n      \"policyType\": \"custom-code-inbound\",\n      \"handler\": {\n        \"export\": \"default\",\n        \"module\": \"$import(./modules/my-first-policy)\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from ZoneCache in TypeScript\nDESCRIPTION: Demonstrates how to read data from the ZoneCache using a specific key. This operation is asynchronous and returns the stored data for the given key.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/zone-cache.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// read from the cache using the key\nconst data = await cache.get(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Importing Remote OpenAPI Files in Zuplo\nDESCRIPTION: Shows how to import a remote OpenAPI file into a Zuplo project. The command downloads the file to a temporary directory before importing it.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/cli/project.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzuplo project import-openapi --source https://example.com/path/to/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Info Properties for Versioning in JSON\nDESCRIPTION: Example of how to update the info properties in an OpenAPI file to include version information, which helps users distinguish between different API versions in the developer portal.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/versioning-on-zuplo.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"My Api (v2)\",\n    \"version\": \"2.0.0\"\n  },\n\n```\n\n----------------------------------------\n\nTITLE: Checking Tunnel Status with Zuplo CLI Commands\nDESCRIPTION: CLI commands to check the status of Zuplo tunnels. These commands list all tunnels and provide detailed information about a specific tunnel. They assume the ZUPLO_API_KEY environment variable has been set.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/tunnel-troubleshooting.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For brevity, the commands assume that you have exported your API key as an environment variable,\n# export ZUPLO_API_KEY=zpka_d67b7e241bb948758f415b79aa8exxxx_2efbxxxx\n\nzuplo tunnel list # Get the list of tunnels\nzuplo tunnel describe --tunnel-id tnl_xxxxxxxxxxx # Narrow it down to the problematic tunnel\n```\n\n----------------------------------------\n\nTITLE: Response from Secret API Endpoint\nDESCRIPTION: The response text received when accessing the secret endpoint at /policies-test/secret. It reveals that the API endpoints lack rate limiting protection.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/step-1-setup-basic-gateway.md#2025-04-08_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"You're now proxying my /policies-test/secret endpoint! My secret is that my endpoints don't have rate limiting 😳. Keep following the tutorial to learn how to add the rate limiting policy.\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Bypass Policy in Zuplo Route Configuration\nDESCRIPTION: This JSON snippet shows how to apply the custom bypass policy in the routes configuration file. It replaces the original 'monetization-inbound' policy with the new 'monetization-with-bypass-inbound' policy.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/bypass-policy-for-testing.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"x-zuplo-route\": {\n  \"corsPolicy\": \"none\",\n  \"handler\": {\n    \"export\": \"default\",\n    \"module\": \"$import(./modules/todos-and-users)\",\n    \"options\": {}\n  },\n  \"policies\": {\n    \"inbound\": [\"monetization-with-bypass-inbound\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Example showing the new project directory structure after migration to Zudoku Dev Portal\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmy-api/\n├─ config/\n│  ├─ routes.oas.json\n│  ├─ policies.json\n├─ docs/\n│  ├─ zudoku.config.ts\n│  ├─ package.json\n│  ├─ tsconfig.json\n│  ├─ pages/\n│  │  ├─ doc.md # <- Your existing markdown files\n├─ .gitignore\n├─ package.json\n├─ tsconfig.json\n├─ README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Plugin in Zuplo Runtime\nDESCRIPTION: Setup configuration for the OpenTelemetry plugin in the Zuplo runtime, including exporter URL, headers for authentication, and service name configuration.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/opentelemetry.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenTelemetryPlugin } from \"@zuplo/otel\";\nimport { RuntimeExtensions, environment } from \"@zuplo/runtime\";\nexport function runtimeInit(runtime: RuntimeExtensions) {\n  runtime.addPlugin(\n    new OpenTelemetryPlugin({\n      exporter: {\n        url: \"https://otlp.example.com\",\n        headers: {\n          Authorization: `Bearer ${environment.OTEL_API_KEY}`,\n        },\n      },\n      service: {\n        name: \"my-api\",\n      },\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Portal Logo with Theme Variables\nDESCRIPTION: Example showing how to set different logos for dark and light themes using CSS variables and the theme-logo class.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-theme.md#2025-04-08_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.dark {\n  --var-theme-logo-url: url(https://example.com/logo-dark.svg);\n}\n\n.light {\n  --var-theme-logo-url: url(https://example.com/logo-light.svg);\n}\n\n.theme-logo {\n  content: var(--var-theme-logo-url);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Endpoint with curl\nDESCRIPTION: A curl command to test the secured HTTPS endpoint after setting up SSL certificates for the domain.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/gke-with-upstream-auth-policy.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://api.example.com\nHello, world!\nVersion: 1.0.0\nHostname: web-58756b54cc-7hdcw\n```\n\n----------------------------------------\n\nTITLE: Root Package Configuration\nDESCRIPTION: Root package.json configuration with workspace setup and dev portal scripts\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/dev-portal/migration.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-api\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"dev\": \"zuplo dev\",\n    \"test\": \"zuplo test\",\n    \"docs\": \"npm run dev --workspace docs\"\n  },\n  \"workspaces\": {\n    \"packages\": [\"docs\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zuplo Dev Portal with Supabase Authentication\nDESCRIPTION: JSON configuration for the dev-portal.json file that sets up external authentication using Supabase. It defines login and logout URLs that point to a Supabase Auth App, enabling integrated authentication between Supabase and the Zuplo Developer Portal.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://cdn.zuplo.com/schemas/dev-portal.json\",\n  \"enableAuthentication\": true,\n  \"pageTitle\": \"Supabase Auth Test\",\n  \"authentication\": {\n    \"provider\": \"external\",\n    \"loginUrl\": \"https://nextjs-with-supabase-xi-seven.vercel.app/login\",\n    \"logoutUrl\": \"https://nextjs-with-supabase-xi-seven.vercel.app/auth/sign-out\"\n  },\n  \"generateExamples\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zuplo Dev Portal with Supabase Authentication\nDESCRIPTION: JSON configuration for the dev-portal.json file that sets up external authentication using Supabase. It defines login and logout URLs that point to a Supabase Auth App, enabling integrated authentication between Supabase and the Zuplo Developer Portal.\nSOURCE: https://github.com/zuplo/docs/blob/main/docs/articles/dev-portal-supabase-auth.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://cdn.zuplo.com/schemas/dev-portal.json\",\n  \"enableAuthentication\": true,\n  \"pageTitle\": \"Supabase Auth Test\",\n  \"authentication\": {\n    \"provider\": \"external\",\n    \"loginUrl\": \"https://nextjs-with-supabase-xi-seven.vercel.app/login\",\n    \"logoutUrl\": \"https://nextjs-with-supabase-xi-seven.vercel.app/auth/sign-out\"\n  },\n  \"generateExamples\": true\n}\n```"
  }
]