[
  {
    "owner": "frappe",
    "repo": "frappe",
    "content": "TITLE: Setting up Frappe Docker environment using Docker Compose\nDESCRIPTION: Commands to clone the Frappe Docker repository and set up a new Frappe instance using Docker Compose. After execution, the site will be accessible on localhost:8080 with default admin credentials.\nSOURCE: https://github.com/frappe/frappe/blob/develop/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/frappe/frappe_docker\ncd frappe_docker\ndocker compose -f pwd.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Setting up Frappe for local development using Bench\nDESCRIPTION: Commands to create a new site and map it to localhost for local development after installing Bench. These steps help in setting up a development environment for working with Frappe Framework.\nSOURCE: https://github.com/frappe/frappe/blob/develop/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new site\nbench new-site frappe.dev\n\n# Map your site to localhost\nbench --site frappe.dev add-to-hosts\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Query Through Database API in Python\nDESCRIPTION: This snippet illustrates how to generate a SQL query using the database API in Frappe. This method uses the Query Builder objects under the hood and provides a high-level interface for query generation.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.get_values(\"User\", fieldname=\"name\", filters={})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Tests with Frappe Testing Framework\nDESCRIPTION: Example showing how to configure and execute tests using Frappe's testing framework. The code demonstrates setting up test configuration with specific options, creating a test runner instance, discovering tests for specified apps, and running the test suite.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/testing/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom frappe.testing import TestConfig, TestRunner, discover_all_tests\n\nconfig = TestConfig(failfast=True, verbose=2)\nrunner = TestRunner(cfg=config)\ndiscover_all_tests(['my_app'], runner)\nrunner.run()\n```\n\n----------------------------------------\n\nTITLE: Building SQL Query Using Query Builder Objects in Python\nDESCRIPTION: This example shows how to build a SQL query using Query Builder objects in Python. This method provides a more structured and safe approach to query generation.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom frappe.query_builder import Field\n\nfrappe.qb.from_(\"User\").select(Field(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Test Case Implementation Example\nDESCRIPTION: Demonstrates how to create a test case class by inheriting from Frappe's UnitTestCase class\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/tests/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom frappe.tests import UnitTestCase\n\nclass MyTestCase(UnitTestCase):\n    def test_something(self):\n        # Your test code here\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using Criterion Query with Query Builder Objects in Python\nDESCRIPTION: This example demonstrates how to use Criterion Query with inherent Query Builder objects in Frappe. It allows for more complex and flexible query construction.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom frappe.query_builder import Field\n\nfrappe.db.get_values(\"User\", fieldname=\"name\", filters=Field(\"name\") == \"Administrator\")\n```\n\n----------------------------------------\n\nTITLE: Using List-based Filtering in Python\nDESCRIPTION: This snippet shows how to use a list-based filter in Frappe's database API. This method supports various filter use cases, including implicit joins.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.get_values(\"ToDo\", fieldname=\"name\", filters=[\"description\", \"=\", \"someone\"])\n```\n\n----------------------------------------\n\nTITLE: Using Dict Query for Filtering in Python\nDESCRIPTION: This example demonstrates how to use a dictionary-based query for filtering in Frappe's database API. It shows different ways to specify filters using dictionaries.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.get_values(\"ToDo\", fieldname=\"name\", filters={\"description\": \"Something Random\"})\n```\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.get_values(\"User\", fieldname=\"name\",\nfilters={\"name\": (\"like\", \"admin%\")})\n```\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.get_values(\"ToDo\", fieldname=\"name\", filters={\"description\": (\"in\", [\"somso%\", \"someome\"])})\n```\n\n----------------------------------------\n\nTITLE: Creating a new site in Frappe/ERPNext\nDESCRIPTION: Command to create a new site in Frappe/ERPNext framework with a specific database name, admin password, and installation directory.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-4.txt#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbench new-site site1.local --db-name testdb --db-password pass --install-app erpnext\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Shows the organization of test framework files and directories within Frappe\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/tests/README.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfrappe/tests/\n├── classes/\n│   ├── context_managers.py\n│   ├── unit_test_case.py\n│   └── ...\n├── utils/\n│   ├── generators.py\n│   └── ...\n├── test_api.py\n├── test_child_table.py\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Creating a database backup in Frappe\nDESCRIPTION: Command to create a database backup for a specific site in the Frappe framework.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-4.txt#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbench --site site1.local backup\n```\n\n----------------------------------------\n\nTITLE: Setting user permissions in Frappe\nDESCRIPTION: Command to set permissions for a specific user on a site in the Frappe framework.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-4.txt#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbench --site site1.local set-user-perm user@email.com\n```\n\n----------------------------------------\n\nTITLE: Python Document Operations\nDESCRIPTION: Series of Python commands to reload, rename, and delete various Frappe documents and doctypes.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/patches.txt#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrappe.reload_doc('core', 'doctype', 'doctype_action', force=True)\nfrappe.reload_doc('core', 'doctype', 'doctype_link', force=True)\nfrappe.get_doc(\"User\", \"Guest\").save()\nfrappe.delete_doc(\"DocType\", \"Control Panel\", force=1)\nfrappe.rename_doc('Country', 'Macedonia, Republic of', 'Macedonia', ignore_if_exists=True)\n```\n\n----------------------------------------\n\nTITLE: Direct Database Execution Commands\nDESCRIPTION: Collection of direct database manipulation commands using frappe.delete_doc_if_exists(), frappe.reload_doc(), and frappe.db.set_single_value() functions\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/patches.txt#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrappe.delete_doc_if_exists('Page', 'dashboard', force=1)\nfrappe.reload_doc('custom', 'doctype', 'custom_field')\nfrappe.reload_doc(\"desk\", \"doctype\", \"Form Tour\")\nfrappe.delete_doc('Page', 'recorder', ignore_missing=True, force=True)\nfrappe.delete_doc('Page', 'background_jobs', ignore_missing=True, force=True)\nfrappe.delete_doc(\"Page\", \"activity\", force=1)\nfrappe.delete_doc(\"Page\", \"translation-tool\", force=1)\nfrappe.delete_doc_if_exists(\"Workspace\", \"Customization\")\nfrappe.db.set_single_value(\"Document Naming Settings\", \"default_amend_naming\", \"Amend Counter\")\nfrappe.db.set_single_value(\"Workspace Settings\", \"workspace_setup_completed\", 1)\n```\n\n----------------------------------------\n\nTITLE: SQL Database Updates\nDESCRIPTION: Collection of SQL commands to clean up and update various database tables including sessions, property setters, user passwords, and communication dates.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/patches.txt#2025-04-11_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndelete from `tabProperty Setter` where `property` in ('idx', '_idx')\nupdate tabUser set new_password='' where ifnull(new_password, '')!=''\ndelete from `tabProperty Setter` where `property` = 'idx'\ndelete from tabSessions where user is null\nupdate tabCommunication set communication_date = creation where time(communication_date) = 0\nupdate tabReport set module=\"Desk\" where name=\"ToDo\"\n```\n\n----------------------------------------\n\nTITLE: Migration Patch References\nDESCRIPTION: List of migration patch module paths for various Frappe versions handling functionality updates, schema changes, and feature migrations\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/patches.txt#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrappe.core.doctype.page.patches.drop_unused_pages\nfrappe.patches.v13_0.remove_chat\nfrappe.patches.v13_0.rename_desk_page_to_workspace\nfrappe.patches.v13_0.delete_package_publish_tool\nfrappe.patches.v14_0.save_ratings_in_fraction\nfrappe.patches.v14_0.transform_todo_schema\nfrappe.patches.v15_0.remove_event_streaming\nfrappe.patches.v15_0.migrate_session_data\nfrappe.patches.v16_0.switch_default_sort_order\n```\n\n----------------------------------------\n\nTITLE: Installing a specific app version in Frappe\nDESCRIPTION: Command to install a specific version of an app from a git repository in the Frappe framework.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-4.txt#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbench get-app erpnext https://github.com/frappe/erpnext --branch version-14\n```\n\n----------------------------------------\n\nTITLE: Python String Translation with Context and Formatting\nDESCRIPTION: Demonstrates Python translation function usage with different string formats including multi-line strings, context parameters, and string formatting methods.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/tests/translation_test_file.txt#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_(\"Warning: Unable to find {0} in any table related to {1}\", context=\"This is some context\").format('Key', 'DocType')\n\n_('Submit', context=\"Some DocType\")\n\n_(\"\"\"You don't have any messages yet.\"\"\")\n\n_('''You don't have any messages yet.''')\n\n# allow newline in beginning\n_(\n\"\"\"Long string that needs its own line because of black formatting.\"\"\"\n).format(\"blah\")\n\n_(\n\"Long string with\", context=\"context\"\n).format(\"blah\")\n\n_(\n    \"Long string with\",\n    context=\"context on newline\"\n).format(\"blah\")\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Translation with Parameters and Context\nDESCRIPTION: Examples of JavaScript translation function usage with parameters, showing different ways to format strings with placeholders, context, and array arguments.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/tests/translation_test_file.txt#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n__(\"Warning: Unable to find {0} in any table related to {1}\" , ['Key', 'DocType'], \"This is some context\")\n\n__(\"Warning: Unable to find {0} in any table related to {1}\" , ['Key', 'DocType'])\n\n__(\"You don't have any messages yet.\")\n\n__('Submit' , null, \"Some DocType\")\n\n// this is considered as invalid\n__('You don\\'t have any messages yet.')\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Front Matter for Documentation Page\nDESCRIPTION: YAML front matter configuration block that specifies page metadata and template settings for a documentation page. Includes title, breadcrumb configuration, sidebar visibility, and base template path.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/www/_test/_test_folder/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Test Folder\nadd_breadcrumbs: 1\nshow_sidebar: 1\nbase_template: templates/web.html\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for Report Printing in Frappe Python\nDESCRIPTION: Function to verify if a user has permission to print a report or generate its PDF. It determines if the report is standard or custom, then checks appropriate permissions based on report type and user roles.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/change_log/v6/v6_26_6.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef has_permission(doctype, ptype=\"read\", doc=None, user=None):\n\tif ptype==\"print\" or ptype==\"email\":\n\t\tif frappe.get_meta(doctype).custom:\n\t\t\tif doctype in frappe.get_roles():\n\t\t\t\treturn True\n\t\telse:\n\t\t\tif frappe.has_permission(doctype, \"read\", user=user):\n\t\t\t\treturn True\n\treturn False\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Properties for Frappe\nDESCRIPTION: A setup.cfg file that defines Python package properties for the Frappe project, including build information and metadata.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-10.txt#2025-04-11_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[metadata]\ndescription-file = README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Prettier Configuration for Code Formatting\nDESCRIPTION: A Prettier configuration file that specifies code formatting rules, including tab width, semicolon usage, and single quote preferences.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-10.txt#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"semi\": true,\n\t\"tabWidth\": 4,\n\t\"useTabs\": true,\n\t\"printWidth\": 100,\n\t\"singleQuote\": false,\n\t\"trailingComma\": \"none\",\n\t\"bracketSpacing\": true\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table of Supported Languages\nDESCRIPTION: HTML table displaying language codes and their native names for newly supported languages in the Frappe framework. Includes a special note about Tibetan translations.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/change_log/v5/v5_3_0.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"table table-bordered\">\n    <tr>\n        <td style=\"width: 30%\">bo*</td>\n        <td>ལྷ་སའི་སྐད་</td>\n    </tr>\n    <tr>\n        <td>fi</td>\n        <td>suomalainen</td>\n    </tr>\n    <tr>\n        <td>km</td>\n        <td>ភាសាខ្មែរ</td>\n    </tr>\n    <tr>\n        <td>mk</td>\n        <td>македонски</td>\n    </tr>\n    <tr>\n        <td>my</td>\n        <td>Melayu</td>\n    </tr>\n    <tr>\n        <td>no</td>\n        <td>norsk</td>\n    </tr>\n    <tr>\n        <td>sv</td>\n        <td>Svenska</td>\n    </tr>\n    <tr>\n        <td>sq</td>\n        <td>shqiptar</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Displaying Added Language Support in HTML Table\nDESCRIPTION: An HTML table listing newly supported languages in Frappe, including their ISO codes and native names. The table is styled with borders and specific width for the first column.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/change_log/v6/v6_4_8.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"table table-bordered\">\n    <tr>\n        <td style=\"width: 30%\">bn</td>\n        <td>বাংলা </td>\n    </tr>\n    <tr>\n        <td>da-DK</td>\n        <td>dansk (Danmark)</td>\n    </tr>\n    <tr>\n        <td>es-PE</td>\n        <td>Español (Perú)</td>\n    </tr>\n    <tr>\n        <td>si</td>\n        <td>slovenščina</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering robots.txt Content with Jinja2 Template in Frappe\nDESCRIPTION: This template renders the content of a robots.txt file using Jinja2 syntax. It references the 'robots_txt' variable which would be populated by the Frappe framework with appropriate robots.txt directives based on site configuration.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/www/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n{{ robots_txt }}\n```\n\n----------------------------------------\n\nTITLE: Using QWeb Templates with DOM Elements\nDESCRIPTION: Shows how QWeb templates interact with DOM elements, demonstrating how a div element with a specific template ID is processed and how content is dynamically rendered based on the template.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-3.txt#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<div t-name=\"template-1\">\n    <div class=\"row\">\n        <div class=\"col-sm-6\">\n            <div class=\"checkbox\">\n                <label>\n                    <input type=\"checkbox\"/> A checkbox\n                </label>\n            </div>\n        </div>\n        <div class=\"col-sm-6\">\n            <div t-foreach=\"things\" t-as=\"thing\">\n                <p><t t-esc=\"thing\"/></p>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Git Checkout to Version-12 Branch in Bash\nDESCRIPTION: A shell command that checks out to the 'version-12' git branch. This is useful for switching between different versions of a codebase in a git repository.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-2.txt#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout version-12\n```\n\n----------------------------------------\n\nTITLE: Numeric Value Declaration\nDESCRIPTION: A plain numeric value '11' stored in a file.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-11.txt#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n11\n```\n\n----------------------------------------\n\nTITLE: Creating Database in Frappe Framework (Python)\nDESCRIPTION: This code snippet defines a function to create a new database in the Frappe framework. It checks for existing databases, creates a new one if needed, and handles various configuration options.\nSOURCE: https://github.com/frappe/frappe/blob/develop/cypress/fixtures/sample_attachments/attachment-8.txt#2025-04-11_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef create_database(db_name, source_sql=None, overwrite=0):\n\t\"\"\"\n\tCreates a database\n\n\tParameters:\n\t\tdb_name: Name of the database\n\t\tsource_sql: Path to the SQL file to be sourced or Backup File Path\n\t\toverwrite: Overwrite the database if exists\n\t\"\"\"\n\tif overwrite:\n\t\tdrop_database(db_name)\n\n\tif not database_exists(db_name):\n\t\tprint(\"Database {0} does not exist, creating...\".format(db_name))\n\t\tmysql_command = ['mysql', '-u', 'root']\n\n\t\t# -p means password, if required\n\t\tif frappe.conf.get(\"root_password\"):\n\t\t\tmysql_command.extend([\"-p{0}\".format(frappe.conf.get(\"root_password\"))])\n\n\t\t# -h means hostname\n\t\tif frappe.conf.get(\"db_host\") and \"localhost\" not in frappe.conf.get(\"db_host\"):\n\t\t\tmysql_command.extend([\"-h\", frappe.conf.get(\"db_host\")])\n\n\t\t# port if non-standard\n\t\tif frappe.conf.get(\"db_port\"):\n\t\t\tmysql_command.extend([\"--port\", frappe.conf.get(\"db_port\")])\n\n\t\t# Create db\n\t\texecute_in_shell(mysql_command + [\"-e\", \"CREATE DATABASE `{db_name}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\".format(db_name=db_name)])\n\n\t\t# grant privileges to user\n\t\tgrant_privileges(db_name, frappe.conf.db_name, frappe.conf.db_password)\n\n\t\t# source db\n\t\tif source_sql:\n\t\t\tprint(\"Restoring database from source file: {0}\".format(source_sql))\n\t\t\tsource_and_dump.restore_db(db_name, source_sql, frappe.conf.root_password or \"\")\n\n\t\tprint(\"Database {0} created\".format(db_name))\n\n\telse:\n\t\tprint(\"Database {0} already exists\".format(db_name))\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Query Using Direct SQL in Python\nDESCRIPTION: This snippet demonstrates how to generate a SQL query using direct SQL in Python. While this method is straightforward, it is considered boring, unsafe, and inconsistent.\nSOURCE: https://github.com/frappe/frappe/blob/develop/frappe/query_builder/docs.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrappe.db.sql(\"select `name` from `tabUser`\")\n```"
  }
]