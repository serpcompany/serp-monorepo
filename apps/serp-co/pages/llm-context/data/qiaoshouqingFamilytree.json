[
  {
    "owner": "qiaoshouqing",
    "repo": "familytree",
    "content": "TITLE: Complete Family Data JSON Example\nDESCRIPTION: Extended example of family data in JSON format showing multiple generations with parent-child relationships, birth/death years, and personal information.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generations\": [\n    {\n      \"title\": \"First Generation\",\n      \"people\": [\n        {\n          \"id\": \"ancestor\",\n          \"name\": \"Ancestor\",\n          \"info\": \"Family founder, born in 1850\",\n          \"birthYear\": 1850\n        }\n      ]\n    },\n    {\n      \"title\": \"Second Generation\",\n      \"people\": [\n        {\n          \"id\": \"second-gen-1\",\n          \"name\": \"First Son\",\n          \"info\": \"Born in 1880, wife Wang\",\n          \"fatherId\": \"ancestor\",\n          \"birthYear\": 1880,\n          \"deathYear\": 1950\n        },\n        {\n          \"id\": \"second-gen-2\",\n          \"name\": \"Second Son\",\n          \"info\": \"Born in 1885, wife Li\",\n          \"fatherId\": \"ancestor\",\n          \"birthYear\": 1885,\n          \"deathYear\": 1960\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Family Data JSON Structure Example\nDESCRIPTION: Basic JSON structure for adding family member data, showing the format for generations and individual people with their relationships and personal information.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generations\": [\n    {\n      \"title\": \"First Generation\",\n      \"people\": [\n        {\n          \"id\": \"person-id\",\n          \"name\": \"Name\",\n          \"info\": \"Person description\",\n          \"fatherId\": \"Father's ID\",\n          \"birthYear\": 1900,\n          \"deathYear\": 1980\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AI-Assisted Family Data Generation Prompt\nDESCRIPTION: Prompt template to guide AI in converting unstructured family information into the required JSON format, including specific requirements for IDs, relationships, and data organization.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPlease organize the family information I provide into the following JSON format:\n{\n  \"generations\": [\n    {\n      \"title\": \"Xth Generation\",\n      \"people\": [\n        {\n          \"id\": \"unique-identifier\",\n          \"name\": \"Name\",\n          \"info\": \"Detailed information\",\n          \"fatherId\": \"Father's ID\",\n          \"birthYear\": birth year,\n          \"deathYear\": death year\n        }\n      ]\n    }\n  ]\n}\n\nRequirements:\n1. Generate a unique id for each person (such as first-gen-1, second-gen-2, etc.)\n2. Correctly set fatherId to establish parent-child relationships\n3. Categorize people by generation\n4. Include spouse, achievements, etc. in the info field\n5. Use birthYear and deathYear to record birth and death years (if available)\n6. Ensure the JSON format is valid and can be directly imported into the system\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Example of environment variables that can be configured in the .env.local file, including authentication settings, family name, and port configuration.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Whether login authentication is required (true/false)\nNEXT_PUBLIC_REQUIRE_AUTH=false\n\n# Authentication mode (all: allow all family members, specific: only allow specific names)\nAUTH_MODE=specific\n# Specific user login name\nSPECIFIC_NAME=白景琦\n\n# Surname configuration (for website title, description, and footer)\nNEXT_PUBLIC_FAMILY_NAME=白\n\n# Application port configuration\nPORT=3000\n```\n\n----------------------------------------\n\nTITLE: Running the Family Tree Project in Development\nDESCRIPTION: Commands to start the development server using different package managers, allowing users to view the family tree application locally.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Family Tree Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn install\n# or\npnpm install\n# or\nbun install\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Command to copy the environment variable template file to create a local configuration file for the family tree project.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: Basic robots.txt configuration that specifies crawling rules for all user agents. In this case, it prevents all web crawlers from accessing any paths under root (/) directory.\nSOURCE: https://github.com/qiaoshouqing/familytree/blob/main/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```"
  }
]