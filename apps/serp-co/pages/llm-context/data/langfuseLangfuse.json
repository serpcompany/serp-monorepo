[
  {
    "owner": "langfuse",
    "repo": "langfuse",
    "content": "TITLE: Instrumenting Python Code with Langfuse Decorators and OpenAI Integration\nDESCRIPTION: Python example demonstrating how to use the @observe() decorator from Langfuse to trace LLM calls and application logic, along with the Langfuse OpenAI integration for automatic parameter capture.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langfuse.decorators import observe\nfrom langfuse.openai import openai # OpenAI integration\n\n@observe()\ndef story():\n    return openai.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"What is Langfuse?\"}],\n    ).choices[0].message.content\n\n@observe()\ndef main():\n    return story()\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Deploying Langfuse Locally Using Docker Compose\nDESCRIPTION: Commands to clone the Langfuse repository and start it locally using Docker Compose. This provides a quick 5-minute setup for running Langfuse on your local machine.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get a copy of the latest Langfuse repository\ngit clone https://github.com/langfuse/langfuse.git\ncd langfuse\n\n# Run the langfuse docker compose\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Up Langfuse Environment Variables\nDESCRIPTION: Environment variable configuration for connecting to Langfuse, including secret key, public key, and host URL with options for different regions.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLANGFUSE_SECRET_KEY=\"sk-lf-...\"\nLANGFUSE_PUBLIC_KEY=\"pk-lf-...\"\nLANGFUSE_HOST=\"https://cloud.langfuse.com\" # üá™üá∫ EU region\n# LANGFUSE_HOST=\"https://us.cloud.langfuse.com\" # üá∫üá∏ US region\n```\n\n----------------------------------------\n\nTITLE: Initializing Langfuse Development Environment with Bash\nDESCRIPTION: Commands for setting up the Langfuse development environment, including cloning the repository, creating an environment file, and running the infrastructure in dev mode.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/langfuse/langfuse.git\ncd langfuse\ncp .env.dev.example .env\npnpm run dx\n```\n\n----------------------------------------\n\nTITLE: Running Langfuse Locally with Docker Compose\nDESCRIPTION: Commands to clone the Langfuse repository and start it using Docker Compose for local deployment\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.ja.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ÊúÄÊñ∞„ÅÆLangfuse„É™„Éù„Ç∏„Éà„É™„ÅÆ„Ç≥„Éî„Éº„ÇíÂèñÂæó\ngit clone https://github.com/langfuse/langfuse.git\ncd langfuse\n\n# Langfuse„ÅÆdocker compose„ÇíËµ∑Âãï\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Langfuse Locally with Docker Compose\nDESCRIPTION: This code snippet demonstrates how to clone the Langfuse repository and run it locally using Docker Compose. It's a quick way to get Langfuse up and running on a local machine for testing or development purposes.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.kr.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ÏµúÏã† Langfuse Ï†ÄÏû•ÏÜå ÌÅ¥Î°†\ngit clone https://github.com/langfuse/langfuse.git\ncd langfuse\n\n# langfuse docker compose Ïã§Ìñâ\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Langfuse and OpenAI Dependencies\nDESCRIPTION: Command to install the required Python packages for using Langfuse with OpenAI integration.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install langfuse openai\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag Hook in React Applications\nDESCRIPTION: Demonstrates how to use the useIsFeatureEnabled React hook to check if a specific feature flag is enabled in the application. This hook returns a boolean value indicating the flag status.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/feature-flags/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst isFeatureEnabled = useIsFeatureEnabled(\"feature-flag-name\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Wrapper in Langfuse with TSX\nDESCRIPTION: Example of how to use the Page component in Langfuse. This snippet demonstrates a basic implementation with title, scrollable content, breadcrumb navigation, and custom action buttons. The Page component handles layout consistency, header positioning, and scroll behavior.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/components/layouts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Page from \"@/src/components/layouts/Page\";\n\nexport default function MyPage() {\n  return (\n    <Page\n      title=\"My Page\"\n      scrollable\n      headerProps={{\n        breadcrumb: [{ name: \"Home\", href: \"/\" }, { name: \"My Page\" }],\n        actionButtons: <button className=\"btn-primary\">Save</button>,\n      }}\n    >\n      <div>My page content here...</div>\n    </Page>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Implementation Best Practices List - Markdown\nDESCRIPTION: Core implementation requirements for API routes including middleware usage, type safety, and error handling patterns. Includes specific guidance on using zod for type validation and coercion.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nImplementation\n\n- Wrap with `withMiddleware`\n- Type-safe and authed API Route with `createAuthedAPIRoute`\n- Add zod types to `/features/public-api/types` folder.\n\n  - Use [`coerce`](https://zod.dev/?id=coercion-for-primitives) to handle primitives, such as dates, for use in your application and tests.\n  - Use `strict()` on all objects that should not return additional properties. Recommended as default. In these cases, the test utility `makeZodVerifiedAPICall` will throw an error if the response contains additional properties. Also, we will log an error in production if the response contains additional properties.\n\n- Throw errors defined in `shared/src/errors` which translate to HTTP status codes\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings for Langfuse\nDESCRIPTION: This snippet shows how to disable telemetry reporting in Langfuse by setting an environment variable. By default, Langfuse reports basic usage statistics to a central server, but users can opt out of this data collection.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.ja.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTELEMETRY_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: API Refactoring Steps - Markdown\nDESCRIPTION: Step-by-step guide for refactoring existing APIs to match the new implementation pattern, including type management and validation.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nHow to refactor existing apis to this pattern\n\n1. Move request types to `features/public-api/types`\n2. Create response types in `features/public-api/types`\n3. Validate response type with `validateZodSchema` in the API route to get type warnings in case of mismatch\n4. Refactor api route by passing current api route to LLM together with example of e.g. public/v2/datasets.ts\n```\n\n----------------------------------------\n\nTITLE: Executing Monorepo Commands with Pnpm\nDESCRIPTION: Examples of how to run commands in all packages or specific packages using pnpm in the Langfuse monorepo structure.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\npnpm --filter=web run dev # execute command only in one package\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Langfuse\nDESCRIPTION: Command to run database migrations in the Langfuse project using pnpm.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run db:migrate -- --name <name of the migration>\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Langfuse Docker Deployments\nDESCRIPTION: Environment variable setting to opt out of Langfuse's telemetry service which collects usage statistics.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/telemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTELEMETRY_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: API Reference Management - Markdown\nDESCRIPTION: Instructions for maintaining API reference documentation using Fern, including generation commands and SDK update procedures.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAPI Reference\n\n- Add to `fern` including `docs` attributes\n- Build with `fern generate --api server` and `fern generate --api client`, then commit the changes to the API reference\n\nSDKs\n\n- Copy/paste fern-generated types or api reference to Python and JS SDKs respectively\n- Implement wrapping functions if needed\n```\n\n----------------------------------------\n\nTITLE: Executing Background Migration Scripts via CLI\nDESCRIPTION: Commands for running background migration scripts locally using ts-node with environment variables loaded through dotenv. Includes both the general command pattern and a specific example.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/worker/src/backgroundMigrations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd worker\n$ dotenv -e ../.env -- npx ts-node src/backgroundMigrations/<script-name>.ts\n\n# Example\n$ dotenv -e ../.env -- npx ts-node src/backgroundMigrations/addGenerationsCostBackfill.ts\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Langfuse Public API\nDESCRIPTION: Commands to run all tests or run tests in watch mode for the Langfuse public API using npm.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\nnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Visualizing Langfuse Network Architecture with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the network architecture of Langfuse, showing the relationships between browser, integrations/SDKs, application, and database.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   Browser ---|Web UI & TRPC API| App\n   Integrations/SDKs ---|Public HTTP API| App\n   subgraph i1[\"Application Network\"]\n      App[\"Langfuse Application\"]\n   end\n   subgraph i2[\"Database Network\"]\n      DB[\"Postgres Database\"]\n   end\n   App --- DB\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Table of Open Source Projects Using Langfuse\nDESCRIPTION: A Markdown table showing top open-source Python projects that use Langfuse. The table includes repository information, project names, and star counts, sorted by popularity.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n| Repository                                                                                                                                                                                                                                          | Stars |\n| :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----: |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/127165244?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [langgenius](https://github.com/langgenius) / [dify](https://github.com/langgenius/dify)                                            | 54865 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/158137808?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [open-webui](https://github.com/open-webui) / [open-webui](https://github.com/open-webui/open-webui)                                | 51531 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/131470832?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [lobehub](https://github.com/lobehub) / [lobe-chat](https://github.com/lobehub/lobe-chat)                                           | 49003 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/85702467?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [langflow-ai](https://github.com/langflow-ai) / [langflow](https://github.com/langflow-ai/langflow)                                  | 39093 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/130722866?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [run-llama](https://github.com/run-llama) / [llama_index](https://github.com/run-llama/llama_index)                                 | 37368 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/139558948?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [chatchat-space](https://github.com/chatchat-space) / [Langchain-Chatchat](https://github.com/chatchat-space/Langchain-Chatchat)    | 32486 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/128289781?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [FlowiseAI](https://github.com/FlowiseAI) / [Flowise](https://github.com/FlowiseAI/Flowise)                                         | 32448 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/31035808?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [mindsdb](https://github.com/mindsdb) / [mindsdb](https://github.com/mindsdb/mindsdb)                                                | 26931 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/119600397?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [twentyhq](https://github.com/twentyhq) / [twenty](https://github.com/twentyhq/twenty)                                              | 24195 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/60330232?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [PostHog](https://github.com/PostHog) / [posthog](https://github.com/PostHog/posthog)                                                | 22618 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/121462774?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [BerriAI](https://github.com/BerriAI) / [litellm](https://github.com/BerriAI/litellm)                                               | 15151 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/179202840?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [mediar-ai](https://github.com/mediar-ai) / [screenpipe](https://github.com/mediar-ai/screenpipe)                                   | 11037 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/105877416?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [formbricks](https://github.com/formbricks) / [formbricks](https://github.com/formbricks/formbricks)                                |  9386 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/76263028?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [anthropics](https://github.com/anthropics) / [courses](https://github.com/anthropics/courses)                                       |  8385 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/78410652?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [GreyDGL](https://github.com/GreyDGL) / [PentestGPT](https://github.com/GreyDGL/PentestGPT)                                          |  7374 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/152537519?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [superagent-ai](https://github.com/superagent-ai) / [superagent](https://github.com/superagent-ai/superagent)                       |  5391 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/137907881?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [promptfoo](https://github.com/promptfoo) / [promptfoo](https://github.com/promptfoo/promptfoo)                                     |  4976 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/157326433?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [onlook-dev](https://github.com/onlook-dev) / [onlook](https://github.com/onlook-dev/onlook)                                        |  4141 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/7250217?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [Canner](https://github.com/Canner) / [WrenAI](https://github.com/Canner/WrenAI)                                                      |  2526 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/11855343?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [pingcap](https://github.com/pingcap) / [autoflow](https://github.com/pingcap/autoflow)                                              |  2061 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/85268109?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [MLSysOps](https://github.com/MLSysOps) / [MLE-agent](https://github.com/MLSysOps/MLE-agent)                                         |  1161 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/158137808?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [open-webui](https://github.com/open-webui) / [pipelines](https://github.com/open-webui/pipelines)                                  |  1100 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/18422723?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [alishobeiri](https://github.com/alishobeiri) / [thread](https://github.com/alishobeiri/thread)                                      |  1074 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/125468716?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [topoteretes](https://github.com/topoteretes) / [cognee](https://github.com/topoteretes/cognee)                                     |   971 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/188657705?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [bRAGAI](https://github.com/bRAGAI) / [bRAG-langchain](https://github.com/bRAGAI/bRAG-langchain)                                    |   823 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/169500408?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [opslane](https://github.com/opslane) / [opslane](https://github.com/opslane/opslane)                                               |   677 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/151867818?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [dynamiq-ai](https://github.com/dynamiq-ai) / [dynamiq](https://github.com/dynamiq-ai/dynamiq)                                      |   639 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/48585267?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [theopenconversationkit](https://github.com/theopenconversationkit) / [tock](https://github.com/theopenconversationkit/tock)         |   514 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/20493493?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [andysingal](https://github.com/andysingal) / [llm-course](https://github.com/andysingal/llm-course)                                 |   394 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/132396805?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [phospho-app](https://github.com/phospho-app) / [phospho](https://github.com/phospho-app/phospho)                                   |   384 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/178644984?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [sentient-engineering](https://github.com/sentient-engineering) / [agent-q](https://github.com/sentient-engineering/agent-q)        |   370 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/168552753?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [sql-agi](https://github.com/sql-agi) / [DB-GPT](https://github.com/sql-agi/DB-GPT)                                                 |   324 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/60330232?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [PostHog](https://github.com/PostHog) / [posthog-foss](https://github.com/PostHog/posthog-foss)                                      |   305 |\n| <img class=\"avatar mr-2\" src=\"https://avatars.githubusercontent.com/u/154247157?s=40&v=4\" width=\"20\" height=\"20\" alt=\"\"> &nbsp; [vespperhq](https://github.com/vespperhq) / [vespper](https://github.com/vespperhq/vespper)                                         |   304 |\n```\n\n----------------------------------------\n\nTITLE: Running Clickhouse Record Verification Script with TypeScript\nDESCRIPTION: Commands for setting up environment variables and executing the TypeScript script that compares Postgres and Clickhouse records. The script requires database connection details and writes comparison results to an output folder.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/worker/src/scripts/verifyClickhouseRecords/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Insert postgres database URL\nexport DATABASE_URL=\nexport CLICKHOUSE_URL=\nexport CLICKHOUSE_USER=\nexport CLICKHOUSE_PASSWORD=\n\ncd worker/src/scripts/verifyClickhouseRecords\n\nnpx ts-node index.ts\n```\n\n----------------------------------------\n\nTITLE: API Testing Guidelines - Markdown\nDESCRIPTION: Testing requirements for API routes emphasizing the use of makeZodVerifiedAPICall for schema validation.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTesting\n\n- Add tests for all standard cases\n- use `makeZodVerifiedAPICall` to test the API response against the zod response schema\n```\n\n----------------------------------------\n\nTITLE: Implementation References\nDESCRIPTION: References to key implementation files and hooks for managing entitlements and plans.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/entitlements/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- usePlan\n- getOrganizationPlanServerSide\n- getSelfHostedInstancePlanServerSide\n- hooks.ts\n- hasEntitlement.ts\n- hasEntitlementLimit.ts\n```\n\n----------------------------------------\n\nTITLE: File Path References\nDESCRIPTION: References to key configuration files that manage plans and entitlements in the system.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/web/src/features/entitlements/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- plans.ts\n- constants/entitlements.ts\n```\n\n----------------------------------------\n\nTITLE: Using 1Password CLI for Secrets in Langfuse Development\nDESCRIPTION: Command for using 1Password CLI to access secrets when applying changes to non-local environments in Langfuse. This example shows how to run a database deployment command with environment variables from a .env file.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nop run --env-file=\"./.env\" -- pnpm --filter=shared run db:deploy\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Theming in Langfuse\nDESCRIPTION: Example of CSS variables used for theming in Langfuse, demonstrating the use of HSL values for primary colors and their foregrounds. These variables are used to style components consistently across the platform.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--primary: 222.2 47.4% 11.2%; // e.g. background-color\n--primary-foreground: 210 40% 98%; // e.g. text-color\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variables in HTML Classes\nDESCRIPTION: Example of how CSS variables are applied in HTML classes to style components in Langfuse. This demonstrates the use of background and foreground colors defined by the CSS variables.\nSOURCE: https://github.com/langfuse/langfuse/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-primary text-primary-foreground\">Hello</div>\n```"
  }
]