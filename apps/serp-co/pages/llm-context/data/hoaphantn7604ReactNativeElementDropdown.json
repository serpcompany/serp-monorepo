[
  {
    "owner": "hoaphantn7604",
    "repo": "react-native-element-dropdown",
    "content": "TITLE: Implementing MultiSelect Component in React Native\nDESCRIPTION: This example demonstrates the MultiSelect component that allows selection of multiple items from a dropdown list. The component includes search functionality, custom styling for selected items, and an icon from the AntDesign library.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  import React, { useState } from 'react';\n  import { StyleSheet, View } from 'react-native';\n  import { MultiSelect } from 'react-native-element-dropdown';\n  import AntDesign from '@expo/vector-icons/AntDesign';\n\n  const data = [\n    { label: 'Item 1', value: '1' },\n    { label: 'Item 2', value: '2' },\n    { label: 'Item 3', value: '3' },\n    { label: 'Item 4', value: '4' },\n    { label: 'Item 5', value: '5' },\n    { label: 'Item 6', value: '6' },\n    { label: 'Item 7', value: '7' },\n    { label: 'Item 8', value: '8' },\n  ];\n\n  const MultiSelectComponent = () => {\n    const [selected, setSelected] = useState([]);\n\n    return (\n      <View style={styles.container}>\n        <MultiSelect\n          style={styles.dropdown}\n          placeholderStyle={styles.placeholderStyle}\n          selectedTextStyle={styles.selectedTextStyle}\n          inputSearchStyle={styles.inputSearchStyle}\n          iconStyle={styles.iconStyle}\n          search\n          data={data}\n          labelField=\"label\"\n          valueField=\"value\"\n          placeholder=\"Select item\"\n          searchPlaceholder=\"Search...\"\n          value={selected}\n          onChange={item => {\n            setSelected(item);\n          }}\n          renderLeftIcon={() => (\n            <AntDesign\n              style={styles.icon}\n              color=\"black\"\n              name=\"Safety\"\n              size={20}\n            />\n          )}\n          selectedStyle={styles.selectedStyle}\n        />\n      </View>\n    );\n  };\n\n  export default MultiSelectComponent;\n\n  const styles = StyleSheet.create({\n    container: { padding: 16 },\n    dropdown: {\n      height: 50,\n      backgroundColor: 'transparent',\n      borderBottomColor: 'gray',\n      borderBottomWidth: 0.5,\n    },\n    placeholderStyle: {\n      fontSize: 16,\n    },\n    selectedTextStyle: {\n      fontSize: 14,\n    },\n    iconStyle: {\n      width: 20,\n      height: 20,\n    },\n    inputSearchStyle: {\n      height: 40,\n      fontSize: 16,\n    },\n    icon: {\n      marginRight: 5,\n    },\n    selectedStyle: {\n      borderRadius: 12,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating SelectCountry Component with Search in React Native\nDESCRIPTION: This snippet shows how to implement a SelectCountry component with search functionality using react-native-element-dropdown. It includes custom styling for the dropdown, placeholder, and selected item.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { SelectCountry } from 'react-native-element-dropdown';\n\nconst local_data = [\n  {\n    value: '1',\n    lable: 'Country 1',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '2',\n    lable: 'Country 2',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '3',\n    lable: 'Country 3',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '4',\n    lable: 'Country 4',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '5',\n    lable: 'Country 5',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n];\n\nconst SelectCountryScreen = _props => {\n  const [country, setCountry] = useState('1');\n\n  return (\n    <SelectCountry\n      style={styles.dropdown}\n      selectedTextStyle={styles.selectedTextStyle}\n      placeholderStyle={styles.placeholderStyle}\n      imageStyle={styles.imageStyle}\n      inputSearchStyle={styles.inputSearchStyle}\n      iconStyle={styles.iconStyle}\n      search\n      maxHeight={200}\n      value={country}\n      data={local_data}\n      valueField=\"value\"\n      labelField=\"lable\"\n      imageField=\"image\"\n      placeholder=\"Select country\"\n      searchPlaceholder=\"Search...\"\n      onChange={e => {\n        setCountry(e.value);\n      }}\n    />\n  );\n};\n\nexport default SelectCountryScreen;\n\nconst styles = StyleSheet.create({\n  dropdown: {\n    margin: 16,\n    height: 50,\n    borderBottomColor: 'gray',\n    borderBottomWidth: 0.5,\n  },\n  imageStyle: {\n    width: 24,\n    height: 24,\n  },\n  placeholderStyle: {\n    fontSize: 16,\n  },\n  selectedTextStyle: {\n    fontSize: 16,\n    marginLeft: 8,\n  },\n  iconStyle: {\n    width: 20,\n    height: 20,\n  },\n  inputSearchStyle: {\n    height: 40,\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown with Custom Item Rendering in React Native\nDESCRIPTION: This example demonstrates a dropdown with custom item rendering to show a check icon next to the selected item. The component uses a card-like appearance with shadow styling and includes search functionality.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  import React, { useState } from 'react';\n  import { StyleSheet, View, Text } from 'react-native';\n  import { Dropdown } from 'react-native-element-dropdown';\n  import AntDesign from '@expo/vector-icons/AntDesign';\n\n  const data = [\n    { label: 'Item 1', value: '1' },\n    { label: 'Item 2', value: '2' },\n    { label: 'Item 3', value: '3' },\n    { label: 'Item 4', value: '4' },\n    { label: 'Item 5', value: '5' },\n    { label: 'Item 6', value: '6' },\n    { label: 'Item 7', value: '7' },\n    { label: 'Item 8', value: '8' },\n  ];\n\n  const DropdownComponent = () => {\n    const [value, setValue] = useState(null);\n\n    const renderItem = item => {\n      return (\n        <View style={styles.item}>\n          <Text style={styles.textItem}>{item.label}</Text>\n          {item.value === value && (\n            <AntDesign\n              style={styles.icon}\n              color=\"black\"\n              name=\"Safety\"\n              size={20}\n            />\n          )}\n        </View>\n      );\n    };\n\n    return (\n      <Dropdown\n        style={styles.dropdown}\n        placeholderStyle={styles.placeholderStyle}\n        selectedTextStyle={styles.selectedTextStyle}\n        inputSearchStyle={styles.inputSearchStyle}\n        iconStyle={styles.iconStyle}\n        data={data}\n        search\n        maxHeight={300}\n        labelField=\"label\"\n        valueField=\"value\"\n        placeholder=\"Select item\"\n        searchPlaceholder=\"Search...\"\n        value={value}\n        onChange={item => {\n          setValue(item.value);\n        }}\n        renderLeftIcon={() => (\n          <AntDesign style={styles.icon} color=\"black\" name=\"Safety\" size={20} />\n        )}\n        renderItem={renderItem}\n      />\n    );\n  };\n\n  export default DropdownComponent;\n\n  const styles = StyleSheet.create({\n    dropdown: {\n      margin: 16,\n      height: 50,\n      backgroundColor: 'white',\n      borderRadius: 12,\n      padding: 12,\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 1,\n      },\n      shadowOpacity: 0.2,\n      shadowRadius: 1.41,\n\n      elevation: 2,\n    },\n    icon: {\n      marginRight: 5,\n    },\n    item: {\n      padding: 17,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    textItem: {\n      flex: 1,\n      fontSize: 16,\n    },\n    placeholderStyle: {\n      fontSize: 16,\n    },\n    selectedTextStyle: {\n      fontSize: 16,\n    },\n    iconStyle: {\n      width: 20,\n      height: 20,\n    },\n    inputSearchStyle: {\n      height: 40,\n      fontSize: 16,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Dropdown with Bottom Border in React Native\nDESCRIPTION: This example shows a minimalist dropdown implementation with a bottom border styling. The component includes search functionality and an icon from the AntDesign library, with a simplified configuration compared to the first example.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  import React, { useState } from 'react';\n  import { StyleSheet } from 'react-native';\n  import { Dropdown } from 'react-native-element-dropdown';\n  import AntDesign from '@expo/vector-icons/AntDesign';\n\n  const data = [\n    { label: 'Item 1', value: '1' },\n    { label: 'Item 2', value: '2' },\n    { label: 'Item 3', value: '3' },\n    { label: 'Item 4', value: '4' },\n    { label: 'Item 5', value: '5' },\n    { label: 'Item 6', value: '6' },\n    { label: 'Item 7', value: '7' },\n    { label: 'Item 8', value: '8' },\n  ];\n\n  const DropdownComponent = () => {\n    const [value, setValue] = useState(null);\n\n    return (\n      <Dropdown\n        style={styles.dropdown}\n        placeholderStyle={styles.placeholderStyle}\n        selectedTextStyle={styles.selectedTextStyle}\n        inputSearchStyle={styles.inputSearchStyle}\n        iconStyle={styles.iconStyle}\n        data={data}\n        search\n        maxHeight={300}\n        labelField=\"label\"\n        valueField=\"value\"\n        placeholder=\"Select item\"\n        searchPlaceholder=\"Search...\"\n        value={value}\n        onChange={item => {\n          setValue(item.value);\n        }}\n        renderLeftIcon={() => (\n          <AntDesign style={styles.icon} color=\"black\" name=\"Safety\" size={20} />\n        )}\n      />\n    );\n  };\n\n  export default DropdownComponent;\n\n  const styles = StyleSheet.create({\n    dropdown: {\n      margin: 16,\n      height: 50,\n      borderBottomColor: 'gray',\n      borderBottomWidth: 0.5,\n    },\n    icon: {\n      marginRight: 5,\n    },\n    placeholderStyle: {\n      fontSize: 16,\n    },\n    selectedTextStyle: {\n      fontSize: 16,\n    },\n    iconStyle: {\n      width: 20,\n      height: 20,\n    },\n    inputSearchStyle: {\n      height: 40,\n      fontSize: 16,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectCountry Component with Custom Styling in React Native\nDESCRIPTION: This snippet demonstrates how to create a SelectCountry component with custom styling using react-native-element-dropdown. It features a rounded dropdown with a gray background and custom image styling.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { SelectCountry } from 'react-native-element-dropdown';\n\nconst local_data = [\n  {\n    value: '1',\n    lable: 'Country 1',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '2',\n    lable: 'Country 2',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '3',\n    lable: 'Country 3',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '4',\n    lable: 'Country 4',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n  {\n    value: '5',\n    lable: 'Country 5',\n    image: {\n      uri: 'https://www.vigcenter.com/public/all/images/default-image.jpg',\n    },\n  },\n];\n\nconst SelectCountryScreen = _props => {\n  const [country, setCountry] = useState('1');\n\n  return (\n    <SelectCountry\n      style={styles.dropdown}\n      selectedTextStyle={styles.selectedTextStyle}\n      placeholderStyle={styles.placeholderStyle}\n      imageStyle={styles.imageStyle}\n      iconStyle={styles.iconStyle}\n      maxHeight={200}\n      value={country}\n      data={local_data}\n      valueField=\"value\"\n      labelField=\"lable\"\n      imageField=\"image\"\n      placeholder=\"Select country\"\n      searchPlaceholder=\"Search...\"\n      onChange={e => {\n        setCountry(e.value);\n      }}\n    />\n  );\n};\n\nexport default SelectCountryScreen;\n\nconst styles = StyleSheet.create({\n  dropdown: {\n    margin: 16,\n    height: 50,\n    width: 150,\n    backgroundColor: '#EEEEEE',\n    borderRadius: 22,\n    paddingHorizontal: 8,\n  },\n  imageStyle: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  placeholderStyle: {\n    fontSize: 16,\n  },\n  selectedTextStyle: {\n    fontSize: 16,\n    marginLeft: 8,\n  },\n  iconStyle: {\n    width: 20,\n    height: 20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown with Floating Label in React Native\nDESCRIPTION: This example demonstrates a dropdown component with a floating label that appears when the dropdown is focused or has a value. The component includes search functionality, custom styling based on focus state, and an icon from the AntDesign library.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  import React, { useState } from 'react';\n  import { StyleSheet, Text, View } from 'react-native';\n  import { Dropdown } from 'react-native-element-dropdown';\n  import AntDesign from '@expo/vector-icons/AntDesign';\n\n  const data = [\n    { label: 'Item 1', value: '1' },\n    { label: 'Item 2', value: '2' },\n    { label: 'Item 3', value: '3' },\n    { label: 'Item 4', value: '4' },\n    { label: 'Item 5', value: '5' },\n    { label: 'Item 6', value: '6' },\n    { label: 'Item 7', value: '7' },\n    { label: 'Item 8', value: '8' },\n  ];\n\n  const DropdownComponent = () => {\n    const [value, setValue] = useState(null);\n    const [isFocus, setIsFocus] = useState(false);\n\n    const renderLabel = () => {\n      if (value || isFocus) {\n        return (\n          <Text style={[styles.label, isFocus && { color: 'blue' }]}>\n            Dropdown label\n          </Text>\n        );\n      }\n      return null;\n    };\n\n    return (\n      <View style={styles.container}>\n        {renderLabel()}\n        <Dropdown\n          style={[styles.dropdown, isFocus && { borderColor: 'blue' }]}\n          placeholderStyle={styles.placeholderStyle}\n          selectedTextStyle={styles.selectedTextStyle}\n          inputSearchStyle={styles.inputSearchStyle}\n          iconStyle={styles.iconStyle}\n          data={data}\n          search\n          maxHeight={300}\n          labelField=\"label\"\n          valueField=\"value\"\n          placeholder={!isFocus ? 'Select item' : '...'}\n          searchPlaceholder=\"Search...\"\n          value={value}\n          onFocus={() => setIsFocus(true)}\n          onBlur={() => setIsFocus(false)}\n          onChange={item => {\n            setValue(item.value);\n            setIsFocus(false);\n          }}\n          renderLeftIcon={() => (\n            <AntDesign\n              style={styles.icon}\n              color={isFocus ? 'blue' : 'black'}\n              name=\"Safety\"\n              size={20}\n            />\n          )}\n        />\n      </View>\n    );\n  };\n\n  export default DropdownComponent;\n\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: 'white',\n      padding: 16,\n    },\n    dropdown: {\n      height: 50,\n      borderColor: 'gray',\n      borderWidth: 0.5,\n      borderRadius: 8,\n      paddingHorizontal: 8,\n    },\n    icon: {\n      marginRight: 5,\n    },\n    label: {\n      position: 'absolute',\n      backgroundColor: 'white',\n      left: 22,\n      top: 8,\n      zIndex: 999,\n      paddingHorizontal: 8,\n      fontSize: 14,\n    },\n    placeholderStyle: {\n      fontSize: 16,\n    },\n    selectedTextStyle: {\n      fontSize: 16,\n    },\n    iconStyle: {\n      width: 20,\n      height: 20,\n    },\n    inputSearchStyle: {\n      height: 40,\n      fontSize: 16,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiSelect Component in React Native\nDESCRIPTION: This snippet demonstrates how to create a MultiSelect component using react-native-element-dropdown. It includes custom rendering for selected items and dropdown items, along with styling for various parts of the component.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { StyleSheet, View, TouchableOpacity, Text } from 'react-native';\nimport { MultiSelect } from 'react-native-element-dropdown';\nimport AntDesign from '@expo/vector-icons/AntDesign';\n\nconst data = [\n  { label: 'Item 1', value: '1' },\n  { label: 'Item 2', value: '2' },\n  { label: 'Item 3', value: '3' },\n  { label: 'Item 4', value: '4' },\n  { label: 'Item 5', value: '5' },\n  { label: 'Item 6', value: '6' },\n  { label: 'Item 7', value: '7' },\n  { label: 'Item 8', value: '8' },\n];\n\nconst MultiSelectComponent = () => {\n  const [selected, setSelected] = useState([]);\n\n  const renderItem = item => {\n    return (\n      <View style={styles.item}>\n        <Text style={styles.selectedTextStyle}>{item.label}</Text>\n        <AntDesign style={styles.icon} color=\"black\" name=\"Safety\" size={20} />\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <MultiSelect\n        style={styles.dropdown}\n        placeholderStyle={styles.placeholderStyle}\n        selectedTextStyle={styles.selectedTextStyle}\n        inputSearchStyle={styles.inputSearchStyle}\n        iconStyle={styles.iconStyle}\n        data={data}\n        labelField=\"label\"\n        valueField=\"value\"\n        placeholder=\"Select item\"\n        value={selected}\n        search\n        searchPlaceholder=\"Search...\"\n        onChange={item => {\n          setSelected(item);\n        }}\n        renderLeftIcon={() => (\n          <AntDesign\n            style={styles.icon}\n            color=\"black\"\n            name=\"Safety\"\n            size={20}\n          />\n        )}\n        renderItem={renderItem}\n        renderSelectedItem={(item, unSelect) => (\n          <TouchableOpacity onPress={() => unSelect && unSelect(item)}>\n            <View style={styles.selectedStyle}>\n              <Text style={styles.textSelectedStyle}>{item.label}</Text>\n              <AntDesign color=\"black\" name=\"delete\" size={17} />\n            </View>\n          </TouchableOpacity>\n        )}\n      />\n    </View>\n  );\n};\n\nexport default MultiSelectComponent;\n\nconst styles = StyleSheet.create({\n  container: { padding: 16 },\n  dropdown: {\n    height: 50,\n    backgroundColor: 'white',\n    borderRadius: 12,\n    padding: 12,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 1.41,\n\n    elevation: 2,\n  },\n  placeholderStyle: {\n    fontSize: 16,\n  },\n  selectedTextStyle: {\n    fontSize: 14,\n  },\n  iconStyle: {\n    width: 20,\n    height: 20,\n  },\n  inputSearchStyle: {\n    height: 40,\n    fontSize: 16,\n  },\n  icon: {\n    marginRight: 5,\n  },\n  item: {\n    padding: 17,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  selectedStyle: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 14,\n    backgroundColor: 'white',\n    shadowColor: '#000',\n    marginTop: 8,\n    marginRight: 12,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 1.41,\n\n    elevation: 2,\n  },\n  textSelectedStyle: {\n    marginRight: 5,\n    fontSize: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Component Type Definition\nDESCRIPTION: TypeScript interface showing all available props for the MultiSelect component including UI customization, data handling, and interaction callbacks.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MultiSelectProps {\n  mode?: 'default' | 'modal' | 'auto';\n  data: Array<any>;\n  labelField: string;\n  valueField: string;\n  searchField?: string;\n  onChange: (value: any[]) => void;\n  onChangeText?: (search: string) => void;\n  value?: any[];\n  placeholder?: string;\n  placeholderStyle?: TextStyle;\n  style?: ViewStyle;\n  containerStyle?: ViewStyle;\n  maxHeight?: number;\n  minHeight?: number;\n  maxSelect?: number;\n  fontFamily?: string;\n  iconStyle?: ImageStyle;\n  iconColor?: string;\n  activeColor?: string;\n  itemContainerStyle?: TextStyle;\n  itemTextStyle?: TextStyle;\n  selectedStyle?: ViewStyle;\n  selectedTextStyle?: TextStyle;\n  selectedTextProps?: TextProps;\n  renderSelectedItem?: (item: object, unSelect?: () => void) => JSX.Element;\n  alwaysRenderSelectedItem?: boolean;\n  visibleSelectedItem?: boolean;\n  search?: boolean;\n  searchQuery?: (keyword: string, labelValue: string) => boolean;\n  inputSearchStyle?: ViewStyle;\n  searchPlaceholder?: string;\n  searchPlaceholderTextColor?: string;\n  renderInputSearch?: (onSearch: (text: string) => void) => JSX.Element;\n  disable?: boolean;\n  dropdownPosition?: 'auto' | 'top' | 'bottom';\n  showsVerticalScrollIndicator?: boolean;\n  renderLeftIcon?: (visible?: boolean) => JSX.Element;\n  renderRightIcon?: (visible?: boolean) => JSX.Element;\n  renderItem?: (item: object, selected: boolean) => JSX.Element;\n  flatListProps?: FlatListProps;\n  inverted?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  keyboardAvoiding?: boolean;\n  inside?: boolean;\n  backgroundColor?: string;\n  confirmSelectItem?: boolean;\n  confirmUnSelectItem?: boolean;\n  onConfirmSelectItem?: (item: any) => void;\n  testID?: string;\n  itemTestIDField?: string;\n  accessibilityLabel?: string;\n  itemAccessibilityLabelField?: string;\n  excludeItems?: any[];\n  excludeSearchItems?: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: SelectCountry Component Extension\nDESCRIPTION: Additional props specific to the SelectCountry component which extends the base Dropdown component to include image handling capabilities.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectCountryProps extends DropdownProps {\n  imageField: string;\n  imageStyle?: ImageStyle;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Methods Interface\nDESCRIPTION: Available methods for controlling the dropdown component programmatically, including open and close functionality.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DropdownMethods {\n  open: () => void;\n  close: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Element Dropdown via npm\nDESCRIPTION: Command to install the react-native-element-dropdown library using npm package manager.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install react-native-element-dropdown --save\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Element Dropdown via yarn\nDESCRIPTION: Command to install the react-native-element-dropdown library using yarn package manager.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nyarn add react-native-element-dropdown\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install required dependencies for each package in the root directory of the project using Yarn.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Packager for the Example App\nDESCRIPTION: Command to start the Metro packager to run the example app during development.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn example start\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on Android\nDESCRIPTION: Command to run the example app on an Android device or emulator.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn example android\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on iOS\nDESCRIPTION: Command to run the example app on an iOS device or simulator.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn example ios\n```\n\n----------------------------------------\n\nTITLE: Running the Example App on Web\nDESCRIPTION: Command to run the example app in a web browser for testing web compatibility.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn example web\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript and ESLint Checks\nDESCRIPTION: Commands to verify that the code passes TypeScript type checking and ESLint rules.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn typecheck\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Fixing Formatting Errors with ESLint\nDESCRIPTION: Command to automatically fix formatting errors detected by ESLint.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run the unit tests for the project using Jest.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Publishing New Versions to NPM\nDESCRIPTION: Command to publish new versions of the package to NPM using release-it, which handles version bumping, tagging, and releases.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/CONTRIBUTING.md#2025-04-19_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Appreciation Message for React Native Element Dropdown\nDESCRIPTION: A message encouraging users to star the library repository if they find it useful.\nSOURCE: https://github.com/hoaphantn7604/react-native-element-dropdown/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nIf you love this library, give us a star, you will be a ray of sunshine in our lives :)\n```"
  }
]